/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lwip.h"
#include "app_cli.h"
#include "FreeRTOS_CLI.h"
#include "socket.h"
#include "semphr.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
extern struct netif gnetif;
extern int8_t cRxedChar;
extern char cOutputBuffer[configCOMMAND_INT_MAX_OUTPUT_SIZE], pcInputString[MAX_INPUT_LENGTH];
/* USER CODE END Variables */
/* Definitions for vInitTask */
osThreadId_t vInitTaskHandle;
const osThreadAttr_t vInitTask_attributes = {
  .name = "vInitTask",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for vClientTask */
osThreadId_t vClientTaskHandle;
const osThreadAttr_t vClientTask_attributes = {
  .name = "vClientTask",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for vCmdTask */
osThreadId_t vCmdTaskHandle;
const osThreadAttr_t vCmdTask_attributes = {
  .name = "vCmdTask",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for dhcpSem */
osSemaphoreId_t dhcpSemHandle;
const osSemaphoreAttr_t dhcpSem_attributes = {
  .name = "dhcpSem"
};
/* Definitions for uartConfigSem */
osSemaphoreId_t uartConfigSemHandle;
const osSemaphoreAttr_t uartConfigSem_attributes = {
  .name = "uartConfigSem"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartInitTask(void *argument);
void StartClientTask(void *argument);
void vStartCmdTask(void *argument);

extern void MX_LWIP_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
/* USER CODE END 1 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(StartInitTask, NULL, &vInitTask_attributes);

  /* creation of vClientTask */
//  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);

  /* creation of vCmdTask */
//  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
//  vTaskSuspend((TaskHandle_t)vClientTaskHandle);
//  vTaskSuspend((TaskHandle_t)vCmdTaskHandle);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartInitTask */
/**
  * @brief  Function implementing the vInitTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
  /* init code for LWIP */
  MX_LWIP_Init();
  /* USER CODE BEGIN StartInitTask */
  HAL_Delay(5000);
//  while (gnetif.ip_addr.addr == 0){};
  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
	  {
		  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);
		  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
//		  vTaskResume((TaskHandle_t)vClientTaskHandle);
//		  vTaskResume((TaskHandle_t)vCmdTaskHandle);
		  vTaskDelete(NULL);

	  }
      osDelay(1);
  }
  /* USER CODE END StartInitTask */
}

/* USER CODE BEGIN Header_StartClientTask */
/**
* @brief Function implementing the vClientTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClientTask */
void StartClientTask(void *argument)
{
  /* USER CODE BEGIN StartClientTask */
	  struct sockaddr_in remout_host;
	  int s;

	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	  remout_host.sin_family = AF_INET;
	  remout_host.sin_port = htons(23);
	  ip4addr_aton("192.168.0.10",(ip4_addr_t*)&remout_host.sin_addr);
	  lwip_connect(s, (struct sockaddr *)&remout_host, sizeof(struct sockaddr_in));
	  lwip_write(s, "Hello\n\r", sizeof("Hello\n\r"));



	  /* Infinite loop */
	  for(;;)
	  {
		lwip_recv(s, buf, 30, 0);
		HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xffff);
		memset(buf, (uint32_t)'\0', sizeof(buf));
	    osDelay(300);

	  }
  /* USER CODE END StartClientTask */
}

/* USER CODE BEGIN Header_vStartCmdTask */
/**
* @brief Function implementing the vCmdTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
    uint32_t receivedValue; // used to store the received value from the notification
    vRegisterCLICommands();

    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
                                  0,  // Clear all bits on exit
                                  &receivedValue, // Receives the notification value
                                  portMAX_DELAY); // Wait indefinitely
        //echo recevied char
        cRxedChar = receivedValue & 0xFF;
        cliWrite((char *)&cRxedChar);
        if (cRxedChar == '\r' || cRxedChar == '\n')
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
        }
    }
  /* USER CODE END vStartCmdTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

