/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lwip.h"
#include "app_cli.h"
#include "FreeRTOS_CLI.h"
#include "socket.h"
#include "semphr.h"
#include "ssl_client.h"
#include "fatfs.h"
#include "printf_uart.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticTask_t osStaticThreadDef_t;
typedef StaticQueue_t osStaticMessageQDef_t;
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
extern struct netif gnetif;
extern uint8_t cRxedChar;
extern char cOutputBuffer[configCOMMAND_INT_MAX_OUTPUT_SIZE], pcInputString[MAX_INPUT_LENGTH];

/* USER CODE END Variables */
/* Definitions for vInitTask */
osThreadId_t vInitTaskHandle;
uint32_t vInitTaskBuffer[ 512 ];
osStaticThreadDef_t vInitTaskControlBlock;
const osThreadAttr_t vInitTask_attributes = {
  .name = "vInitTask",
  .cb_mem = &vInitTaskControlBlock,
  .cb_size = sizeof(vInitTaskControlBlock),
  .stack_mem = &vInitTaskBuffer[0],
  .stack_size = sizeof(vInitTaskBuffer),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for vCmdTask */
osThreadId_t vCmdTaskHandle;
uint32_t vCmdTaskBuffer[ 4096 ];
osStaticThreadDef_t vCmdTaskControlBlock;
const osThreadAttr_t vCmdTask_attributes = {
  .name = "vCmdTask",
  .cb_mem = &vCmdTaskControlBlock,
  .cb_size = sizeof(vCmdTaskControlBlock),
  .stack_mem = &vCmdTaskBuffer[0],
  .stack_size = sizeof(vCmdTaskBuffer),
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* Definitions for vClientTask */
osThreadId_t vClientTaskHandle;
uint32_t vClientTaskBuffer[ 2048 ];
osStaticThreadDef_t vClientTaskControlBlock;
const osThreadAttr_t vClientTask_attributes = {
  .name = "vClientTask",
  .cb_mem = &vClientTaskControlBlock,
  .cb_size = sizeof(vClientTaskControlBlock),
  .stack_mem = &vClientTaskBuffer[0],
  .stack_size = sizeof(vClientTaskBuffer),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for vFatFSTask */
osThreadId_t vFatFSTaskHandle;
uint32_t vFatFSTaskBuffer[ 2048 ];
osStaticThreadDef_t vFatFSTaskControlBlock;
const osThreadAttr_t vFatFSTask_attributes = {
  .name = "vFatFSTask",
  .cb_mem = &vFatFSTaskControlBlock,
  .cb_size = sizeof(vFatFSTaskControlBlock),
  .stack_mem = &vFatFSTaskBuffer[0],
  .stack_size = sizeof(vFatFSTaskBuffer),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for structFSQueue */
osMessageQueueId_t structFSQueueHandle;
uint8_t structFSQueuBuffer[ 16 * sizeof( fatfs_struct_t ) ];
osStaticMessageQDef_t structFSQueuControlBlock;
const osMessageQueueAttr_t structFSQueue_attributes = {
  .name = "structFSQueue",
  .cb_mem = &structFSQueuControlBlock,
  .cb_size = sizeof(structFSQueuControlBlock),
  .mq_mem = &structFSQueuBuffer,
  .mq_size = sizeof(structFSQueuBuffer)
};
/* Definitions for printMux */
osMutexId_t printMuxHandle;
const osMutexAttr_t printMux_attributes = {
  .name = "printMux"
};
/* Definitions for connectSem */
osSemaphoreId_t connectSemHandle;
const osSemaphoreAttr_t connectSem_attributes = {
  .name = "connectSem"
};
/* Definitions for uartConfigSem */
osSemaphoreId_t uartConfigSemHandle;
const osSemaphoreAttr_t uartConfigSem_attributes = {
  .name = "uartConfigSem"
};
/* Definitions for fsSem */
osSemaphoreId_t fsSemHandle;
const osSemaphoreAttr_t fsSem_attributes = {
  .name = "fsSem"
};
/* Definitions for printSem */
osSemaphoreId_t printSemHandle;
const osSemaphoreAttr_t printSem_attributes = {
  .name = "printSem"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void vStartInitTask(void *argument);
void vStartCmdTask(void *argument);
void vStartClientTask(void *argument);
void vStartFatFSTask(void *argument);

extern void MX_LWIP_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
/* USER CODE END 1 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of printMux */
  printMuxHandle = osMutexNew(&printMux_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of connectSem */
  connectSemHandle = osSemaphoreNew(1, 0, &connectSem_attributes);

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);

  /* creation of fsSem */
  fsSemHandle = osSemaphoreNew(1, 0, &fsSem_attributes);

  /* creation of printSem */
  printSemHandle = osSemaphoreNew(1, 0, &printSem_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structFSQueue */
  structFSQueueHandle = osMessageQueueNew (16, sizeof(fatfs_struct_t), &structFSQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(vStartInitTask, NULL, &vInitTask_attributes);

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);

  /* creation of vClientTask */
  vClientTaskHandle = osThreadNew(vStartClientTask, NULL, &vClientTask_attributes);

  /* creation of vFatFSTask */
  vFatFSTaskHandle = osThreadNew(vStartFatFSTask, NULL, &vFatFSTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
//  vTaskSuspend((TaskHandle_t)vClientTaskHandle);
//  vTaskSuspend((TaskHandle_t)vCmdTaskHandle);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_vStartInitTask */
/**
  * @brief  Function implementing the vInitTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vStartInitTask */
void vStartInitTask(void *argument)
{
  /* init code for LWIP */
  MX_LWIP_Init();
  /* USER CODE BEGIN vStartInitTask */
//  portTICK_TYPE_ENTER_CRITICAL();
  HAL_Delay(15000);

  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
	  {
		  HAL_UART_Transmit(&huart3, "IP address assigned", sizeof"IP address assigned", 0xffff);
		  vTaskSuspend(NULL);

	  }
//	  portTICK_TYPE_EXIT_CRITICAL();
    osDelay(1);
  }
  /* USER CODE END vStartInitTask */
}

/* USER CODE BEGIN Header_vStartCmdTask */
/**
* @brief Function implementing the vCmdTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
    vRegisterCLICommands();
    cliWrite("Start cli\r\n");
    cliWrite(cli_prompt);

    for (;;)
    {
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar);
        if (cRxedChar == '\r' || cRxedChar == '\n')
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
        }
        osDelay(100);
    }
  /* USER CODE END vStartCmdTask */
}

/* USER CODE BEGIN Header_vStartClientTask */
/**
* @brief Function implementing the vClientTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartClientTask */
void vStartClientTask(void *argument)
{
  /* USER CODE BEGIN vStartClientTask */
	  struct sockaddr_in remout_host;
	  int s;
	  uint32_t ret_con;
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 	  remout_host.sin_family = AF_INET;
 	  remout_host.sin_port = htons(remout_port);//remout_port
 	  ip4addr_aton((char*)remout_ip,(ip4_addr_t*)&remout_host.sin_addr); //"192.168.0.10" 13.215.82.137
 	  ret_con = ssl_client(&s, &remout_host);
 	  xTaskNotify(cliTaskHandle[0], ret_con, eSetValueWithOverwrite);
 		taskYIELD();
    osDelay(10);
  }
  /* USER CODE END vStartClientTask */
}

/* USER CODE BEGIN Header_vStartFatFSTask */
/**
* @brief Function implementing the vFatFSTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartFatFSTask */
void vStartFatFSTask(void *argument)
{
  /* USER CODE BEGIN vStartFatFSTask */
	uint32_t ret_fs;
	char* name;
	uint32_t read_byte;
  /* Infinite loop */
  for(;;)
  {
//	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
//	  switch ( ) {
//		case 1 ... 2:
	  xTaskNotifyWait(0, 0, (uint32_t)name, portMAX_DELAY);
	  ret_fs = mount_fs(&fs, 1);
			if (ret_fs != 0)
			{
				cliWrite("Failed mount\r\n");
			}
			else
			{
				cliWrite("Success mount\r\n");
			}
//			osDelay(3000);
//			for (int i = 0;i < 100;i++)
//			{
//				ret_fs = write_fs("WolfFile.txt", "Work on Wolf lib5\r\n");
//
//			}
//
//			if (ret_fs != 0)
//			{
//				cliWrite("Failed writed\r\n");
//			}
//			else
//			{
//				cliWrite("Success writed\r\n");
//			}

//			ret_fs = read_fs(name, buf, LEN_CERT_FILE, &read_byte);
//			if (ret_fs != 0)
//			{
//				cliWrite("Failed read\r\n");
//			}
//			else
//			{
//				cliWrite("Success read\r\n");
//			}
//
//			cliWrite("\r\n");
//			cliWrite((char *)buf);
//			cliWrite("\r\n");
//			vTaskPrioritySet(vFatFSTaskHandle, osPriorityNormal);
			for (int i = 5; i >= 0; --i) {
				if (cliTaskHandle[i] != NULL)
				{

					xTaskNotify(cliTaskHandle[i], read_byte, eSetValueWithOverwrite);
					cliTaskHandle[i] = NULL;
					taskYIELD();
					break;
				}

			}
//			break;
//		case 3:
//			if (freq != freqRef)
//			{
//				statusClk = SysClockPLLConfig();
//			}
//			res_fs = write_fs(&text[0], &text[1]);
//			break;
//		default:
//			break;
//	}
    osDelay(500);
  }
  /* USER CODE END vStartFatFSTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

