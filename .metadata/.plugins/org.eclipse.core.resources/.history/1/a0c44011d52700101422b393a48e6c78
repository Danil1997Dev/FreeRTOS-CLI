/*
 * ssl_client.c
 *
 *  Created on: Mar 30, 2025
 *      Author: user
 */


#include "ssl_client.h"

const char root_cert_pem[] =
		"-----BEGIN CERTIFICATE-----\n"
		"MIIDxTCCAq2gAwIBAgIQAmE4fDe0OaWE+qFSUtrI6jANBgkqhkiG9w0BAQUFADBs\n"
		"MRMwEQYKCZImiZPyLGQBGRYDY29tMR0wGwYKCZImiZPyLGQBGRYNRGlnaUNlcnQt\n"
		"R3JpZDEWMBQGA1UEChMNRGlnaUNlcnQgR3JpZDEeMBwGA1UEAxMVRGlnaUNlcnQg\n"
		"R3JpZCBSb290IENBMB4XDTExMTIwNzEyMDAwMFoXDTM2MTIwNzEyMDAwMFowbDET\n"
		"MBEGCgmSJomT8ixkARkWA2NvbTEdMBsGCgmSJomT8ixkARkWDURpZ2lDZXJ0LUdy\n"
		"aWQxFjAUBgNVBAoTDURpZ2lDZXJ0IEdyaWQxHjAcBgNVBAMTFURpZ2lDZXJ0IEdy\n"
		"aWQgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL1Yym5/\n"
		"MKraEAE4RKX8Suurhv5isaeNW1GoQV+jCo1fN0DEXWG/SBW27OIJ1slHI3pp68+j\n"
		"pzdzpB7jJ7L25vgkIhKyUvf3VYqFRvdnVCouC3OIknilWO1J/spASh6/BS8tD2Z6\n"
		"PE/n/NrqMkF6lZZuQuSooicEZkcxCmyM2Vp7XQXe+qCzILYsp5rEX4FXclT0SMiX\n"
		"jVSlR+qKNhinecW6IW1mqSluMY9k/3ze5KmdjnhivJ+EKt9cUk1zMxSr//KjV7XA\n"
		"d4IiQn3wi9sTWCdokVoVTrmMmksVYcjeq3Xcod/LiziqyqHo+c6uMSN5c3Hg2X1O\n"
		"xU2UYWPIE1GQ02kCAwEAAaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\n"
		"BAMCAYYwHQYDVR0OBBYEFD3I1LO5oXdQl1ARUKg55RxTY8ZwMB8GA1UdIwQYMBaA\n"
		"FD3I1LO5oXdQl1ARUKg55RxTY8ZwMA0GCSqGSIb3DQEBBQUAA4IBAQCTaCdkxfOe\n"
		"gOJmMqoklLIqhaqbuH1D5RDzSsXET3iDABtxbcbuFr8LHEROICWOWVZi3VQih+f1\n"
		"80wXqRaD8BkCpbKFzFMWCuOUmN5307v06gIjUAfKKyJumdI2WDaHcj65GAU17vdO\n"
		"l8bP35sBNaO+O2ksL9XQfHuEdmkyi8UcdlkG9jQvsV89oMVcom8C7ATDUV7vpGEM\n"
		"+teq7zkw8r6+VzJvNrfykPOLavN/gkKJwlAfa0muPi2E7uxK85059jwSc9ucpyaF\n"
		"H/O8BdLIR2z2UmsAbnraQFMWS0SFvFfUH0BccrAEJ5RvLEMlXBy9haeNLTua7May\n"
		"2amGScIUFi6R\n"
		"-----END CERTIFICATE-----\n";



int ssl_client(int *sockfd, struct sockaddr_in *servAddr)
{
//    int sockfd;
    WOLFSSL_CTX* ctx;
    WOLFSSL* ssl;
    WOLFSSL_METHOD* method;
    char *cli_msg;
    uint32_t res;
//    struct  sockaddr_in servAddr;
    const char message[] = "Hello, World!--------------------------------";

//    /* create and set up socket */
//    sockfd = socket(AF_INET, SOCK_STREAM, 0);
//    memset(&servAddr, 0, sizeof(servAddr));
//    servAddr.sin_family = AF_INET;
//    servAddr.sin_port = htons(SERV_PORT);

    /* initialize wolfssl library */
    wolfSSL_Init();
    wolfSSL_Debugging_ON();
    method = wolfTLSv1_2_client_method(); /* use TLS v1.2 */

    /* make new ssl context */
    if ((ctx = wolfSSL_CTX_new(method)) == NULL) {
        sprintf(cli_msg,"Failed to wolfSSL_CTX_new\n");
        goto cleanup;
    }

    /* Add cert to ctx */
    res = wolfSSL_CTX_load_verify_buffer(ctx,
                root_cert_pem,
                strlen(root_cert_pem),
                SSL_FILETYPE_PEM);
    if (res != SSL_SUCCESS) {
        sprintf(cli_msg,"Failed to wolfSSL_CTX_load_verify_locations\n");
        goto exit;
    }
//    wolfSSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, NULL);
//    wolfSSL_CTX_set_verify(ctx, SSL_VERIFY_NONE, NULL);
    /* make new wolfSSL struct */
    if ((ssl = wolfSSL_new(ctx)) == NULL) {
        sprintf(cli_msg,"Failed to wolfSSL_new\n");
        goto free_ctx;
    }




//    if (load_cert(ctx, &root_cert_pem[0]) != SSL_SUCCESS) {
//        sprintf(cli_msg,"Failed to wolfSSL_CTX_load_verify_locations\n");
//        goto exit;
//    }
//    cliWrite(root_cert_pem);


    /* connect to socket */
    cliWrite((char *)"Connection...\r\n");
    lwip_connect(*sockfd, (struct sockaddr *) servAddr, sizeof(*servAddr));
//    lwip_write(*sockfd, "C-------------------------------------\n\r", sizeof("C-------------------------------------\n\r"));



    /* Connect wolfssl to the socket, server, then send message */
    wolfSSL_set_fd(ssl, *sockfd);
    res = wolfSSL_connect(ssl);
    if (res != SSL_SUCCESS)
    {
    	cliWrite((char *)"Fail connection\r\n");
    	return 1;
    }
    /* frees all data before client termination */
exit:
    wolfSSL_free(ssl);
    close(*sockfd);
free_ctx:
    wolfSSL_CTX_free(ctx);
cleanup:
    wolfSSL_Cleanup();
    return 0;
}

int load_cert(WOLFSSL_CTX *ctx, char *root_cert_pem)
{
//	char *cli_msg;
//
//	uint32_t bytesReading;
//	mount_fs(&fs, FS_MOUNT);
//
//	read_fs((uint8_t *)"binance.pem", (uint8_t *)root_cert_pem, (uint32_t)LEN_CERT_FILE, &bytesReading);

//	xSemaphoreGive(fsSemHandle);
//	*(root_cert_pem+bytesReading) = '\0';
//	xQueueReceive(structFSQueueHandle, pvBuffer, portMAX_DELAY);
	cliWrite("\r\n");
	cliWrite((char *)root_cert_pem);
	cliWrite("\r\n");


    return wolfSSL_CTX_load_verify_buffer(ctx,
            (const unsigned char*)root_cert_pem,
            strlen(root_cert_pem),
            SSL_FILETYPE_PEM) ;
}
