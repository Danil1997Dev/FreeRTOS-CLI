
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021958  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bd4  08021ae8  08021ae8  00022ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080256bc  080256bc  00027218  2**0
                  CONTENTS
  4 .ARM          00000008  080256bc  080256bc  000266bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080256c4  080256c4  00027218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080256c4  080256c4  000266c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080256c8  080256c8  000266c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  080256cc  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00027218  2**0
                  CONTENTS
 10 .bss          0001782c  20000218  20000218  00027218  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  20017a44  20017a44  00027218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e886  00000000  00000000  00027248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a06e  00000000  00000000  00065ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ee0  00000000  00000000  0006fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000024d6  00000000  00000000  00072a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039cc9  00000000  00000000  00074ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a95a  00000000  00000000  000aebbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105abd  00000000  00000000  000f9519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001fefd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d5bc  00000000  00000000  001ff01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0020c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021ad0 	.word	0x08021ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08021ad0 	.word	0x08021ad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00e ffe4 	bl	800ffdc <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f01d fb9f 	bl	801e7ca <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f01d fb75 	bl	801e7ee <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f01d fb58 	bl	801e7ee <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000234 	.word	0x20000234
 8001150:	20000000 	.word	0x20000000
 8001154:	08021b20 	.word	0x08021b20
 8001158:	08021b78 	.word	0x08021b78

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00e fd9f 	bl	800fd98 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00e fdc2 	bl	800fdfc <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f01d fa9f 	bl	801e7ee <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000238 	.word	0x20000238
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e002      	b.n	800135e <_write+0x18>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf8      	blt.n	8001358 <_write+0x12>
        // Send the character
//    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	2100      	movs	r1, #0
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f01d fa0b 	bl	801e7a0 <memset>
    printf("\033[2J\033[1;1H");
 800138a:	4804      	ldr	r0, [pc, #16]	@ (800139c <cmd_clearScreen+0x28>)
 800138c:	f01d f8d4 	bl	801e538 <iprintf>
    return pdFALSE;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08021bd4 	.word	0x08021bd4

080013a0 <cmd_fs>:
//*****************************************************************************
BaseType_t cmd_fs(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
    const char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	461a      	mov	r2, r3
 80013b2:	2101      	movs	r1, #1
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fed1 	bl	800115c <FreeRTOS_CLIGetParameter>
 80013ba:	6278      	str	r0, [r7, #36]	@ 0x24
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    if (pcParameter1 == (const char *)"-m")
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	4a1a      	ldr	r2, [pc, #104]	@ (8001428 <cmd_fs+0x88>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d104      	bne.n	80013ce <cmd_fs+0x2e>
    {
    	mount_fs(&fs, FS_MOUNT);
 80013c4:	2101      	movs	r1, #1
 80013c6:	4819      	ldr	r0, [pc, #100]	@ (800142c <cmd_fs+0x8c>)
 80013c8:	f007 fb9c 	bl	8008b04 <mount_fs>
 80013cc:	e013      	b.n	80013f6 <cmd_fs+0x56>

    }
    else if (pcParameter1 == (const char *)"-u")
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <cmd_fs+0x90>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d104      	bne.n	80013e0 <cmd_fs+0x40>
    {
    	mount_fs(&fs, FS_UNMOUNT);
 80013d6:	2102      	movs	r1, #2
 80013d8:	4814      	ldr	r0, [pc, #80]	@ (800142c <cmd_fs+0x8c>)
 80013da:	f007 fb93 	bl	8008b04 <mount_fs>
 80013de:	e00a      	b.n	80013f6 <cmd_fs+0x56>

    }
    else
    {

    	strcpy(pcWriteBuffer, (char *)"incorrect parameter");
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <cmd_fs+0x94>)
 80013e4:	461d      	mov	r5, r3
 80013e6:	4614      	mov	r4, r2
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	6028      	str	r0, [r5, #0]
 80013ec:	6069      	str	r1, [r5, #4]
 80013ee:	60aa      	str	r2, [r5, #8]
 80013f0:	60eb      	str	r3, [r5, #12]
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	6128      	str	r0, [r5, #16]
    }
    xSemaphoreGive(fsSemHandle);
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <cmd_fs+0x98>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	f00c f950 	bl	800d6a4 <xQueueGenericSend>
    uint8_t string[] = "\r\nfs comlited\r\n";
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <cmd_fs+0x9c>)
 8001406:	f107 0410 	add.w	r4, r7, #16
 800140a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strcpy(pcWriteBuffer, (char *)string);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f01d fb1d 	bl	801ea56 <strcpy>

    return pdFALSE;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bdb0      	pop	{r4, r5, r7, pc}
 8001426:	bf00      	nop
 8001428:	08021be0 	.word	0x08021be0
 800142c:	20008cd8 	.word	0x20008cd8
 8001430:	08021be4 	.word	0x08021be4
 8001434:	08021be8 	.word	0x08021be8
 8001438:	20008a94 	.word	0x20008a94
 800143c:	08021bfc 	.word	0x08021bfc

08001440 <cmd_connect>:
//*****************************************************************************
BaseType_t cmd_connect(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08f      	sub	sp, #60	@ 0x3c
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
    BaseType_t xParameter1StringLength, xParameter2StringLength;
    char *addr_len;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 800144c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001450:	461a      	mov	r2, r3
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe81 	bl	800115c <FreeRTOS_CLIGetParameter>
 800145a:	6378      	str	r0, [r7, #52]	@ 0x34
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    pcParameter2 = FreeRTOS_CLIGetParameter
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	461a      	mov	r2, r3
 8001462:	2102      	movs	r1, #2
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe79 	bl	800115c <FreeRTOS_CLIGetParameter>
 800146a:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
						  &xParameter2StringLength
                        );

    remout_port = atoi(pcParameter2);
 800146c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800146e:	f01b fedc 	bl	801d22a <atoi>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <cmd_connect+0x90>)
 8001478:	801a      	strh	r2, [r3, #0]
    addr_len = strstr(pcParameter1, " ");
 800147a:	2120      	movs	r1, #32
 800147c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800147e:	f01d f997 	bl	801e7b0 <strchr>
 8001482:	62f8      	str	r0, [r7, #44]	@ 0x2c
    *addr_len = '\0';
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
    remout_ip = (char *)pcParameter1;
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <cmd_connect+0x94>)
 800148c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800148e:	6013      	str	r3, [r2, #0]
    uint8_t string[] = "\r\nConnected!\r\n";
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <cmd_connect+0x98>)
 8001492:	f107 0414 	add.w	r4, r7, #20
 8001496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001498:	c407      	stmia	r4!, {r0, r1, r2}
 800149a:	8023      	strh	r3, [r4, #0]
 800149c:	3402      	adds	r4, #2
 800149e:	0c1b      	lsrs	r3, r3, #16
 80014a0:	7023      	strb	r3, [r4, #0]
    cliWrite((char *)"Connection...\r\n", (uint32_t)strlen("Connection...\r\n"));
 80014a2:	210f      	movs	r1, #15
 80014a4:	480d      	ldr	r0, [pc, #52]	@ (80014dc <cmd_connect+0x9c>)
 80014a6:	f000 f83b 	bl	8001520 <cliWrite>
    xSemaphoreGive(connectSemHandle);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <cmd_connect+0xa0>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	f00c f8f6 	bl	800d6a4 <xQueueGenericSend>
    strcpy(pcWriteBuffer, (char *)string);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f01d fac9 	bl	801ea56 <strcpy>

    return pdFALSE;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	373c      	adds	r7, #60	@ 0x3c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000a70 	.word	0x20000a70
 80014d4:	20000010 	.word	0x20000010
 80014d8:	08021c1c 	.word	0x08021c1c
 80014dc:	08021c0c 	.word	0x08021c0c
 80014e0:	20008a8c 	.word	0x20008a8c

080014e4 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	e009      	b.n	8001504 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4a09      	ldr	r2, [pc, #36]	@ (800151c <vRegisterCLICommands+0x38>)
 80014f6:	4413      	add	r3, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd73 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <vRegisterCLICommands+0x38>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <vRegisterCLICommands+0xc>
    }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	08024ec8 	.word	0x08024ec8

08001520 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str, uint32_t len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
//   printf("%s", str);
//   // flush stdout
//   fflush(stdout);
	msg_struct.print_msg = str;
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <cliWrite+0x2c>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6013      	str	r3, [r2, #0]
	msg_struct.len = len;
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <cliWrite+0x2c>)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6053      	str	r3, [r2, #4]
	xSemaphoreGive(printSemHandle);
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <cliWrite+0x30>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	f00c f8b0 	bl	800d6a4 <xQueueGenericSend>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000a74 	.word	0x20000a74
 8001550:	20008a98 	.word	0x20008a98

08001554 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint32_t len_out, uint8_t *cInputIndex)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
    cliWrite("\r\n", (uint32_t)strlen("\r\n"));
 8001562:	2102      	movs	r1, #2
 8001564:	4814      	ldr	r0, [pc, #80]	@ (80015b8 <handleNewline+0x64>)
 8001566:	f7ff ffdb 	bl	8001520 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800156a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fd6d 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 8001576:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer, len_out);
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f7ff ffd0 	bl	8001520 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f1      	bne.n	800156a <handleNewline+0x16>

    cliWrite(cli_prompt, (uint32_t)strlen(cli_prompt));
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <handleNewline+0x68>)
 8001588:	681c      	ldr	r4, [r3, #0]
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <handleNewline+0x68>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe6e 	bl	8000270 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff ffc1 	bl	8001520 <cliWrite>
    *cInputIndex = 0;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80015a4:	2232      	movs	r2, #50	@ 0x32
 80015a6:	2100      	movs	r1, #0
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f01d f8f9 	bl	801e7a0 <memset>
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	08021cf4 	.word	0x08021cf4
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <handleBackspace+0x3e>
    {
        (*cInputIndex)--;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace, (uint32_t)strlen(backspace));
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt, (uint32_t)strlen(backspace_tt));
 80015ec:	480d      	ldr	r0, [pc, #52]	@ (8001624 <handleBackspace+0x64>)
 80015ee:	f7fe fe3f 	bl	8000270 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <handleBackspace+0x64>)
 80015f8:	f7ff ff92 	bl	8001520 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right, (uint32_t)strlen(right));
#endif
    }
}
 80015fc:	e00d      	b.n	800161a <handleBackspace+0x5a>
        uint8_t right[] = "\x1b\x5b\x43";
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <handleBackspace+0x68>)
 8001600:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right, (uint32_t)strlen(right));
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fe32 	bl	8000270 <strlen>
 800160c:	4602      	mov	r2, r0
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff83 	bl	8001520 <cliWrite>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000014 	.word	0x20000014
 8001628:	00435b1b 	.word	0x00435b1b

0800162c <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <handleCharacterInput+0x5c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0d      	cmp	r3, #13
 800163c:	d01f      	beq.n	800167e <handleCharacterInput+0x52>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <handleCharacterInput+0x5c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d003      	beq.n	800164e <handleCharacterInput+0x22>
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <handleCharacterInput+0x5c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b7f      	cmp	r3, #127	@ 0x7f
 800164c:	d104      	bne.n	8001658 <handleCharacterInput+0x2c>
    {
        handleBackspace(cInputIndex, pcInputString);
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffb5 	bl	80015c0 <handleBackspace>
 8001656:	e013      	b.n	8001680 <handleCharacterInput+0x54>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b31      	cmp	r3, #49	@ 0x31
 800165e:	d80f      	bhi.n	8001680 <handleCharacterInput+0x54>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <handleCharacterInput+0x5c>)
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e000      	b.n	8001680 <handleCharacterInput+0x54>
        return;
 800167e:	bf00      	nop
        }
    }
}
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000a6e 	.word	0x20000a6e

0800168c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_DMA_Init+0x4c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <MX_DMA_Init+0x4c>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <MX_DMA_Init+0x4c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2105      	movs	r1, #5
 80016b2:	203b      	movs	r0, #59	@ 0x3b
 80016b4:	f001 f910 	bl	80028d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016b8:	203b      	movs	r0, #59	@ 0x3b
 80016ba:	f001 f929 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2105      	movs	r1, #5
 80016c2:	2045      	movs	r0, #69	@ 0x45
 80016c4:	f001 f908 	bl	80028d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016c8:	2045      	movs	r0, #69	@ 0x45
 80016ca:	f001 f921 	bl	8002910 <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of printMux */
  printMuxHandle = osMutexNew(&printMux_attributes);
 8001700:	482b      	ldr	r0, [pc, #172]	@ (80017b0 <MX_FREERTOS_Init+0xb4>)
 8001702:	f00b f8f8 	bl	800c8f6 <osMutexNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a2a      	ldr	r2, [pc, #168]	@ (80017b4 <MX_FREERTOS_Init+0xb8>)
 800170a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of connectSem */
  connectSemHandle = osSemaphoreNew(1, 0, &connectSem_attributes);
 800170c:	4a2a      	ldr	r2, [pc, #168]	@ (80017b8 <MX_FREERTOS_Init+0xbc>)
 800170e:	2100      	movs	r1, #0
 8001710:	2001      	movs	r0, #1
 8001712:	f00b f9fe 	bl	800cb12 <osSemaphoreNew>
 8001716:	4603      	mov	r3, r0
 8001718:	4a28      	ldr	r2, [pc, #160]	@ (80017bc <MX_FREERTOS_Init+0xc0>)
 800171a:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 800171c:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <MX_FREERTOS_Init+0xc4>)
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f00b f9f6 	bl	800cb12 <osSemaphoreNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <MX_FREERTOS_Init+0xc8>)
 800172a:	6013      	str	r3, [r2, #0]

  /* creation of fsSem */
  fsSemHandle = osSemaphoreNew(1, 0, &fsSem_attributes);
 800172c:	4a26      	ldr	r2, [pc, #152]	@ (80017c8 <MX_FREERTOS_Init+0xcc>)
 800172e:	2100      	movs	r1, #0
 8001730:	2001      	movs	r0, #1
 8001732:	f00b f9ee 	bl	800cb12 <osSemaphoreNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <MX_FREERTOS_Init+0xd0>)
 800173a:	6013      	str	r3, [r2, #0]

  /* creation of printSem */
  printSemHandle = osSemaphoreNew(1, 0, &printSem_attributes);
 800173c:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <MX_FREERTOS_Init+0xd4>)
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f00b f9e6 	bl	800cb12 <osSemaphoreNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a22      	ldr	r2, [pc, #136]	@ (80017d4 <MX_FREERTOS_Init+0xd8>)
 800174a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structFSQueue */
  structFSQueueHandle = osMessageQueueNew (16, sizeof(fatfs_struct_t), &structFSQueue_attributes);
 800174c:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <MX_FREERTOS_Init+0xdc>)
 800174e:	210c      	movs	r1, #12
 8001750:	2010      	movs	r0, #16
 8001752:	f00b fb21 	bl	800cd98 <osMessageQueueNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a20      	ldr	r2, [pc, #128]	@ (80017dc <MX_FREERTOS_Init+0xe0>)
 800175a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(vStartInitTask, NULL, &vInitTask_attributes);
 800175c:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <MX_FREERTOS_Init+0xe4>)
 800175e:	2100      	movs	r1, #0
 8001760:	4820      	ldr	r0, [pc, #128]	@ (80017e4 <MX_FREERTOS_Init+0xe8>)
 8001762:	f00b f81a 	bl	800c79a <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a1f      	ldr	r2, [pc, #124]	@ (80017e8 <MX_FREERTOS_Init+0xec>)
 800176a:	6013      	str	r3, [r2, #0]

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 800176c:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <MX_FREERTOS_Init+0xf0>)
 800176e:	2100      	movs	r1, #0
 8001770:	481f      	ldr	r0, [pc, #124]	@ (80017f0 <MX_FREERTOS_Init+0xf4>)
 8001772:	f00b f812 	bl	800c79a <osThreadNew>
 8001776:	4603      	mov	r3, r0
 8001778:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <MX_FREERTOS_Init+0xf8>)
 800177a:	6013      	str	r3, [r2, #0]

  /* creation of vClientTask */
  vClientTaskHandle = osThreadNew(vStartClientTask, NULL, &vClientTask_attributes);
 800177c:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <MX_FREERTOS_Init+0xfc>)
 800177e:	2100      	movs	r1, #0
 8001780:	481e      	ldr	r0, [pc, #120]	@ (80017fc <MX_FREERTOS_Init+0x100>)
 8001782:	f00b f80a 	bl	800c79a <osThreadNew>
 8001786:	4603      	mov	r3, r0
 8001788:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <MX_FREERTOS_Init+0x104>)
 800178a:	6013      	str	r3, [r2, #0]

  /* creation of vFatFSTask */
  vFatFSTaskHandle = osThreadNew(vStartFatFSTask, NULL, &vFatFSTask_attributes);
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <MX_FREERTOS_Init+0x108>)
 800178e:	2100      	movs	r1, #0
 8001790:	481d      	ldr	r0, [pc, #116]	@ (8001808 <MX_FREERTOS_Init+0x10c>)
 8001792:	f00b f802 	bl	800c79a <osThreadNew>
 8001796:	4603      	mov	r3, r0
 8001798:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <MX_FREERTOS_Init+0x110>)
 800179a:	6013      	str	r3, [r2, #0]

  /* creation of vPrintTask */
  vPrintTaskHandle = osThreadNew(StartPrintTask, NULL, &vPrintTask_attributes);
 800179c:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <MX_FREERTOS_Init+0x114>)
 800179e:	2100      	movs	r1, #0
 80017a0:	481c      	ldr	r0, [pc, #112]	@ (8001814 <MX_FREERTOS_Init+0x118>)
 80017a2:	f00a fffa 	bl	800c79a <osThreadNew>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <MX_FREERTOS_Init+0x11c>)
 80017aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08024fd4 	.word	0x08024fd4
 80017b4:	20008a88 	.word	0x20008a88
 80017b8:	08024fe4 	.word	0x08024fe4
 80017bc:	20008a8c 	.word	0x20008a8c
 80017c0:	08024ff4 	.word	0x08024ff4
 80017c4:	20008a90 	.word	0x20008a90
 80017c8:	08025004 	.word	0x08025004
 80017cc:	20008a94 	.word	0x20008a94
 80017d0:	08025014 	.word	0x08025014
 80017d4:	20008a98 	.word	0x20008a98
 80017d8:	08024fbc 	.word	0x08024fbc
 80017dc:	20008974 	.word	0x20008974
 80017e0:	08024f08 	.word	0x08024f08
 80017e4:	0800181d 	.word	0x0800181d
 80017e8:	20001e04 	.word	0x20001e04
 80017ec:	08024f2c 	.word	0x08024f2c
 80017f0:	08001835 	.word	0x08001835
 80017f4:	200026b4 	.word	0x200026b4
 80017f8:	08024f50 	.word	0x08024f50
 80017fc:	080018c9 	.word	0x080018c9
 8001800:	20002f64 	.word	0x20002f64
 8001804:	08024f74 	.word	0x08024f74
 8001808:	080018dd 	.word	0x080018dd
 800180c:	20004014 	.word	0x20004014
 8001810:	08024f98 	.word	0x08024f98
 8001814:	08001985 	.word	0x08001985
 8001818:	200080c4 	.word	0x200080c4

0800181c <vStartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vStartInitTask */
void vStartInitTask(void *argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001824:	f007 fcf2 	bl	800920c <MX_LWIP_Init>
  /* USER CODE BEGIN vStartInitTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001828:	f242 7010 	movw	r0, #10000	@ 0x2710
 800182c:	f00b f848 	bl	800c8c0 <osDelay>
 8001830:	e7fa      	b.n	8001828 <vStartInitTask+0xc>
	...

08001834 <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
    vRegisterCLICommands();
 8001840:	f7ff fe50 	bl	80014e4 <vRegisterCLICommands>
    cliWrite("Start cli\r\n", (uint32_t)strlen("Start cli\r\n"));
 8001844:	210b      	movs	r1, #11
 8001846:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <vStartCmdTask+0x7c>)
 8001848:	f7ff fe6a 	bl	8001520 <cliWrite>
    cliWrite(cli_prompt, (uint32_t)strlen(cli_prompt));
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <vStartCmdTask+0x80>)
 800184e:	681c      	ldr	r4, [r3, #0]
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <vStartCmdTask+0x80>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fd0b 	bl	8000270 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fe5e 	bl	8001520 <cliWrite>

    for (;;)
    {
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <vStartCmdTask+0x84>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	4618      	mov	r0, r3
 800186e:	f00c fa2b 	bl	800dcc8 <xQueueSemaphoreTake>
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar, 1);
 8001872:	2101      	movs	r1, #1
 8001874:	4811      	ldr	r0, [pc, #68]	@ (80018bc <vStartCmdTask+0x88>)
 8001876:	f7ff fe53 	bl	8001520 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <vStartCmdTask+0x88>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b0d      	cmp	r3, #13
 8001880:	d003      	beq.n	800188a <vStartCmdTask+0x56>
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <vStartCmdTask+0x88>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d108      	bne.n	800189c <vStartCmdTask+0x68>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE, &cInputIndex);
 800188a:	f107 030f 	add.w	r3, r7, #15
 800188e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001892:	490b      	ldr	r1, [pc, #44]	@ (80018c0 <vStartCmdTask+0x8c>)
 8001894:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <vStartCmdTask+0x90>)
 8001896:	f7ff fe5d 	bl	8001554 <handleNewline>
 800189a:	e005      	b.n	80018a8 <vStartCmdTask+0x74>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 800189c:	f107 030f 	add.w	r3, r7, #15
 80018a0:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <vStartCmdTask+0x90>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fec2 	bl	800162c <handleCharacterInput>
        }
        osDelay(100);
 80018a8:	2064      	movs	r0, #100	@ 0x64
 80018aa:	f00b f809 	bl	800c8c0 <osDelay>
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 80018ae:	e7d9      	b.n	8001864 <vStartCmdTask+0x30>
 80018b0:	08021d80 	.word	0x08021d80
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	20008a90 	.word	0x20008a90
 80018bc:	20000a6e 	.word	0x20000a6e
 80018c0:	2000023c 	.word	0x2000023c
 80018c4:	20000a3c 	.word	0x20000a3c

080018c8 <vStartClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartClientTask */
void vStartClientTask(void *argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartClientTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 80018d0:	4801      	ldr	r0, [pc, #4]	@ (80018d8 <vStartClientTask+0x10>)
 80018d2:	f00a fff5 	bl	800c8c0 <osDelay>
 80018d6:	e7fb      	b.n	80018d0 <vStartClientTask+0x8>
 80018d8:	000186a0 	.word	0x000186a0

080018dc <vStartFatFSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartFatFSTask */
void vStartFatFSTask(void *argument)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartFatFSTask */

  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <vStartFatFSTask+0x80>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00c f9eb 	bl	800dcc8 <xQueueSemaphoreTake>
//	  switch ( ) {
//		case 1 ... 2:
			if (mount_fs(&fs, 1) != 0)
 80018f2:	2101      	movs	r1, #1
 80018f4:	481a      	ldr	r0, [pc, #104]	@ (8001960 <vStartFatFSTask+0x84>)
 80018f6:	f007 f905 	bl	8008b04 <mount_fs>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <vStartFatFSTask+0x2c>
			{
				cliWrite("Failed mount\r\n", strlen("Failed mount\r\n"));
 8001900:	210e      	movs	r1, #14
 8001902:	4818      	ldr	r0, [pc, #96]	@ (8001964 <vStartFatFSTask+0x88>)
 8001904:	f7ff fe0c 	bl	8001520 <cliWrite>
			}
			cliWrite("Success mount\r\n", strlen("Success mount\r\n"));
 8001908:	210f      	movs	r1, #15
 800190a:	4817      	ldr	r0, [pc, #92]	@ (8001968 <vStartFatFSTask+0x8c>)
 800190c:	f7ff fe08 	bl	8001520 <cliWrite>
//			osDelay(3000);
			for (int i = 0;i < 100;i++)
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e006      	b.n	8001924 <vStartFatFSTask+0x48>
			{
				write_fs((uint8_t *)"WolfFile.txt", (uint8_t *)"Work on Wolf lib5\r\n");
 8001916:	4915      	ldr	r1, [pc, #84]	@ (800196c <vStartFatFSTask+0x90>)
 8001918:	4815      	ldr	r0, [pc, #84]	@ (8001970 <vStartFatFSTask+0x94>)
 800191a:	f007 f951 	bl	8008bc0 <write_fs>
			for (int i = 0;i < 100;i++)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b63      	cmp	r3, #99	@ 0x63
 8001928:	ddf5      	ble.n	8001916 <vStartFatFSTask+0x3a>

			}
			cliWrite("Success writed\r\n", strlen("Success writed\r\n"));
 800192a:	2110      	movs	r1, #16
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <vStartFatFSTask+0x98>)
 800192e:	f7ff fdf7 	bl	8001520 <cliWrite>

			read_fs((uint8_t *)"binance.pem", buf, (uint32_t)LEN_CERT_FILE);
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4910      	ldr	r1, [pc, #64]	@ (8001978 <vStartFatFSTask+0x9c>)
 8001938:	4810      	ldr	r0, [pc, #64]	@ (800197c <vStartFatFSTask+0xa0>)
 800193a:	f007 f9b5 	bl	8008ca8 <read_fs>

			cliWrite((char *)buf, LEN_CERT_FILE);
 800193e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <vStartFatFSTask+0x9c>)
 8001944:	f7ff fdec 	bl	8001520 <cliWrite>
			cliWrite("\r\n", strlen("\r\n"));
 8001948:	2102      	movs	r1, #2
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <vStartFatFSTask+0xa4>)
 800194c:	f7ff fde8 	bl	8001520 <cliWrite>
//			res_fs = write_fs(&text[0], &text[1]);
//			break;
//		default:
//			break;
//	}
    osDelay(500);
 8001950:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001954:	f00a ffb4 	bl	800c8c0 <osDelay>
	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
 8001958:	e7c4      	b.n	80018e4 <vStartFatFSTask+0x8>
 800195a:	bf00      	nop
 800195c:	20008a94 	.word	0x20008a94
 8001960:	20008cd8 	.word	0x20008cd8
 8001964:	08021d8c 	.word	0x08021d8c
 8001968:	08021d9c 	.word	0x08021d9c
 800196c:	08021dac 	.word	0x08021dac
 8001970:	08021dc0 	.word	0x08021dc0
 8001974:	08021dd0 	.word	0x08021dd0
 8001978:	20000a7c 	.word	0x20000a7c
 800197c:	08021de4 	.word	0x08021de4
 8001980:	08021df0 	.word	0x08021df0

08001984 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintTask */
  /* Infinite loop */
  for(;;)
  {
	    xSemaphoreTake(printSemHandle, portMAX_DELAY);
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <StartPrintTask+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	4618      	mov	r0, r3
 8001996:	f00c f997 	bl	800dcc8 <xQueueSemaphoreTake>
	    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg_struct.print_msg, (uint16_t)msg_struct.len);
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <StartPrintTask+0x38>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <StartPrintTask+0x38>)
 80019a0:	6852      	ldr	r2, [r2, #4]
 80019a2:	b292      	uxth	r2, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <StartPrintTask+0x3c>)
 80019a8:	f005 fb1c 	bl	8006fe4 <HAL_UART_Transmit_DMA>

    osDelay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f00a ff87 	bl	800c8c0 <osDelay>
	    xSemaphoreTake(printSemHandle, portMAX_DELAY);
 80019b2:	bf00      	nop
 80019b4:	e7ea      	b.n	800198c <StartPrintTask+0x8>
 80019b6:	bf00      	nop
 80019b8:	20008a98 	.word	0x20008a98
 80019bc:	20000a74 	.word	0x20000a74
 80019c0:	20008c84 	.word	0x20008c84

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_GPIO_Init+0xa0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6c:	f000 fe16 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a70:	f000 f822 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f7ff ffa6 	bl	80019c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a78:	f7ff fe08 	bl	800168c <MX_DMA_Init>
  MX_TIM5_Init();
 8001a7c:	f000 fbce 	bl	800221c <MX_TIM5_Init>
  MX_RNG_Init();
 8001a80:	f000 f89c 	bl	8001bbc <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001a84:	f000 fc40 	bl	8002308 <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 8001a88:	f000 f8d4 	bl	8001c34 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001a8c:	f007 f820 	bl	8008ad0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <main+0x48>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <main+0x4c>)
 8001a9a:	f005 fa7d 	bl	8006f98 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a9e:	f00a fdfb 	bl	800c698 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001aa2:	f7ff fe2b 	bl	80016fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001aa6:	f00a fe3d 	bl	800c724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <main+0x42>
 8001aae:	bf00      	nop
 8001ab0:	2000001c 	.word	0x2000001c
 8001ab4:	20008c84 	.word	0x20008c84

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b094      	sub	sp, #80	@ 0x50
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	2230      	movs	r2, #48	@ 0x30
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f01c fe6a 	bl	801e7a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <SystemClock_Config+0xcc>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <SystemClock_Config+0xcc>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <SystemClock_Config+0xcc>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <SystemClock_Config+0xd0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <SystemClock_Config+0xd0>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <SystemClock_Config+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b20:	2302      	movs	r3, #2
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b2c:	23a8      	movs	r3, #168	@ 0xa8
 8001b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b34:	2307      	movs	r3, #7
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 ff17 	bl	8004970 <HAL_RCC_OscConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b48:	f000 f832 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b50:	2302      	movs	r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2105      	movs	r1, #5
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f978 	bl	8004e60 <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b76:	f000 f81b 	bl	8001bb0 <Error_Handler>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3750      	adds	r7, #80	@ 0x50
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b9e:	f000 fd9f 	bl	80026e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40010000 	.word	0x40010000

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_RNG_Init+0x20>)
 8001bc2:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <MX_RNG_Init+0x24>)
 8001bc4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <MX_RNG_Init+0x20>)
 8001bc8:	f003 fb5c 	bl	8005284 <HAL_RNG_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bd2:	f7ff ffed 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20008a9c 	.word	0x20008a9c
 8001be0:	50060800 	.word	0x50060800

08001be4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <HAL_RNG_MspInit+0x48>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d115      	bne.n	8001c22 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <HAL_RNG_MspInit+0x4c>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <HAL_RNG_MspInit+0x4c>)
 8001c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c04:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_RNG_MspInit+0x4c>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	2050      	movs	r0, #80	@ 0x50
 8001c18:	f000 fe5e 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c1c:	2050      	movs	r0, #80	@ 0x50
 8001c1e:	f000 fe77 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	50060800 	.word	0x50060800
 8001c30:	40023800 	.word	0x40023800

08001c34 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <MX_SDIO_SD_Init+0x3c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <MX_SDIO_SD_Init+0x38>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20008aac 	.word	0x20008aac
 8001c70:	40012c00 	.word	0x40012c00

08001c74 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <HAL_SD_MspInit+0x1c0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 80ca 	bne.w	8001e2c <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001ca2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca8:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	4a57      	ldr	r2, [pc, #348]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce0:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <HAL_SD_MspInit+0x1c4>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001cec:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	484c      	ldr	r0, [pc, #304]	@ (8001e3c <HAL_SD_MspInit+0x1c8>)
 8001d0a:	f002 fc95 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4845      	ldr	r0, [pc, #276]	@ (8001e40 <HAL_SD_MspInit+0x1cc>)
 8001d2a:	f002 fc85 	bl	8004638 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001d2e:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d30:	4a45      	ldr	r2, [pc, #276]	@ (8001e48 <HAL_SD_MspInit+0x1d4>)
 8001d32:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d3a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	4b41      	ldr	r3, [pc, #260]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d42:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d48:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d50:	4b3c      	ldr	r3, [pc, #240]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d56:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001d60:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d62:	2220      	movs	r2, #32
 8001d64:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d66:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d6c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d74:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d76:	2203      	movs	r2, #3
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d82:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001d8a:	482e      	ldr	r0, [pc, #184]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d8c:	f000 fdce 	bl	800292c <HAL_DMA_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001d96:	f7ff ff0b 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <HAL_SD_MspInit+0x1d0>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001da8:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <HAL_SD_MspInit+0x1dc>)
 8001daa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001db2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001db6:	2240      	movs	r2, #64	@ 0x40
 8001db8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dd6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dda:	2220      	movs	r2, #32
 8001ddc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001de6:	2204      	movs	r2, #4
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001df2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001dfa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001e00:	4812      	ldr	r0, [pc, #72]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001e02:	f000 fd93 	bl	800292c <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001e0c:	f7ff fed0 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001e14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e16:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_SD_MspInit+0x1d8>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2105      	movs	r1, #5
 8001e20:	2031      	movs	r0, #49	@ 0x31
 8001e22:	f000 fd59 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001e26:	2031      	movs	r0, #49	@ 0x31
 8001e28:	f000 fd72 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	@ 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	20008b30 	.word	0x20008b30
 8001e48:	40026458 	.word	0x40026458
 8001e4c:	20008b90 	.word	0x20008b90
 8001e50:	400264a0 	.word	0x400264a0

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x64>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	210f      	movs	r1, #15
 8001e96:	f06f 0001 	mvn.w	r0, #1
 8001e9a:	f000 fd1d 	bl	80028d8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f000 fd18 	bl	80028d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ea8:	2005      	movs	r0, #5
 8001eaa:	f000 fd31 	bl	8002910 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_InitTick+0xd4>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8001f90 <HAL_InitTick+0xd4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6453      	str	r3, [r2, #68]	@ 0x44
 8001edc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <HAL_InitTick+0xd4>)
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ee8:	f107 020c 	add.w	r2, r7, #12
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 f994 	bl	8005220 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ef8:	f003 f97e 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f04:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <HAL_InitTick+0xd8>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f12:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_InitTick+0xe0>)
 8001f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f36:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f38:	f004 fb68 	bl	800660c <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f4a:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <HAL_InitTick+0xdc>)
 8001f4c:	f004 fbae 	bl	80066ac <HAL_TIM_Base_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f5e:	2019      	movs	r0, #25
 8001f60:	f000 fcd6 	bl	8002910 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d808      	bhi.n	8001f7c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	2019      	movs	r0, #25
 8001f70:	f000 fcb2 	bl	80028d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_InitTick+0xe4>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e002      	b.n	8001f82 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3730      	adds	r7, #48	@ 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	20008bf0 	.word	0x20008bf0
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	20000020 	.word	0x20000020

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fee:	f004 fbcd 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20008bf0 	.word	0x20008bf0

08001ffc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <USART3_IRQHandler+0x10>)
 8002002:	f005 f85f 	bl	80070c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20008c84 	.word	0x20008c84

08002010 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <SDIO_IRQHandler+0x10>)
 8002016:	f003 fc41 	bl	800589c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20008aac 	.word	0x20008aac

08002024 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <TIM5_IRQHandler+0x10>)
 800202a:	f004 fbaf 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20008c3c 	.word	0x20008c3c

08002038 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <DMA2_Stream3_IRQHandler+0x10>)
 800203e:	f000 fe0d 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20008b30 	.word	0x20008b30

0800204c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <ETH_IRQHandler+0x10>)
 8002052:	f001 fc07 	bl	8003864 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000da4c 	.word	0x2000da4c

08002060 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <ETH_WKUP_IRQHandler+0x10>)
 8002066:	f001 fbfd 	bl	8003864 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000da4c 	.word	0x2000da4c

08002074 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <DMA2_Stream6_IRQHandler+0x10>)
 800207a:	f000 fdef 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20008b90 	.word	0x20008b90

08002088 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <HASH_RNG_IRQHandler+0x10>)
 800208e:	f003 f923 	bl	80052d8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20008a9c 	.word	0x20008a9c

0800209c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_kill>:

int _kill(int pid, int sig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b6:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <_kill+0x20>)
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20017a3c 	.word	0x20017a3c

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe5 	bl	80020ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <_exit+0x12>

080020e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e00a      	b.n	800210e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f8:	f3af 8000 	nop.w
 80020fc:	4601      	mov	r1, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbf0      	blt.n	80020f8 <_read+0x12>
  }

  return len;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002148:	605a      	str	r2, [r3, #4]
  return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_isatty>:

int _isatty(int file)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d205      	bcs.n	80021c4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <_sbrk+0x6c>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20020000 	.word	0x20020000
 80021e8:	00001000 	.word	0x00001000
 80021ec:	20008c38 	.word	0x20008c38
 80021f0:	20017a48 	.word	0x20017a48
 80021f4:	20017a3c 	.word	0x20017a3c

080021f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <MX_TIM5_Init+0x94>)
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <MX_TIM5_Init+0x98>)
 800223c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_TIM5_Init+0x94>)
 8002240:	f240 2257 	movw	r2, #599	@ 0x257
 8002244:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_TIM5_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_TIM5_Init+0x94>)
 800224e:	f04f 32ff 	mov.w	r2, #4294967295
 8002252:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_TIM5_Init+0x94>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <MX_TIM5_Init+0x94>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002260:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <MX_TIM5_Init+0x94>)
 8002262:	f004 f9d3 	bl	800660c <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800226c:	f7ff fca0 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <MX_TIM5_Init+0x94>)
 800227e:	f004 fb75 	bl	800696c <HAL_TIM_ConfigClockSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002288:	f7ff fc92 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_TIM5_Init+0x94>)
 800229a:	f004 fd9d 	bl	8006dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f7ff fc84 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20008c3c 	.word	0x20008c3c
 80022b4:	40000c00 	.word	0x40000c00

080022b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <HAL_TIM_Base_MspInit+0x48>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2105      	movs	r1, #5
 80022ea:	2032      	movs	r0, #50	@ 0x32
 80022ec:	f000 faf4 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022f0:	2032      	movs	r0, #50	@ 0x32
 80022f2:	f000 fb0d 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40000c00 	.word	0x40000c00
 8002304:	40023800 	.word	0x40023800

08002308 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <MX_USART3_UART_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002340:	f004 fdda 	bl	8006ef8 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800234a:	f7ff fc31 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20008c84 	.word	0x20008c84
 8002358:	40004800 	.word	0x40004800

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_UART_MspInit+0x94>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d134      	bne.n	80023e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 8002388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_UART_MspInit+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c8:	2307      	movs	r3, #7
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <HAL_UART_MspInit+0x9c>)
 80023d4:	f002 f930 	bl	8004638 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2105      	movs	r1, #5
 80023dc:	2027      	movs	r0, #39	@ 0x27
 80023de:	f000 fa7b 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023e2:	2027      	movs	r0, #39	@ 0x27
 80023e4:	f000 fa94 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	@ 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40004800 	.word	0x40004800
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020c00 	.word	0x40020c00

080023fc <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_UART_RxCpltCallback+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4619      	mov	r1, r3
 8002410:	4808      	ldr	r0, [pc, #32]	@ (8002434 <HAL_UART_RxCpltCallback+0x38>)
 8002412:	f004 fdc1 	bl	8006f98 <HAL_UART_Receive_IT>
	xSemaphoreGiveFromISR(uartConfigSemHandle, &pxHigherPriorityTaskWoken);
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_UART_RxCpltCallback+0x3c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f107 020c 	add.w	r2, r7, #12
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f00b fadf 	bl	800d9e4 <xQueueGiveFromISR>

}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000001c 	.word	0x2000001c
 8002434:	20008c84 	.word	0x20008c84
 8002438:	20008a90 	.word	0x20008a90

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002440:	f7ff feda 	bl	80021f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f01c facd 	bl	801ea08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff fafb 	bl	8001a68 <main>
  bx  lr    
 8002472:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002480:	080256cc 	.word	0x080256cc
  ldr r2, =_sbss
 8002484:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002488:	20017a44 	.word	0x20017a44

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>

0800248e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <DP83848_RegisterBusIO+0x28>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <DP83848_RegisterBusIO+0x28>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <DP83848_RegisterBusIO+0x28>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e014      	b.n	80024e6 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d139      	bne.n	8002582 <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e01c      	b.n	8002562 <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f107 020c 	add.w	r2, r7, #12
 8002530:	2119      	movs	r1, #25
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	4798      	blx	r3
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	da03      	bge.n	8002544 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 800253c:	f06f 0304 	mvn.w	r3, #4
 8002540:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002542:	e00b      	b.n	800255c <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	d105      	bne.n	800255c <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
         break;
 800255a:	e005      	b.n	8002568 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b1f      	cmp	r3, #31
 8002566:	d9df      	bls.n	8002528 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b1f      	cmp	r3, #31
 800256e:	d902      	bls.n	8002576 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002570:	f06f 0302 	mvn.w	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002582:	693b      	ldr	r3, [r7, #16]
 }
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6810      	ldr	r0, [r2, #0]
 80025a0:	f107 020c 	add.w	r2, r7, #12
 80025a4:	2101      	movs	r1, #1
 80025a6:	4798      	blx	r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da02      	bge.n	80025b4 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80025ae:	f06f 0304 	mvn.w	r3, #4
 80025b2:	e06e      	b.n	8002692 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6810      	ldr	r0, [r2, #0]
 80025bc:	f107 020c 	add.w	r2, r7, #12
 80025c0:	2101      	movs	r1, #1
 80025c2:	4798      	blx	r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da02      	bge.n	80025d0 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80025ca:	f06f 0304 	mvn.w	r3, #4
 80025ce:	e060      	b.n	8002692 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80025da:	2301      	movs	r3, #1
 80025dc:	e059      	b.n	8002692 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6810      	ldr	r0, [r2, #0]
 80025e6:	f107 020c 	add.w	r2, r7, #12
 80025ea:	2100      	movs	r1, #0
 80025ec:	4798      	blx	r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da02      	bge.n	80025fa <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80025f4:	f06f 0304 	mvn.w	r3, #4
 80025f8:	e04b      	b.n	8002692 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11b      	bne.n	800263c <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <DP83848_GetLinkState+0x90>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002618:	2302      	movs	r3, #2
 800261a:	e03a      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002626:	2303      	movs	r3, #3
 8002628:	e033      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002634:	2304      	movs	r3, #4
 8002636:	e02c      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002638:	2305      	movs	r3, #5
 800263a:	e02a      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6810      	ldr	r0, [r2, #0]
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	2110      	movs	r1, #16
 800264a:	4798      	blx	r3
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	da02      	bge.n	8002658 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8002652:	f06f 0304 	mvn.w	r3, #4
 8002656:	e01c      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8002662:	2306      	movs	r3, #6
 8002664:	e015      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0306 	and.w	r3, r3, #6
 800266c:	2b04      	cmp	r3, #4
 800266e:	d101      	bne.n	8002674 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002670:	2302      	movs	r3, #2
 8002672:	e00e      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800267e:	2303      	movs	r3, #3
 8002680:	e007      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0306 	and.w	r3, r3, #6
 8002688:	2b06      	cmp	r3, #6
 800268a:	d101      	bne.n	8002690 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800268c:	2304      	movs	r3, #4
 800268e:	e000      	b.n	8002692 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002690:	2305      	movs	r3, #5
    }
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 f8fc 	bl	80028c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	200f      	movs	r0, #15
 80026cc:	f7ff fbf6 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fbc0 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000024 	.word	0x20000024
 8002704:	20008ccc 	.word	0x20008ccc

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20008ccc 	.word	0x20008ccc

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000024 	.word	0x20000024

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	@ (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	@ (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ff4c 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ea:	f7ff ff61 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 80028ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	6978      	ldr	r0, [r7, #20]
 80028f6:	f7ff ffb1 	bl	800285c <NVIC_EncodePriority>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff80 	bl	8002808 <__NVIC_SetPriority>
}
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff54 	bl	80027cc <__NVIC_EnableIRQ>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fee6 	bl	8002708 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e099      	b.n	8002a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002968:	e00f      	b.n	800298a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800296a:	f7ff fecd 	bl	8002708 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b05      	cmp	r3, #5
 8002976:	d908      	bls.n	800298a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e078      	b.n	8002a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e8      	bne.n	800296a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <HAL_DMA_Init+0x158>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0307 	bic.w	r3, r3, #7
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d117      	bne.n	8002a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb0d 	bl	8003050 <DMA_CheckFifoParam>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fac4 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	223f      	movs	r2, #63	@ 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f010803f 	.word	0xf010803f

08002a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_DMA_Start_IT+0x26>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e040      	b.n	8002b30 <HAL_DMA_Start_IT+0xa8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12f      	bne.n	8002b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa56 	bl	8002f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	223f      	movs	r2, #63	@ 0x3f
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0216 	orr.w	r2, r2, #22
 8002af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0208 	orr.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e005      	b.n	8002b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7ff fddf 	bl	8002708 <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e052      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0216 	bic.w	r2, r2, #22
 8002b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_DMA_Abort+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0208 	bic.w	r2, r2, #8
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bba:	e013      	b.n	8002be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bbc:	f7ff fda4 	bl	8002708 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d90c      	bls.n	8002be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e015      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e4      	bne.n	8002bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	223f      	movs	r2, #63	@ 0x3f
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00c      	b.n	8002c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea4 <HAL_DMA_IRQHandler+0x248>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea8 <HAL_DMA_IRQHandler+0x24c>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2208      	movs	r2, #8
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	2204      	movs	r2, #4
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	2210      	movs	r2, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d043      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d03c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	2210      	movs	r2, #16
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d024      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e01f      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0208 	bic.w	r2, r2, #8
 8002dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 808f 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8087 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2220      	movs	r2, #32
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d136      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0216 	bic.w	r2, r2, #22
 8002e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x1da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	223f      	movs	r2, #63	@ 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d07e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
        }
        return;
 8002e72:	e079      	b.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d031      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e02c      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
 8002ea2:	bf00      	nop
 8002ea4:	20000018 	.word	0x20000018
 8002ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e01e      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0210 	bic.w	r2, r2, #16
 8002eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d032      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2205      	movs	r2, #5
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d307      	bcc.n	8002f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x2cc>
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f68:	bf00      	nop
    }
  }
}
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b40      	cmp	r3, #64	@ 0x40
 8002fb4:	d108      	bne.n	8002fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc6:	e007      	b.n	8002fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b10      	subs	r3, #16
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffe:	4a13      	ldr	r2, [pc, #76]	@ (800304c <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d909      	bls.n	8003026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58
 8003024:	e007      	b.n	8003036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	aaaaaaab 	.word	0xaaaaaaab
 800304c:	0802503c 	.word	0x0802503c

08003050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d856      	bhi.n	800311e <DMA_CheckFifoParam+0xce>
 8003070:	a201      	add	r2, pc, #4	@ (adr r2, 8003078 <DMA_CheckFifoParam+0x28>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	0800309b 	.word	0x0800309b
 8003080:	08003089 	.word	0x08003089
 8003084:	0800311f 	.word	0x0800311f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d046      	beq.n	8003122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e043      	b.n	8003122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030a2:	d140      	bne.n	8003126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e03d      	b.n	8003126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b2:	d121      	bne.n	80030f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d837      	bhi.n	800312a <DMA_CheckFifoParam+0xda>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <DMA_CheckFifoParam+0x70>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	080030e9 	.word	0x080030e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e030      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d025      	beq.n	800312e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e6:	e022      	b.n	800312e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030f0:	d11f      	bne.n	8003132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f6:	e01c      	b.n	8003132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d903      	bls.n	8003106 <DMA_CheckFifoParam+0xb6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003104:	e018      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e015      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e00b      	b.n	8003136 <DMA_CheckFifoParam+0xe6>
      break;
 800311e:	bf00      	nop
 8003120:	e00a      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e008      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;   
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
    }
  } 
  
  return status; 
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e08a      	b.n	8003270 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2223      	movs	r2, #35	@ 0x23
 8003168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f006 fb6b 	bl	8009848 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <HAL_ETH_Init+0x130>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	4a3f      	ldr	r2, [pc, #252]	@ (8003278 <HAL_ETH_Init+0x130>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003180:	6453      	str	r3, [r2, #68]	@ 0x44
 8003182:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <HAL_ETH_Init+0x130>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_ETH_Init+0x134>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a3a      	ldr	r2, [pc, #232]	@ (800327c <HAL_ETH_Init+0x134>)
 8003194:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003198:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800319a:	4b38      	ldr	r3, [pc, #224]	@ (800327c <HAL_ETH_Init+0x134>)
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4936      	ldr	r1, [pc, #216]	@ (800327c <HAL_ETH_Init+0x134>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80031a8:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_ETH_Init+0x134>)
 80031aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c4:	f7ff faa0 	bl	8002708 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031ca:	e011      	b.n	80031f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031cc:	f7ff fa9c 	bl	8002708 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031da:	d909      	bls.n	80031f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2204      	movs	r2, #4
 80031e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	22e0      	movs	r2, #224	@ 0xe0
 80031e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e03f      	b.n	8003270 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e4      	bne.n	80031cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 ff5a 	bl	80040bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f001 f805 	bl	8004218 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f001 f85b 	bl	80042ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	461a      	mov	r2, r3
 800321a:	2100      	movs	r1, #0
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 ffc3 	bl	80041a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003242:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003246:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800325a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2210      	movs	r2, #16
 800326a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	40013800 	.word	0x40013800

08003280 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328e:	2b10      	cmp	r3, #16
 8003290:	d161      	bne.n	8003356 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2223      	movs	r2, #35	@ 0x23
 8003296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9f4 	bl	8003694 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b4:	2001      	movs	r0, #1
 80032b6:	f7ff fa33 	bl	8002720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032d8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032f0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fd7e 	bl	8003df4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003310:	2001      	movs	r0, #1
 8003312:	f7ff fa05 	bl	8002720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0204 	orr.w	r2, r2, #4
 800332c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8003340:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8003344:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003348:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2223      	movs	r2, #35	@ 0x23
 800334e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800336e:	2b23      	cmp	r3, #35	@ 0x23
 8003370:	d170      	bne.n	8003454 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2223      	movs	r2, #35	@ 0x23
 8003376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 800338c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8003390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003394:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033ac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033c4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0204 	bic.w	r2, r2, #4
 80033d4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033de:	2001      	movs	r0, #1
 80033e0:	f7ff f99e 	bl	8002720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fd01 	bl	8003df4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800340a:	2001      	movs	r0, #1
 800340c:	f7ff f988 	bl	8002720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e00e      	b.n	800343c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	3212      	adds	r2, #18
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d9ed      	bls.n	800341e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2210      	movs	r2, #16
 800344c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e045      	b.n	800350e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003488:	2b23      	cmp	r3, #35	@ 0x23
 800348a:	d13f      	bne.n	800350c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003494:	2201      	movs	r2, #1
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 ff85 	bl	80043a8 <ETH_Prepare_Tx_Descriptors>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e02a      	b.n	800350e <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80034b8:	f3bf 8f4f 	dsb	sy
}
 80034bc:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d904      	bls.n	80034da <HAL_ETH_Transmit_IT+0x7c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	1f1a      	subs	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034f4:	461a      	mov	r2, r3
 80034f6:	2304      	movs	r3, #4
 80034f8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003502:	461a      	mov	r2, r3
 8003504:	2300      	movs	r3, #0
 8003506:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0a4      	b.n	800368c <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003548:	2b23      	cmp	r3, #35	@ 0x23
 800354a:	d001      	beq.n	8003550 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e09d      	b.n	800368c <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	3212      	adds	r2, #18
 800355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003560:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003566:	f1c3 0304 	rsb	r3, r3, #4
 800356a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800356c:	e066      	b.n	800363c <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <HAL_ETH_ReadData+0x88>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03c      	beq.n	8003618 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035c0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f006 fae8 	bl	8009bcc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2200      	movs	r2, #0
 8003616:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3301      	adds	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d902      	bls.n	800362a <HAL_ETH_ReadData+0x114>
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3b04      	subs	r3, #4
 8003628:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	3212      	adds	r2, #18
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003640:	2b00      	cmp	r3, #0
 8003642:	db06      	blt.n	8003652 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	429a      	cmp	r2, r3
 800364a:	d202      	bcs.n	8003652 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d08d      	beq.n	800356e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f814 	bl	8003694 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d108      	bne.n	800368a <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80036a0:	2301      	movs	r3, #1
 80036a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	3212      	adds	r2, #18
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80036bc:	e044      	b.n	8003748 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d112      	bne.n	80036ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	4618      	mov	r0, r3
 80036cc:	f006 fa4e 	bl	8009b6c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	74fb      	strb	r3, [r7, #19]
 80036da:	e007      	b.n	80036ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	461a      	mov	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	461a      	mov	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02a      	beq.n	8003748 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	e005      	b.n	8003718 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d902      	bls.n	8003736 <ETH_UpdateDescriptor+0xa2>
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3b04      	subs	r3, #4
 8003734:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	3212      	adds	r2, #18
 800373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003740:	617b      	str	r3, [r7, #20]
      desccount--;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	3b01      	subs	r3, #1
 8003746:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <ETH_UpdateDescriptor+0xc0>
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1b4      	bne.n	80036be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	429a      	cmp	r2, r3
 800375c:	d01a      	beq.n	8003794 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003768:	f3bf 8f5f 	dmb	sy
}
 800376c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	18ca      	adds	r2, r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003794:	bf00      	nop
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3318      	adds	r3, #24
 80037a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80037ba:	e047      	b.n	800384c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3304      	adds	r3, #4
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d902      	bls.n	80037e8 <HAL_ETH_ReleaseTxPacket+0x4c>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3b04      	subs	r3, #4
 80037e6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02c      	beq.n	800384c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db1f      	blt.n	8003848 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3304      	adds	r3, #4
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f006 fa19 	bl	8009c4c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3304      	adds	r3, #4
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	2200      	movs	r2, #0
 8003826:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3301      	adds	r3, #1
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d902      	bls.n	800383a <HAL_ETH_ReleaseTxPacket+0x9e>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3b04      	subs	r3, #4
 8003838:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003846:	e001      	b.n	800384c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_ETH_ReleaseTxPacket+0xbc>
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1b1      	bne.n	80037bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800388c:	4b4b      	ldr	r3, [pc, #300]	@ (80039bc <HAL_ETH_IRQHandler+0x158>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <HAL_ETH_IRQHandler+0x56>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b43      	ldr	r3, [pc, #268]	@ (80039c0 <HAL_ETH_IRQHandler+0x15c>)
 80038b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f005 fd07 	bl	80092c8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_ETH_IRQHandler+0x80>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80038dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f005 fd02 	bl	80092e8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d042      	beq.n	8003974 <HAL_ETH_IRQHandler+0x110>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03d      	beq.n	8003974 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f043 0208 	orr.w	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01a      	beq.n	8003948 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	4b29      	ldr	r3, [pc, #164]	@ (80039c4 <HAL_ETH_IRQHandler+0x160>)
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800393c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	22e0      	movs	r2, #224	@ 0xe0
 8003942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003946:	e012      	b.n	800396e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003966:	461a      	mov	r2, r3
 8003968:	f248 6380 	movw	r3, #34432	@ 0x8680
 800396c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f005 fcca 	bl	8009308 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f81a 	bl	80039c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_ETH_IRQHandler+0x158>)
 80039a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039ac:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f814 	bl	80039dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40013c00 	.word	0x40013c00
 80039c0:	00010040 	.word	0x00010040
 80039c4:	007e2000 	.word	0x007e2000

080039c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 031c 	and.w	r3, r3, #28
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	02db      	lsls	r3, r3, #11
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0302 	bic.w	r3, r3, #2
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003a40:	f7fe fe62 	bl	8002708 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a46:	e00d      	b.n	8003a64 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003a48:	f7fe fe5e 	bl	8002708 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a56:	d301      	bcc.n	8003a5c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e010      	b.n	8003a7e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ec      	bne.n	8003a48 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 031c 	and.w	r3, r3, #28
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	02db      	lsls	r3, r3, #11
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae0:	f7fe fe12 	bl	8002708 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ae6:	e00d      	b.n	8003b04 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003ae8:	f7fe fe0e 	bl	8002708 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d301      	bcc.n	8003afc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e009      	b.n	8003b10 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ec      	bne.n	8003ae8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0e6      	b.n	8003cfa <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00b      	b.n	8003d32 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d105      	bne.n	8003d30 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f88a 	bl	8003e40 <ETH_SetMACConfig>

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 031c 	bic.w	r3, r3, #28
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003d54:	f001 fa30 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8003d58:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a14      	ldr	r2, [pc, #80]	@ (8003db0 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d804      	bhi.n	8003d6c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e019      	b.n	8003da0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d204      	bcs.n	8003d7e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f043 030c 	orr.w	r3, r3, #12
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e010      	b.n	8003da0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90c      	bls.n	8003da0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a0c      	ldr	r2, [pc, #48]	@ (8003dbc <HAL_ETH_SetMDIOClockRange+0x80>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d804      	bhi.n	8003d98 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e003      	b.n	8003da0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f043 0310 	orr.w	r3, r3, #16
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	611a      	str	r2, [r3, #16]
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	02160ebf 	.word	0x02160ebf
 8003db4:	03938700 	.word	0x03938700
 8003db8:	05f5e0ff 	.word	0x05f5e0ff
 8003dbc:	08f0d17f 	.word	0x08f0d17f

08003dc0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e16:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e24:	2001      	movs	r0, #1
 8003e26:	f7fe fc7b 	bl	8002720 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e34:	6193      	str	r3, [r2, #24]
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4b53      	ldr	r3, [pc, #332]	@ (8003fa4 <ETH_SetMACConfig+0x164>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7b9b      	ldrb	r3, [r3, #14]
 8003e5e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	7c12      	ldrb	r2, [r2, #16]
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	d102      	bne.n	8003e6e <ETH_SetMACConfig+0x2e>
 8003e68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e6c:	e000      	b.n	8003e70 <ETH_SetMACConfig+0x30>
 8003e6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003e70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	7c52      	ldrb	r2, [r2, #17]
 8003e76:	2a00      	cmp	r2, #0
 8003e78:	d102      	bne.n	8003e80 <ETH_SetMACConfig+0x40>
 8003e7a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003e7e:	e000      	b.n	8003e82 <ETH_SetMACConfig+0x42>
 8003e80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7fdb      	ldrb	r3, [r3, #31]
 8003e8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	7f92      	ldrb	r2, [r2, #30]
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	d102      	bne.n	8003ea6 <ETH_SetMACConfig+0x66>
 8003ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea4:	e000      	b.n	8003ea8 <ETH_SetMACConfig+0x68>
 8003ea6:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	7f1b      	ldrb	r3, [r3, #28]
 8003eae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003eb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d102      	bne.n	8003ed0 <ETH_SetMACConfig+0x90>
 8003eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ece:	e000      	b.n	8003ed2 <ETH_SetMACConfig+0x92>
 8003ed0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	7bdb      	ldrb	r3, [r3, #15]
 8003ed8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003eda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003eea:	4313      	orrs	r3, r2
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7fe fc0c 	bl	8002720 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003f1e:	4013      	ands	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d101      	bne.n	8003f36 <ETH_SetMACConfig+0xf6>
 8003f32:	2280      	movs	r2, #128	@ 0x80
 8003f34:	e000      	b.n	8003f38 <ETH_SetMACConfig+0xf8>
 8003f36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003f46:	2a01      	cmp	r2, #1
 8003f48:	d101      	bne.n	8003f4e <ETH_SetMACConfig+0x10e>
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	e000      	b.n	8003f50 <ETH_SetMACConfig+0x110>
 8003f4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003f58:	2a01      	cmp	r2, #1
 8003f5a:	d101      	bne.n	8003f60 <ETH_SetMACConfig+0x120>
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	e000      	b.n	8003f62 <ETH_SetMACConfig+0x122>
 8003f60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003f6a:	2a01      	cmp	r2, #1
 8003f6c:	d101      	bne.n	8003f72 <ETH_SetMACConfig+0x132>
 8003f6e:	2202      	movs	r2, #2
 8003f70:	e000      	b.n	8003f74 <ETH_SetMACConfig+0x134>
 8003f72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f74:	4313      	orrs	r3, r2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fe fbc7 	bl	8002720 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	fd20810f 	.word	0xfd20810f

08003fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <ETH_SetDMAConfig+0x110>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <ETH_SetDMAConfig+0x2c>
 8003fce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003fd2:	e000      	b.n	8003fd6 <ETH_SetDMAConfig+0x2e>
 8003fd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	7b5b      	ldrb	r3, [r3, #13]
 8003fda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	7f52      	ldrb	r2, [r2, #29]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d102      	bne.n	8003fec <ETH_SetDMAConfig+0x44>
 8003fe6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fea:	e000      	b.n	8003fee <ETH_SetDMAConfig+0x46>
 8003fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	7b9b      	ldrb	r3, [r3, #14]
 8003ff4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ff6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ffc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7f1b      	ldrb	r3, [r3, #28]
 8004002:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004004:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7f9b      	ldrb	r3, [r3, #30]
 800400a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800400c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004012:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800401a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800401c:	4313      	orrs	r3, r2
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800403e:	2001      	movs	r0, #1
 8004040:	f7fe fb6e 	bl	8002720 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800405c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004062:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004068:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004070:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004072:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800407a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004080:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800408a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800408e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800409c:	2001      	movs	r0, #1
 800409e:	f7fe fb3f 	bl	8002720 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	f8de3f23 	.word	0xf8de3f23

080040bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0a6      	sub	sp, #152	@ 0x98
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80040d0:	2300      	movs	r3, #0
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040fe:	2300      	movs	r3, #0
 8004100:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004108:	2300      	movs	r3, #0
 800410a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004128:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800412a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004136:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fe7f 	bl	8003e40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004142:	2301      	movs	r3, #1
 8004144:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004146:	2301      	movs	r3, #1
 8004148:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004150:	2301      	movs	r3, #1
 8004152:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004164:	2300      	movs	r3, #0
 8004166:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800416e:	2301      	movs	r3, #1
 8004170:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004176:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004178:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800417c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800417e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004182:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800418a:	2300      	movs	r3, #0
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff05 	bl	8003fa8 <ETH_SetDMAConfig>
}
 800419e:	bf00      	nop
 80041a0:	3798      	adds	r7, #152	@ 0x98
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3305      	adds	r3, #5
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	3204      	adds	r2, #4
 80041c0:	7812      	ldrb	r2, [r2, #0]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <ETH_MACAddressConfig+0x68>)
 80041ca:	4413      	add	r3, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3303      	adds	r3, #3
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	061a      	lsls	r2, r3, #24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3302      	adds	r3, #2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3301      	adds	r3, #1
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	4313      	orrs	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <ETH_MACAddressConfig+0x6c>)
 80041fa:	4413      	add	r3, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40028040 	.word	0x40028040
 8004214:	40028044 	.word	0x40028044

08004218 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e03e      	b.n	80042a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	3206      	adds	r2, #6
 8004258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d80c      	bhi.n	8004288 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68d9      	ldr	r1, [r3, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	e004      	b.n	8004292 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d9bd      	bls.n	8004226 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042bc:	611a      	str	r2, [r3, #16]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e048      	b.n	800436a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6919      	ldr	r1, [r3, #16]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	440b      	add	r3, r1
 80042e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004314:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	3212      	adds	r2, #18
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d80c      	bhi.n	800435a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6919      	ldr	r1, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	e004      	b.n	8004364 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d9b3      	bls.n	80042d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b091      	sub	sp, #68	@ 0x44
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3318      	adds	r3, #24
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ea:	d007      	beq.n	80043fc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80043ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f0:	3304      	adds	r3, #4
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	e115      	b.n	800462c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8004400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004402:	3301      	adds	r3, #1
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004418:	f023 031f 	bic.w	r3, r3, #31
 800441c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	431a      	orrs	r2, r3
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004486:	e084      	b.n	8004592 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e005      	b.n	80044b4 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80044b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b6:	3301      	adds	r3, #1
 80044b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d902      	bls.n	80044c6 <ETH_Prepare_Tx_Descriptors+0x11e>
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	3b04      	subs	r3, #4
 80044c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044dc:	d007      	beq.n	80044ee <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80044de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e2:	3304      	adds	r3, #4
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d029      	beq.n	8004542 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004500:	e019      	b.n	8004536 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8004502:	f3bf 8f5f 	dmb	sy
}
 8004506:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004516:	3301      	adds	r3, #1
 8004518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800451a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451c:	2b03      	cmp	r3, #3
 800451e:	d902      	bls.n	8004526 <ETH_Prepare_Tx_Descriptors+0x17e>
 8004520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004522:	3b04      	subs	r3, #4
 8004524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	3301      	adds	r3, #1
 8004534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	429a      	cmp	r2, r3
 800453c:	d3e1      	bcc.n	8004502 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	e074      	b.n	800462c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800454e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004550:	3301      	adds	r3, #1
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800456c:	f023 031f 	bic.w	r3, r3, #31
 8004570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004572:	6852      	ldr	r2, [r2, #4]
 8004574:	431a      	orrs	r2, r3
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	3301      	adds	r3, #1
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004580:	f3bf 8f5f 	dmb	sy
}
 8004584:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f47f af76 	bne.w	8004488 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e005      	b.n	80045bc <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	6a3a      	ldr	r2, [r7, #32]
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80045d2:	f3bf 8f5f 	dmb	sy
}
 80045d6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ec:	3304      	adds	r3, #4
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045f8:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045fa:	f3ef 8310 	mrs	r3, PRIMASK
 80045fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004600:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	4413      	add	r3, r2
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3744      	adds	r7, #68	@ 0x44
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e16b      	b.n	800492c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004654:	2201      	movs	r2, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	429a      	cmp	r2, r3
 800466e:	f040 815a 	bne.w	8004926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d005      	beq.n	800468a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004686:	2b02      	cmp	r3, #2
 8004688:	d130      	bne.n	80046ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c0:	2201      	movs	r2, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 0201 	and.w	r2, r3, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d017      	beq.n	8004728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2203      	movs	r2, #3
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d123      	bne.n	800477c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	220f      	movs	r2, #15
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	08da      	lsrs	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3208      	adds	r2, #8
 8004776:	69b9      	ldr	r1, [r7, #24]
 8004778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0203 	and.w	r2, r3, #3
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80b4 	beq.w	8004926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b60      	ldr	r3, [pc, #384]	@ (8004944 <HAL_GPIO_Init+0x30c>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004944 <HAL_GPIO_Init+0x30c>)
 80047c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004944 <HAL_GPIO_Init+0x30c>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047da:	4a5b      	ldr	r2, [pc, #364]	@ (8004948 <HAL_GPIO_Init+0x310>)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_GPIO_Init+0x314>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d02b      	beq.n	800485e <HAL_GPIO_Init+0x226>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a51      	ldr	r2, [pc, #324]	@ (8004950 <HAL_GPIO_Init+0x318>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d025      	beq.n	800485a <HAL_GPIO_Init+0x222>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a50      	ldr	r2, [pc, #320]	@ (8004954 <HAL_GPIO_Init+0x31c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01f      	beq.n	8004856 <HAL_GPIO_Init+0x21e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4f      	ldr	r2, [pc, #316]	@ (8004958 <HAL_GPIO_Init+0x320>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d019      	beq.n	8004852 <HAL_GPIO_Init+0x21a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4e      	ldr	r2, [pc, #312]	@ (800495c <HAL_GPIO_Init+0x324>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_GPIO_Init+0x216>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a4d      	ldr	r2, [pc, #308]	@ (8004960 <HAL_GPIO_Init+0x328>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00d      	beq.n	800484a <HAL_GPIO_Init+0x212>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4c      	ldr	r2, [pc, #304]	@ (8004964 <HAL_GPIO_Init+0x32c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <HAL_GPIO_Init+0x20e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a4b      	ldr	r2, [pc, #300]	@ (8004968 <HAL_GPIO_Init+0x330>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_GPIO_Init+0x20a>
 800483e:	2307      	movs	r3, #7
 8004840:	e00e      	b.n	8004860 <HAL_GPIO_Init+0x228>
 8004842:	2308      	movs	r3, #8
 8004844:	e00c      	b.n	8004860 <HAL_GPIO_Init+0x228>
 8004846:	2306      	movs	r3, #6
 8004848:	e00a      	b.n	8004860 <HAL_GPIO_Init+0x228>
 800484a:	2305      	movs	r3, #5
 800484c:	e008      	b.n	8004860 <HAL_GPIO_Init+0x228>
 800484e:	2304      	movs	r3, #4
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x228>
 8004852:	2303      	movs	r3, #3
 8004854:	e004      	b.n	8004860 <HAL_GPIO_Init+0x228>
 8004856:	2302      	movs	r3, #2
 8004858:	e002      	b.n	8004860 <HAL_GPIO_Init+0x228>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_GPIO_Init+0x228>
 800485e:	2300      	movs	r3, #0
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f002 0203 	and.w	r2, r2, #3
 8004866:	0092      	lsls	r2, r2, #2
 8004868:	4093      	lsls	r3, r2
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004870:	4935      	ldr	r1, [pc, #212]	@ (8004948 <HAL_GPIO_Init+0x310>)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	3302      	adds	r3, #2
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_GPIO_Init+0x334>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048a2:	4a32      	ldr	r2, [pc, #200]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048a8:	4b30      	ldr	r3, [pc, #192]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048cc:	4a27      	ldr	r2, [pc, #156]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048d2:	4b26      	ldr	r3, [pc, #152]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048f6:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_GPIO_Init+0x334>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004920:	4a12      	ldr	r2, [pc, #72]	@ (800496c <HAL_GPIO_Init+0x334>)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b0f      	cmp	r3, #15
 8004930:	f67f ae90 	bls.w	8004654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3724      	adds	r7, #36	@ 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40013800 	.word	0x40013800
 800494c:	40020000 	.word	0x40020000
 8004950:	40020400 	.word	0x40020400
 8004954:	40020800 	.word	0x40020800
 8004958:	40020c00 	.word	0x40020c00
 800495c:	40021000 	.word	0x40021000
 8004960:	40021400 	.word	0x40021400
 8004964:	40021800 	.word	0x40021800
 8004968:	40021c00 	.word	0x40021c00
 800496c:	40013c00 	.word	0x40013c00

08004970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e267      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d075      	beq.n	8004a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800498e:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d00c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499a:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d112      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a6:	4b82      	ldr	r3, [pc, #520]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b2:	d10b      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05b      	beq.n	8004a78 <HAL_RCC_OscConfig+0x108>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d157      	bne.n	8004a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e242      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_OscConfig+0x74>
 80049d6:	4b76      	ldr	r3, [pc, #472]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a75      	ldr	r2, [pc, #468]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e01d      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x98>
 80049ee:	4b70      	ldr	r3, [pc, #448]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6f      	ldr	r2, [pc, #444]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 8004a08:	4b69      	ldr	r3, [pc, #420]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a68      	ldr	r2, [pc, #416]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a65      	ldr	r2, [pc, #404]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fd fe6e 	bl	8002708 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fd fe6a 	bl	8002708 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	@ 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e207      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0xc0>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fd fe5a 	bl	8002708 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fd fe56 	bl	8002708 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1f3      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	4b51      	ldr	r3, [pc, #324]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0xe8>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a86:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a92:	4b47      	ldr	r3, [pc, #284]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d11c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a9e:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c7      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4937      	ldr	r1, [pc, #220]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	e03a      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae0:	4b34      	ldr	r3, [pc, #208]	@ (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fd fe0f 	bl	8002708 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aee:	f7fd fe0b 	bl	8002708 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1a8      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0c:	4b28      	ldr	r3, [pc, #160]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4925      	ldr	r1, [pc, #148]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	e015      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fdee 	bl	8002708 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fd fdea 	bl	8002708 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e187      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d036      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fdce 	bl	8002708 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fd fdca 	bl	8002708 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e167      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x200>
 8004b8e:	e01b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fd fdb7 	bl	8002708 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	e00e      	b.n	8004bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fd fdb3 	bl	8002708 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d907      	bls.n	8004bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e150      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	42470000 	.word	0x42470000
 8004bb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	4b88      	ldr	r3, [pc, #544]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ea      	bne.n	8004b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8097 	beq.w	8004d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b81      	ldr	r3, [pc, #516]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	4a7c      	ldr	r2, [pc, #496]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	4b77      	ldr	r3, [pc, #476]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d118      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c12:	4b74      	ldr	r3, [pc, #464]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fd73 	bl	8002708 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fd fd6f 	bl	8002708 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e10c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	4b6a      	ldr	r3, [pc, #424]	@ (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2ea>
 8004c4c:	4b64      	ldr	r3, [pc, #400]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	4a63      	ldr	r2, [pc, #396]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x30c>
 8004c62:	4b5f      	ldr	r3, [pc, #380]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	4a5e      	ldr	r2, [pc, #376]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	4a5b      	ldr	r2, [pc, #364]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c7c:	4b58      	ldr	r3, [pc, #352]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c80:	4a57      	ldr	r2, [pc, #348]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c88:	4b55      	ldr	r3, [pc, #340]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	4a54      	ldr	r2, [pc, #336]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fd34 	bl	8002708 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fd fd30 	bl	8002708 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0cb      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ee      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x334>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc8:	f7fd fd1e 	bl	8002708 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fd fd1a 	bl	8002708 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0b5      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ee      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf8:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	4a38      	ldr	r2, [pc, #224]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a1 	beq.w	8004e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0e:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d05c      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d141      	bne.n	8004da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd fcee 	bl	8002708 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fd fcea 	bl	8002708 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e087      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	3b01      	subs	r3, #1
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	491b      	ldr	r1, [pc, #108]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fd fcc3 	bl	8002708 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fd fcbf 	bl	8002708 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e05c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	4b11      	ldr	r3, [pc, #68]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x416>
 8004da4:	e054      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dac:	f7fd fcac 	bl	8002708 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fd fca8 	bl	8002708 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e045      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x444>
 8004dd2:	e03d      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e038      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x4ec>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d028      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d121      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d11a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d111      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0cc      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e74:	4b68      	ldr	r3, [pc, #416]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90c      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b65      	ldr	r3, [pc, #404]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b63      	ldr	r3, [pc, #396]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb4:	4b59      	ldr	r3, [pc, #356]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ebe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ecc:	4b53      	ldr	r3, [pc, #332]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a52      	ldr	r2, [pc, #328]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	494d      	ldr	r1, [pc, #308]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d044      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b47      	ldr	r3, [pc, #284]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d003      	beq.n	8004f1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e067      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b37      	ldr	r3, [pc, #220]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4934      	ldr	r1, [pc, #208]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fd fbda 	bl	8002708 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fd fbd6 	bl	8002708 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e04f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b25      	ldr	r3, [pc, #148]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20c      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b22      	ldr	r3, [pc, #136]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b20      	ldr	r3, [pc, #128]	@ (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e032      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4916      	ldr	r1, [pc, #88]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	@ (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fc ff58 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023c00 	.word	0x40023c00
 800501c:	40023800 	.word	0x40023800
 8005020:	08025024 	.word	0x08025024
 8005024:	20000018 	.word	0x20000018
 8005028:	20000020 	.word	0x20000020

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b090      	sub	sp, #64	@ 0x40
 8005032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005044:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b08      	cmp	r3, #8
 800504e:	d00d      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x40>
 8005050:	2b08      	cmp	r3, #8
 8005052:	f200 80a1 	bhi.w	8005198 <HAL_RCC_GetSysClockFreq+0x16c>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x34>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d003      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x3a>
 800505e:	e09b      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b53      	ldr	r3, [pc, #332]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005064:	e09b      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b53      	ldr	r3, [pc, #332]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800506a:	e098      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b4f      	ldr	r3, [pc, #316]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b4d      	ldr	r3, [pc, #308]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d028      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b4a      	ldr	r3, [pc, #296]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	627a      	str	r2, [r7, #36]	@ 0x24
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005094:	2100      	movs	r1, #0
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005098:	fb03 f201 	mul.w	r2, r3, r1
 800509c:	2300      	movs	r3, #0
 800509e:	fb00 f303 	mul.w	r3, r0, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	4a43      	ldr	r2, [pc, #268]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050a6:	fba0 1202 	umull	r1, r2, r0, r2
 80050aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ac:	460a      	mov	r2, r1
 80050ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b2:	4413      	add	r3, r2
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	2200      	movs	r2, #0
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80050c6:	f7fb fddf 	bl	8000c88 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4613      	mov	r3, r2
 80050d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d2:	e053      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d4:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	099b      	lsrs	r3, r3, #6
 80050da:	2200      	movs	r2, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	617a      	str	r2, [r7, #20]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050e6:	f04f 0b00 	mov.w	fp, #0
 80050ea:	4652      	mov	r2, sl
 80050ec:	465b      	mov	r3, fp
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	0159      	lsls	r1, r3, #5
 80050f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fc:	0150      	lsls	r0, r2, #5
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	ebb2 080a 	subs.w	r8, r2, sl
 8005106:	eb63 090b 	sbc.w	r9, r3, fp
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005116:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800511a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800511e:	ebb2 0408 	subs.w	r4, r2, r8
 8005122:	eb63 0509 	sbc.w	r5, r3, r9
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	00eb      	lsls	r3, r5, #3
 8005130:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005134:	00e2      	lsls	r2, r4, #3
 8005136:	4614      	mov	r4, r2
 8005138:	461d      	mov	r5, r3
 800513a:	eb14 030a 	adds.w	r3, r4, sl
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	eb45 030b 	adc.w	r3, r5, fp
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005152:	4629      	mov	r1, r5
 8005154:	028b      	lsls	r3, r1, #10
 8005156:	4621      	mov	r1, r4
 8005158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800515c:	4621      	mov	r1, r4
 800515e:	028a      	lsls	r2, r1, #10
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005166:	2200      	movs	r2, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	60fa      	str	r2, [r7, #12]
 800516c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005170:	f7fb fd8a 	bl	8000c88 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4613      	mov	r3, r2
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800518c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005196:	e002      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005198:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800519c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3740      	adds	r7, #64	@ 0x40
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	00f42400 	.word	0x00f42400
 80051b4:	017d7840 	.word	0x017d7840

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000018 	.word	0x20000018

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	@ (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	08025034 	.word	0x08025034

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffdc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	@ (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	08025034 	.word	0x08025034

08005220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	220f      	movs	r2, #15
 800522e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005230:	4b12      	ldr	r3, [pc, #72]	@ (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800523c:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005254:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005262:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <HAL_RCC_GetClockConfig+0x60>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0207 	and.w	r2, r3, #7
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	40023c00 	.word	0x40023c00

08005284 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e01c      	b.n	80052d0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	795b      	ldrb	r3, [r3, #5]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fc fc9c 	bl	8001be4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0204 	orr.w	r2, r2, #4
 80052c0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2210      	movs	r2, #16
 80052fa:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80052fc:	2301      	movs	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e009      	b.n	8005316 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2208      	movs	r2, #8
 8005310:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005312:	2301      	movs	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10b      	bne.n	8005334 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2204      	movs	r2, #4
 8005320:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f837 	bl	8005396 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005330:	605a      	str	r2, [r3, #4]

    return;
 8005332:	e022      	b.n	800537a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01d      	beq.n	800537a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0208 	bic.w	r2, r2, #8
 800534c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	795b      	ldrb	r3, [r3, #5]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b04      	cmp	r3, #4
 8005360:	d00b      	beq.n	800537a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f803 	bl	8005380 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e022      	b.n	8005402 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fc fc50 	bl	8001c74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2203      	movs	r2, #3
 80053d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f815 	bl	800540c <HAL_SD_InitCard>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00a      	b.n	8005402 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800540c:	b5b0      	push	{r4, r5, r7, lr}
 800540e:	b08e      	sub	sp, #56	@ 0x38
 8005410:	af04      	add	r7, sp, #16
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005428:	2376      	movs	r3, #118	@ 0x76
 800542a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681d      	ldr	r5, [r3, #0]
 8005430:	466c      	mov	r4, sp
 8005432:	f107 0314 	add.w	r3, r7, #20
 8005436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800543a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005444:	4628      	mov	r0, r5
 8005446:	f002 fe11 	bl	800806c <SDIO_Init>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04f      	b.n	80054fc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800545c:	4b29      	ldr	r3, [pc, #164]	@ (8005504 <HAL_SD_InitCard+0xf8>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fe49 	bl	80080fe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800546c:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <HAL_SD_InitCard+0xf8>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005472:	2002      	movs	r0, #2
 8005474:	f7fd f954 	bl	8002720 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ff6b 	bl	8006354 <SD_PowerON>
 800547e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e02e      	b.n	80054fc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fe8a 	bl	80061b8 <SD_InitCard>
 80054a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e01b      	b.n	80054fc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 fea8 	bl	8008222 <SDMMC_CmdBlockLength>
 80054d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00f      	beq.n	80054fa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a0a      	ldr	r2, [pc, #40]	@ (8005508 <HAL_SD_InitCard+0xfc>)
 80054e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3728      	adds	r7, #40	@ 0x28
 8005500:	46bd      	mov	sp, r7
 8005502:	bdb0      	pop	{r4, r5, r7, pc}
 8005504:	422580a0 	.word	0x422580a0
 8005508:	004005ff 	.word	0x004005ff

0800550c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	@ 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0c0      	b.n	80056b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 80b9 	bne.w	80056b4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	441a      	add	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	429a      	cmp	r2, r3
 8005554:	d907      	bls.n	8005566 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0a7      	b.n	80056b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	4a4c      	ldr	r2, [pc, #304]	@ (80056c0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	4a4b      	ldr	r2, [pc, #300]	@ (80056c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005598:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2200      	movs	r2, #0
 80055a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3380      	adds	r3, #128	@ 0x80
 80055d0:	4619      	mov	r1, r3
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	025b      	lsls	r3, r3, #9
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	f7fd fa55 	bl	8002a88 <HAL_DMA_Start_IT>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80055f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a33      	ldr	r2, [pc, #204]	@ (80056c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e050      	b.n	80056b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005614:	4b2d      	ldr	r3, [pc, #180]	@ (80056cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	2b01      	cmp	r3, #1
 8005620:	d002      	beq.n	8005628 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	025b      	lsls	r3, r3, #9
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	025b      	lsls	r3, r3, #9
 8005632:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005634:	2390      	movs	r3, #144	@ 0x90
 8005636:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005638:	2302      	movs	r3, #2
 800563a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800563c:	2300      	movs	r3, #0
 800563e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005640:	2301      	movs	r3, #1
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f107 0210 	add.w	r2, r7, #16
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f002 fdbb 	bl	80081ca <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d90a      	bls.n	8005670 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2282      	movs	r2, #130	@ 0x82
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005666:	4618      	mov	r0, r3
 8005668:	f002 fe1f 	bl	80082aa <SDMMC_CmdReadMultiBlock>
 800566c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800566e:	e009      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2281      	movs	r2, #129	@ 0x81
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567c:	4618      	mov	r0, r3
 800567e:	f002 fdf2 	bl	8008266 <SDMMC_CmdReadSingleBlock>
 8005682:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0e      	ldr	r2, [pc, #56]	@ (80056c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005690:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	431a      	orrs	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e002      	b.n	80056b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	@ 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	08005fc7 	.word	0x08005fc7
 80056c4:	08006039 	.word	0x08006039
 80056c8:	004005ff 	.word	0x004005ff
 80056cc:	4225858c 	.word	0x4225858c

080056d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08c      	sub	sp, #48	@ 0x30
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0c5      	b.n	8005884 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 80be 	bne.w	8005882 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800570c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005716:	429a      	cmp	r2, r3
 8005718:	d907      	bls.n	800572a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0ac      	b.n	8005884 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2203      	movs	r2, #3
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8005748:	f043 0302 	orr.w	r3, r3, #2
 800574c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	4a4e      	ldr	r2, [pc, #312]	@ (800588c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575a:	4a4d      	ldr	r2, [pc, #308]	@ (8005890 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800575c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	2200      	movs	r2, #0
 8005764:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	2b01      	cmp	r3, #1
 800576c:	d002      	beq.n	8005774 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	025b      	lsls	r3, r3, #9
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d90a      	bls.n	8005790 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	22a0      	movs	r2, #160	@ 0xa0
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005786:	4618      	mov	r0, r3
 8005788:	f002 fdd3 	bl	8008332 <SDMMC_CmdWriteMultiBlock>
 800578c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800578e:	e009      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2290      	movs	r2, #144	@ 0x90
 8005794:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579c:	4618      	mov	r0, r3
 800579e:	f002 fda6 	bl	80082ee <SDMMC_CmdWriteSingleBlock>
 80057a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d012      	beq.n	80057d0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a39      	ldr	r2, [pc, #228]	@ (8005894 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e059      	b.n	8005884 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80057d0:	4b31      	ldr	r3, [pc, #196]	@ (8005898 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	2240      	movs	r2, #64	@ 0x40
 80057dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3380      	adds	r3, #128	@ 0x80
 8005806:	461a      	mov	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	025b      	lsls	r3, r3, #9
 800580c:	089b      	lsrs	r3, r3, #2
 800580e:	f7fd f93b 	bl	8002a88 <HAL_DMA_Start_IT>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01c      	beq.n	8005852 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8005826:	f023 0302 	bic.w	r3, r3, #2
 800582a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a18      	ldr	r2, [pc, #96]	@ (8005894 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e018      	b.n	8005884 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	025b      	lsls	r3, r3, #9
 800585c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800585e:	2390      	movs	r3, #144	@ 0x90
 8005860:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005866:	2300      	movs	r3, #0
 8005868:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800586a:	2301      	movs	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f107 0210 	add.w	r2, r7, #16
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f002 fca6 	bl	80081ca <SDIO_ConfigData>

      return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3730      	adds	r7, #48	@ 0x30
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08005f9d 	.word	0x08005f9d
 8005890:	08006039 	.word	0x08006039
 8005894:	004005ff 	.word	0x004005ff
 8005898:	4225858c 	.word	0x4225858c

0800589c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_SD_IRQHandler+0x2e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fdfc 	bl	80064c0 <SD_Read_IT>
 80058c8:	e165      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 808f 	beq.w	80059f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80058f2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80058f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d039      	beq.n	8005986 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_SD_IRQHandler+0x8a>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f002 fd24 	bl	8008378 <SDMMC_CmdStopTransfer>
 8005930:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f92f 	bl	8005ba8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <HAL_SD_IRQHandler+0xda>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f003 fa90 	bl	8008e9c <HAL_SD_RxCpltCallback>
 800597c:	e10b      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f003 fa82 	bl	8008e88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005984:	e107      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8102 	beq.w	8005b96 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d011      	beq.n	80059c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f002 fce9 	bl	8008378 <SDMMC_CmdStopTransfer>
 80059a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8f4 	bl	8005ba8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 80e5 	bne.w	8005b96 <HAL_SD_IRQHandler+0x2fa>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 80df 	bne.w	8005b96 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0208 	bic.w	r2, r2, #8
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f003 fa49 	bl	8008e88 <HAL_SD_TxCpltCallback>
}
 80059f6:	e0ce      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_SD_IRQHandler+0x17c>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fda6 	bl	8006562 <SD_Write_IT>
 8005a16:	e0be      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a1e:	f240 233a 	movw	r3, #570	@ 0x23a
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80b6 	beq.w	8005b96 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	f043 0202 	orr.w	r2, r3, #2
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	f043 0210 	orr.w	r2, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	f043 0208 	orr.w	r2, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f240 723a 	movw	r2, #1850	@ 0x73a
 8005ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8005ac4:	f023 0302 	bic.w	r3, r3, #2
 8005ac8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 fc52 	bl	8008378 <SDMMC_CmdStopTransfer>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f855 	bl	8005ba8 <HAL_SD_ErrorCallback>
}
 8005afe:	e04a      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d045      	beq.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <HAL_SD_IRQHandler+0x282>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d011      	beq.n	8005b42 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba0 <HAL_SD_IRQHandler+0x304>)
 8005b24:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd f874 	bl	8002c18 <HAL_DMA_Abort_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d02f      	beq.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 face 	bl	80060dc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b40:	e029      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <HAL_SD_IRQHandler+0x2ba>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <HAL_SD_IRQHandler+0x308>)
 8005b5c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd f858 	bl	8002c18 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d013      	beq.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fae9 	bl	800614a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b78:	e00d      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 f970 	bl	8008e74 <HAL_SD_AbortCallback>
}
 8005b94:	e7ff      	b.n	8005b96 <HAL_SD_IRQHandler+0x2fa>
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	080060dd 	.word	0x080060dd
 8005ba4:	0800614b 	.word	0x0800614b

08005ba8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bca:	0f9b      	lsrs	r3, r3, #30
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd6:	0e9b      	lsrs	r3, r3, #26
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bfa:	0c1b      	lsrs	r3, r3, #16
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c1c:	0d1b      	lsrs	r3, r3, #20
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c3a:	0bdb      	lsrs	r3, r3, #15
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c4c:	0b9b      	lsrs	r3, r3, #14
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c5e:	0b5b      	lsrs	r3, r3, #13
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c70:	0b1b      	lsrs	r3, r3, #12
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2200      	movs	r2, #0
 8005c82:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d163      	bne.n	8005d54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c90:	009a      	lsls	r2, r3, #2
 8005c92:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005c9c:	0f92      	lsrs	r2, r2, #30
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca8:	0edb      	lsrs	r3, r3, #27
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ccc:	0d5b      	lsrs	r3, r3, #21
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cde:	0c9b      	lsrs	r3, r3, #18
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf0:	0bdb      	lsrs	r3, r3, #15
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	7e1b      	ldrb	r3, [r3, #24]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	3302      	adds	r3, #2
 8005d14:	2201      	movs	r2, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d1e:	fb03 f202 	mul.w	r2, r3, r2
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	7a1b      	ldrb	r3, [r3, #8]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	2201      	movs	r2, #1
 8005d32:	409a      	lsls	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005d40:	0a52      	lsrs	r2, r2, #9
 8005d42:	fb03 f202 	mul.w	r2, r3, r2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d50:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d52:	e031      	b.n	8005db8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d11d      	bne.n	8005d98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	3301      	adds	r3, #1
 8005d78:	029a      	lsls	r2, r3, #10
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d8c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d96:	e00f      	b.n	8005db8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a58      	ldr	r2, [pc, #352]	@ (8005f00 <HAL_SD_GetCardCSD+0x344>)
 8005d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e09d      	b.n	8005ef4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dbc:	0b9b      	lsrs	r3, r3, #14
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	0fdb      	lsrs	r3, r3, #31
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfc:	0f5b      	lsrs	r3, r3, #29
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	0e9b      	lsrs	r3, r3, #26
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e20:	0d9b      	lsrs	r3, r3, #22
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e32:	0d5b      	lsrs	r3, r3, #21
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	0bdb      	lsrs	r3, r3, #15
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e76:	0b9b      	lsrs	r3, r3, #14
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	0b5b      	lsrs	r3, r3, #13
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9e:	0b1b      	lsrs	r3, r3, #12
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	0a9b      	lsrs	r3, r3, #10
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	004005ff 	.word	0x004005ff

08005f04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f68:	f107 030c 	add.w	r3, r7, #12
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa7e 	bl	8006470 <SD_SendStatus>
 8005f74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0a5b      	lsrs	r3, r3, #9
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f92:	693b      	ldr	r3, [r7, #16]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	2b82      	cmp	r3, #130	@ 0x82
 8005fda:	d111      	bne.n	8006000 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 f9c9 	bl	8008378 <SDMMC_CmdStopTransfer>
 8005fe6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fdd4 	bl	8005ba8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0208 	bic.w	r2, r2, #8
 800600e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f002 ff37 	bl	8008e9c <HAL_SD_RxCpltCallback>
#endif
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc ff92 	bl	8002f70 <HAL_DMA_GetError>
 800604c:	4603      	mov	r3, r0
 800604e:	2b02      	cmp	r3, #2
 8006050:	d03e      	beq.n	80060d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006060:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d002      	beq.n	800606e <SD_DMAError+0x36>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d12d      	bne.n	80060ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a19      	ldr	r2, [pc, #100]	@ (80060d8 <SD_DMAError+0xa0>)
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006084:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff ff62 	bl	8005f5c <HAL_SD_GetCardState>
 8006098:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b06      	cmp	r3, #6
 800609e:	d002      	beq.n	80060a6 <SD_DMAError+0x6e>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d10a      	bne.n	80060bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f964 	bl	8008378 <SDMMC_CmdStopTransfer>
 80060b0:	4602      	mov	r2, r0
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	431a      	orrs	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff fd6c 	bl	8005ba8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80060d0:	bf00      	nop
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	004005ff 	.word	0x004005ff

080060dc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff31 	bl	8005f5c <HAL_SD_GetCardState>
 80060fa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b06      	cmp	r3, #6
 800610e:	d002      	beq.n	8006116 <SD_DMATxAbort+0x3a>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d10a      	bne.n	800612c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f002 f92c 	bl	8008378 <SDMMC_CmdStopTransfer>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f002 fe9d 	bl	8008e74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800613a:	e002      	b.n	8006142 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fd33 	bl	8005ba8 <HAL_SD_ErrorCallback>
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006160:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fefa 	bl	8005f5c <HAL_SD_GetCardState>
 8006168:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b06      	cmp	r3, #6
 800617c:	d002      	beq.n	8006184 <SD_DMARxAbort+0x3a>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b05      	cmp	r3, #5
 8006182:	d10a      	bne.n	800619a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f002 f8f5 	bl	8008378 <SDMMC_CmdStopTransfer>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f002 fe66 	bl	8008e74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80061a8:	e002      	b.n	80061b0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fcfc 	bl	8005ba8 <HAL_SD_ErrorCallback>
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061b8:	b5b0      	push	{r4, r5, r7, lr}
 80061ba:	b094      	sub	sp, #80	@ 0x50
 80061bc:	af04      	add	r7, sp, #16
 80061be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061c0:	2301      	movs	r3, #1
 80061c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 ffa6 	bl	800811a <SDIO_GetPowerState>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061d8:	e0b8      	b.n	800634c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d02f      	beq.n	8006242 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 f98d 	bl	8008506 <SDMMC_CmdSendCID>
 80061ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80061f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f6:	e0a9      	b.n	800634c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 ffd0 	bl	80081a4 <SDIO_GetResponse>
 8006204:	4602      	mov	r2, r0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2104      	movs	r1, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f001 ffc7 	bl	80081a4 <SDIO_GetResponse>
 8006216:	4602      	mov	r2, r0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2108      	movs	r1, #8
 8006222:	4618      	mov	r0, r3
 8006224:	f001 ffbe 	bl	80081a4 <SDIO_GetResponse>
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	210c      	movs	r1, #12
 8006234:	4618      	mov	r0, r3
 8006236:	f001 ffb5 	bl	80081a4 <SDIO_GetResponse>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	2b03      	cmp	r3, #3
 8006248:	d00d      	beq.n	8006266 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f107 020e 	add.w	r2, r7, #14
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f002 f993 	bl	8008580 <SDMMC_CmdSetRelAdd>
 800625a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800625c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <SD_InitCard+0xae>
    {
      return errorstate;
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	e072      	b.n	800634c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626a:	2b03      	cmp	r3, #3
 800626c:	d036      	beq.n	80062dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800626e:	89fb      	ldrh	r3, [r7, #14]
 8006270:	461a      	mov	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	041b      	lsls	r3, r3, #16
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f002 f95d 	bl	8008542 <SDMMC_CmdSendCSD>
 8006288:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800628a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006292:	e05b      	b.n	800634c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f001 ff82 	bl	80081a4 <SDIO_GetResponse>
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2104      	movs	r1, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 ff79 	bl	80081a4 <SDIO_GetResponse>
 80062b2:	4602      	mov	r2, r0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2108      	movs	r1, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 ff70 	bl	80081a4 <SDIO_GetResponse>
 80062c4:	4602      	mov	r2, r0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	210c      	movs	r1, #12
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 ff67 	bl	80081a4 <SDIO_GetResponse>
 80062d6:	4602      	mov	r2, r0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2104      	movs	r1, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 ff5e 	bl	80081a4 <SDIO_GetResponse>
 80062e8:	4603      	mov	r3, r0
 80062ea:	0d1a      	lsrs	r2, r3, #20
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fc60 	bl	8005bbc <HAL_SD_GetCardCSD>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006302:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006306:	e021      	b.n	800634c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6819      	ldr	r1, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	2200      	movs	r2, #0
 8006314:	461c      	mov	r4, r3
 8006316:	4615      	mov	r5, r2
 8006318:	4622      	mov	r2, r4
 800631a:	462b      	mov	r3, r5
 800631c:	4608      	mov	r0, r1
 800631e:	f002 f84d 	bl	80083bc <SDMMC_CmdSelDesel>
 8006322:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <SD_InitCard+0x176>
  {
    return errorstate;
 800632a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632c:	e00e      	b.n	800634c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681d      	ldr	r5, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	466c      	mov	r4, sp
 8006336:	f103 0210 	add.w	r2, r3, #16
 800633a:	ca07      	ldmia	r2, {r0, r1, r2}
 800633c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006340:	3304      	adds	r3, #4
 8006342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006344:	4628      	mov	r0, r5
 8006346:	f001 fe91 	bl	800806c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3740      	adds	r7, #64	@ 0x40
 8006350:	46bd      	mov	sp, r7
 8006352:	bdb0      	pop	{r4, r5, r7, pc}

08006354 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f002 f848 	bl	8008402 <SDMMC_CmdGoIdleState>
 8006372:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <SD_PowerON+0x2a>
  {
    return errorstate;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e072      	b.n	8006464 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f002 f85b 	bl	800843e <SDMMC_CmdOperCond>
 8006388:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00d      	beq.n	80063ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f002 f831 	bl	8008402 <SDMMC_CmdGoIdleState>
 80063a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	e05b      	b.n	8006464 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d137      	bne.n	800642a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 f85b 	bl	800847c <SDMMC_CmdAppCommand>
 80063c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d02d      	beq.n	800642a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80063d2:	e047      	b.n	8006464 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f002 f84e 	bl	800847c <SDMMC_CmdAppCommand>
 80063e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <SD_PowerON+0x98>
    {
      return errorstate;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	e03b      	b.n	8006464 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	491e      	ldr	r1, [pc, #120]	@ (800646c <SD_PowerON+0x118>)
 80063f2:	4618      	mov	r0, r3
 80063f4:	f002 f864 	bl	80084c0 <SDMMC_CmdAppOperCommand>
 80063f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006400:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006404:	e02e      	b.n	8006464 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fec9 	bl	80081a4 <SDIO_GetResponse>
 8006412:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	0fdb      	lsrs	r3, r3, #31
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <SD_PowerON+0xcc>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <SD_PowerON+0xce>
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]

    count++;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3301      	adds	r3, #1
 8006428:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006430:	4293      	cmp	r3, r2
 8006432:	d802      	bhi.n	800643a <SD_PowerON+0xe6>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0cc      	beq.n	80063d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006440:	4293      	cmp	r3, r2
 8006442:	d902      	bls.n	800644a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006444:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006448:	e00c      	b.n	8006464 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
 800645a:	e002      	b.n	8006462 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	c1100000 	.word	0xc1100000

08006470 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006480:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006484:	e018      	b.n	80064b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f002 f895 	bl	80085c2 <SDMMC_CmdSendStatus>
 8006498:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e009      	b.n	80064b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fe7a 	bl	80081a4 <SDIO_GetResponse>
 80064b0:	4602      	mov	r2, r0
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03f      	beq.n	800655a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e033      	b.n	8006548 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fdec 	bl	80080c2 <SDIO_ReadFIFO>
 80064ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	701a      	strb	r2, [r3, #0]
      tmp++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3301      	adds	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	3b01      	subs	r3, #1
 8006514:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2da      	uxtb	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3b01      	subs	r3, #1
 800652a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	0e1b      	lsrs	r3, r3, #24
 8006530:	b2da      	uxtb	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	3b01      	subs	r3, #1
 8006540:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	3301      	adds	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b07      	cmp	r3, #7
 800654c:	d9c8      	bls.n	80064e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800655a:	bf00      	nop
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d043      	beq.n	8006604 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e037      	b.n	80065f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3b01      	subs	r3, #1
 8006592:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	021a      	lsls	r2, r3, #8
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4313      	orrs	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	041a      	lsls	r2, r3, #16
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	061a      	lsls	r2, r3, #24
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3b01      	subs	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fd78 	bl	80080dc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b07      	cmp	r3, #7
 80065f6:	d9c4      	bls.n	8006582 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e041      	b.n	80066a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fb fe40 	bl	80022b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 fa7e 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d001      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e04e      	b.n	8006762 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a23      	ldr	r2, [pc, #140]	@ (8006770 <HAL_TIM_Base_Start_IT+0xc4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ee:	d01d      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006774 <HAL_TIM_Base_Start_IT+0xc8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006778 <HAL_TIM_Base_Start_IT+0xcc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1c      	ldr	r2, [pc, #112]	@ (800677c <HAL_TIM_Base_Start_IT+0xd0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <HAL_TIM_Base_Start_IT+0xd4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a19      	ldr	r2, [pc, #100]	@ (8006784 <HAL_TIM_Base_Start_IT+0xd8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_TIM_Base_Start_IT+0x80>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a18      	ldr	r2, [pc, #96]	@ (8006788 <HAL_TIM_Base_Start_IT+0xdc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d111      	bne.n	8006750 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b06      	cmp	r3, #6
 800673c:	d010      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674e:	e007      	b.n	8006760 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40010400 	.word	0x40010400
 8006784:	40014000 	.word	0x40014000
 8006788:	40001800 	.word	0x40001800

0800678c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d020      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0202 	mvn.w	r2, #2
 80067c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f999 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f98b 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f99c 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01b      	beq.n	800683c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0204 	mvn.w	r2, #4
 800680c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f973 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f965 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f976 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d020      	beq.n	8006888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0208 	mvn.w	r2, #8
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2204      	movs	r2, #4
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f94d 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f93f 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f950 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	d020      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0210 	mvn.w	r2, #16
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2208      	movs	r2, #8
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f927 	bl	8006b0e <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f919 	bl	8006afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f92a 	bl	8006b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0201 	mvn.w	r2, #1
 80068f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb f94a 	bl	8001b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00c      	beq.n	800691c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fae4 	bl	8006ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8fb 	bl	8006b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0220 	mvn.w	r2, #32
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fab6 	bl	8006ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIM_ConfigClockSource+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e0b4      	b.n	8006af2 <HAL_TIM_ConfigClockSource+0x186>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c0:	d03e      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0xd4>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c6:	f200 8087 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ce:	f000 8086 	beq.w	8006ade <HAL_TIM_ConfigClockSource+0x172>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d6:	d87f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b70      	cmp	r3, #112	@ 0x70
 80069da:	d01a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xa6>
 80069dc:	2b70      	cmp	r3, #112	@ 0x70
 80069de:	d87b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b60      	cmp	r3, #96	@ 0x60
 80069e2:	d050      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x11a>
 80069e4:	2b60      	cmp	r3, #96	@ 0x60
 80069e6:	d877      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b50      	cmp	r3, #80	@ 0x50
 80069ea:	d03c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xfa>
 80069ec:	2b50      	cmp	r3, #80	@ 0x50
 80069ee:	d873      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b40      	cmp	r3, #64	@ 0x40
 80069f2:	d058      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80069f4:	2b40      	cmp	r3, #64	@ 0x40
 80069f6:	d86f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b30      	cmp	r3, #48	@ 0x30
 80069fa:	d064      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	2b30      	cmp	r3, #48	@ 0x30
 80069fe:	d86b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d060      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d867      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d05a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	e062      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a22:	f000 f9b9 	bl	8006d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	609a      	str	r2, [r3, #8]
      break;
 8006a3e:	e04f      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a50:	f000 f9a2 	bl	8006d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a62:	609a      	str	r2, [r3, #8]
      break;
 8006a64:	e03c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 f916 	bl	8006ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2150      	movs	r1, #80	@ 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f96f 	bl	8006d62 <TIM_ITRx_SetConfig>
      break;
 8006a84:	e02c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 f935 	bl	8006d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2160      	movs	r1, #96	@ 0x60
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f95f 	bl	8006d62 <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e01c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 f8f6 	bl	8006ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2140      	movs	r1, #64	@ 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f94f 	bl	8006d62 <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f000 f946 	bl	8006d62 <TIM_ITRx_SetConfig>
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a46      	ldr	r2, [pc, #280]	@ (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6a:	d00f      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a43      	ldr	r2, [pc, #268]	@ (8006c7c <TIM_Base_SetConfig+0x130>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00b      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a42      	ldr	r2, [pc, #264]	@ (8006c80 <TIM_Base_SetConfig+0x134>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a41      	ldr	r2, [pc, #260]	@ (8006c84 <TIM_Base_SetConfig+0x138>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a40      	ldr	r2, [pc, #256]	@ (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d108      	bne.n	8006b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a35      	ldr	r2, [pc, #212]	@ (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bac:	d027      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a32      	ldr	r2, [pc, #200]	@ (8006c7c <TIM_Base_SetConfig+0x130>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d023      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a31      	ldr	r2, [pc, #196]	@ (8006c80 <TIM_Base_SetConfig+0x134>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d01f      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a30      	ldr	r2, [pc, #192]	@ (8006c84 <TIM_Base_SetConfig+0x138>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d017      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8006c8c <TIM_Base_SetConfig+0x140>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c90 <TIM_Base_SetConfig+0x144>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00f      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	@ (8006c94 <TIM_Base_SetConfig+0x148>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <TIM_Base_SetConfig+0x14c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <TIM_Base_SetConfig+0x150>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	@ (8006ca0 <TIM_Base_SetConfig+0x154>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a10      	ldr	r2, [pc, #64]	@ (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_Base_SetConfig+0xf8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a12      	ldr	r2, [pc, #72]	@ (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d103      	bne.n	8006c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d105      	bne.n	8006c6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800
 8006c98:	40001800 	.word	0x40001800
 8006c9c:	40001c00 	.word	0x40001c00
 8006ca0:	40002000 	.word	0x40002000

08006ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0201 	bic.w	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 030a 	bic.w	r3, r3, #10
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	f023 0210 	bic.w	r2, r3, #16
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	031b      	lsls	r3, r3, #12
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f043 0307 	orr.w	r3, r3, #7
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e05a      	b.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	@ (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d022      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3c:	d01d      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d018      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00e      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a18      	ldr	r2, [pc, #96]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d10c      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40010400 	.word	0x40010400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40001800 	.word	0x40001800

08006ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e042      	b.n	8006f90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fb fa1c 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fe21 	bl	8007b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695a      	ldr	r2, [r3, #20]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d112      	bne.n	8006fd8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_UART_Receive_IT+0x26>
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e00b      	b.n	8006fda <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fbd9 	bl	8007786 <UART_Start_Receive_IT>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	e000      	b.n	8006fda <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	@ 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d156      	bne.n	80070ac <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_UART_Transmit_DMA+0x26>
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e04f      	b.n	80070ae <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	88fa      	ldrh	r2, [r7, #6]
 800701e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2221      	movs	r2, #33	@ 0x21
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <HAL_UART_Transmit_DMA+0xd4>)
 8007034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	4a20      	ldr	r2, [pc, #128]	@ (80070bc <HAL_UART_Transmit_DMA+0xd8>)
 800703c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	4a1f      	ldr	r2, [pc, #124]	@ (80070c0 <HAL_UART_Transmit_DMA+0xdc>)
 8007044:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	2200      	movs	r2, #0
 800704c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3304      	adds	r3, #4
 8007062:	461a      	mov	r2, r3
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	f7fb fd0f 	bl	8002a88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007072:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3314      	adds	r3, #20
 800707a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	617b      	str	r3, [r7, #20]
   return(result);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007094:	627a      	str	r2, [r7, #36]	@ 0x24
 8007096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6a39      	ldr	r1, [r7, #32]
 800709a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e000      	b.n	80070ae <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80070ac:	2302      	movs	r3, #2
  }
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3730      	adds	r7, #48	@ 0x30
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	0800763d 	.word	0x0800763d
 80070bc:	080076d7 	.word	0x080076d7
 80070c0:	080076f3 	.word	0x080076f3

080070c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b0ba      	sub	sp, #232	@ 0xe8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <HAL_UART_IRQHandler+0x66>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fc70 	bl	8007a08 <UART_Receive_IT>
      return;
 8007128:	e25b      	b.n	80075e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800712a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80de 	beq.w	80072f0 <HAL_UART_IRQHandler+0x22c>
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007144:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80d1 	beq.w	80072f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <HAL_UART_IRQHandler+0xae>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800715e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_UART_IRQHandler+0xd2>
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718e:	f043 0202 	orr.w	r2, r3, #2
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <HAL_UART_IRQHandler+0xf6>
 80071a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f043 0204 	orr.w	r2, r3, #4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <HAL_UART_IRQHandler+0x126>
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e2:	f043 0208 	orr.w	r2, r3, #8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 81f2 	beq.w	80075d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_UART_IRQHandler+0x14e>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fbfb 	bl	8007a08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_UART_IRQHandler+0x17a>
 8007236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d04f      	beq.n	80072de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb03 	bl	800784a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724e:	2b40      	cmp	r3, #64	@ 0x40
 8007250:	d141      	bne.n	80072d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3314      	adds	r3, #20
 8007258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800726c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800727e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800728a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1d9      	bne.n	8007252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072aa:	4a7e      	ldr	r2, [pc, #504]	@ (80074a4 <HAL_UART_IRQHandler+0x3e0>)
 80072ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb fcb0 	bl	8002c18 <HAL_DMA_Abort_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d016      	beq.n	80072ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00e      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f99e 	bl	8007610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e00a      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f99a 	bl	8007610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e006      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f996 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072ea:	e175      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	bf00      	nop
    return;
 80072ee:	e173      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	f040 814f 	bne.w	8007598 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fe:	f003 0310 	and.w	r3, r3, #16
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8148 	beq.w	8007598 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8141 	beq.w	8007598 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	2b40      	cmp	r3, #64	@ 0x40
 8007338:	f040 80b6 	bne.w	80074a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8145 	beq.w	80075dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800735a:	429a      	cmp	r2, r3
 800735c:	f080 813e 	bcs.w	80075dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007366:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007372:	f000 8088 	beq.w	8007486 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800738c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1d9      	bne.n	8007376 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3314      	adds	r3, #20
 80073e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e1      	bne.n	80073c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800740e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3314      	adds	r3, #20
 800741e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007422:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007424:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007428:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e3      	bne.n	80073fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007456:	f023 0310 	bic.w	r3, r3, #16
 800745a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007468:	65ba      	str	r2, [r7, #88]	@ 0x58
 800746a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800746e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e3      	bne.n	8007444 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	4618      	mov	r0, r3
 8007482:	f7fb fb59 	bl	8002b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007494:	b29b      	uxth	r3, r3
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	b29b      	uxth	r3, r3
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8c1 	bl	8007624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074a2:	e09b      	b.n	80075dc <HAL_UART_IRQHandler+0x518>
 80074a4:	08007911 	.word	0x08007911
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 808e 	beq.w	80075e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8089 	beq.w	80075e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80074f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e3      	bne.n	80074ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	623b      	str	r3, [r7, #32]
   return(result);
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3314      	adds	r3, #20
 8007526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800752a:	633a      	str	r2, [r7, #48]	@ 0x30
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	330c      	adds	r3, #12
 8007552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60fb      	str	r3, [r7, #12]
   return(result);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0310 	bic.w	r3, r3, #16
 8007562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007570:	61fa      	str	r2, [r7, #28]
 8007572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	69b9      	ldr	r1, [r7, #24]
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	617b      	str	r3, [r7, #20]
   return(result);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e3      	bne.n	800754c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f847 	bl	8007624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007596:	e023      	b.n	80075e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <HAL_UART_IRQHandler+0x4f4>
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9c1 	bl	8007938 <UART_Transmit_IT>
    return;
 80075b6:	e014      	b.n	80075e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <HAL_UART_IRQHandler+0x51e>
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa01 	bl	80079d8 <UART_EndTransmit_IT>
    return;
 80075d6:	e004      	b.n	80075e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80075e0:	bf00      	nop
  }
}
 80075e2:	37e8      	adds	r7, #232	@ 0xe8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b090      	sub	sp, #64	@ 0x40
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007654:	2b00      	cmp	r3, #0
 8007656:	d137      	bne.n	80076c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800765a:	2200      	movs	r2, #0
 800765c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	623b      	str	r3, [r7, #32]
   return(result);
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3314      	adds	r3, #20
 800767c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800767e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e5      	bne.n	800765e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	69b9      	ldr	r1, [r7, #24]
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	617b      	str	r3, [r7, #20]
   return(result);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076c6:	e002      	b.n	80076ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80076ca:	f7ff ff8d 	bl	80075e8 <HAL_UART_TxCpltCallback>
}
 80076ce:	bf00      	nop
 80076d0:	3740      	adds	r7, #64	@ 0x40
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff ff89 	bl	80075fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770e:	2b80      	cmp	r3, #128	@ 0x80
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b21      	cmp	r3, #33	@ 0x21
 8007724:	d108      	bne.n	8007738 <UART_DMAError+0x46>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007732:	68b8      	ldr	r0, [r7, #8]
 8007734:	f000 f861 	bl	80077fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007742:	2b40      	cmp	r3, #64	@ 0x40
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b22      	cmp	r3, #34	@ 0x22
 8007758:	d108      	bne.n	800776c <UART_DMAError+0x7a>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007766:	68b8      	ldr	r0, [r7, #8]
 8007768:	f000 f86f 	bl	800784a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007770:	f043 0210 	orr.w	r2, r3, #16
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f7ff ff49 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2222      	movs	r2, #34	@ 0x22
 80077b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0220 	orr.w	r2, r2, #32
 80077ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b089      	sub	sp, #36	@ 0x24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	60bb      	str	r3, [r7, #8]
   return(result);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007818:	61fb      	str	r3, [r7, #28]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	330c      	adds	r3, #12
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	61ba      	str	r2, [r7, #24]
 8007824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6979      	ldr	r1, [r7, #20]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	613b      	str	r3, [r7, #16]
   return(result);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800783e:	bf00      	nop
 8007840:	3724      	adds	r7, #36	@ 0x24
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800784a:	b480      	push	{r7}
 800784c:	b095      	sub	sp, #84	@ 0x54
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007872:	643a      	str	r2, [r7, #64]	@ 0x40
 8007874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	61fb      	str	r3, [r7, #28]
   return(result);
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e5      	bne.n	8007886 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d119      	bne.n	80078f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 0310 	bic.w	r3, r3, #16
 80078d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078e2:	61ba      	str	r2, [r7, #24]
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007904:	bf00      	nop
 8007906:	3754      	adds	r7, #84	@ 0x54
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fe70 	bl	8007610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007930:	bf00      	nop
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b21      	cmp	r3, #33	@ 0x21
 800794a:	d13e      	bne.n	80079ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007954:	d114      	bne.n	8007980 <UART_Transmit_IT+0x48>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d110      	bne.n	8007980 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007972:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	1c9a      	adds	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]
 800797e:	e008      	b.n	8007992 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	1c59      	adds	r1, r3, #1
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6211      	str	r1, [r2, #32]
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29b      	uxth	r3, r3
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e000      	b.n	80079cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079ca:	2302      	movs	r3, #2
  }
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fdf5 	bl	80075e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08c      	sub	sp, #48	@ 0x30
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b22      	cmp	r3, #34	@ 0x22
 8007a1a:	f040 80ae 	bne.w	8007b7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a26:	d117      	bne.n	8007a58 <UART_Receive_IT+0x50>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d113      	bne.n	8007a58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	1c9a      	adds	r2, r3, #2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a56:	e026      	b.n	8007aa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6a:	d007      	beq.n	8007a7c <UART_Receive_IT+0x74>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <UART_Receive_IT+0x82>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e008      	b.n	8007a9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d15d      	bne.n	8007b76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0220 	bic.w	r2, r2, #32
 8007ac8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d135      	bne.n	8007b6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	613b      	str	r3, [r7, #16]
   return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b26:	623a      	str	r2, [r7, #32]
 8007b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d10a      	bne.n	8007b5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fd5d 	bl	8007624 <HAL_UARTEx_RxEventCallback>
 8007b6a:	e002      	b.n	8007b72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fa fc45 	bl	80023fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e002      	b.n	8007b7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	@ 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b88:	b0c0      	sub	sp, #256	@ 0x100
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba0:	68d9      	ldr	r1, [r3, #12]
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	ea40 0301 	orr.w	r3, r0, r1
 8007bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bdc:	f021 010c 	bic.w	r1, r1, #12
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bea:	430b      	orrs	r3, r1
 8007bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfe:	6999      	ldr	r1, [r3, #24]
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	ea40 0301 	orr.w	r3, r0, r1
 8007c0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b8f      	ldr	r3, [pc, #572]	@ (8007e50 <UART_SetConfig+0x2cc>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d005      	beq.n	8007c24 <UART_SetConfig+0xa0>
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e54 <UART_SetConfig+0x2d0>)
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d104      	bne.n	8007c2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c24:	f7fd fae8 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8007c28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c2c:	e003      	b.n	8007c36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c2e:	f7fd facf 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8007c32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c40:	f040 810c 	bne.w	8007e5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c56:	4622      	mov	r2, r4
 8007c58:	462b      	mov	r3, r5
 8007c5a:	1891      	adds	r1, r2, r2
 8007c5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c5e:	415b      	adcs	r3, r3
 8007c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c66:	4621      	mov	r1, r4
 8007c68:	eb12 0801 	adds.w	r8, r2, r1
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	eb43 0901 	adc.w	r9, r3, r1
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c86:	4690      	mov	r8, r2
 8007c88:	4699      	mov	r9, r3
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	eb18 0303 	adds.w	r3, r8, r3
 8007c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c94:	462b      	mov	r3, r5
 8007c96:	eb49 0303 	adc.w	r3, r9, r3
 8007c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007caa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	18db      	adds	r3, r3, r3
 8007cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb8:	4613      	mov	r3, r2
 8007cba:	eb42 0303 	adc.w	r3, r2, r3
 8007cbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cc8:	f7f8 ffde 	bl	8000c88 <__aeabi_uldivmod>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4b61      	ldr	r3, [pc, #388]	@ (8007e58 <UART_SetConfig+0x2d4>)
 8007cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	011c      	lsls	r4, r3, #4
 8007cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ce4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ce8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cec:	4642      	mov	r2, r8
 8007cee:	464b      	mov	r3, r9
 8007cf0:	1891      	adds	r1, r2, r2
 8007cf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cf4:	415b      	adcs	r3, r3
 8007cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	eb12 0a01 	adds.w	sl, r2, r1
 8007d02:	4649      	mov	r1, r9
 8007d04:	eb43 0b01 	adc.w	fp, r3, r1
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	f04f 0300 	mov.w	r3, #0
 8007d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d1c:	4692      	mov	sl, r2
 8007d1e:	469b      	mov	fp, r3
 8007d20:	4643      	mov	r3, r8
 8007d22:	eb1a 0303 	adds.w	r3, sl, r3
 8007d26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	18db      	adds	r3, r3, r3
 8007d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d4e:	4613      	mov	r3, r2
 8007d50:	eb42 0303 	adc.w	r3, r2, r3
 8007d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d5e:	f7f8 ff93 	bl	8000c88 <__aeabi_uldivmod>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	4b3b      	ldr	r3, [pc, #236]	@ (8007e58 <UART_SetConfig+0x2d4>)
 8007d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	2264      	movs	r2, #100	@ 0x64
 8007d72:	fb02 f303 	mul.w	r3, r2, r3
 8007d76:	1acb      	subs	r3, r1, r3
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d7e:	4b36      	ldr	r3, [pc, #216]	@ (8007e58 <UART_SetConfig+0x2d4>)
 8007d80:	fba3 2302 	umull	r2, r3, r3, r2
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d8c:	441c      	add	r4, r3
 8007d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	1891      	adds	r1, r2, r2
 8007da6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007da8:	415b      	adcs	r3, r3
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007db0:	4641      	mov	r1, r8
 8007db2:	1851      	adds	r1, r2, r1
 8007db4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007db6:	4649      	mov	r1, r9
 8007db8:	414b      	adcs	r3, r1
 8007dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007dc8:	4659      	mov	r1, fp
 8007dca:	00cb      	lsls	r3, r1, #3
 8007dcc:	4651      	mov	r1, sl
 8007dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd2:	4651      	mov	r1, sl
 8007dd4:	00ca      	lsls	r2, r1, #3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4642      	mov	r2, r8
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007de4:	464b      	mov	r3, r9
 8007de6:	460a      	mov	r2, r1
 8007de8:	eb42 0303 	adc.w	r3, r2, r3
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e04:	460b      	mov	r3, r1
 8007e06:	18db      	adds	r3, r3, r3
 8007e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	eb42 0303 	adc.w	r3, r2, r3
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e1a:	f7f8 ff35 	bl	8000c88 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <UART_SetConfig+0x2d4>)
 8007e24:	fba3 1302 	umull	r1, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	2164      	movs	r1, #100	@ 0x64
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	3332      	adds	r3, #50	@ 0x32
 8007e36:	4a08      	ldr	r2, [pc, #32]	@ (8007e58 <UART_SetConfig+0x2d4>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f003 0207 	and.w	r2, r3, #7
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4422      	add	r2, r4
 8007e4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e4c:	e106      	b.n	800805c <UART_SetConfig+0x4d8>
 8007e4e:	bf00      	nop
 8007e50:	40011000 	.word	0x40011000
 8007e54:	40011400 	.word	0x40011400
 8007e58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	1891      	adds	r1, r2, r2
 8007e74:	6239      	str	r1, [r7, #32]
 8007e76:	415b      	adcs	r3, r3
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e7e:	4641      	mov	r1, r8
 8007e80:	1854      	adds	r4, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb43 0501 	adc.w	r5, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	00eb      	lsls	r3, r5, #3
 8007e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e96:	00e2      	lsls	r2, r4, #3
 8007e98:	4614      	mov	r4, r2
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	4643      	mov	r3, r8
 8007e9e:	18e3      	adds	r3, r4, r3
 8007ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	eb45 0303 	adc.w	r3, r5, r3
 8007eaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eca:	4629      	mov	r1, r5
 8007ecc:	008b      	lsls	r3, r1, #2
 8007ece:	4621      	mov	r1, r4
 8007ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	008a      	lsls	r2, r1, #2
 8007ed8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007edc:	f7f8 fed4 	bl	8000c88 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4b60      	ldr	r3, [pc, #384]	@ (8008068 <UART_SetConfig+0x4e4>)
 8007ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	011c      	lsls	r4, r3, #4
 8007eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ef8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007efc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	1891      	adds	r1, r2, r2
 8007f06:	61b9      	str	r1, [r7, #24]
 8007f08:	415b      	adcs	r3, r3
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f10:	4641      	mov	r1, r8
 8007f12:	1851      	adds	r1, r2, r1
 8007f14:	6139      	str	r1, [r7, #16]
 8007f16:	4649      	mov	r1, r9
 8007f18:	414b      	adcs	r3, r1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f28:	4659      	mov	r1, fp
 8007f2a:	00cb      	lsls	r3, r1, #3
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f32:	4651      	mov	r1, sl
 8007f34:	00ca      	lsls	r2, r1, #3
 8007f36:	4610      	mov	r0, r2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	189b      	adds	r3, r3, r2
 8007f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f44:	464b      	mov	r3, r9
 8007f46:	460a      	mov	r2, r1
 8007f48:	eb42 0303 	adc.w	r3, r2, r3
 8007f4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f68:	4649      	mov	r1, r9
 8007f6a:	008b      	lsls	r3, r1, #2
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f72:	4641      	mov	r1, r8
 8007f74:	008a      	lsls	r2, r1, #2
 8007f76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f7a:	f7f8 fe85 	bl	8000c88 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	4b38      	ldr	r3, [pc, #224]	@ (8008068 <UART_SetConfig+0x4e4>)
 8007f86:	fba3 2301 	umull	r2, r3, r3, r1
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2264      	movs	r2, #100	@ 0x64
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	1acb      	subs	r3, r1, r3
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	3332      	adds	r3, #50	@ 0x32
 8007f98:	4a33      	ldr	r2, [pc, #204]	@ (8008068 <UART_SetConfig+0x4e4>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fa4:	441c      	add	r4, r3
 8007fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007faa:	2200      	movs	r2, #0
 8007fac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fae:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fb4:	4642      	mov	r2, r8
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	1891      	adds	r1, r2, r2
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	415b      	adcs	r3, r3
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	1851      	adds	r1, r2, r1
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	4649      	mov	r1, r9
 8007fcc:	414b      	adcs	r3, r1
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fdc:	4659      	mov	r1, fp
 8007fde:	00cb      	lsls	r3, r1, #3
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe6:	4651      	mov	r1, sl
 8007fe8:	00ca      	lsls	r2, r1, #3
 8007fea:	4610      	mov	r0, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	189b      	adds	r3, r3, r2
 8007ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	460a      	mov	r2, r1
 8007ffa:	eb42 0303 	adc.w	r3, r2, r3
 8007ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	663b      	str	r3, [r7, #96]	@ 0x60
 800800a:	667a      	str	r2, [r7, #100]	@ 0x64
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008018:	4649      	mov	r1, r9
 800801a:	008b      	lsls	r3, r1, #2
 800801c:	4641      	mov	r1, r8
 800801e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008022:	4641      	mov	r1, r8
 8008024:	008a      	lsls	r2, r1, #2
 8008026:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800802a:	f7f8 fe2d 	bl	8000c88 <__aeabi_uldivmod>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4b0d      	ldr	r3, [pc, #52]	@ (8008068 <UART_SetConfig+0x4e4>)
 8008034:	fba3 1302 	umull	r1, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	2164      	movs	r1, #100	@ 0x64
 800803c:	fb01 f303 	mul.w	r3, r1, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	3332      	adds	r3, #50	@ 0x32
 8008046:	4a08      	ldr	r2, [pc, #32]	@ (8008068 <UART_SetConfig+0x4e4>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	f003 020f 	and.w	r2, r3, #15
 8008052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4422      	add	r2, r4
 800805a:	609a      	str	r2, [r3, #8]
}
 800805c:	bf00      	nop
 800805e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008062:	46bd      	mov	sp, r7
 8008064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008068:	51eb851f 	.word	0x51eb851f

0800806c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800806c:	b084      	sub	sp, #16
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	f107 001c 	add.w	r0, r7, #28
 800807a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008082:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008084:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008086:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800808a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800808e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008092:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008096:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80080a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	b004      	add	sp, #16
 80080c0:	4770      	bx	lr

080080c2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2203      	movs	r2, #3
 800810a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0303 	and.w	r3, r3, #3
}
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008154:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800815a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008160:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008170:	f023 030f 	bic.w	r3, r3, #15
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	b2db      	uxtb	r3, r3
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3314      	adds	r3, #20
 80081b2:	461a      	mov	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	4413      	add	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
}  
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081f0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80081f6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80081fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008214:	2300      	movs	r3, #0

}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b088      	sub	sp, #32
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008230:	2310      	movs	r3, #16
 8008232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008234:	2340      	movs	r3, #64	@ 0x40
 8008236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800823c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff74 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800824e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008252:	2110      	movs	r1, #16
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9d7 	bl	8008608 <SDMMC_GetCmdResp1>
 800825a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800825c:	69fb      	ldr	r3, [r7, #28]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b088      	sub	sp, #32
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008274:	2311      	movs	r3, #17
 8008276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008278:	2340      	movs	r3, #64	@ 0x40
 800827a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ff52 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008296:	2111      	movs	r1, #17
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9b5 	bl	8008608 <SDMMC_GetCmdResp1>
 800829e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a0:	69fb      	ldr	r3, [r7, #28]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b088      	sub	sp, #32
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082b8:	2312      	movs	r3, #18
 80082ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082bc:	2340      	movs	r3, #64	@ 0x40
 80082be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff30 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80082d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082da:	2112      	movs	r1, #18
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f993 	bl	8008608 <SDMMC_GetCmdResp1>
 80082e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082e4:	69fb      	ldr	r3, [r7, #28]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3720      	adds	r7, #32
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b088      	sub	sp, #32
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80082fc:	2318      	movs	r3, #24
 80082fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008300:	2340      	movs	r3, #64	@ 0x40
 8008302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800830c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800830e:	f107 0308 	add.w	r3, r7, #8
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff ff0e 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800831a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800831e:	2118      	movs	r1, #24
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f971 	bl	8008608 <SDMMC_GetCmdResp1>
 8008326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008328:	69fb      	ldr	r3, [r7, #28]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b088      	sub	sp, #32
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008340:	2319      	movs	r3, #25
 8008342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008344:	2340      	movs	r3, #64	@ 0x40
 8008346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800834c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff feec 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800835e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008362:	2119      	movs	r1, #25
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f94f 	bl	8008608 <SDMMC_GetCmdResp1>
 800836a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008384:	230c      	movs	r3, #12
 8008386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008388:	2340      	movs	r3, #64	@ 0x40
 800838a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008396:	f107 0308 	add.w	r3, r7, #8
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff feca 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80083a2:	4a05      	ldr	r2, [pc, #20]	@ (80083b8 <SDMMC_CmdStopTransfer+0x40>)
 80083a4:	210c      	movs	r1, #12
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f92e 	bl	8008608 <SDMMC_GetCmdResp1>
 80083ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ae:	69fb      	ldr	r3, [r7, #28]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	05f5e100 	.word	0x05f5e100

080083bc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	@ 0x28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80083cc:	2307      	movs	r3, #7
 80083ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083d0:	2340      	movs	r3, #64	@ 0x40
 80083d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083dc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083de:	f107 0310 	add.w	r3, r7, #16
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff fea6 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80083ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ee:	2107      	movs	r1, #7
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f909 	bl	8008608 <SDMMC_GetCmdResp1>
 80083f6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3728      	adds	r7, #40	@ 0x28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008416:	2300      	movs	r3, #0
 8008418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800841a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800841e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008420:	f107 0308 	add.w	r3, r7, #8
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fe85 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb23 	bl	8008a78 <SDMMC_GetCmdError>
 8008432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008434:	69fb      	ldr	r3, [r7, #28]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b088      	sub	sp, #32
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008446:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800844a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800844c:	2308      	movs	r3, #8
 800844e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008450:	2340      	movs	r3, #64	@ 0x40
 8008452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800845c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fe66 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fab6 	bl	80089dc <SDMMC_GetCmdResp7>
 8008470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008472:	69fb      	ldr	r3, [r7, #28]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800848a:	2337      	movs	r3, #55	@ 0x37
 800848c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800848e:	2340      	movs	r3, #64	@ 0x40
 8008490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800849a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fe47 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80084a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ac:	2137      	movs	r1, #55	@ 0x37
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8aa 	bl	8008608 <SDMMC_GetCmdResp1>
 80084b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084b6:	69fb      	ldr	r3, [r7, #28]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80084d6:	2329      	movs	r3, #41	@ 0x29
 80084d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084da:	2340      	movs	r3, #64	@ 0x40
 80084dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084e8:	f107 0308 	add.w	r3, r7, #8
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fe21 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f9bd 	bl	8008874 <SDMMC_GetCmdResp3>
 80084fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084fc:	69fb      	ldr	r3, [r7, #28]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008512:	2302      	movs	r3, #2
 8008514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008516:	23c0      	movs	r3, #192	@ 0xc0
 8008518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800851e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008522:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff fe03 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f957 	bl	80087e4 <SDMMC_GetCmdResp2>
 8008536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008538:	69fb      	ldr	r3, [r7, #28]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b088      	sub	sp, #32
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008550:	2309      	movs	r3, #9
 8008552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008554:	23c0      	movs	r3, #192	@ 0xc0
 8008556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800855c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fde4 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f938 	bl	80087e4 <SDMMC_GetCmdResp2>
 8008574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008576:	69fb      	ldr	r3, [r7, #28]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800858e:	2303      	movs	r3, #3
 8008590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008592:	2340      	movs	r3, #64	@ 0x40
 8008594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800859a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800859e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085a0:	f107 0308 	add.w	r3, r7, #8
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fdc5 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	2103      	movs	r1, #3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f99d 	bl	80088f0 <SDMMC_GetCmdResp6>
 80085b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085b8:	69fb      	ldr	r3, [r7, #28]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80085d0:	230d      	movs	r3, #13
 80085d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085d4:	2340      	movs	r3, #64	@ 0x40
 80085d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085e2:	f107 0308 	add.w	r3, r7, #8
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff fda4 	bl	8008136 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80085ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085f2:	210d      	movs	r1, #13
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f807 	bl	8008608 <SDMMC_GetCmdResp1>
 80085fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085fc:	69fb      	ldr	r3, [r7, #28]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	460b      	mov	r3, r1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008616:	4b70      	ldr	r3, [pc, #448]	@ (80087d8 <SDMMC_GetCmdResp1+0x1d0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a70      	ldr	r2, [pc, #448]	@ (80087dc <SDMMC_GetCmdResp1+0x1d4>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	0a5a      	lsrs	r2, r3, #9
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	1e5a      	subs	r2, r3, #1
 800862e:	61fa      	str	r2, [r7, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008634:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008638:	e0c9      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0ef      	beq.n	800862a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ea      	bne.n	800862a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2204      	movs	r2, #4
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008666:	2304      	movs	r3, #4
 8008668:	e0b1      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800867c:	2301      	movs	r3, #1
 800867e:	e0a6      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	22c5      	movs	r2, #197	@ 0xc5
 8008684:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fd7f 	bl	800818a <SDIO_GetCommandResponse>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	4293      	cmp	r3, r2
 8008694:	d001      	beq.n	800869a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008696:	2301      	movs	r3, #1
 8008698:	e099      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800869a:	2100      	movs	r1, #0
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fd81 	bl	80081a4 <SDIO_GetResponse>
 80086a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4b4e      	ldr	r3, [pc, #312]	@ (80087e0 <SDMMC_GetCmdResp1+0x1d8>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e08d      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da02      	bge.n	80086be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086bc:	e087      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086c8:	2340      	movs	r3, #64	@ 0x40
 80086ca:	e080      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086d6:	2380      	movs	r3, #128	@ 0x80
 80086d8:	e079      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086e8:	e071      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086f8:	e069      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008708:	e061      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008714:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008718:	e059      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008728:	e051      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008738:	e049      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008744:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008748:	e041      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008758:	e039      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008768:	e031      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008774:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008778:	e029      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008784:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008788:	e021      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008794:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008798:	e019      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80087a8:	e011      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80087b8:	e009      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80087c8:	e001      	b.n	80087ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000018 	.word	0x20000018
 80087dc:	10624dd3 	.word	0x10624dd3
 80087e0:	fdffe008 	.word	0xfdffe008

080087e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087ec:	4b1f      	ldr	r3, [pc, #124]	@ (800886c <SDMMC_GetCmdResp2+0x88>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008870 <SDMMC_GetCmdResp2+0x8c>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	0a5b      	lsrs	r3, r3, #9
 80087f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1e5a      	subs	r2, r3, #1
 8008806:	60fa      	str	r2, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800880c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008810:	e026      	b.n	8008860 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008816:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0ef      	beq.n	8008802 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1ea      	bne.n	8008802 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2204      	movs	r2, #4
 800883c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800883e:	2304      	movs	r3, #4
 8008840:	e00e      	b.n	8008860 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008854:	2301      	movs	r3, #1
 8008856:	e003      	b.n	8008860 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	22c5      	movs	r2, #197	@ 0xc5
 800885c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	20000018 	.word	0x20000018
 8008870:	10624dd3 	.word	0x10624dd3

08008874 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800887c:	4b1a      	ldr	r3, [pc, #104]	@ (80088e8 <SDMMC_GetCmdResp3+0x74>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a1a      	ldr	r2, [pc, #104]	@ (80088ec <SDMMC_GetCmdResp3+0x78>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	0a5b      	lsrs	r3, r3, #9
 8008888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800888c:	fb02 f303 	mul.w	r3, r2, r3
 8008890:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1e5a      	subs	r2, r3, #1
 8008896:	60fa      	str	r2, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800889c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088a0:	e01b      	b.n	80088da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0ef      	beq.n	8008892 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1ea      	bne.n	8008892 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088ce:	2304      	movs	r3, #4
 80088d0:	e003      	b.n	80088da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	22c5      	movs	r2, #197	@ 0xc5
 80088d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000018 	.word	0x20000018
 80088ec:	10624dd3 	.word	0x10624dd3

080088f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	460b      	mov	r3, r1
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088fe:	4b35      	ldr	r3, [pc, #212]	@ (80089d4 <SDMMC_GetCmdResp6+0xe4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a35      	ldr	r2, [pc, #212]	@ (80089d8 <SDMMC_GetCmdResp6+0xe8>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	0a5b      	lsrs	r3, r3, #9
 800890a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	1e5a      	subs	r2, r3, #1
 8008918:	61fa      	str	r2, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800891e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008922:	e052      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0ef      	beq.n	8008914 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ea      	bne.n	8008914 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d004      	beq.n	8008954 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2204      	movs	r2, #4
 800894e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008950:	2304      	movs	r3, #4
 8008952:	e03a      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008966:	2301      	movs	r3, #1
 8008968:	e02f      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fc0d 	bl	800818a <SDIO_GetCommandResponse>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	4293      	cmp	r3, r2
 8008978:	d001      	beq.n	800897e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800897a:	2301      	movs	r3, #1
 800897c:	e025      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	22c5      	movs	r2, #197	@ 0xc5
 8008982:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008984:	2100      	movs	r1, #0
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fc0c 	bl	80081a4 <SDIO_GetResponse>
 800898c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	0c1b      	lsrs	r3, r3, #16
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80089a2:	2300      	movs	r3, #0
 80089a4:	e011      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089b4:	e009      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089c4:	e001      	b.n	80089ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000018 	.word	0x20000018
 80089d8:	10624dd3 	.word	0x10624dd3

080089dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089e4:	4b22      	ldr	r3, [pc, #136]	@ (8008a70 <SDMMC_GetCmdResp7+0x94>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a22      	ldr	r2, [pc, #136]	@ (8008a74 <SDMMC_GetCmdResp7+0x98>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	0a5b      	lsrs	r3, r3, #9
 80089f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089f4:	fb02 f303 	mul.w	r3, r2, r3
 80089f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	60fa      	str	r2, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a08:	e02c      	b.n	8008a64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0ef      	beq.n	80089fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1ea      	bne.n	80089fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2204      	movs	r2, #4
 8008a34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a36:	2304      	movs	r3, #4
 8008a38:	e014      	b.n	8008a64 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e009      	b.n	8008a64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	@ 0x40
 8008a60:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a62:	2300      	movs	r3, #0
  
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000018 	.word	0x20000018
 8008a74:	10624dd3 	.word	0x10624dd3

08008a78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a80:	4b11      	ldr	r3, [pc, #68]	@ (8008ac8 <SDMMC_GetCmdError+0x50>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a11      	ldr	r2, [pc, #68]	@ (8008acc <SDMMC_GetCmdError+0x54>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	0a5b      	lsrs	r3, r3, #9
 8008a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a90:	fb02 f303 	mul.w	r3, r2, r3
 8008a94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	60fa      	str	r2, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008aa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008aa4:	e009      	b.n	8008aba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f1      	beq.n	8008a96 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	22c5      	movs	r2, #197	@ 0xc5
 8008ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000018 	.word	0x20000018
 8008acc:	10624dd3 	.word	0x10624dd3

08008ad0 <MX_FATFS_Init>:
FATFS fs;
//char buf_read[5000];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008ad4:	4904      	ldr	r1, [pc, #16]	@ (8008ae8 <MX_FATFS_Init+0x18>)
 8008ad6:	4805      	ldr	r0, [pc, #20]	@ (8008aec <MX_FATFS_Init+0x1c>)
 8008ad8:	f003 fd44 	bl	800c564 <FATFS_LinkDriver>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4b03      	ldr	r3, [pc, #12]	@ (8008af0 <MX_FATFS_Init+0x20>)
 8008ae2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ae4:	bf00      	nop
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20008cd4 	.word	0x20008cd4
 8008aec:	08025044 	.word	0x08025044
 8008af0:	20008cd0 	.word	0x20008cd0

08008af4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008af8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <mount_fs>:

/* USER CODE BEGIN Application */
FRESULT mount_fs(FATFS *fs, uint8_t opt)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
	FRESULT res;
	DWORD sizeClaster;
	FATFS* pfs = fs;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
	char *cli_msg;

	switch (opt) {
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d002      	beq.n	8008b20 <mount_fs+0x1c>
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d029      	beq.n	8008b72 <mount_fs+0x6e>
			}

			sprintf(cli_msg,"Unmount was success\r\n");
			break;
		default:
			break;
 8008b1e:	e03e      	b.n	8008b9e <mount_fs+0x9a>
			res = f_mount(fs, (TCHAR const*)SDPath, 1);
 8008b20:	2201      	movs	r2, #1
 8008b22:	4921      	ldr	r1, [pc, #132]	@ (8008ba8 <mount_fs+0xa4>)
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 fe25 	bl	800b774 <f_mount>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <mount_fs+0x3c>
				sprintf(cli_msg,"Fail of mount\r\n");
 8008b34:	491d      	ldr	r1, [pc, #116]	@ (8008bac <mount_fs+0xa8>)
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f015 fd10 	bl	801e55c <siprintf>
				return res;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	e02f      	b.n	8008ba0 <mount_fs+0x9c>
			sprintf(cli_msg,"Mount success\r\n");
 8008b40:	491b      	ldr	r1, [pc, #108]	@ (8008bb0 <mount_fs+0xac>)
 8008b42:	6938      	ldr	r0, [r7, #16]
 8008b44:	f015 fd0a 	bl	801e55c <siprintf>
			res = f_getfree((TCHAR const*)SDPath, &sizeClaster, &pfs);
 8008b48:	f107 020c 	add.w	r2, r7, #12
 8008b4c:	f107 0308 	add.w	r3, r7, #8
 8008b50:	4619      	mov	r1, r3
 8008b52:	4815      	ldr	r0, [pc, #84]	@ (8008ba8 <mount_fs+0xa4>)
 8008b54:	f003 fbfd 	bl	800c352 <f_getfree>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK)
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d11c      	bne.n	8008b9c <mount_fs+0x98>
				sprintf(cli_msg,"free size = %u\r\n", sizeClaster);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	461a      	mov	r2, r3
 8008b66:	4913      	ldr	r1, [pc, #76]	@ (8008bb4 <mount_fs+0xb0>)
 8008b68:	6938      	ldr	r0, [r7, #16]
 8008b6a:	f015 fcf7 	bl	801e55c <siprintf>
				return res;
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	e016      	b.n	8008ba0 <mount_fs+0x9c>
			res = f_mount(NULL, (TCHAR const*)SDPath, 1);
 8008b72:	2201      	movs	r2, #1
 8008b74:	490c      	ldr	r1, [pc, #48]	@ (8008ba8 <mount_fs+0xa4>)
 8008b76:	2000      	movs	r0, #0
 8008b78:	f002 fdfc 	bl	800b774 <f_mount>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <mount_fs+0x8e>
				sprintf(cli_msg,"Fail of unmount\r\n\a");
 8008b86:	490c      	ldr	r1, [pc, #48]	@ (8008bb8 <mount_fs+0xb4>)
 8008b88:	6938      	ldr	r0, [r7, #16]
 8008b8a:	f015 fce7 	bl	801e55c <siprintf>
				return res;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	e006      	b.n	8008ba0 <mount_fs+0x9c>
			sprintf(cli_msg,"Unmount was success\r\n");
 8008b92:	490a      	ldr	r1, [pc, #40]	@ (8008bbc <mount_fs+0xb8>)
 8008b94:	6938      	ldr	r0, [r7, #16]
 8008b96:	f015 fce1 	bl	801e55c <siprintf>
			break;
 8008b9a:	e000      	b.n	8008b9e <mount_fs+0x9a>
			break;
 8008b9c:	bf00      	nop
	}

	return res;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20008cd4 	.word	0x20008cd4
 8008bac:	08021df4 	.word	0x08021df4
 8008bb0:	08021e04 	.word	0x08021e04
 8008bb4:	08021e14 	.word	0x08021e14
 8008bb8:	08021e28 	.word	0x08021e28
 8008bbc:	08021e3c 	.word	0x08021e3c

08008bc0 <write_fs>:

FRESULT write_fs(uint8_t *name_file, uint8_t *data)
{
 8008bc0:	b590      	push	{r4, r7, lr}
 8008bc2:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bcc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008bd0:	6018      	str	r0, [r3, #0]
 8008bd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bd6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008bda:	6019      	str	r1, [r3, #0]
	FRESULT res;
	char *cli_msg;
    FIL logFile;

    res = f_open(&logFile, (char *)name_file, FA_OPEN_APPEND | FA_WRITE);
 8008bdc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008be0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008be4:	f107 0010 	add.w	r0, r7, #16
 8008be8:	2232      	movs	r2, #50	@ 0x32
 8008bea:	6819      	ldr	r1, [r3, #0]
 8008bec:	f002 fe26 	bl	800b83c <f_open>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008bf6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <write_fs+0x54>
    	sprintf(cli_msg,"f_open() failed, res = %u\r\n\0", res);
 8008bfe:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c02:	461a      	mov	r2, r3
 8008c04:	4925      	ldr	r1, [pc, #148]	@ (8008c9c <write_fs+0xdc>)
 8008c06:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8008c0a:	f015 fca7 	bl	801e55c <siprintf>
        return res;
 8008c0e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c12:	e03e      	b.n	8008c92 <write_fs+0xd2>
    }

    unsigned int bytesWritten;
    res = f_write(&logFile, data, (UINT)strlen(data), &bytesWritten);
 8008c14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c18:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f7f7 fb27 	bl	8000270 <strlen>
 8008c22:	4604      	mov	r4, r0
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008c2c:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8008c30:	f107 0010 	add.w	r0, r7, #16
 8008c34:	4622      	mov	r2, r4
 8008c36:	6809      	ldr	r1, [r1, #0]
 8008c38:	f003 f92f 	bl	800be9a <f_write>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008c42:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <write_fs+0xa0>
    	sprintf(cli_msg,"f_write() failed, res = %u\r\n", res);
 8008c4a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4913      	ldr	r1, [pc, #76]	@ (8008ca0 <write_fs+0xe0>)
 8008c52:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8008c56:	f015 fc81 	bl	801e55c <siprintf>
        return res;
 8008c5a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c5e:	e018      	b.n	8008c92 <write_fs+0xd2>
    }

    res = f_close(&logFile);
 8008c60:	f107 0310 	add.w	r3, r7, #16
 8008c64:	4618      	mov	r0, r3
 8008c66:	f003 fb45 	bl	800c2f4 <f_close>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008c70:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <write_fs+0xce>
    	sprintf(cli_msg,"f_close() failed, res = %u\r\n", res);
 8008c78:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4909      	ldr	r1, [pc, #36]	@ (8008ca4 <write_fs+0xe4>)
 8008c80:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8008c84:	f015 fc6a 	bl	801e55c <siprintf>
        return res;
 8008c88:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008c8c:	e001      	b.n	8008c92 <write_fs+0xd2>
//
//    cliWrite("In file '%s' ");
//    cliWrite((char *)name_file);
//    cliWrite("was writhed %u letters\r\n");

    return res;
 8008c8e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd90      	pop	{r4, r7, pc}
 8008c9c:	08021e54 	.word	0x08021e54
 8008ca0:	08021e74 	.word	0x08021e74
 8008ca4:	08021e94 	.word	0x08021e94

08008ca8 <read_fs>:

FRESULT read_fs(uint8_t *name_file, uint8_t *buf, uint32_t len)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cb4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008cb8:	6018      	str	r0, [r3, #0]
 8008cba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cbe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008cc2:	6019      	str	r1, [r3, #0]
 8008cc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cc8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ccc:	601a      	str	r2, [r3, #0]
	FRESULT res;
	char *cli_msg;
    FIL logFile;

    res = f_open(&logFile, (char *)name_file, FA_READ);
 8008cce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cd2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008cd6:	f107 0018 	add.w	r0, r7, #24
 8008cda:	2201      	movs	r2, #1
 8008cdc:	6819      	ldr	r1, [r3, #0]
 8008cde:	f002 fdad 	bl	800b83c <f_open>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res != FR_OK) {
 8008ce8:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <read_fs+0x5e>
        sprintf(cli_msg,"f_open() failed, res = %u\r\n", res);
 8008cf0:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4927      	ldr	r1, [pc, #156]	@ (8008d94 <read_fs+0xec>)
 8008cf8:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8008cfc:	f015 fc2e 	bl	801e55c <siprintf>
        return res;
 8008d00:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d04:	e040      	b.n	8008d88 <read_fs+0xe0>
    }

    unsigned int bytesReading = 0;
 8008d06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d0a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
    res = f_read(&logFile, (void *)buf, (UINT)len, &bytesReading);
 8008d12:	f107 0314 	add.w	r3, r7, #20
 8008d16:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008d1a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8008d1e:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008d22:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8008d26:	f107 0018 	add.w	r0, r7, #24
 8008d2a:	6812      	ldr	r2, [r2, #0]
 8008d2c:	6809      	ldr	r1, [r1, #0]
 8008d2e:	f002 ff46 	bl	800bbbe <f_read>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res != FR_OK) {
 8008d38:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <read_fs+0xae>
    	sprintf(cli_msg,"f_read() failed, res = %u\r\n", res);
 8008d40:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d44:	461a      	mov	r2, r3
 8008d46:	4914      	ldr	r1, [pc, #80]	@ (8008d98 <read_fs+0xf0>)
 8008d48:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8008d4c:	f015 fc06 	bl	801e55c <siprintf>
        return res;
 8008d50:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d54:	e018      	b.n	8008d88 <read_fs+0xe0>
    }

//    memcpy(buf_read, logFile.buf, len);

    res = f_close(&logFile);
 8008d56:	f107 0318 	add.w	r3, r7, #24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f003 faca 	bl	800c2f4 <f_close>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res != FR_OK) {
 8008d66:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <read_fs+0xdc>
    	sprintf(cli_msg,"f_close() failed, res = %u\r\n", res);
 8008d6e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d72:	461a      	mov	r2, r3
 8008d74:	4909      	ldr	r1, [pc, #36]	@ (8008d9c <read_fs+0xf4>)
 8008d76:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8008d7a:	f015 fbef 	bl	801e55c <siprintf>
        return res;
 8008d7e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008d82:	e001      	b.n	8008d88 <read_fs+0xe0>
//    sprintf(cli_msg,"From file '%s' ",(char *)name_file);
////    sprintf(cli_msg,"In file '");
////    sprintf(cli_msg,(char *)name);
//    sprintf(cli_msg," was reading %u letters\r\n", strlen(buf));

    return res;
 8008d84:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08021eb4 	.word	0x08021eb4
 8008d98:	08021ed0 	.word	0x08021ed0
 8008d9c:	08021e94 	.word	0x08021e94

08008da0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008daa:	f000 f888 	bl	8008ebe <BSP_SD_IsDetected>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e005      	b.n	8008dc4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008db8:	4804      	ldr	r0, [pc, #16]	@ (8008dcc <BSP_SD_Init+0x2c>)
 8008dba:	f7fc faf6 	bl	80053aa <HAL_SD_Init>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20008aac 	.word	0x20008aac

08008dd0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	4806      	ldr	r0, [pc, #24]	@ (8008e00 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008de8:	f7fc fb90 	bl	800550c <HAL_SD_ReadBlocks_DMA>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20008aac 	.word	0x20008aac

08008e04 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	4806      	ldr	r0, [pc, #24]	@ (8008e34 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008e1c:	f7fc fc58 	bl	80056d0 <HAL_SD_WriteBlocks_DMA>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20008aac 	.word	0x20008aac

08008e38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e3c:	4805      	ldr	r0, [pc, #20]	@ (8008e54 <BSP_SD_GetCardState+0x1c>)
 8008e3e:	f7fd f88d 	bl	8005f5c <HAL_SD_GetCardState>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20008aac 	.word	0x20008aac

08008e58 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	4803      	ldr	r0, [pc, #12]	@ (8008e70 <BSP_SD_GetCardInfo+0x18>)
 8008e64:	f7fd f84e 	bl	8005f04 <HAL_SD_GetCardInfo>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20008aac 	.word	0x20008aac

08008e74 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008e7c:	f000 f818 	bl	8008eb0 <BSP_SD_AbortCallback>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e90:	f000 f998 	bl	80091c4 <BSP_SD_WriteCpltCallback>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008ea4:	f000 f9a0 	bl	80091e8 <BSP_SD_ReadCpltCallback>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0

}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	b2db      	uxtb	r3, r3
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008ee0:	f003 fc46 	bl	800c770 <osKernelGetTickCount>
 8008ee4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008ee6:	e006      	b.n	8008ef6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ee8:	f7ff ffa6 	bl	8008e38 <BSP_SD_GetCardState>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e009      	b.n	8008f0a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008ef6:	f003 fc3b 	bl	800c770 <osKernelGetTickCount>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d8f0      	bhi.n	8008ee8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f4c <SD_CheckStatus+0x38>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f24:	f7ff ff88 	bl	8008e38 <BSP_SD_GetCardState>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d107      	bne.n	8008f3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008f2e:	4b07      	ldr	r3, [pc, #28]	@ (8008f4c <SD_CheckStatus+0x38>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f023 0301 	bic.w	r3, r3, #1
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <SD_CheckStatus+0x38>)
 8008f3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008f3e:	4b03      	ldr	r3, [pc, #12]	@ (8008f4c <SD_CheckStatus+0x38>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	b2db      	uxtb	r3, r3
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20000025 	.word	0x20000025

08008f50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fcc <SD_initialize+0x7c>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008f60:	f003 fbbe 	bl	800c6e0 <osKernelGetState>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d129      	bne.n	8008fbe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008f6a:	f7ff ff19 	bl	8008da0 <BSP_SD_Init>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d107      	bne.n	8008f84 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff ffcc 	bl	8008f14 <SD_CheckStatus>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4b12      	ldr	r3, [pc, #72]	@ (8008fcc <SD_initialize+0x7c>)
 8008f82:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008f84:	4b11      	ldr	r3, [pc, #68]	@ (8008fcc <SD_initialize+0x7c>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d017      	beq.n	8008fbe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008f8e:	4b10      	ldr	r3, [pc, #64]	@ (8008fd0 <SD_initialize+0x80>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d107      	bne.n	8008fa6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008f96:	2200      	movs	r2, #0
 8008f98:	2102      	movs	r1, #2
 8008f9a:	200a      	movs	r0, #10
 8008f9c:	f003 fefc 	bl	800cd98 <osMessageQueueNew>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8008fd0 <SD_initialize+0x80>)
 8008fa4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <SD_initialize+0x80>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d107      	bne.n	8008fbe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008fae:	4b07      	ldr	r3, [pc, #28]	@ (8008fcc <SD_initialize+0x7c>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f043 0301 	orr.w	r3, r3, #1
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <SD_initialize+0x7c>)
 8008fbc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008fbe:	4b03      	ldr	r3, [pc, #12]	@ (8008fcc <SD_initialize+0x7c>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000025 	.word	0x20000025
 8008fd0:	20008f0c 	.word	0x20008f0c

08008fd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff ff97 	bl	8008f14 <SD_CheckStatus>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009004:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009008:	f7ff ff66 	bl	8008ed8 <SD_CheckStatusWithTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	da01      	bge.n	8009016 <SD_read+0x26>
  {
    return res;
 8009012:	7ffb      	ldrb	r3, [r7, #31]
 8009014:	e02f      	b.n	8009076 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f7ff fed8 	bl	8008dd0 <BSP_SD_ReadBlocks_DMA>
 8009020:	4603      	mov	r3, r0
 8009022:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009024:	7fbb      	ldrb	r3, [r7, #30]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d124      	bne.n	8009074 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800902a:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <SD_read+0x90>)
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	f107 0112 	add.w	r1, r7, #18
 8009032:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009036:	2200      	movs	r2, #0
 8009038:	f003 ff82 	bl	800cf40 <osMessageQueueGet>
 800903c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d117      	bne.n	8009074 <SD_read+0x84>
 8009044:	8a7b      	ldrh	r3, [r7, #18]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d114      	bne.n	8009074 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800904a:	f003 fb91 	bl	800c770 <osKernelGetTickCount>
 800904e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009050:	e007      	b.n	8009062 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009052:	f7ff fef1 	bl	8008e38 <BSP_SD_GetCardState>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <SD_read+0x72>
              {
                res = RES_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009060:	e008      	b.n	8009074 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009062:	f003 fb85 	bl	800c770 <osKernelGetTickCount>
 8009066:	4602      	mov	r2, r0
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009070:	4293      	cmp	r3, r2
 8009072:	d9ee      	bls.n	8009052 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009074:	7ffb      	ldrb	r3, [r7, #31]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20008f0c 	.word	0x20008f0c

08009084 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	607a      	str	r2, [r7, #4]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009098:	f247 5030 	movw	r0, #30000	@ 0x7530
 800909c:	f7ff ff1c 	bl	8008ed8 <SD_CheckStatusWithTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da01      	bge.n	80090aa <SD_write+0x26>
  {
    return res;
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
 80090a8:	e02d      	b.n	8009106 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	68b8      	ldr	r0, [r7, #8]
 80090b0:	f7ff fea8 	bl	8008e04 <BSP_SD_WriteBlocks_DMA>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d124      	bne.n	8009104 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80090ba:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <SD_write+0x8c>)
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	f107 0112 	add.w	r1, r7, #18
 80090c2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80090c6:	2200      	movs	r2, #0
 80090c8:	f003 ff3a 	bl	800cf40 <osMessageQueueGet>
 80090cc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d117      	bne.n	8009104 <SD_write+0x80>
 80090d4:	8a7b      	ldrh	r3, [r7, #18]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d114      	bne.n	8009104 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80090da:	f003 fb49 	bl	800c770 <osKernelGetTickCount>
 80090de:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090e0:	e007      	b.n	80090f2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090e2:	f7ff fea9 	bl	8008e38 <BSP_SD_GetCardState>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <SD_write+0x6e>
          {
            res = RES_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	77fb      	strb	r3, [r7, #31]
            break;
 80090f0:	e008      	b.n	8009104 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090f2:	f003 fb3d 	bl	800c770 <osKernelGetTickCount>
 80090f6:	4602      	mov	r2, r0
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009100:	4293      	cmp	r3, r2
 8009102:	d9ee      	bls.n	80090e2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009104:	7ffb      	ldrb	r3, [r7, #31]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20008f0c 	.word	0x20008f0c

08009114 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	@ 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	603a      	str	r2, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
 8009120:	460b      	mov	r3, r1
 8009122:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800912a:	4b25      	ldr	r3, [pc, #148]	@ (80091c0 <SD_ioctl+0xac>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <SD_ioctl+0x28>
 8009138:	2303      	movs	r3, #3
 800913a:	e03c      	b.n	80091b6 <SD_ioctl+0xa2>

  switch (cmd)
 800913c:	79bb      	ldrb	r3, [r7, #6]
 800913e:	2b03      	cmp	r3, #3
 8009140:	d834      	bhi.n	80091ac <SD_ioctl+0x98>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <SD_ioctl+0x34>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009159 	.word	0x08009159
 800914c:	08009161 	.word	0x08009161
 8009150:	08009179 	.word	0x08009179
 8009154:	08009193 	.word	0x08009193
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800915e:	e028      	b.n	80091b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009160:	f107 030c 	add.w	r3, r7, #12
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff fe77 	bl	8008e58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800916a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009176:	e01c      	b.n	80091b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fe6b 	bl	8008e58 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	b29a      	uxth	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009190:	e00f      	b.n	80091b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009192:	f107 030c 	add.w	r3, r7, #12
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff fe5e 	bl	8008e58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	0a5a      	lsrs	r2, r3, #9
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80091aa:	e002      	b.n	80091b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80091b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3730      	adds	r7, #48	@ 0x30
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000025 	.word	0x20000025

080091c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80091ca:	2302      	movs	r3, #2
 80091cc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80091ce:	4b05      	ldr	r3, [pc, #20]	@ (80091e4 <BSP_SD_WriteCpltCallback+0x20>)
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	1db9      	adds	r1, r7, #6
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	f003 fe52 	bl	800ce80 <osMessageQueuePut>
#endif
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20008f0c 	.word	0x20008f0c

080091e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80091ee:	2301      	movs	r3, #1
 80091f0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <BSP_SD_ReadCpltCallback+0x20>)
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	1db9      	adds	r1, r7, #6
 80091f8:	2300      	movs	r3, #0
 80091fa:	2200      	movs	r2, #0
 80091fc:	f003 fe40 	bl	800ce80 <osMessageQueuePut>
#endif
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20008f0c 	.word	0x20008f0c

0800920c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009212:	2100      	movs	r1, #0
 8009214:	2000      	movs	r0, #0
 8009216:	f007 fa27 	bl	8010668 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800921a:	4b1c      	ldr	r3, [pc, #112]	@ (800928c <MX_LWIP_Init+0x80>)
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009220:	4b1b      	ldr	r3, [pc, #108]	@ (8009290 <MX_LWIP_Init+0x84>)
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009226:	4b1b      	ldr	r3, [pc, #108]	@ (8009294 <MX_LWIP_Init+0x88>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800922c:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <MX_LWIP_Init+0x8c>)
 800922e:	9302      	str	r3, [sp, #8]
 8009230:	4b1a      	ldr	r3, [pc, #104]	@ (800929c <MX_LWIP_Init+0x90>)
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	2300      	movs	r3, #0
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4b16      	ldr	r3, [pc, #88]	@ (8009294 <MX_LWIP_Init+0x88>)
 800923a:	4a15      	ldr	r2, [pc, #84]	@ (8009290 <MX_LWIP_Init+0x84>)
 800923c:	4913      	ldr	r1, [pc, #76]	@ (800928c <MX_LWIP_Init+0x80>)
 800923e:	4818      	ldr	r0, [pc, #96]	@ (80092a0 <MX_LWIP_Init+0x94>)
 8009240:	f008 faca 	bl	80117d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009244:	4816      	ldr	r0, [pc, #88]	@ (80092a0 <MX_LWIP_Init+0x94>)
 8009246:	f008 fc81 	bl	8011b4c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800924a:	4815      	ldr	r0, [pc, #84]	@ (80092a0 <MX_LWIP_Init+0x94>)
 800924c:	f008 fc8e 	bl	8011b6c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009250:	4914      	ldr	r1, [pc, #80]	@ (80092a4 <MX_LWIP_Init+0x98>)
 8009252:	4813      	ldr	r0, [pc, #76]	@ (80092a0 <MX_LWIP_Init+0x94>)
 8009254:	f008 fd90 	bl	8011d78 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009258:	2224      	movs	r2, #36	@ 0x24
 800925a:	2100      	movs	r1, #0
 800925c:	4812      	ldr	r0, [pc, #72]	@ (80092a8 <MX_LWIP_Init+0x9c>)
 800925e:	f015 fa9f 	bl	801e7a0 <memset>
  attributes.name = "EthLink";
 8009262:	4b11      	ldr	r3, [pc, #68]	@ (80092a8 <MX_LWIP_Init+0x9c>)
 8009264:	4a11      	ldr	r2, [pc, #68]	@ (80092ac <MX_LWIP_Init+0xa0>)
 8009266:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009268:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <MX_LWIP_Init+0x9c>)
 800926a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800926e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009270:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <MX_LWIP_Init+0x9c>)
 8009272:	2210      	movs	r2, #16
 8009274:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8009276:	4a0c      	ldr	r2, [pc, #48]	@ (80092a8 <MX_LWIP_Init+0x9c>)
 8009278:	4909      	ldr	r1, [pc, #36]	@ (80092a0 <MX_LWIP_Init+0x94>)
 800927a:	480d      	ldr	r0, [pc, #52]	@ (80092b0 <MX_LWIP_Init+0xa4>)
 800927c:	f003 fa8d 	bl	800c79a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009280:	4807      	ldr	r0, [pc, #28]	@ (80092a0 <MX_LWIP_Init+0x94>)
 8009282:	f010 f8b1 	bl	80193e8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009286:	bf00      	nop
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20008f48 	.word	0x20008f48
 8009290:	20008f4c 	.word	0x20008f4c
 8009294:	20008f50 	.word	0x20008f50
 8009298:	080105a5 	.word	0x080105a5
 800929c:	0800979d 	.word	0x0800979d
 80092a0:	20008f10 	.word	0x20008f10
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	20008f54 	.word	0x20008f54
 80092ac:	08021eec 	.word	0x08021eec
 80092b0:	08009a51 	.word	0x08009a51

080092b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <HAL_ETH_RxCpltCallback+0x1c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f003 fcf7 	bl	800ccc8 <osSemaphoreRelease>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	2000da44 	.word	0x2000da44

080092e8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80092f0:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <HAL_ETH_TxCpltCallback+0x1c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f003 fce7 	bl	800ccc8 <osSemaphoreRelease>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	2000da48 	.word	0x2000da48

08009308 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7fa fd62 	bl	8003dda <HAL_ETH_GetDMAError>
 8009316:	4603      	mov	r3, r0
 8009318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800931c:	2b80      	cmp	r3, #128	@ 0x80
 800931e:	d104      	bne.n	800932a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <HAL_ETH_ErrorCallback+0x2c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4618      	mov	r0, r3
 8009326:	f003 fccf 	bl	800ccc8 <osSemaphoreRelease>
  }
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	2000da44 	.word	0x2000da44

08009338 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b0aa      	sub	sp, #168	@ 0xa8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8009352:	f107 0310 	add.w	r3, r7, #16
 8009356:	2264      	movs	r2, #100	@ 0x64
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f015 fa20 	bl	801e7a0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009360:	4b89      	ldr	r3, [pc, #548]	@ (8009588 <low_level_init+0x250>)
 8009362:	4a8a      	ldr	r2, [pc, #552]	@ (800958c <low_level_init+0x254>)
 8009364:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009366:	2300      	movs	r3, #0
 8009368:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800936a:	2380      	movs	r3, #128	@ 0x80
 800936c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800936e:	23e1      	movs	r3, #225	@ 0xe1
 8009370:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009372:	2300      	movs	r3, #0
 8009374:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009376:	2300      	movs	r3, #0
 8009378:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800937a:	2300      	movs	r3, #0
 800937c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800937e:	4a82      	ldr	r2, [pc, #520]	@ (8009588 <low_level_init+0x250>)
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009386:	4b80      	ldr	r3, [pc, #512]	@ (8009588 <low_level_init+0x250>)
 8009388:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800938c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800938e:	4b7e      	ldr	r3, [pc, #504]	@ (8009588 <low_level_init+0x250>)
 8009390:	4a7f      	ldr	r2, [pc, #508]	@ (8009590 <low_level_init+0x258>)
 8009392:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009394:	4b7c      	ldr	r3, [pc, #496]	@ (8009588 <low_level_init+0x250>)
 8009396:	4a7f      	ldr	r2, [pc, #508]	@ (8009594 <low_level_init+0x25c>)
 8009398:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800939a:	4b7b      	ldr	r3, [pc, #492]	@ (8009588 <low_level_init+0x250>)
 800939c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80093a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80093a2:	4879      	ldr	r0, [pc, #484]	@ (8009588 <low_level_init+0x250>)
 80093a4:	f7f9 fed0 	bl	8003148 <HAL_ETH_Init>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80093ae:	2238      	movs	r2, #56	@ 0x38
 80093b0:	2100      	movs	r1, #0
 80093b2:	4879      	ldr	r0, [pc, #484]	@ (8009598 <low_level_init+0x260>)
 80093b4:	f015 f9f4 	bl	801e7a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80093b8:	4b77      	ldr	r3, [pc, #476]	@ (8009598 <low_level_init+0x260>)
 80093ba:	2221      	movs	r2, #33	@ 0x21
 80093bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80093be:	4b76      	ldr	r3, [pc, #472]	@ (8009598 <low_level_init+0x260>)
 80093c0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80093c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80093c6:	4b74      	ldr	r3, [pc, #464]	@ (8009598 <low_level_init+0x260>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80093cc:	4873      	ldr	r0, [pc, #460]	@ (800959c <low_level_init+0x264>)
 80093ce:	f008 f8bd 	bl	801154c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2206      	movs	r2, #6
 80093d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80093da:	4b6b      	ldr	r3, [pc, #428]	@ (8009588 <low_level_init+0x250>)
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80093e6:	4b68      	ldr	r3, [pc, #416]	@ (8009588 <low_level_init+0x250>)
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	785a      	ldrb	r2, [r3, #1]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80093f2:	4b65      	ldr	r3, [pc, #404]	@ (8009588 <low_level_init+0x250>)
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	789a      	ldrb	r2, [r3, #2]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80093fe:	4b62      	ldr	r3, [pc, #392]	@ (8009588 <low_level_init+0x250>)
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	78da      	ldrb	r2, [r3, #3]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800940a:	4b5f      	ldr	r3, [pc, #380]	@ (8009588 <low_level_init+0x250>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	791a      	ldrb	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009416:	4b5c      	ldr	r3, [pc, #368]	@ (8009588 <low_level_init+0x250>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	795a      	ldrb	r2, [r3, #5]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009428:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009430:	f043 030a 	orr.w	r3, r3, #10
 8009434:	b2da      	uxtb	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800943c:	2200      	movs	r2, #0
 800943e:	2100      	movs	r1, #0
 8009440:	2001      	movs	r0, #1
 8009442:	f003 fb66 	bl	800cb12 <osSemaphoreNew>
 8009446:	4603      	mov	r3, r0
 8009448:	4a55      	ldr	r2, [pc, #340]	@ (80095a0 <low_level_init+0x268>)
 800944a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800944c:	2200      	movs	r2, #0
 800944e:	2100      	movs	r1, #0
 8009450:	2001      	movs	r0, #1
 8009452:	f003 fb5e 	bl	800cb12 <osSemaphoreNew>
 8009456:	4603      	mov	r3, r0
 8009458:	4a52      	ldr	r2, [pc, #328]	@ (80095a4 <low_level_init+0x26c>)
 800945a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800945c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8009460:	2224      	movs	r2, #36	@ 0x24
 8009462:	2100      	movs	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f015 f99b 	bl	801e7a0 <memset>
  attributes.name = "EthIf";
 800946a:	4b4f      	ldr	r3, [pc, #316]	@ (80095a8 <low_level_init+0x270>)
 800946c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800946e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8009472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8009476:	2330      	movs	r3, #48	@ 0x30
 8009478:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800947c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8009480:	461a      	mov	r2, r3
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4849      	ldr	r0, [pc, #292]	@ (80095ac <low_level_init+0x274>)
 8009486:	f003 f988 	bl	800c79a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800948a:	4949      	ldr	r1, [pc, #292]	@ (80095b0 <low_level_init+0x278>)
 800948c:	4849      	ldr	r0, [pc, #292]	@ (80095b4 <low_level_init+0x27c>)
 800948e:	f7f8 fffe 	bl	800248e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8009492:	4848      	ldr	r0, [pc, #288]	@ (80095b4 <low_level_init+0x27c>)
 8009494:	f7f9 f82d 	bl	80024f2 <DP83848_Init>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d006      	beq.n	80094ac <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f008 fc3a 	bl	8011d18 <netif_set_link_down>
    netif_set_down(netif);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f008 fbcd 	bl	8011c44 <netif_set_down>
 80094aa:	e06a      	b.n	8009582 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80094ac:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d164      	bne.n	800957e <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 80094b4:	483f      	ldr	r0, [pc, #252]	@ (80095b4 <low_level_init+0x27c>)
 80094b6:	f7f9 f869 	bl	800258c <DP83848_GetLinkState>
 80094ba:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80094be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	dc06      	bgt.n	80094d4 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f008 fc26 	bl	8011d18 <netif_set_link_down>
      netif_set_down(netif);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f008 fbb9 	bl	8011c44 <netif_set_down>
 80094d2:	e056      	b.n	8009582 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 80094d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094d8:	3b02      	subs	r3, #2
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d82a      	bhi.n	8009534 <low_level_init+0x1fc>
 80094de:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <low_level_init+0x1ac>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	080094f5 	.word	0x080094f5
 80094e8:	08009507 	.word	0x08009507
 80094ec:	08009517 	.word	0x08009517
 80094f0:	08009527 	.word	0x08009527
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80094f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80094fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009500:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009504:	e01f      	b.n	8009546 <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009506:	2300      	movs	r3, #0
 8009508:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800950c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009514:	e017      	b.n	8009546 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009516:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800951a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800951e:	2300      	movs	r3, #0
 8009520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009524:	e00f      	b.n	8009546 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009526:	2300      	movs	r3, #0
 8009528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009532:	e008      	b.n	8009546 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8009534:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009538:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800953c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009544:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009546:	f107 0310 	add.w	r3, r7, #16
 800954a:	4619      	mov	r1, r3
 800954c:	480e      	ldr	r0, [pc, #56]	@ (8009588 <low_level_init+0x250>)
 800954e:	f7fa fae3 	bl	8003b18 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8009558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800955e:	f107 0310 	add.w	r3, r7, #16
 8009562:	4619      	mov	r1, r3
 8009564:	4808      	ldr	r0, [pc, #32]	@ (8009588 <low_level_init+0x250>)
 8009566:	f7fa fbce 	bl	8003d06 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800956a:	4807      	ldr	r0, [pc, #28]	@ (8009588 <low_level_init+0x250>)
 800956c:	f7f9 fe88 	bl	8003280 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f008 fafb 	bl	8011b6c <netif_set_up>
    netif_set_link_up(netif);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f008 fb96 	bl	8011ca8 <netif_set_link_up>
 800957c:	e001      	b.n	8009582 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800957e:	f7f8 fb17 	bl	8001bb0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009582:	37a8      	adds	r7, #168	@ 0xa8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	2000da4c 	.word	0x2000da4c
 800958c:	40028000 	.word	0x40028000
 8009590:	2000d9a4 	.word	0x2000d9a4
 8009594:	2000d904 	.word	0x2000d904
 8009598:	2000dafc 	.word	0x2000dafc
 800959c:	08025058 	.word	0x08025058
 80095a0:	2000da44 	.word	0x2000da44
 80095a4:	2000da48 	.word	0x2000da48
 80095a8:	08021ef4 	.word	0x08021ef4
 80095ac:	08009749 	.word	0x08009749
 80095b0:	20000028 	.word	0x20000028
 80095b4:	2000db34 	.word	0x2000db34

080095b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b092      	sub	sp, #72	@ 0x48
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	2230      	movs	r2, #48	@ 0x30
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f015 f8e1 	bl	801e7a0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	2230      	movs	r2, #48	@ 0x30
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f015 f8da 	bl	801e7a0 <memset>

  for(q = p; q != NULL; q = q->next)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80095f0:	e045      	b.n	800967e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80095f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d902      	bls.n	80095fe <low_level_output+0x46>
      return ERR_IF;
 80095f8:	f06f 030b 	mvn.w	r3, #11
 80095fc:	e07f      	b.n	80096fe <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80095fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009600:	6859      	ldr	r1, [r3, #4]
 8009602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009604:	4613      	mov	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	3348      	adds	r3, #72	@ 0x48
 800960e:	443b      	add	r3, r7
 8009610:	3b3c      	subs	r3, #60	@ 0x3c
 8009612:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009616:	895b      	ldrh	r3, [r3, #10]
 8009618:	4619      	mov	r1, r3
 800961a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800961c:	4613      	mov	r3, r2
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	3348      	adds	r3, #72	@ 0x48
 8009626:	443b      	add	r3, r7
 8009628:	3b38      	subs	r3, #56	@ 0x38
 800962a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800962c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800962e:	2b00      	cmp	r3, #0
 8009630:	d011      	beq.n	8009656 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009634:	1e5a      	subs	r2, r3, #1
 8009636:	f107 000c 	add.w	r0, r7, #12
 800963a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800963c:	460b      	mov	r3, r1
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	440b      	add	r3, r1
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	18c1      	adds	r1, r0, r3
 8009646:	4613      	mov	r3, r2
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	3348      	adds	r3, #72	@ 0x48
 8009650:	443b      	add	r3, r7
 8009652:	3b34      	subs	r3, #52	@ 0x34
 8009654:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800965e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009660:	4613      	mov	r3, r2
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	3348      	adds	r3, #72	@ 0x48
 800966a:	443b      	add	r3, r7
 800966c:	3b34      	subs	r3, #52	@ 0x34
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009674:	3301      	adds	r3, #1
 8009676:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	643b      	str	r3, [r7, #64]	@ 0x40
 800967e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1b6      	bne.n	80095f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	891b      	ldrh	r3, [r3, #8]
 8009688:	461a      	mov	r2, r3
 800968a:	4b1f      	ldr	r3, [pc, #124]	@ (8009708 <low_level_output+0x150>)
 800968c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800968e:	4a1e      	ldr	r2, [pc, #120]	@ (8009708 <low_level_output+0x150>)
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009696:	4a1c      	ldr	r2, [pc, #112]	@ (8009708 <low_level_output+0x150>)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800969c:	6838      	ldr	r0, [r7, #0]
 800969e:	f008 ffbf 	bl	8012620 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80096a2:	4919      	ldr	r1, [pc, #100]	@ (8009708 <low_level_output+0x150>)
 80096a4:	4819      	ldr	r0, [pc, #100]	@ (800970c <low_level_output+0x154>)
 80096a6:	f7f9 feda 	bl	800345e <HAL_ETH_Transmit_IT>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d103      	bne.n	80096b8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80096b6:	e01b      	b.n	80096f0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80096b8:	4814      	ldr	r0, [pc, #80]	@ (800970c <low_level_output+0x154>)
 80096ba:	f7fa fb81 	bl	8003dc0 <HAL_ETH_GetError>
 80096be:	4603      	mov	r3, r0
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00d      	beq.n	80096e4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80096c8:	4b11      	ldr	r3, [pc, #68]	@ (8009710 <low_level_output+0x158>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f003 faa7 	bl	800cc24 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 80096d6:	480d      	ldr	r0, [pc, #52]	@ (800970c <low_level_output+0x154>)
 80096d8:	f7fa f860 	bl	800379c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80096dc:	23fe      	movs	r3, #254	@ 0xfe
 80096de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80096e2:	e005      	b.n	80096f0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80096e4:	6838      	ldr	r0, [r7, #0]
 80096e6:	f008 fef5 	bl	80124d4 <pbuf_free>
        errval =  ERR_IF;
 80096ea:	23f4      	movs	r3, #244	@ 0xf4
 80096ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80096f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80096f4:	f113 0f02 	cmn.w	r3, #2
 80096f8:	d0d3      	beq.n	80096a2 <low_level_output+0xea>

  return errval;
 80096fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3748      	adds	r7, #72	@ 0x48
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	2000dafc 	.word	0x2000dafc
 800970c:	2000da4c 	.word	0x2000da4c
 8009710:	2000da48 	.word	0x2000da48

08009714 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009720:	4b07      	ldr	r3, [pc, #28]	@ (8009740 <low_level_input+0x2c>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	4619      	mov	r1, r3
 800972e:	4805      	ldr	r0, [pc, #20]	@ (8009744 <low_level_input+0x30>)
 8009730:	f7f9 fef1 	bl	8003516 <HAL_ETH_ReadData>
  }

  return p;
 8009734:	68fb      	ldr	r3, [r7, #12]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	2000d900 	.word	0x2000d900
 8009744:	2000da4c 	.word	0x2000da4c

08009748 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009758:	4b0f      	ldr	r3, [pc, #60]	@ (8009798 <ethernetif_input+0x50>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f04f 31ff 	mov.w	r1, #4294967295
 8009760:	4618      	mov	r0, r3
 8009762:	f003 fa5f 	bl	800cc24 <osSemaphoreAcquire>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1f5      	bne.n	8009758 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800976c:	68b8      	ldr	r0, [r7, #8]
 800976e:	f7ff ffd1 	bl	8009714 <low_level_input>
 8009772:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	4798      	blx	r3
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f008 fea2 	bl	80124d4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1ea      	bne.n	800976c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009796:	e7df      	b.n	8009758 <ethernetif_input+0x10>
 8009798:	2000da44 	.word	0x2000da44

0800979c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <ethernetif_init+0x1c>
 80097aa:	4b0e      	ldr	r3, [pc, #56]	@ (80097e4 <ethernetif_init+0x48>)
 80097ac:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80097b0:	490d      	ldr	r1, [pc, #52]	@ (80097e8 <ethernetif_init+0x4c>)
 80097b2:	480e      	ldr	r0, [pc, #56]	@ (80097ec <ethernetif_init+0x50>)
 80097b4:	f014 fec0 	bl	801e538 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2273      	movs	r2, #115	@ 0x73
 80097bc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2274      	movs	r2, #116	@ 0x74
 80097c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a09      	ldr	r2, [pc, #36]	@ (80097f0 <ethernetif_init+0x54>)
 80097cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a08      	ldr	r2, [pc, #32]	@ (80097f4 <ethernetif_init+0x58>)
 80097d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fdaf 	bl	8009338 <low_level_init>

  return ERR_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	08021efc 	.word	0x08021efc
 80097e8:	08021f18 	.word	0x08021f18
 80097ec:	08021f28 	.word	0x08021f28
 80097f0:	0801b309 	.word	0x0801b309
 80097f4:	080095b9 	.word	0x080095b9

080097f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009804:	68f9      	ldr	r1, [r7, #12]
 8009806:	4809      	ldr	r0, [pc, #36]	@ (800982c <pbuf_free_custom+0x34>)
 8009808:	f007 ff90 	bl	801172c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800980c:	4b08      	ldr	r3, [pc, #32]	@ (8009830 <pbuf_free_custom+0x38>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d107      	bne.n	8009824 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <pbuf_free_custom+0x38>)
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800981a:	4b06      	ldr	r3, [pc, #24]	@ (8009834 <pbuf_free_custom+0x3c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f003 fa52 	bl	800ccc8 <osSemaphoreRelease>
  }
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	08025058 	.word	0x08025058
 8009830:	2000d900 	.word	0x2000d900
 8009834:	2000da44 	.word	0x2000da44

08009838 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800983c:	f7f8 ff64 	bl	8002708 <HAL_GetTick>
 8009840:	4603      	mov	r3, r0
}
 8009842:	4618      	mov	r0, r3
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	@ 0x38
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	609a      	str	r2, [r3, #8]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a4e      	ldr	r2, [pc, #312]	@ (80099a0 <HAL_ETH_MspInit+0x158>)
 8009866:	4293      	cmp	r3, r2
 8009868:	f040 8095 	bne.w	8009996 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800986c:	2300      	movs	r3, #0
 800986e:	623b      	str	r3, [r7, #32]
 8009870:	4b4c      	ldr	r3, [pc, #304]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	4a4b      	ldr	r2, [pc, #300]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 8009876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800987a:	6313      	str	r3, [r2, #48]	@ 0x30
 800987c:	4b49      	ldr	r3, [pc, #292]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 800987e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009884:	623b      	str	r3, [r7, #32]
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	2300      	movs	r3, #0
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	4b45      	ldr	r3, [pc, #276]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 800988e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009890:	4a44      	ldr	r2, [pc, #272]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 8009892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009896:	6313      	str	r3, [r2, #48]	@ 0x30
 8009898:	4b42      	ldr	r3, [pc, #264]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 800989a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098a0:	61fb      	str	r3, [r7, #28]
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2300      	movs	r3, #0
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	4b3e      	ldr	r3, [pc, #248]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ac:	4a3d      	ldr	r2, [pc, #244]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80098b4:	4b3b      	ldr	r3, [pc, #236]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	4b37      	ldr	r3, [pc, #220]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c8:	4a36      	ldr	r2, [pc, #216]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098ca:	f043 0304 	orr.w	r3, r3, #4
 80098ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80098d0:	4b34      	ldr	r3, [pc, #208]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	4b30      	ldr	r3, [pc, #192]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	4a2f      	ldr	r2, [pc, #188]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098e6:	f043 0301 	orr.w	r3, r3, #1
 80098ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80098ec:	4b2d      	ldr	r3, [pc, #180]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	4b29      	ldr	r3, [pc, #164]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009900:	4a28      	ldr	r2, [pc, #160]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	6313      	str	r3, [r2, #48]	@ 0x30
 8009908:	4b26      	ldr	r3, [pc, #152]	@ (80099a4 <HAL_ETH_MspInit+0x15c>)
 800990a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009914:	2332      	movs	r3, #50	@ 0x32
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009918:	2302      	movs	r3, #2
 800991a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800991c:	2300      	movs	r3, #0
 800991e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009920:	2303      	movs	r3, #3
 8009922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009924:	230b      	movs	r3, #11
 8009926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992c:	4619      	mov	r1, r3
 800992e:	481e      	ldr	r0, [pc, #120]	@ (80099a8 <HAL_ETH_MspInit+0x160>)
 8009930:	f7fa fe82 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009934:	2386      	movs	r3, #134	@ 0x86
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009938:	2302      	movs	r3, #2
 800993a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800993c:	2300      	movs	r3, #0
 800993e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009940:	2303      	movs	r3, #3
 8009942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009944:	230b      	movs	r3, #11
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800994c:	4619      	mov	r1, r3
 800994e:	4817      	ldr	r0, [pc, #92]	@ (80099ac <HAL_ETH_MspInit+0x164>)
 8009950:	f7fa fe72 	bl	8004638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009954:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800995a:	2302      	movs	r3, #2
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800995e:	2300      	movs	r3, #0
 8009960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009962:	2303      	movs	r3, #3
 8009964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009966:	230b      	movs	r3, #11
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800996a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800996e:	4619      	mov	r1, r3
 8009970:	480f      	ldr	r0, [pc, #60]	@ (80099b0 <HAL_ETH_MspInit+0x168>)
 8009972:	f7fa fe61 	bl	8004638 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009976:	2200      	movs	r2, #0
 8009978:	2105      	movs	r1, #5
 800997a:	203d      	movs	r0, #61	@ 0x3d
 800997c:	f7f8 ffac 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009980:	203d      	movs	r0, #61	@ 0x3d
 8009982:	f7f8 ffc5 	bl	8002910 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8009986:	2200      	movs	r2, #0
 8009988:	2105      	movs	r1, #5
 800998a:	203e      	movs	r0, #62	@ 0x3e
 800998c:	f7f8 ffa4 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8009990:	203e      	movs	r0, #62	@ 0x3e
 8009992:	f7f8 ffbd 	bl	8002910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009996:	bf00      	nop
 8009998:	3738      	adds	r7, #56	@ 0x38
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40028000 	.word	0x40028000
 80099a4:	40023800 	.word	0x40023800
 80099a8:	40020800 	.word	0x40020800
 80099ac:	40020000 	.word	0x40020000
 80099b0:	40020400 	.word	0x40020400

080099b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80099b8:	4802      	ldr	r0, [pc, #8]	@ (80099c4 <ETH_PHY_IO_Init+0x10>)
 80099ba:	f7fa f9bf 	bl	8003d3c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000da4c 	.word	0x2000da4c

080099c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  return 0;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	68f9      	ldr	r1, [r7, #12]
 80099ea:	4807      	ldr	r0, [pc, #28]	@ (8009a08 <ETH_PHY_IO_ReadReg+0x30>)
 80099ec:	f7fa f800 	bl	80039f0 <HAL_ETH_ReadPHYRegister>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80099f6:	f04f 33ff 	mov.w	r3, #4294967295
 80099fa:	e000      	b.n	80099fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	2000da4c 	.word	0x2000da4c

08009a0c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	68f9      	ldr	r1, [r7, #12]
 8009a1e:	4807      	ldr	r0, [pc, #28]	@ (8009a3c <ETH_PHY_IO_WriteReg+0x30>)
 8009a20:	f7fa f831 	bl	8003a86 <HAL_ETH_WritePHYRegister>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	e000      	b.n	8009a32 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000da4c 	.word	0x2000da4c

08009a40 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009a44:	f7f8 fe60 	bl	8002708 <HAL_GetTick>
 8009a48:	4603      	mov	r3, r0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b0a0      	sub	sp, #128	@ 0x80
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	2264      	movs	r2, #100	@ 0x64
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f014 fe9d 	bl	801e7a0 <memset>
  int32_t PHYLinkState = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a6e:	2300      	movs	r3, #0
 8009a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a72:	2300      	movs	r3, #0
 8009a74:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009a7a:	483a      	ldr	r0, [pc, #232]	@ (8009b64 <ethernet_link_thread+0x114>)
 8009a7c:	f7f8 fd86 	bl	800258c <DP83848_GetLinkState>
 8009a80:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8009a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a88:	089b      	lsrs	r3, r3, #2
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00c      	beq.n	8009aae <ethernet_link_thread+0x5e>
 8009a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	dc09      	bgt.n	8009aae <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009a9a:	4833      	ldr	r0, [pc, #204]	@ (8009b68 <ethernet_link_thread+0x118>)
 8009a9c:	f7f9 fc60 	bl	8003360 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009aa0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009aa2:	f008 f8cf 	bl	8011c44 <netif_set_down>
    netif_set_link_down(netif);
 8009aa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009aa8:	f008 f936 	bl	8011d18 <netif_set_link_down>
 8009aac:	e055      	b.n	8009b5a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8009aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d14e      	bne.n	8009b5a <ethernet_link_thread+0x10a>
 8009abc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	dd4b      	ble.n	8009b5a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ac4:	3b02      	subs	r3, #2
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d82a      	bhi.n	8009b20 <ethernet_link_thread+0xd0>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <ethernet_link_thread+0x80>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009af3 	.word	0x08009af3
 8009ad8:	08009b03 	.word	0x08009b03
 8009adc:	08009b13 	.word	0x08009b13
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ae4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009ae6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009aea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009aec:	2301      	movs	r3, #1
 8009aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009af0:	e017      	b.n	8009b22 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009af6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009afa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009afc:	2301      	movs	r3, #1
 8009afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009b00:	e00f      	b.n	8009b22 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b06:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009b10:	e007      	b.n	8009b22 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009b12:	2300      	movs	r3, #0
 8009b14:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009b16:	2300      	movs	r3, #0
 8009b18:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009b1e:	e000      	b.n	8009b22 <ethernet_link_thread+0xd2>
    default:
      break;
 8009b20:	bf00      	nop
    }

    if(linkchanged)
 8009b22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d018      	beq.n	8009b5a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	480e      	ldr	r0, [pc, #56]	@ (8009b68 <ethernet_link_thread+0x118>)
 8009b30:	f7f9 fff2 	bl	8003b18 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009b34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b36:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b3a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009b3c:	f107 0308 	add.w	r3, r7, #8
 8009b40:	4619      	mov	r1, r3
 8009b42:	4809      	ldr	r0, [pc, #36]	@ (8009b68 <ethernet_link_thread+0x118>)
 8009b44:	f7fa f8df 	bl	8003d06 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009b48:	4807      	ldr	r0, [pc, #28]	@ (8009b68 <ethernet_link_thread+0x118>)
 8009b4a:	f7f9 fb99 	bl	8003280 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009b4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b50:	f008 f80c 	bl	8011b6c <netif_set_up>
      netif_set_link_up(netif);
 8009b54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b56:	f008 f8a7 	bl	8011ca8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009b5a:	2064      	movs	r0, #100	@ 0x64
 8009b5c:	f002 feb0 	bl	800c8c0 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009b60:	e78b      	b.n	8009a7a <ethernet_link_thread+0x2a>
 8009b62:	bf00      	nop
 8009b64:	2000db34 	.word	0x2000db34
 8009b68:	2000da4c 	.word	0x2000da4c

08009b6c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009b74:	4812      	ldr	r0, [pc, #72]	@ (8009bc0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009b76:	f007 fd65 	bl	8011644 <memp_malloc_pool>
 8009b7a:	60f8      	str	r0, [r7, #12]
  if (p)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d014      	beq.n	8009bac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f103 0220 	add.w	r2, r3, #32
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8009bc4 <HAL_ETH_RxAllocateCallback+0x58>)
 8009b90:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2241      	movs	r2, #65	@ 0x41
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f008 fadb 	bl	8012160 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009baa:	e005      	b.n	8009bb8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009bac:	4b06      	ldr	r3, [pc, #24]	@ (8009bc8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08025058 	.word	0x08025058
 8009bc4:	080097f9 	.word	0x080097f9
 8009bc8:	2000d900 	.word	0x2000d900

08009bcc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b089      	sub	sp, #36	@ 0x24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3b20      	subs	r3, #32
 8009bea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	887a      	ldrh	r2, [r7, #2]
 8009bfc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	e003      	b.n	8009c16 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	e009      	b.n	8009c38 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	891a      	ldrh	r2, [r3, #8]
 8009c28:	887b      	ldrh	r3, [r7, #2]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1f2      	bne.n	8009c24 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
 8009c42:	3724      	adds	r7, #36	@ 0x24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f008 fc3d 	bl	80124d4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	4a08      	ldr	r2, [pc, #32]	@ (8009c94 <disk_status+0x30>)
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	79fa      	ldrb	r2, [r7, #7]
 8009c7c:	4905      	ldr	r1, [pc, #20]	@ (8009c94 <disk_status+0x30>)
 8009c7e:	440a      	add	r2, r1
 8009c80:	7a12      	ldrb	r2, [r2, #8]
 8009c82:	4610      	mov	r0, r2
 8009c84:	4798      	blx	r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	2000db7c 	.word	0x2000db7c

08009c98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ce4 <disk_initialize+0x4c>)
 8009caa:	5cd3      	ldrb	r3, [r2, r3]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d114      	bne.n	8009cda <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8009ce4 <disk_initialize+0x4c>)
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	79fa      	ldrb	r2, [r7, #7]
 8009cbe:	4909      	ldr	r1, [pc, #36]	@ (8009ce4 <disk_initialize+0x4c>)
 8009cc0:	440a      	add	r2, r1
 8009cc2:	7a12      	ldrb	r2, [r2, #8]
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4a03      	ldr	r2, [pc, #12]	@ (8009ce4 <disk_initialize+0x4c>)
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2000db7c 	.word	0x2000db7c

08009ce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8009d24 <disk_read+0x3c>)
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	689c      	ldr	r4, [r3, #8]
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	4a07      	ldr	r2, [pc, #28]	@ (8009d24 <disk_read+0x3c>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	7a18      	ldrb	r0, [r3, #8]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	47a0      	blx	r4
 8009d14:	4603      	mov	r3, r0
 8009d16:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	2000db7c 	.word	0x2000db7c

08009d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d64 <disk_write+0x3c>)
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	68dc      	ldr	r4, [r3, #12]
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	4a07      	ldr	r2, [pc, #28]	@ (8009d64 <disk_write+0x3c>)
 8009d48:	4413      	add	r3, r2
 8009d4a:	7a18      	ldrb	r0, [r3, #8]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	47a0      	blx	r4
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd90      	pop	{r4, r7, pc}
 8009d62:	bf00      	nop
 8009d64:	2000db7c 	.word	0x2000db7c

08009d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	603a      	str	r2, [r7, #0]
 8009d72:	71fb      	strb	r3, [r7, #7]
 8009d74:	460b      	mov	r3, r1
 8009d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	4a09      	ldr	r2, [pc, #36]	@ (8009da0 <disk_ioctl+0x38>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	79fa      	ldrb	r2, [r7, #7]
 8009d86:	4906      	ldr	r1, [pc, #24]	@ (8009da0 <disk_ioctl+0x38>)
 8009d88:	440a      	add	r2, r1
 8009d8a:	7a10      	ldrb	r0, [r2, #8]
 8009d8c:	79b9      	ldrb	r1, [r7, #6]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	4798      	blx	r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
  return res;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	2000db7c 	.word	0x2000db7c

08009da4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3301      	adds	r3, #1
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009db4:	89fb      	ldrh	r3, [r7, #14]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	b21a      	sxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	b21b      	sxth	r3, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3303      	adds	r3, #3
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	3202      	adds	r2, #2
 8009dec:	7812      	ldrb	r2, [r2, #0]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	3201      	adds	r2, #1
 8009dfa:	7812      	ldrb	r2, [r2, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	887a      	ldrh	r2, [r7, #2]
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	887b      	ldrh	r3, [r7, #2]
 8009e34:	0a1b      	lsrs	r3, r3, #8
 8009e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	887a      	ldrh	r2, [r7, #2]
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	701a      	strb	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	0a1b      	lsrs	r3, r3, #8
 8009e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	b2d2      	uxtb	r2, r2
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	b2d2      	uxtb	r2, r2
 8009e9a:	701a      	strb	r2, [r3, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00d      	beq.n	8009ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	1c53      	adds	r3, r2, #1
 8009ec6:	613b      	str	r3, [r7, #16]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	1c59      	adds	r1, r3, #1
 8009ecc:	6179      	str	r1, [r7, #20]
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	607b      	str	r3, [r7, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f1      	bne.n	8009ec2 <mem_cpy+0x1a>
	}
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009eea:	b480      	push	{r7}
 8009eec:	b087      	sub	sp, #28
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	617a      	str	r2, [r7, #20]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	607b      	str	r3, [r7, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f3      	bne.n	8009efa <mem_set+0x10>
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f20:	b480      	push	{r7}
 8009f22:	b089      	sub	sp, #36	@ 0x24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	61fa      	str	r2, [r7, #28]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	4619      	mov	r1, r3
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	61ba      	str	r2, [r7, #24]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	1acb      	subs	r3, r1, r3
 8009f4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	607b      	str	r3, [r7, #4]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <mem_cmp+0x40>
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0eb      	beq.n	8009f38 <mem_cmp+0x18>

	return r;
 8009f60:	697b      	ldr	r3, [r7, #20]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3724      	adds	r7, #36	@ 0x24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f78:	e002      	b.n	8009f80 <chk_chr+0x12>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <chk_chr+0x26>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d1f2      	bne.n	8009f7a <chk_chr+0xc>
	return *str;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	781b      	ldrb	r3, [r3, #0]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d009      	beq.n	8009fc6 <lock_fs+0x22>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f002 fb0a 	bl	800c5d0 <ff_req_grant>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <lock_fs+0x22>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <lock_fs+0x24>
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <unlock_fs+0x2e>
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	2b0c      	cmp	r3, #12
 8009fe6:	d00a      	beq.n	8009ffe <unlock_fs+0x2e>
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	2b0b      	cmp	r3, #11
 8009fec:	d007      	beq.n	8009ffe <unlock_fs+0x2e>
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	2b0f      	cmp	r3, #15
 8009ff2:	d004      	beq.n	8009ffe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 fafe 	bl	800c5fa <ff_rel_grant>
	}
}
 8009ffe:	bf00      	nop
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a012:	2300      	movs	r3, #0
 800a014:	60bb      	str	r3, [r7, #8]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e029      	b.n	800a070 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a01c:	4a27      	ldr	r2, [pc, #156]	@ (800a0bc <chk_lock+0xb4>)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	4413      	add	r3, r2
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01d      	beq.n	800a066 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a02a:	4a24      	ldr	r2, [pc, #144]	@ (800a0bc <chk_lock+0xb4>)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	4413      	add	r3, r2
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d116      	bne.n	800a06a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a03c:	4a1f      	ldr	r2, [pc, #124]	@ (800a0bc <chk_lock+0xb4>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	4413      	add	r3, r2
 800a044:	3304      	adds	r3, #4
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d10c      	bne.n	800a06a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a050:	4a1a      	ldr	r2, [pc, #104]	@ (800a0bc <chk_lock+0xb4>)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	4413      	add	r3, r2
 800a058:	3308      	adds	r3, #8
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a060:	429a      	cmp	r2, r3
 800a062:	d102      	bne.n	800a06a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a064:	e007      	b.n	800a076 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a066:	2301      	movs	r3, #1
 800a068:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d9d2      	bls.n	800a01c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d109      	bne.n	800a090 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d102      	bne.n	800a088 <chk_lock+0x80>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d101      	bne.n	800a08c <chk_lock+0x84>
 800a088:	2300      	movs	r3, #0
 800a08a:	e010      	b.n	800a0ae <chk_lock+0xa6>
 800a08c:	2312      	movs	r3, #18
 800a08e:	e00e      	b.n	800a0ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d108      	bne.n	800a0a8 <chk_lock+0xa0>
 800a096:	4a09      	ldr	r2, [pc, #36]	@ (800a0bc <chk_lock+0xb4>)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	4413      	add	r3, r2
 800a09e:	330c      	adds	r3, #12
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0a6:	d101      	bne.n	800a0ac <chk_lock+0xa4>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	e000      	b.n	800a0ae <chk_lock+0xa6>
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	2000db5c 	.word	0x2000db5c

0800a0c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	e002      	b.n	800a0d2 <enq_lock+0x12>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d806      	bhi.n	800a0e6 <enq_lock+0x26>
 800a0d8:	4a09      	ldr	r2, [pc, #36]	@ (800a100 <enq_lock+0x40>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	011b      	lsls	r3, r3, #4
 800a0de:	4413      	add	r3, r2
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f2      	bne.n	800a0cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	bf14      	ite	ne
 800a0ec:	2301      	movne	r3, #1
 800a0ee:	2300      	moveq	r3, #0
 800a0f0:	b2db      	uxtb	r3, r3
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	2000db5c 	.word	0x2000db5c

0800a104 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	e01f      	b.n	800a154 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a114:	4a41      	ldr	r2, [pc, #260]	@ (800a21c <inc_lock+0x118>)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	4413      	add	r3, r2
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	429a      	cmp	r2, r3
 800a124:	d113      	bne.n	800a14e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a126:	4a3d      	ldr	r2, [pc, #244]	@ (800a21c <inc_lock+0x118>)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	4413      	add	r3, r2
 800a12e:	3304      	adds	r3, #4
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a136:	429a      	cmp	r2, r3
 800a138:	d109      	bne.n	800a14e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a13a:	4a38      	ldr	r2, [pc, #224]	@ (800a21c <inc_lock+0x118>)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	4413      	add	r3, r2
 800a142:	3308      	adds	r3, #8
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d006      	beq.n	800a15c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d9dc      	bls.n	800a114 <inc_lock+0x10>
 800a15a:	e000      	b.n	800a15e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a15c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d132      	bne.n	800a1ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e002      	b.n	800a170 <inc_lock+0x6c>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d806      	bhi.n	800a184 <inc_lock+0x80>
 800a176:	4a29      	ldr	r2, [pc, #164]	@ (800a21c <inc_lock+0x118>)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	4413      	add	r3, r2
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1f2      	bne.n	800a16a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d101      	bne.n	800a18e <inc_lock+0x8a>
 800a18a:	2300      	movs	r3, #0
 800a18c:	e040      	b.n	800a210 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	4922      	ldr	r1, [pc, #136]	@ (800a21c <inc_lock+0x118>)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	440b      	add	r3, r1
 800a19a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	491e      	ldr	r1, [pc, #120]	@ (800a21c <inc_lock+0x118>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	695a      	ldr	r2, [r3, #20]
 800a1b0:	491a      	ldr	r1, [pc, #104]	@ (800a21c <inc_lock+0x118>)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	440b      	add	r3, r1
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1bc:	4a17      	ldr	r2, [pc, #92]	@ (800a21c <inc_lock+0x118>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	4413      	add	r3, r2
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <inc_lock+0xe0>
 800a1d0:	4a12      	ldr	r2, [pc, #72]	@ (800a21c <inc_lock+0x118>)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	4413      	add	r3, r2
 800a1d8:	330c      	adds	r3, #12
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <inc_lock+0xe0>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e015      	b.n	800a210 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d108      	bne.n	800a1fc <inc_lock+0xf8>
 800a1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a21c <inc_lock+0x118>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	4413      	add	r3, r2
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	e001      	b.n	800a200 <inc_lock+0xfc>
 800a1fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a200:	4906      	ldr	r1, [pc, #24]	@ (800a21c <inc_lock+0x118>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	440b      	add	r3, r1
 800a208:	330c      	adds	r3, #12
 800a20a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	2000db5c 	.word	0x2000db5c

0800a220 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d825      	bhi.n	800a280 <dec_lock+0x60>
		n = Files[i].ctr;
 800a234:	4a17      	ldr	r2, [pc, #92]	@ (800a294 <dec_lock+0x74>)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	4413      	add	r3, r2
 800a23c:	330c      	adds	r3, #12
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a242:	89fb      	ldrh	r3, [r7, #14]
 800a244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a248:	d101      	bne.n	800a24e <dec_lock+0x2e>
 800a24a:	2300      	movs	r3, #0
 800a24c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a24e:	89fb      	ldrh	r3, [r7, #14]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <dec_lock+0x3a>
 800a254:	89fb      	ldrh	r3, [r7, #14]
 800a256:	3b01      	subs	r3, #1
 800a258:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a25a:	4a0e      	ldr	r2, [pc, #56]	@ (800a294 <dec_lock+0x74>)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	4413      	add	r3, r2
 800a262:	330c      	adds	r3, #12
 800a264:	89fa      	ldrh	r2, [r7, #14]
 800a266:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a268:	89fb      	ldrh	r3, [r7, #14]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <dec_lock+0x5a>
 800a26e:	4a09      	ldr	r2, [pc, #36]	@ (800a294 <dec_lock+0x74>)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	4413      	add	r3, r2
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	737b      	strb	r3, [r7, #13]
 800a27e:	e001      	b.n	800a284 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a280:	2302      	movs	r3, #2
 800a282:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a284:	7b7b      	ldrb	r3, [r7, #13]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	2000db5c 	.word	0x2000db5c

0800a298 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e010      	b.n	800a2c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a2dc <clear_lock+0x44>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	4413      	add	r3, r2
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d105      	bne.n	800a2c2 <clear_lock+0x2a>
 800a2b6:	4a09      	ldr	r2, [pc, #36]	@ (800a2dc <clear_lock+0x44>)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	4413      	add	r3, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d9eb      	bls.n	800a2a6 <clear_lock+0xe>
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	2000db5c 	.word	0x2000db5c

0800a2e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	78db      	ldrb	r3, [r3, #3]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d034      	beq.n	800a35e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	7858      	ldrb	r0, [r3, #1]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a304:	2301      	movs	r3, #1
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	f7ff fd0e 	bl	8009d28 <disk_write>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a312:	2301      	movs	r3, #1
 800a314:	73fb      	strb	r3, [r7, #15]
 800a316:	e022      	b.n	800a35e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d217      	bcs.n	800a35e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	789b      	ldrb	r3, [r3, #2]
 800a332:	613b      	str	r3, [r7, #16]
 800a334:	e010      	b.n	800a358 <sync_window+0x78>
					wsect += fs->fsize;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4413      	add	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7858      	ldrb	r0, [r3, #1]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a34a:	2301      	movs	r3, #1
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	f7ff fceb 	bl	8009d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d8eb      	bhi.n	800a336 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d01b      	beq.n	800a3b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff ffad 	bl	800a2e0 <sync_window>
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d113      	bne.n	800a3b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7858      	ldrb	r0, [r3, #1]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a39a:	2301      	movs	r3, #1
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	f7ff fca3 	bl	8009ce8 <disk_read>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff ff87 	bl	800a2e0 <sync_window>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d158      	bne.n	800a48e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d148      	bne.n	800a476 <sync_fs+0xb2>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d144      	bne.n	800a476 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3334      	adds	r3, #52	@ 0x34
 800a3f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fd77 	bl	8009eea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3334      	adds	r3, #52	@ 0x34
 800a400:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a404:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fd06 	bl	8009e1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3334      	adds	r3, #52	@ 0x34
 800a412:	4921      	ldr	r1, [pc, #132]	@ (800a498 <sync_fs+0xd4>)
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff fd1b 	bl	8009e50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3334      	adds	r3, #52	@ 0x34
 800a41e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a422:	491e      	ldr	r1, [pc, #120]	@ (800a49c <sync_fs+0xd8>)
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff fd13 	bl	8009e50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3334      	adds	r3, #52	@ 0x34
 800a42e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f7ff fd09 	bl	8009e50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3334      	adds	r3, #52	@ 0x34
 800a442:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7ff fcff 	bl	8009e50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7858      	ldrb	r0, [r3, #1]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a46a:	2301      	movs	r3, #1
 800a46c:	f7ff fc5c 	bl	8009d28 <disk_write>
			fs->fsi_flag = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	785b      	ldrb	r3, [r3, #1]
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff fc72 	bl	8009d68 <disk_ioctl>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <sync_fs+0xca>
 800a48a:	2301      	movs	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	41615252 	.word	0x41615252
 800a49c:	61417272 	.word	0x61417272

0800a4a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	3b02      	subs	r3, #2
 800a4ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d301      	bcc.n	800a4c0 <clust2sect+0x20>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e008      	b.n	800a4d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	895b      	ldrh	r3, [r3, #10]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	fb03 f202 	mul.w	r2, r3, r2
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d0:	4413      	add	r3, r2
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d904      	bls.n	800a4fe <get_fat+0x20>
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d302      	bcc.n	800a504 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a4fe:	2301      	movs	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	e08e      	b.n	800a622 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d061      	beq.n	800a5d6 <get_fat+0xf8>
 800a512:	2b03      	cmp	r3, #3
 800a514:	dc7b      	bgt.n	800a60e <get_fat+0x130>
 800a516:	2b01      	cmp	r3, #1
 800a518:	d002      	beq.n	800a520 <get_fat+0x42>
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d041      	beq.n	800a5a2 <get_fat+0xc4>
 800a51e:	e076      	b.n	800a60e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	085b      	lsrs	r3, r3, #1
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	0a5b      	lsrs	r3, r3, #9
 800a536:	4413      	add	r3, r2
 800a538:	4619      	mov	r1, r3
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f7ff ff14 	bl	800a368 <move_window>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d166      	bne.n	800a614 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	60fa      	str	r2, [r7, #12]
 800a54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4413      	add	r3, r2
 800a554:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a558:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	0a5b      	lsrs	r3, r3, #9
 800a562:	4413      	add	r3, r2
 800a564:	4619      	mov	r1, r3
 800a566:	6938      	ldr	r0, [r7, #16]
 800a568:	f7ff fefe 	bl	800a368 <move_window>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d152      	bne.n	800a618 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4413      	add	r3, r2
 800a57c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	4313      	orrs	r3, r2
 800a586:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <get_fat+0xba>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	091b      	lsrs	r3, r3, #4
 800a596:	e002      	b.n	800a59e <get_fat+0xc0>
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a59e:	617b      	str	r3, [r7, #20]
			break;
 800a5a0:	e03f      	b.n	800a622 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	0a1b      	lsrs	r3, r3, #8
 800a5aa:	4413      	add	r3, r2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f7ff feda 	bl	800a368 <move_window>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d130      	bne.n	800a61c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a5c8:	4413      	add	r3, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fbea 	bl	8009da4 <ld_word>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	617b      	str	r3, [r7, #20]
			break;
 800a5d4:	e025      	b.n	800a622 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	09db      	lsrs	r3, r3, #7
 800a5de:	4413      	add	r3, r2
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6938      	ldr	r0, [r7, #16]
 800a5e4:	f7ff fec0 	bl	800a368 <move_window>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d118      	bne.n	800a620 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a5fc:	4413      	add	r3, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fbe8 	bl	8009dd4 <ld_dword>
 800a604:	4603      	mov	r3, r0
 800a606:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a60a:	617b      	str	r3, [r7, #20]
			break;
 800a60c:	e009      	b.n	800a622 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a60e:	2301      	movs	r3, #1
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	e006      	b.n	800a622 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a614:	bf00      	nop
 800a616:	e004      	b.n	800a622 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a618:	bf00      	nop
 800a61a:	e002      	b.n	800a622 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a61c:	bf00      	nop
 800a61e:	e000      	b.n	800a622 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a620:	bf00      	nop
		}
	}

	return val;
 800a622:	697b      	ldr	r3, [r7, #20]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b089      	sub	sp, #36	@ 0x24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a638:	2302      	movs	r3, #2
 800a63a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	f240 80d9 	bls.w	800a7f6 <put_fat+0x1ca>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	f080 80d3 	bcs.w	800a7f6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b03      	cmp	r3, #3
 800a656:	f000 8096 	beq.w	800a786 <put_fat+0x15a>
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	f300 80cb 	bgt.w	800a7f6 <put_fat+0x1ca>
 800a660:	2b01      	cmp	r3, #1
 800a662:	d002      	beq.n	800a66a <put_fat+0x3e>
 800a664:	2b02      	cmp	r3, #2
 800a666:	d06e      	beq.n	800a746 <put_fat+0x11a>
 800a668:	e0c5      	b.n	800a7f6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	4413      	add	r3, r2
 800a676:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	0a5b      	lsrs	r3, r3, #9
 800a680:	4413      	add	r3, r2
 800a682:	4619      	mov	r1, r3
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff fe6f 	bl	800a368 <move_window>
 800a68a:	4603      	mov	r3, r0
 800a68c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a68e:	7ffb      	ldrb	r3, [r7, #31]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 80a9 	bne.w	800a7e8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	61b9      	str	r1, [r7, #24]
 800a6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a6:	4413      	add	r3, r2
 800a6a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00d      	beq.n	800a6d0 <put_fat+0xa4>
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	b25a      	sxtb	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	b25b      	sxtb	r3, r3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	e001      	b.n	800a6d4 <put_fat+0xa8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	4413      	add	r3, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7ff fe3c 	bl	800a368 <move_window>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6f4:	7ffb      	ldrb	r3, [r7, #31]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d178      	bne.n	800a7ec <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a706:	4413      	add	r3, r2
 800a708:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <put_fat+0xf0>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	091b      	lsrs	r3, r3, #4
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	e00e      	b.n	800a73a <put_fat+0x10e>
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	b25b      	sxtb	r3, r3
 800a722:	f023 030f 	bic.w	r3, r3, #15
 800a726:	b25a      	sxtb	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	0a1b      	lsrs	r3, r3, #8
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	b25b      	sxtb	r3, r3
 800a734:	4313      	orrs	r3, r2
 800a736:	b25b      	sxtb	r3, r3
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2201      	movs	r2, #1
 800a742:	70da      	strb	r2, [r3, #3]
			break;
 800a744:	e057      	b.n	800a7f6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	4413      	add	r3, r2
 800a750:	4619      	mov	r1, r3
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff fe08 	bl	800a368 <move_window>
 800a758:	4603      	mov	r3, r0
 800a75a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a75c:	7ffb      	ldrb	r3, [r7, #31]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d146      	bne.n	800a7f0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a770:	4413      	add	r3, r2
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	b292      	uxth	r2, r2
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fb4e 	bl	8009e1a <st_word>
			fs->wflag = 1;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	70da      	strb	r2, [r3, #3]
			break;
 800a784:	e037      	b.n	800a7f6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	09db      	lsrs	r3, r3, #7
 800a78e:	4413      	add	r3, r2
 800a790:	4619      	mov	r1, r3
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fde8 	bl	800a368 <move_window>
 800a798:	4603      	mov	r3, r0
 800a79a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a79c:	7ffb      	ldrb	r3, [r7, #31]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d128      	bne.n	800a7f4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a7b6:	4413      	add	r3, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fb0b 	bl	8009dd4 <ld_dword>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a7c4:	4323      	orrs	r3, r4
 800a7c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a7d6:	4413      	add	r3, r2
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fb38 	bl	8009e50 <st_dword>
			fs->wflag = 1;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	70da      	strb	r2, [r3, #3]
			break;
 800a7e6:	e006      	b.n	800a7f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7e8:	bf00      	nop
 800a7ea:	e004      	b.n	800a7f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7ec:	bf00      	nop
 800a7ee:	e002      	b.n	800a7f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7f0:	bf00      	nop
 800a7f2:	e000      	b.n	800a7f6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7f4:	bf00      	nop
		}
	}
	return res;
 800a7f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3724      	adds	r7, #36	@ 0x24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd90      	pop	{r4, r7, pc}

0800a800 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d904      	bls.n	800a826 <remove_chain+0x26>
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	429a      	cmp	r2, r3
 800a824:	d301      	bcc.n	800a82a <remove_chain+0x2a>
 800a826:	2302      	movs	r3, #2
 800a828:	e04b      	b.n	800a8c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00c      	beq.n	800a84a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a830:	f04f 32ff 	mov.w	r2, #4294967295
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	69b8      	ldr	r0, [r7, #24]
 800a838:	f7ff fef8 	bl	800a62c <put_fat>
 800a83c:	4603      	mov	r3, r0
 800a83e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a840:	7ffb      	ldrb	r3, [r7, #31]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <remove_chain+0x4a>
 800a846:	7ffb      	ldrb	r3, [r7, #31]
 800a848:	e03b      	b.n	800a8c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff fe46 	bl	800a4de <get_fat>
 800a852:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d031      	beq.n	800a8be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <remove_chain+0x64>
 800a860:	2302      	movs	r3, #2
 800a862:	e02e      	b.n	800a8c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d101      	bne.n	800a870 <remove_chain+0x70>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e028      	b.n	800a8c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a870:	2200      	movs	r2, #0
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	69b8      	ldr	r0, [r7, #24]
 800a876:	f7ff fed9 	bl	800a62c <put_fat>
 800a87a:	4603      	mov	r3, r0
 800a87c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a87e:	7ffb      	ldrb	r3, [r7, #31]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <remove_chain+0x88>
 800a884:	7ffb      	ldrb	r3, [r7, #31]
 800a886:	e01c      	b.n	800a8c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	695a      	ldr	r2, [r3, #20]
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	3b02      	subs	r3, #2
 800a892:	429a      	cmp	r2, r3
 800a894:	d20b      	bcs.n	800a8ae <remove_chain+0xae>
			fs->free_clst++;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	791b      	ldrb	r3, [r3, #4]
 800a8a4:	f043 0301 	orr.w	r3, r3, #1
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d3c6      	bcc.n	800a84a <remove_chain+0x4a>
 800a8bc:	e000      	b.n	800a8c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a8be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3720      	adds	r7, #32
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b088      	sub	sp, #32
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10d      	bne.n	800a8fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d004      	beq.n	800a8f6 <create_chain+0x2c>
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d31b      	bcc.n	800a92e <create_chain+0x64>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	61bb      	str	r3, [r7, #24]
 800a8fa:	e018      	b.n	800a92e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff fded 	bl	800a4de <get_fat>
 800a904:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d801      	bhi.n	800a910 <create_chain+0x46>
 800a90c:	2301      	movs	r3, #1
 800a90e:	e070      	b.n	800a9f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d101      	bne.n	800a91c <create_chain+0x52>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	e06a      	b.n	800a9f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	429a      	cmp	r2, r3
 800a924:	d201      	bcs.n	800a92a <create_chain+0x60>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	e063      	b.n	800a9f2 <create_chain+0x128>
		scl = clst;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	3301      	adds	r3, #1
 800a936:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d307      	bcc.n	800a952 <create_chain+0x88>
				ncl = 2;
 800a942:	2302      	movs	r3, #2
 800a944:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d901      	bls.n	800a952 <create_chain+0x88>
 800a94e:	2300      	movs	r3, #0
 800a950:	e04f      	b.n	800a9f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a952:	69f9      	ldr	r1, [r7, #28]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff fdc2 	bl	800a4de <get_fat>
 800a95a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00e      	beq.n	800a980 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d003      	beq.n	800a970 <create_chain+0xa6>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96e:	d101      	bne.n	800a974 <create_chain+0xaa>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	e03e      	b.n	800a9f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a974:	69fa      	ldr	r2, [r7, #28]
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d1da      	bne.n	800a932 <create_chain+0x68>
 800a97c:	2300      	movs	r3, #0
 800a97e:	e038      	b.n	800a9f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a980:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a982:	f04f 32ff 	mov.w	r2, #4294967295
 800a986:	69f9      	ldr	r1, [r7, #28]
 800a988:	6938      	ldr	r0, [r7, #16]
 800a98a:	f7ff fe4f 	bl	800a62c <put_fat>
 800a98e:	4603      	mov	r3, r0
 800a990:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d109      	bne.n	800a9ac <create_chain+0xe2>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d006      	beq.n	800a9ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6938      	ldr	r0, [r7, #16]
 800a9a4:	f7ff fe42 	bl	800a62c <put_fat>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d116      	bne.n	800a9e0 <create_chain+0x116>
		fs->last_clst = ncl;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	695a      	ldr	r2, [r3, #20]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	3b02      	subs	r3, #2
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d804      	bhi.n	800a9d0 <create_chain+0x106>
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	1e5a      	subs	r2, r3, #1
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	791b      	ldrb	r3, [r3, #4]
 800a9d4:	f043 0301 	orr.w	r3, r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	711a      	strb	r2, [r3, #4]
 800a9de:	e007      	b.n	800a9f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d102      	bne.n	800a9ec <create_chain+0x122>
 800a9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ea:	e000      	b.n	800a9ee <create_chain+0x124>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a9f0:	69fb      	ldr	r3, [r7, #28]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b087      	sub	sp, #28
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0e:	3304      	adds	r3, #4
 800aa10:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	0a5b      	lsrs	r3, r3, #9
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	8952      	ldrh	r2, [r2, #10]
 800aa1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	1d1a      	adds	r2, r3, #4
 800aa24:	613a      	str	r2, [r7, #16]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <clmt_clust+0x3a>
 800aa30:	2300      	movs	r3, #0
 800aa32:	e010      	b.n	800aa56 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d307      	bcc.n	800aa4c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3304      	adds	r3, #4
 800aa48:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa4a:	e7e9      	b.n	800aa20 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aa4c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	4413      	add	r3, r2
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b086      	sub	sp, #24
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa78:	d204      	bcs.n	800aa84 <dir_sdi+0x22>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	f003 031f 	and.w	r3, r3, #31
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa84:	2302      	movs	r3, #2
 800aa86:	e063      	b.n	800ab50 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <dir_sdi+0x46>
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d902      	bls.n	800aaa8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10c      	bne.n	800aac8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	095b      	lsrs	r3, r3, #5
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	8912      	ldrh	r2, [r2, #8]
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d301      	bcc.n	800aabe <dir_sdi+0x5c>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e048      	b.n	800ab50 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	61da      	str	r2, [r3, #28]
 800aac6:	e029      	b.n	800ab1c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	895b      	ldrh	r3, [r3, #10]
 800aacc:	025b      	lsls	r3, r3, #9
 800aace:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aad0:	e019      	b.n	800ab06 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fd01 	bl	800a4de <get_fat>
 800aadc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d101      	bne.n	800aaea <dir_sdi+0x88>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e032      	b.n	800ab50 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d904      	bls.n	800aafa <dir_sdi+0x98>
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d301      	bcc.n	800aafe <dir_sdi+0x9c>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e028      	b.n	800ab50 <dir_sdi+0xee>
			ofs -= csz;
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d2e1      	bcs.n	800aad2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ab0e:	6979      	ldr	r1, [r7, #20]
 800ab10:	6938      	ldr	r0, [r7, #16]
 800ab12:	f7ff fcc5 	bl	800a4a0 <clust2sect>
 800ab16:	4602      	mov	r2, r0
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <dir_sdi+0xcc>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e010      	b.n	800ab50 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	69da      	ldr	r2, [r3, #28]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	0a5b      	lsrs	r3, r3, #9
 800ab36:	441a      	add	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab48:	441a      	add	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	3320      	adds	r3, #32
 800ab6e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <dir_next+0x28>
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab7e:	d301      	bcc.n	800ab84 <dir_next+0x2c>
 800ab80:	2304      	movs	r3, #4
 800ab82:	e0aa      	b.n	800acda <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f040 8098 	bne.w	800acc0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	8912      	ldrh	r2, [r2, #8]
 800abaa:	4293      	cmp	r3, r2
 800abac:	f0c0 8088 	bcc.w	800acc0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	61da      	str	r2, [r3, #28]
 800abb6:	2304      	movs	r3, #4
 800abb8:	e08f      	b.n	800acda <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	0a5b      	lsrs	r3, r3, #9
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	8952      	ldrh	r2, [r2, #10]
 800abc2:	3a01      	subs	r2, #1
 800abc4:	4013      	ands	r3, r2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d17a      	bne.n	800acc0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	4619      	mov	r1, r3
 800abd2:	4610      	mov	r0, r2
 800abd4:	f7ff fc83 	bl	800a4de <get_fat>
 800abd8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d801      	bhi.n	800abe4 <dir_next+0x8c>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e07a      	b.n	800acda <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abea:	d101      	bne.n	800abf0 <dir_next+0x98>
 800abec:	2301      	movs	r3, #1
 800abee:	e074      	b.n	800acda <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d358      	bcc.n	800acac <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	61da      	str	r2, [r3, #28]
 800ac06:	2304      	movs	r3, #4
 800ac08:	e067      	b.n	800acda <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	4619      	mov	r1, r3
 800ac12:	4610      	mov	r0, r2
 800ac14:	f7ff fe59 	bl	800a8ca <create_chain>
 800ac18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <dir_next+0xcc>
 800ac20:	2307      	movs	r3, #7
 800ac22:	e05a      	b.n	800acda <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d101      	bne.n	800ac2e <dir_next+0xd6>
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	e055      	b.n	800acda <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d101      	bne.n	800ac3a <dir_next+0xe2>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e04f      	b.n	800acda <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fb50 	bl	800a2e0 <sync_window>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <dir_next+0xf2>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e047      	b.n	800acda <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3334      	adds	r3, #52	@ 0x34
 800ac4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff f948 	bl	8009eea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	613b      	str	r3, [r7, #16]
 800ac5e:	6979      	ldr	r1, [r7, #20]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fc1d 	bl	800a4a0 <clust2sect>
 800ac66:	4602      	mov	r2, r0
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac6c:	e012      	b.n	800ac94 <dir_next+0x13c>
						fs->wflag = 1;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2201      	movs	r2, #1
 800ac72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f7ff fb33 	bl	800a2e0 <sync_window>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <dir_next+0x12c>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e02a      	b.n	800acda <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3301      	adds	r3, #1
 800ac88:	613b      	str	r3, [r7, #16]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	895b      	ldrh	r3, [r3, #10]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d3e6      	bcc.n	800ac6e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800acb2:	6979      	ldr	r1, [r7, #20]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7ff fbf3 	bl	800a4a0 <clust2sect>
 800acba:	4602      	mov	r2, r0
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	441a      	add	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800acf2:	2100      	movs	r1, #0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff feb4 	bl	800aa62 <dir_sdi>
 800acfa:	4603      	mov	r3, r0
 800acfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d12b      	bne.n	800ad5c <dir_alloc+0x7a>
		n = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fb2a 	bl	800a368 <move_window>
 800ad14:	4603      	mov	r3, r0
 800ad16:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d11d      	bne.n	800ad5a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2be5      	cmp	r3, #229	@ 0xe5
 800ad26:	d004      	beq.n	800ad32 <dir_alloc+0x50>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d107      	bne.n	800ad42 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	3301      	adds	r3, #1
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d102      	bne.n	800ad46 <dir_alloc+0x64>
 800ad40:	e00c      	b.n	800ad5c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad42:	2300      	movs	r3, #0
 800ad44:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad46:	2101      	movs	r1, #1
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff05 	bl	800ab58 <dir_next>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d0d7      	beq.n	800ad08 <dir_alloc+0x26>
 800ad58:	e000      	b.n	800ad5c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ad5a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d101      	bne.n	800ad66 <dir_alloc+0x84>
 800ad62:	2307      	movs	r3, #7
 800ad64:	75fb      	strb	r3, [r7, #23]
	return res;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	331a      	adds	r3, #26
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f810 	bl	8009da4 <ld_word>
 800ad84:	4603      	mov	r3, r0
 800ad86:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d109      	bne.n	800ada4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	3314      	adds	r3, #20
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff f805 	bl	8009da4 <ld_word>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	041b      	lsls	r3, r3, #16
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ada4:	68fb      	ldr	r3, [r7, #12]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	331a      	adds	r3, #26
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	b292      	uxth	r2, r2
 800adc2:	4611      	mov	r1, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff f828 	bl	8009e1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b03      	cmp	r3, #3
 800add0:	d109      	bne.n	800ade6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f103 0214 	add.w	r2, r3, #20
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	b29b      	uxth	r3, r3
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7ff f81a 	bl	8009e1a <st_word>
	}
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800adfc:	2100      	movs	r1, #0
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe2f 	bl	800aa62 <dir_sdi>
 800ae04:	4603      	mov	r3, r0
 800ae06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <dir_find+0x24>
 800ae0e:	7dfb      	ldrb	r3, [r7, #23]
 800ae10:	e03e      	b.n	800ae90 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6938      	ldr	r0, [r7, #16]
 800ae1a:	f7ff faa5 	bl	800a368 <move_window>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d12f      	bne.n	800ae88 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <dir_find+0x4e>
 800ae36:	2304      	movs	r3, #4
 800ae38:	75fb      	strb	r3, [r7, #23]
 800ae3a:	e028      	b.n	800ae8e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	330b      	adds	r3, #11
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	330b      	adds	r3, #11
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <dir_find+0x86>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a18      	ldr	r0, [r3, #32]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3324      	adds	r3, #36	@ 0x24
 800ae66:	220b      	movs	r2, #11
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f7ff f859 	bl	8009f20 <mem_cmp>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fe6e 	bl	800ab58 <dir_next>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c5      	beq.n	800ae12 <dir_find+0x24>
 800ae86:	e002      	b.n	800ae8e <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae88:	bf00      	nop
 800ae8a:	e000      	b.n	800ae8e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae8c:	bf00      	nop

	return res;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aea6:	2101      	movs	r1, #1
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff ff1a 	bl	800ace2 <dir_alloc>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d11c      	bne.n	800aef2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	69db      	ldr	r3, [r3, #28]
 800aebc:	4619      	mov	r1, r3
 800aebe:	68b8      	ldr	r0, [r7, #8]
 800aec0:	f7ff fa52 	bl	800a368 <move_window>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d111      	bne.n	800aef2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	2220      	movs	r2, #32
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff f807 	bl	8009eea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a18      	ldr	r0, [r3, #32]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3324      	adds	r3, #36	@ 0x24
 800aee4:	220b      	movs	r2, #11
 800aee6:	4619      	mov	r1, r3
 800aee8:	f7fe ffde 	bl	8009ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2201      	movs	r2, #1
 800aef0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3324      	adds	r3, #36	@ 0x24
 800af10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800af12:	220b      	movs	r2, #11
 800af14:	2120      	movs	r1, #32
 800af16:	68b8      	ldr	r0, [r7, #8]
 800af18:	f7fe ffe7 	bl	8009eea <mem_set>
	si = i = 0; ni = 8;
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	2308      	movs	r3, #8
 800af26:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	61fa      	str	r2, [r7, #28]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af36:	7efb      	ldrb	r3, [r7, #27]
 800af38:	2b20      	cmp	r3, #32
 800af3a:	d94e      	bls.n	800afda <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800af3c:	7efb      	ldrb	r3, [r7, #27]
 800af3e:	2b2f      	cmp	r3, #47	@ 0x2f
 800af40:	d006      	beq.n	800af50 <create_name+0x54>
 800af42:	7efb      	ldrb	r3, [r7, #27]
 800af44:	2b5c      	cmp	r3, #92	@ 0x5c
 800af46:	d110      	bne.n	800af6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af48:	e002      	b.n	800af50 <create_name+0x54>
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	3301      	adds	r3, #1
 800af4e:	61fb      	str	r3, [r7, #28]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b2f      	cmp	r3, #47	@ 0x2f
 800af5a:	d0f6      	beq.n	800af4a <create_name+0x4e>
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4413      	add	r3, r2
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b5c      	cmp	r3, #92	@ 0x5c
 800af66:	d0f0      	beq.n	800af4a <create_name+0x4e>
			break;
 800af68:	e038      	b.n	800afdc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af6a:	7efb      	ldrb	r3, [r7, #27]
 800af6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af6e:	d003      	beq.n	800af78 <create_name+0x7c>
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	429a      	cmp	r2, r3
 800af76:	d30c      	bcc.n	800af92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b0b      	cmp	r3, #11
 800af7c:	d002      	beq.n	800af84 <create_name+0x88>
 800af7e:	7efb      	ldrb	r3, [r7, #27]
 800af80:	2b2e      	cmp	r3, #46	@ 0x2e
 800af82:	d001      	beq.n	800af88 <create_name+0x8c>
 800af84:	2306      	movs	r3, #6
 800af86:	e044      	b.n	800b012 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af88:	2308      	movs	r3, #8
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	230b      	movs	r3, #11
 800af8e:	617b      	str	r3, [r7, #20]
			continue;
 800af90:	e022      	b.n	800afd8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af96:	2b00      	cmp	r3, #0
 800af98:	da04      	bge.n	800afa4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af9a:	7efb      	ldrb	r3, [r7, #27]
 800af9c:	3b80      	subs	r3, #128	@ 0x80
 800af9e:	4a1f      	ldr	r2, [pc, #124]	@ (800b01c <create_name+0x120>)
 800afa0:	5cd3      	ldrb	r3, [r2, r3]
 800afa2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800afa4:	7efb      	ldrb	r3, [r7, #27]
 800afa6:	4619      	mov	r1, r3
 800afa8:	481d      	ldr	r0, [pc, #116]	@ (800b020 <create_name+0x124>)
 800afaa:	f7fe ffe0 	bl	8009f6e <chk_chr>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <create_name+0xbc>
 800afb4:	2306      	movs	r3, #6
 800afb6:	e02c      	b.n	800b012 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800afb8:	7efb      	ldrb	r3, [r7, #27]
 800afba:	2b60      	cmp	r3, #96	@ 0x60
 800afbc:	d905      	bls.n	800afca <create_name+0xce>
 800afbe:	7efb      	ldrb	r3, [r7, #27]
 800afc0:	2b7a      	cmp	r3, #122	@ 0x7a
 800afc2:	d802      	bhi.n	800afca <create_name+0xce>
 800afc4:	7efb      	ldrb	r3, [r7, #27]
 800afc6:	3b20      	subs	r3, #32
 800afc8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	613a      	str	r2, [r7, #16]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	7efa      	ldrb	r2, [r7, #27]
 800afd6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800afd8:	e7a6      	b.n	800af28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afda:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	441a      	add	r2, r3
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <create_name+0xf4>
 800afec:	2306      	movs	r3, #6
 800afee:	e010      	b.n	800b012 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2be5      	cmp	r3, #229	@ 0xe5
 800aff6:	d102      	bne.n	800affe <create_name+0x102>
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2205      	movs	r2, #5
 800affc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800affe:	7efb      	ldrb	r3, [r7, #27]
 800b000:	2b20      	cmp	r3, #32
 800b002:	d801      	bhi.n	800b008 <create_name+0x10c>
 800b004:	2204      	movs	r2, #4
 800b006:	e000      	b.n	800b00a <create_name+0x10e>
 800b008:	2200      	movs	r2, #0
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	330b      	adds	r3, #11
 800b00e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b010:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b012:	4618      	mov	r0, r3
 800b014:	3720      	adds	r7, #32
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	08025064 	.word	0x08025064
 800b020:	08021f50 	.word	0x08021f50

0800b024 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b038:	e002      	b.n	800b040 <follow_path+0x1c>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b2f      	cmp	r3, #47	@ 0x2f
 800b046:	d0f8      	beq.n	800b03a <follow_path+0x16>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b04e:	d0f4      	beq.n	800b03a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2200      	movs	r2, #0
 800b054:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b1f      	cmp	r3, #31
 800b05c:	d80a      	bhi.n	800b074 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2280      	movs	r2, #128	@ 0x80
 800b062:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b066:	2100      	movs	r1, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff fcfa 	bl	800aa62 <dir_sdi>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e043      	b.n	800b0fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b074:	463b      	mov	r3, r7
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff3f 	bl	800aefc <create_name>
 800b07e:	4603      	mov	r3, r0
 800b080:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d134      	bne.n	800b0f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff feb0 	bl	800adee <dir_find>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b098:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d127      	bne.n	800b0f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b0a6:	7afb      	ldrb	r3, [r7, #11]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d122      	bne.n	800b0f6 <follow_path+0xd2>
 800b0b0:	2305      	movs	r3, #5
 800b0b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b0b4:	e01f      	b.n	800b0f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d11c      	bne.n	800b0fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	799b      	ldrb	r3, [r3, #6]
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d102      	bne.n	800b0d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b0cc:	2305      	movs	r3, #5
 800b0ce:	75fb      	strb	r3, [r7, #23]
 800b0d0:	e014      	b.n	800b0fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e0:	4413      	add	r3, r2
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff fe43 	bl	800ad70 <ld_clust>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0f0:	e7c0      	b.n	800b074 <follow_path+0x50>
			if (res != FR_OK) break;
 800b0f2:	bf00      	nop
 800b0f4:	e002      	b.n	800b0fc <follow_path+0xd8>
				break;
 800b0f6:	bf00      	nop
 800b0f8:	e000      	b.n	800b0fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0fa:	bf00      	nop
			}
		}
	}

	return res;
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b106:	b480      	push	{r7}
 800b108:	b087      	sub	sp, #28
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b10e:	f04f 33ff 	mov.w	r3, #4294967295
 800b112:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d031      	beq.n	800b180 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	e002      	b.n	800b12a <get_ldnumber+0x24>
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	3301      	adds	r3, #1
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d903      	bls.n	800b13a <get_ldnumber+0x34>
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b3a      	cmp	r3, #58	@ 0x3a
 800b138:	d1f4      	bne.n	800b124 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b140:	d11c      	bne.n	800b17c <get_ldnumber+0x76>
			tp = *path;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	60fa      	str	r2, [r7, #12]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	3b30      	subs	r3, #48	@ 0x30
 800b152:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b09      	cmp	r3, #9
 800b158:	d80e      	bhi.n	800b178 <get_ldnumber+0x72>
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d10a      	bne.n	800b178 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <get_ldnumber+0x72>
					vol = (int)i;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	3301      	adds	r3, #1
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	e002      	b.n	800b182 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b17c:	2300      	movs	r3, #0
 800b17e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b180:	693b      	ldr	r3, [r7, #16]
}
 800b182:	4618      	mov	r0, r3
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
	...

0800b190 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	70da      	strb	r2, [r3, #3]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff f8dc 	bl	800a368 <move_window>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <check_fs+0x2a>
 800b1b6:	2304      	movs	r3, #4
 800b1b8:	e038      	b.n	800b22c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3334      	adds	r3, #52	@ 0x34
 800b1be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe fdee 	bl	8009da4 <ld_word>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d001      	beq.n	800b1d8 <check_fs+0x48>
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e029      	b.n	800b22c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b1de:	2be9      	cmp	r3, #233	@ 0xe9
 800b1e0:	d009      	beq.n	800b1f6 <check_fs+0x66>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b1e8:	2beb      	cmp	r3, #235	@ 0xeb
 800b1ea:	d11e      	bne.n	800b22a <check_fs+0x9a>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b1f2:	2b90      	cmp	r3, #144	@ 0x90
 800b1f4:	d119      	bne.n	800b22a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3334      	adds	r3, #52	@ 0x34
 800b1fa:	3336      	adds	r3, #54	@ 0x36
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fde9 	bl	8009dd4 <ld_dword>
 800b202:	4603      	mov	r3, r0
 800b204:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b208:	4a0a      	ldr	r2, [pc, #40]	@ (800b234 <check_fs+0xa4>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d101      	bne.n	800b212 <check_fs+0x82>
 800b20e:	2300      	movs	r3, #0
 800b210:	e00c      	b.n	800b22c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3334      	adds	r3, #52	@ 0x34
 800b216:	3352      	adds	r3, #82	@ 0x52
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe fddb 	bl	8009dd4 <ld_dword>
 800b21e:	4603      	mov	r3, r0
 800b220:	4a05      	ldr	r2, [pc, #20]	@ (800b238 <check_fs+0xa8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d101      	bne.n	800b22a <check_fs+0x9a>
 800b226:	2300      	movs	r3, #0
 800b228:	e000      	b.n	800b22c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b22a:	2302      	movs	r3, #2
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	00544146 	.word	0x00544146
 800b238:	33544146 	.word	0x33544146

0800b23c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b096      	sub	sp, #88	@ 0x58
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff ff58 	bl	800b106 <get_ldnumber>
 800b256:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da01      	bge.n	800b262 <find_volume+0x26>
 800b25e:	230b      	movs	r3, #11
 800b260:	e235      	b.n	800b6ce <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b262:	4aa5      	ldr	r2, [pc, #660]	@ (800b4f8 <find_volume+0x2bc>)
 800b264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <find_volume+0x3a>
 800b272:	230c      	movs	r3, #12
 800b274:	e22b      	b.n	800b6ce <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b278:	f7fe fe94 	bl	8009fa4 <lock_fs>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <find_volume+0x4a>
 800b282:	230f      	movs	r3, #15
 800b284:	e223      	b.n	800b6ce <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b28a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	f023 0301 	bic.w	r3, r3, #1
 800b292:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01a      	beq.n	800b2d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29e:	785b      	ldrb	r3, [r3, #1]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fe fcdf 	bl	8009c64 <disk_status>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10c      	bne.n	800b2d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <find_volume+0x92>
 800b2be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b2ca:	230a      	movs	r3, #10
 800b2cc:	e1ff      	b.n	800b6ce <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e1fd      	b.n	800b6ce <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e2:	785b      	ldrb	r3, [r3, #1]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fcd7 	bl	8009c98 <disk_initialize>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e1e6      	b.n	800b6ce <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d007      	beq.n	800b316 <find_volume+0xda>
 800b306:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b30a:	f003 0304 	and.w	r3, r3, #4
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b312:	230a      	movs	r3, #10
 800b314:	e1db      	b.n	800b6ce <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b31a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b31c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b31e:	f7ff ff37 	bl	800b190 <check_fs>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d149      	bne.n	800b3c4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b330:	2300      	movs	r3, #0
 800b332:	643b      	str	r3, [r7, #64]	@ 0x40
 800b334:	e01e      	b.n	800b374 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b338:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b344:	4413      	add	r3, r2
 800b346:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	3304      	adds	r3, #4
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d006      	beq.n	800b360 <find_volume+0x124>
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	3308      	adds	r3, #8
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fd3c 	bl	8009dd4 <ld_dword>
 800b35c:	4602      	mov	r2, r0
 800b35e:	e000      	b.n	800b362 <find_volume+0x126>
 800b360:	2200      	movs	r2, #0
 800b362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	3358      	adds	r3, #88	@ 0x58
 800b368:	443b      	add	r3, r7
 800b36a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b370:	3301      	adds	r3, #1
 800b372:	643b      	str	r3, [r7, #64]	@ 0x40
 800b374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b376:	2b03      	cmp	r3, #3
 800b378:	d9dd      	bls.n	800b336 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b37a:	2300      	movs	r3, #0
 800b37c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <find_volume+0x14e>
 800b384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b386:	3b01      	subs	r3, #1
 800b388:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b38a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	3358      	adds	r3, #88	@ 0x58
 800b390:	443b      	add	r3, r7
 800b392:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b396:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d005      	beq.n	800b3aa <find_volume+0x16e>
 800b39e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3a2:	f7ff fef5 	bl	800b190 <check_fs>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	e000      	b.n	800b3ac <find_volume+0x170>
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d905      	bls.n	800b3c4 <find_volume+0x188>
 800b3b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d9e2      	bls.n	800b38a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d101      	bne.n	800b3d0 <find_volume+0x194>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e17e      	b.n	800b6ce <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d901      	bls.n	800b3dc <find_volume+0x1a0>
 800b3d8:	230d      	movs	r3, #13
 800b3da:	e178      	b.n	800b6ce <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3de:	3334      	adds	r3, #52	@ 0x34
 800b3e0:	330b      	adds	r3, #11
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fcde 	bl	8009da4 <ld_word>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ee:	d001      	beq.n	800b3f4 <find_volume+0x1b8>
 800b3f0:	230d      	movs	r3, #13
 800b3f2:	e16c      	b.n	800b6ce <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	3334      	adds	r3, #52	@ 0x34
 800b3f8:	3316      	adds	r3, #22
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fcd2 	bl	8009da4 <ld_word>
 800b400:	4603      	mov	r3, r0
 800b402:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <find_volume+0x1dc>
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	3334      	adds	r3, #52	@ 0x34
 800b40e:	3324      	adds	r3, #36	@ 0x24
 800b410:	4618      	mov	r0, r3
 800b412:	f7fe fcdf 	bl	8009dd4 <ld_dword>
 800b416:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b41c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b420:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b426:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42a:	789b      	ldrb	r3, [r3, #2]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d005      	beq.n	800b43c <find_volume+0x200>
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	789b      	ldrb	r3, [r3, #2]
 800b434:	2b02      	cmp	r3, #2
 800b436:	d001      	beq.n	800b43c <find_volume+0x200>
 800b438:	230d      	movs	r3, #13
 800b43a:	e148      	b.n	800b6ce <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	789b      	ldrb	r3, [r3, #2]
 800b440:	461a      	mov	r2, r3
 800b442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b450:	461a      	mov	r2, r3
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b458:	895b      	ldrh	r3, [r3, #10]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d008      	beq.n	800b470 <find_volume+0x234>
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	895b      	ldrh	r3, [r3, #10]
 800b462:	461a      	mov	r2, r3
 800b464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b466:	895b      	ldrh	r3, [r3, #10]
 800b468:	3b01      	subs	r3, #1
 800b46a:	4013      	ands	r3, r2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <find_volume+0x238>
 800b470:	230d      	movs	r3, #13
 800b472:	e12c      	b.n	800b6ce <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	3334      	adds	r3, #52	@ 0x34
 800b478:	3311      	adds	r3, #17
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fc92 	bl	8009da4 <ld_word>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b486:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48a:	891b      	ldrh	r3, [r3, #8]
 800b48c:	f003 030f 	and.w	r3, r3, #15
 800b490:	b29b      	uxth	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <find_volume+0x25e>
 800b496:	230d      	movs	r3, #13
 800b498:	e119      	b.n	800b6ce <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	3334      	adds	r3, #52	@ 0x34
 800b49e:	3313      	adds	r3, #19
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fc7f 	bl	8009da4 <ld_word>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <find_volume+0x282>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	3334      	adds	r3, #52	@ 0x34
 800b4b4:	3320      	adds	r3, #32
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fc8c 	bl	8009dd4 <ld_dword>
 800b4bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c0:	3334      	adds	r3, #52	@ 0x34
 800b4c2:	330e      	adds	r3, #14
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fc6d 	bl	8009da4 <ld_word>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <find_volume+0x29c>
 800b4d4:	230d      	movs	r3, #13
 800b4d6:	e0fa      	b.n	800b6ce <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b4da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4dc:	4413      	add	r3, r2
 800b4de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4e0:	8912      	ldrh	r2, [r2, #8]
 800b4e2:	0912      	lsrs	r2, r2, #4
 800b4e4:	b292      	uxth	r2, r2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d204      	bcs.n	800b4fc <find_volume+0x2c0>
 800b4f2:	230d      	movs	r3, #13
 800b4f4:	e0eb      	b.n	800b6ce <find_volume+0x492>
 800b4f6:	bf00      	nop
 800b4f8:	2000db54 	.word	0x2000db54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b504:	8952      	ldrh	r2, [r2, #10]
 800b506:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <find_volume+0x2da>
 800b512:	230d      	movs	r3, #13
 800b514:	e0db      	b.n	800b6ce <find_volume+0x492>
		fmt = FS_FAT32;
 800b516:	2303      	movs	r3, #3
 800b518:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b522:	4293      	cmp	r3, r2
 800b524:	d802      	bhi.n	800b52c <find_volume+0x2f0>
 800b526:	2302      	movs	r3, #2
 800b528:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b532:	4293      	cmp	r3, r2
 800b534:	d802      	bhi.n	800b53c <find_volume+0x300>
 800b536:	2301      	movs	r3, #1
 800b538:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53e:	1c9a      	adds	r2, r3, #2
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b546:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b548:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b54a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b54e:	441a      	add	r2, r3
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b554:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b558:	441a      	add	r2, r3
 800b55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800b55e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b562:	2b03      	cmp	r3, #3
 800b564:	d11e      	bne.n	800b5a4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b568:	3334      	adds	r3, #52	@ 0x34
 800b56a:	332a      	adds	r3, #42	@ 0x2a
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fc19 	bl	8009da4 <ld_word>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <find_volume+0x340>
 800b578:	230d      	movs	r3, #13
 800b57a:	e0a8      	b.n	800b6ce <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57e:	891b      	ldrh	r3, [r3, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <find_volume+0x34c>
 800b584:	230d      	movs	r3, #13
 800b586:	e0a2      	b.n	800b6ce <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58a:	3334      	adds	r3, #52	@ 0x34
 800b58c:	332c      	adds	r3, #44	@ 0x2c
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fc20 	bl	8009dd4 <ld_dword>
 800b594:	4602      	mov	r2, r0
 800b596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b598:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5a2:	e01f      	b.n	800b5e4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a6:	891b      	ldrh	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <find_volume+0x374>
 800b5ac:	230d      	movs	r3, #13
 800b5ae:	e08e      	b.n	800b6ce <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5b6:	441a      	add	r2, r3
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d103      	bne.n	800b5cc <find_volume+0x390>
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	e00a      	b.n	800b5e2 <find_volume+0x3a6>
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	699a      	ldr	r2, [r3, #24]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	4413      	add	r3, r2
 800b5d6:	085a      	lsrs	r2, r3, #1
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	69da      	ldr	r2, [r3, #28]
 800b5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b5ee:	0a5b      	lsrs	r3, r3, #9
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d201      	bcs.n	800b5f8 <find_volume+0x3bc>
 800b5f4:	230d      	movs	r3, #13
 800b5f6:	e06a      	b.n	800b6ce <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	615a      	str	r2, [r3, #20]
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	695a      	ldr	r2, [r3, #20]
 800b604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b606:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60a:	2280      	movs	r2, #128	@ 0x80
 800b60c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b60e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b612:	2b03      	cmp	r3, #3
 800b614:	d149      	bne.n	800b6aa <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b618:	3334      	adds	r3, #52	@ 0x34
 800b61a:	3330      	adds	r3, #48	@ 0x30
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fbc1 	bl	8009da4 <ld_word>
 800b622:	4603      	mov	r3, r0
 800b624:	2b01      	cmp	r3, #1
 800b626:	d140      	bne.n	800b6aa <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b62a:	3301      	adds	r3, #1
 800b62c:	4619      	mov	r1, r3
 800b62e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b630:	f7fe fe9a 	bl	800a368 <move_window>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d137      	bne.n	800b6aa <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	2200      	movs	r2, #0
 800b63e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	3334      	adds	r3, #52	@ 0x34
 800b644:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fbab 	bl	8009da4 <ld_word>
 800b64e:	4603      	mov	r3, r0
 800b650:	461a      	mov	r2, r3
 800b652:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b656:	429a      	cmp	r2, r3
 800b658:	d127      	bne.n	800b6aa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	3334      	adds	r3, #52	@ 0x34
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fbb8 	bl	8009dd4 <ld_dword>
 800b664:	4603      	mov	r3, r0
 800b666:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d8 <find_volume+0x49c>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d11e      	bne.n	800b6aa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66e:	3334      	adds	r3, #52	@ 0x34
 800b670:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe fbad 	bl	8009dd4 <ld_dword>
 800b67a:	4603      	mov	r3, r0
 800b67c:	4a17      	ldr	r2, [pc, #92]	@ (800b6dc <find_volume+0x4a0>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d113      	bne.n	800b6aa <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b684:	3334      	adds	r3, #52	@ 0x34
 800b686:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fba2 	bl	8009dd4 <ld_dword>
 800b690:	4602      	mov	r2, r0
 800b692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b694:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b698:	3334      	adds	r3, #52	@ 0x34
 800b69a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fb98 	bl	8009dd4 <ld_dword>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b6b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e0 <find_volume+0x4a4>)
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	4b09      	ldr	r3, [pc, #36]	@ (800b6e0 <find_volume+0x4a4>)
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	4b08      	ldr	r3, [pc, #32]	@ (800b6e0 <find_volume+0x4a4>)
 800b6c0:	881a      	ldrh	r2, [r3, #0]
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6c8:	f7fe fde6 	bl	800a298 <clear_lock>
#endif
	return FR_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3758      	adds	r7, #88	@ 0x58
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	41615252 	.word	0x41615252
 800b6dc:	61417272 	.word	0x61417272
 800b6e0:	2000db58 	.word	0x2000db58

0800b6e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6ee:	2309      	movs	r3, #9
 800b6f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02e      	beq.n	800b756 <validate+0x72>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d02a      	beq.n	800b756 <validate+0x72>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d025      	beq.n	800b756 <validate+0x72>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	889a      	ldrh	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	88db      	ldrh	r3, [r3, #6]
 800b714:	429a      	cmp	r2, r3
 800b716:	d11e      	bne.n	800b756 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fc41 	bl	8009fa4 <lock_fs>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d014      	beq.n	800b752 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fa98 	bl	8009c64 <disk_status>
 800b734:	4603      	mov	r3, r0
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <validate+0x60>
				res = FR_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	73fb      	strb	r3, [r7, #15]
 800b742:	e008      	b.n	800b756 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fc40 	bl	8009fd0 <unlock_fs>
 800b750:	e001      	b.n	800b756 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b752:	230f      	movs	r3, #15
 800b754:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <validate+0x7e>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	e000      	b.n	800b764 <validate+0x80>
 800b762:	2300      	movs	r3, #0
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	6013      	str	r3, [r2, #0]
	return res;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
	...

0800b774 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b786:	f107 0310 	add.w	r3, r7, #16
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7ff fcbb 	bl	800b106 <get_ldnumber>
 800b790:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	2b00      	cmp	r3, #0
 800b796:	da01      	bge.n	800b79c <f_mount+0x28>
 800b798:	230b      	movs	r3, #11
 800b79a:	e048      	b.n	800b82e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b79c:	4a26      	ldr	r2, [pc, #152]	@ (800b838 <f_mount+0xc4>)
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00f      	beq.n	800b7cc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b7ac:	69b8      	ldr	r0, [r7, #24]
 800b7ae:	f7fe fd73 	bl	800a298 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 fefe 	bl	800c5b8 <ff_del_syncobj>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <f_mount+0x52>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e033      	b.n	800b82e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00f      	beq.n	800b7f2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	330c      	adds	r3, #12
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f000 fecd 	bl	800c582 <ff_cre_syncobj>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <f_mount+0x7e>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e01d      	b.n	800b82e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4910      	ldr	r1, [pc, #64]	@ (800b838 <f_mount+0xc4>)
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <f_mount+0x94>
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d001      	beq.n	800b80c <f_mount+0x98>
 800b808:	2300      	movs	r3, #0
 800b80a:	e010      	b.n	800b82e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b80c:	f107 010c 	add.w	r1, r7, #12
 800b810:	f107 0308 	add.w	r3, r7, #8
 800b814:	2200      	movs	r2, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fd10 	bl	800b23c <find_volume>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	7dfa      	ldrb	r2, [r7, #23]
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe fbd2 	bl	8009fd0 <unlock_fs>
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3720      	adds	r7, #32
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	2000db54 	.word	0x2000db54

0800b83c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b098      	sub	sp, #96	@ 0x60
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <f_open+0x18>
 800b850:	2309      	movs	r3, #9
 800b852:	e1b0      	b.n	800bbb6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b85a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b85c:	79fa      	ldrb	r2, [r7, #7]
 800b85e:	f107 0110 	add.w	r1, r7, #16
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff fce8 	bl	800b23c <find_volume>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 818d 	bne.w	800bb96 <f_open+0x35a>
		dj.obj.fs = fs;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	4611      	mov	r1, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fbcb 	bl	800b024 <follow_path>
 800b88e:	4603      	mov	r3, r0
 800b890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d118      	bne.n	800b8ce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b89c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b8a0:	b25b      	sxtb	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	da03      	bge.n	800b8ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800b8a6:	2306      	movs	r3, #6
 800b8a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b8ac:	e00f      	b.n	800b8ce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	bf8c      	ite	hi
 800b8b4:	2301      	movhi	r3, #1
 800b8b6:	2300      	movls	r3, #0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f107 0314 	add.w	r3, r7, #20
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fba0 	bl	800a008 <chk_lock>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	f003 031c 	and.w	r3, r3, #28
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d07f      	beq.n	800b9d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d017      	beq.n	800b910 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	d10e      	bne.n	800b906 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b8e8:	f7fe fbea 	bl	800a0c0 <enq_lock>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d006      	beq.n	800b900 <f_open+0xc4>
 800b8f2:	f107 0314 	add.w	r3, r7, #20
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff face 	bl	800ae98 <dir_register>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	e000      	b.n	800b902 <f_open+0xc6>
 800b900:	2312      	movs	r3, #18
 800b902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	f043 0308 	orr.w	r3, r3, #8
 800b90c:	71fb      	strb	r3, [r7, #7]
 800b90e:	e010      	b.n	800b932 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b910:	7ebb      	ldrb	r3, [r7, #26]
 800b912:	f003 0311 	and.w	r3, r3, #17
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <f_open+0xe6>
					res = FR_DENIED;
 800b91a:	2307      	movs	r3, #7
 800b91c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b920:	e007      	b.n	800b932 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <f_open+0xf6>
 800b92c:	2308      	movs	r3, #8
 800b92e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d168      	bne.n	800ba0c <f_open+0x1d0>
 800b93a:	79fb      	ldrb	r3, [r7, #7]
 800b93c:	f003 0308 	and.w	r3, r3, #8
 800b940:	2b00      	cmp	r3, #0
 800b942:	d063      	beq.n	800ba0c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b944:	f7fd f8d6 	bl	8008af4 <get_fattime>
 800b948:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94c:	330e      	adds	r3, #14
 800b94e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe fa7d 	bl	8009e50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b958:	3316      	adds	r3, #22
 800b95a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe fa77 	bl	8009e50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b964:	330b      	adds	r3, #11
 800b966:	2220      	movs	r2, #32
 800b968:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b96e:	4611      	mov	r1, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff f9fd 	bl	800ad70 <ld_clust>
 800b976:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b97c:	2200      	movs	r2, #0
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff fa15 	bl	800adae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b986:	331c      	adds	r3, #28
 800b988:	2100      	movs	r1, #0
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fa60 	bl	8009e50 <st_dword>
					fs->wflag = 1;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2201      	movs	r2, #1
 800b994:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d037      	beq.n	800ba0c <f_open+0x1d0>
						dw = fs->winsect;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b9a2:	f107 0314 	add.w	r3, r7, #20
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe ff28 	bl	800a800 <remove_chain>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d126      	bne.n	800ba0c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fcd0 	bl	800a368 <move_window>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9d2:	3a01      	subs	r2, #1
 800b9d4:	611a      	str	r2, [r3, #16]
 800b9d6:	e019      	b.n	800ba0c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d115      	bne.n	800ba0c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b9e0:	7ebb      	ldrb	r3, [r7, #26]
 800b9e2:	f003 0310 	and.w	r3, r3, #16
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b9f0:	e00c      	b.n	800ba0c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <f_open+0x1d0>
 800b9fc:	7ebb      	ldrb	r3, [r7, #26]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <f_open+0x1d0>
						res = FR_DENIED;
 800ba06:	2307      	movs	r3, #7
 800ba08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ba0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d126      	bne.n	800ba62 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	f003 0308 	and.w	r3, r3, #8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ba2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	bf8c      	ite	hi
 800ba3a:	2301      	movhi	r3, #1
 800ba3c:	2300      	movls	r3, #0
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	f107 0314 	add.w	r3, r7, #20
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fb5b 	bl	800a104 <inc_lock>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <f_open+0x226>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ba62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f040 8095 	bne.w	800bb96 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff f97c 	bl	800ad70 <ld_clust>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba80:	331c      	adds	r3, #28
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe f9a6 	bl	8009dd4 <ld_dword>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	88da      	ldrh	r2, [r3, #6]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	79fa      	ldrb	r2, [r7, #7]
 800baa6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3330      	adds	r3, #48	@ 0x30
 800babe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fe fa10 	bl	8009eea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d060      	beq.n	800bb96 <f_open+0x35a>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d05c      	beq.n	800bb96 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	025b      	lsls	r3, r3, #9
 800baea:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800baf8:	e016      	b.n	800bb28 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fced 	bl	800a4de <get_fat>
 800bb04:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d802      	bhi.n	800bb12 <f_open+0x2d6>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bb12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d102      	bne.n	800bb20 <f_open+0x2e4>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <f_open+0x2fc>
 800bb30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d8e0      	bhi.n	800bafa <f_open+0x2be>
				}
				fp->clust = clst;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d127      	bne.n	800bb96 <f_open+0x35a>
 800bb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d022      	beq.n	800bb96 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe fca3 	bl	800a4a0 <clust2sect>
 800bb5a:	6478      	str	r0, [r7, #68]	@ 0x44
 800bb5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <f_open+0x32e>
						res = FR_INT_ERR;
 800bb62:	2302      	movs	r3, #2
 800bb64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bb68:	e015      	b.n	800bb96 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb6c:	0a5a      	lsrs	r2, r3, #9
 800bb6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	7858      	ldrb	r0, [r3, #1]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6a1a      	ldr	r2, [r3, #32]
 800bb84:	2301      	movs	r3, #1
 800bb86:	f7fe f8af 	bl	8009ce8 <disk_read>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <f_open+0x35a>
 800bb90:	2301      	movs	r3, #1
 800bb92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <f_open+0x368>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fa0f 	bl	8009fd0 <unlock_fs>
 800bbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3760      	adds	r7, #96	@ 0x60
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b08e      	sub	sp, #56	@ 0x38
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
 800bbca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f107 0214 	add.w	r2, r7, #20
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fd80 	bl	800b6e4 <validate>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d107      	bne.n	800bc02 <f_read+0x44>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7d5b      	ldrb	r3, [r3, #21]
 800bbf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bbfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <f_read+0x58>
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe f9e0 	bl	8009fd0 <unlock_fs>
 800bc10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc14:	e13d      	b.n	800be92 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	7d1b      	ldrb	r3, [r3, #20]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d106      	bne.n	800bc30 <f_read+0x72>
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2107      	movs	r1, #7
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe f9d2 	bl	8009fd0 <unlock_fs>
 800bc2c:	2307      	movs	r3, #7
 800bc2e:	e130      	b.n	800be92 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	f240 811c 	bls.w	800be7e <f_read+0x2c0>
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bc4a:	e118      	b.n	800be7e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 80e4 	bne.w	800be22 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	0a5b      	lsrs	r3, r3, #9
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	8952      	ldrh	r2, [r2, #10]
 800bc64:	3a01      	subs	r2, #1
 800bc66:	4013      	ands	r3, r2
 800bc68:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d139      	bne.n	800bce4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d103      	bne.n	800bc80 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc7e:	e013      	b.n	800bca8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d007      	beq.n	800bc98 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7fe feb3 	bl	800a9fa <clmt_clust>
 800bc94:	6338      	str	r0, [r7, #48]	@ 0x30
 800bc96:	e007      	b.n	800bca8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7fe fc1c 	bl	800a4de <get_fat>
 800bca6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d809      	bhi.n	800bcc2 <f_read+0x104>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	755a      	strb	r2, [r3, #21]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe f989 	bl	8009fd0 <unlock_fs>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e0e7      	b.n	800be92 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d109      	bne.n	800bcde <f_read+0x120>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2201      	movs	r2, #1
 800bcce:	755a      	strb	r2, [r3, #21]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe f97b 	bl	8009fd0 <unlock_fs>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e0d9      	b.n	800be92 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bce2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f7fe fbd7 	bl	800a4a0 <clust2sect>
 800bcf2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d109      	bne.n	800bd0e <f_read+0x150>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	755a      	strb	r2, [r3, #21]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2102      	movs	r1, #2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe f963 	bl	8009fd0 <unlock_fs>
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	e0c1      	b.n	800be92 <f_read+0x2d4>
			sect += csect;
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	4413      	add	r3, r2
 800bd14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	0a5b      	lsrs	r3, r3, #9
 800bd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d03e      	beq.n	800bda0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd26:	4413      	add	r3, r2
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	8952      	ldrh	r2, [r2, #10]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d905      	bls.n	800bd3c <f_read+0x17e>
					cc = fs->csize - csect;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	895b      	ldrh	r3, [r3, #10]
 800bd34:	461a      	mov	r2, r3
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	7858      	ldrb	r0, [r3, #1]
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd46:	f7fd ffcf 	bl	8009ce8 <disk_read>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <f_read+0x1a6>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2201      	movs	r2, #1
 800bd54:	755a      	strb	r2, [r3, #21]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2101      	movs	r1, #1
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe f938 	bl	8009fd0 <unlock_fs>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e096      	b.n	800be92 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	7d1b      	ldrb	r3, [r3, #20]
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da14      	bge.n	800bd98 <f_read+0x1da>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6a1a      	ldr	r2, [r3, #32]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d90d      	bls.n	800bd98 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a1a      	ldr	r2, [r3, #32]
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	025b      	lsls	r3, r3, #9
 800bd86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd88:	18d0      	adds	r0, r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3330      	adds	r3, #48	@ 0x30
 800bd8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd92:	4619      	mov	r1, r3
 800bd94:	f7fe f888 	bl	8009ea8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9a:	025b      	lsls	r3, r3, #9
 800bd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bd9e:	e05a      	b.n	800be56 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d038      	beq.n	800be1c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	7d1b      	ldrb	r3, [r3, #20]
 800bdae:	b25b      	sxtb	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	da1d      	bge.n	800bdf0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	7858      	ldrb	r0, [r3, #1]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a1a      	ldr	r2, [r3, #32]
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f7fd ffb0 	bl	8009d28 <disk_write>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <f_read+0x224>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	755a      	strb	r2, [r3, #21]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe f8f9 	bl	8009fd0 <unlock_fs>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e057      	b.n	800be92 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	7858      	ldrb	r0, [r3, #1]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	69ba      	ldr	r2, [r7, #24]
 800bdfe:	f7fd ff73 	bl	8009ce8 <disk_read>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <f_read+0x25e>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	755a      	strb	r2, [r3, #21]
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2101      	movs	r1, #1
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe f8dc 	bl	8009fd0 <unlock_fs>
 800be18:	2301      	movs	r3, #1
 800be1a:	e03a      	b.n	800be92 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800be2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800be30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	429a      	cmp	r2, r3
 800be36:	d901      	bls.n	800be3c <f_read+0x27e>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4a:	4413      	add	r3, r2
 800be4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be4e:	4619      	mov	r1, r3
 800be50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be52:	f7fe f829 	bl	8009ea8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800be56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	4413      	add	r3, r2
 800be5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	699a      	ldr	r2, [r3, #24]
 800be62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be64:	441a      	add	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	619a      	str	r2, [r3, #24]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	441a      	add	r2, r3
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f47f aee3 	bne.w	800bc4c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2100      	movs	r1, #0
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe f8a0 	bl	8009fd0 <unlock_fs>
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3738      	adds	r7, #56	@ 0x38
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b08c      	sub	sp, #48	@ 0x30
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
 800bea6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f107 0210 	add.w	r2, r7, #16
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fc12 	bl	800b6e4 <validate>
 800bec0:	4603      	mov	r3, r0
 800bec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800beca:	2b00      	cmp	r3, #0
 800becc:	d107      	bne.n	800bede <f_write+0x44>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	7d5b      	ldrb	r3, [r3, #21]
 800bed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d009      	beq.n	800bef2 <f_write+0x58>
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe f872 	bl	8009fd0 <unlock_fs>
 800beec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bef0:	e173      	b.n	800c1da <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	7d1b      	ldrb	r3, [r3, #20]
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d106      	bne.n	800bf0c <f_write+0x72>
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	2107      	movs	r1, #7
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe f864 	bl	8009fd0 <unlock_fs>
 800bf08:	2307      	movs	r3, #7
 800bf0a:	e166      	b.n	800c1da <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	699a      	ldr	r2, [r3, #24]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	441a      	add	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	f080 814b 	bcs.w	800c1b4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bf26:	e145      	b.n	800c1b4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f040 8101 	bne.w	800c138 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	0a5b      	lsrs	r3, r3, #9
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	8952      	ldrh	r2, [r2, #10]
 800bf40:	3a01      	subs	r2, #1
 800bf42:	4013      	ands	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d14d      	bne.n	800bfe8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10c      	bne.n	800bf6e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d11a      	bne.n	800bf96 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2100      	movs	r1, #0
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fcb0 	bl	800a8ca <create_chain>
 800bf6a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bf6c:	e013      	b.n	800bf96 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7fe fd3c 	bl	800a9fa <clmt_clust>
 800bf82:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bf84:	e007      	b.n	800bf96 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f7fe fc9b 	bl	800a8ca <create_chain>
 800bf94:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 8110 	beq.w	800c1be <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d109      	bne.n	800bfb8 <f_write+0x11e>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	755a      	strb	r2, [r3, #21]
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2102      	movs	r1, #2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe f80e 	bl	8009fd0 <unlock_fs>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e110      	b.n	800c1da <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbe:	d109      	bne.n	800bfd4 <f_write+0x13a>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	755a      	strb	r2, [r3, #21]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2101      	movs	r1, #1
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe f800 	bl	8009fd0 <unlock_fs>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e102      	b.n	800c1da <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfd8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <f_write+0x14e>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfe6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	7d1b      	ldrb	r3, [r3, #20]
 800bfec:	b25b      	sxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da1d      	bge.n	800c02e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	7858      	ldrb	r0, [r3, #1]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6a1a      	ldr	r2, [r3, #32]
 800c000:	2301      	movs	r3, #1
 800c002:	f7fd fe91 	bl	8009d28 <disk_write>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d009      	beq.n	800c020 <f_write+0x186>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	755a      	strb	r2, [r3, #21]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2101      	movs	r1, #1
 800c016:	4618      	mov	r0, r3
 800c018:	f7fd ffda 	bl	8009fd0 <unlock_fs>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e0dc      	b.n	800c1da <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	7d1b      	ldrb	r3, [r3, #20]
 800c024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7fe fa32 	bl	800a4a0 <clust2sect>
 800c03c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d109      	bne.n	800c058 <f_write+0x1be>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2202      	movs	r2, #2
 800c048:	755a      	strb	r2, [r3, #21]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2102      	movs	r1, #2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fd ffbe 	bl	8009fd0 <unlock_fs>
 800c054:	2302      	movs	r3, #2
 800c056:	e0c0      	b.n	800c1da <f_write+0x340>
			sect += csect;
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	4413      	add	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0a5b      	lsrs	r3, r3, #9
 800c064:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d041      	beq.n	800c0f0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	4413      	add	r3, r2
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	8952      	ldrh	r2, [r2, #10]
 800c076:	4293      	cmp	r3, r2
 800c078:	d905      	bls.n	800c086 <f_write+0x1ec>
					cc = fs->csize - csect;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	895b      	ldrh	r3, [r3, #10]
 800c07e:	461a      	mov	r2, r3
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	7858      	ldrb	r0, [r3, #1]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	69f9      	ldr	r1, [r7, #28]
 800c090:	f7fd fe4a 	bl	8009d28 <disk_write>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <f_write+0x214>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	755a      	strb	r2, [r3, #21]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd ff93 	bl	8009fd0 <unlock_fs>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e095      	b.n	800c1da <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6a1a      	ldr	r2, [r3, #32]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	6a3a      	ldr	r2, [r7, #32]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d915      	bls.n	800c0e8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6a1a      	ldr	r2, [r3, #32]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	025b      	lsls	r3, r3, #9
 800c0cc:	69fa      	ldr	r2, [r7, #28]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7fd fee7 	bl	8009ea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	7d1b      	ldrb	r3, [r3, #20]
 800c0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	025b      	lsls	r3, r3, #9
 800c0ec:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c0ee:	e044      	b.n	800c17a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d01b      	beq.n	800c132 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c102:	429a      	cmp	r2, r3
 800c104:	d215      	bcs.n	800c132 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	7858      	ldrb	r0, [r3, #1]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c110:	2301      	movs	r3, #1
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	f7fd fde8 	bl	8009ce8 <disk_read>
 800c118:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2201      	movs	r2, #1
 800c122:	755a      	strb	r2, [r3, #21]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2101      	movs	r1, #1
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd ff51 	bl	8009fd0 <unlock_fs>
 800c12e:	2301      	movs	r3, #1
 800c130:	e053      	b.n	800c1da <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c140:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d901      	bls.n	800c152 <f_write+0x2b8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c160:	4413      	add	r3, r2
 800c162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c164:	69f9      	ldr	r1, [r7, #28]
 800c166:	4618      	mov	r0, r3
 800c168:	f7fd fe9e 	bl	8009ea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	7d1b      	ldrb	r3, [r3, #20]
 800c170:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c174:	b2da      	uxtb	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	4413      	add	r3, r2
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	699a      	ldr	r2, [r3, #24]
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	441a      	add	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	619a      	str	r2, [r3, #24]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	68da      	ldr	r2, [r3, #12]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	429a      	cmp	r2, r3
 800c198:	bf38      	it	cc
 800c19a:	461a      	movcc	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	60da      	str	r2, [r3, #12]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	441a      	add	r2, r3
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f47f aeb6 	bne.w	800bf28 <f_write+0x8e>
 800c1bc:	e000      	b.n	800c1c0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c1be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	7d1b      	ldrb	r3, [r3, #20]
 800c1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fefc 	bl	8009fd0 <unlock_fs>
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3730      	adds	r7, #48	@ 0x30
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b086      	sub	sp, #24
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f107 0208 	add.w	r2, r7, #8
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fa76 	bl	800b6e4 <validate>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d16d      	bne.n	800c2de <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7d1b      	ldrb	r3, [r3, #20]
 800c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d067      	beq.n	800c2de <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7d1b      	ldrb	r3, [r3, #20]
 800c212:	b25b      	sxtb	r3, r3
 800c214:	2b00      	cmp	r3, #0
 800c216:	da1a      	bge.n	800c24e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	7858      	ldrb	r0, [r3, #1]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1a      	ldr	r2, [r3, #32]
 800c226:	2301      	movs	r3, #1
 800c228:	f7fd fd7e 	bl	8009d28 <disk_write>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d006      	beq.n	800c240 <f_sync+0x5e>
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2101      	movs	r1, #1
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd feca 	bl	8009fd0 <unlock_fs>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e055      	b.n	800c2ec <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7d1b      	ldrb	r3, [r3, #20]
 800c244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c24e:	f7fc fc51 	bl	8008af4 <get_fattime>
 800c252:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25a:	4619      	mov	r1, r3
 800c25c:	4610      	mov	r0, r2
 800c25e:	f7fe f883 	bl	800a368 <move_window>
 800c262:	4603      	mov	r3, r0
 800c264:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d138      	bne.n	800c2de <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c270:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	330b      	adds	r3, #11
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	330b      	adds	r3, #11
 800c27c:	f042 0220 	orr.w	r2, r2, #32
 800c280:	b2d2      	uxtb	r2, r2
 800c282:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6818      	ldr	r0, [r3, #0]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	461a      	mov	r2, r3
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	f7fe fd8d 	bl	800adae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f103 021c 	add.w	r2, r3, #28
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	f7fd fdd5 	bl	8009e50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3316      	adds	r3, #22
 800c2aa:	6939      	ldr	r1, [r7, #16]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd fdcf 	bl	8009e50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3312      	adds	r3, #18
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fd fdae 	bl	8009e1a <st_word>
					fs->wflag = 1;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe f87c 	bl	800a3c4 <sync_fs>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7d1b      	ldrb	r3, [r3, #20]
 800c2d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	7dfa      	ldrb	r2, [r7, #23]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fd fe73 	bl	8009fd0 <unlock_fs>
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff ff70 	bl	800c1e2 <f_sync>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d11d      	bne.n	800c348 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f107 0208 	add.w	r2, r7, #8
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff f9e5 	bl	800b6e4 <validate>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d111      	bne.n	800c348 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fd ff79 	bl	800a220 <dec_lock>
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f7fd fe44 	bl	8009fd0 <unlock_fs>
#endif
		}
	}
	return res;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b092      	sub	sp, #72	@ 0x48
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c35e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	2200      	movs	r2, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe ff67 	bl	800b23c <find_volume>
 800c36e:	4603      	mov	r3, r0
 800c370:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c374:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 8099 	bne.w	800c4b0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c37e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c386:	695a      	ldr	r2, [r3, #20]
 800c388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	3b02      	subs	r3, #2
 800c38e:	429a      	cmp	r2, r3
 800c390:	d804      	bhi.n	800c39c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	695a      	ldr	r2, [r3, #20]
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	e089      	b.n	800c4b0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d128      	bne.n	800c3fa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c3b0:	f107 0314 	add.w	r3, r7, #20
 800c3b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe f891 	bl	800a4de <get_fat>
 800c3bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c4:	d103      	bne.n	800c3ce <f_getfree+0x7c>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c3cc:	e063      	b.n	800c496 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d103      	bne.n	800c3dc <f_getfree+0x8a>
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c3da:	e05c      	b.n	800c496 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d102      	bne.n	800c3e8 <f_getfree+0x96>
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d3db      	bcc.n	800c3b0 <f_getfree+0x5e>
 800c3f8:	e04d      	b.n	800c496 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c404:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	637b      	str	r3, [r7, #52]	@ 0x34
 800c40a:	2300      	movs	r3, #0
 800c40c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c410:	2b00      	cmp	r3, #0
 800c412:	d113      	bne.n	800c43c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c41c:	4619      	mov	r1, r3
 800c41e:	f7fd ffa3 	bl	800a368 <move_window>
 800c422:	4603      	mov	r3, r0
 800c424:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c428:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d131      	bne.n	800c494 <f_getfree+0x142>
							p = fs->win;
 800c430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c432:	3334      	adds	r3, #52	@ 0x34
 800c434:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c436:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c43a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b02      	cmp	r3, #2
 800c442:	d10f      	bne.n	800c464 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c446:	f7fd fcad 	bl	8009da4 <ld_word>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <f_getfree+0x104>
 800c450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c452:	3301      	adds	r3, #1
 800c454:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c458:	3302      	adds	r3, #2
 800c45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45e:	3b02      	subs	r3, #2
 800c460:	637b      	str	r3, [r7, #52]	@ 0x34
 800c462:	e010      	b.n	800c486 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c466:	f7fd fcb5 	bl	8009dd4 <ld_dword>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <f_getfree+0x128>
 800c474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c476:	3301      	adds	r3, #1
 800c478:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	3304      	adds	r3, #4
 800c47e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c482:	3b04      	subs	r3, #4
 800c484:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	3b01      	subs	r3, #1
 800c48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1bd      	bne.n	800c40e <f_getfree+0xbc>
 800c492:	e000      	b.n	800c496 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c494:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c49a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4a0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a4:	791a      	ldrb	r2, [r3, #4]
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	f042 0201 	orr.w	r2, r2, #1
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fd fd89 	bl	8009fd0 <unlock_fs>
 800c4be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3748      	adds	r7, #72	@ 0x48
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
	...

0800c4cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c4e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c4e4:	7a5b      	ldrb	r3, [r3, #9]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d131      	bne.n	800c550 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c4ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c4ee:	7a5b      	ldrb	r3, [r3, #9]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c4fa:	4b19      	ldr	r3, [pc, #100]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c4fc:	7a5b      	ldrb	r3, [r3, #9]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	4a17      	ldr	r2, [pc, #92]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c50a:	4b15      	ldr	r3, [pc, #84]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c50c:	7a5b      	ldrb	r3, [r3, #9]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	461a      	mov	r2, r3
 800c512:	4b13      	ldr	r3, [pc, #76]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c514:	4413      	add	r3, r2
 800c516:	79fa      	ldrb	r2, [r7, #7]
 800c518:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c51a:	4b11      	ldr	r3, [pc, #68]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c51c:	7a5b      	ldrb	r3, [r3, #9]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	b2d1      	uxtb	r1, r2
 800c524:	4a0e      	ldr	r2, [pc, #56]	@ (800c560 <FATFS_LinkDriverEx+0x94>)
 800c526:	7251      	strb	r1, [r2, #9]
 800c528:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c52a:	7dbb      	ldrb	r3, [r7, #22]
 800c52c:	3330      	adds	r3, #48	@ 0x30
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	3301      	adds	r3, #1
 800c538:	223a      	movs	r2, #58	@ 0x3a
 800c53a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	3302      	adds	r3, #2
 800c540:	222f      	movs	r2, #47	@ 0x2f
 800c542:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	3303      	adds	r3, #3
 800c548:	2200      	movs	r2, #0
 800c54a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c550:	7dfb      	ldrb	r3, [r7, #23]
}
 800c552:	4618      	mov	r0, r3
 800c554:	371c      	adds	r7, #28
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	2000db7c 	.word	0x2000db7c

0800c564 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c56e:	2200      	movs	r2, #0
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ffaa 	bl	800c4cc <FATFS_LinkDriverEx>
 800c578:	4603      	mov	r3, r0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	4603      	mov	r3, r0
 800c58a:	6039      	str	r1, [r7, #0]
 800c58c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c58e:	2200      	movs	r2, #0
 800c590:	2101      	movs	r1, #1
 800c592:	2001      	movs	r0, #1
 800c594:	f000 fabd 	bl	800cb12 <osSemaphoreNew>
 800c598:	4602      	mov	r2, r0
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf14      	ite	ne
 800c5a6:	2301      	movne	r3, #1
 800c5a8:	2300      	moveq	r3, #0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	60fb      	str	r3, [r7, #12]

    return ret;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fbc5 	bl	800cd50 <osSemaphoreDelete>
#endif
    return 1;
 800c5c6:	2301      	movs	r3, #1
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c5dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fb1f 	bl	800cc24 <osSemaphoreAcquire>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fb60 	bl	800ccc8 <osSemaphoreRelease>
#endif
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <__NVIC_SetPriority>:
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	6039      	str	r1, [r7, #0]
 800c61a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c61c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c620:	2b00      	cmp	r3, #0
 800c622:	db0a      	blt.n	800c63a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	b2da      	uxtb	r2, r3
 800c628:	490c      	ldr	r1, [pc, #48]	@ (800c65c <__NVIC_SetPriority+0x4c>)
 800c62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c62e:	0112      	lsls	r2, r2, #4
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	440b      	add	r3, r1
 800c634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c638:	e00a      	b.n	800c650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	4908      	ldr	r1, [pc, #32]	@ (800c660 <__NVIC_SetPriority+0x50>)
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	3b04      	subs	r3, #4
 800c648:	0112      	lsls	r2, r2, #4
 800c64a:	b2d2      	uxtb	r2, r2
 800c64c:	440b      	add	r3, r1
 800c64e:	761a      	strb	r2, [r3, #24]
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	e000e100 	.word	0xe000e100
 800c660:	e000ed00 	.word	0xe000ed00

0800c664 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c668:	4b05      	ldr	r3, [pc, #20]	@ (800c680 <SysTick_Handler+0x1c>)
 800c66a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c66c:	f002 fd2a 	bl	800f0c4 <xTaskGetSchedulerState>
 800c670:	4603      	mov	r3, r0
 800c672:	2b01      	cmp	r3, #1
 800c674:	d001      	beq.n	800c67a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c676:	f003 fc1f 	bl	800feb8 <xPortSysTickHandler>
  }
}
 800c67a:	bf00      	nop
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	e000e010 	.word	0xe000e010

0800c684 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c688:	2100      	movs	r1, #0
 800c68a:	f06f 0004 	mvn.w	r0, #4
 800c68e:	f7ff ffbf 	bl	800c610 <__NVIC_SetPriority>
#endif
}
 800c692:	bf00      	nop
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c69e:	f3ef 8305 	mrs	r3, IPSR
 800c6a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c6a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c6aa:	f06f 0305 	mvn.w	r3, #5
 800c6ae:	607b      	str	r3, [r7, #4]
 800c6b0:	e00c      	b.n	800c6cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6dc <osKernelInitialize+0x44>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d105      	bne.n	800c6c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6ba:	4b08      	ldr	r3, [pc, #32]	@ (800c6dc <osKernelInitialize+0x44>)
 800c6bc:	2201      	movs	r2, #1
 800c6be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	607b      	str	r3, [r7, #4]
 800c6c4:	e002      	b.n	800c6cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6cc:	687b      	ldr	r3, [r7, #4]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	2000db88 	.word	0x2000db88

0800c6e0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c6e6:	f002 fced 	bl	800f0c4 <xTaskGetSchedulerState>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <osKernelGetState+0x1a>
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d105      	bne.n	800c700 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	607b      	str	r3, [r7, #4]
      break;
 800c6f8:	e00c      	b.n	800c714 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	607b      	str	r3, [r7, #4]
      break;
 800c6fe:	e009      	b.n	800c714 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c700:	4b07      	ldr	r3, [pc, #28]	@ (800c720 <osKernelGetState+0x40>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d102      	bne.n	800c70e <osKernelGetState+0x2e>
        state = osKernelReady;
 800c708:	2301      	movs	r3, #1
 800c70a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c70c:	e001      	b.n	800c712 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c70e:	2300      	movs	r3, #0
 800c710:	607b      	str	r3, [r7, #4]
      break;
 800c712:	bf00      	nop
  }

  return (state);
 800c714:	687b      	ldr	r3, [r7, #4]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	2000db88 	.word	0x2000db88

0800c724 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c72a:	f3ef 8305 	mrs	r3, IPSR
 800c72e:	603b      	str	r3, [r7, #0]
  return(result);
 800c730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c736:	f06f 0305 	mvn.w	r3, #5
 800c73a:	607b      	str	r3, [r7, #4]
 800c73c:	e010      	b.n	800c760 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c73e:	4b0b      	ldr	r3, [pc, #44]	@ (800c76c <osKernelStart+0x48>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d109      	bne.n	800c75a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c746:	f7ff ff9d 	bl	800c684 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c74a:	4b08      	ldr	r3, [pc, #32]	@ (800c76c <osKernelStart+0x48>)
 800c74c:	2202      	movs	r2, #2
 800c74e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c750:	f002 f816 	bl	800e780 <vTaskStartScheduler>
      stat = osOK;
 800c754:	2300      	movs	r3, #0
 800c756:	607b      	str	r3, [r7, #4]
 800c758:	e002      	b.n	800c760 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c75a:	f04f 33ff 	mov.w	r3, #4294967295
 800c75e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c760:	687b      	ldr	r3, [r7, #4]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	2000db88 	.word	0x2000db88

0800c770 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c776:	f3ef 8305 	mrs	r3, IPSR
 800c77a:	603b      	str	r3, [r7, #0]
  return(result);
 800c77c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c782:	f002 f92b 	bl	800e9dc <xTaskGetTickCountFromISR>
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	e002      	b.n	800c790 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c78a:	f002 f917 	bl	800e9bc <xTaskGetTickCount>
 800c78e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c790:	687b      	ldr	r3, [r7, #4]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b08e      	sub	sp, #56	@ 0x38
 800c79e:	af04      	add	r7, sp, #16
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7aa:	f3ef 8305 	mrs	r3, IPSR
 800c7ae:	617b      	str	r3, [r7, #20]
  return(result);
 800c7b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d17f      	bne.n	800c8b6 <osThreadNew+0x11c>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d07c      	beq.n	800c8b6 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c7bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c7c2:	2318      	movs	r3, #24
 800c7c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d045      	beq.n	800c862 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <osThreadNew+0x4a>
        name = attr->name;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d008      	beq.n	800c80a <osThreadNew+0x70>
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	2b38      	cmp	r3, #56	@ 0x38
 800c7fc:	d805      	bhi.n	800c80a <osThreadNew+0x70>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <osThreadNew+0x74>
        return (NULL);
 800c80a:	2300      	movs	r3, #0
 800c80c:	e054      	b.n	800c8b8 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	089b      	lsrs	r3, r3, #2
 800c81c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00e      	beq.n	800c844 <osThreadNew+0xaa>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	2bab      	cmp	r3, #171	@ 0xab
 800c82c:	d90a      	bls.n	800c844 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <osThreadNew+0xaa>
        mem = 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	e010      	b.n	800c866 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10c      	bne.n	800c866 <osThreadNew+0xcc>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d108      	bne.n	800c866 <osThreadNew+0xcc>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d104      	bne.n	800c866 <osThreadNew+0xcc>
          mem = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	61bb      	str	r3, [r7, #24]
 800c860:	e001      	b.n	800c866 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d110      	bne.n	800c88e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c874:	9202      	str	r2, [sp, #8]
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	6a3a      	ldr	r2, [r7, #32]
 800c880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f001 fd86 	bl	800e394 <xTaskCreateStatic>
 800c888:	4603      	mov	r3, r0
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	e013      	b.n	800c8b6 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d110      	bne.n	800c8b6 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	b29a      	uxth	r2, r3
 800c898:	f107 0310 	add.w	r3, r7, #16
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f001 fdd4 	bl	800e454 <xTaskCreate>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d001      	beq.n	800c8b6 <osThreadNew+0x11c>
            hTask = NULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c8b6:	693b      	ldr	r3, [r7, #16]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3728      	adds	r7, #40	@ 0x28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c8:	f3ef 8305 	mrs	r3, IPSR
 800c8cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <osDelay+0x1c>
    stat = osErrorISR;
 800c8d4:	f06f 0305 	mvn.w	r3, #5
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e007      	b.n	800c8ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <osDelay+0x2c>
      vTaskDelay(ticks);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f001 ff14 	bl	800e714 <vTaskDelay>
    }
  }

  return (stat);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b088      	sub	sp, #32
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c902:	f3ef 8305 	mrs	r3, IPSR
 800c906:	60bb      	str	r3, [r7, #8]
  return(result);
 800c908:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d174      	bne.n	800c9f8 <osMutexNew+0x102>
    if (attr != NULL) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <osMutexNew+0x26>
      type = attr->attr_bits;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	61bb      	str	r3, [r7, #24]
 800c91a:	e001      	b.n	800c920 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <osMutexNew+0x3a>
      rmtx = 1U;
 800c92a:	2301      	movs	r3, #1
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	e001      	b.n	800c934 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	f003 0308 	and.w	r3, r3, #8
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d15c      	bne.n	800c9f8 <osMutexNew+0x102>
      mem = -1;
 800c93e:	f04f 33ff 	mov.w	r3, #4294967295
 800c942:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d015      	beq.n	800c976 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <osMutexNew+0x6a>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	2b4f      	cmp	r3, #79	@ 0x4f
 800c958:	d902      	bls.n	800c960 <osMutexNew+0x6a>
          mem = 1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	613b      	str	r3, [r7, #16]
 800c95e:	e00c      	b.n	800c97a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d108      	bne.n	800c97a <osMutexNew+0x84>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d104      	bne.n	800c97a <osMutexNew+0x84>
            mem = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	e001      	b.n	800c97a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d112      	bne.n	800c9a6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d007      	beq.n	800c996 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	4619      	mov	r1, r3
 800c98c:	2004      	movs	r0, #4
 800c98e:	f000 fd94 	bl	800d4ba <xQueueCreateMutexStatic>
 800c992:	61f8      	str	r0, [r7, #28]
 800c994:	e016      	b.n	800c9c4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	4619      	mov	r1, r3
 800c99c:	2001      	movs	r0, #1
 800c99e:	f000 fd8c 	bl	800d4ba <xQueueCreateMutexStatic>
 800c9a2:	61f8      	str	r0, [r7, #28]
 800c9a4:	e00e      	b.n	800c9c4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10b      	bne.n	800c9c4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d004      	beq.n	800c9bc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c9b2:	2004      	movs	r0, #4
 800c9b4:	f000 fd69 	bl	800d48a <xQueueCreateMutex>
 800c9b8:	61f8      	str	r0, [r7, #28]
 800c9ba:	e003      	b.n	800c9c4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f000 fd64 	bl	800d48a <xQueueCreateMutex>
 800c9c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00c      	beq.n	800c9e4 <osMutexNew+0xee>
        if (attr != NULL) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d003      	beq.n	800c9d8 <osMutexNew+0xe2>
          name = attr->name;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	e001      	b.n	800c9dc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c9dc:	68f9      	ldr	r1, [r7, #12]
 800c9de:	69f8      	ldr	r0, [r7, #28]
 800c9e0:	f001 fc50 	bl	800e284 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <osMutexNew+0x102>
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	f043 0301 	orr.w	r3, r3, #1
 800c9f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c9f8:	69fb      	ldr	r3, [r7, #28]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3720      	adds	r7, #32
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b086      	sub	sp, #24
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f023 0301 	bic.w	r3, r3, #1
 800ca12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca20:	f3ef 8305 	mrs	r3, IPSR
 800ca24:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ca2c:	f06f 0305 	mvn.w	r3, #5
 800ca30:	617b      	str	r3, [r7, #20]
 800ca32:	e02c      	b.n	800ca8e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d103      	bne.n	800ca42 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ca3a:	f06f 0303 	mvn.w	r3, #3
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	e025      	b.n	800ca8e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d011      	beq.n	800ca6c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6938      	ldr	r0, [r7, #16]
 800ca4c:	f000 fd85 	bl	800d55a <xQueueTakeMutexRecursive>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d01b      	beq.n	800ca8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ca5c:	f06f 0301 	mvn.w	r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
 800ca62:	e014      	b.n	800ca8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca64:	f06f 0302 	mvn.w	r3, #2
 800ca68:	617b      	str	r3, [r7, #20]
 800ca6a:	e010      	b.n	800ca8e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6938      	ldr	r0, [r7, #16]
 800ca70:	f001 f92a 	bl	800dcc8 <xQueueSemaphoreTake>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d009      	beq.n	800ca8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d003      	beq.n	800ca88 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ca80:	f06f 0301 	mvn.w	r3, #1
 800ca84:	617b      	str	r3, [r7, #20]
 800ca86:	e002      	b.n	800ca8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca88:	f06f 0302 	mvn.w	r3, #2
 800ca8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ca8e:	697b      	ldr	r3, [r7, #20]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cab4:	f3ef 8305 	mrs	r3, IPSR
 800cab8:	60bb      	str	r3, [r7, #8]
  return(result);
 800caba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cac0:	f06f 0305 	mvn.w	r3, #5
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	e01f      	b.n	800cb08 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d103      	bne.n	800cad6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cace:	f06f 0303 	mvn.w	r3, #3
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	e018      	b.n	800cb08 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d009      	beq.n	800caf0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cadc:	6938      	ldr	r0, [r7, #16]
 800cade:	f000 fd07 	bl	800d4f0 <xQueueGiveMutexRecursive>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d00f      	beq.n	800cb08 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cae8:	f06f 0302 	mvn.w	r3, #2
 800caec:	617b      	str	r3, [r7, #20]
 800caee:	e00b      	b.n	800cb08 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800caf0:	2300      	movs	r3, #0
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f000 fdd4 	bl	800d6a4 <xQueueGenericSend>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d002      	beq.n	800cb08 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb02:	f06f 0302 	mvn.w	r3, #2
 800cb06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cb08:	697b      	ldr	r3, [r7, #20]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b08a      	sub	sp, #40	@ 0x28
 800cb16:	af02      	add	r7, sp, #8
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb22:	f3ef 8305 	mrs	r3, IPSR
 800cb26:	613b      	str	r3, [r7, #16]
  return(result);
 800cb28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d175      	bne.n	800cc1a <osSemaphoreNew+0x108>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d072      	beq.n	800cc1a <osSemaphoreNew+0x108>
 800cb34:	68ba      	ldr	r2, [r7, #8]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d86e      	bhi.n	800cc1a <osSemaphoreNew+0x108>
    mem = -1;
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d015      	beq.n	800cb74 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d006      	beq.n	800cb5e <osSemaphoreNew+0x4c>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb56:	d902      	bls.n	800cb5e <osSemaphoreNew+0x4c>
        mem = 1;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61bb      	str	r3, [r7, #24]
 800cb5c:	e00c      	b.n	800cb78 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d108      	bne.n	800cb78 <osSemaphoreNew+0x66>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d104      	bne.n	800cb78 <osSemaphoreNew+0x66>
          mem = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	61bb      	str	r3, [r7, #24]
 800cb72:	e001      	b.n	800cb78 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7e:	d04c      	beq.n	800cc1a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d128      	bne.n	800cbd8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d10a      	bne.n	800cba2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	2203      	movs	r2, #3
 800cb92:	9200      	str	r2, [sp, #0]
 800cb94:	2200      	movs	r2, #0
 800cb96:	2100      	movs	r1, #0
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f000 fb81 	bl	800d2a0 <xQueueGenericCreateStatic>
 800cb9e:	61f8      	str	r0, [r7, #28]
 800cba0:	e005      	b.n	800cbae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cba2:	2203      	movs	r2, #3
 800cba4:	2100      	movs	r1, #0
 800cba6:	2001      	movs	r0, #1
 800cba8:	f000 fbf7 	bl	800d39a <xQueueGenericCreate>
 800cbac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d022      	beq.n	800cbfa <osSemaphoreNew+0xe8>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d01f      	beq.n	800cbfa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	69f8      	ldr	r0, [r7, #28]
 800cbc2:	f000 fd6f 	bl	800d6a4 <xQueueGenericSend>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d016      	beq.n	800cbfa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cbcc:	69f8      	ldr	r0, [r7, #28]
 800cbce:	f001 fa0d 	bl	800dfec <vQueueDelete>
            hSemaphore = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	61fb      	str	r3, [r7, #28]
 800cbd6:	e010      	b.n	800cbfa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d108      	bne.n	800cbf0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	68b9      	ldr	r1, [r7, #8]
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 fcee 	bl	800d5c8 <xQueueCreateCountingSemaphoreStatic>
 800cbec:	61f8      	str	r0, [r7, #28]
 800cbee:	e004      	b.n	800cbfa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 fd21 	bl	800d63a <xQueueCreateCountingSemaphore>
 800cbf8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00c      	beq.n	800cc1a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <osSemaphoreNew+0xfc>
          name = attr->name;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e001      	b.n	800cc12 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cc12:	6979      	ldr	r1, [r7, #20]
 800cc14:	69f8      	ldr	r0, [r7, #28]
 800cc16:	f001 fb35 	bl	800e284 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cc1a:	69fb      	ldr	r3, [r7, #28]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cc3c:	f06f 0303 	mvn.w	r3, #3
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	e039      	b.n	800ccb8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc44:	f3ef 8305 	mrs	r3, IPSR
 800cc48:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d022      	beq.n	800cc96 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cc56:	f06f 0303 	mvn.w	r3, #3
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	e02c      	b.n	800ccb8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cc62:	f107 0308 	add.w	r3, r7, #8
 800cc66:	461a      	mov	r2, r3
 800cc68:	2100      	movs	r1, #0
 800cc6a:	6938      	ldr	r0, [r7, #16]
 800cc6c:	f001 f93c 	bl	800dee8 <xQueueReceiveFromISR>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d003      	beq.n	800cc7e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cc76:	f06f 0302 	mvn.w	r3, #2
 800cc7a:	617b      	str	r3, [r7, #20]
 800cc7c:	e01c      	b.n	800ccb8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d019      	beq.n	800ccb8 <osSemaphoreAcquire+0x94>
 800cc84:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc4 <osSemaphoreAcquire+0xa0>)
 800cc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	e010      	b.n	800ccb8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6938      	ldr	r0, [r7, #16]
 800cc9a:	f001 f815 	bl	800dcc8 <xQueueSemaphoreTake>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d009      	beq.n	800ccb8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ccaa:	f06f 0301 	mvn.w	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	e002      	b.n	800ccb8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ccb2:	f06f 0302 	mvn.w	r3, #2
 800ccb6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ccb8:	697b      	ldr	r3, [r7, #20]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	e000ed04 	.word	0xe000ed04

0800ccc8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d103      	bne.n	800cce6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ccde:	f06f 0303 	mvn.w	r3, #3
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	e02c      	b.n	800cd40 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce6:	f3ef 8305 	mrs	r3, IPSR
 800ccea:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01a      	beq.n	800cd28 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ccf6:	f107 0308 	add.w	r3, r7, #8
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6938      	ldr	r0, [r7, #16]
 800ccfe:	f000 fe71 	bl	800d9e4 <xQueueGiveFromISR>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d003      	beq.n	800cd10 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cd08:	f06f 0302 	mvn.w	r3, #2
 800cd0c:	617b      	str	r3, [r7, #20]
 800cd0e:	e017      	b.n	800cd40 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d014      	beq.n	800cd40 <osSemaphoreRelease+0x78>
 800cd16:	4b0d      	ldr	r3, [pc, #52]	@ (800cd4c <osSemaphoreRelease+0x84>)
 800cd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	e00b      	b.n	800cd40 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cd28:	2300      	movs	r3, #0
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	6938      	ldr	r0, [r7, #16]
 800cd30:	f000 fcb8 	bl	800d6a4 <xQueueGenericSend>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d002      	beq.n	800cd40 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cd3a:	f06f 0302 	mvn.w	r3, #2
 800cd3e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cd40:	697b      	ldr	r3, [r7, #20]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd5c:	f3ef 8305 	mrs	r3, IPSR
 800cd60:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd62:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800cd68:	f06f 0305 	mvn.w	r3, #5
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e00e      	b.n	800cd8e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d103      	bne.n	800cd7e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800cd76:	f06f 0303 	mvn.w	r3, #3
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e007      	b.n	800cd8e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800cd7e:	6938      	ldr	r0, [r7, #16]
 800cd80:	f001 faaa 	bl	800e2d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800cd88:	6938      	ldr	r0, [r7, #16]
 800cd8a:	f001 f92f 	bl	800dfec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cd8e:	697b      	ldr	r3, [r7, #20]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	@ 0x28
 800cd9c:	af02      	add	r7, sp, #8
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cda4:	2300      	movs	r3, #0
 800cda6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cda8:	f3ef 8305 	mrs	r3, IPSR
 800cdac:	613b      	str	r3, [r7, #16]
  return(result);
 800cdae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d15f      	bne.n	800ce74 <osMessageQueueNew+0xdc>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d05c      	beq.n	800ce74 <osMessageQueueNew+0xdc>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d059      	beq.n	800ce74 <osMessageQueueNew+0xdc>
    mem = -1;
 800cdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d029      	beq.n	800ce20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d012      	beq.n	800cdfa <osMessageQueueNew+0x62>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdda:	d90e      	bls.n	800cdfa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00a      	beq.n	800cdfa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695a      	ldr	r2, [r3, #20]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	fb01 f303 	mul.w	r3, r1, r3
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d302      	bcc.n	800cdfa <osMessageQueueNew+0x62>
        mem = 1;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	61bb      	str	r3, [r7, #24]
 800cdf8:	e014      	b.n	800ce24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d110      	bne.n	800ce24 <osMessageQueueNew+0x8c>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10c      	bne.n	800ce24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d108      	bne.n	800ce24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d104      	bne.n	800ce24 <osMessageQueueNew+0x8c>
          mem = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	61bb      	str	r3, [r7, #24]
 800ce1e:	e001      	b.n	800ce24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d10b      	bne.n	800ce42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	691a      	ldr	r2, [r3, #16]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	2100      	movs	r1, #0
 800ce34:	9100      	str	r1, [sp, #0]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 fa31 	bl	800d2a0 <xQueueGenericCreateStatic>
 800ce3e:	61f8      	str	r0, [r7, #28]
 800ce40:	e008      	b.n	800ce54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d105      	bne.n	800ce54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce48:	2200      	movs	r2, #0
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 faa4 	bl	800d39a <xQueueGenericCreate>
 800ce52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00c      	beq.n	800ce74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	e001      	b.n	800ce6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce6c:	6979      	ldr	r1, [r7, #20]
 800ce6e:	69f8      	ldr	r0, [r7, #28]
 800ce70:	f001 fa08 	bl	800e284 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce74:	69fb      	ldr	r3, [r7, #28]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3720      	adds	r7, #32
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce98:	f3ef 8305 	mrs	r3, IPSR
 800ce9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ce9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d028      	beq.n	800cef6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <osMessageQueuePut+0x36>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <osMessageQueuePut+0x36>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ceb6:	f06f 0303 	mvn.w	r3, #3
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e038      	b.n	800cf30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cec2:	f107 0210 	add.w	r2, r7, #16
 800cec6:	2300      	movs	r3, #0
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	69b8      	ldr	r0, [r7, #24]
 800cecc:	f000 fcec 	bl	800d8a8 <xQueueGenericSendFromISR>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d003      	beq.n	800cede <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ced6:	f06f 0302 	mvn.w	r3, #2
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	e028      	b.n	800cf30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d025      	beq.n	800cf30 <osMessageQueuePut+0xb0>
 800cee4:	4b15      	ldr	r3, [pc, #84]	@ (800cf3c <osMessageQueuePut+0xbc>)
 800cee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	e01c      	b.n	800cf30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <osMessageQueuePut+0x82>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d103      	bne.n	800cf0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cf02:	f06f 0303 	mvn.w	r3, #3
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	e012      	b.n	800cf30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	68b9      	ldr	r1, [r7, #8]
 800cf10:	69b8      	ldr	r0, [r7, #24]
 800cf12:	f000 fbc7 	bl	800d6a4 <xQueueGenericSend>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d009      	beq.n	800cf30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cf22:	f06f 0301 	mvn.w	r3, #1
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	e002      	b.n	800cf30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cf2a:	f06f 0302 	mvn.w	r3, #2
 800cf2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf30:	69fb      	ldr	r3, [r7, #28]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3720      	adds	r7, #32
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	e000ed04 	.word	0xe000ed04

0800cf40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf56:	f3ef 8305 	mrs	r3, IPSR
 800cf5a:	617b      	str	r3, [r7, #20]
  return(result);
 800cf5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d028      	beq.n	800cfb4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <osMessageQueueGet+0x34>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <osMessageQueueGet+0x34>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf74:	f06f 0303 	mvn.w	r3, #3
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e037      	b.n	800cfec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf80:	f107 0310 	add.w	r3, r7, #16
 800cf84:	461a      	mov	r2, r3
 800cf86:	68b9      	ldr	r1, [r7, #8]
 800cf88:	69b8      	ldr	r0, [r7, #24]
 800cf8a:	f000 ffad 	bl	800dee8 <xQueueReceiveFromISR>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d003      	beq.n	800cf9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf94:	f06f 0302 	mvn.w	r3, #2
 800cf98:	61fb      	str	r3, [r7, #28]
 800cf9a:	e027      	b.n	800cfec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d024      	beq.n	800cfec <osMessageQueueGet+0xac>
 800cfa2:	4b15      	ldr	r3, [pc, #84]	@ (800cff8 <osMessageQueueGet+0xb8>)
 800cfa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	e01b      	b.n	800cfec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <osMessageQueueGet+0x80>
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d103      	bne.n	800cfc8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cfc0:	f06f 0303 	mvn.w	r3, #3
 800cfc4:	61fb      	str	r3, [r7, #28]
 800cfc6:	e011      	b.n	800cfec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	69b8      	ldr	r0, [r7, #24]
 800cfce:	f000 fd99 	bl	800db04 <xQueueReceive>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d009      	beq.n	800cfec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d003      	beq.n	800cfe6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfde:	f06f 0301 	mvn.w	r3, #1
 800cfe2:	61fb      	str	r3, [r7, #28]
 800cfe4:	e002      	b.n	800cfec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfe6:	f06f 0302 	mvn.w	r3, #2
 800cfea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfec:	69fb      	ldr	r3, [r7, #28]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4a07      	ldr	r2, [pc, #28]	@ (800d028 <vApplicationGetIdleTaskMemory+0x2c>)
 800d00c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	4a06      	ldr	r2, [pc, #24]	@ (800d02c <vApplicationGetIdleTaskMemory+0x30>)
 800d012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d01a:	601a      	str	r2, [r3, #0]
}
 800d01c:	bf00      	nop
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	2000db8c 	.word	0x2000db8c
 800d02c:	2000dc38 	.word	0x2000dc38

0800d030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4a07      	ldr	r2, [pc, #28]	@ (800d05c <vApplicationGetTimerTaskMemory+0x2c>)
 800d040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	4a06      	ldr	r2, [pc, #24]	@ (800d060 <vApplicationGetTimerTaskMemory+0x30>)
 800d046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d04e:	601a      	str	r2, [r3, #0]
}
 800d050:	bf00      	nop
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	2000e438 	.word	0x2000e438
 800d060:	2000e4e4 	.word	0x2000e4e4

0800d064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f103 0208 	add.w	r2, r3, #8
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f04f 32ff 	mov.w	r2, #4294967295
 800d07c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f103 0208 	add.w	r2, r3, #8
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f103 0208 	add.w	r2, r3, #8
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	601a      	str	r2, [r3, #0]
}
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d106:	b480      	push	{r7}
 800d108:	b085      	sub	sp, #20
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11c:	d103      	bne.n	800d126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	e00c      	b.n	800d140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3308      	adds	r3, #8
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	e002      	b.n	800d134 <vListInsert+0x2e>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d2f6      	bcs.n	800d12e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	601a      	str	r2, [r3, #0]
}
 800d16c:	bf00      	nop
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6892      	ldr	r2, [r2, #8]
 800d18e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	6852      	ldr	r2, [r2, #4]
 800d198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d103      	bne.n	800d1ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	689a      	ldr	r2, [r3, #8]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	1e5a      	subs	r2, r3, #1
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10b      	bne.n	800d1f8 <xQueueGenericReset+0x2c>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	60bb      	str	r3, [r7, #8]
}
 800d1f2:	bf00      	nop
 800d1f4:	bf00      	nop
 800d1f6:	e7fd      	b.n	800d1f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d1f8:	f002 fdce 	bl	800fd98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d204:	68f9      	ldr	r1, [r7, #12]
 800d206:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d208:	fb01 f303 	mul.w	r3, r1, r3
 800d20c:	441a      	add	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d228:	3b01      	subs	r3, #1
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d22e:	fb01 f303 	mul.w	r3, r1, r3
 800d232:	441a      	add	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	22ff      	movs	r2, #255	@ 0xff
 800d23c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	22ff      	movs	r2, #255	@ 0xff
 800d244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d114      	bne.n	800d278 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01a      	beq.n	800d28c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	3310      	adds	r3, #16
 800d25a:	4618      	mov	r0, r3
 800d25c:	f001 fd5c 	bl	800ed18 <xTaskRemoveFromEventList>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d012      	beq.n	800d28c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d266:	4b0d      	ldr	r3, [pc, #52]	@ (800d29c <xQueueGenericReset+0xd0>)
 800d268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	e009      	b.n	800d28c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3310      	adds	r3, #16
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fef1 	bl	800d064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3324      	adds	r3, #36	@ 0x24
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff feec 	bl	800d064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d28c:	f002 fdb6 	bl	800fdfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d290:	2301      	movs	r3, #1
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	e000ed04 	.word	0xe000ed04

0800d2a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08e      	sub	sp, #56	@ 0x38
 800d2a4:	af02      	add	r7, sp, #8
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10b      	bne.n	800d2cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2c6:	bf00      	nop
 800d2c8:	bf00      	nop
 800d2ca:	e7fd      	b.n	800d2c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <xQueueGenericCreateStatic+0x56>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <xQueueGenericCreateStatic+0x5a>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e000      	b.n	800d2fc <xQueueGenericCreateStatic+0x5c>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10b      	bne.n	800d318 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	623b      	str	r3, [r7, #32]
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	e7fd      	b.n	800d314 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <xQueueGenericCreateStatic+0x84>
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <xQueueGenericCreateStatic+0x88>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <xQueueGenericCreateStatic+0x8a>
 800d328:	2300      	movs	r3, #0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10b      	bne.n	800d346 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	61fb      	str	r3, [r7, #28]
}
 800d340:	bf00      	nop
 800d342:	bf00      	nop
 800d344:	e7fd      	b.n	800d342 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d346:	2350      	movs	r3, #80	@ 0x50
 800d348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b50      	cmp	r3, #80	@ 0x50
 800d34e:	d00b      	beq.n	800d368 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	61bb      	str	r3, [r7, #24]
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	e7fd      	b.n	800d364 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d368:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00d      	beq.n	800d390 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d37c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	4613      	mov	r3, r2
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f840 	bl	800d410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d392:	4618      	mov	r0, r3
 800d394:	3730      	adds	r7, #48	@ 0x30
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b08a      	sub	sp, #40	@ 0x28
 800d39e:	af02      	add	r7, sp, #8
 800d3a0:	60f8      	str	r0, [r7, #12]
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10b      	bne.n	800d3c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	613b      	str	r3, [r7, #16]
}
 800d3c0:	bf00      	nop
 800d3c2:	bf00      	nop
 800d3c4:	e7fd      	b.n	800d3c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	fb02 f303 	mul.w	r3, r2, r3
 800d3ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	3350      	adds	r3, #80	@ 0x50
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f002 fe01 	bl	800ffdc <pvPortMalloc>
 800d3da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d011      	beq.n	800d406 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	3350      	adds	r3, #80	@ 0x50
 800d3ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3f4:	79fa      	ldrb	r2, [r7, #7]
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	697a      	ldr	r2, [r7, #20]
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 f805 	bl	800d410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d406:	69bb      	ldr	r3, [r7, #24]
	}
 800d408:	4618      	mov	r0, r3
 800d40a:	3720      	adds	r7, #32
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
 800d41c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d103      	bne.n	800d42c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	69ba      	ldr	r2, [r7, #24]
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	e002      	b.n	800d432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d43e:	2101      	movs	r1, #1
 800d440:	69b8      	ldr	r0, [r7, #24]
 800d442:	f7ff fec3 	bl	800d1cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	78fa      	ldrb	r2, [r7, #3]
 800d44a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d476:	2300      	movs	r3, #0
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f911 	bl	800d6a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d482:	bf00      	nop
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b086      	sub	sp, #24
 800d48e:	af00      	add	r7, sp, #0
 800d490:	4603      	mov	r3, r0
 800d492:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d494:	2301      	movs	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	2300      	movs	r3, #0
 800d49a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	6939      	ldr	r1, [r7, #16]
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f7ff ff79 	bl	800d39a <xQueueGenericCreate>
 800d4a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f7ff ffd3 	bl	800d456 <prvInitialiseMutex>

		return xNewQueue;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
	}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b088      	sub	sp, #32
 800d4be:	af02      	add	r7, sp, #8
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	6039      	str	r1, [r7, #0]
 800d4c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	6939      	ldr	r1, [r7, #16]
 800d4d8:	6978      	ldr	r0, [r7, #20]
 800d4da:	f7ff fee1 	bl	800d2a0 <xQueueGenericCreateStatic>
 800d4de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7ff ffb8 	bl	800d456 <prvInitialiseMutex>

		return xNewQueue;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
	}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60fb      	str	r3, [r7, #12]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	689c      	ldr	r4, [r3, #8]
 800d51e:	f001 fdc1 	bl	800f0a4 <xTaskGetCurrentTaskHandle>
 800d522:	4603      	mov	r3, r0
 800d524:	429c      	cmp	r4, r3
 800d526:	d111      	bne.n	800d54c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	1e5a      	subs	r2, r3, #1
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d105      	bne.n	800d546 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d53a:	2300      	movs	r3, #0
 800d53c:	2200      	movs	r2, #0
 800d53e:	2100      	movs	r1, #0
 800d540:	6938      	ldr	r0, [r7, #16]
 800d542:	f000 f8af 	bl	800d6a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d546:	2301      	movs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
 800d54a:	e001      	b.n	800d550 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d550:	697b      	ldr	r3, [r7, #20]
	}
 800d552:	4618      	mov	r0, r3
 800d554:	371c      	adds	r7, #28
 800d556:	46bd      	mov	sp, r7
 800d558:	bd90      	pop	{r4, r7, pc}

0800d55a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d55a:	b590      	push	{r4, r7, lr}
 800d55c:	b087      	sub	sp, #28
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10b      	bne.n	800d586 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	60fb      	str	r3, [r7, #12]
}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	e7fd      	b.n	800d582 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	689c      	ldr	r4, [r3, #8]
 800d58a:	f001 fd8b 	bl	800f0a4 <xTaskGetCurrentTaskHandle>
 800d58e:	4603      	mov	r3, r0
 800d590:	429c      	cmp	r4, r3
 800d592:	d107      	bne.n	800d5a4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
 800d5a2:	e00c      	b.n	800d5be <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6938      	ldr	r0, [r7, #16]
 800d5a8:	f000 fb8e 	bl	800dcc8 <xQueueSemaphoreTake>
 800d5ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d004      	beq.n	800d5be <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d5be:	697b      	ldr	r3, [r7, #20]
	}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd90      	pop	{r4, r7, pc}

0800d5c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08a      	sub	sp, #40	@ 0x28
 800d5cc:	af02      	add	r7, sp, #8
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10b      	bne.n	800d5f2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	61bb      	str	r3, [r7, #24]
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	e7fd      	b.n	800d5ee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d90b      	bls.n	800d612 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	617b      	str	r3, [r7, #20]
}
 800d60c:	bf00      	nop
 800d60e:	bf00      	nop
 800d610:	e7fd      	b.n	800d60e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d612:	2302      	movs	r3, #2
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	2100      	movs	r1, #0
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f7ff fe3f 	bl	800d2a0 <xQueueGenericCreateStatic>
 800d622:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d630:	69fb      	ldr	r3, [r7, #28]
	}
 800d632:	4618      	mov	r0, r3
 800d634:	3720      	adds	r7, #32
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b086      	sub	sp, #24
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10b      	bne.n	800d662 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	613b      	str	r3, [r7, #16]
}
 800d65c:	bf00      	nop
 800d65e:	bf00      	nop
 800d660:	e7fd      	b.n	800d65e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	429a      	cmp	r2, r3
 800d668:	d90b      	bls.n	800d682 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	60fb      	str	r3, [r7, #12]
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	e7fd      	b.n	800d67e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d682:	2202      	movs	r2, #2
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff fe87 	bl	800d39a <xQueueGenericCreate>
 800d68c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d69a:	697b      	ldr	r3, [r7, #20]
	}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08e      	sub	sp, #56	@ 0x38
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
 800d6b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10b      	bne.n	800d6d8 <xQueueGenericSend+0x34>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	e7fd      	b.n	800d6d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <xQueueGenericSend+0x42>
 800d6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <xQueueGenericSend+0x46>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e000      	b.n	800d6ec <xQueueGenericSend+0x48>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10b      	bne.n	800d708 <xQueueGenericSend+0x64>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d702:	bf00      	nop
 800d704:	bf00      	nop
 800d706:	e7fd      	b.n	800d704 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d103      	bne.n	800d716 <xQueueGenericSend+0x72>
 800d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d712:	2b01      	cmp	r3, #1
 800d714:	d101      	bne.n	800d71a <xQueueGenericSend+0x76>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <xQueueGenericSend+0x78>
 800d71a:	2300      	movs	r3, #0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10b      	bne.n	800d738 <xQueueGenericSend+0x94>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	623b      	str	r3, [r7, #32]
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d738:	f001 fcc4 	bl	800f0c4 <xTaskGetSchedulerState>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d102      	bne.n	800d748 <xQueueGenericSend+0xa4>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <xQueueGenericSend+0xa8>
 800d748:	2301      	movs	r3, #1
 800d74a:	e000      	b.n	800d74e <xQueueGenericSend+0xaa>
 800d74c:	2300      	movs	r3, #0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10b      	bne.n	800d76a <xQueueGenericSend+0xc6>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	61fb      	str	r3, [r7, #28]
}
 800d764:	bf00      	nop
 800d766:	bf00      	nop
 800d768:	e7fd      	b.n	800d766 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d76a:	f002 fb15 	bl	800fd98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d776:	429a      	cmp	r2, r3
 800d778:	d302      	bcc.n	800d780 <xQueueGenericSend+0xdc>
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d129      	bne.n	800d7d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d786:	f000 fc6d 	bl	800e064 <prvCopyDataToQueue>
 800d78a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d790:	2b00      	cmp	r3, #0
 800d792:	d010      	beq.n	800d7b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d796:	3324      	adds	r3, #36	@ 0x24
 800d798:	4618      	mov	r0, r3
 800d79a:	f001 fabd 	bl	800ed18 <xTaskRemoveFromEventList>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d013      	beq.n	800d7cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7a4:	4b3f      	ldr	r3, [pc, #252]	@ (800d8a4 <xQueueGenericSend+0x200>)
 800d7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	e00a      	b.n	800d7cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d007      	beq.n	800d7cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7bc:	4b39      	ldr	r3, [pc, #228]	@ (800d8a4 <xQueueGenericSend+0x200>)
 800d7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7cc:	f002 fb16 	bl	800fdfc <vPortExitCritical>
				return pdPASS;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e063      	b.n	800d89c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d103      	bne.n	800d7e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7da:	f002 fb0f 	bl	800fdfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e05c      	b.n	800d89c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d106      	bne.n	800d7f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7e8:	f107 0314 	add.w	r3, r7, #20
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f001 faf7 	bl	800ede0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7f6:	f002 fb01 	bl	800fdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7fa:	f001 f833 	bl	800e864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7fe:	f002 facb 	bl	800fd98 <vPortEnterCritical>
 800d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d808:	b25b      	sxtb	r3, r3
 800d80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80e:	d103      	bne.n	800d818 <xQueueGenericSend+0x174>
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	2200      	movs	r2, #0
 800d814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d81e:	b25b      	sxtb	r3, r3
 800d820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d824:	d103      	bne.n	800d82e <xQueueGenericSend+0x18a>
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d82e:	f002 fae5 	bl	800fdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d832:	1d3a      	adds	r2, r7, #4
 800d834:	f107 0314 	add.w	r3, r7, #20
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 fae6 	bl	800ee0c <xTaskCheckForTimeOut>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d124      	bne.n	800d890 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d846:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d848:	f000 fd04 	bl	800e254 <prvIsQueueFull>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d018      	beq.n	800d884 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	3310      	adds	r3, #16
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 fa0a 	bl	800ec74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d862:	f000 fc8f 	bl	800e184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d866:	f001 f80b 	bl	800e880 <xTaskResumeAll>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f47f af7c 	bne.w	800d76a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d872:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a4 <xQueueGenericSend+0x200>)
 800d874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	e772      	b.n	800d76a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d886:	f000 fc7d 	bl	800e184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d88a:	f000 fff9 	bl	800e880 <xTaskResumeAll>
 800d88e:	e76c      	b.n	800d76a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d892:	f000 fc77 	bl	800e184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d896:	f000 fff3 	bl	800e880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d89a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3738      	adds	r7, #56	@ 0x38
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	e000ed04 	.word	0xe000ed04

0800d8a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b090      	sub	sp, #64	@ 0x40
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
 800d8b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10b      	bne.n	800d8d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8d2:	bf00      	nop
 800d8d4:	bf00      	nop
 800d8d6:	e7fd      	b.n	800d8d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d103      	bne.n	800d8e6 <xQueueGenericSendFromISR+0x3e>
 800d8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <xQueueGenericSendFromISR+0x42>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e000      	b.n	800d8ec <xQueueGenericSendFromISR+0x44>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10b      	bne.n	800d908 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d902:	bf00      	nop
 800d904:	bf00      	nop
 800d906:	e7fd      	b.n	800d904 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d103      	bne.n	800d916 <xQueueGenericSendFromISR+0x6e>
 800d90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d912:	2b01      	cmp	r3, #1
 800d914:	d101      	bne.n	800d91a <xQueueGenericSendFromISR+0x72>
 800d916:	2301      	movs	r3, #1
 800d918:	e000      	b.n	800d91c <xQueueGenericSendFromISR+0x74>
 800d91a:	2300      	movs	r3, #0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10b      	bne.n	800d938 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	623b      	str	r3, [r7, #32]
}
 800d932:	bf00      	nop
 800d934:	bf00      	nop
 800d936:	e7fd      	b.n	800d934 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d938:	f002 fb0e 	bl	800ff58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d93c:	f3ef 8211 	mrs	r2, BASEPRI
 800d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	61fa      	str	r2, [r7, #28]
 800d952:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d954:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d956:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d960:	429a      	cmp	r2, r3
 800d962:	d302      	bcc.n	800d96a <xQueueGenericSendFromISR+0xc2>
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b02      	cmp	r3, #2
 800d968:	d12f      	bne.n	800d9ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d970:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d978:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d980:	f000 fb70 	bl	800e064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d984:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98c:	d112      	bne.n	800d9b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d992:	2b00      	cmp	r3, #0
 800d994:	d016      	beq.n	800d9c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	3324      	adds	r3, #36	@ 0x24
 800d99a:	4618      	mov	r0, r3
 800d99c:	f001 f9bc 	bl	800ed18 <xTaskRemoveFromEventList>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00e      	beq.n	800d9c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	e007      	b.n	800d9c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	b25a      	sxtb	r2, r3
 800d9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d9c8:	e001      	b.n	800d9ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d9d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3740      	adds	r7, #64	@ 0x40
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08e      	sub	sp, #56	@ 0x38
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10b      	bne.n	800da10 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	623b      	str	r3, [r7, #32]
}
 800da0a:	bf00      	nop
 800da0c:	bf00      	nop
 800da0e:	e7fd      	b.n	800da0c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	61fb      	str	r3, [r7, #28]
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	e7fd      	b.n	800da2c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d103      	bne.n	800da40 <xQueueGiveFromISR+0x5c>
 800da38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <xQueueGiveFromISR+0x60>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <xQueueGiveFromISR+0x62>
 800da44:	2300      	movs	r3, #0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	61bb      	str	r3, [r7, #24]
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da62:	f002 fa79 	bl	800ff58 <vPortValidateInterruptPriority>
	__asm volatile
 800da66:	f3ef 8211 	mrs	r2, BASEPRI
 800da6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	617a      	str	r2, [r7, #20]
 800da7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800da7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da8e:	429a      	cmp	r2, r3
 800da90:	d22b      	bcs.n	800daea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800daa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800daa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daac:	d112      	bne.n	800dad4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d016      	beq.n	800dae4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab8:	3324      	adds	r3, #36	@ 0x24
 800daba:	4618      	mov	r0, r3
 800dabc:	f001 f92c 	bl	800ed18 <xTaskRemoveFromEventList>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00e      	beq.n	800dae4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2201      	movs	r2, #1
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	e007      	b.n	800dae4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dad8:	3301      	adds	r3, #1
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	b25a      	sxtb	r2, r3
 800dade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dae4:	2301      	movs	r3, #1
 800dae6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae8:	e001      	b.n	800daee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800daea:	2300      	movs	r3, #0
 800daec:	637b      	str	r3, [r7, #52]	@ 0x34
 800daee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f383 8811 	msr	BASEPRI, r3
}
 800daf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3738      	adds	r7, #56	@ 0x38
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b08c      	sub	sp, #48	@ 0x30
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db10:	2300      	movs	r3, #0
 800db12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10b      	bne.n	800db36 <xQueueReceive+0x32>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	623b      	str	r3, [r7, #32]
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	e7fd      	b.n	800db32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d103      	bne.n	800db44 <xQueueReceive+0x40>
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <xQueueReceive+0x44>
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <xQueueReceive+0x46>
 800db48:	2300      	movs	r3, #0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <xQueueReceive+0x62>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	61fb      	str	r3, [r7, #28]
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db66:	f001 faad 	bl	800f0c4 <xTaskGetSchedulerState>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <xQueueReceive+0x72>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <xQueueReceive+0x76>
 800db76:	2301      	movs	r3, #1
 800db78:	e000      	b.n	800db7c <xQueueReceive+0x78>
 800db7a:	2300      	movs	r3, #0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10b      	bne.n	800db98 <xQueueReceive+0x94>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	61bb      	str	r3, [r7, #24]
}
 800db92:	bf00      	nop
 800db94:	bf00      	nop
 800db96:	e7fd      	b.n	800db94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db98:	f002 f8fe 	bl	800fd98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d01f      	beq.n	800dbe8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbac:	f000 fac4 	bl	800e138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	1e5a      	subs	r2, r3, #1
 800dbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00f      	beq.n	800dbe0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc2:	3310      	adds	r3, #16
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f001 f8a7 	bl	800ed18 <xTaskRemoveFromEventList>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d007      	beq.n	800dbe0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbd0:	4b3c      	ldr	r3, [pc, #240]	@ (800dcc4 <xQueueReceive+0x1c0>)
 800dbd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbe0:	f002 f90c 	bl	800fdfc <vPortExitCritical>
				return pdPASS;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e069      	b.n	800dcbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d103      	bne.n	800dbf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbee:	f002 f905 	bl	800fdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e062      	b.n	800dcbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbfc:	f107 0310 	add.w	r3, r7, #16
 800dc00:	4618      	mov	r0, r3
 800dc02:	f001 f8ed 	bl	800ede0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc06:	2301      	movs	r3, #1
 800dc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc0a:	f002 f8f7 	bl	800fdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc0e:	f000 fe29 	bl	800e864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc12:	f002 f8c1 	bl	800fd98 <vPortEnterCritical>
 800dc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc1c:	b25b      	sxtb	r3, r3
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d103      	bne.n	800dc2c <xQueueReceive+0x128>
 800dc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc26:	2200      	movs	r2, #0
 800dc28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc32:	b25b      	sxtb	r3, r3
 800dc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc38:	d103      	bne.n	800dc42 <xQueueReceive+0x13e>
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc42:	f002 f8db 	bl	800fdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc46:	1d3a      	adds	r2, r7, #4
 800dc48:	f107 0310 	add.w	r3, r7, #16
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f001 f8dc 	bl	800ee0c <xTaskCheckForTimeOut>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d123      	bne.n	800dca2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc5c:	f000 fae4 	bl	800e228 <prvIsQueueEmpty>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d017      	beq.n	800dc96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc68:	3324      	adds	r3, #36	@ 0x24
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f001 f800 	bl	800ec74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc76:	f000 fa85 	bl	800e184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc7a:	f000 fe01 	bl	800e880 <xTaskResumeAll>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d189      	bne.n	800db98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dc84:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc4 <xQueueReceive+0x1c0>)
 800dc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	e780      	b.n	800db98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc98:	f000 fa74 	bl	800e184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc9c:	f000 fdf0 	bl	800e880 <xTaskResumeAll>
 800dca0:	e77a      	b.n	800db98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dca4:	f000 fa6e 	bl	800e184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dca8:	f000 fdea 	bl	800e880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcae:	f000 fabb 	bl	800e228 <prvIsQueueEmpty>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f43f af6f 	beq.w	800db98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3730      	adds	r7, #48	@ 0x30
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08e      	sub	sp, #56	@ 0x38
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10b      	bne.n	800dcfc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	623b      	str	r3, [r7, #32]
}
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	e7fd      	b.n	800dcf8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00b      	beq.n	800dd1c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	61fb      	str	r3, [r7, #28]
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd1c:	f001 f9d2 	bl	800f0c4 <xTaskGetSchedulerState>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d102      	bne.n	800dd2c <xQueueSemaphoreTake+0x64>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d101      	bne.n	800dd30 <xQueueSemaphoreTake+0x68>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <xQueueSemaphoreTake+0x6a>
 800dd30:	2300      	movs	r3, #0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10b      	bne.n	800dd4e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	61bb      	str	r3, [r7, #24]
}
 800dd48:	bf00      	nop
 800dd4a:	bf00      	nop
 800dd4c:	e7fd      	b.n	800dd4a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd4e:	f002 f823 	bl	800fd98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d024      	beq.n	800dda8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd60:	1e5a      	subs	r2, r3, #1
 800dd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d104      	bne.n	800dd78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd6e:	f001 fb23 	bl	800f3b8 <pvTaskIncrementMutexHeldCount>
 800dd72:	4602      	mov	r2, r0
 800dd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00f      	beq.n	800dda0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd82:	3310      	adds	r3, #16
 800dd84:	4618      	mov	r0, r3
 800dd86:	f000 ffc7 	bl	800ed18 <xTaskRemoveFromEventList>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d007      	beq.n	800dda0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd90:	4b54      	ldr	r3, [pc, #336]	@ (800dee4 <xQueueSemaphoreTake+0x21c>)
 800dd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dda0:	f002 f82c 	bl	800fdfc <vPortExitCritical>
				return pdPASS;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e098      	b.n	800deda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d112      	bne.n	800ddd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00b      	beq.n	800ddcc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	617b      	str	r3, [r7, #20]
}
 800ddc6:	bf00      	nop
 800ddc8:	bf00      	nop
 800ddca:	e7fd      	b.n	800ddc8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ddcc:	f002 f816 	bl	800fdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	e082      	b.n	800deda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 fffe 	bl	800ede0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dde4:	2301      	movs	r3, #1
 800dde6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dde8:	f002 f808 	bl	800fdfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddec:	f000 fd3a 	bl	800e864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddf0:	f001 ffd2 	bl	800fd98 <vPortEnterCritical>
 800ddf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddfa:	b25b      	sxtb	r3, r3
 800ddfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de00:	d103      	bne.n	800de0a <xQueueSemaphoreTake+0x142>
 800de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de10:	b25b      	sxtb	r3, r3
 800de12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de16:	d103      	bne.n	800de20 <xQueueSemaphoreTake+0x158>
 800de18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de20:	f001 ffec 	bl	800fdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de24:	463a      	mov	r2, r7
 800de26:	f107 030c 	add.w	r3, r7, #12
 800de2a:	4611      	mov	r1, r2
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 ffed 	bl	800ee0c <xTaskCheckForTimeOut>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d132      	bne.n	800de9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de3a:	f000 f9f5 	bl	800e228 <prvIsQueueEmpty>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d026      	beq.n	800de92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d109      	bne.n	800de60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800de4c:	f001 ffa4 	bl	800fd98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	4618      	mov	r0, r3
 800de56:	f001 f953 	bl	800f100 <xTaskPriorityInherit>
 800de5a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800de5c:	f001 ffce 	bl	800fdfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	3324      	adds	r3, #36	@ 0x24
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	4611      	mov	r1, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 ff03 	bl	800ec74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de70:	f000 f988 	bl	800e184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de74:	f000 fd04 	bl	800e880 <xTaskResumeAll>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f47f af67 	bne.w	800dd4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800de80:	4b18      	ldr	r3, [pc, #96]	@ (800dee4 <xQueueSemaphoreTake+0x21c>)
 800de82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	e75d      	b.n	800dd4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de94:	f000 f976 	bl	800e184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de98:	f000 fcf2 	bl	800e880 <xTaskResumeAll>
 800de9c:	e757      	b.n	800dd4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dea0:	f000 f970 	bl	800e184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dea4:	f000 fcec 	bl	800e880 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dea8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800deaa:	f000 f9bd 	bl	800e228 <prvIsQueueEmpty>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f43f af4c 	beq.w	800dd4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00d      	beq.n	800ded8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800debc:	f001 ff6c 	bl	800fd98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dec0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dec2:	f000 f8b7 	bl	800e034 <prvGetDisinheritPriorityAfterTimeout>
 800dec6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dece:	4618      	mov	r0, r3
 800ded0:	f001 f9ee 	bl	800f2b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ded4:	f001 ff92 	bl	800fdfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ded8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3738      	adds	r7, #56	@ 0x38
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	e000ed04 	.word	0xe000ed04

0800dee8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08e      	sub	sp, #56	@ 0x38
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800def8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10b      	bne.n	800df16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	623b      	str	r3, [r7, #32]
}
 800df10:	bf00      	nop
 800df12:	bf00      	nop
 800df14:	e7fd      	b.n	800df12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d103      	bne.n	800df24 <xQueueReceiveFromISR+0x3c>
 800df1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <xQueueReceiveFromISR+0x40>
 800df24:	2301      	movs	r3, #1
 800df26:	e000      	b.n	800df2a <xQueueReceiveFromISR+0x42>
 800df28:	2300      	movs	r3, #0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10b      	bne.n	800df46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	61fb      	str	r3, [r7, #28]
}
 800df40:	bf00      	nop
 800df42:	bf00      	nop
 800df44:	e7fd      	b.n	800df42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df46:	f002 f807 	bl	800ff58 <vPortValidateInterruptPriority>
	__asm volatile
 800df4a:	f3ef 8211 	mrs	r2, BASEPRI
 800df4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	61ba      	str	r2, [r7, #24]
 800df60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d02f      	beq.n	800dfd2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df80:	f000 f8da 	bl	800e138 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df86:	1e5a      	subs	r2, r3, #1
 800df88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800df90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df94:	d112      	bne.n	800dfbc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d016      	beq.n	800dfcc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa0:	3310      	adds	r3, #16
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 feb8 	bl	800ed18 <xTaskRemoveFromEventList>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00e      	beq.n	800dfcc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00b      	beq.n	800dfcc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	e007      	b.n	800dfcc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	b25a      	sxtb	r2, r3
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd0:	e001      	b.n	800dfd6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	f383 8811 	msr	BASEPRI, r3
}
 800dfe0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3738      	adds	r7, #56	@ 0x38
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10b      	bne.n	800e016 <vQueueDelete+0x2a>
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	60bb      	str	r3, [r7, #8]
}
 800e010:	bf00      	nop
 800e012:	bf00      	nop
 800e014:	e7fd      	b.n	800e012 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f000 f95e 	bl	800e2d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f002 f8a6 	bl	8010178 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	d006      	beq.n	800e052 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e001      	b.n	800e056 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e056:	68fb      	ldr	r3, [r7, #12]
	}
 800e058:	4618      	mov	r0, r3
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e070:	2300      	movs	r3, #0
 800e072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10d      	bne.n	800e09e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d14d      	bne.n	800e126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	4618      	mov	r0, r3
 800e090:	f001 f89e 	bl	800f1d0 <xTaskPriorityDisinherit>
 800e094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	609a      	str	r2, [r3, #8]
 800e09c:	e043      	b.n	800e126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d119      	bne.n	800e0d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6858      	ldr	r0, [r3, #4]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	f010 fcd9 	bl	801ea66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0bc:	441a      	add	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d32b      	bcc.n	800e126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	e026      	b.n	800e126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68d8      	ldr	r0, [r3, #12]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	f010 fcbf 	bl	801ea66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	68da      	ldr	r2, [r3, #12]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0f0:	425b      	negs	r3, r3
 800e0f2:	441a      	add	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	429a      	cmp	r2, r3
 800e102:	d207      	bcs.n	800e114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	689a      	ldr	r2, [r3, #8]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e10c:	425b      	negs	r3, r3
 800e10e:	441a      	add	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b02      	cmp	r3, #2
 800e118:	d105      	bne.n	800e126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	3b01      	subs	r3, #1
 800e124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e12e:	697b      	ldr	r3, [r7, #20]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3718      	adds	r7, #24
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e146:	2b00      	cmp	r3, #0
 800e148:	d018      	beq.n	800e17c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e152:	441a      	add	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	429a      	cmp	r2, r3
 800e162:	d303      	bcc.n	800e16c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68d9      	ldr	r1, [r3, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e174:	461a      	mov	r2, r3
 800e176:	6838      	ldr	r0, [r7, #0]
 800e178:	f010 fc75 	bl	801ea66 <memcpy>
	}
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e18c:	f001 fe04 	bl	800fd98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e198:	e011      	b.n	800e1be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d012      	beq.n	800e1c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3324      	adds	r3, #36	@ 0x24
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f000 fdb6 	bl	800ed18 <xTaskRemoveFromEventList>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e1b2:	f000 fe8f 	bl	800eed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dce9      	bgt.n	800e19a <prvUnlockQueue+0x16>
 800e1c6:	e000      	b.n	800e1ca <prvUnlockQueue+0x46>
					break;
 800e1c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	22ff      	movs	r2, #255	@ 0xff
 800e1ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e1d2:	f001 fe13 	bl	800fdfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1d6:	f001 fddf 	bl	800fd98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1e2:	e011      	b.n	800e208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d012      	beq.n	800e212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3310      	adds	r3, #16
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 fd91 	bl	800ed18 <xTaskRemoveFromEventList>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e1fc:	f000 fe6a 	bl	800eed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e200:	7bbb      	ldrb	r3, [r7, #14]
 800e202:	3b01      	subs	r3, #1
 800e204:	b2db      	uxtb	r3, r3
 800e206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	dce9      	bgt.n	800e1e4 <prvUnlockQueue+0x60>
 800e210:	e000      	b.n	800e214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	22ff      	movs	r2, #255	@ 0xff
 800e218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e21c:	f001 fdee 	bl	800fdfc <vPortExitCritical>
}
 800e220:	bf00      	nop
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e230:	f001 fdb2 	bl	800fd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d102      	bne.n	800e242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e001      	b.n	800e246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e246:	f001 fdd9 	bl	800fdfc <vPortExitCritical>

	return xReturn;
 800e24a:	68fb      	ldr	r3, [r7, #12]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e25c:	f001 fd9c 	bl	800fd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e268:	429a      	cmp	r2, r3
 800e26a:	d102      	bne.n	800e272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e26c:	2301      	movs	r3, #1
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	e001      	b.n	800e276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e272:	2300      	movs	r3, #0
 800e274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e276:	f001 fdc1 	bl	800fdfc <vPortExitCritical>

	return xReturn;
 800e27a:	68fb      	ldr	r3, [r7, #12]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e28e:	2300      	movs	r3, #0
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e014      	b.n	800e2be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e294:	4a0f      	ldr	r2, [pc, #60]	@ (800e2d4 <vQueueAddToRegistry+0x50>)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10b      	bne.n	800e2b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e2a0:	490c      	ldr	r1, [pc, #48]	@ (800e2d4 <vQueueAddToRegistry+0x50>)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800e2d4 <vQueueAddToRegistry+0x50>)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	4413      	add	r3, r2
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e2b6:	e006      	b.n	800e2c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	60fb      	str	r3, [r7, #12]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b07      	cmp	r3, #7
 800e2c2:	d9e7      	bls.n	800e294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	2000f4e4 	.word	0x2000f4e4

0800e2d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	e016      	b.n	800e314 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e2e6:	4a10      	ldr	r2, [pc, #64]	@ (800e328 <vQueueUnregisterQueue+0x50>)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4413      	add	r3, r2
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d10b      	bne.n	800e30e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e2f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e328 <vQueueUnregisterQueue+0x50>)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e300:	4a09      	ldr	r2, [pc, #36]	@ (800e328 <vQueueUnregisterQueue+0x50>)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	4413      	add	r3, r2
 800e308:	2200      	movs	r2, #0
 800e30a:	605a      	str	r2, [r3, #4]
				break;
 800e30c:	e006      	b.n	800e31c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3301      	adds	r3, #1
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b07      	cmp	r3, #7
 800e318:	d9e5      	bls.n	800e2e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	2000f4e4 	.word	0x2000f4e4

0800e32c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e33c:	f001 fd2c 	bl	800fd98 <vPortEnterCritical>
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e346:	b25b      	sxtb	r3, r3
 800e348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34c:	d103      	bne.n	800e356 <vQueueWaitForMessageRestricted+0x2a>
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e35c:	b25b      	sxtb	r3, r3
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e362:	d103      	bne.n	800e36c <vQueueWaitForMessageRestricted+0x40>
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e36c:	f001 fd46 	bl	800fdfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	3324      	adds	r3, #36	@ 0x24
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fc9d 	bl	800ecc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e386:	6978      	ldr	r0, [r7, #20]
 800e388:	f7ff fefc 	bl	800e184 <prvUnlockQueue>
	}
 800e38c:	bf00      	nop
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08e      	sub	sp, #56	@ 0x38
 800e398:	af04      	add	r7, sp, #16
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10b      	bne.n	800e3c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	623b      	str	r3, [r7, #32]
}
 800e3ba:	bf00      	nop
 800e3bc:	bf00      	nop
 800e3be:	e7fd      	b.n	800e3bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10b      	bne.n	800e3de <xTaskCreateStatic+0x4a>
	__asm volatile
 800e3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	61fb      	str	r3, [r7, #28]
}
 800e3d8:	bf00      	nop
 800e3da:	bf00      	nop
 800e3dc:	e7fd      	b.n	800e3da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e3de:	23ac      	movs	r3, #172	@ 0xac
 800e3e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2bac      	cmp	r3, #172	@ 0xac
 800e3e6:	d00b      	beq.n	800e400 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ec:	f383 8811 	msr	BASEPRI, r3
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	61bb      	str	r3, [r7, #24]
}
 800e3fa:	bf00      	nop
 800e3fc:	bf00      	nop
 800e3fe:	e7fd      	b.n	800e3fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e400:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01e      	beq.n	800e446 <xTaskCreateStatic+0xb2>
 800e408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01b      	beq.n	800e446 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e410:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e416:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41a:	2202      	movs	r2, #2
 800e41c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e420:	2300      	movs	r3, #0
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	68b9      	ldr	r1, [r7, #8]
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 f851 	bl	800e4e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e43e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e440:	f000 f8f8 	bl	800e634 <prvAddNewTaskToReadyList>
 800e444:	e001      	b.n	800e44a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e44a:	697b      	ldr	r3, [r7, #20]
	}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3728      	adds	r7, #40	@ 0x28
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08c      	sub	sp, #48	@ 0x30
 800e458:	af04      	add	r7, sp, #16
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	603b      	str	r3, [r7, #0]
 800e460:	4613      	mov	r3, r2
 800e462:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e464:	88fb      	ldrh	r3, [r7, #6]
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4618      	mov	r0, r3
 800e46a:	f001 fdb7 	bl	800ffdc <pvPortMalloc>
 800e46e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00e      	beq.n	800e494 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e476:	20ac      	movs	r0, #172	@ 0xac
 800e478:	f001 fdb0 	bl	800ffdc <pvPortMalloc>
 800e47c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d003      	beq.n	800e48c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	631a      	str	r2, [r3, #48]	@ 0x30
 800e48a:	e005      	b.n	800e498 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e48c:	6978      	ldr	r0, [r7, #20]
 800e48e:	f001 fe73 	bl	8010178 <vPortFree>
 800e492:	e001      	b.n	800e498 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d017      	beq.n	800e4ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4a6:	88fa      	ldrh	r2, [r7, #6]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9303      	str	r3, [sp, #12]
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	9302      	str	r3, [sp, #8]
 800e4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b2:	9301      	str	r3, [sp, #4]
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f000 f80f 	bl	800e4e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4c2:	69f8      	ldr	r0, [r7, #28]
 800e4c4:	f000 f8b6 	bl	800e634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	61bb      	str	r3, [r7, #24]
 800e4cc:	e002      	b.n	800e4d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e4d4:	69bb      	ldr	r3, [r7, #24]
	}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3720      	adds	r7, #32
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
	...

0800e4e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	21a5      	movs	r1, #165	@ 0xa5
 800e4fa:	f010 f951 	bl	801e7a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e508:	3b01      	subs	r3, #1
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	4413      	add	r3, r2
 800e50e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	f023 0307 	bic.w	r3, r3, #7
 800e516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	f003 0307 	and.w	r3, r3, #7
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00b      	beq.n	800e53a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	617b      	str	r3, [r7, #20]
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop
 800e538:	e7fd      	b.n	800e536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01f      	beq.n	800e580 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e540:	2300      	movs	r3, #0
 800e542:	61fb      	str	r3, [r7, #28]
 800e544:	e012      	b.n	800e56c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	4413      	add	r3, r2
 800e54c:	7819      	ldrb	r1, [r3, #0]
 800e54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	4413      	add	r3, r2
 800e554:	3334      	adds	r3, #52	@ 0x34
 800e556:	460a      	mov	r2, r1
 800e558:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	4413      	add	r3, r2
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d006      	beq.n	800e574 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	3301      	adds	r3, #1
 800e56a:	61fb      	str	r3, [r7, #28]
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	2b0f      	cmp	r3, #15
 800e570:	d9e9      	bls.n	800e546 <prvInitialiseNewTask+0x66>
 800e572:	e000      	b.n	800e576 <prvInitialiseNewTask+0x96>
			{
				break;
 800e574:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e57e:	e003      	b.n	800e588 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58a:	2b37      	cmp	r3, #55	@ 0x37
 800e58c:	d901      	bls.n	800e592 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e58e:	2337      	movs	r3, #55	@ 0x37
 800e590:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e596:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e59c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fe fd7b 	bl	800d0a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b0:	3318      	adds	r3, #24
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe fd76 	bl	800d0a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e6:	3358      	adds	r3, #88	@ 0x58
 800e5e8:	224c      	movs	r2, #76	@ 0x4c
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f010 f8d7 	bl	801e7a0 <memset>
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f4:	4a0c      	ldr	r2, [pc, #48]	@ (800e628 <prvInitialiseNewTask+0x148>)
 800e5f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e62c <prvInitialiseNewTask+0x14c>)
 800e5fc:	661a      	str	r2, [r3, #96]	@ 0x60
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e600:	4a0b      	ldr	r2, [pc, #44]	@ (800e630 <prvInitialiseNewTask+0x150>)
 800e602:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	68f9      	ldr	r1, [r7, #12]
 800e608:	69b8      	ldr	r0, [r7, #24]
 800e60a:	f001 fa97 	bl	800fb3c <pxPortInitialiseStack>
 800e60e:	4602      	mov	r2, r0
 800e610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e612:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e61e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e620:	bf00      	nop
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20017900 	.word	0x20017900
 800e62c:	20017968 	.word	0x20017968
 800e630:	200179d0 	.word	0x200179d0

0800e634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e63c:	f001 fbac 	bl	800fd98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e640:	4b2d      	ldr	r3, [pc, #180]	@ (800e6f8 <prvAddNewTaskToReadyList+0xc4>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	4a2c      	ldr	r2, [pc, #176]	@ (800e6f8 <prvAddNewTaskToReadyList+0xc4>)
 800e648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e64a:	4b2c      	ldr	r3, [pc, #176]	@ (800e6fc <prvAddNewTaskToReadyList+0xc8>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d109      	bne.n	800e666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e652:	4a2a      	ldr	r2, [pc, #168]	@ (800e6fc <prvAddNewTaskToReadyList+0xc8>)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e658:	4b27      	ldr	r3, [pc, #156]	@ (800e6f8 <prvAddNewTaskToReadyList+0xc4>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d110      	bne.n	800e682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e660:	f000 fc5c 	bl	800ef1c <prvInitialiseTaskLists>
 800e664:	e00d      	b.n	800e682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e666:	4b26      	ldr	r3, [pc, #152]	@ (800e700 <prvAddNewTaskToReadyList+0xcc>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d109      	bne.n	800e682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e66e:	4b23      	ldr	r3, [pc, #140]	@ (800e6fc <prvAddNewTaskToReadyList+0xc8>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e678:	429a      	cmp	r2, r3
 800e67a:	d802      	bhi.n	800e682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e67c:	4a1f      	ldr	r2, [pc, #124]	@ (800e6fc <prvAddNewTaskToReadyList+0xc8>)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e682:	4b20      	ldr	r3, [pc, #128]	@ (800e704 <prvAddNewTaskToReadyList+0xd0>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	4a1e      	ldr	r2, [pc, #120]	@ (800e704 <prvAddNewTaskToReadyList+0xd0>)
 800e68a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e68c:	4b1d      	ldr	r3, [pc, #116]	@ (800e704 <prvAddNewTaskToReadyList+0xd0>)
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e698:	4b1b      	ldr	r3, [pc, #108]	@ (800e708 <prvAddNewTaskToReadyList+0xd4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d903      	bls.n	800e6a8 <prvAddNewTaskToReadyList+0x74>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a4:	4a18      	ldr	r2, [pc, #96]	@ (800e708 <prvAddNewTaskToReadyList+0xd4>)
 800e6a6:	6013      	str	r3, [r2, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4a15      	ldr	r2, [pc, #84]	@ (800e70c <prvAddNewTaskToReadyList+0xd8>)
 800e6b6:	441a      	add	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	4619      	mov	r1, r3
 800e6be:	4610      	mov	r0, r2
 800e6c0:	f7fe fcfd 	bl	800d0be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6c4:	f001 fb9a 	bl	800fdfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e6c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e700 <prvAddNewTaskToReadyList+0xcc>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00e      	beq.n	800e6ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <prvAddNewTaskToReadyList+0xc8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d207      	bcs.n	800e6ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e6de:	4b0c      	ldr	r3, [pc, #48]	@ (800e710 <prvAddNewTaskToReadyList+0xdc>)
 800e6e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	2000f9f8 	.word	0x2000f9f8
 800e6fc:	2000f524 	.word	0x2000f524
 800e700:	2000fa04 	.word	0x2000fa04
 800e704:	2000fa14 	.word	0x2000fa14
 800e708:	2000fa00 	.word	0x2000fa00
 800e70c:	2000f528 	.word	0x2000f528
 800e710:	e000ed04 	.word	0xe000ed04

0800e714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e71c:	2300      	movs	r3, #0
 800e71e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d018      	beq.n	800e758 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e726:	4b14      	ldr	r3, [pc, #80]	@ (800e778 <vTaskDelay+0x64>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <vTaskDelay+0x32>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	60bb      	str	r3, [r7, #8]
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	e7fd      	b.n	800e742 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e746:	f000 f88d 	bl	800e864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e74a:	2100      	movs	r1, #0
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 fe47 	bl	800f3e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e752:	f000 f895 	bl	800e880 <xTaskResumeAll>
 800e756:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d107      	bne.n	800e76e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e75e:	4b07      	ldr	r3, [pc, #28]	@ (800e77c <vTaskDelay+0x68>)
 800e760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e76e:	bf00      	nop
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	2000fa20 	.word	0x2000fa20
 800e77c:	e000ed04 	.word	0xe000ed04

0800e780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08a      	sub	sp, #40	@ 0x28
 800e784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e786:	2300      	movs	r3, #0
 800e788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e78e:	463a      	mov	r2, r7
 800e790:	1d39      	adds	r1, r7, #4
 800e792:	f107 0308 	add.w	r3, r7, #8
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fc30 	bl	800cffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	9202      	str	r2, [sp, #8]
 800e7a4:	9301      	str	r3, [sp, #4]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	460a      	mov	r2, r1
 800e7ae:	4925      	ldr	r1, [pc, #148]	@ (800e844 <vTaskStartScheduler+0xc4>)
 800e7b0:	4825      	ldr	r0, [pc, #148]	@ (800e848 <vTaskStartScheduler+0xc8>)
 800e7b2:	f7ff fdef 	bl	800e394 <xTaskCreateStatic>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	4a24      	ldr	r2, [pc, #144]	@ (800e84c <vTaskStartScheduler+0xcc>)
 800e7ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7bc:	4b23      	ldr	r3, [pc, #140]	@ (800e84c <vTaskStartScheduler+0xcc>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	e001      	b.n	800e7ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d102      	bne.n	800e7da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7d4:	f000 fe58 	bl	800f488 <xTimerCreateTimerTask>
 800e7d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d11d      	bne.n	800e81c <vTaskStartScheduler+0x9c>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	613b      	str	r3, [r7, #16]
}
 800e7f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7f4:	4b16      	ldr	r3, [pc, #88]	@ (800e850 <vTaskStartScheduler+0xd0>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3358      	adds	r3, #88	@ 0x58
 800e7fa:	4a16      	ldr	r2, [pc, #88]	@ (800e854 <vTaskStartScheduler+0xd4>)
 800e7fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e7fe:	4b16      	ldr	r3, [pc, #88]	@ (800e858 <vTaskStartScheduler+0xd8>)
 800e800:	f04f 32ff 	mov.w	r2, #4294967295
 800e804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e806:	4b15      	ldr	r3, [pc, #84]	@ (800e85c <vTaskStartScheduler+0xdc>)
 800e808:	2201      	movs	r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e80c:	4b14      	ldr	r3, [pc, #80]	@ (800e860 <vTaskStartScheduler+0xe0>)
 800e80e:	2200      	movs	r2, #0
 800e810:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e812:	f7f2 ff63 	bl	80016dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e816:	f001 fa1b 	bl	800fc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e81a:	e00f      	b.n	800e83c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e822:	d10b      	bne.n	800e83c <vTaskStartScheduler+0xbc>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	60fb      	str	r3, [r7, #12]
}
 800e836:	bf00      	nop
 800e838:	bf00      	nop
 800e83a:	e7fd      	b.n	800e838 <vTaskStartScheduler+0xb8>
}
 800e83c:	bf00      	nop
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	08021f94 	.word	0x08021f94
 800e848:	0800eeed 	.word	0x0800eeed
 800e84c:	2000fa1c 	.word	0x2000fa1c
 800e850:	2000f524 	.word	0x2000f524
 800e854:	2000005c 	.word	0x2000005c
 800e858:	2000fa18 	.word	0x2000fa18
 800e85c:	2000fa04 	.word	0x2000fa04
 800e860:	2000f9fc 	.word	0x2000f9fc

0800e864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e864:	b480      	push	{r7}
 800e866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e868:	4b04      	ldr	r3, [pc, #16]	@ (800e87c <vTaskSuspendAll+0x18>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3301      	adds	r3, #1
 800e86e:	4a03      	ldr	r2, [pc, #12]	@ (800e87c <vTaskSuspendAll+0x18>)
 800e870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e872:	bf00      	nop
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	2000fa20 	.word	0x2000fa20

0800e880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e886:	2300      	movs	r3, #0
 800e888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e88a:	2300      	movs	r3, #0
 800e88c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e88e:	4b42      	ldr	r3, [pc, #264]	@ (800e998 <xTaskResumeAll+0x118>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <xTaskResumeAll+0x2e>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	603b      	str	r3, [r7, #0]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8ae:	f001 fa73 	bl	800fd98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8b2:	4b39      	ldr	r3, [pc, #228]	@ (800e998 <xTaskResumeAll+0x118>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	4a37      	ldr	r2, [pc, #220]	@ (800e998 <xTaskResumeAll+0x118>)
 800e8ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8bc:	4b36      	ldr	r3, [pc, #216]	@ (800e998 <xTaskResumeAll+0x118>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d162      	bne.n	800e98a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8c4:	4b35      	ldr	r3, [pc, #212]	@ (800e99c <xTaskResumeAll+0x11c>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d05e      	beq.n	800e98a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8cc:	e02f      	b.n	800e92e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ce:	4b34      	ldr	r3, [pc, #208]	@ (800e9a0 <xTaskResumeAll+0x120>)
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3318      	adds	r3, #24
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe fc4c 	bl	800d178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fe fc47 	bl	800d178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e9a4 <xTaskResumeAll+0x124>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d903      	bls.n	800e8fe <xTaskResumeAll+0x7e>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e9a4 <xTaskResumeAll+0x124>)
 800e8fc:	6013      	str	r3, [r2, #0]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e902:	4613      	mov	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4413      	add	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4a27      	ldr	r2, [pc, #156]	@ (800e9a8 <xTaskResumeAll+0x128>)
 800e90c:	441a      	add	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3304      	adds	r3, #4
 800e912:	4619      	mov	r1, r3
 800e914:	4610      	mov	r0, r2
 800e916:	f7fe fbd2 	bl	800d0be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e91e:	4b23      	ldr	r3, [pc, #140]	@ (800e9ac <xTaskResumeAll+0x12c>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e924:	429a      	cmp	r2, r3
 800e926:	d302      	bcc.n	800e92e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e928:	4b21      	ldr	r3, [pc, #132]	@ (800e9b0 <xTaskResumeAll+0x130>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e92e:	4b1c      	ldr	r3, [pc, #112]	@ (800e9a0 <xTaskResumeAll+0x120>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1cb      	bne.n	800e8ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e93c:	f000 fb92 	bl	800f064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e940:	4b1c      	ldr	r3, [pc, #112]	@ (800e9b4 <xTaskResumeAll+0x134>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d010      	beq.n	800e96e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e94c:	f000 f858 	bl	800ea00 <xTaskIncrementTick>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e956:	4b16      	ldr	r3, [pc, #88]	@ (800e9b0 <xTaskResumeAll+0x130>)
 800e958:	2201      	movs	r2, #1
 800e95a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3b01      	subs	r3, #1
 800e960:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1f1      	bne.n	800e94c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e968:	4b12      	ldr	r3, [pc, #72]	@ (800e9b4 <xTaskResumeAll+0x134>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e96e:	4b10      	ldr	r3, [pc, #64]	@ (800e9b0 <xTaskResumeAll+0x130>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d009      	beq.n	800e98a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e976:	2301      	movs	r3, #1
 800e978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e97a:	4b0f      	ldr	r3, [pc, #60]	@ (800e9b8 <xTaskResumeAll+0x138>)
 800e97c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e980:	601a      	str	r2, [r3, #0]
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e98a:	f001 fa37 	bl	800fdfc <vPortExitCritical>

	return xAlreadyYielded;
 800e98e:	68bb      	ldr	r3, [r7, #8]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	2000fa20 	.word	0x2000fa20
 800e99c:	2000f9f8 	.word	0x2000f9f8
 800e9a0:	2000f9b8 	.word	0x2000f9b8
 800e9a4:	2000fa00 	.word	0x2000fa00
 800e9a8:	2000f528 	.word	0x2000f528
 800e9ac:	2000f524 	.word	0x2000f524
 800e9b0:	2000fa0c 	.word	0x2000fa0c
 800e9b4:	2000fa08 	.word	0x2000fa08
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9c2:	4b05      	ldr	r3, [pc, #20]	@ (800e9d8 <xTaskGetTickCount+0x1c>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9c8:	687b      	ldr	r3, [r7, #4]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	2000f9fc 	.word	0x2000f9fc

0800e9dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9e2:	f001 fab9 	bl	800ff58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e9ea:	4b04      	ldr	r3, [pc, #16]	@ (800e9fc <xTaskGetTickCountFromISR+0x20>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e9f0:	683b      	ldr	r3, [r7, #0]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	2000f9fc 	.word	0x2000f9fc

0800ea00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea0a:	4b4f      	ldr	r3, [pc, #316]	@ (800eb48 <xTaskIncrementTick+0x148>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f040 8090 	bne.w	800eb34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea14:	4b4d      	ldr	r3, [pc, #308]	@ (800eb4c <xTaskIncrementTick+0x14c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea1c:	4a4b      	ldr	r2, [pc, #300]	@ (800eb4c <xTaskIncrementTick+0x14c>)
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d121      	bne.n	800ea6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea28:	4b49      	ldr	r3, [pc, #292]	@ (800eb50 <xTaskIncrementTick+0x150>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00b      	beq.n	800ea4a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ea32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	603b      	str	r3, [r7, #0]
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop
 800ea48:	e7fd      	b.n	800ea46 <xTaskIncrementTick+0x46>
 800ea4a:	4b41      	ldr	r3, [pc, #260]	@ (800eb50 <xTaskIncrementTick+0x150>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	4b40      	ldr	r3, [pc, #256]	@ (800eb54 <xTaskIncrementTick+0x154>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a3e      	ldr	r2, [pc, #248]	@ (800eb50 <xTaskIncrementTick+0x150>)
 800ea56:	6013      	str	r3, [r2, #0]
 800ea58:	4a3e      	ldr	r2, [pc, #248]	@ (800eb54 <xTaskIncrementTick+0x154>)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4b3e      	ldr	r3, [pc, #248]	@ (800eb58 <xTaskIncrementTick+0x158>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	4a3c      	ldr	r2, [pc, #240]	@ (800eb58 <xTaskIncrementTick+0x158>)
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	f000 fafc 	bl	800f064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea6c:	4b3b      	ldr	r3, [pc, #236]	@ (800eb5c <xTaskIncrementTick+0x15c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d349      	bcc.n	800eb0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea76:	4b36      	ldr	r3, [pc, #216]	@ (800eb50 <xTaskIncrementTick+0x150>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d104      	bne.n	800ea8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea80:	4b36      	ldr	r3, [pc, #216]	@ (800eb5c <xTaskIncrementTick+0x15c>)
 800ea82:	f04f 32ff 	mov.w	r2, #4294967295
 800ea86:	601a      	str	r2, [r3, #0]
					break;
 800ea88:	e03f      	b.n	800eb0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea8a:	4b31      	ldr	r3, [pc, #196]	@ (800eb50 <xTaskIncrementTick+0x150>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d203      	bcs.n	800eaaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaa2:	4a2e      	ldr	r2, [pc, #184]	@ (800eb5c <xTaskIncrementTick+0x15c>)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaa8:	e02f      	b.n	800eb0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fe fb62 	bl	800d178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	3318      	adds	r3, #24
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe fb59 	bl	800d178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaca:	4b25      	ldr	r3, [pc, #148]	@ (800eb60 <xTaskIncrementTick+0x160>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d903      	bls.n	800eada <xTaskIncrementTick+0xda>
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead6:	4a22      	ldr	r2, [pc, #136]	@ (800eb60 <xTaskIncrementTick+0x160>)
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4a1f      	ldr	r2, [pc, #124]	@ (800eb64 <xTaskIncrementTick+0x164>)
 800eae8:	441a      	add	r2, r3
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fe fae4 	bl	800d0be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eafa:	4b1b      	ldr	r3, [pc, #108]	@ (800eb68 <xTaskIncrementTick+0x168>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d3b8      	bcc.n	800ea76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eb04:	2301      	movs	r3, #1
 800eb06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb08:	e7b5      	b.n	800ea76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb0a:	4b17      	ldr	r3, [pc, #92]	@ (800eb68 <xTaskIncrementTick+0x168>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb10:	4914      	ldr	r1, [pc, #80]	@ (800eb64 <xTaskIncrementTick+0x164>)
 800eb12:	4613      	mov	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d901      	bls.n	800eb26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800eb22:	2301      	movs	r3, #1
 800eb24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eb26:	4b11      	ldr	r3, [pc, #68]	@ (800eb6c <xTaskIncrementTick+0x16c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	e004      	b.n	800eb3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eb34:	4b0e      	ldr	r3, [pc, #56]	@ (800eb70 <xTaskIncrementTick+0x170>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	4a0d      	ldr	r2, [pc, #52]	@ (800eb70 <xTaskIncrementTick+0x170>)
 800eb3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eb3e:	697b      	ldr	r3, [r7, #20]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	2000fa20 	.word	0x2000fa20
 800eb4c:	2000f9fc 	.word	0x2000f9fc
 800eb50:	2000f9b0 	.word	0x2000f9b0
 800eb54:	2000f9b4 	.word	0x2000f9b4
 800eb58:	2000fa10 	.word	0x2000fa10
 800eb5c:	2000fa18 	.word	0x2000fa18
 800eb60:	2000fa00 	.word	0x2000fa00
 800eb64:	2000f528 	.word	0x2000f528
 800eb68:	2000f524 	.word	0x2000f524
 800eb6c:	2000fa0c 	.word	0x2000fa0c
 800eb70:	2000fa08 	.word	0x2000fa08

0800eb74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb7a:	4b36      	ldr	r3, [pc, #216]	@ (800ec54 <vTaskSwitchContext+0xe0>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d003      	beq.n	800eb8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb82:	4b35      	ldr	r3, [pc, #212]	@ (800ec58 <vTaskSwitchContext+0xe4>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb88:	e060      	b.n	800ec4c <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800eb8a:	4b33      	ldr	r3, [pc, #204]	@ (800ec58 <vTaskSwitchContext+0xe4>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eb90:	f7f2 fdab 	bl	80016ea <getRunTimeCounterValue>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4a31      	ldr	r2, [pc, #196]	@ (800ec5c <vTaskSwitchContext+0xe8>)
 800eb98:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800eb9a:	4b30      	ldr	r3, [pc, #192]	@ (800ec5c <vTaskSwitchContext+0xe8>)
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	4b30      	ldr	r3, [pc, #192]	@ (800ec60 <vTaskSwitchContext+0xec>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d909      	bls.n	800ebba <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800eba6:	4b2f      	ldr	r3, [pc, #188]	@ (800ec64 <vTaskSwitchContext+0xf0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ebac:	4a2b      	ldr	r2, [pc, #172]	@ (800ec5c <vTaskSwitchContext+0xe8>)
 800ebae:	6810      	ldr	r0, [r2, #0]
 800ebb0:	4a2b      	ldr	r2, [pc, #172]	@ (800ec60 <vTaskSwitchContext+0xec>)
 800ebb2:	6812      	ldr	r2, [r2, #0]
 800ebb4:	1a82      	subs	r2, r0, r2
 800ebb6:	440a      	add	r2, r1
 800ebb8:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ebba:	4b28      	ldr	r3, [pc, #160]	@ (800ec5c <vTaskSwitchContext+0xe8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a28      	ldr	r2, [pc, #160]	@ (800ec60 <vTaskSwitchContext+0xec>)
 800ebc0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebc2:	4b29      	ldr	r3, [pc, #164]	@ (800ec68 <vTaskSwitchContext+0xf4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	e011      	b.n	800ebee <vTaskSwitchContext+0x7a>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10b      	bne.n	800ebe8 <vTaskSwitchContext+0x74>
	__asm volatile
 800ebd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	607b      	str	r3, [r7, #4]
}
 800ebe2:	bf00      	nop
 800ebe4:	bf00      	nop
 800ebe6:	e7fd      	b.n	800ebe4 <vTaskSwitchContext+0x70>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	491f      	ldr	r1, [pc, #124]	@ (800ec6c <vTaskSwitchContext+0xf8>)
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	4413      	add	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	440b      	add	r3, r1
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0e3      	beq.n	800ebca <vTaskSwitchContext+0x56>
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	4613      	mov	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4413      	add	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4a17      	ldr	r2, [pc, #92]	@ (800ec6c <vTaskSwitchContext+0xf8>)
 800ec0e:	4413      	add	r3, r2
 800ec10:	60bb      	str	r3, [r7, #8]
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	605a      	str	r2, [r3, #4]
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	3308      	adds	r3, #8
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d104      	bne.n	800ec32 <vTaskSwitchContext+0xbe>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	605a      	str	r2, [r3, #4]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	4a0a      	ldr	r2, [pc, #40]	@ (800ec64 <vTaskSwitchContext+0xf0>)
 800ec3a:	6013      	str	r3, [r2, #0]
 800ec3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ec68 <vTaskSwitchContext+0xf4>)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec42:	4b08      	ldr	r3, [pc, #32]	@ (800ec64 <vTaskSwitchContext+0xf0>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3358      	adds	r3, #88	@ 0x58
 800ec48:	4a09      	ldr	r2, [pc, #36]	@ (800ec70 <vTaskSwitchContext+0xfc>)
 800ec4a:	6013      	str	r3, [r2, #0]
}
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	2000fa20 	.word	0x2000fa20
 800ec58:	2000fa0c 	.word	0x2000fa0c
 800ec5c:	2000fa28 	.word	0x2000fa28
 800ec60:	2000fa24 	.word	0x2000fa24
 800ec64:	2000f524 	.word	0x2000f524
 800ec68:	2000fa00 	.word	0x2000fa00
 800ec6c:	2000f528 	.word	0x2000f528
 800ec70:	2000005c 	.word	0x2000005c

0800ec74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10b      	bne.n	800ec9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ec84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	60fb      	str	r3, [r7, #12]
}
 800ec96:	bf00      	nop
 800ec98:	bf00      	nop
 800ec9a:	e7fd      	b.n	800ec98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec9c:	4b07      	ldr	r3, [pc, #28]	@ (800ecbc <vTaskPlaceOnEventList+0x48>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3318      	adds	r3, #24
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7fe fa2e 	bl	800d106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ecaa:	2101      	movs	r1, #1
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f000 fb97 	bl	800f3e0 <prvAddCurrentTaskToDelayedList>
}
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000f524 	.word	0x2000f524

0800ecc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10b      	bne.n	800ecea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ecd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	617b      	str	r3, [r7, #20]
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop
 800ece8:	e7fd      	b.n	800ece6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecea:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <vTaskPlaceOnEventListRestricted+0x54>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	3318      	adds	r3, #24
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7fe f9e3 	bl	800d0be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ecfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ed02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ed04:	6879      	ldr	r1, [r7, #4]
 800ed06:	68b8      	ldr	r0, [r7, #8]
 800ed08:	f000 fb6a 	bl	800f3e0 <prvAddCurrentTaskToDelayedList>
	}
 800ed0c:	bf00      	nop
 800ed0e:	3718      	adds	r7, #24
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	2000f524 	.word	0x2000f524

0800ed18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10b      	bne.n	800ed46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60fb      	str	r3, [r7, #12]
}
 800ed40:	bf00      	nop
 800ed42:	bf00      	nop
 800ed44:	e7fd      	b.n	800ed42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	3318      	adds	r3, #24
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe fa14 	bl	800d178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed50:	4b1d      	ldr	r3, [pc, #116]	@ (800edc8 <xTaskRemoveFromEventList+0xb0>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d11d      	bne.n	800ed94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fa0b 	bl	800d178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed66:	4b19      	ldr	r3, [pc, #100]	@ (800edcc <xTaskRemoveFromEventList+0xb4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d903      	bls.n	800ed76 <xTaskRemoveFromEventList+0x5e>
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed72:	4a16      	ldr	r2, [pc, #88]	@ (800edcc <xTaskRemoveFromEventList+0xb4>)
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	4413      	add	r3, r2
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	4a13      	ldr	r2, [pc, #76]	@ (800edd0 <xTaskRemoveFromEventList+0xb8>)
 800ed84:	441a      	add	r2, r3
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fe f996 	bl	800d0be <vListInsertEnd>
 800ed92:	e005      	b.n	800eda0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	3318      	adds	r3, #24
 800ed98:	4619      	mov	r1, r3
 800ed9a:	480e      	ldr	r0, [pc, #56]	@ (800edd4 <xTaskRemoveFromEventList+0xbc>)
 800ed9c:	f7fe f98f 	bl	800d0be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda4:	4b0c      	ldr	r3, [pc, #48]	@ (800edd8 <xTaskRemoveFromEventList+0xc0>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edaa:	429a      	cmp	r2, r3
 800edac:	d905      	bls.n	800edba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edae:	2301      	movs	r3, #1
 800edb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edb2:	4b0a      	ldr	r3, [pc, #40]	@ (800eddc <xTaskRemoveFromEventList+0xc4>)
 800edb4:	2201      	movs	r2, #1
 800edb6:	601a      	str	r2, [r3, #0]
 800edb8:	e001      	b.n	800edbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800edba:	2300      	movs	r3, #0
 800edbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edbe:	697b      	ldr	r3, [r7, #20]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	2000fa20 	.word	0x2000fa20
 800edcc:	2000fa00 	.word	0x2000fa00
 800edd0:	2000f528 	.word	0x2000f528
 800edd4:	2000f9b8 	.word	0x2000f9b8
 800edd8:	2000f524 	.word	0x2000f524
 800eddc:	2000fa0c 	.word	0x2000fa0c

0800ede0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ede8:	4b06      	ldr	r3, [pc, #24]	@ (800ee04 <vTaskInternalSetTimeOutState+0x24>)
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edf0:	4b05      	ldr	r3, [pc, #20]	@ (800ee08 <vTaskInternalSetTimeOutState+0x28>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	605a      	str	r2, [r3, #4]
}
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr
 800ee04:	2000fa10 	.word	0x2000fa10
 800ee08:	2000f9fc 	.word	0x2000f9fc

0800ee0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b088      	sub	sp, #32
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10b      	bne.n	800ee34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ee1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	613b      	str	r3, [r7, #16]
}
 800ee2e:	bf00      	nop
 800ee30:	bf00      	nop
 800ee32:	e7fd      	b.n	800ee30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10b      	bne.n	800ee52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	60fb      	str	r3, [r7, #12]
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	e7fd      	b.n	800ee4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ee52:	f000 ffa1 	bl	800fd98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee56:	4b1d      	ldr	r3, [pc, #116]	@ (800eecc <xTaskCheckForTimeOut+0xc0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	69ba      	ldr	r2, [r7, #24]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6e:	d102      	bne.n	800ee76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]
 800ee74:	e023      	b.n	800eebe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	4b15      	ldr	r3, [pc, #84]	@ (800eed0 <xTaskCheckForTimeOut+0xc4>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d007      	beq.n	800ee92 <xTaskCheckForTimeOut+0x86>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	69ba      	ldr	r2, [r7, #24]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d302      	bcc.n	800ee92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	61fb      	str	r3, [r7, #28]
 800ee90:	e015      	b.n	800eebe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d20b      	bcs.n	800eeb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	1ad2      	subs	r2, r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff ff99 	bl	800ede0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	61fb      	str	r3, [r7, #28]
 800eeb2:	e004      	b.n	800eebe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eebe:	f000 ff9d 	bl	800fdfc <vPortExitCritical>

	return xReturn;
 800eec2:	69fb      	ldr	r3, [r7, #28]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3720      	adds	r7, #32
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	2000f9fc 	.word	0x2000f9fc
 800eed0:	2000fa10 	.word	0x2000fa10

0800eed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eed4:	b480      	push	{r7}
 800eed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eed8:	4b03      	ldr	r3, [pc, #12]	@ (800eee8 <vTaskMissedYield+0x14>)
 800eeda:	2201      	movs	r2, #1
 800eedc:	601a      	str	r2, [r3, #0]
}
 800eede:	bf00      	nop
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr
 800eee8:	2000fa0c 	.word	0x2000fa0c

0800eeec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eef4:	f000 f852 	bl	800ef9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eef8:	4b06      	ldr	r3, [pc, #24]	@ (800ef14 <prvIdleTask+0x28>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d9f9      	bls.n	800eef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef00:	4b05      	ldr	r3, [pc, #20]	@ (800ef18 <prvIdleTask+0x2c>)
 800ef02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef06:	601a      	str	r2, [r3, #0]
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef10:	e7f0      	b.n	800eef4 <prvIdleTask+0x8>
 800ef12:	bf00      	nop
 800ef14:	2000f528 	.word	0x2000f528
 800ef18:	e000ed04 	.word	0xe000ed04

0800ef1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef22:	2300      	movs	r3, #0
 800ef24:	607b      	str	r3, [r7, #4]
 800ef26:	e00c      	b.n	800ef42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4413      	add	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4a12      	ldr	r2, [pc, #72]	@ (800ef7c <prvInitialiseTaskLists+0x60>)
 800ef34:	4413      	add	r3, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe f894 	bl	800d064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	607b      	str	r3, [r7, #4]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b37      	cmp	r3, #55	@ 0x37
 800ef46:	d9ef      	bls.n	800ef28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef48:	480d      	ldr	r0, [pc, #52]	@ (800ef80 <prvInitialiseTaskLists+0x64>)
 800ef4a:	f7fe f88b 	bl	800d064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef4e:	480d      	ldr	r0, [pc, #52]	@ (800ef84 <prvInitialiseTaskLists+0x68>)
 800ef50:	f7fe f888 	bl	800d064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef54:	480c      	ldr	r0, [pc, #48]	@ (800ef88 <prvInitialiseTaskLists+0x6c>)
 800ef56:	f7fe f885 	bl	800d064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef5a:	480c      	ldr	r0, [pc, #48]	@ (800ef8c <prvInitialiseTaskLists+0x70>)
 800ef5c:	f7fe f882 	bl	800d064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef60:	480b      	ldr	r0, [pc, #44]	@ (800ef90 <prvInitialiseTaskLists+0x74>)
 800ef62:	f7fe f87f 	bl	800d064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef66:	4b0b      	ldr	r3, [pc, #44]	@ (800ef94 <prvInitialiseTaskLists+0x78>)
 800ef68:	4a05      	ldr	r2, [pc, #20]	@ (800ef80 <prvInitialiseTaskLists+0x64>)
 800ef6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <prvInitialiseTaskLists+0x7c>)
 800ef6e:	4a05      	ldr	r2, [pc, #20]	@ (800ef84 <prvInitialiseTaskLists+0x68>)
 800ef70:	601a      	str	r2, [r3, #0]
}
 800ef72:	bf00      	nop
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	2000f528 	.word	0x2000f528
 800ef80:	2000f988 	.word	0x2000f988
 800ef84:	2000f99c 	.word	0x2000f99c
 800ef88:	2000f9b8 	.word	0x2000f9b8
 800ef8c:	2000f9cc 	.word	0x2000f9cc
 800ef90:	2000f9e4 	.word	0x2000f9e4
 800ef94:	2000f9b0 	.word	0x2000f9b0
 800ef98:	2000f9b4 	.word	0x2000f9b4

0800ef9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efa2:	e019      	b.n	800efd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efa4:	f000 fef8 	bl	800fd98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa8:	4b10      	ldr	r3, [pc, #64]	@ (800efec <prvCheckTasksWaitingTermination+0x50>)
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3304      	adds	r3, #4
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fe f8df 	bl	800d178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efba:	4b0d      	ldr	r3, [pc, #52]	@ (800eff0 <prvCheckTasksWaitingTermination+0x54>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	4a0b      	ldr	r2, [pc, #44]	@ (800eff0 <prvCheckTasksWaitingTermination+0x54>)
 800efc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efc4:	4b0b      	ldr	r3, [pc, #44]	@ (800eff4 <prvCheckTasksWaitingTermination+0x58>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	3b01      	subs	r3, #1
 800efca:	4a0a      	ldr	r2, [pc, #40]	@ (800eff4 <prvCheckTasksWaitingTermination+0x58>)
 800efcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efce:	f000 ff15 	bl	800fdfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f810 	bl	800eff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efd8:	4b06      	ldr	r3, [pc, #24]	@ (800eff4 <prvCheckTasksWaitingTermination+0x58>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1e1      	bne.n	800efa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efe0:	bf00      	nop
 800efe2:	bf00      	nop
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000f9cc 	.word	0x2000f9cc
 800eff0:	2000f9f8 	.word	0x2000f9f8
 800eff4:	2000f9e0 	.word	0x2000f9e0

0800eff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3358      	adds	r3, #88	@ 0x58
 800f004:	4618      	mov	r0, r3
 800f006:	f00f fc49 	bl	801e89c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800f010:	2b00      	cmp	r3, #0
 800f012:	d108      	bne.n	800f026 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f018:	4618      	mov	r0, r3
 800f01a:	f001 f8ad 	bl	8010178 <vPortFree>
				vPortFree( pxTCB );
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f001 f8aa 	bl	8010178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f024:	e019      	b.n	800f05a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d103      	bne.n	800f038 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f001 f8a1 	bl	8010178 <vPortFree>
	}
 800f036:	e010      	b.n	800f05a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d00b      	beq.n	800f05a <prvDeleteTCB+0x62>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	60fb      	str	r3, [r7, #12]
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop
 800f058:	e7fd      	b.n	800f056 <prvDeleteTCB+0x5e>
	}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f06a:	4b0c      	ldr	r3, [pc, #48]	@ (800f09c <prvResetNextTaskUnblockTime+0x38>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f074:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800f076:	f04f 32ff 	mov.w	r2, #4294967295
 800f07a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f07c:	e008      	b.n	800f090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07e:	4b07      	ldr	r3, [pc, #28]	@ (800f09c <prvResetNextTaskUnblockTime+0x38>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	4a04      	ldr	r2, [pc, #16]	@ (800f0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800f08e:	6013      	str	r3, [r2, #0]
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	2000f9b0 	.word	0x2000f9b0
 800f0a0:	2000fa18 	.word	0x2000fa18

0800f0a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f0aa:	4b05      	ldr	r3, [pc, #20]	@ (800f0c0 <xTaskGetCurrentTaskHandle+0x1c>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f0b0:	687b      	ldr	r3, [r7, #4]
	}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	2000f524 	.word	0x2000f524

0800f0c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f8 <xTaskGetSchedulerState+0x34>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d102      	bne.n	800f0d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	607b      	str	r3, [r7, #4]
 800f0d6:	e008      	b.n	800f0ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0d8:	4b08      	ldr	r3, [pc, #32]	@ (800f0fc <xTaskGetSchedulerState+0x38>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	607b      	str	r3, [r7, #4]
 800f0e4:	e001      	b.n	800f0ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0ea:	687b      	ldr	r3, [r7, #4]
	}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	2000fa04 	.word	0x2000fa04
 800f0fc:	2000fa20 	.word	0x2000fa20

0800f100 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f10c:	2300      	movs	r3, #0
 800f10e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d051      	beq.n	800f1ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f11a:	4b2a      	ldr	r3, [pc, #168]	@ (800f1c4 <xTaskPriorityInherit+0xc4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f120:	429a      	cmp	r2, r3
 800f122:	d241      	bcs.n	800f1a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	699b      	ldr	r3, [r3, #24]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	db06      	blt.n	800f13a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f12c:	4b25      	ldr	r3, [pc, #148]	@ (800f1c4 <xTaskPriorityInherit+0xc4>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f132:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	6959      	ldr	r1, [r3, #20]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f142:	4613      	mov	r3, r2
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	4413      	add	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4a1f      	ldr	r2, [pc, #124]	@ (800f1c8 <xTaskPriorityInherit+0xc8>)
 800f14c:	4413      	add	r3, r2
 800f14e:	4299      	cmp	r1, r3
 800f150:	d122      	bne.n	800f198 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	3304      	adds	r3, #4
 800f156:	4618      	mov	r0, r3
 800f158:	f7fe f80e 	bl	800d178 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f15c:	4b19      	ldr	r3, [pc, #100]	@ (800f1c4 <xTaskPriorityInherit+0xc4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f16a:	4b18      	ldr	r3, [pc, #96]	@ (800f1cc <xTaskPriorityInherit+0xcc>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d903      	bls.n	800f17a <xTaskPriorityInherit+0x7a>
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f176:	4a15      	ldr	r2, [pc, #84]	@ (800f1cc <xTaskPriorityInherit+0xcc>)
 800f178:	6013      	str	r3, [r2, #0]
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f17e:	4613      	mov	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	4a10      	ldr	r2, [pc, #64]	@ (800f1c8 <xTaskPriorityInherit+0xc8>)
 800f188:	441a      	add	r2, r3
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	3304      	adds	r3, #4
 800f18e:	4619      	mov	r1, r3
 800f190:	4610      	mov	r0, r2
 800f192:	f7fd ff94 	bl	800d0be <vListInsertEnd>
 800f196:	e004      	b.n	800f1a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f198:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c4 <xTaskPriorityInherit+0xc4>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	60fb      	str	r3, [r7, #12]
 800f1a6:	e008      	b.n	800f1ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f1ac:	4b05      	ldr	r3, [pc, #20]	@ (800f1c4 <xTaskPriorityInherit+0xc4>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d201      	bcs.n	800f1ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
	}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	2000f524 	.word	0x2000f524
 800f1c8:	2000f528 	.word	0x2000f528
 800f1cc:	2000fa00 	.word	0x2000fa00

0800f1d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d058      	beq.n	800f298 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1e6:	4b2f      	ldr	r3, [pc, #188]	@ (800f2a4 <xTaskPriorityDisinherit+0xd4>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d00b      	beq.n	800f208 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	60fb      	str	r3, [r7, #12]
}
 800f202:	bf00      	nop
 800f204:	bf00      	nop
 800f206:	e7fd      	b.n	800f204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10b      	bne.n	800f228 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	60bb      	str	r3, [r7, #8]
}
 800f222:	bf00      	nop
 800f224:	bf00      	nop
 800f226:	e7fd      	b.n	800f224 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f22c:	1e5a      	subs	r2, r3, #1
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d02c      	beq.n	800f298 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f242:	2b00      	cmp	r3, #0
 800f244:	d128      	bne.n	800f298 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	3304      	adds	r3, #4
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fd ff94 	bl	800d178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f25c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f268:	4b0f      	ldr	r3, [pc, #60]	@ (800f2a8 <xTaskPriorityDisinherit+0xd8>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d903      	bls.n	800f278 <xTaskPriorityDisinherit+0xa8>
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f274:	4a0c      	ldr	r2, [pc, #48]	@ (800f2a8 <xTaskPriorityDisinherit+0xd8>)
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27c:	4613      	mov	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4a09      	ldr	r2, [pc, #36]	@ (800f2ac <xTaskPriorityDisinherit+0xdc>)
 800f286:	441a      	add	r2, r3
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	3304      	adds	r3, #4
 800f28c:	4619      	mov	r1, r3
 800f28e:	4610      	mov	r0, r2
 800f290:	f7fd ff15 	bl	800d0be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f294:	2301      	movs	r3, #1
 800f296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f298:	697b      	ldr	r3, [r7, #20]
	}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	2000f524 	.word	0x2000f524
 800f2a8:	2000fa00 	.word	0x2000fa00
 800f2ac:	2000f528 	.word	0x2000f528

0800f2b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d06c      	beq.n	800f3a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10b      	bne.n	800f2e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	60fb      	str	r3, [r7, #12]
}
 800f2e2:	bf00      	nop
 800f2e4:	bf00      	nop
 800f2e6:	e7fd      	b.n	800f2e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2ec:	683a      	ldr	r2, [r7, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d902      	bls.n	800f2f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	61fb      	str	r3, [r7, #28]
 800f2f6:	e002      	b.n	800f2fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f302:	69fa      	ldr	r2, [r7, #28]
 800f304:	429a      	cmp	r2, r3
 800f306:	d04c      	beq.n	800f3a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d147      	bne.n	800f3a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f312:	4b26      	ldr	r3, [pc, #152]	@ (800f3ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	69ba      	ldr	r2, [r7, #24]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d10b      	bne.n	800f334 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f320:	f383 8811 	msr	BASEPRI, r3
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	60bb      	str	r3, [r7, #8]
}
 800f32e:	bf00      	nop
 800f330:	bf00      	nop
 800f332:	e7fd      	b.n	800f330 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	69fa      	ldr	r2, [r7, #28]
 800f33e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	2b00      	cmp	r3, #0
 800f346:	db04      	blt.n	800f352 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	6959      	ldr	r1, [r3, #20]
 800f356:	693a      	ldr	r2, [r7, #16]
 800f358:	4613      	mov	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4a13      	ldr	r2, [pc, #76]	@ (800f3b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f362:	4413      	add	r3, r2
 800f364:	4299      	cmp	r1, r3
 800f366:	d11c      	bne.n	800f3a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd ff03 	bl	800d178 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f376:	4b0f      	ldr	r3, [pc, #60]	@ (800f3b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d903      	bls.n	800f386 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f382:	4a0c      	ldr	r2, [pc, #48]	@ (800f3b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f38a:	4613      	mov	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	4413      	add	r3, r2
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4a07      	ldr	r2, [pc, #28]	@ (800f3b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f394:	441a      	add	r2, r3
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	3304      	adds	r3, #4
 800f39a:	4619      	mov	r1, r3
 800f39c:	4610      	mov	r0, r2
 800f39e:	f7fd fe8e 	bl	800d0be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3a2:	bf00      	nop
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	2000f524 	.word	0x2000f524
 800f3b0:	2000f528 	.word	0x2000f528
 800f3b4:	2000fa00 	.word	0x2000fa00

0800f3b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3bc:	4b07      	ldr	r3, [pc, #28]	@ (800f3dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d004      	beq.n	800f3ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3c4:	4b05      	ldr	r3, [pc, #20]	@ (800f3dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3ca:	3201      	adds	r2, #1
 800f3cc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f3ce:	4b03      	ldr	r3, [pc, #12]	@ (800f3dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
	}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	2000f524 	.word	0x2000f524

0800f3e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3ea:	4b21      	ldr	r3, [pc, #132]	@ (800f470 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3f0:	4b20      	ldr	r3, [pc, #128]	@ (800f474 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fd febe 	bl	800d178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f402:	d10a      	bne.n	800f41a <prvAddCurrentTaskToDelayedList+0x3a>
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f40a:	4b1a      	ldr	r3, [pc, #104]	@ (800f474 <prvAddCurrentTaskToDelayedList+0x94>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	3304      	adds	r3, #4
 800f410:	4619      	mov	r1, r3
 800f412:	4819      	ldr	r0, [pc, #100]	@ (800f478 <prvAddCurrentTaskToDelayedList+0x98>)
 800f414:	f7fd fe53 	bl	800d0be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f418:	e026      	b.n	800f468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4413      	add	r3, r2
 800f420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f422:	4b14      	ldr	r3, [pc, #80]	@ (800f474 <prvAddCurrentTaskToDelayedList+0x94>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d209      	bcs.n	800f446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f432:	4b12      	ldr	r3, [pc, #72]	@ (800f47c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	4b0f      	ldr	r3, [pc, #60]	@ (800f474 <prvAddCurrentTaskToDelayedList+0x94>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	3304      	adds	r3, #4
 800f43c:	4619      	mov	r1, r3
 800f43e:	4610      	mov	r0, r2
 800f440:	f7fd fe61 	bl	800d106 <vListInsert>
}
 800f444:	e010      	b.n	800f468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f446:	4b0e      	ldr	r3, [pc, #56]	@ (800f480 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	4b0a      	ldr	r3, [pc, #40]	@ (800f474 <prvAddCurrentTaskToDelayedList+0x94>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3304      	adds	r3, #4
 800f450:	4619      	mov	r1, r3
 800f452:	4610      	mov	r0, r2
 800f454:	f7fd fe57 	bl	800d106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f458:	4b0a      	ldr	r3, [pc, #40]	@ (800f484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d202      	bcs.n	800f468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f462:	4a08      	ldr	r2, [pc, #32]	@ (800f484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	6013      	str	r3, [r2, #0]
}
 800f468:	bf00      	nop
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	2000f9fc 	.word	0x2000f9fc
 800f474:	2000f524 	.word	0x2000f524
 800f478:	2000f9e4 	.word	0x2000f9e4
 800f47c:	2000f9b4 	.word	0x2000f9b4
 800f480:	2000f9b0 	.word	0x2000f9b0
 800f484:	2000fa18 	.word	0x2000fa18

0800f488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08a      	sub	sp, #40	@ 0x28
 800f48c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f48e:	2300      	movs	r3, #0
 800f490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f492:	f000 fb13 	bl	800fabc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f496:	4b1d      	ldr	r3, [pc, #116]	@ (800f50c <xTimerCreateTimerTask+0x84>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d021      	beq.n	800f4e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f4a6:	1d3a      	adds	r2, r7, #4
 800f4a8:	f107 0108 	add.w	r1, r7, #8
 800f4ac:	f107 030c 	add.w	r3, r7, #12
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7fd fdbd 	bl	800d030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	9202      	str	r2, [sp, #8]
 800f4be:	9301      	str	r3, [sp, #4]
 800f4c0:	2302      	movs	r3, #2
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	460a      	mov	r2, r1
 800f4c8:	4911      	ldr	r1, [pc, #68]	@ (800f510 <xTimerCreateTimerTask+0x88>)
 800f4ca:	4812      	ldr	r0, [pc, #72]	@ (800f514 <xTimerCreateTimerTask+0x8c>)
 800f4cc:	f7fe ff62 	bl	800e394 <xTaskCreateStatic>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	4a11      	ldr	r2, [pc, #68]	@ (800f518 <xTimerCreateTimerTask+0x90>)
 800f4d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f4d6:	4b10      	ldr	r3, [pc, #64]	@ (800f518 <xTimerCreateTimerTask+0x90>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d001      	beq.n	800f4e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10b      	bne.n	800f500 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	613b      	str	r3, [r7, #16]
}
 800f4fa:	bf00      	nop
 800f4fc:	bf00      	nop
 800f4fe:	e7fd      	b.n	800f4fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f500:	697b      	ldr	r3, [r7, #20]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	2000fa5c 	.word	0x2000fa5c
 800f510:	08021fc4 	.word	0x08021fc4
 800f514:	0800f655 	.word	0x0800f655
 800f518:	2000fa60 	.word	0x2000fa60

0800f51c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08a      	sub	sp, #40	@ 0x28
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f52a:	2300      	movs	r3, #0
 800f52c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d10b      	bne.n	800f54c <xTimerGenericCommand+0x30>
	__asm volatile
 800f534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	623b      	str	r3, [r7, #32]
}
 800f546:	bf00      	nop
 800f548:	bf00      	nop
 800f54a:	e7fd      	b.n	800f548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f54c:	4b19      	ldr	r3, [pc, #100]	@ (800f5b4 <xTimerGenericCommand+0x98>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d02a      	beq.n	800f5aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	2b05      	cmp	r3, #5
 800f564:	dc18      	bgt.n	800f598 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f566:	f7ff fdad 	bl	800f0c4 <xTaskGetSchedulerState>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d109      	bne.n	800f584 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f570:	4b10      	ldr	r3, [pc, #64]	@ (800f5b4 <xTimerGenericCommand+0x98>)
 800f572:	6818      	ldr	r0, [r3, #0]
 800f574:	f107 0110 	add.w	r1, r7, #16
 800f578:	2300      	movs	r3, #0
 800f57a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f57c:	f7fe f892 	bl	800d6a4 <xQueueGenericSend>
 800f580:	6278      	str	r0, [r7, #36]	@ 0x24
 800f582:	e012      	b.n	800f5aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f584:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b4 <xTimerGenericCommand+0x98>)
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	f107 0110 	add.w	r1, r7, #16
 800f58c:	2300      	movs	r3, #0
 800f58e:	2200      	movs	r2, #0
 800f590:	f7fe f888 	bl	800d6a4 <xQueueGenericSend>
 800f594:	6278      	str	r0, [r7, #36]	@ 0x24
 800f596:	e008      	b.n	800f5aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f598:	4b06      	ldr	r3, [pc, #24]	@ (800f5b4 <xTimerGenericCommand+0x98>)
 800f59a:	6818      	ldr	r0, [r3, #0]
 800f59c:	f107 0110 	add.w	r1, r7, #16
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	f7fe f980 	bl	800d8a8 <xQueueGenericSendFromISR>
 800f5a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3728      	adds	r7, #40	@ 0x28
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000fa5c 	.word	0x2000fa5c

0800f5b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b088      	sub	sp, #32
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5c2:	4b23      	ldr	r3, [pc, #140]	@ (800f650 <prvProcessExpiredTimer+0x98>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fd fdd1 	bl	800d178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5dc:	f003 0304 	and.w	r3, r3, #4
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d023      	beq.n	800f62c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	699a      	ldr	r2, [r3, #24]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	18d1      	adds	r1, r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	6978      	ldr	r0, [r7, #20]
 800f5f2:	f000 f8d5 	bl	800f7a0 <prvInsertTimerInActiveList>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d020      	beq.n	800f63e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	2300      	movs	r3, #0
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	2100      	movs	r1, #0
 800f606:	6978      	ldr	r0, [r7, #20]
 800f608:	f7ff ff88 	bl	800f51c <xTimerGenericCommand>
 800f60c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d114      	bne.n	800f63e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	60fb      	str	r3, [r7, #12]
}
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	e7fd      	b.n	800f628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f632:	f023 0301 	bic.w	r3, r3, #1
 800f636:	b2da      	uxtb	r2, r3
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	6978      	ldr	r0, [r7, #20]
 800f644:	4798      	blx	r3
}
 800f646:	bf00      	nop
 800f648:	3718      	adds	r7, #24
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	2000fa54 	.word	0x2000fa54

0800f654 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f65c:	f107 0308 	add.w	r3, r7, #8
 800f660:	4618      	mov	r0, r3
 800f662:	f000 f859 	bl	800f718 <prvGetNextExpireTime>
 800f666:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	4619      	mov	r1, r3
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f000 f805 	bl	800f67c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f672:	f000 f8d7 	bl	800f824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f676:	bf00      	nop
 800f678:	e7f0      	b.n	800f65c <prvTimerTask+0x8>
	...

0800f67c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f686:	f7ff f8ed 	bl	800e864 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f68a:	f107 0308 	add.w	r3, r7, #8
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f866 	bl	800f760 <prvSampleTimeNow>
 800f694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d130      	bne.n	800f6fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10a      	bne.n	800f6b8 <prvProcessTimerOrBlockTask+0x3c>
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d806      	bhi.n	800f6b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f6aa:	f7ff f8e9 	bl	800e880 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f6ae:	68f9      	ldr	r1, [r7, #12]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7ff ff81 	bl	800f5b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f6b6:	e024      	b.n	800f702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d008      	beq.n	800f6d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f6be:	4b13      	ldr	r3, [pc, #76]	@ (800f70c <prvProcessTimerOrBlockTask+0x90>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <prvProcessTimerOrBlockTask+0x50>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e000      	b.n	800f6ce <prvProcessTimerOrBlockTask+0x52>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f710 <prvProcessTimerOrBlockTask+0x94>)
 800f6d2:	6818      	ldr	r0, [r3, #0]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	f7fe fe25 	bl	800e32c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6e2:	f7ff f8cd 	bl	800e880 <xTaskResumeAll>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10a      	bne.n	800f702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6ec:	4b09      	ldr	r3, [pc, #36]	@ (800f714 <prvProcessTimerOrBlockTask+0x98>)
 800f6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6f2:	601a      	str	r2, [r3, #0]
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	f3bf 8f6f 	isb	sy
}
 800f6fc:	e001      	b.n	800f702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6fe:	f7ff f8bf 	bl	800e880 <xTaskResumeAll>
}
 800f702:	bf00      	nop
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	2000fa58 	.word	0x2000fa58
 800f710:	2000fa5c 	.word	0x2000fa5c
 800f714:	e000ed04 	.word	0xe000ed04

0800f718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f720:	4b0e      	ldr	r3, [pc, #56]	@ (800f75c <prvGetNextExpireTime+0x44>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <prvGetNextExpireTime+0x16>
 800f72a:	2201      	movs	r2, #1
 800f72c:	e000      	b.n	800f730 <prvGetNextExpireTime+0x18>
 800f72e:	2200      	movs	r2, #0
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d105      	bne.n	800f748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f73c:	4b07      	ldr	r3, [pc, #28]	@ (800f75c <prvGetNextExpireTime+0x44>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	e001      	b.n	800f74c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f748:	2300      	movs	r3, #0
 800f74a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f74c:	68fb      	ldr	r3, [r7, #12]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3714      	adds	r7, #20
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	2000fa54 	.word	0x2000fa54

0800f760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f768:	f7ff f928 	bl	800e9bc <xTaskGetTickCount>
 800f76c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f76e:	4b0b      	ldr	r3, [pc, #44]	@ (800f79c <prvSampleTimeNow+0x3c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	429a      	cmp	r2, r3
 800f776:	d205      	bcs.n	800f784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f778:	f000 f93a 	bl	800f9f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2201      	movs	r2, #1
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	e002      	b.n	800f78a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f78a:	4a04      	ldr	r2, [pc, #16]	@ (800f79c <prvSampleTimeNow+0x3c>)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f790:	68fb      	ldr	r3, [r7, #12]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	2000fa64 	.word	0x2000fa64

0800f7a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d812      	bhi.n	800f7ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	1ad2      	subs	r2, r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	699b      	ldr	r3, [r3, #24]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d302      	bcc.n	800f7da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	617b      	str	r3, [r7, #20]
 800f7d8:	e01b      	b.n	800f812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7da:	4b10      	ldr	r3, [pc, #64]	@ (800f81c <prvInsertTimerInActiveList+0x7c>)
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	4610      	mov	r0, r2
 800f7e6:	f7fd fc8e 	bl	800d106 <vListInsert>
 800f7ea:	e012      	b.n	800f812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d206      	bcs.n	800f802 <prvInsertTimerInActiveList+0x62>
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d302      	bcc.n	800f802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	617b      	str	r3, [r7, #20]
 800f800:	e007      	b.n	800f812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f802:	4b07      	ldr	r3, [pc, #28]	@ (800f820 <prvInsertTimerInActiveList+0x80>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	3304      	adds	r3, #4
 800f80a:	4619      	mov	r1, r3
 800f80c:	4610      	mov	r0, r2
 800f80e:	f7fd fc7a 	bl	800d106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f812:	697b      	ldr	r3, [r7, #20]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3718      	adds	r7, #24
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	2000fa58 	.word	0x2000fa58
 800f820:	2000fa54 	.word	0x2000fa54

0800f824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b08e      	sub	sp, #56	@ 0x38
 800f828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f82a:	e0ce      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	da19      	bge.n	800f866 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f832:	1d3b      	adds	r3, r7, #4
 800f834:	3304      	adds	r3, #4
 800f836:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d10b      	bne.n	800f856 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	61fb      	str	r3, [r7, #28]
}
 800f850:	bf00      	nop
 800f852:	bf00      	nop
 800f854:	e7fd      	b.n	800f852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f85c:	6850      	ldr	r0, [r2, #4]
 800f85e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f860:	6892      	ldr	r2, [r2, #8]
 800f862:	4611      	mov	r1, r2
 800f864:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f2c0 80ae 	blt.w	800f9ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d004      	beq.n	800f884 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87c:	3304      	adds	r3, #4
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fd fc7a 	bl	800d178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f884:	463b      	mov	r3, r7
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff ff6a 	bl	800f760 <prvSampleTimeNow>
 800f88c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b09      	cmp	r3, #9
 800f892:	f200 8097 	bhi.w	800f9c4 <prvProcessReceivedCommands+0x1a0>
 800f896:	a201      	add	r2, pc, #4	@ (adr r2, 800f89c <prvProcessReceivedCommands+0x78>)
 800f898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f89c:	0800f8c5 	.word	0x0800f8c5
 800f8a0:	0800f8c5 	.word	0x0800f8c5
 800f8a4:	0800f8c5 	.word	0x0800f8c5
 800f8a8:	0800f93b 	.word	0x0800f93b
 800f8ac:	0800f94f 	.word	0x0800f94f
 800f8b0:	0800f99b 	.word	0x0800f99b
 800f8b4:	0800f8c5 	.word	0x0800f8c5
 800f8b8:	0800f8c5 	.word	0x0800f8c5
 800f8bc:	0800f93b 	.word	0x0800f93b
 800f8c0:	0800f94f 	.word	0x0800f94f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8ca:	f043 0301 	orr.w	r3, r3, #1
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f8d6:	68ba      	ldr	r2, [r7, #8]
 800f8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	18d1      	adds	r1, r2, r3
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8e4:	f7ff ff5c 	bl	800f7a0 <prvInsertTimerInActiveList>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d06c      	beq.n	800f9c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f0:	6a1b      	ldr	r3, [r3, #32]
 800f8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b00      	cmp	r3, #0
 800f902:	d061      	beq.n	800f9c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f908:	699b      	ldr	r3, [r3, #24]
 800f90a:	441a      	add	r2, r3
 800f90c:	2300      	movs	r3, #0
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	2300      	movs	r3, #0
 800f912:	2100      	movs	r1, #0
 800f914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f916:	f7ff fe01 	bl	800f51c <xTimerGenericCommand>
 800f91a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f91c:	6a3b      	ldr	r3, [r7, #32]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d152      	bne.n	800f9c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f926:	f383 8811 	msr	BASEPRI, r3
 800f92a:	f3bf 8f6f 	isb	sy
 800f92e:	f3bf 8f4f 	dsb	sy
 800f932:	61bb      	str	r3, [r7, #24]
}
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	e7fd      	b.n	800f936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f940:	f023 0301 	bic.w	r3, r3, #1
 800f944:	b2da      	uxtb	r2, r3
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f94c:	e03d      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f954:	f043 0301 	orr.w	r3, r3, #1
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f95c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f964:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10b      	bne.n	800f986 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	617b      	str	r3, [r7, #20]
}
 800f980:	bf00      	nop
 800f982:	bf00      	nop
 800f984:	e7fd      	b.n	800f982 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f988:	699a      	ldr	r2, [r3, #24]
 800f98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f98c:	18d1      	adds	r1, r2, r3
 800f98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f994:	f7ff ff04 	bl	800f7a0 <prvInsertTimerInActiveList>
					break;
 800f998:	e017      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9a0:	f003 0302 	and.w	r3, r3, #2
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d103      	bne.n	800f9b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f9a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9aa:	f000 fbe5 	bl	8010178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f9ae:	e00c      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9b6:	f023 0301 	bic.w	r3, r3, #1
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f9c2:	e002      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f9c4:	bf00      	nop
 800f9c6:	e000      	b.n	800f9ca <prvProcessReceivedCommands+0x1a6>
					break;
 800f9c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9ca:	4b08      	ldr	r3, [pc, #32]	@ (800f9ec <prvProcessReceivedCommands+0x1c8>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	1d39      	adds	r1, r7, #4
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fe f896 	bl	800db04 <xQueueReceive>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f47f af26 	bne.w	800f82c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f9e0:	bf00      	nop
 800f9e2:	bf00      	nop
 800f9e4:	3730      	adds	r7, #48	@ 0x30
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	2000fa5c 	.word	0x2000fa5c

0800f9f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9f6:	e049      	b.n	800fa8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9f8:	4b2e      	ldr	r3, [pc, #184]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa02:	4b2c      	ldr	r3, [pc, #176]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fd fbb1 	bl	800d178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa24:	f003 0304 	and.w	r3, r3, #4
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d02f      	beq.n	800fa8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	699b      	ldr	r3, [r3, #24]
 800fa30:	693a      	ldr	r2, [r7, #16]
 800fa32:	4413      	add	r3, r2
 800fa34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d90e      	bls.n	800fa5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa4a:	4b1a      	ldr	r3, [pc, #104]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	3304      	adds	r3, #4
 800fa52:	4619      	mov	r1, r3
 800fa54:	4610      	mov	r0, r2
 800fa56:	f7fd fb56 	bl	800d106 <vListInsert>
 800fa5a:	e017      	b.n	800fa8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	2300      	movs	r3, #0
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	2100      	movs	r1, #0
 800fa66:	68f8      	ldr	r0, [r7, #12]
 800fa68:	f7ff fd58 	bl	800f51c <xTimerGenericCommand>
 800fa6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10b      	bne.n	800fa8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	603b      	str	r3, [r7, #0]
}
 800fa86:	bf00      	nop
 800fa88:	bf00      	nop
 800fa8a:	e7fd      	b.n	800fa88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa8c:	4b09      	ldr	r3, [pc, #36]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1b0      	bne.n	800f9f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa96:	4b07      	ldr	r3, [pc, #28]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa9c:	4b06      	ldr	r3, [pc, #24]	@ (800fab8 <prvSwitchTimerLists+0xc8>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a04      	ldr	r2, [pc, #16]	@ (800fab4 <prvSwitchTimerLists+0xc4>)
 800faa2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800faa4:	4a04      	ldr	r2, [pc, #16]	@ (800fab8 <prvSwitchTimerLists+0xc8>)
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	6013      	str	r3, [r2, #0]
}
 800faaa:	bf00      	nop
 800faac:	3718      	adds	r7, #24
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	2000fa54 	.word	0x2000fa54
 800fab8:	2000fa58 	.word	0x2000fa58

0800fabc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fac2:	f000 f969 	bl	800fd98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fac6:	4b15      	ldr	r3, [pc, #84]	@ (800fb1c <prvCheckForValidListAndQueue+0x60>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d120      	bne.n	800fb10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800face:	4814      	ldr	r0, [pc, #80]	@ (800fb20 <prvCheckForValidListAndQueue+0x64>)
 800fad0:	f7fd fac8 	bl	800d064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fad4:	4813      	ldr	r0, [pc, #76]	@ (800fb24 <prvCheckForValidListAndQueue+0x68>)
 800fad6:	f7fd fac5 	bl	800d064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fada:	4b13      	ldr	r3, [pc, #76]	@ (800fb28 <prvCheckForValidListAndQueue+0x6c>)
 800fadc:	4a10      	ldr	r2, [pc, #64]	@ (800fb20 <prvCheckForValidListAndQueue+0x64>)
 800fade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fae0:	4b12      	ldr	r3, [pc, #72]	@ (800fb2c <prvCheckForValidListAndQueue+0x70>)
 800fae2:	4a10      	ldr	r2, [pc, #64]	@ (800fb24 <prvCheckForValidListAndQueue+0x68>)
 800fae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fae6:	2300      	movs	r3, #0
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	4b11      	ldr	r3, [pc, #68]	@ (800fb30 <prvCheckForValidListAndQueue+0x74>)
 800faec:	4a11      	ldr	r2, [pc, #68]	@ (800fb34 <prvCheckForValidListAndQueue+0x78>)
 800faee:	2110      	movs	r1, #16
 800faf0:	200a      	movs	r0, #10
 800faf2:	f7fd fbd5 	bl	800d2a0 <xQueueGenericCreateStatic>
 800faf6:	4603      	mov	r3, r0
 800faf8:	4a08      	ldr	r2, [pc, #32]	@ (800fb1c <prvCheckForValidListAndQueue+0x60>)
 800fafa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fafc:	4b07      	ldr	r3, [pc, #28]	@ (800fb1c <prvCheckForValidListAndQueue+0x60>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d005      	beq.n	800fb10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb04:	4b05      	ldr	r3, [pc, #20]	@ (800fb1c <prvCheckForValidListAndQueue+0x60>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	490b      	ldr	r1, [pc, #44]	@ (800fb38 <prvCheckForValidListAndQueue+0x7c>)
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe fbba 	bl	800e284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb10:	f000 f974 	bl	800fdfc <vPortExitCritical>
}
 800fb14:	bf00      	nop
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	2000fa5c 	.word	0x2000fa5c
 800fb20:	2000fa2c 	.word	0x2000fa2c
 800fb24:	2000fa40 	.word	0x2000fa40
 800fb28:	2000fa54 	.word	0x2000fa54
 800fb2c:	2000fa58 	.word	0x2000fa58
 800fb30:	2000fb08 	.word	0x2000fb08
 800fb34:	2000fa68 	.word	0x2000fa68
 800fb38:	08021fcc 	.word	0x08021fcc

0800fb3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3b04      	subs	r3, #4
 800fb4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3b04      	subs	r3, #4
 800fb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	f023 0201 	bic.w	r2, r3, #1
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3b04      	subs	r3, #4
 800fb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb6c:	4a0c      	ldr	r2, [pc, #48]	@ (800fba0 <pxPortInitialiseStack+0x64>)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3b14      	subs	r3, #20
 800fb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3b04      	subs	r3, #4
 800fb82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f06f 0202 	mvn.w	r2, #2
 800fb8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3b20      	subs	r3, #32
 800fb90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb92:	68fb      	ldr	r3, [r7, #12]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	0800fba5 	.word	0x0800fba5

0800fba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fbae:	4b13      	ldr	r3, [pc, #76]	@ (800fbfc <prvTaskExitError+0x58>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb6:	d00b      	beq.n	800fbd0 <prvTaskExitError+0x2c>
	__asm volatile
 800fbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbbc:	f383 8811 	msr	BASEPRI, r3
 800fbc0:	f3bf 8f6f 	isb	sy
 800fbc4:	f3bf 8f4f 	dsb	sy
 800fbc8:	60fb      	str	r3, [r7, #12]
}
 800fbca:	bf00      	nop
 800fbcc:	bf00      	nop
 800fbce:	e7fd      	b.n	800fbcc <prvTaskExitError+0x28>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	60bb      	str	r3, [r7, #8]
}
 800fbe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fbe4:	bf00      	nop
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d0fc      	beq.n	800fbe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fbec:	bf00      	nop
 800fbee:	bf00      	nop
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	2000003c 	.word	0x2000003c

0800fc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc00:	4b07      	ldr	r3, [pc, #28]	@ (800fc20 <pxCurrentTCBConst2>)
 800fc02:	6819      	ldr	r1, [r3, #0]
 800fc04:	6808      	ldr	r0, [r1, #0]
 800fc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0a:	f380 8809 	msr	PSP, r0
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f04f 0000 	mov.w	r0, #0
 800fc16:	f380 8811 	msr	BASEPRI, r0
 800fc1a:	4770      	bx	lr
 800fc1c:	f3af 8000 	nop.w

0800fc20 <pxCurrentTCBConst2>:
 800fc20:	2000f524 	.word	0x2000f524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop

0800fc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc28:	4808      	ldr	r0, [pc, #32]	@ (800fc4c <prvPortStartFirstTask+0x24>)
 800fc2a:	6800      	ldr	r0, [r0, #0]
 800fc2c:	6800      	ldr	r0, [r0, #0]
 800fc2e:	f380 8808 	msr	MSP, r0
 800fc32:	f04f 0000 	mov.w	r0, #0
 800fc36:	f380 8814 	msr	CONTROL, r0
 800fc3a:	b662      	cpsie	i
 800fc3c:	b661      	cpsie	f
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	df00      	svc	0
 800fc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc4a:	bf00      	nop
 800fc4c:	e000ed08 	.word	0xe000ed08

0800fc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b086      	sub	sp, #24
 800fc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc56:	4b47      	ldr	r3, [pc, #284]	@ (800fd74 <xPortStartScheduler+0x124>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a47      	ldr	r2, [pc, #284]	@ (800fd78 <xPortStartScheduler+0x128>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d10b      	bne.n	800fc78 <xPortStartScheduler+0x28>
	__asm volatile
 800fc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	613b      	str	r3, [r7, #16]
}
 800fc72:	bf00      	nop
 800fc74:	bf00      	nop
 800fc76:	e7fd      	b.n	800fc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc78:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <xPortStartScheduler+0x124>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd7c <xPortStartScheduler+0x12c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d10b      	bne.n	800fc9a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	60fb      	str	r3, [r7, #12]
}
 800fc94:	bf00      	nop
 800fc96:	bf00      	nop
 800fc98:	e7fd      	b.n	800fc96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc9a:	4b39      	ldr	r3, [pc, #228]	@ (800fd80 <xPortStartScheduler+0x130>)
 800fc9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	22ff      	movs	r2, #255	@ 0xff
 800fcaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fcb4:	78fb      	ldrb	r3, [r7, #3]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	4b31      	ldr	r3, [pc, #196]	@ (800fd84 <xPortStartScheduler+0x134>)
 800fcc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcc2:	4b31      	ldr	r3, [pc, #196]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fcc4:	2207      	movs	r2, #7
 800fcc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcc8:	e009      	b.n	800fcde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fcca:	4b2f      	ldr	r3, [pc, #188]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	4a2d      	ldr	r2, [pc, #180]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fcd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcd4:	78fb      	ldrb	r3, [r7, #3]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcde:	78fb      	ldrb	r3, [r7, #3]
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fce6:	2b80      	cmp	r3, #128	@ 0x80
 800fce8:	d0ef      	beq.n	800fcca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcea:	4b27      	ldr	r3, [pc, #156]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f1c3 0307 	rsb	r3, r3, #7
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	d00b      	beq.n	800fd0e <xPortStartScheduler+0xbe>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	60bb      	str	r3, [r7, #8]
}
 800fd08:	bf00      	nop
 800fd0a:	bf00      	nop
 800fd0c:	e7fd      	b.n	800fd0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	021b      	lsls	r3, r3, #8
 800fd14:	4a1c      	ldr	r2, [pc, #112]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fd16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd18:	4b1b      	ldr	r3, [pc, #108]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd20:	4a19      	ldr	r2, [pc, #100]	@ (800fd88 <xPortStartScheduler+0x138>)
 800fd22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd2c:	4b17      	ldr	r3, [pc, #92]	@ (800fd8c <xPortStartScheduler+0x13c>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a16      	ldr	r2, [pc, #88]	@ (800fd8c <xPortStartScheduler+0x13c>)
 800fd32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd38:	4b14      	ldr	r3, [pc, #80]	@ (800fd8c <xPortStartScheduler+0x13c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4a13      	ldr	r2, [pc, #76]	@ (800fd8c <xPortStartScheduler+0x13c>)
 800fd3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd44:	f000 f8da 	bl	800fefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd48:	4b11      	ldr	r3, [pc, #68]	@ (800fd90 <xPortStartScheduler+0x140>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd4e:	f000 f8f9 	bl	800ff44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd52:	4b10      	ldr	r3, [pc, #64]	@ (800fd94 <xPortStartScheduler+0x144>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a0f      	ldr	r2, [pc, #60]	@ (800fd94 <xPortStartScheduler+0x144>)
 800fd58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fd5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd5e:	f7ff ff63 	bl	800fc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd62:	f7fe ff07 	bl	800eb74 <vTaskSwitchContext>
	prvTaskExitError();
 800fd66:	f7ff ff1d 	bl	800fba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	e000ed00 	.word	0xe000ed00
 800fd78:	410fc271 	.word	0x410fc271
 800fd7c:	410fc270 	.word	0x410fc270
 800fd80:	e000e400 	.word	0xe000e400
 800fd84:	2000fb58 	.word	0x2000fb58
 800fd88:	2000fb5c 	.word	0x2000fb5c
 800fd8c:	e000ed20 	.word	0xe000ed20
 800fd90:	2000003c 	.word	0x2000003c
 800fd94:	e000ef34 	.word	0xe000ef34

0800fd98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	607b      	str	r3, [r7, #4]
}
 800fdb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fdb2:	4b10      	ldr	r3, [pc, #64]	@ (800fdf4 <vPortEnterCritical+0x5c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	4a0e      	ldr	r2, [pc, #56]	@ (800fdf4 <vPortEnterCritical+0x5c>)
 800fdba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fdbc:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf4 <vPortEnterCritical+0x5c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d110      	bne.n	800fde6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800fdf8 <vPortEnterCritical+0x60>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00b      	beq.n	800fde6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	603b      	str	r3, [r7, #0]
}
 800fde0:	bf00      	nop
 800fde2:	bf00      	nop
 800fde4:	e7fd      	b.n	800fde2 <vPortEnterCritical+0x4a>
	}
}
 800fde6:	bf00      	nop
 800fde8:	370c      	adds	r7, #12
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	2000003c 	.word	0x2000003c
 800fdf8:	e000ed04 	.word	0xe000ed04

0800fdfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe02:	4b12      	ldr	r3, [pc, #72]	@ (800fe4c <vPortExitCritical+0x50>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10b      	bne.n	800fe22 <vPortExitCritical+0x26>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	607b      	str	r3, [r7, #4]
}
 800fe1c:	bf00      	nop
 800fe1e:	bf00      	nop
 800fe20:	e7fd      	b.n	800fe1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe22:	4b0a      	ldr	r3, [pc, #40]	@ (800fe4c <vPortExitCritical+0x50>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	4a08      	ldr	r2, [pc, #32]	@ (800fe4c <vPortExitCritical+0x50>)
 800fe2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe2c:	4b07      	ldr	r3, [pc, #28]	@ (800fe4c <vPortExitCritical+0x50>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d105      	bne.n	800fe40 <vPortExitCritical+0x44>
 800fe34:	2300      	movs	r3, #0
 800fe36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	f383 8811 	msr	BASEPRI, r3
}
 800fe3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe40:	bf00      	nop
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	2000003c 	.word	0x2000003c

0800fe50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe50:	f3ef 8009 	mrs	r0, PSP
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	4b15      	ldr	r3, [pc, #84]	@ (800feb0 <pxCurrentTCBConst>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	f01e 0f10 	tst.w	lr, #16
 800fe60:	bf08      	it	eq
 800fe62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6a:	6010      	str	r0, [r2, #0]
 800fe6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe74:	f380 8811 	msr	BASEPRI, r0
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f7fe fe78 	bl	800eb74 <vTaskSwitchContext>
 800fe84:	f04f 0000 	mov.w	r0, #0
 800fe88:	f380 8811 	msr	BASEPRI, r0
 800fe8c:	bc09      	pop	{r0, r3}
 800fe8e:	6819      	ldr	r1, [r3, #0]
 800fe90:	6808      	ldr	r0, [r1, #0]
 800fe92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe96:	f01e 0f10 	tst.w	lr, #16
 800fe9a:	bf08      	it	eq
 800fe9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fea0:	f380 8809 	msr	PSP, r0
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	f3af 8000 	nop.w

0800feb0 <pxCurrentTCBConst>:
 800feb0:	2000f524 	.word	0x2000f524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800feb4:	bf00      	nop
 800feb6:	bf00      	nop

0800feb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	607b      	str	r3, [r7, #4]
}
 800fed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fed2:	f7fe fd95 	bl	800ea00 <xTaskIncrementTick>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d003      	beq.n	800fee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fedc:	4b06      	ldr	r3, [pc, #24]	@ (800fef8 <xPortSysTickHandler+0x40>)
 800fede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	2300      	movs	r3, #0
 800fee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	f383 8811 	msr	BASEPRI, r3
}
 800feee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fef0:	bf00      	nop
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	e000ed04 	.word	0xe000ed04

0800fefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fefc:	b480      	push	{r7}
 800fefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff00:	4b0b      	ldr	r3, [pc, #44]	@ (800ff30 <vPortSetupTimerInterrupt+0x34>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff06:	4b0b      	ldr	r3, [pc, #44]	@ (800ff34 <vPortSetupTimerInterrupt+0x38>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff38 <vPortSetupTimerInterrupt+0x3c>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4a0a      	ldr	r2, [pc, #40]	@ (800ff3c <vPortSetupTimerInterrupt+0x40>)
 800ff12:	fba2 2303 	umull	r2, r3, r2, r3
 800ff16:	099b      	lsrs	r3, r3, #6
 800ff18:	4a09      	ldr	r2, [pc, #36]	@ (800ff40 <vPortSetupTimerInterrupt+0x44>)
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff1e:	4b04      	ldr	r3, [pc, #16]	@ (800ff30 <vPortSetupTimerInterrupt+0x34>)
 800ff20:	2207      	movs	r2, #7
 800ff22:	601a      	str	r2, [r3, #0]
}
 800ff24:	bf00      	nop
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	e000e010 	.word	0xe000e010
 800ff34:	e000e018 	.word	0xe000e018
 800ff38:	20000018 	.word	0x20000018
 800ff3c:	10624dd3 	.word	0x10624dd3
 800ff40:	e000e014 	.word	0xe000e014

0800ff44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ff54 <vPortEnableVFP+0x10>
 800ff48:	6801      	ldr	r1, [r0, #0]
 800ff4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ff4e:	6001      	str	r1, [r0, #0]
 800ff50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff52:	bf00      	nop
 800ff54:	e000ed88 	.word	0xe000ed88

0800ff58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff5e:	f3ef 8305 	mrs	r3, IPSR
 800ff62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b0f      	cmp	r3, #15
 800ff68:	d915      	bls.n	800ff96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff6a:	4a18      	ldr	r2, [pc, #96]	@ (800ffcc <vPortValidateInterruptPriority+0x74>)
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	4413      	add	r3, r2
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff74:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <vPortValidateInterruptPriority+0x78>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	7afa      	ldrb	r2, [r7, #11]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d20b      	bcs.n	800ff96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	607b      	str	r3, [r7, #4]
}
 800ff90:	bf00      	nop
 800ff92:	bf00      	nop
 800ff94:	e7fd      	b.n	800ff92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff96:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <vPortValidateInterruptPriority+0x7c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffd8 <vPortValidateInterruptPriority+0x80>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d90b      	bls.n	800ffbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ffa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffaa:	f383 8811 	msr	BASEPRI, r3
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	f3bf 8f4f 	dsb	sy
 800ffb6:	603b      	str	r3, [r7, #0]
}
 800ffb8:	bf00      	nop
 800ffba:	bf00      	nop
 800ffbc:	e7fd      	b.n	800ffba <vPortValidateInterruptPriority+0x62>
	}
 800ffbe:	bf00      	nop
 800ffc0:	3714      	adds	r7, #20
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	e000e3f0 	.word	0xe000e3f0
 800ffd0:	2000fb58 	.word	0x2000fb58
 800ffd4:	e000ed0c 	.word	0xe000ed0c
 800ffd8:	2000fb5c 	.word	0x2000fb5c

0800ffdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08a      	sub	sp, #40	@ 0x28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffe8:	f7fe fc3c 	bl	800e864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffec:	4b5c      	ldr	r3, [pc, #368]	@ (8010160 <pvPortMalloc+0x184>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fff4:	f000 f924 	bl	8010240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fff8:	4b5a      	ldr	r3, [pc, #360]	@ (8010164 <pvPortMalloc+0x188>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4013      	ands	r3, r2
 8010000:	2b00      	cmp	r3, #0
 8010002:	f040 8095 	bne.w	8010130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d01e      	beq.n	801004a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801000c:	2208      	movs	r2, #8
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4413      	add	r3, r2
 8010012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f003 0307 	and.w	r3, r3, #7
 801001a:	2b00      	cmp	r3, #0
 801001c:	d015      	beq.n	801004a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f023 0307 	bic.w	r3, r3, #7
 8010024:	3308      	adds	r3, #8
 8010026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f003 0307 	and.w	r3, r3, #7
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00b      	beq.n	801004a <pvPortMalloc+0x6e>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010036:	f383 8811 	msr	BASEPRI, r3
 801003a:	f3bf 8f6f 	isb	sy
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	617b      	str	r3, [r7, #20]
}
 8010044:	bf00      	nop
 8010046:	bf00      	nop
 8010048:	e7fd      	b.n	8010046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d06f      	beq.n	8010130 <pvPortMalloc+0x154>
 8010050:	4b45      	ldr	r3, [pc, #276]	@ (8010168 <pvPortMalloc+0x18c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	429a      	cmp	r2, r3
 8010058:	d86a      	bhi.n	8010130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801005a:	4b44      	ldr	r3, [pc, #272]	@ (801016c <pvPortMalloc+0x190>)
 801005c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801005e:	4b43      	ldr	r3, [pc, #268]	@ (801016c <pvPortMalloc+0x190>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010064:	e004      	b.n	8010070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	429a      	cmp	r2, r3
 8010078:	d903      	bls.n	8010082 <pvPortMalloc+0xa6>
 801007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1f1      	bne.n	8010066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010082:	4b37      	ldr	r3, [pc, #220]	@ (8010160 <pvPortMalloc+0x184>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010088:	429a      	cmp	r2, r3
 801008a:	d051      	beq.n	8010130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2208      	movs	r2, #8
 8010092:	4413      	add	r3, r2
 8010094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801009e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	1ad2      	subs	r2, r2, r3
 80100a6:	2308      	movs	r3, #8
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d920      	bls.n	80100f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4413      	add	r3, r2
 80100b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	f003 0307 	and.w	r3, r3, #7
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <pvPortMalloc+0xfc>
	__asm volatile
 80100c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c4:	f383 8811 	msr	BASEPRI, r3
 80100c8:	f3bf 8f6f 	isb	sy
 80100cc:	f3bf 8f4f 	dsb	sy
 80100d0:	613b      	str	r3, [r7, #16]
}
 80100d2:	bf00      	nop
 80100d4:	bf00      	nop
 80100d6:	e7fd      	b.n	80100d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	1ad2      	subs	r2, r2, r3
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100ea:	69b8      	ldr	r0, [r7, #24]
 80100ec:	f000 f90a 	bl	8010304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010168 <pvPortMalloc+0x18c>)
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010168 <pvPortMalloc+0x18c>)
 80100fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010168 <pvPortMalloc+0x18c>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	4b1b      	ldr	r3, [pc, #108]	@ (8010170 <pvPortMalloc+0x194>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	429a      	cmp	r2, r3
 8010108:	d203      	bcs.n	8010112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801010a:	4b17      	ldr	r3, [pc, #92]	@ (8010168 <pvPortMalloc+0x18c>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a18      	ldr	r2, [pc, #96]	@ (8010170 <pvPortMalloc+0x194>)
 8010110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010114:	685a      	ldr	r2, [r3, #4]
 8010116:	4b13      	ldr	r3, [pc, #76]	@ (8010164 <pvPortMalloc+0x188>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	431a      	orrs	r2, r3
 801011c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801011e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010122:	2200      	movs	r2, #0
 8010124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010126:	4b13      	ldr	r3, [pc, #76]	@ (8010174 <pvPortMalloc+0x198>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	4a11      	ldr	r2, [pc, #68]	@ (8010174 <pvPortMalloc+0x198>)
 801012e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010130:	f7fe fba6 	bl	800e880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	f003 0307 	and.w	r3, r3, #7
 801013a:	2b00      	cmp	r3, #0
 801013c:	d00b      	beq.n	8010156 <pvPortMalloc+0x17a>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	60fb      	str	r3, [r7, #12]
}
 8010150:	bf00      	nop
 8010152:	bf00      	nop
 8010154:	e7fd      	b.n	8010152 <pvPortMalloc+0x176>
	return pvReturn;
 8010156:	69fb      	ldr	r3, [r7, #28]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3728      	adds	r7, #40	@ 0x28
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200139e8 	.word	0x200139e8
 8010164:	200139fc 	.word	0x200139fc
 8010168:	200139ec 	.word	0x200139ec
 801016c:	200139e0 	.word	0x200139e0
 8010170:	200139f0 	.word	0x200139f0
 8010174:	200139f4 	.word	0x200139f4

08010178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d04f      	beq.n	801022a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801018a:	2308      	movs	r3, #8
 801018c:	425b      	negs	r3, r3
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	4413      	add	r3, r2
 8010192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	4b25      	ldr	r3, [pc, #148]	@ (8010234 <vPortFree+0xbc>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4013      	ands	r3, r2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10b      	bne.n	80101be <vPortFree+0x46>
	__asm volatile
 80101a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	60fb      	str	r3, [r7, #12]
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	e7fd      	b.n	80101ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00b      	beq.n	80101de <vPortFree+0x66>
	__asm volatile
 80101c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	60bb      	str	r3, [r7, #8]
}
 80101d8:	bf00      	nop
 80101da:	bf00      	nop
 80101dc:	e7fd      	b.n	80101da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	4b14      	ldr	r3, [pc, #80]	@ (8010234 <vPortFree+0xbc>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4013      	ands	r3, r2
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d01e      	beq.n	801022a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d11a      	bne.n	801022a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010234 <vPortFree+0xbc>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	43db      	mvns	r3, r3
 80101fe:	401a      	ands	r2, r3
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010204:	f7fe fb2e 	bl	800e864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	4b0a      	ldr	r3, [pc, #40]	@ (8010238 <vPortFree+0xc0>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4413      	add	r3, r2
 8010212:	4a09      	ldr	r2, [pc, #36]	@ (8010238 <vPortFree+0xc0>)
 8010214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010216:	6938      	ldr	r0, [r7, #16]
 8010218:	f000 f874 	bl	8010304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801021c:	4b07      	ldr	r3, [pc, #28]	@ (801023c <vPortFree+0xc4>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3301      	adds	r3, #1
 8010222:	4a06      	ldr	r2, [pc, #24]	@ (801023c <vPortFree+0xc4>)
 8010224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010226:	f7fe fb2b 	bl	800e880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801022a:	bf00      	nop
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	200139fc 	.word	0x200139fc
 8010238:	200139ec 	.word	0x200139ec
 801023c:	200139f8 	.word	0x200139f8

08010240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010246:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 801024a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801024c:	4b27      	ldr	r3, [pc, #156]	@ (80102ec <prvHeapInit+0xac>)
 801024e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f003 0307 	and.w	r3, r3, #7
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00c      	beq.n	8010274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	3307      	adds	r3, #7
 801025e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f023 0307 	bic.w	r3, r3, #7
 8010266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010268:	68ba      	ldr	r2, [r7, #8]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	4a1f      	ldr	r2, [pc, #124]	@ (80102ec <prvHeapInit+0xac>)
 8010270:	4413      	add	r3, r2
 8010272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010278:	4a1d      	ldr	r2, [pc, #116]	@ (80102f0 <prvHeapInit+0xb0>)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801027e:	4b1c      	ldr	r3, [pc, #112]	@ (80102f0 <prvHeapInit+0xb0>)
 8010280:	2200      	movs	r2, #0
 8010282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	4413      	add	r3, r2
 801028a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801028c:	2208      	movs	r2, #8
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	1a9b      	subs	r3, r3, r2
 8010292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f023 0307 	bic.w	r3, r3, #7
 801029a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4a15      	ldr	r2, [pc, #84]	@ (80102f4 <prvHeapInit+0xb4>)
 80102a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80102a2:	4b14      	ldr	r3, [pc, #80]	@ (80102f4 <prvHeapInit+0xb4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102aa:	4b12      	ldr	r3, [pc, #72]	@ (80102f4 <prvHeapInit+0xb4>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2200      	movs	r2, #0
 80102b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	1ad2      	subs	r2, r2, r3
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102c0:	4b0c      	ldr	r3, [pc, #48]	@ (80102f4 <prvHeapInit+0xb4>)
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4a0a      	ldr	r2, [pc, #40]	@ (80102f8 <prvHeapInit+0xb8>)
 80102ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	4a09      	ldr	r2, [pc, #36]	@ (80102fc <prvHeapInit+0xbc>)
 80102d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102d8:	4b09      	ldr	r3, [pc, #36]	@ (8010300 <prvHeapInit+0xc0>)
 80102da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80102de:	601a      	str	r2, [r3, #0]
}
 80102e0:	bf00      	nop
 80102e2:	3714      	adds	r7, #20
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	2000fb60 	.word	0x2000fb60
 80102f0:	200139e0 	.word	0x200139e0
 80102f4:	200139e8 	.word	0x200139e8
 80102f8:	200139f0 	.word	0x200139f0
 80102fc:	200139ec 	.word	0x200139ec
 8010300:	200139fc 	.word	0x200139fc

08010304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801030c:	4b28      	ldr	r3, [pc, #160]	@ (80103b0 <prvInsertBlockIntoFreeList+0xac>)
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	e002      	b.n	8010318 <prvInsertBlockIntoFreeList+0x14>
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	429a      	cmp	r2, r3
 8010320:	d8f7      	bhi.n	8010312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	68ba      	ldr	r2, [r7, #8]
 801032c:	4413      	add	r3, r2
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	429a      	cmp	r2, r3
 8010332:	d108      	bne.n	8010346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	441a      	add	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	68ba      	ldr	r2, [r7, #8]
 8010350:	441a      	add	r2, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d118      	bne.n	801038c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	4b15      	ldr	r3, [pc, #84]	@ (80103b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d00d      	beq.n	8010382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	685a      	ldr	r2, [r3, #4]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	441a      	add	r2, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	e008      	b.n	8010394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010382:	4b0c      	ldr	r3, [pc, #48]	@ (80103b4 <prvInsertBlockIntoFreeList+0xb0>)
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e003      	b.n	8010394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	429a      	cmp	r2, r3
 801039a:	d002      	beq.n	80103a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103a2:	bf00      	nop
 80103a4:	3714      	adds	r7, #20
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	200139e0 	.word	0x200139e0
 80103b4:	200139e8 	.word	0x200139e8

080103b8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80103c2:	f007 ff25 	bl	8018210 <sys_timeouts_sleeptime>
 80103c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ce:	d10b      	bne.n	80103e8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80103d0:	4813      	ldr	r0, [pc, #76]	@ (8010420 <tcpip_timeouts_mbox_fetch+0x68>)
 80103d2:	f00c fed8 	bl	801d186 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80103d6:	2200      	movs	r2, #0
 80103d8:	6839      	ldr	r1, [r7, #0]
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f00c fe60 	bl	801d0a0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80103e0:	480f      	ldr	r0, [pc, #60]	@ (8010420 <tcpip_timeouts_mbox_fetch+0x68>)
 80103e2:	f00c fec1 	bl	801d168 <sys_mutex_lock>
    return;
 80103e6:	e018      	b.n	801041a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d102      	bne.n	80103f4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80103ee:	f007 fed5 	bl	801819c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80103f2:	e7e6      	b.n	80103c2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80103f4:	480a      	ldr	r0, [pc, #40]	@ (8010420 <tcpip_timeouts_mbox_fetch+0x68>)
 80103f6:	f00c fec6 	bl	801d186 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f00c fe4e 	bl	801d0a0 <sys_arch_mbox_fetch>
 8010404:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010406:	4806      	ldr	r0, [pc, #24]	@ (8010420 <tcpip_timeouts_mbox_fetch+0x68>)
 8010408:	f00c feae 	bl	801d168 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010412:	d102      	bne.n	801041a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010414:	f007 fec2 	bl	801819c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010418:	e7d3      	b.n	80103c2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20013a0c 	.word	0x20013a0c

08010424 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801042c:	4810      	ldr	r0, [pc, #64]	@ (8010470 <tcpip_thread+0x4c>)
 801042e:	f00c fe9b 	bl	801d168 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010432:	4b10      	ldr	r3, [pc, #64]	@ (8010474 <tcpip_thread+0x50>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d005      	beq.n	8010446 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801043a:	4b0e      	ldr	r3, [pc, #56]	@ (8010474 <tcpip_thread+0x50>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a0e      	ldr	r2, [pc, #56]	@ (8010478 <tcpip_thread+0x54>)
 8010440:	6812      	ldr	r2, [r2, #0]
 8010442:	4610      	mov	r0, r2
 8010444:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010446:	f107 030c 	add.w	r3, r7, #12
 801044a:	4619      	mov	r1, r3
 801044c:	480b      	ldr	r0, [pc, #44]	@ (801047c <tcpip_thread+0x58>)
 801044e:	f7ff ffb3 	bl	80103b8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d106      	bne.n	8010466 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010458:	4b09      	ldr	r3, [pc, #36]	@ (8010480 <tcpip_thread+0x5c>)
 801045a:	2291      	movs	r2, #145	@ 0x91
 801045c:	4909      	ldr	r1, [pc, #36]	@ (8010484 <tcpip_thread+0x60>)
 801045e:	480a      	ldr	r0, [pc, #40]	@ (8010488 <tcpip_thread+0x64>)
 8010460:	f00e f86a 	bl	801e538 <iprintf>
      continue;
 8010464:	e003      	b.n	801046e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	4618      	mov	r0, r3
 801046a:	f000 f80f 	bl	801048c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801046e:	e7ea      	b.n	8010446 <tcpip_thread+0x22>
 8010470:	20013a0c 	.word	0x20013a0c
 8010474:	20013a00 	.word	0x20013a00
 8010478:	20013a04 	.word	0x20013a04
 801047c:	20013a08 	.word	0x20013a08
 8010480:	08021fd4 	.word	0x08021fd4
 8010484:	08022004 	.word	0x08022004
 8010488:	08022024 	.word	0x08022024

0801048c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	2b02      	cmp	r3, #2
 801049a:	d026      	beq.n	80104ea <tcpip_thread_handle_msg+0x5e>
 801049c:	2b02      	cmp	r3, #2
 801049e:	dc2b      	bgt.n	80104f8 <tcpip_thread_handle_msg+0x6c>
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d002      	beq.n	80104aa <tcpip_thread_handle_msg+0x1e>
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d015      	beq.n	80104d4 <tcpip_thread_handle_msg+0x48>
 80104a8:	e026      	b.n	80104f8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	6850      	ldr	r0, [r2, #4]
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	6892      	ldr	r2, [r2, #8]
 80104b6:	4611      	mov	r1, r2
 80104b8:	4798      	blx	r3
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d004      	beq.n	80104ca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	4618      	mov	r0, r3
 80104c6:	f002 f805 	bl	80124d4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80104ca:	6879      	ldr	r1, [r7, #4]
 80104cc:	2009      	movs	r0, #9
 80104ce:	f001 f951 	bl	8011774 <memp_free>
      break;
 80104d2:	e018      	b.n	8010506 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	6892      	ldr	r2, [r2, #8]
 80104dc:	4610      	mov	r0, r2
 80104de:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80104e0:	6879      	ldr	r1, [r7, #4]
 80104e2:	2008      	movs	r0, #8
 80104e4:	f001 f946 	bl	8011774 <memp_free>
      break;
 80104e8:	e00d      	b.n	8010506 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	6892      	ldr	r2, [r2, #8]
 80104f2:	4610      	mov	r0, r2
 80104f4:	4798      	blx	r3
      break;
 80104f6:	e006      	b.n	8010506 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80104f8:	4b05      	ldr	r3, [pc, #20]	@ (8010510 <tcpip_thread_handle_msg+0x84>)
 80104fa:	22cf      	movs	r2, #207	@ 0xcf
 80104fc:	4905      	ldr	r1, [pc, #20]	@ (8010514 <tcpip_thread_handle_msg+0x88>)
 80104fe:	4806      	ldr	r0, [pc, #24]	@ (8010518 <tcpip_thread_handle_msg+0x8c>)
 8010500:	f00e f81a 	bl	801e538 <iprintf>
      break;
 8010504:	bf00      	nop
  }
}
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	08021fd4 	.word	0x08021fd4
 8010514:	08022004 	.word	0x08022004
 8010518:	08022024 	.word	0x08022024

0801051c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010528:	481a      	ldr	r0, [pc, #104]	@ (8010594 <tcpip_inpkt+0x78>)
 801052a:	f00c fdea 	bl	801d102 <sys_mbox_valid>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d105      	bne.n	8010540 <tcpip_inpkt+0x24>
 8010534:	4b18      	ldr	r3, [pc, #96]	@ (8010598 <tcpip_inpkt+0x7c>)
 8010536:	22fc      	movs	r2, #252	@ 0xfc
 8010538:	4918      	ldr	r1, [pc, #96]	@ (801059c <tcpip_inpkt+0x80>)
 801053a:	4819      	ldr	r0, [pc, #100]	@ (80105a0 <tcpip_inpkt+0x84>)
 801053c:	f00d fffc 	bl	801e538 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010540:	2009      	movs	r0, #9
 8010542:	f001 f8a1 	bl	8011688 <memp_malloc>
 8010546:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d102      	bne.n	8010554 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801054e:	f04f 33ff 	mov.w	r3, #4294967295
 8010552:	e01a      	b.n	801058a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	2200      	movs	r2, #0
 8010558:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801056c:	6979      	ldr	r1, [r7, #20]
 801056e:	4809      	ldr	r0, [pc, #36]	@ (8010594 <tcpip_inpkt+0x78>)
 8010570:	f00c fd7c 	bl	801d06c <sys_mbox_trypost>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d006      	beq.n	8010588 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801057a:	6979      	ldr	r1, [r7, #20]
 801057c:	2009      	movs	r0, #9
 801057e:	f001 f8f9 	bl	8011774 <memp_free>
    return ERR_MEM;
 8010582:	f04f 33ff 	mov.w	r3, #4294967295
 8010586:	e000      	b.n	801058a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010588:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	20013a08 	.word	0x20013a08
 8010598:	08021fd4 	.word	0x08021fd4
 801059c:	0802204c 	.word	0x0802204c
 80105a0:	08022024 	.word	0x08022024

080105a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80105b4:	f003 0318 	and.w	r3, r3, #24
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d006      	beq.n	80105ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80105bc:	4a08      	ldr	r2, [pc, #32]	@ (80105e0 <tcpip_input+0x3c>)
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff ffab 	bl	801051c <tcpip_inpkt>
 80105c6:	4603      	mov	r3, r0
 80105c8:	e005      	b.n	80105d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80105ca:	4a06      	ldr	r2, [pc, #24]	@ (80105e4 <tcpip_input+0x40>)
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7ff ffa4 	bl	801051c <tcpip_inpkt>
 80105d4:	4603      	mov	r3, r0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	0801ce8d 	.word	0x0801ce8d
 80105e4:	0801bd59 	.word	0x0801bd59

080105e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80105f2:	4819      	ldr	r0, [pc, #100]	@ (8010658 <tcpip_try_callback+0x70>)
 80105f4:	f00c fd85 	bl	801d102 <sys_mbox_valid>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d106      	bne.n	801060c <tcpip_try_callback+0x24>
 80105fe:	4b17      	ldr	r3, [pc, #92]	@ (801065c <tcpip_try_callback+0x74>)
 8010600:	f240 125d 	movw	r2, #349	@ 0x15d
 8010604:	4916      	ldr	r1, [pc, #88]	@ (8010660 <tcpip_try_callback+0x78>)
 8010606:	4817      	ldr	r0, [pc, #92]	@ (8010664 <tcpip_try_callback+0x7c>)
 8010608:	f00d ff96 	bl	801e538 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801060c:	2008      	movs	r0, #8
 801060e:	f001 f83b 	bl	8011688 <memp_malloc>
 8010612:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d102      	bne.n	8010620 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	e017      	b.n	8010650 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2201      	movs	r2, #1
 8010624:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	683a      	ldr	r2, [r7, #0]
 8010630:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010632:	68f9      	ldr	r1, [r7, #12]
 8010634:	4808      	ldr	r0, [pc, #32]	@ (8010658 <tcpip_try_callback+0x70>)
 8010636:	f00c fd19 	bl	801d06c <sys_mbox_trypost>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d006      	beq.n	801064e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010640:	68f9      	ldr	r1, [r7, #12]
 8010642:	2008      	movs	r0, #8
 8010644:	f001 f896 	bl	8011774 <memp_free>
    return ERR_MEM;
 8010648:	f04f 33ff 	mov.w	r3, #4294967295
 801064c:	e000      	b.n	8010650 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	20013a08 	.word	0x20013a08
 801065c:	08021fd4 	.word	0x08021fd4
 8010660:	0802204c 	.word	0x0802204c
 8010664:	08022024 	.word	0x08022024

08010668 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af02      	add	r7, sp, #8
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010672:	f000 fb5e 	bl	8010d32 <lwip_init>

  tcpip_init_done = initfunc;
 8010676:	4a17      	ldr	r2, [pc, #92]	@ (80106d4 <tcpip_init+0x6c>)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801067c:	4a16      	ldr	r2, [pc, #88]	@ (80106d8 <tcpip_init+0x70>)
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010682:	2106      	movs	r1, #6
 8010684:	4815      	ldr	r0, [pc, #84]	@ (80106dc <tcpip_init+0x74>)
 8010686:	f00c fcd7 	bl	801d038 <sys_mbox_new>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d006      	beq.n	801069e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010690:	4b13      	ldr	r3, [pc, #76]	@ (80106e0 <tcpip_init+0x78>)
 8010692:	f240 2261 	movw	r2, #609	@ 0x261
 8010696:	4913      	ldr	r1, [pc, #76]	@ (80106e4 <tcpip_init+0x7c>)
 8010698:	4813      	ldr	r0, [pc, #76]	@ (80106e8 <tcpip_init+0x80>)
 801069a:	f00d ff4d 	bl	801e538 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801069e:	4813      	ldr	r0, [pc, #76]	@ (80106ec <tcpip_init+0x84>)
 80106a0:	f00c fd4c 	bl	801d13c <sys_mutex_new>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d006      	beq.n	80106b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80106aa:	4b0d      	ldr	r3, [pc, #52]	@ (80106e0 <tcpip_init+0x78>)
 80106ac:	f240 2265 	movw	r2, #613	@ 0x265
 80106b0:	490f      	ldr	r1, [pc, #60]	@ (80106f0 <tcpip_init+0x88>)
 80106b2:	480d      	ldr	r0, [pc, #52]	@ (80106e8 <tcpip_init+0x80>)
 80106b4:	f00d ff40 	bl	801e538 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80106b8:	2301      	movs	r3, #1
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80106c0:	2200      	movs	r2, #0
 80106c2:	490c      	ldr	r1, [pc, #48]	@ (80106f4 <tcpip_init+0x8c>)
 80106c4:	480c      	ldr	r0, [pc, #48]	@ (80106f8 <tcpip_init+0x90>)
 80106c6:	f00c fd6b 	bl	801d1a0 <sys_thread_new>
}
 80106ca:	bf00      	nop
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	20013a00 	.word	0x20013a00
 80106d8:	20013a04 	.word	0x20013a04
 80106dc:	20013a08 	.word	0x20013a08
 80106e0:	08021fd4 	.word	0x08021fd4
 80106e4:	0802205c 	.word	0x0802205c
 80106e8:	08022024 	.word	0x08022024
 80106ec:	20013a0c 	.word	0x20013a0c
 80106f0:	08022080 	.word	0x08022080
 80106f4:	08010425 	.word	0x08010425
 80106f8:	080220a4 	.word	0x080220a4

080106fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010706:	88fb      	ldrh	r3, [r7, #6]
 8010708:	021b      	lsls	r3, r3, #8
 801070a:	b21a      	sxth	r2, r3
 801070c:	88fb      	ldrh	r3, [r7, #6]
 801070e:	0a1b      	lsrs	r3, r3, #8
 8010710:	b29b      	uxth	r3, r3
 8010712:	b21b      	sxth	r3, r3
 8010714:	4313      	orrs	r3, r2
 8010716:	b21b      	sxth	r3, r3
 8010718:	b29b      	uxth	r3, r3
}
 801071a:	4618      	mov	r0, r3
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010726:	b480      	push	{r7}
 8010728:	b083      	sub	sp, #12
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	061a      	lsls	r2, r3, #24
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	021b      	lsls	r3, r3, #8
 8010736:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801073a:	431a      	orrs	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	0a1b      	lsrs	r3, r3, #8
 8010740:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010744:	431a      	orrs	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	0e1b      	lsrs	r3, r3, #24
 801074a:	4313      	orrs	r3, r2
}
 801074c:	4618      	mov	r0, r3
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8010758:	b480      	push	{r7}
 801075a:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 801075c:	bf00      	nop
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	4603      	mov	r3, r0
 8010770:	6039      	str	r1, [r7, #0]
 8010772:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	2b01      	cmp	r3, #1
 8010778:	d80f      	bhi.n	801079a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d006      	beq.n	801078e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8010780:	79fb      	ldrb	r3, [r7, #7]
 8010782:	4909      	ldr	r1, [pc, #36]	@ (80107a8 <dns_setserver+0x40>)
 8010784:	683a      	ldr	r2, [r7, #0]
 8010786:	6812      	ldr	r2, [r2, #0]
 8010788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 801078c:	e005      	b.n	801079a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 801078e:	79fb      	ldrb	r3, [r7, #7]
 8010790:	4905      	ldr	r1, [pc, #20]	@ (80107a8 <dns_setserver+0x40>)
 8010792:	4a06      	ldr	r2, [pc, #24]	@ (80107ac <dns_setserver+0x44>)
 8010794:	6812      	ldr	r2, [r2, #0]
 8010796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801079a:	bf00      	nop
 801079c:	370c      	adds	r7, #12
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	20013e90 	.word	0x20013e90
 80107ac:	0802521c 	.word	0x0802521c

080107b0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80107b4:	f000 faa8 	bl	8010d08 <dns_check_entries>
}
 80107b8:	bf00      	nop
 80107ba:	bd80      	pop	{r7, pc}

080107bc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b090      	sub	sp, #64	@ 0x40
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80107c6:	79fa      	ldrb	r2, [r7, #7]
 80107c8:	4613      	mov	r3, r2
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	4413      	add	r3, r2
 80107ce:	011b      	lsls	r3, r3, #4
 80107d0:	4a6c      	ldr	r2, [pc, #432]	@ (8010984 <dns_send+0x1c8>)
 80107d2:	4413      	add	r3, r2
 80107d4:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	7adb      	ldrb	r3, [r3, #11]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d906      	bls.n	80107ec <dns_send+0x30>
 80107de:	4b6a      	ldr	r3, [pc, #424]	@ (8010988 <dns_send+0x1cc>)
 80107e0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 80107e4:	4969      	ldr	r1, [pc, #420]	@ (801098c <dns_send+0x1d0>)
 80107e6:	486a      	ldr	r0, [pc, #424]	@ (8010990 <dns_send+0x1d4>)
 80107e8:	f00d fea6 	bl	801e538 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80107ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ee:	7adb      	ldrb	r3, [r3, #11]
 80107f0:	461a      	mov	r2, r3
 80107f2:	4b68      	ldr	r3, [pc, #416]	@ (8010994 <dns_send+0x1d8>)
 80107f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d109      	bne.n	8010810 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80107fc:	79fb      	ldrb	r3, [r7, #7]
 80107fe:	2100      	movs	r1, #0
 8010800:	4618      	mov	r0, r3
 8010802:	f000 f8cb 	bl	801099c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8010806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010808:	2200      	movs	r2, #0
 801080a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	e0b4      	b.n	801097a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8010810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010812:	3310      	adds	r3, #16
 8010814:	4618      	mov	r0, r3
 8010816:	f7ef fd2b 	bl	8000270 <strlen>
 801081a:	4603      	mov	r3, r0
 801081c:	b29b      	uxth	r3, r3
 801081e:	3312      	adds	r3, #18
 8010820:	b29b      	uxth	r3, r3
 8010822:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010826:	4619      	mov	r1, r3
 8010828:	2036      	movs	r0, #54	@ 0x36
 801082a:	f001 fb6f 	bl	8011f0c <pbuf_alloc>
 801082e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8010830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 8095 	beq.w	8010962 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8010838:	f107 0310 	add.w	r3, r7, #16
 801083c:	220c      	movs	r2, #12
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f00d ffad 	bl	801e7a0 <memset>
    hdr.id = lwip_htons(entry->txid);
 8010846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010848:	891b      	ldrh	r3, [r3, #8]
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff ff56 	bl	80106fc <lwip_htons>
 8010850:	4603      	mov	r3, r0
 8010852:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8010854:	2301      	movs	r3, #1
 8010856:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8010858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801085c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801085e:	f107 0310 	add.w	r3, r7, #16
 8010862:	220c      	movs	r2, #12
 8010864:	4619      	mov	r1, r3
 8010866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010868:	f002 f8e8 	bl	8012a3c <pbuf_take>
    hostname = entry->name;
 801086c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086e:	3310      	adds	r3, #16
 8010870:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 8010872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010874:	3b01      	subs	r3, #1
 8010876:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8010878:	230c      	movs	r3, #12
 801087a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 801087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087e:	3301      	adds	r3, #1
 8010880:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8010882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010884:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8010886:	2300      	movs	r3, #0
 8010888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801088c:	e007      	b.n	801089e <dns_send+0xe2>
        ++n;
 801088e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010892:	3301      	adds	r3, #1
 8010894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8010898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089a:	3301      	adds	r3, #1
 801089c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801089e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80108a4:	d003      	beq.n	80108ae <dns_send+0xf2>
 80108a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1ef      	bne.n	801088e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80108ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80108b6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80108b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108bc:	4413      	add	r3, r2
 80108be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80108c2:	4293      	cmp	r3, r2
 80108c4:	dc53      	bgt.n	801096e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80108c6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80108ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108cc:	4619      	mov	r1, r3
 80108ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108d0:	f002 f9e2 	bl	8012c98 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80108d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108d6:	3301      	adds	r3, #1
 80108d8:	b29b      	uxth	r3, r3
 80108da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80108dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108e0:	f002 f93e 	bl	8012b60 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80108e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108ec:	4413      	add	r3, r2
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	3301      	adds	r3, #1
 80108f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 80108f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1bf      	bne.n	801087c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80108fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108fe:	2200      	movs	r2, #0
 8010900:	4619      	mov	r1, r3
 8010902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010904:	f002 f9c8 	bl	8012c98 <pbuf_put_at>
    query_idx++;
 8010908:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801090a:	3301      	adds	r3, #1
 801090c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801090e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010912:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8010914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010918:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801091a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801091c:	f107 010c 	add.w	r1, r7, #12
 8010920:	2204      	movs	r2, #4
 8010922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010924:	f002 f91c 	bl	8012b60 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8010928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092a:	7bdb      	ldrb	r3, [r3, #15]
 801092c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8010930:	2335      	movs	r3, #53	@ 0x35
 8010932:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8010934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010936:	7adb      	ldrb	r3, [r3, #11]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	4a16      	ldr	r2, [pc, #88]	@ (8010994 <dns_send+0x1d8>)
 801093c:	4413      	add	r3, r2
 801093e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8010940:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010944:	4a14      	ldr	r2, [pc, #80]	@ (8010998 <dns_send+0x1dc>)
 8010946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801094a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801094c:	69fa      	ldr	r2, [r7, #28]
 801094e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010950:	f007 fe58 	bl	8018604 <udp_sendto>
 8010954:	4603      	mov	r3, r0
 8010956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 801095a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801095c:	f001 fdba 	bl	80124d4 <pbuf_free>
 8010960:	e002      	b.n	8010968 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8010962:	23ff      	movs	r3, #255	@ 0xff
 8010964:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8010968:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801096c:	e005      	b.n	801097a <dns_send+0x1be>
        goto overflow_return;
 801096e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8010970:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010972:	f001 fdaf 	bl	80124d4 <pbuf_free>
  return ERR_VAL;
 8010976:	f06f 0305 	mvn.w	r3, #5
}
 801097a:	4618      	mov	r0, r3
 801097c:	3740      	adds	r7, #64	@ 0x40
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	20013a20 	.word	0x20013a20
 8010988:	080220b4 	.word	0x080220b4
 801098c:	080220e4 	.word	0x080220e4
 8010990:	080220fc 	.word	0x080220fc
 8010994:	20013e90 	.word	0x20013e90
 8010998:	20013a10 	.word	0x20013a10

0801099c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801099c:	b590      	push	{r4, r7, lr}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	4603      	mov	r3, r0
 80109a4:	6039      	str	r1, [r7, #0]
 80109a6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80109a8:	2300      	movs	r3, #0
 80109aa:	73fb      	strb	r3, [r7, #15]
 80109ac:	e03d      	b.n	8010a2a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80109ae:	7bfa      	ldrb	r2, [r7, #15]
 80109b0:	4957      	ldr	r1, [pc, #348]	@ (8010b10 <dns_call_found+0x174>)
 80109b2:	4613      	mov	r3, r2
 80109b4:	005b      	lsls	r3, r3, #1
 80109b6:	4413      	add	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	440b      	add	r3, r1
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d030      	beq.n	8010a24 <dns_call_found+0x88>
 80109c2:	7bfa      	ldrb	r2, [r7, #15]
 80109c4:	4952      	ldr	r1, [pc, #328]	@ (8010b10 <dns_call_found+0x174>)
 80109c6:	4613      	mov	r3, r2
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	4413      	add	r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	440b      	add	r3, r1
 80109d0:	3308      	adds	r3, #8
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	79fa      	ldrb	r2, [r7, #7]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d124      	bne.n	8010a24 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80109da:	7bfa      	ldrb	r2, [r7, #15]
 80109dc:	494c      	ldr	r1, [pc, #304]	@ (8010b10 <dns_call_found+0x174>)
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	440b      	add	r3, r1
 80109e8:	681c      	ldr	r4, [r3, #0]
 80109ea:	79fa      	ldrb	r2, [r7, #7]
 80109ec:	4613      	mov	r3, r2
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	4413      	add	r3, r2
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	3310      	adds	r3, #16
 80109f6:	4a47      	ldr	r2, [pc, #284]	@ (8010b14 <dns_call_found+0x178>)
 80109f8:	1898      	adds	r0, r3, r2
 80109fa:	7bfa      	ldrb	r2, [r7, #15]
 80109fc:	4944      	ldr	r1, [pc, #272]	@ (8010b10 <dns_call_found+0x174>)
 80109fe:	4613      	mov	r3, r2
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	440b      	add	r3, r1
 8010a08:	3304      	adds	r3, #4
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	6839      	ldr	r1, [r7, #0]
 8010a10:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8010a12:	7bfa      	ldrb	r2, [r7, #15]
 8010a14:	493e      	ldr	r1, [pc, #248]	@ (8010b10 <dns_call_found+0x174>)
 8010a16:	4613      	mov	r3, r2
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	4413      	add	r3, r2
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	440b      	add	r3, r1
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	3301      	adds	r3, #1
 8010a28:	73fb      	strb	r3, [r7, #15]
 8010a2a:	7bfb      	ldrb	r3, [r7, #15]
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	d9be      	bls.n	80109ae <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010a30:	2300      	movs	r3, #0
 8010a32:	73fb      	strb	r3, [r7, #15]
 8010a34:	e031      	b.n	8010a9a <dns_call_found+0xfe>
    if (i == idx) {
 8010a36:	7bfa      	ldrb	r2, [r7, #15]
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d029      	beq.n	8010a92 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8010a3e:	7bfa      	ldrb	r2, [r7, #15]
 8010a40:	4934      	ldr	r1, [pc, #208]	@ (8010b14 <dns_call_found+0x178>)
 8010a42:	4613      	mov	r3, r2
 8010a44:	011b      	lsls	r3, r3, #4
 8010a46:	4413      	add	r3, r2
 8010a48:	011b      	lsls	r3, r3, #4
 8010a4a:	440b      	add	r3, r1
 8010a4c:	330a      	adds	r3, #10
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d11f      	bne.n	8010a94 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8010a54:	7bfa      	ldrb	r2, [r7, #15]
 8010a56:	492f      	ldr	r1, [pc, #188]	@ (8010b14 <dns_call_found+0x178>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	011b      	lsls	r3, r3, #4
 8010a5c:	4413      	add	r3, r2
 8010a5e:	011b      	lsls	r3, r3, #4
 8010a60:	440b      	add	r3, r1
 8010a62:	330f      	adds	r3, #15
 8010a64:	7819      	ldrb	r1, [r3, #0]
 8010a66:	79fa      	ldrb	r2, [r7, #7]
 8010a68:	482a      	ldr	r0, [pc, #168]	@ (8010b14 <dns_call_found+0x178>)
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	011b      	lsls	r3, r3, #4
 8010a6e:	4413      	add	r3, r2
 8010a70:	011b      	lsls	r3, r3, #4
 8010a72:	4403      	add	r3, r0
 8010a74:	330f      	adds	r3, #15
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	4299      	cmp	r1, r3
 8010a7a:	d10b      	bne.n	8010a94 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	4925      	ldr	r1, [pc, #148]	@ (8010b14 <dns_call_found+0x178>)
 8010a80:	4613      	mov	r3, r2
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	4413      	add	r3, r2
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	440b      	add	r3, r1
 8010a8a:	330f      	adds	r3, #15
 8010a8c:	2204      	movs	r2, #4
 8010a8e:	701a      	strb	r2, [r3, #0]
        break;
 8010a90:	e006      	b.n	8010aa0 <dns_call_found+0x104>
      continue; /* only check other requests */
 8010a92:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010a94:	7bfb      	ldrb	r3, [r7, #15]
 8010a96:	3301      	adds	r3, #1
 8010a98:	73fb      	strb	r3, [r7, #15]
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
 8010a9c:	2b03      	cmp	r3, #3
 8010a9e:	d9ca      	bls.n	8010a36 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8010aa0:	79fa      	ldrb	r2, [r7, #7]
 8010aa2:	491c      	ldr	r1, [pc, #112]	@ (8010b14 <dns_call_found+0x178>)
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	011b      	lsls	r3, r3, #4
 8010aa8:	4413      	add	r3, r2
 8010aaa:	011b      	lsls	r3, r3, #4
 8010aac:	440b      	add	r3, r1
 8010aae:	330f      	adds	r3, #15
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	2b03      	cmp	r3, #3
 8010ab4:	d827      	bhi.n	8010b06 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8010ab6:	79fa      	ldrb	r2, [r7, #7]
 8010ab8:	4916      	ldr	r1, [pc, #88]	@ (8010b14 <dns_call_found+0x178>)
 8010aba:	4613      	mov	r3, r2
 8010abc:	011b      	lsls	r3, r3, #4
 8010abe:	4413      	add	r3, r2
 8010ac0:	011b      	lsls	r3, r3, #4
 8010ac2:	440b      	add	r3, r1
 8010ac4:	330f      	adds	r3, #15
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	461a      	mov	r2, r3
 8010aca:	4b13      	ldr	r3, [pc, #76]	@ (8010b18 <dns_call_found+0x17c>)
 8010acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f008 f863 	bl	8018b9c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8010ad6:	79fa      	ldrb	r2, [r7, #7]
 8010ad8:	490e      	ldr	r1, [pc, #56]	@ (8010b14 <dns_call_found+0x178>)
 8010ada:	4613      	mov	r3, r2
 8010adc:	011b      	lsls	r3, r3, #4
 8010ade:	4413      	add	r3, r2
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	440b      	add	r3, r1
 8010ae4:	330f      	adds	r3, #15
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	4619      	mov	r1, r3
 8010aea:	4b0b      	ldr	r3, [pc, #44]	@ (8010b18 <dns_call_found+0x17c>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8010af2:	79fa      	ldrb	r2, [r7, #7]
 8010af4:	4907      	ldr	r1, [pc, #28]	@ (8010b14 <dns_call_found+0x178>)
 8010af6:	4613      	mov	r3, r2
 8010af8:	011b      	lsls	r3, r3, #4
 8010afa:	4413      	add	r3, r2
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	440b      	add	r3, r1
 8010b00:	330f      	adds	r3, #15
 8010b02:	2204      	movs	r2, #4
 8010b04:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8010b06:	bf00      	nop
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd90      	pop	{r4, r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	20013e60 	.word	0x20013e60
 8010b14:	20013a20 	.word	0x20013a20
 8010b18:	20013a10 	.word	0x20013a10

08010b1c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8010b22:	f00c fc3d 	bl	801d3a0 <rand>
 8010b26:	4603      	mov	r3, r0
 8010b28:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	71fb      	strb	r3, [r7, #7]
 8010b2e:	e01a      	b.n	8010b66 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8010b30:	79fa      	ldrb	r2, [r7, #7]
 8010b32:	4911      	ldr	r1, [pc, #68]	@ (8010b78 <dns_create_txid+0x5c>)
 8010b34:	4613      	mov	r3, r2
 8010b36:	011b      	lsls	r3, r3, #4
 8010b38:	4413      	add	r3, r2
 8010b3a:	011b      	lsls	r3, r3, #4
 8010b3c:	440b      	add	r3, r1
 8010b3e:	330a      	adds	r3, #10
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d10c      	bne.n	8010b60 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8010b46:	79fa      	ldrb	r2, [r7, #7]
 8010b48:	490b      	ldr	r1, [pc, #44]	@ (8010b78 <dns_create_txid+0x5c>)
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	011b      	lsls	r3, r3, #4
 8010b4e:	4413      	add	r3, r2
 8010b50:	011b      	lsls	r3, r3, #4
 8010b52:	440b      	add	r3, r1
 8010b54:	3308      	adds	r3, #8
 8010b56:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8010b58:	88ba      	ldrh	r2, [r7, #4]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d100      	bne.n	8010b60 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8010b5e:	e7e0      	b.n	8010b22 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8010b60:	79fb      	ldrb	r3, [r7, #7]
 8010b62:	3301      	adds	r3, #1
 8010b64:	71fb      	strb	r3, [r7, #7]
 8010b66:	79fb      	ldrb	r3, [r7, #7]
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d9e1      	bls.n	8010b30 <dns_create_txid+0x14>
    }
  }

  return txid;
 8010b6c:	88bb      	ldrh	r3, [r7, #4]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	20013a20 	.word	0x20013a20

08010b7c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b085      	sub	sp, #20
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8010b84:	2300      	movs	r3, #0
 8010b86:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00d      	beq.n	8010baa <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	7adb      	ldrb	r3, [r3, #11]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d109      	bne.n	8010baa <dns_backupserver_available+0x2e>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	7adb      	ldrb	r3, [r3, #11]
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	4a06      	ldr	r2, [pc, #24]	@ (8010bb8 <dns_backupserver_available+0x3c>)
 8010b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d001      	beq.n	8010baa <dns_backupserver_available+0x2e>
      ret = 1;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3714      	adds	r7, #20
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr
 8010bb8:	20013e90 	.word	0x20013e90

08010bbc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8010bc6:	79fa      	ldrb	r2, [r7, #7]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	4413      	add	r3, r2
 8010bce:	011b      	lsls	r3, r3, #4
 8010bd0:	4a48      	ldr	r2, [pc, #288]	@ (8010cf4 <dns_check_entry+0x138>)
 8010bd2:	4413      	add	r3, r2
 8010bd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8010bd6:	79fb      	ldrb	r3, [r7, #7]
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d906      	bls.n	8010bea <dns_check_entry+0x2e>
 8010bdc:	4b46      	ldr	r3, [pc, #280]	@ (8010cf8 <dns_check_entry+0x13c>)
 8010bde:	f240 421c 	movw	r2, #1052	@ 0x41c
 8010be2:	4946      	ldr	r1, [pc, #280]	@ (8010cfc <dns_check_entry+0x140>)
 8010be4:	4846      	ldr	r0, [pc, #280]	@ (8010d00 <dns_check_entry+0x144>)
 8010be6:	f00d fca7 	bl	801e538 <iprintf>

  switch (entry->state) {
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	7a9b      	ldrb	r3, [r3, #10]
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d86f      	bhi.n	8010cd2 <dns_check_entry+0x116>
 8010bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bf8 <dns_check_entry+0x3c>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010ce3 	.word	0x08010ce3
 8010bfc:	08010c09 	.word	0x08010c09
 8010c00:	08010c3b 	.word	0x08010c3b
 8010c04:	08010cb1 	.word	0x08010cb1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8010c08:	f7ff ff88 	bl	8010b1c <dns_create_txid>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2202      	movs	r2, #2
 8010c18:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2201      	movs	r2, #1
 8010c24:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8010c2c:	79fb      	ldrb	r3, [r7, #7]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7ff fdc4 	bl	80107bc <dns_send>
 8010c34:	4603      	mov	r3, r0
 8010c36:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8010c38:	e058      	b.n	8010cec <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	7b1b      	ldrb	r3, [r3, #12]
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	731a      	strb	r2, [r3, #12]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	7b1b      	ldrb	r3, [r3, #12]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d14b      	bne.n	8010ce6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	7b5b      	ldrb	r3, [r3, #13]
 8010c52:	3301      	adds	r3, #1
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	735a      	strb	r2, [r3, #13]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	7b5b      	ldrb	r3, [r3, #13]
 8010c5e:	2b04      	cmp	r3, #4
 8010c60:	d11b      	bne.n	8010c9a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7ff ff8a 	bl	8010b7c <dns_backupserver_available>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00c      	beq.n	8010c88 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	7adb      	ldrb	r3, [r3, #11]
 8010c72:	3301      	adds	r3, #1
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2200      	movs	r2, #0
 8010c84:	735a      	strb	r2, [r3, #13]
 8010c86:	e00c      	b.n	8010ca2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8010c88:	79fb      	ldrb	r3, [r7, #7]
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7ff fe85 	bl	801099c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2200      	movs	r2, #0
 8010c96:	729a      	strb	r2, [r3, #10]
            break;
 8010c98:	e028      	b.n	8010cec <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	7b5a      	ldrb	r2, [r3, #13]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8010ca2:	79fb      	ldrb	r3, [r7, #7]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fd89 	bl	80107bc <dns_send>
 8010caa:	4603      	mov	r3, r0
 8010cac:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8010cae:	e01a      	b.n	8010ce6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d008      	beq.n	8010cca <dns_check_entry+0x10e>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	1e5a      	subs	r2, r3, #1
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10f      	bne.n	8010cea <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	729a      	strb	r2, [r3, #10]
      }
      break;
 8010cd0:	e00b      	b.n	8010cea <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8010cd2:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <dns_check_entry+0x13c>)
 8010cd4:	f240 425b 	movw	r2, #1115	@ 0x45b
 8010cd8:	490a      	ldr	r1, [pc, #40]	@ (8010d04 <dns_check_entry+0x148>)
 8010cda:	4809      	ldr	r0, [pc, #36]	@ (8010d00 <dns_check_entry+0x144>)
 8010cdc:	f00d fc2c 	bl	801e538 <iprintf>
      break;
 8010ce0:	e004      	b.n	8010cec <dns_check_entry+0x130>
      break;
 8010ce2:	bf00      	nop
 8010ce4:	e002      	b.n	8010cec <dns_check_entry+0x130>
      break;
 8010ce6:	bf00      	nop
 8010ce8:	e000      	b.n	8010cec <dns_check_entry+0x130>
      break;
 8010cea:	bf00      	nop
  }
}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20013a20 	.word	0x20013a20
 8010cf8:	080220b4 	.word	0x080220b4
 8010cfc:	08022124 	.word	0x08022124
 8010d00:	080220fc 	.word	0x080220fc
 8010d04:	08022140 	.word	0x08022140

08010d08 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010d0e:	2300      	movs	r3, #0
 8010d10:	71fb      	strb	r3, [r7, #7]
 8010d12:	e006      	b.n	8010d22 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff ff50 	bl	8010bbc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010d1c:	79fb      	ldrb	r3, [r7, #7]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	71fb      	strb	r3, [r7, #7]
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	d9f5      	bls.n	8010d14 <dns_check_entries+0xc>
  }
}
 8010d28:	bf00      	nop
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b082      	sub	sp, #8
 8010d36:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010d3c:	f00c f9f2 	bl	801d124 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010d40:	f000 f8d6 	bl	8010ef0 <mem_init>
  memp_init();
 8010d44:	f000 fc32 	bl	80115ac <memp_init>
  pbuf_init();
  netif_init();
 8010d48:	f000 fd3e 	bl	80117c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010d4c:	f007 fa98 	bl	8018280 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010d50:	f001 ffc4 	bl	8012cdc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8010d54:	f7ff fd00 	bl	8010758 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010d58:	f007 f9d8 	bl	801810c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010d6e:	4b05      	ldr	r3, [pc, #20]	@ (8010d84 <ptr_to_mem+0x20>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	88fb      	ldrh	r3, [r7, #6]
 8010d74:	4413      	add	r3, r2
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	20014504 	.word	0x20014504

08010d88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010d90:	4b05      	ldr	r3, [pc, #20]	@ (8010da8 <mem_to_ptr+0x20>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	b29b      	uxth	r3, r3
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	370c      	adds	r7, #12
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	20014504 	.word	0x20014504

08010dac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010dac:	b590      	push	{r4, r7, lr}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010db4:	4b45      	ldr	r3, [pc, #276]	@ (8010ecc <plug_holes+0x120>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d206      	bcs.n	8010dcc <plug_holes+0x20>
 8010dbe:	4b44      	ldr	r3, [pc, #272]	@ (8010ed0 <plug_holes+0x124>)
 8010dc0:	f240 12df 	movw	r2, #479	@ 0x1df
 8010dc4:	4943      	ldr	r1, [pc, #268]	@ (8010ed4 <plug_holes+0x128>)
 8010dc6:	4844      	ldr	r0, [pc, #272]	@ (8010ed8 <plug_holes+0x12c>)
 8010dc8:	f00d fbb6 	bl	801e538 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010dcc:	4b43      	ldr	r3, [pc, #268]	@ (8010edc <plug_holes+0x130>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d306      	bcc.n	8010de4 <plug_holes+0x38>
 8010dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8010ed0 <plug_holes+0x124>)
 8010dd8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010ddc:	4940      	ldr	r1, [pc, #256]	@ (8010ee0 <plug_holes+0x134>)
 8010dde:	483e      	ldr	r0, [pc, #248]	@ (8010ed8 <plug_holes+0x12c>)
 8010de0:	f00d fbaa 	bl	801e538 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	791b      	ldrb	r3, [r3, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d006      	beq.n	8010dfa <plug_holes+0x4e>
 8010dec:	4b38      	ldr	r3, [pc, #224]	@ (8010ed0 <plug_holes+0x124>)
 8010dee:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010df2:	493c      	ldr	r1, [pc, #240]	@ (8010ee4 <plug_holes+0x138>)
 8010df4:	4838      	ldr	r0, [pc, #224]	@ (8010ed8 <plug_holes+0x12c>)
 8010df6:	f00d fb9f 	bl	801e538 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e02:	d906      	bls.n	8010e12 <plug_holes+0x66>
 8010e04:	4b32      	ldr	r3, [pc, #200]	@ (8010ed0 <plug_holes+0x124>)
 8010e06:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010e0a:	4937      	ldr	r1, [pc, #220]	@ (8010ee8 <plug_holes+0x13c>)
 8010e0c:	4832      	ldr	r0, [pc, #200]	@ (8010ed8 <plug_holes+0x12c>)
 8010e0e:	f00d fb93 	bl	801e538 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff ffa4 	bl	8010d64 <ptr_to_mem>
 8010e1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d024      	beq.n	8010e70 <plug_holes+0xc4>
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	791b      	ldrb	r3, [r3, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d120      	bne.n	8010e70 <plug_holes+0xc4>
 8010e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8010edc <plug_holes+0x130>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d01b      	beq.n	8010e70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010e38:	4b2c      	ldr	r3, [pc, #176]	@ (8010eec <plug_holes+0x140>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d102      	bne.n	8010e48 <plug_holes+0x9c>
      lfree = mem;
 8010e42:	4a2a      	ldr	r2, [pc, #168]	@ (8010eec <plug_holes+0x140>)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	881a      	ldrh	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	881b      	ldrh	r3, [r3, #0]
 8010e54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e58:	d00a      	beq.n	8010e70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7ff ff80 	bl	8010d64 <ptr_to_mem>
 8010e64:	4604      	mov	r4, r0
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7ff ff8e 	bl	8010d88 <mem_to_ptr>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	885b      	ldrh	r3, [r3, #2]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff ff75 	bl	8010d64 <ptr_to_mem>
 8010e7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d01f      	beq.n	8010ec4 <plug_holes+0x118>
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	791b      	ldrb	r3, [r3, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d11b      	bne.n	8010ec4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010e8c:	4b17      	ldr	r3, [pc, #92]	@ (8010eec <plug_holes+0x140>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d102      	bne.n	8010e9c <plug_holes+0xf0>
      lfree = pmem;
 8010e96:	4a15      	ldr	r2, [pc, #84]	@ (8010eec <plug_holes+0x140>)
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	881a      	ldrh	r2, [r3, #0]
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010eac:	d00a      	beq.n	8010ec4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff ff56 	bl	8010d64 <ptr_to_mem>
 8010eb8:	4604      	mov	r4, r0
 8010eba:	68b8      	ldr	r0, [r7, #8]
 8010ebc:	f7ff ff64 	bl	8010d88 <mem_to_ptr>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010ec4:	bf00      	nop
 8010ec6:	3714      	adds	r7, #20
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd90      	pop	{r4, r7, pc}
 8010ecc:	20014504 	.word	0x20014504
 8010ed0:	08022160 	.word	0x08022160
 8010ed4:	08022190 	.word	0x08022190
 8010ed8:	080221a8 	.word	0x080221a8
 8010edc:	20014508 	.word	0x20014508
 8010ee0:	080221d0 	.word	0x080221d0
 8010ee4:	080221ec 	.word	0x080221ec
 8010ee8:	08022208 	.word	0x08022208
 8010eec:	20014510 	.word	0x20014510

08010ef0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8010f74 <mem_init+0x84>)
 8010ef8:	3303      	adds	r3, #3
 8010efa:	f023 0303 	bic.w	r3, r3, #3
 8010efe:	461a      	mov	r2, r3
 8010f00:	4b1d      	ldr	r3, [pc, #116]	@ (8010f78 <mem_init+0x88>)
 8010f02:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010f04:	4b1c      	ldr	r3, [pc, #112]	@ (8010f78 <mem_init+0x88>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010f10:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010f1e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010f22:	f7ff ff1f 	bl	8010d64 <ptr_to_mem>
 8010f26:	4603      	mov	r3, r0
 8010f28:	4a14      	ldr	r2, [pc, #80]	@ (8010f7c <mem_init+0x8c>)
 8010f2a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010f2c:	4b13      	ldr	r3, [pc, #76]	@ (8010f7c <mem_init+0x8c>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2201      	movs	r2, #1
 8010f32:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010f34:	4b11      	ldr	r3, [pc, #68]	@ (8010f7c <mem_init+0x8c>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010f3c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8010f7c <mem_init+0x8c>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010f46:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010f48:	4b0b      	ldr	r3, [pc, #44]	@ (8010f78 <mem_init+0x88>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8010f80 <mem_init+0x90>)
 8010f4e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010f50:	480c      	ldr	r0, [pc, #48]	@ (8010f84 <mem_init+0x94>)
 8010f52:	f00c f8f3 	bl	801d13c <sys_mutex_new>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d006      	beq.n	8010f6a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f88 <mem_init+0x98>)
 8010f5e:	f240 221f 	movw	r2, #543	@ 0x21f
 8010f62:	490a      	ldr	r1, [pc, #40]	@ (8010f8c <mem_init+0x9c>)
 8010f64:	480a      	ldr	r0, [pc, #40]	@ (8010f90 <mem_init+0xa0>)
 8010f66:	f00d fae7 	bl	801e538 <iprintf>
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	20013eb0 	.word	0x20013eb0
 8010f78:	20014504 	.word	0x20014504
 8010f7c:	20014508 	.word	0x20014508
 8010f80:	20014510 	.word	0x20014510
 8010f84:	2001450c 	.word	0x2001450c
 8010f88:	08022160 	.word	0x08022160
 8010f8c:	08022234 	.word	0x08022234
 8010f90:	080221a8 	.word	0x080221a8

08010f94 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7ff fef3 	bl	8010d88 <mem_to_ptr>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	881b      	ldrh	r3, [r3, #0]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7ff feda 	bl	8010d64 <ptr_to_mem>
 8010fb0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	885b      	ldrh	r3, [r3, #2]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff fed4 	bl	8010d64 <ptr_to_mem>
 8010fbc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010fc6:	d818      	bhi.n	8010ffa <mem_link_valid+0x66>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	885b      	ldrh	r3, [r3, #2]
 8010fcc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010fd0:	d813      	bhi.n	8010ffa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010fd6:	8afa      	ldrh	r2, [r7, #22]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d004      	beq.n	8010fe6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	8afa      	ldrh	r2, [r7, #22]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d109      	bne.n	8010ffa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010fe6:	4b08      	ldr	r3, [pc, #32]	@ (8011008 <mem_link_valid+0x74>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d006      	beq.n	8010ffe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	885b      	ldrh	r3, [r3, #2]
 8010ff4:	8afa      	ldrh	r2, [r7, #22]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d001      	beq.n	8010ffe <mem_link_valid+0x6a>
    return 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	e000      	b.n	8011000 <mem_link_valid+0x6c>
  }
  return 1;
 8010ffe:	2301      	movs	r3, #1
}
 8011000:	4618      	mov	r0, r3
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	20014508 	.word	0x20014508

0801100c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d070      	beq.n	80110fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f003 0303 	and.w	r3, r3, #3
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00d      	beq.n	8011040 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011024:	4b37      	ldr	r3, [pc, #220]	@ (8011104 <mem_free+0xf8>)
 8011026:	f240 2273 	movw	r2, #627	@ 0x273
 801102a:	4937      	ldr	r1, [pc, #220]	@ (8011108 <mem_free+0xfc>)
 801102c:	4837      	ldr	r0, [pc, #220]	@ (801110c <mem_free+0x100>)
 801102e:	f00d fa83 	bl	801e538 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011032:	f00c f8d5 	bl	801d1e0 <sys_arch_protect>
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f00c f8df 	bl	801d1fc <sys_arch_unprotect>
    return;
 801103e:	e05e      	b.n	80110fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3b08      	subs	r3, #8
 8011044:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011046:	4b32      	ldr	r3, [pc, #200]	@ (8011110 <mem_free+0x104>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	69fa      	ldr	r2, [r7, #28]
 801104c:	429a      	cmp	r2, r3
 801104e:	d306      	bcc.n	801105e <mem_free+0x52>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f103 020c 	add.w	r2, r3, #12
 8011056:	4b2f      	ldr	r3, [pc, #188]	@ (8011114 <mem_free+0x108>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d90d      	bls.n	801107a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801105e:	4b29      	ldr	r3, [pc, #164]	@ (8011104 <mem_free+0xf8>)
 8011060:	f240 227f 	movw	r2, #639	@ 0x27f
 8011064:	492c      	ldr	r1, [pc, #176]	@ (8011118 <mem_free+0x10c>)
 8011066:	4829      	ldr	r0, [pc, #164]	@ (801110c <mem_free+0x100>)
 8011068:	f00d fa66 	bl	801e538 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801106c:	f00c f8b8 	bl	801d1e0 <sys_arch_protect>
 8011070:	6138      	str	r0, [r7, #16]
 8011072:	6938      	ldr	r0, [r7, #16]
 8011074:	f00c f8c2 	bl	801d1fc <sys_arch_unprotect>
    return;
 8011078:	e041      	b.n	80110fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801107a:	4828      	ldr	r0, [pc, #160]	@ (801111c <mem_free+0x110>)
 801107c:	f00c f874 	bl	801d168 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	791b      	ldrb	r3, [r3, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d110      	bne.n	80110aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011088:	4b1e      	ldr	r3, [pc, #120]	@ (8011104 <mem_free+0xf8>)
 801108a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801108e:	4924      	ldr	r1, [pc, #144]	@ (8011120 <mem_free+0x114>)
 8011090:	481e      	ldr	r0, [pc, #120]	@ (801110c <mem_free+0x100>)
 8011092:	f00d fa51 	bl	801e538 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011096:	4821      	ldr	r0, [pc, #132]	@ (801111c <mem_free+0x110>)
 8011098:	f00c f875 	bl	801d186 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801109c:	f00c f8a0 	bl	801d1e0 <sys_arch_protect>
 80110a0:	6178      	str	r0, [r7, #20]
 80110a2:	6978      	ldr	r0, [r7, #20]
 80110a4:	f00c f8aa 	bl	801d1fc <sys_arch_unprotect>
    return;
 80110a8:	e029      	b.n	80110fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80110aa:	69f8      	ldr	r0, [r7, #28]
 80110ac:	f7ff ff72 	bl	8010f94 <mem_link_valid>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d110      	bne.n	80110d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80110b6:	4b13      	ldr	r3, [pc, #76]	@ (8011104 <mem_free+0xf8>)
 80110b8:	f240 2295 	movw	r2, #661	@ 0x295
 80110bc:	4919      	ldr	r1, [pc, #100]	@ (8011124 <mem_free+0x118>)
 80110be:	4813      	ldr	r0, [pc, #76]	@ (801110c <mem_free+0x100>)
 80110c0:	f00d fa3a 	bl	801e538 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80110c4:	4815      	ldr	r0, [pc, #84]	@ (801111c <mem_free+0x110>)
 80110c6:	f00c f85e 	bl	801d186 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110ca:	f00c f889 	bl	801d1e0 <sys_arch_protect>
 80110ce:	61b8      	str	r0, [r7, #24]
 80110d0:	69b8      	ldr	r0, [r7, #24]
 80110d2:	f00c f893 	bl	801d1fc <sys_arch_unprotect>
    return;
 80110d6:	e012      	b.n	80110fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	2200      	movs	r2, #0
 80110dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80110de:	4b12      	ldr	r3, [pc, #72]	@ (8011128 <mem_free+0x11c>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	69fa      	ldr	r2, [r7, #28]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d202      	bcs.n	80110ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80110e8:	4a0f      	ldr	r2, [pc, #60]	@ (8011128 <mem_free+0x11c>)
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80110ee:	69f8      	ldr	r0, [r7, #28]
 80110f0:	f7ff fe5c 	bl	8010dac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80110f4:	4809      	ldr	r0, [pc, #36]	@ (801111c <mem_free+0x110>)
 80110f6:	f00c f846 	bl	801d186 <sys_mutex_unlock>
 80110fa:	e000      	b.n	80110fe <mem_free+0xf2>
    return;
 80110fc:	bf00      	nop
}
 80110fe:	3720      	adds	r7, #32
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	08022160 	.word	0x08022160
 8011108:	08022250 	.word	0x08022250
 801110c:	080221a8 	.word	0x080221a8
 8011110:	20014504 	.word	0x20014504
 8011114:	20014508 	.word	0x20014508
 8011118:	08022274 	.word	0x08022274
 801111c:	2001450c 	.word	0x2001450c
 8011120:	08022290 	.word	0x08022290
 8011124:	080222b8 	.word	0x080222b8
 8011128:	20014510 	.word	0x20014510

0801112c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b088      	sub	sp, #32
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	460b      	mov	r3, r1
 8011136:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011138:	887b      	ldrh	r3, [r7, #2]
 801113a:	3303      	adds	r3, #3
 801113c:	b29b      	uxth	r3, r3
 801113e:	f023 0303 	bic.w	r3, r3, #3
 8011142:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011144:	8bfb      	ldrh	r3, [r7, #30]
 8011146:	2b0b      	cmp	r3, #11
 8011148:	d801      	bhi.n	801114e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801114a:	230c      	movs	r3, #12
 801114c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801114e:	8bfb      	ldrh	r3, [r7, #30]
 8011150:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011154:	d803      	bhi.n	801115e <mem_trim+0x32>
 8011156:	8bfa      	ldrh	r2, [r7, #30]
 8011158:	887b      	ldrh	r3, [r7, #2]
 801115a:	429a      	cmp	r2, r3
 801115c:	d201      	bcs.n	8011162 <mem_trim+0x36>
    return NULL;
 801115e:	2300      	movs	r3, #0
 8011160:	e0d8      	b.n	8011314 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011162:	4b6e      	ldr	r3, [pc, #440]	@ (801131c <mem_trim+0x1f0>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	429a      	cmp	r2, r3
 801116a:	d304      	bcc.n	8011176 <mem_trim+0x4a>
 801116c:	4b6c      	ldr	r3, [pc, #432]	@ (8011320 <mem_trim+0x1f4>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	429a      	cmp	r2, r3
 8011174:	d306      	bcc.n	8011184 <mem_trim+0x58>
 8011176:	4b6b      	ldr	r3, [pc, #428]	@ (8011324 <mem_trim+0x1f8>)
 8011178:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801117c:	496a      	ldr	r1, [pc, #424]	@ (8011328 <mem_trim+0x1fc>)
 801117e:	486b      	ldr	r0, [pc, #428]	@ (801132c <mem_trim+0x200>)
 8011180:	f00d f9da 	bl	801e538 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011184:	4b65      	ldr	r3, [pc, #404]	@ (801131c <mem_trim+0x1f0>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	429a      	cmp	r2, r3
 801118c:	d304      	bcc.n	8011198 <mem_trim+0x6c>
 801118e:	4b64      	ldr	r3, [pc, #400]	@ (8011320 <mem_trim+0x1f4>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	429a      	cmp	r2, r3
 8011196:	d307      	bcc.n	80111a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011198:	f00c f822 	bl	801d1e0 <sys_arch_protect>
 801119c:	60b8      	str	r0, [r7, #8]
 801119e:	68b8      	ldr	r0, [r7, #8]
 80111a0:	f00c f82c 	bl	801d1fc <sys_arch_unprotect>
    return rmem;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	e0b5      	b.n	8011314 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3b08      	subs	r3, #8
 80111ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80111ae:	69b8      	ldr	r0, [r7, #24]
 80111b0:	f7ff fdea 	bl	8010d88 <mem_to_ptr>
 80111b4:	4603      	mov	r3, r0
 80111b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	881a      	ldrh	r2, [r3, #0]
 80111bc:	8afb      	ldrh	r3, [r7, #22]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	3b08      	subs	r3, #8
 80111c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80111c6:	8bfa      	ldrh	r2, [r7, #30]
 80111c8:	8abb      	ldrh	r3, [r7, #20]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d906      	bls.n	80111dc <mem_trim+0xb0>
 80111ce:	4b55      	ldr	r3, [pc, #340]	@ (8011324 <mem_trim+0x1f8>)
 80111d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80111d4:	4956      	ldr	r1, [pc, #344]	@ (8011330 <mem_trim+0x204>)
 80111d6:	4855      	ldr	r0, [pc, #340]	@ (801132c <mem_trim+0x200>)
 80111d8:	f00d f9ae 	bl	801e538 <iprintf>
  if (newsize > size) {
 80111dc:	8bfa      	ldrh	r2, [r7, #30]
 80111de:	8abb      	ldrh	r3, [r7, #20]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d901      	bls.n	80111e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80111e4:	2300      	movs	r3, #0
 80111e6:	e095      	b.n	8011314 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80111e8:	8bfa      	ldrh	r2, [r7, #30]
 80111ea:	8abb      	ldrh	r3, [r7, #20]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d101      	bne.n	80111f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	e08f      	b.n	8011314 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80111f4:	484f      	ldr	r0, [pc, #316]	@ (8011334 <mem_trim+0x208>)
 80111f6:	f00b ffb7 	bl	801d168 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	881b      	ldrh	r3, [r3, #0]
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff fdb0 	bl	8010d64 <ptr_to_mem>
 8011204:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	791b      	ldrb	r3, [r3, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d13f      	bne.n	801128e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	881b      	ldrh	r3, [r3, #0]
 8011212:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011216:	d106      	bne.n	8011226 <mem_trim+0xfa>
 8011218:	4b42      	ldr	r3, [pc, #264]	@ (8011324 <mem_trim+0x1f8>)
 801121a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801121e:	4946      	ldr	r1, [pc, #280]	@ (8011338 <mem_trim+0x20c>)
 8011220:	4842      	ldr	r0, [pc, #264]	@ (801132c <mem_trim+0x200>)
 8011222:	f00d f989 	bl	801e538 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801122c:	8afa      	ldrh	r2, [r7, #22]
 801122e:	8bfb      	ldrh	r3, [r7, #30]
 8011230:	4413      	add	r3, r2
 8011232:	b29b      	uxth	r3, r3
 8011234:	3308      	adds	r3, #8
 8011236:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011238:	4b40      	ldr	r3, [pc, #256]	@ (801133c <mem_trim+0x210>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	693a      	ldr	r2, [r7, #16]
 801123e:	429a      	cmp	r2, r3
 8011240:	d106      	bne.n	8011250 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011242:	89fb      	ldrh	r3, [r7, #14]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff fd8d 	bl	8010d64 <ptr_to_mem>
 801124a:	4603      	mov	r3, r0
 801124c:	4a3b      	ldr	r2, [pc, #236]	@ (801133c <mem_trim+0x210>)
 801124e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011250:	89fb      	ldrh	r3, [r7, #14]
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff fd86 	bl	8010d64 <ptr_to_mem>
 8011258:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	2200      	movs	r2, #0
 801125e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	89ba      	ldrh	r2, [r7, #12]
 8011264:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	8afa      	ldrh	r2, [r7, #22]
 801126a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	89fa      	ldrh	r2, [r7, #14]
 8011270:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	881b      	ldrh	r3, [r3, #0]
 8011276:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801127a:	d047      	beq.n	801130c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fd6f 	bl	8010d64 <ptr_to_mem>
 8011286:	4602      	mov	r2, r0
 8011288:	89fb      	ldrh	r3, [r7, #14]
 801128a:	8053      	strh	r3, [r2, #2]
 801128c:	e03e      	b.n	801130c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801128e:	8bfb      	ldrh	r3, [r7, #30]
 8011290:	f103 0214 	add.w	r2, r3, #20
 8011294:	8abb      	ldrh	r3, [r7, #20]
 8011296:	429a      	cmp	r2, r3
 8011298:	d838      	bhi.n	801130c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801129a:	8afa      	ldrh	r2, [r7, #22]
 801129c:	8bfb      	ldrh	r3, [r7, #30]
 801129e:	4413      	add	r3, r2
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	3308      	adds	r3, #8
 80112a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	881b      	ldrh	r3, [r3, #0]
 80112aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112ae:	d106      	bne.n	80112be <mem_trim+0x192>
 80112b0:	4b1c      	ldr	r3, [pc, #112]	@ (8011324 <mem_trim+0x1f8>)
 80112b2:	f240 3216 	movw	r2, #790	@ 0x316
 80112b6:	4920      	ldr	r1, [pc, #128]	@ (8011338 <mem_trim+0x20c>)
 80112b8:	481c      	ldr	r0, [pc, #112]	@ (801132c <mem_trim+0x200>)
 80112ba:	f00d f93d 	bl	801e538 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80112be:	89fb      	ldrh	r3, [r7, #14]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff fd4f 	bl	8010d64 <ptr_to_mem>
 80112c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80112c8:	4b1c      	ldr	r3, [pc, #112]	@ (801133c <mem_trim+0x210>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	693a      	ldr	r2, [r7, #16]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d202      	bcs.n	80112d8 <mem_trim+0x1ac>
      lfree = mem2;
 80112d2:	4a1a      	ldr	r2, [pc, #104]	@ (801133c <mem_trim+0x210>)
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	2200      	movs	r2, #0
 80112dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	881a      	ldrh	r2, [r3, #0]
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	8afa      	ldrh	r2, [r7, #22]
 80112ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	89fa      	ldrh	r2, [r7, #14]
 80112f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112fa:	d007      	beq.n	801130c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fd2f 	bl	8010d64 <ptr_to_mem>
 8011306:	4602      	mov	r2, r0
 8011308:	89fb      	ldrh	r3, [r7, #14]
 801130a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801130c:	4809      	ldr	r0, [pc, #36]	@ (8011334 <mem_trim+0x208>)
 801130e:	f00b ff3a 	bl	801d186 <sys_mutex_unlock>
  return rmem;
 8011312:	687b      	ldr	r3, [r7, #4]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3720      	adds	r7, #32
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20014504 	.word	0x20014504
 8011320:	20014508 	.word	0x20014508
 8011324:	08022160 	.word	0x08022160
 8011328:	080222ec 	.word	0x080222ec
 801132c:	080221a8 	.word	0x080221a8
 8011330:	08022304 	.word	0x08022304
 8011334:	2001450c 	.word	0x2001450c
 8011338:	08022324 	.word	0x08022324
 801133c:	20014510 	.word	0x20014510

08011340 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b088      	sub	sp, #32
 8011344:	af00      	add	r7, sp, #0
 8011346:	4603      	mov	r3, r0
 8011348:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801134a:	88fb      	ldrh	r3, [r7, #6]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d101      	bne.n	8011354 <mem_malloc+0x14>
    return NULL;
 8011350:	2300      	movs	r3, #0
 8011352:	e0e2      	b.n	801151a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011354:	88fb      	ldrh	r3, [r7, #6]
 8011356:	3303      	adds	r3, #3
 8011358:	b29b      	uxth	r3, r3
 801135a:	f023 0303 	bic.w	r3, r3, #3
 801135e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011360:	8bbb      	ldrh	r3, [r7, #28]
 8011362:	2b0b      	cmp	r3, #11
 8011364:	d801      	bhi.n	801136a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011366:	230c      	movs	r3, #12
 8011368:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801136a:	8bbb      	ldrh	r3, [r7, #28]
 801136c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011370:	d803      	bhi.n	801137a <mem_malloc+0x3a>
 8011372:	8bba      	ldrh	r2, [r7, #28]
 8011374:	88fb      	ldrh	r3, [r7, #6]
 8011376:	429a      	cmp	r2, r3
 8011378:	d201      	bcs.n	801137e <mem_malloc+0x3e>
    return NULL;
 801137a:	2300      	movs	r3, #0
 801137c:	e0cd      	b.n	801151a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801137e:	4869      	ldr	r0, [pc, #420]	@ (8011524 <mem_malloc+0x1e4>)
 8011380:	f00b fef2 	bl	801d168 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011384:	4b68      	ldr	r3, [pc, #416]	@ (8011528 <mem_malloc+0x1e8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff fcfd 	bl	8010d88 <mem_to_ptr>
 801138e:	4603      	mov	r3, r0
 8011390:	83fb      	strh	r3, [r7, #30]
 8011392:	e0b7      	b.n	8011504 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011394:	8bfb      	ldrh	r3, [r7, #30]
 8011396:	4618      	mov	r0, r3
 8011398:	f7ff fce4 	bl	8010d64 <ptr_to_mem>
 801139c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	791b      	ldrb	r3, [r3, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f040 80a7 	bne.w	80114f6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	461a      	mov	r2, r3
 80113ae:	8bfb      	ldrh	r3, [r7, #30]
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	f1a3 0208 	sub.w	r2, r3, #8
 80113b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80113b8:	429a      	cmp	r2, r3
 80113ba:	f0c0 809c 	bcc.w	80114f6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	461a      	mov	r2, r3
 80113c4:	8bfb      	ldrh	r3, [r7, #30]
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	f1a3 0208 	sub.w	r2, r3, #8
 80113cc:	8bbb      	ldrh	r3, [r7, #28]
 80113ce:	3314      	adds	r3, #20
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d333      	bcc.n	801143c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80113d4:	8bfa      	ldrh	r2, [r7, #30]
 80113d6:	8bbb      	ldrh	r3, [r7, #28]
 80113d8:	4413      	add	r3, r2
 80113da:	b29b      	uxth	r3, r3
 80113dc:	3308      	adds	r3, #8
 80113de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80113e0:	8a7b      	ldrh	r3, [r7, #18]
 80113e2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80113e6:	d106      	bne.n	80113f6 <mem_malloc+0xb6>
 80113e8:	4b50      	ldr	r3, [pc, #320]	@ (801152c <mem_malloc+0x1ec>)
 80113ea:	f240 3287 	movw	r2, #903	@ 0x387
 80113ee:	4950      	ldr	r1, [pc, #320]	@ (8011530 <mem_malloc+0x1f0>)
 80113f0:	4850      	ldr	r0, [pc, #320]	@ (8011534 <mem_malloc+0x1f4>)
 80113f2:	f00d f8a1 	bl	801e538 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80113f6:	8a7b      	ldrh	r3, [r7, #18]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fcb3 	bl	8010d64 <ptr_to_mem>
 80113fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2200      	movs	r2, #0
 8011404:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	881a      	ldrh	r2, [r3, #0]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	8bfa      	ldrh	r2, [r7, #30]
 8011412:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	8a7a      	ldrh	r2, [r7, #18]
 8011418:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2201      	movs	r2, #1
 801141e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011428:	d00b      	beq.n	8011442 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fc98 	bl	8010d64 <ptr_to_mem>
 8011434:	4602      	mov	r2, r0
 8011436:	8a7b      	ldrh	r3, [r7, #18]
 8011438:	8053      	strh	r3, [r2, #2]
 801143a:	e002      	b.n	8011442 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	2201      	movs	r2, #1
 8011440:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011442:	4b39      	ldr	r3, [pc, #228]	@ (8011528 <mem_malloc+0x1e8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	429a      	cmp	r2, r3
 801144a:	d127      	bne.n	801149c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801144c:	4b36      	ldr	r3, [pc, #216]	@ (8011528 <mem_malloc+0x1e8>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011452:	e005      	b.n	8011460 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	4618      	mov	r0, r3
 801145a:	f7ff fc83 	bl	8010d64 <ptr_to_mem>
 801145e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	791b      	ldrb	r3, [r3, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d004      	beq.n	8011472 <mem_malloc+0x132>
 8011468:	4b33      	ldr	r3, [pc, #204]	@ (8011538 <mem_malloc+0x1f8>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	69ba      	ldr	r2, [r7, #24]
 801146e:	429a      	cmp	r2, r3
 8011470:	d1f0      	bne.n	8011454 <mem_malloc+0x114>
          }
          lfree = cur;
 8011472:	4a2d      	ldr	r2, [pc, #180]	@ (8011528 <mem_malloc+0x1e8>)
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011478:	4b2b      	ldr	r3, [pc, #172]	@ (8011528 <mem_malloc+0x1e8>)
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	4b2e      	ldr	r3, [pc, #184]	@ (8011538 <mem_malloc+0x1f8>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	429a      	cmp	r2, r3
 8011482:	d00b      	beq.n	801149c <mem_malloc+0x15c>
 8011484:	4b28      	ldr	r3, [pc, #160]	@ (8011528 <mem_malloc+0x1e8>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	791b      	ldrb	r3, [r3, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d006      	beq.n	801149c <mem_malloc+0x15c>
 801148e:	4b27      	ldr	r3, [pc, #156]	@ (801152c <mem_malloc+0x1ec>)
 8011490:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011494:	4929      	ldr	r1, [pc, #164]	@ (801153c <mem_malloc+0x1fc>)
 8011496:	4827      	ldr	r0, [pc, #156]	@ (8011534 <mem_malloc+0x1f4>)
 8011498:	f00d f84e 	bl	801e538 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801149c:	4821      	ldr	r0, [pc, #132]	@ (8011524 <mem_malloc+0x1e4>)
 801149e:	f00b fe72 	bl	801d186 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80114a2:	8bba      	ldrh	r2, [r7, #28]
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	4413      	add	r3, r2
 80114a8:	3308      	adds	r3, #8
 80114aa:	4a23      	ldr	r2, [pc, #140]	@ (8011538 <mem_malloc+0x1f8>)
 80114ac:	6812      	ldr	r2, [r2, #0]
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d906      	bls.n	80114c0 <mem_malloc+0x180>
 80114b2:	4b1e      	ldr	r3, [pc, #120]	@ (801152c <mem_malloc+0x1ec>)
 80114b4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80114b8:	4921      	ldr	r1, [pc, #132]	@ (8011540 <mem_malloc+0x200>)
 80114ba:	481e      	ldr	r0, [pc, #120]	@ (8011534 <mem_malloc+0x1f4>)
 80114bc:	f00d f83c 	bl	801e538 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	f003 0303 	and.w	r3, r3, #3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d006      	beq.n	80114d8 <mem_malloc+0x198>
 80114ca:	4b18      	ldr	r3, [pc, #96]	@ (801152c <mem_malloc+0x1ec>)
 80114cc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80114d0:	491c      	ldr	r1, [pc, #112]	@ (8011544 <mem_malloc+0x204>)
 80114d2:	4818      	ldr	r0, [pc, #96]	@ (8011534 <mem_malloc+0x1f4>)
 80114d4:	f00d f830 	bl	801e538 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d006      	beq.n	80114f0 <mem_malloc+0x1b0>
 80114e2:	4b12      	ldr	r3, [pc, #72]	@ (801152c <mem_malloc+0x1ec>)
 80114e4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80114e8:	4917      	ldr	r1, [pc, #92]	@ (8011548 <mem_malloc+0x208>)
 80114ea:	4812      	ldr	r0, [pc, #72]	@ (8011534 <mem_malloc+0x1f4>)
 80114ec:	f00d f824 	bl	801e538 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	3308      	adds	r3, #8
 80114f4:	e011      	b.n	801151a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80114f6:	8bfb      	ldrh	r3, [r7, #30]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fc33 	bl	8010d64 <ptr_to_mem>
 80114fe:	4603      	mov	r3, r0
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011504:	8bfa      	ldrh	r2, [r7, #30]
 8011506:	8bbb      	ldrh	r3, [r7, #28]
 8011508:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 801150c:	429a      	cmp	r2, r3
 801150e:	f4ff af41 	bcc.w	8011394 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011512:	4804      	ldr	r0, [pc, #16]	@ (8011524 <mem_malloc+0x1e4>)
 8011514:	f00b fe37 	bl	801d186 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3720      	adds	r7, #32
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	2001450c 	.word	0x2001450c
 8011528:	20014510 	.word	0x20014510
 801152c:	08022160 	.word	0x08022160
 8011530:	08022324 	.word	0x08022324
 8011534:	080221a8 	.word	0x080221a8
 8011538:	20014508 	.word	0x20014508
 801153c:	08022338 	.word	0x08022338
 8011540:	08022354 	.word	0x08022354
 8011544:	08022384 	.word	0x08022384
 8011548:	080223b4 	.word	0x080223b4

0801154c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	3303      	adds	r3, #3
 8011562:	f023 0303 	bic.w	r3, r3, #3
 8011566:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011568:	2300      	movs	r3, #0
 801156a:	60fb      	str	r3, [r7, #12]
 801156c:	e011      	b.n	8011592 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	461a      	mov	r2, r3
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	4413      	add	r3, r2
 801158a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	3301      	adds	r3, #1
 8011590:	60fb      	str	r3, [r7, #12]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	885b      	ldrh	r3, [r3, #2]
 8011596:	461a      	mov	r2, r3
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	4293      	cmp	r3, r2
 801159c:	dbe7      	blt.n	801156e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801159e:	bf00      	nop
 80115a0:	bf00      	nop
 80115a2:	3714      	adds	r7, #20
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80115b2:	2300      	movs	r3, #0
 80115b4:	80fb      	strh	r3, [r7, #6]
 80115b6:	e009      	b.n	80115cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80115b8:	88fb      	ldrh	r3, [r7, #6]
 80115ba:	4a08      	ldr	r2, [pc, #32]	@ (80115dc <memp_init+0x30>)
 80115bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff ffc3 	bl	801154c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80115c6:	88fb      	ldrh	r3, [r7, #6]
 80115c8:	3301      	adds	r3, #1
 80115ca:	80fb      	strh	r3, [r7, #6]
 80115cc:	88fb      	ldrh	r3, [r7, #6]
 80115ce:	2b0d      	cmp	r3, #13
 80115d0:	d9f2      	bls.n	80115b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80115d2:	bf00      	nop
 80115d4:	bf00      	nop
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	0802518c 	.word	0x0802518c

080115e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80115e8:	f00b fdfa 	bl	801d1e0 <sys_arch_protect>
 80115ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	689b      	ldr	r3, [r3, #8]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d015      	beq.n	8011628 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	68ba      	ldr	r2, [r7, #8]
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	f003 0303 	and.w	r3, r3, #3
 801160c:	2b00      	cmp	r3, #0
 801160e:	d006      	beq.n	801161e <do_memp_malloc_pool+0x3e>
 8011610:	4b09      	ldr	r3, [pc, #36]	@ (8011638 <do_memp_malloc_pool+0x58>)
 8011612:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011616:	4909      	ldr	r1, [pc, #36]	@ (801163c <do_memp_malloc_pool+0x5c>)
 8011618:	4809      	ldr	r0, [pc, #36]	@ (8011640 <do_memp_malloc_pool+0x60>)
 801161a:	f00c ff8d 	bl	801e538 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f00b fdec 	bl	801d1fc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	e003      	b.n	8011630 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f00b fde7 	bl	801d1fc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	080223d8 	.word	0x080223d8
 801163c:	08022408 	.word	0x08022408
 8011640:	0802242c 	.word	0x0802242c

08011644 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d106      	bne.n	8011660 <memp_malloc_pool+0x1c>
 8011652:	4b0a      	ldr	r3, [pc, #40]	@ (801167c <memp_malloc_pool+0x38>)
 8011654:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011658:	4909      	ldr	r1, [pc, #36]	@ (8011680 <memp_malloc_pool+0x3c>)
 801165a:	480a      	ldr	r0, [pc, #40]	@ (8011684 <memp_malloc_pool+0x40>)
 801165c:	f00c ff6c 	bl	801e538 <iprintf>
  if (desc == NULL) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d101      	bne.n	801166a <memp_malloc_pool+0x26>
    return NULL;
 8011666:	2300      	movs	r3, #0
 8011668:	e003      	b.n	8011672 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7ff ffb8 	bl	80115e0 <do_memp_malloc_pool>
 8011670:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011672:	4618      	mov	r0, r3
 8011674:	3708      	adds	r7, #8
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	080223d8 	.word	0x080223d8
 8011680:	08022454 	.word	0x08022454
 8011684:	0802242c 	.word	0x0802242c

08011688 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011692:	79fb      	ldrb	r3, [r7, #7]
 8011694:	2b0d      	cmp	r3, #13
 8011696:	d908      	bls.n	80116aa <memp_malloc+0x22>
 8011698:	4b0a      	ldr	r3, [pc, #40]	@ (80116c4 <memp_malloc+0x3c>)
 801169a:	f240 1257 	movw	r2, #343	@ 0x157
 801169e:	490a      	ldr	r1, [pc, #40]	@ (80116c8 <memp_malloc+0x40>)
 80116a0:	480a      	ldr	r0, [pc, #40]	@ (80116cc <memp_malloc+0x44>)
 80116a2:	f00c ff49 	bl	801e538 <iprintf>
 80116a6:	2300      	movs	r3, #0
 80116a8:	e008      	b.n	80116bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80116aa:	79fb      	ldrb	r3, [r7, #7]
 80116ac:	4a08      	ldr	r2, [pc, #32]	@ (80116d0 <memp_malloc+0x48>)
 80116ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff ff94 	bl	80115e0 <do_memp_malloc_pool>
 80116b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80116ba:	68fb      	ldr	r3, [r7, #12]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	080223d8 	.word	0x080223d8
 80116c8:	08022468 	.word	0x08022468
 80116cc:	0802242c 	.word	0x0802242c
 80116d0:	0802518c 	.word	0x0802518c

080116d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	f003 0303 	and.w	r3, r3, #3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d006      	beq.n	80116f6 <do_memp_free_pool+0x22>
 80116e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011720 <do_memp_free_pool+0x4c>)
 80116ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80116ee:	490d      	ldr	r1, [pc, #52]	@ (8011724 <do_memp_free_pool+0x50>)
 80116f0:	480d      	ldr	r0, [pc, #52]	@ (8011728 <do_memp_free_pool+0x54>)
 80116f2:	f00c ff21 	bl	801e538 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80116fa:	f00b fd71 	bl	801d1e0 <sys_arch_protect>
 80116fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	689b      	ldr	r3, [r3, #8]
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	689b      	ldr	r3, [r3, #8]
 801170e:	68fa      	ldr	r2, [r7, #12]
 8011710:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011712:	68b8      	ldr	r0, [r7, #8]
 8011714:	f00b fd72 	bl	801d1fc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011718:	bf00      	nop
 801171a:	3710      	adds	r7, #16
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	080223d8 	.word	0x080223d8
 8011724:	08022488 	.word	0x08022488
 8011728:	0802242c 	.word	0x0802242c

0801172c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d106      	bne.n	801174a <memp_free_pool+0x1e>
 801173c:	4b0a      	ldr	r3, [pc, #40]	@ (8011768 <memp_free_pool+0x3c>)
 801173e:	f240 1295 	movw	r2, #405	@ 0x195
 8011742:	490a      	ldr	r1, [pc, #40]	@ (801176c <memp_free_pool+0x40>)
 8011744:	480a      	ldr	r0, [pc, #40]	@ (8011770 <memp_free_pool+0x44>)
 8011746:	f00c fef7 	bl	801e538 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d007      	beq.n	8011760 <memp_free_pool+0x34>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d004      	beq.n	8011760 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011756:	6839      	ldr	r1, [r7, #0]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7ff ffbb 	bl	80116d4 <do_memp_free_pool>
 801175e:	e000      	b.n	8011762 <memp_free_pool+0x36>
    return;
 8011760:	bf00      	nop
}
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	080223d8 	.word	0x080223d8
 801176c:	08022454 	.word	0x08022454
 8011770:	0802242c 	.word	0x0802242c

08011774 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	4603      	mov	r3, r0
 801177c:	6039      	str	r1, [r7, #0]
 801177e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011780:	79fb      	ldrb	r3, [r7, #7]
 8011782:	2b0d      	cmp	r3, #13
 8011784:	d907      	bls.n	8011796 <memp_free+0x22>
 8011786:	4b0c      	ldr	r3, [pc, #48]	@ (80117b8 <memp_free+0x44>)
 8011788:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801178c:	490b      	ldr	r1, [pc, #44]	@ (80117bc <memp_free+0x48>)
 801178e:	480c      	ldr	r0, [pc, #48]	@ (80117c0 <memp_free+0x4c>)
 8011790:	f00c fed2 	bl	801e538 <iprintf>
 8011794:	e00c      	b.n	80117b0 <memp_free+0x3c>

  if (mem == NULL) {
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d008      	beq.n	80117ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801179c:	79fb      	ldrb	r3, [r7, #7]
 801179e:	4a09      	ldr	r2, [pc, #36]	@ (80117c4 <memp_free+0x50>)
 80117a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117a4:	6839      	ldr	r1, [r7, #0]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff ff94 	bl	80116d4 <do_memp_free_pool>
 80117ac:	e000      	b.n	80117b0 <memp_free+0x3c>
    return;
 80117ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	080223d8 	.word	0x080223d8
 80117bc:	080224a8 	.word	0x080224a8
 80117c0:	0802242c 	.word	0x0802242c
 80117c4:	0802518c 	.word	0x0802518c

080117c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80117cc:	bf00      	nop
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
	...

080117d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d108      	bne.n	80117fe <netif_add+0x26>
 80117ec:	4b5b      	ldr	r3, [pc, #364]	@ (801195c <netif_add+0x184>)
 80117ee:	f240 1227 	movw	r2, #295	@ 0x127
 80117f2:	495b      	ldr	r1, [pc, #364]	@ (8011960 <netif_add+0x188>)
 80117f4:	485b      	ldr	r0, [pc, #364]	@ (8011964 <netif_add+0x18c>)
 80117f6:	f00c fe9f 	bl	801e538 <iprintf>
 80117fa:	2300      	movs	r3, #0
 80117fc:	e0a9      	b.n	8011952 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80117fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011800:	2b00      	cmp	r3, #0
 8011802:	d108      	bne.n	8011816 <netif_add+0x3e>
 8011804:	4b55      	ldr	r3, [pc, #340]	@ (801195c <netif_add+0x184>)
 8011806:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801180a:	4957      	ldr	r1, [pc, #348]	@ (8011968 <netif_add+0x190>)
 801180c:	4855      	ldr	r0, [pc, #340]	@ (8011964 <netif_add+0x18c>)
 801180e:	f00c fe93 	bl	801e538 <iprintf>
 8011812:	2300      	movs	r3, #0
 8011814:	e09d      	b.n	8011952 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d101      	bne.n	8011820 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801181c:	4b53      	ldr	r3, [pc, #332]	@ (801196c <netif_add+0x194>)
 801181e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d101      	bne.n	801182a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011826:	4b51      	ldr	r3, [pc, #324]	@ (801196c <netif_add+0x194>)
 8011828:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d101      	bne.n	8011834 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011830:	4b4e      	ldr	r3, [pc, #312]	@ (801196c <netif_add+0x194>)
 8011832:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2200      	movs	r2, #0
 8011838:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2200      	movs	r2, #0
 8011844:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	4a49      	ldr	r2, [pc, #292]	@ (8011970 <netif_add+0x198>)
 801184a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2200      	movs	r2, #0
 8011850:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2200      	movs	r2, #0
 8011856:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	3324      	adds	r3, #36	@ 0x24
 801185e:	2204      	movs	r2, #4
 8011860:	2100      	movs	r1, #0
 8011862:	4618      	mov	r0, r3
 8011864:	f00c ff9c 	bl	801e7a0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2200      	movs	r2, #0
 801186c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6a3a      	ldr	r2, [r7, #32]
 8011872:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011874:	4b3f      	ldr	r3, [pc, #252]	@ (8011974 <netif_add+0x19c>)
 8011876:	781a      	ldrb	r2, [r3, #0]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011882:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	68b9      	ldr	r1, [r7, #8]
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f000 f914 	bl	8011ab8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	4798      	blx	r3
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d001      	beq.n	80118a0 <netif_add+0xc8>
    return NULL;
 801189c:	2300      	movs	r3, #0
 801189e:	e058      	b.n	8011952 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118a6:	2bff      	cmp	r3, #255	@ 0xff
 80118a8:	d103      	bne.n	80118b2 <netif_add+0xda>
        netif->num = 0;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2200      	movs	r2, #0
 80118ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80118b6:	4b30      	ldr	r3, [pc, #192]	@ (8011978 <netif_add+0x1a0>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	617b      	str	r3, [r7, #20]
 80118bc:	e02b      	b.n	8011916 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80118be:	697a      	ldr	r2, [r7, #20]
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d106      	bne.n	80118d4 <netif_add+0xfc>
 80118c6:	4b25      	ldr	r3, [pc, #148]	@ (801195c <netif_add+0x184>)
 80118c8:	f240 128b 	movw	r2, #395	@ 0x18b
 80118cc:	492b      	ldr	r1, [pc, #172]	@ (801197c <netif_add+0x1a4>)
 80118ce:	4825      	ldr	r0, [pc, #148]	@ (8011964 <netif_add+0x18c>)
 80118d0:	f00c fe32 	bl	801e538 <iprintf>
        num_netifs++;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	3301      	adds	r3, #1
 80118d8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	2bff      	cmp	r3, #255	@ 0xff
 80118de:	dd06      	ble.n	80118ee <netif_add+0x116>
 80118e0:	4b1e      	ldr	r3, [pc, #120]	@ (801195c <netif_add+0x184>)
 80118e2:	f240 128d 	movw	r2, #397	@ 0x18d
 80118e6:	4926      	ldr	r1, [pc, #152]	@ (8011980 <netif_add+0x1a8>)
 80118e8:	481e      	ldr	r0, [pc, #120]	@ (8011964 <netif_add+0x18c>)
 80118ea:	f00c fe25 	bl	801e538 <iprintf>
        if (netif2->num == netif->num) {
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d108      	bne.n	8011910 <netif_add+0x138>
          netif->num++;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011904:	3301      	adds	r3, #1
 8011906:	b2da      	uxtb	r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 801190e:	e005      	b.n	801191c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	617b      	str	r3, [r7, #20]
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1d0      	bne.n	80118be <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1be      	bne.n	80118a0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011928:	2bfe      	cmp	r3, #254	@ 0xfe
 801192a:	d103      	bne.n	8011934 <netif_add+0x15c>
    netif_num = 0;
 801192c:	4b11      	ldr	r3, [pc, #68]	@ (8011974 <netif_add+0x19c>)
 801192e:	2200      	movs	r2, #0
 8011930:	701a      	strb	r2, [r3, #0]
 8011932:	e006      	b.n	8011942 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801193a:	3301      	adds	r3, #1
 801193c:	b2da      	uxtb	r2, r3
 801193e:	4b0d      	ldr	r3, [pc, #52]	@ (8011974 <netif_add+0x19c>)
 8011940:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011942:	4b0d      	ldr	r3, [pc, #52]	@ (8011978 <netif_add+0x1a0>)
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801194a:	4a0b      	ldr	r2, [pc, #44]	@ (8011978 <netif_add+0x1a0>)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011950:	68fb      	ldr	r3, [r7, #12]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	080224c4 	.word	0x080224c4
 8011960:	08022558 	.word	0x08022558
 8011964:	08022514 	.word	0x08022514
 8011968:	08022574 	.word	0x08022574
 801196c:	0802521c 	.word	0x0802521c
 8011970:	08011d9b 	.word	0x08011d9b
 8011974:	20017754 	.word	0x20017754
 8011978:	2001774c 	.word	0x2001774c
 801197c:	08022598 	.word	0x08022598
 8011980:	080225ac 	.word	0x080225ac

08011984 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f002 fced 	bl	8014370 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011996:	6839      	ldr	r1, [r7, #0]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f007 f959 	bl	8018c50 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801199e:	bf00      	nop
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
	...

080119a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <netif_do_set_ipaddr+0x20>
 80119ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011a30 <netif_do_set_ipaddr+0x88>)
 80119bc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80119c0:	491c      	ldr	r1, [pc, #112]	@ (8011a34 <netif_do_set_ipaddr+0x8c>)
 80119c2:	481d      	ldr	r0, [pc, #116]	@ (8011a38 <netif_do_set_ipaddr+0x90>)
 80119c4:	f00c fdb8 	bl	801e538 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <netif_do_set_ipaddr+0x34>
 80119ce:	4b18      	ldr	r3, [pc, #96]	@ (8011a30 <netif_do_set_ipaddr+0x88>)
 80119d0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80119d4:	4917      	ldr	r1, [pc, #92]	@ (8011a34 <netif_do_set_ipaddr+0x8c>)
 80119d6:	4818      	ldr	r0, [pc, #96]	@ (8011a38 <netif_do_set_ipaddr+0x90>)
 80119d8:	f00c fdae 	bl	801e538 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3304      	adds	r3, #4
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d01c      	beq.n	8011a24 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	3304      	adds	r3, #4
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80119fa:	f107 0314 	add.w	r3, r7, #20
 80119fe:	4619      	mov	r1, r3
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff ffbf 	bl	8011984 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <netif_do_set_ipaddr+0x6a>
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	e000      	b.n	8011a14 <netif_do_set_ipaddr+0x6c>
 8011a12:	2300      	movs	r3, #0
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011a18:	2101      	movs	r1, #1
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f000 f8d2 	bl	8011bc4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011a20:	2301      	movs	r3, #1
 8011a22:	e000      	b.n	8011a26 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	080224c4 	.word	0x080224c4
 8011a34:	080225dc 	.word	0x080225dc
 8011a38:	08022514 	.word	0x08022514

08011a3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3308      	adds	r3, #8
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d00a      	beq.n	8011a6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d002      	beq.n	8011a62 <netif_do_set_netmask+0x26>
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	e000      	b.n	8011a64 <netif_do_set_netmask+0x28>
 8011a62:	2300      	movs	r3, #0
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e000      	b.n	8011a6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3714      	adds	r7, #20
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011a7a:	b480      	push	{r7}
 8011a7c:	b085      	sub	sp, #20
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	60f8      	str	r0, [r7, #12]
 8011a82:	60b9      	str	r1, [r7, #8]
 8011a84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	330c      	adds	r3, #12
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d00a      	beq.n	8011aaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d002      	beq.n	8011aa0 <netif_do_set_gw+0x26>
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	e000      	b.n	8011aa2 <netif_do_set_gw+0x28>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e000      	b.n	8011aac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011aaa:	2300      	movs	r3, #0
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3714      	adds	r7, #20
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
 8011ac4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d101      	bne.n	8011ad8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8011b48 <netif_set_addr+0x90>)
 8011ad6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d101      	bne.n	8011ae2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011ade:	4b1a      	ldr	r3, [pc, #104]	@ (8011b48 <netif_set_addr+0x90>)
 8011ae0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011ae8:	4b17      	ldr	r3, [pc, #92]	@ (8011b48 <netif_set_addr+0x90>)
 8011aea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d003      	beq.n	8011afa <netif_set_addr+0x42>
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d101      	bne.n	8011afe <netif_set_addr+0x46>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e000      	b.n	8011b00 <netif_set_addr+0x48>
 8011afe:	2300      	movs	r3, #0
 8011b00:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d006      	beq.n	8011b16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011b08:	f107 0310 	add.w	r3, r7, #16
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	68b9      	ldr	r1, [r7, #8]
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	f7ff ff49 	bl	80119a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011b16:	69fa      	ldr	r2, [r7, #28]
 8011b18:	6879      	ldr	r1, [r7, #4]
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7ff ff8e 	bl	8011a3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011b20:	69ba      	ldr	r2, [r7, #24]
 8011b22:	6839      	ldr	r1, [r7, #0]
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f7ff ffa8 	bl	8011a7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d106      	bne.n	8011b3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011b30:	f107 0310 	add.w	r3, r7, #16
 8011b34:	461a      	mov	r2, r3
 8011b36:	68b9      	ldr	r1, [r7, #8]
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7ff ff35 	bl	80119a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011b3e:	bf00      	nop
 8011b40:	3720      	adds	r7, #32
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	0802521c 	.word	0x0802521c

08011b4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011b54:	4a04      	ldr	r2, [pc, #16]	@ (8011b68 <netif_set_default+0x1c>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011b5a:	bf00      	nop
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	20017750 	.word	0x20017750

08011b6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d107      	bne.n	8011b8a <netif_set_up+0x1e>
 8011b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8011bb8 <netif_set_up+0x4c>)
 8011b7c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011b80:	490e      	ldr	r1, [pc, #56]	@ (8011bbc <netif_set_up+0x50>)
 8011b82:	480f      	ldr	r0, [pc, #60]	@ (8011bc0 <netif_set_up+0x54>)
 8011b84:	f00c fcd8 	bl	801e538 <iprintf>
 8011b88:	e013      	b.n	8011bb2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10c      	bne.n	8011bb2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011b9e:	f043 0301 	orr.w	r3, r3, #1
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011baa:	2103      	movs	r1, #3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 f809 	bl	8011bc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	080224c4 	.word	0x080224c4
 8011bbc:	0802264c 	.word	0x0802264c
 8011bc0:	08022514 	.word	0x08022514

08011bc4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <netif_issue_reports+0x20>
 8011bd6:	4b18      	ldr	r3, [pc, #96]	@ (8011c38 <netif_issue_reports+0x74>)
 8011bd8:	f240 326d 	movw	r2, #877	@ 0x36d
 8011bdc:	4917      	ldr	r1, [pc, #92]	@ (8011c3c <netif_issue_reports+0x78>)
 8011bde:	4818      	ldr	r0, [pc, #96]	@ (8011c40 <netif_issue_reports+0x7c>)
 8011be0:	f00c fcaa 	bl	801e538 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011bea:	f003 0304 	and.w	r3, r3, #4
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d01e      	beq.n	8011c30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011bf8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d017      	beq.n	8011c30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c00:	78fb      	ldrb	r3, [r7, #3]
 8011c02:	f003 0301 	and.w	r3, r3, #1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d013      	beq.n	8011c32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00e      	beq.n	8011c32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c1a:	f003 0308 	and.w	r3, r3, #8
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d007      	beq.n	8011c32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	3304      	adds	r3, #4
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f009 fe5b 	bl	801b8e4 <etharp_request>
 8011c2e:	e000      	b.n	8011c32 <netif_issue_reports+0x6e>
    return;
 8011c30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	080224c4 	.word	0x080224c4
 8011c3c:	08022668 	.word	0x08022668
 8011c40:	08022514 	.word	0x08022514

08011c44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d107      	bne.n	8011c62 <netif_set_down+0x1e>
 8011c52:	4b12      	ldr	r3, [pc, #72]	@ (8011c9c <netif_set_down+0x58>)
 8011c54:	f240 329b 	movw	r2, #923	@ 0x39b
 8011c58:	4911      	ldr	r1, [pc, #68]	@ (8011ca0 <netif_set_down+0x5c>)
 8011c5a:	4812      	ldr	r0, [pc, #72]	@ (8011ca4 <netif_set_down+0x60>)
 8011c5c:	f00c fc6c 	bl	801e538 <iprintf>
 8011c60:	e019      	b.n	8011c96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c68:	f003 0301 	and.w	r3, r3, #1
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d012      	beq.n	8011c96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c76:	f023 0301 	bic.w	r3, r3, #1
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c88:	f003 0308 	and.w	r3, r3, #8
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f009 f9e1 	bl	801b058 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	080224c4 	.word	0x080224c4
 8011ca0:	0802268c 	.word	0x0802268c
 8011ca4:	08022514 	.word	0x08022514

08011ca8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d107      	bne.n	8011cc6 <netif_set_link_up+0x1e>
 8011cb6:	4b15      	ldr	r3, [pc, #84]	@ (8011d0c <netif_set_link_up+0x64>)
 8011cb8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011cbc:	4914      	ldr	r1, [pc, #80]	@ (8011d10 <netif_set_link_up+0x68>)
 8011cbe:	4815      	ldr	r0, [pc, #84]	@ (8011d14 <netif_set_link_up+0x6c>)
 8011cc0:	f00c fc3a 	bl	801e538 <iprintf>
 8011cc4:	e01e      	b.n	8011d04 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011ccc:	f003 0304 	and.w	r3, r3, #4
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d117      	bne.n	8011d04 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011cda:	f043 0304 	orr.w	r3, r3, #4
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f007 fbfc 	bl	80194e4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011cec:	2103      	movs	r1, #3
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ff ff68 	bl	8011bc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	69db      	ldr	r3, [r3, #28]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d003      	beq.n	8011d04 <netif_set_link_up+0x5c>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	69db      	ldr	r3, [r3, #28]
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011d04:	3708      	adds	r7, #8
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	080224c4 	.word	0x080224c4
 8011d10:	080226ac 	.word	0x080226ac
 8011d14:	08022514 	.word	0x08022514

08011d18 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d107      	bne.n	8011d36 <netif_set_link_down+0x1e>
 8011d26:	4b11      	ldr	r3, [pc, #68]	@ (8011d6c <netif_set_link_down+0x54>)
 8011d28:	f240 4206 	movw	r2, #1030	@ 0x406
 8011d2c:	4910      	ldr	r1, [pc, #64]	@ (8011d70 <netif_set_link_down+0x58>)
 8011d2e:	4811      	ldr	r0, [pc, #68]	@ (8011d74 <netif_set_link_down+0x5c>)
 8011d30:	f00c fc02 	bl	801e538 <iprintf>
 8011d34:	e017      	b.n	8011d66 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d3c:	f003 0304 	and.w	r3, r3, #4
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d010      	beq.n	8011d66 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d4a:	f023 0304 	bic.w	r3, r3, #4
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	69db      	ldr	r3, [r3, #28]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d003      	beq.n	8011d66 <netif_set_link_down+0x4e>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69db      	ldr	r3, [r3, #28]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	080224c4 	.word	0x080224c4
 8011d70:	080226d0 	.word	0x080226d0
 8011d74:	08022514 	.word	0x08022514

08011d78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d002      	beq.n	8011d8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	683a      	ldr	r2, [r7, #0]
 8011d8c:	61da      	str	r2, [r3, #28]
  }
}
 8011d8e:	bf00      	nop
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011d9a:	b480      	push	{r7}
 8011d9c:	b085      	sub	sp, #20
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	60f8      	str	r0, [r7, #12]
 8011da2:	60b9      	str	r1, [r7, #8]
 8011da4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011da6:	f06f 030b 	mvn.w	r3, #11
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
	...

08011db8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011dc2:	79fb      	ldrb	r3, [r7, #7]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d013      	beq.n	8011df0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8011e00 <netif_get_by_index+0x48>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	60fb      	str	r3, [r7, #12]
 8011dce:	e00c      	b.n	8011dea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	79fa      	ldrb	r2, [r7, #7]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d101      	bne.n	8011de4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	e006      	b.n	8011df2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	60fb      	str	r3, [r7, #12]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d1ef      	bne.n	8011dd0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3714      	adds	r7, #20
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop
 8011e00:	2001774c 	.word	0x2001774c

08011e04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011e0a:	f00b f9e9 	bl	801d1e0 <sys_arch_protect>
 8011e0e:	6038      	str	r0, [r7, #0]
 8011e10:	4b0d      	ldr	r3, [pc, #52]	@ (8011e48 <pbuf_free_ooseq+0x44>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	701a      	strb	r2, [r3, #0]
 8011e16:	6838      	ldr	r0, [r7, #0]
 8011e18:	f00b f9f0 	bl	801d1fc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e4c <pbuf_free_ooseq+0x48>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	e00a      	b.n	8011e3a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d003      	beq.n	8011e34 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f002 fadd 	bl	80143ec <tcp_free_ooseq>
      return;
 8011e32:	e005      	b.n	8011e40 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	607b      	str	r3, [r7, #4]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d1f1      	bne.n	8011e24 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	20017755 	.word	0x20017755
 8011e4c:	20017764 	.word	0x20017764

08011e50 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011e58:	f7ff ffd4 	bl	8011e04 <pbuf_free_ooseq>
}
 8011e5c:	bf00      	nop
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011e6a:	f00b f9b9 	bl	801d1e0 <sys_arch_protect>
 8011e6e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011e70:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb0 <pbuf_pool_is_empty+0x4c>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011e76:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb0 <pbuf_pool_is_empty+0x4c>)
 8011e78:	2201      	movs	r2, #1
 8011e7a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f00b f9bd 	bl	801d1fc <sys_arch_unprotect>

  if (!queued) {
 8011e82:	78fb      	ldrb	r3, [r7, #3]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10f      	bne.n	8011ea8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011e88:	2100      	movs	r1, #0
 8011e8a:	480a      	ldr	r0, [pc, #40]	@ (8011eb4 <pbuf_pool_is_empty+0x50>)
 8011e8c:	f7fe fbac 	bl	80105e8 <tcpip_try_callback>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d008      	beq.n	8011ea8 <pbuf_pool_is_empty+0x44>
 8011e96:	f00b f9a3 	bl	801d1e0 <sys_arch_protect>
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	4b04      	ldr	r3, [pc, #16]	@ (8011eb0 <pbuf_pool_is_empty+0x4c>)
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	701a      	strb	r2, [r3, #0]
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f00b f9aa 	bl	801d1fc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011ea8:	bf00      	nop
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	20017755 	.word	0x20017755
 8011eb4:	08011e51 	.word	0x08011e51

08011eb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	4611      	mov	r1, r2
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	80fb      	strh	r3, [r7, #6]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	68ba      	ldr	r2, [r7, #8]
 8011ed8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	88fa      	ldrh	r2, [r7, #6]
 8011ede:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	88ba      	ldrh	r2, [r7, #4]
 8011ee4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011ee6:	8b3b      	ldrh	r3, [r7, #24]
 8011ee8:	b2da      	uxtb	r2, r3
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	7f3a      	ldrb	r2, [r7, #28]
 8011ef2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2200      	movs	r2, #0
 8011efe:	73da      	strb	r2, [r3, #15]
}
 8011f00:	bf00      	nop
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08c      	sub	sp, #48	@ 0x30
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	4603      	mov	r3, r0
 8011f14:	71fb      	strb	r3, [r7, #7]
 8011f16:	460b      	mov	r3, r1
 8011f18:	80bb      	strh	r3, [r7, #4]
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011f22:	887b      	ldrh	r3, [r7, #2]
 8011f24:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011f28:	d07f      	beq.n	801202a <pbuf_alloc+0x11e>
 8011f2a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011f2e:	f300 80c8 	bgt.w	80120c2 <pbuf_alloc+0x1b6>
 8011f32:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011f36:	d010      	beq.n	8011f5a <pbuf_alloc+0x4e>
 8011f38:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011f3c:	f300 80c1 	bgt.w	80120c2 <pbuf_alloc+0x1b6>
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d002      	beq.n	8011f4a <pbuf_alloc+0x3e>
 8011f44:	2b41      	cmp	r3, #65	@ 0x41
 8011f46:	f040 80bc 	bne.w	80120c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011f4a:	887a      	ldrh	r2, [r7, #2]
 8011f4c:	88bb      	ldrh	r3, [r7, #4]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	2000      	movs	r0, #0
 8011f52:	f000 f8d1 	bl	80120f8 <pbuf_alloc_reference>
 8011f56:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011f58:	e0bd      	b.n	80120d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011f62:	88bb      	ldrh	r3, [r7, #4]
 8011f64:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011f66:	200d      	movs	r0, #13
 8011f68:	f7ff fb8e 	bl	8011688 <memp_malloc>
 8011f6c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d109      	bne.n	8011f88 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011f74:	f7ff ff76 	bl	8011e64 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d002      	beq.n	8011f84 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011f7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f80:	f000 faa8 	bl	80124d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011f84:	2300      	movs	r3, #0
 8011f86:	e0a7      	b.n	80120d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011f88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f8a:	3303      	adds	r3, #3
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	f023 0303 	bic.w	r3, r3, #3
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	8b7a      	ldrh	r2, [r7, #26]
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	bf28      	it	cs
 8011fa0:	4613      	movcs	r3, r2
 8011fa2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011fa6:	3310      	adds	r3, #16
 8011fa8:	693a      	ldr	r2, [r7, #16]
 8011faa:	4413      	add	r3, r2
 8011fac:	3303      	adds	r3, #3
 8011fae:	f023 0303 	bic.w	r3, r3, #3
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	89f9      	ldrh	r1, [r7, #14]
 8011fb6:	8b7a      	ldrh	r2, [r7, #26]
 8011fb8:	2300      	movs	r3, #0
 8011fba:	9301      	str	r3, [sp, #4]
 8011fbc:	887b      	ldrh	r3, [r7, #2]
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4601      	mov	r1, r0
 8011fc4:	6938      	ldr	r0, [r7, #16]
 8011fc6:	f7ff ff77 	bl	8011eb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	f003 0303 	and.w	r3, r3, #3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d006      	beq.n	8011fe4 <pbuf_alloc+0xd8>
 8011fd6:	4b42      	ldr	r3, [pc, #264]	@ (80120e0 <pbuf_alloc+0x1d4>)
 8011fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011fdc:	4941      	ldr	r1, [pc, #260]	@ (80120e4 <pbuf_alloc+0x1d8>)
 8011fde:	4842      	ldr	r0, [pc, #264]	@ (80120e8 <pbuf_alloc+0x1dc>)
 8011fe0:	f00c faaa 	bl	801e538 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011fe4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011fe6:	3303      	adds	r3, #3
 8011fe8:	f023 0303 	bic.w	r3, r3, #3
 8011fec:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011ff0:	d106      	bne.n	8012000 <pbuf_alloc+0xf4>
 8011ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80120e0 <pbuf_alloc+0x1d4>)
 8011ff4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011ff8:	493c      	ldr	r1, [pc, #240]	@ (80120ec <pbuf_alloc+0x1e0>)
 8011ffa:	483b      	ldr	r0, [pc, #236]	@ (80120e8 <pbuf_alloc+0x1dc>)
 8011ffc:	f00c fa9c 	bl	801e538 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012002:	2b00      	cmp	r3, #0
 8012004:	d102      	bne.n	801200c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	627b      	str	r3, [r7, #36]	@ 0x24
 801200a:	e002      	b.n	8012012 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	693a      	ldr	r2, [r7, #16]
 8012010:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012016:	8b7a      	ldrh	r2, [r7, #26]
 8012018:	89fb      	ldrh	r3, [r7, #14]
 801201a:	1ad3      	subs	r3, r2, r3
 801201c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012022:	8b7b      	ldrh	r3, [r7, #26]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d19e      	bne.n	8011f66 <pbuf_alloc+0x5a>
      break;
 8012028:	e055      	b.n	80120d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801202a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801202c:	3303      	adds	r3, #3
 801202e:	b29b      	uxth	r3, r3
 8012030:	f023 0303 	bic.w	r3, r3, #3
 8012034:	b29a      	uxth	r2, r3
 8012036:	88bb      	ldrh	r3, [r7, #4]
 8012038:	3303      	adds	r3, #3
 801203a:	b29b      	uxth	r3, r3
 801203c:	f023 0303 	bic.w	r3, r3, #3
 8012040:	b29b      	uxth	r3, r3
 8012042:	4413      	add	r3, r2
 8012044:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012046:	8b3b      	ldrh	r3, [r7, #24]
 8012048:	3310      	adds	r3, #16
 801204a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801204c:	8b3a      	ldrh	r2, [r7, #24]
 801204e:	88bb      	ldrh	r3, [r7, #4]
 8012050:	3303      	adds	r3, #3
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	429a      	cmp	r2, r3
 8012058:	d306      	bcc.n	8012068 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801205a:	8afa      	ldrh	r2, [r7, #22]
 801205c:	88bb      	ldrh	r3, [r7, #4]
 801205e:	3303      	adds	r3, #3
 8012060:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012064:	429a      	cmp	r2, r3
 8012066:	d201      	bcs.n	801206c <pbuf_alloc+0x160>
        return NULL;
 8012068:	2300      	movs	r3, #0
 801206a:	e035      	b.n	80120d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801206c:	8afb      	ldrh	r3, [r7, #22]
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff f966 	bl	8011340 <mem_malloc>
 8012074:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <pbuf_alloc+0x174>
        return NULL;
 801207c:	2300      	movs	r3, #0
 801207e:	e02b      	b.n	80120d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012080:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012082:	3310      	adds	r3, #16
 8012084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012086:	4413      	add	r3, r2
 8012088:	3303      	adds	r3, #3
 801208a:	f023 0303 	bic.w	r3, r3, #3
 801208e:	4618      	mov	r0, r3
 8012090:	88b9      	ldrh	r1, [r7, #4]
 8012092:	88ba      	ldrh	r2, [r7, #4]
 8012094:	2300      	movs	r3, #0
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	887b      	ldrh	r3, [r7, #2]
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	460b      	mov	r3, r1
 801209e:	4601      	mov	r1, r0
 80120a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120a2:	f7ff ff09 	bl	8011eb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80120a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	f003 0303 	and.w	r3, r3, #3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d010      	beq.n	80120d4 <pbuf_alloc+0x1c8>
 80120b2:	4b0b      	ldr	r3, [pc, #44]	@ (80120e0 <pbuf_alloc+0x1d4>)
 80120b4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80120b8:	490d      	ldr	r1, [pc, #52]	@ (80120f0 <pbuf_alloc+0x1e4>)
 80120ba:	480b      	ldr	r0, [pc, #44]	@ (80120e8 <pbuf_alloc+0x1dc>)
 80120bc:	f00c fa3c 	bl	801e538 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80120c0:	e008      	b.n	80120d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80120c2:	4b07      	ldr	r3, [pc, #28]	@ (80120e0 <pbuf_alloc+0x1d4>)
 80120c4:	f240 1227 	movw	r2, #295	@ 0x127
 80120c8:	490a      	ldr	r1, [pc, #40]	@ (80120f4 <pbuf_alloc+0x1e8>)
 80120ca:	4807      	ldr	r0, [pc, #28]	@ (80120e8 <pbuf_alloc+0x1dc>)
 80120cc:	f00c fa34 	bl	801e538 <iprintf>
      return NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e001      	b.n	80120d8 <pbuf_alloc+0x1cc>
      break;
 80120d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80120d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3728      	adds	r7, #40	@ 0x28
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	080226f4 	.word	0x080226f4
 80120e4:	08022724 	.word	0x08022724
 80120e8:	08022754 	.word	0x08022754
 80120ec:	0802277c 	.word	0x0802277c
 80120f0:	080227b0 	.word	0x080227b0
 80120f4:	080227dc 	.word	0x080227dc

080120f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af02      	add	r7, sp, #8
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	807b      	strh	r3, [r7, #2]
 8012104:	4613      	mov	r3, r2
 8012106:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012108:	883b      	ldrh	r3, [r7, #0]
 801210a:	2b41      	cmp	r3, #65	@ 0x41
 801210c:	d009      	beq.n	8012122 <pbuf_alloc_reference+0x2a>
 801210e:	883b      	ldrh	r3, [r7, #0]
 8012110:	2b01      	cmp	r3, #1
 8012112:	d006      	beq.n	8012122 <pbuf_alloc_reference+0x2a>
 8012114:	4b0f      	ldr	r3, [pc, #60]	@ (8012154 <pbuf_alloc_reference+0x5c>)
 8012116:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801211a:	490f      	ldr	r1, [pc, #60]	@ (8012158 <pbuf_alloc_reference+0x60>)
 801211c:	480f      	ldr	r0, [pc, #60]	@ (801215c <pbuf_alloc_reference+0x64>)
 801211e:	f00c fa0b 	bl	801e538 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012122:	200c      	movs	r0, #12
 8012124:	f7ff fab0 	bl	8011688 <memp_malloc>
 8012128:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d101      	bne.n	8012134 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012130:	2300      	movs	r3, #0
 8012132:	e00b      	b.n	801214c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012134:	8879      	ldrh	r1, [r7, #2]
 8012136:	887a      	ldrh	r2, [r7, #2]
 8012138:	2300      	movs	r3, #0
 801213a:	9301      	str	r3, [sp, #4]
 801213c:	883b      	ldrh	r3, [r7, #0]
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	460b      	mov	r3, r1
 8012142:	6879      	ldr	r1, [r7, #4]
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f7ff feb7 	bl	8011eb8 <pbuf_init_alloced_pbuf>
  return p;
 801214a:	68fb      	ldr	r3, [r7, #12]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	080226f4 	.word	0x080226f4
 8012158:	080227f8 	.word	0x080227f8
 801215c:	08022754 	.word	0x08022754

08012160 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b088      	sub	sp, #32
 8012164:	af02      	add	r7, sp, #8
 8012166:	607b      	str	r3, [r7, #4]
 8012168:	4603      	mov	r3, r0
 801216a:	73fb      	strb	r3, [r7, #15]
 801216c:	460b      	mov	r3, r1
 801216e:	81bb      	strh	r3, [r7, #12]
 8012170:	4613      	mov	r3, r2
 8012172:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012174:	7bfb      	ldrb	r3, [r7, #15]
 8012176:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012178:	8a7b      	ldrh	r3, [r7, #18]
 801217a:	3303      	adds	r3, #3
 801217c:	f023 0203 	bic.w	r2, r3, #3
 8012180:	89bb      	ldrh	r3, [r7, #12]
 8012182:	441a      	add	r2, r3
 8012184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012186:	429a      	cmp	r2, r3
 8012188:	d901      	bls.n	801218e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801218a:	2300      	movs	r3, #0
 801218c:	e018      	b.n	80121c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801218e:	6a3b      	ldr	r3, [r7, #32]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d007      	beq.n	80121a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012194:	8a7b      	ldrh	r3, [r7, #18]
 8012196:	3303      	adds	r3, #3
 8012198:	f023 0303 	bic.w	r3, r3, #3
 801219c:	6a3a      	ldr	r2, [r7, #32]
 801219e:	4413      	add	r3, r2
 80121a0:	617b      	str	r3, [r7, #20]
 80121a2:	e001      	b.n	80121a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	89b9      	ldrh	r1, [r7, #12]
 80121ac:	89ba      	ldrh	r2, [r7, #12]
 80121ae:	2302      	movs	r3, #2
 80121b0:	9301      	str	r3, [sp, #4]
 80121b2:	897b      	ldrh	r3, [r7, #10]
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	460b      	mov	r3, r1
 80121b8:	6979      	ldr	r1, [r7, #20]
 80121ba:	f7ff fe7d 	bl	8011eb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80121be:	687b      	ldr	r3, [r7, #4]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3718      	adds	r7, #24
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d106      	bne.n	80121e8 <pbuf_realloc+0x20>
 80121da:	4b3a      	ldr	r3, [pc, #232]	@ (80122c4 <pbuf_realloc+0xfc>)
 80121dc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80121e0:	4939      	ldr	r1, [pc, #228]	@ (80122c8 <pbuf_realloc+0x100>)
 80121e2:	483a      	ldr	r0, [pc, #232]	@ (80122cc <pbuf_realloc+0x104>)
 80121e4:	f00c f9a8 	bl	801e538 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	891b      	ldrh	r3, [r3, #8]
 80121ec:	887a      	ldrh	r2, [r7, #2]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d263      	bcs.n	80122ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	891a      	ldrh	r2, [r3, #8]
 80121f6:	887b      	ldrh	r3, [r7, #2]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80121fc:	887b      	ldrh	r3, [r7, #2]
 80121fe:	817b      	strh	r3, [r7, #10]
  q = p;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012204:	e018      	b.n	8012238 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	895b      	ldrh	r3, [r3, #10]
 801220a:	897a      	ldrh	r2, [r7, #10]
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	891a      	ldrh	r2, [r3, #8]
 8012214:	893b      	ldrh	r3, [r7, #8]
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	b29a      	uxth	r2, r3
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d106      	bne.n	8012238 <pbuf_realloc+0x70>
 801222a:	4b26      	ldr	r3, [pc, #152]	@ (80122c4 <pbuf_realloc+0xfc>)
 801222c:	f240 12af 	movw	r2, #431	@ 0x1af
 8012230:	4927      	ldr	r1, [pc, #156]	@ (80122d0 <pbuf_realloc+0x108>)
 8012232:	4826      	ldr	r0, [pc, #152]	@ (80122cc <pbuf_realloc+0x104>)
 8012234:	f00c f980 	bl	801e538 <iprintf>
  while (rem_len > q->len) {
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	895b      	ldrh	r3, [r3, #10]
 801223c:	897a      	ldrh	r2, [r7, #10]
 801223e:	429a      	cmp	r2, r3
 8012240:	d8e1      	bhi.n	8012206 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	7b1b      	ldrb	r3, [r3, #12]
 8012246:	f003 030f 	and.w	r3, r3, #15
 801224a:	2b00      	cmp	r3, #0
 801224c:	d121      	bne.n	8012292 <pbuf_realloc+0xca>
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	895b      	ldrh	r3, [r3, #10]
 8012252:	897a      	ldrh	r2, [r7, #10]
 8012254:	429a      	cmp	r2, r3
 8012256:	d01c      	beq.n	8012292 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	7b5b      	ldrb	r3, [r3, #13]
 801225c:	f003 0302 	and.w	r3, r3, #2
 8012260:	2b00      	cmp	r3, #0
 8012262:	d116      	bne.n	8012292 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	685a      	ldr	r2, [r3, #4]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	b29a      	uxth	r2, r3
 801226e:	897b      	ldrh	r3, [r7, #10]
 8012270:	4413      	add	r3, r2
 8012272:	b29b      	uxth	r3, r3
 8012274:	4619      	mov	r1, r3
 8012276:	68f8      	ldr	r0, [r7, #12]
 8012278:	f7fe ff58 	bl	801112c <mem_trim>
 801227c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <pbuf_realloc+0xca>
 8012284:	4b0f      	ldr	r3, [pc, #60]	@ (80122c4 <pbuf_realloc+0xfc>)
 8012286:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801228a:	4912      	ldr	r1, [pc, #72]	@ (80122d4 <pbuf_realloc+0x10c>)
 801228c:	480f      	ldr	r0, [pc, #60]	@ (80122cc <pbuf_realloc+0x104>)
 801228e:	f00c f953 	bl	801e538 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	897a      	ldrh	r2, [r7, #10]
 8012296:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	895a      	ldrh	r2, [r3, #10]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f000 f911 	bl	80124d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	e000      	b.n	80122bc <pbuf_realloc+0xf4>
    return;
 80122ba:	bf00      	nop

}
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	080226f4 	.word	0x080226f4
 80122c8:	0802280c 	.word	0x0802280c
 80122cc:	08022754 	.word	0x08022754
 80122d0:	08022824 	.word	0x08022824
 80122d4:	0802283c 	.word	0x0802283c

080122d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b086      	sub	sp, #24
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	4613      	mov	r3, r2
 80122e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d106      	bne.n	80122fa <pbuf_add_header_impl+0x22>
 80122ec:	4b2b      	ldr	r3, [pc, #172]	@ (801239c <pbuf_add_header_impl+0xc4>)
 80122ee:	f240 12df 	movw	r2, #479	@ 0x1df
 80122f2:	492b      	ldr	r1, [pc, #172]	@ (80123a0 <pbuf_add_header_impl+0xc8>)
 80122f4:	482b      	ldr	r0, [pc, #172]	@ (80123a4 <pbuf_add_header_impl+0xcc>)
 80122f6:	f00c f91f 	bl	801e538 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d003      	beq.n	8012308 <pbuf_add_header_impl+0x30>
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012306:	d301      	bcc.n	801230c <pbuf_add_header_impl+0x34>
    return 1;
 8012308:	2301      	movs	r3, #1
 801230a:	e043      	b.n	8012394 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <pbuf_add_header_impl+0x3e>
    return 0;
 8012312:	2300      	movs	r3, #0
 8012314:	e03e      	b.n	8012394 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	891a      	ldrh	r2, [r3, #8]
 801231e:	8a7b      	ldrh	r3, [r7, #18]
 8012320:	4413      	add	r3, r2
 8012322:	b29b      	uxth	r3, r3
 8012324:	8a7a      	ldrh	r2, [r7, #18]
 8012326:	429a      	cmp	r2, r3
 8012328:	d901      	bls.n	801232e <pbuf_add_header_impl+0x56>
    return 1;
 801232a:	2301      	movs	r3, #1
 801232c:	e032      	b.n	8012394 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	7b1b      	ldrb	r3, [r3, #12]
 8012332:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012334:	8a3b      	ldrh	r3, [r7, #16]
 8012336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	425b      	negs	r3, r3
 8012346:	4413      	add	r3, r2
 8012348:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	3310      	adds	r3, #16
 801234e:	697a      	ldr	r2, [r7, #20]
 8012350:	429a      	cmp	r2, r3
 8012352:	d20d      	bcs.n	8012370 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012354:	2301      	movs	r3, #1
 8012356:	e01d      	b.n	8012394 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012358:	79fb      	ldrb	r3, [r7, #7]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d006      	beq.n	801236c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	425b      	negs	r3, r3
 8012366:	4413      	add	r3, r2
 8012368:	617b      	str	r3, [r7, #20]
 801236a:	e001      	b.n	8012370 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801236c:	2301      	movs	r3, #1
 801236e:	e011      	b.n	8012394 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	697a      	ldr	r2, [r7, #20]
 8012374:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	895a      	ldrh	r2, [r3, #10]
 801237a:	8a7b      	ldrh	r3, [r7, #18]
 801237c:	4413      	add	r3, r2
 801237e:	b29a      	uxth	r2, r3
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	891a      	ldrh	r2, [r3, #8]
 8012388:	8a7b      	ldrh	r3, [r7, #18]
 801238a:	4413      	add	r3, r2
 801238c:	b29a      	uxth	r2, r3
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	811a      	strh	r2, [r3, #8]


  return 0;
 8012392:	2300      	movs	r3, #0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	080226f4 	.word	0x080226f4
 80123a0:	08022858 	.word	0x08022858
 80123a4:	08022754 	.word	0x08022754

080123a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80123b2:	2200      	movs	r2, #0
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7ff ff8e 	bl	80122d8 <pbuf_add_header_impl>
 80123bc:	4603      	mov	r3, r0
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
	...

080123c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d106      	bne.n	80123e6 <pbuf_remove_header+0x1e>
 80123d8:	4b20      	ldr	r3, [pc, #128]	@ (801245c <pbuf_remove_header+0x94>)
 80123da:	f240 224b 	movw	r2, #587	@ 0x24b
 80123de:	4920      	ldr	r1, [pc, #128]	@ (8012460 <pbuf_remove_header+0x98>)
 80123e0:	4820      	ldr	r0, [pc, #128]	@ (8012464 <pbuf_remove_header+0x9c>)
 80123e2:	f00c f8a9 	bl	801e538 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d003      	beq.n	80123f4 <pbuf_remove_header+0x2c>
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123f2:	d301      	bcc.n	80123f8 <pbuf_remove_header+0x30>
    return 1;
 80123f4:	2301      	movs	r3, #1
 80123f6:	e02c      	b.n	8012452 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d101      	bne.n	8012402 <pbuf_remove_header+0x3a>
    return 0;
 80123fe:	2300      	movs	r3, #0
 8012400:	e027      	b.n	8012452 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	895b      	ldrh	r3, [r3, #10]
 801240a:	89fa      	ldrh	r2, [r7, #14]
 801240c:	429a      	cmp	r2, r3
 801240e:	d908      	bls.n	8012422 <pbuf_remove_header+0x5a>
 8012410:	4b12      	ldr	r3, [pc, #72]	@ (801245c <pbuf_remove_header+0x94>)
 8012412:	f240 2255 	movw	r2, #597	@ 0x255
 8012416:	4914      	ldr	r1, [pc, #80]	@ (8012468 <pbuf_remove_header+0xa0>)
 8012418:	4812      	ldr	r0, [pc, #72]	@ (8012464 <pbuf_remove_header+0x9c>)
 801241a:	f00c f88d 	bl	801e538 <iprintf>
 801241e:	2301      	movs	r3, #1
 8012420:	e017      	b.n	8012452 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	685a      	ldr	r2, [r3, #4]
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	441a      	add	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	895a      	ldrh	r2, [r3, #10]
 8012438:	89fb      	ldrh	r3, [r7, #14]
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	b29a      	uxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	891a      	ldrh	r2, [r3, #8]
 8012446:	89fb      	ldrh	r3, [r7, #14]
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	b29a      	uxth	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	080226f4 	.word	0x080226f4
 8012460:	08022858 	.word	0x08022858
 8012464:	08022754 	.word	0x08022754
 8012468:	08022864 	.word	0x08022864

0801246c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	807b      	strh	r3, [r7, #2]
 8012478:	4613      	mov	r3, r2
 801247a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801247c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012480:	2b00      	cmp	r3, #0
 8012482:	da08      	bge.n	8012496 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012488:	425b      	negs	r3, r3
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff ff9b 	bl	80123c8 <pbuf_remove_header>
 8012492:	4603      	mov	r3, r0
 8012494:	e007      	b.n	80124a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012496:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801249a:	787a      	ldrb	r2, [r7, #1]
 801249c:	4619      	mov	r1, r3
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff ff1a 	bl	80122d8 <pbuf_add_header_impl>
 80124a4:	4603      	mov	r3, r0
  }
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b082      	sub	sp, #8
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	460b      	mov	r3, r1
 80124b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80124ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80124be:	2201      	movs	r2, #1
 80124c0:	4619      	mov	r1, r3
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff ffd2 	bl	801246c <pbuf_header_impl>
 80124c8:	4603      	mov	r3, r0
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
	...

080124d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d10b      	bne.n	80124fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d106      	bne.n	80124f6 <pbuf_free+0x22>
 80124e8:	4b3b      	ldr	r3, [pc, #236]	@ (80125d8 <pbuf_free+0x104>)
 80124ea:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80124ee:	493b      	ldr	r1, [pc, #236]	@ (80125dc <pbuf_free+0x108>)
 80124f0:	483b      	ldr	r0, [pc, #236]	@ (80125e0 <pbuf_free+0x10c>)
 80124f2:	f00c f821 	bl	801e538 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e069      	b.n	80125ce <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80124fe:	e062      	b.n	80125c6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012500:	f00a fe6e 	bl	801d1e0 <sys_arch_protect>
 8012504:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	7b9b      	ldrb	r3, [r3, #14]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d106      	bne.n	801251c <pbuf_free+0x48>
 801250e:	4b32      	ldr	r3, [pc, #200]	@ (80125d8 <pbuf_free+0x104>)
 8012510:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012514:	4933      	ldr	r1, [pc, #204]	@ (80125e4 <pbuf_free+0x110>)
 8012516:	4832      	ldr	r0, [pc, #200]	@ (80125e0 <pbuf_free+0x10c>)
 8012518:	f00c f80e 	bl	801e538 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	7b9b      	ldrb	r3, [r3, #14]
 8012520:	3b01      	subs	r3, #1
 8012522:	b2da      	uxtb	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	739a      	strb	r2, [r3, #14]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	7b9b      	ldrb	r3, [r3, #14]
 801252c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801252e:	69b8      	ldr	r0, [r7, #24]
 8012530:	f00a fe64 	bl	801d1fc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d143      	bne.n	80125c2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	7b1b      	ldrb	r3, [r3, #12]
 8012544:	f003 030f 	and.w	r3, r3, #15
 8012548:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	7b5b      	ldrb	r3, [r3, #13]
 801254e:	f003 0302 	and.w	r3, r3, #2
 8012552:	2b00      	cmp	r3, #0
 8012554:	d011      	beq.n	801257a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	691b      	ldr	r3, [r3, #16]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <pbuf_free+0x9c>
 8012562:	4b1d      	ldr	r3, [pc, #116]	@ (80125d8 <pbuf_free+0x104>)
 8012564:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012568:	491f      	ldr	r1, [pc, #124]	@ (80125e8 <pbuf_free+0x114>)
 801256a:	481d      	ldr	r0, [pc, #116]	@ (80125e0 <pbuf_free+0x10c>)
 801256c:	f00b ffe4 	bl	801e538 <iprintf>
        pc->custom_free_function(p);
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	691b      	ldr	r3, [r3, #16]
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	4798      	blx	r3
 8012578:	e01d      	b.n	80125b6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801257a:	7bfb      	ldrb	r3, [r7, #15]
 801257c:	2b02      	cmp	r3, #2
 801257e:	d104      	bne.n	801258a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012580:	6879      	ldr	r1, [r7, #4]
 8012582:	200d      	movs	r0, #13
 8012584:	f7ff f8f6 	bl	8011774 <memp_free>
 8012588:	e015      	b.n	80125b6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801258a:	7bfb      	ldrb	r3, [r7, #15]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d104      	bne.n	801259a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012590:	6879      	ldr	r1, [r7, #4]
 8012592:	200c      	movs	r0, #12
 8012594:	f7ff f8ee 	bl	8011774 <memp_free>
 8012598:	e00d      	b.n	80125b6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d103      	bne.n	80125a8 <pbuf_free+0xd4>
          mem_free(p);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7fe fd33 	bl	801100c <mem_free>
 80125a6:	e006      	b.n	80125b6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80125a8:	4b0b      	ldr	r3, [pc, #44]	@ (80125d8 <pbuf_free+0x104>)
 80125aa:	f240 320f 	movw	r2, #783	@ 0x30f
 80125ae:	490f      	ldr	r1, [pc, #60]	@ (80125ec <pbuf_free+0x118>)
 80125b0:	480b      	ldr	r0, [pc, #44]	@ (80125e0 <pbuf_free+0x10c>)
 80125b2:	f00b ffc1 	bl	801e538 <iprintf>
        }
      }
      count++;
 80125b6:	7ffb      	ldrb	r3, [r7, #31]
 80125b8:	3301      	adds	r3, #1
 80125ba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	607b      	str	r3, [r7, #4]
 80125c0:	e001      	b.n	80125c6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80125c2:	2300      	movs	r3, #0
 80125c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d199      	bne.n	8012500 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80125cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3720      	adds	r7, #32
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	080226f4 	.word	0x080226f4
 80125dc:	08022858 	.word	0x08022858
 80125e0:	08022754 	.word	0x08022754
 80125e4:	08022884 	.word	0x08022884
 80125e8:	0802289c 	.word	0x0802289c
 80125ec:	080228c0 	.word	0x080228c0

080125f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80125f8:	2300      	movs	r3, #0
 80125fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80125fc:	e005      	b.n	801260a <pbuf_clen+0x1a>
    ++len;
 80125fe:	89fb      	ldrh	r3, [r7, #14]
 8012600:	3301      	adds	r3, #1
 8012602:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1f6      	bne.n	80125fe <pbuf_clen+0xe>
  }
  return len;
 8012610:	89fb      	ldrh	r3, [r7, #14]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3714      	adds	r7, #20
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr
	...

08012620 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d016      	beq.n	801265c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801262e:	f00a fdd7 	bl	801d1e0 <sys_arch_protect>
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	7b9b      	ldrb	r3, [r3, #14]
 8012638:	3301      	adds	r3, #1
 801263a:	b2da      	uxtb	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	739a      	strb	r2, [r3, #14]
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f00a fddb 	bl	801d1fc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	7b9b      	ldrb	r3, [r3, #14]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <pbuf_ref+0x3c>
 801264e:	4b05      	ldr	r3, [pc, #20]	@ (8012664 <pbuf_ref+0x44>)
 8012650:	f240 3242 	movw	r2, #834	@ 0x342
 8012654:	4904      	ldr	r1, [pc, #16]	@ (8012668 <pbuf_ref+0x48>)
 8012656:	4805      	ldr	r0, [pc, #20]	@ (801266c <pbuf_ref+0x4c>)
 8012658:	f00b ff6e 	bl	801e538 <iprintf>
  }
}
 801265c:	bf00      	nop
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	080226f4 	.word	0x080226f4
 8012668:	080228d4 	.word	0x080228d4
 801266c:	08022754 	.word	0x08022754

08012670 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b084      	sub	sp, #16
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <pbuf_cat+0x16>
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d107      	bne.n	8012696 <pbuf_cat+0x26>
 8012686:	4b20      	ldr	r3, [pc, #128]	@ (8012708 <pbuf_cat+0x98>)
 8012688:	f240 3259 	movw	r2, #857	@ 0x359
 801268c:	491f      	ldr	r1, [pc, #124]	@ (801270c <pbuf_cat+0x9c>)
 801268e:	4820      	ldr	r0, [pc, #128]	@ (8012710 <pbuf_cat+0xa0>)
 8012690:	f00b ff52 	bl	801e538 <iprintf>
 8012694:	e034      	b.n	8012700 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	60fb      	str	r3, [r7, #12]
 801269a:	e00a      	b.n	80126b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	891a      	ldrh	r2, [r3, #8]
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	891b      	ldrh	r3, [r3, #8]
 80126a4:	4413      	add	r3, r2
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1f0      	bne.n	801269c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	891a      	ldrh	r2, [r3, #8]
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	895b      	ldrh	r3, [r3, #10]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d006      	beq.n	80126d4 <pbuf_cat+0x64>
 80126c6:	4b10      	ldr	r3, [pc, #64]	@ (8012708 <pbuf_cat+0x98>)
 80126c8:	f240 3262 	movw	r2, #866	@ 0x362
 80126cc:	4911      	ldr	r1, [pc, #68]	@ (8012714 <pbuf_cat+0xa4>)
 80126ce:	4810      	ldr	r0, [pc, #64]	@ (8012710 <pbuf_cat+0xa0>)
 80126d0:	f00b ff32 	bl	801e538 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d006      	beq.n	80126ea <pbuf_cat+0x7a>
 80126dc:	4b0a      	ldr	r3, [pc, #40]	@ (8012708 <pbuf_cat+0x98>)
 80126de:	f240 3263 	movw	r2, #867	@ 0x363
 80126e2:	490d      	ldr	r1, [pc, #52]	@ (8012718 <pbuf_cat+0xa8>)
 80126e4:	480a      	ldr	r0, [pc, #40]	@ (8012710 <pbuf_cat+0xa0>)
 80126e6:	f00b ff27 	bl	801e538 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	891a      	ldrh	r2, [r3, #8]
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	891b      	ldrh	r3, [r3, #8]
 80126f2:	4413      	add	r3, r2
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	080226f4 	.word	0x080226f4
 801270c:	080228e8 	.word	0x080228e8
 8012710:	08022754 	.word	0x08022754
 8012714:	08022920 	.word	0x08022920
 8012718:	08022950 	.word	0x08022950

0801271c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7ff ffa1 	bl	8012670 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801272e:	6838      	ldr	r0, [r7, #0]
 8012730:	f7ff ff76 	bl	8012620 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012734:	bf00      	nop
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012746:	2300      	movs	r3, #0
 8012748:	617b      	str	r3, [r7, #20]
 801274a:	2300      	movs	r3, #0
 801274c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d008      	beq.n	8012766 <pbuf_copy+0x2a>
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d005      	beq.n	8012766 <pbuf_copy+0x2a>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	891a      	ldrh	r2, [r3, #8]
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	891b      	ldrh	r3, [r3, #8]
 8012762:	429a      	cmp	r2, r3
 8012764:	d209      	bcs.n	801277a <pbuf_copy+0x3e>
 8012766:	4b57      	ldr	r3, [pc, #348]	@ (80128c4 <pbuf_copy+0x188>)
 8012768:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801276c:	4956      	ldr	r1, [pc, #344]	@ (80128c8 <pbuf_copy+0x18c>)
 801276e:	4857      	ldr	r0, [pc, #348]	@ (80128cc <pbuf_copy+0x190>)
 8012770:	f00b fee2 	bl	801e538 <iprintf>
 8012774:	f06f 030f 	mvn.w	r3, #15
 8012778:	e09f      	b.n	80128ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	895b      	ldrh	r3, [r3, #10]
 801277e:	461a      	mov	r2, r3
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	1ad2      	subs	r2, r2, r3
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	895b      	ldrh	r3, [r3, #10]
 8012788:	4619      	mov	r1, r3
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	1acb      	subs	r3, r1, r3
 801278e:	429a      	cmp	r2, r3
 8012790:	d306      	bcc.n	80127a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	895b      	ldrh	r3, [r3, #10]
 8012796:	461a      	mov	r2, r3
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	60fb      	str	r3, [r7, #12]
 801279e:	e005      	b.n	80127ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	895b      	ldrh	r3, [r3, #10]
 80127a4:	461a      	mov	r2, r3
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	1ad3      	subs	r3, r2, r3
 80127aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	685a      	ldr	r2, [r3, #4]
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	18d0      	adds	r0, r2, r3
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	685a      	ldr	r2, [r3, #4]
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	4413      	add	r3, r2
 80127bc:	68fa      	ldr	r2, [r7, #12]
 80127be:	4619      	mov	r1, r3
 80127c0:	f00c f951 	bl	801ea66 <memcpy>
    offset_to += len;
 80127c4:	697a      	ldr	r2, [r7, #20]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4413      	add	r3, r2
 80127ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80127cc:	693a      	ldr	r2, [r7, #16]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	4413      	add	r3, r2
 80127d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	895b      	ldrh	r3, [r3, #10]
 80127d8:	461a      	mov	r2, r3
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	4293      	cmp	r3, r2
 80127de:	d906      	bls.n	80127ee <pbuf_copy+0xb2>
 80127e0:	4b38      	ldr	r3, [pc, #224]	@ (80128c4 <pbuf_copy+0x188>)
 80127e2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80127e6:	493a      	ldr	r1, [pc, #232]	@ (80128d0 <pbuf_copy+0x194>)
 80127e8:	4838      	ldr	r0, [pc, #224]	@ (80128cc <pbuf_copy+0x190>)
 80127ea:	f00b fea5 	bl	801e538 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	895b      	ldrh	r3, [r3, #10]
 80127f2:	461a      	mov	r2, r3
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d906      	bls.n	8012808 <pbuf_copy+0xcc>
 80127fa:	4b32      	ldr	r3, [pc, #200]	@ (80128c4 <pbuf_copy+0x188>)
 80127fc:	f240 32da 	movw	r2, #986	@ 0x3da
 8012800:	4934      	ldr	r1, [pc, #208]	@ (80128d4 <pbuf_copy+0x198>)
 8012802:	4832      	ldr	r0, [pc, #200]	@ (80128cc <pbuf_copy+0x190>)
 8012804:	f00b fe98 	bl	801e538 <iprintf>
    if (offset_from >= p_from->len) {
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	895b      	ldrh	r3, [r3, #10]
 801280c:	461a      	mov	r2, r3
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	4293      	cmp	r3, r2
 8012812:	d304      	bcc.n	801281e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012814:	2300      	movs	r3, #0
 8012816:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	895b      	ldrh	r3, [r3, #10]
 8012822:	461a      	mov	r2, r3
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	4293      	cmp	r3, r2
 8012828:	d114      	bne.n	8012854 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801282a:	2300      	movs	r3, #0
 801282c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10c      	bne.n	8012854 <pbuf_copy+0x118>
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d009      	beq.n	8012854 <pbuf_copy+0x118>
 8012840:	4b20      	ldr	r3, [pc, #128]	@ (80128c4 <pbuf_copy+0x188>)
 8012842:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012846:	4924      	ldr	r1, [pc, #144]	@ (80128d8 <pbuf_copy+0x19c>)
 8012848:	4820      	ldr	r0, [pc, #128]	@ (80128cc <pbuf_copy+0x190>)
 801284a:	f00b fe75 	bl	801e538 <iprintf>
 801284e:	f06f 030f 	mvn.w	r3, #15
 8012852:	e032      	b.n	80128ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d013      	beq.n	8012882 <pbuf_copy+0x146>
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	895a      	ldrh	r2, [r3, #10]
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	891b      	ldrh	r3, [r3, #8]
 8012862:	429a      	cmp	r2, r3
 8012864:	d10d      	bne.n	8012882 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d009      	beq.n	8012882 <pbuf_copy+0x146>
 801286e:	4b15      	ldr	r3, [pc, #84]	@ (80128c4 <pbuf_copy+0x188>)
 8012870:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012874:	4919      	ldr	r1, [pc, #100]	@ (80128dc <pbuf_copy+0x1a0>)
 8012876:	4815      	ldr	r0, [pc, #84]	@ (80128cc <pbuf_copy+0x190>)
 8012878:	f00b fe5e 	bl	801e538 <iprintf>
 801287c:	f06f 0305 	mvn.w	r3, #5
 8012880:	e01b      	b.n	80128ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d013      	beq.n	80128b0 <pbuf_copy+0x174>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	895a      	ldrh	r2, [r3, #10]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	891b      	ldrh	r3, [r3, #8]
 8012890:	429a      	cmp	r2, r3
 8012892:	d10d      	bne.n	80128b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d009      	beq.n	80128b0 <pbuf_copy+0x174>
 801289c:	4b09      	ldr	r3, [pc, #36]	@ (80128c4 <pbuf_copy+0x188>)
 801289e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80128a2:	490e      	ldr	r1, [pc, #56]	@ (80128dc <pbuf_copy+0x1a0>)
 80128a4:	4809      	ldr	r0, [pc, #36]	@ (80128cc <pbuf_copy+0x190>)
 80128a6:	f00b fe47 	bl	801e538 <iprintf>
 80128aa:	f06f 0305 	mvn.w	r3, #5
 80128ae:	e004      	b.n	80128ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f47f af61 	bne.w	801277a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	080226f4 	.word	0x080226f4
 80128c8:	0802299c 	.word	0x0802299c
 80128cc:	08022754 	.word	0x08022754
 80128d0:	080229cc 	.word	0x080229cc
 80128d4:	080229e4 	.word	0x080229e4
 80128d8:	08022a00 	.word	0x08022a00
 80128dc:	08022a10 	.word	0x08022a10

080128e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b088      	sub	sp, #32
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	4611      	mov	r1, r2
 80128ec:	461a      	mov	r2, r3
 80128ee:	460b      	mov	r3, r1
 80128f0:	80fb      	strh	r3, [r7, #6]
 80128f2:	4613      	mov	r3, r2
 80128f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80128f6:	2300      	movs	r3, #0
 80128f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d108      	bne.n	8012916 <pbuf_copy_partial+0x36>
 8012904:	4b2b      	ldr	r3, [pc, #172]	@ (80129b4 <pbuf_copy_partial+0xd4>)
 8012906:	f240 420a 	movw	r2, #1034	@ 0x40a
 801290a:	492b      	ldr	r1, [pc, #172]	@ (80129b8 <pbuf_copy_partial+0xd8>)
 801290c:	482b      	ldr	r0, [pc, #172]	@ (80129bc <pbuf_copy_partial+0xdc>)
 801290e:	f00b fe13 	bl	801e538 <iprintf>
 8012912:	2300      	movs	r3, #0
 8012914:	e04a      	b.n	80129ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d108      	bne.n	801292e <pbuf_copy_partial+0x4e>
 801291c:	4b25      	ldr	r3, [pc, #148]	@ (80129b4 <pbuf_copy_partial+0xd4>)
 801291e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012922:	4927      	ldr	r1, [pc, #156]	@ (80129c0 <pbuf_copy_partial+0xe0>)
 8012924:	4825      	ldr	r0, [pc, #148]	@ (80129bc <pbuf_copy_partial+0xdc>)
 8012926:	f00b fe07 	bl	801e538 <iprintf>
 801292a:	2300      	movs	r3, #0
 801292c:	e03e      	b.n	80129ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	61fb      	str	r3, [r7, #28]
 8012932:	e034      	b.n	801299e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012934:	88bb      	ldrh	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00a      	beq.n	8012950 <pbuf_copy_partial+0x70>
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	895b      	ldrh	r3, [r3, #10]
 801293e:	88ba      	ldrh	r2, [r7, #4]
 8012940:	429a      	cmp	r2, r3
 8012942:	d305      	bcc.n	8012950 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	895b      	ldrh	r3, [r3, #10]
 8012948:	88ba      	ldrh	r2, [r7, #4]
 801294a:	1ad3      	subs	r3, r2, r3
 801294c:	80bb      	strh	r3, [r7, #4]
 801294e:	e023      	b.n	8012998 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	895a      	ldrh	r2, [r3, #10]
 8012954:	88bb      	ldrh	r3, [r7, #4]
 8012956:	1ad3      	subs	r3, r2, r3
 8012958:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801295a:	8b3a      	ldrh	r2, [r7, #24]
 801295c:	88fb      	ldrh	r3, [r7, #6]
 801295e:	429a      	cmp	r2, r3
 8012960:	d901      	bls.n	8012966 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012962:	88fb      	ldrh	r3, [r7, #6]
 8012964:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012966:	8b7b      	ldrh	r3, [r7, #26]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	18d0      	adds	r0, r2, r3
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	685a      	ldr	r2, [r3, #4]
 8012970:	88bb      	ldrh	r3, [r7, #4]
 8012972:	4413      	add	r3, r2
 8012974:	8b3a      	ldrh	r2, [r7, #24]
 8012976:	4619      	mov	r1, r3
 8012978:	f00c f875 	bl	801ea66 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801297c:	8afa      	ldrh	r2, [r7, #22]
 801297e:	8b3b      	ldrh	r3, [r7, #24]
 8012980:	4413      	add	r3, r2
 8012982:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012984:	8b7a      	ldrh	r2, [r7, #26]
 8012986:	8b3b      	ldrh	r3, [r7, #24]
 8012988:	4413      	add	r3, r2
 801298a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801298c:	88fa      	ldrh	r2, [r7, #6]
 801298e:	8b3b      	ldrh	r3, [r7, #24]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012994:	2300      	movs	r3, #0
 8012996:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	61fb      	str	r3, [r7, #28]
 801299e:	88fb      	ldrh	r3, [r7, #6]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d002      	beq.n	80129aa <pbuf_copy_partial+0xca>
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1c4      	bne.n	8012934 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80129aa:	8afb      	ldrh	r3, [r7, #22]
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3720      	adds	r7, #32
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	080226f4 	.word	0x080226f4
 80129b8:	08022a3c 	.word	0x08022a3c
 80129bc:	08022754 	.word	0x08022754
 80129c0:	08022a5c 	.word	0x08022a5c

080129c4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b087      	sub	sp, #28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	460b      	mov	r3, r1
 80129ce:	607a      	str	r2, [r7, #4]
 80129d0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80129d2:	897b      	ldrh	r3, [r7, #10]
 80129d4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80129da:	e007      	b.n	80129ec <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	895b      	ldrh	r3, [r3, #10]
 80129e0:	8afa      	ldrh	r2, [r7, #22]
 80129e2:	1ad3      	subs	r3, r2, r3
 80129e4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d004      	beq.n	80129fc <pbuf_skip_const+0x38>
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	895b      	ldrh	r3, [r3, #10]
 80129f6:	8afa      	ldrh	r2, [r7, #22]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d2ef      	bcs.n	80129dc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d002      	beq.n	8012a08 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	8afa      	ldrh	r2, [r7, #22]
 8012a06:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8012a08:	693b      	ldr	r3, [r7, #16]
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	371c      	adds	r7, #28
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a14:	4770      	bx	lr

08012a16 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b086      	sub	sp, #24
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	60f8      	str	r0, [r7, #12]
 8012a1e:	460b      	mov	r3, r1
 8012a20:	607a      	str	r2, [r7, #4]
 8012a22:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8012a24:	897b      	ldrh	r3, [r7, #10]
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	68f8      	ldr	r0, [r7, #12]
 8012a2c:	f7ff ffca 	bl	80129c4 <pbuf_skip_const>
 8012a30:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8012a32:	697b      	ldr	r3, [r7, #20]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3718      	adds	r7, #24
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b088      	sub	sp, #32
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	4613      	mov	r3, r2
 8012a48:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8012a4a:	88fb      	ldrh	r3, [r7, #6]
 8012a4c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d109      	bne.n	8012a6c <pbuf_take+0x30>
 8012a58:	4b3a      	ldr	r3, [pc, #232]	@ (8012b44 <pbuf_take+0x108>)
 8012a5a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8012a5e:	493a      	ldr	r1, [pc, #232]	@ (8012b48 <pbuf_take+0x10c>)
 8012a60:	483a      	ldr	r0, [pc, #232]	@ (8012b4c <pbuf_take+0x110>)
 8012a62:	f00b fd69 	bl	801e538 <iprintf>
 8012a66:	f06f 030f 	mvn.w	r3, #15
 8012a6a:	e067      	b.n	8012b3c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d109      	bne.n	8012a86 <pbuf_take+0x4a>
 8012a72:	4b34      	ldr	r3, [pc, #208]	@ (8012b44 <pbuf_take+0x108>)
 8012a74:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8012a78:	4935      	ldr	r1, [pc, #212]	@ (8012b50 <pbuf_take+0x114>)
 8012a7a:	4834      	ldr	r0, [pc, #208]	@ (8012b4c <pbuf_take+0x110>)
 8012a7c:	f00b fd5c 	bl	801e538 <iprintf>
 8012a80:	f06f 030f 	mvn.w	r3, #15
 8012a84:	e05a      	b.n	8012b3c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	891b      	ldrh	r3, [r3, #8]
 8012a8a:	88fa      	ldrh	r2, [r7, #6]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d909      	bls.n	8012aa4 <pbuf_take+0x68>
 8012a90:	4b2c      	ldr	r3, [pc, #176]	@ (8012b44 <pbuf_take+0x108>)
 8012a92:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8012a96:	492f      	ldr	r1, [pc, #188]	@ (8012b54 <pbuf_take+0x118>)
 8012a98:	482c      	ldr	r0, [pc, #176]	@ (8012b4c <pbuf_take+0x110>)
 8012a9a:	f00b fd4d 	bl	801e538 <iprintf>
 8012a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa2:	e04b      	b.n	8012b3c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d007      	beq.n	8012aba <pbuf_take+0x7e>
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d004      	beq.n	8012aba <pbuf_take+0x7e>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	891b      	ldrh	r3, [r3, #8]
 8012ab4:	88fa      	ldrh	r2, [r7, #6]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d902      	bls.n	8012ac0 <pbuf_take+0x84>
    return ERR_ARG;
 8012aba:	f06f 030f 	mvn.w	r3, #15
 8012abe:	e03d      	b.n	8012b3c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	61fb      	str	r3, [r7, #28]
 8012ac4:	e028      	b.n	8012b18 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d106      	bne.n	8012ada <pbuf_take+0x9e>
 8012acc:	4b1d      	ldr	r3, [pc, #116]	@ (8012b44 <pbuf_take+0x108>)
 8012ace:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8012ad2:	4921      	ldr	r1, [pc, #132]	@ (8012b58 <pbuf_take+0x11c>)
 8012ad4:	481d      	ldr	r0, [pc, #116]	@ (8012b4c <pbuf_take+0x110>)
 8012ad6:	f00b fd2f 	bl	801e538 <iprintf>
    buf_copy_len = total_copy_len;
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	895b      	ldrh	r3, [r3, #10]
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d902      	bls.n	8012af0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	895b      	ldrh	r3, [r3, #10]
 8012aee:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	6858      	ldr	r0, [r3, #4]
 8012af4:	68ba      	ldr	r2, [r7, #8]
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	4413      	add	r3, r2
 8012afa:	69ba      	ldr	r2, [r7, #24]
 8012afc:	4619      	mov	r1, r3
 8012afe:	f00b ffb2 	bl	801ea66 <memcpy>
    total_copy_len -= buf_copy_len;
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	1ad3      	subs	r3, r2, r3
 8012b08:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8012b0a:	693a      	ldr	r2, [r7, #16]
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	4413      	add	r3, r2
 8012b10:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	61fb      	str	r3, [r7, #28]
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1d3      	bne.n	8012ac6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d103      	bne.n	8012b2c <pbuf_take+0xf0>
 8012b24:	88fb      	ldrh	r3, [r7, #6]
 8012b26:	693a      	ldr	r2, [r7, #16]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d006      	beq.n	8012b3a <pbuf_take+0xfe>
 8012b2c:	4b05      	ldr	r3, [pc, #20]	@ (8012b44 <pbuf_take+0x108>)
 8012b2e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8012b32:	490a      	ldr	r1, [pc, #40]	@ (8012b5c <pbuf_take+0x120>)
 8012b34:	4805      	ldr	r0, [pc, #20]	@ (8012b4c <pbuf_take+0x110>)
 8012b36:	f00b fcff 	bl	801e538 <iprintf>
  return ERR_OK;
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3720      	adds	r7, #32
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	080226f4 	.word	0x080226f4
 8012b48:	08022acc 	.word	0x08022acc
 8012b4c:	08022754 	.word	0x08022754
 8012b50:	08022ae4 	.word	0x08022ae4
 8012b54:	08022b00 	.word	0x08022b00
 8012b58:	08022b20 	.word	0x08022b20
 8012b5c:	08022b38 	.word	0x08022b38

08012b60 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b088      	sub	sp, #32
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	460b      	mov	r3, r1
 8012b70:	80fb      	strh	r3, [r7, #6]
 8012b72:	4613      	mov	r3, r2
 8012b74:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8012b76:	f107 0210 	add.w	r2, r7, #16
 8012b7a:	88bb      	ldrh	r3, [r7, #4]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f7ff ff49 	bl	8012a16 <pbuf_skip>
 8012b84:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d047      	beq.n	8012c1c <pbuf_take_at+0xbc>
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	891b      	ldrh	r3, [r3, #8]
 8012b90:	461a      	mov	r2, r3
 8012b92:	8a3b      	ldrh	r3, [r7, #16]
 8012b94:	4619      	mov	r1, r3
 8012b96:	88fb      	ldrh	r3, [r7, #6]
 8012b98:	440b      	add	r3, r1
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	db3e      	blt.n	8012c1c <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8012b9e:	88fb      	ldrh	r3, [r7, #6]
 8012ba0:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	895a      	ldrh	r2, [r3, #10]
 8012baa:	8a3b      	ldrh	r3, [r7, #16]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d806      	bhi.n	8012bbe <pbuf_take_at+0x5e>
 8012bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8012c28 <pbuf_take_at+0xc8>)
 8012bb2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012bb6:	491d      	ldr	r1, [pc, #116]	@ (8012c2c <pbuf_take_at+0xcc>)
 8012bb8:	481d      	ldr	r0, [pc, #116]	@ (8012c30 <pbuf_take_at+0xd0>)
 8012bba:	f00b fcbd 	bl	801e538 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	895b      	ldrh	r3, [r3, #10]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	8a3b      	ldrh	r3, [r7, #16]
 8012bc6:	1ad2      	subs	r2, r2, r3
 8012bc8:	88fb      	ldrh	r3, [r7, #6]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	da05      	bge.n	8012bda <pbuf_take_at+0x7a>
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	895a      	ldrh	r2, [r3, #10]
 8012bd2:	8a3b      	ldrh	r3, [r7, #16]
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	e000      	b.n	8012bdc <pbuf_take_at+0x7c>
 8012bda:	88fb      	ldrh	r3, [r7, #6]
 8012bdc:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	8a3a      	ldrh	r2, [r7, #16]
 8012be4:	4413      	add	r3, r2
 8012be6:	8a7a      	ldrh	r2, [r7, #18]
 8012be8:	68b9      	ldr	r1, [r7, #8]
 8012bea:	4618      	mov	r0, r3
 8012bec:	f00b ff3b 	bl	801ea66 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8012bf0:	8b7a      	ldrh	r2, [r7, #26]
 8012bf2:	8a7b      	ldrh	r3, [r7, #18]
 8012bf4:	1ad3      	subs	r3, r2, r3
 8012bf6:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012bf8:	8a7b      	ldrh	r3, [r7, #18]
 8012bfa:	697a      	ldr	r2, [r7, #20]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012c00:	8b7b      	ldrh	r3, [r7, #26]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d008      	beq.n	8012c18 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	8b7a      	ldrh	r2, [r7, #26]
 8012c0c:	6979      	ldr	r1, [r7, #20]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff ff14 	bl	8012a3c <pbuf_take>
 8012c14:	4603      	mov	r3, r0
 8012c16:	e003      	b.n	8012c20 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	e001      	b.n	8012c20 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8012c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3720      	adds	r7, #32
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	080226f4 	.word	0x080226f4
 8012c2c:	08022b50 	.word	0x08022b50
 8012c30:	08022754 	.word	0x08022754

08012c34 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	603a      	str	r2, [r7, #0]
 8012c3e:	71fb      	strb	r3, [r7, #7]
 8012c40:	460b      	mov	r3, r1
 8012c42:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	8919      	ldrh	r1, [r3, #8]
 8012c48:	88ba      	ldrh	r2, [r7, #4]
 8012c4a:	79fb      	ldrb	r3, [r7, #7]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff f95d 	bl	8011f0c <pbuf_alloc>
 8012c52:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d101      	bne.n	8012c5e <pbuf_clone+0x2a>
    return NULL;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	e011      	b.n	8012c82 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012c5e:	6839      	ldr	r1, [r7, #0]
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f7ff fd6b 	bl	801273c <pbuf_copy>
 8012c66:	4603      	mov	r3, r0
 8012c68:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012c6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d006      	beq.n	8012c80 <pbuf_clone+0x4c>
 8012c72:	4b06      	ldr	r3, [pc, #24]	@ (8012c8c <pbuf_clone+0x58>)
 8012c74:	f240 5224 	movw	r2, #1316	@ 0x524
 8012c78:	4905      	ldr	r1, [pc, #20]	@ (8012c90 <pbuf_clone+0x5c>)
 8012c7a:	4806      	ldr	r0, [pc, #24]	@ (8012c94 <pbuf_clone+0x60>)
 8012c7c:	f00b fc5c 	bl	801e538 <iprintf>
  return q;
 8012c80:	68fb      	ldr	r3, [r7, #12]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	080226f4 	.word	0x080226f4
 8012c90:	08022b68 	.word	0x08022b68
 8012c94:	08022754 	.word	0x08022754

08012c98 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	807b      	strh	r3, [r7, #2]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8012ca8:	f107 020a 	add.w	r2, r7, #10
 8012cac:	887b      	ldrh	r3, [r7, #2]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7ff feb0 	bl	8012a16 <pbuf_skip>
 8012cb6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00a      	beq.n	8012cd4 <pbuf_put_at+0x3c>
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	895a      	ldrh	r2, [r3, #10]
 8012cc2:	897b      	ldrh	r3, [r7, #10]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d905      	bls.n	8012cd4 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	897a      	ldrh	r2, [r7, #10]
 8012cce:	4413      	add	r3, r2
 8012cd0:	787a      	ldrb	r2, [r7, #1]
 8012cd2:	701a      	strb	r2, [r3, #0]
  }
}
 8012cd4:	bf00      	nop
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ce0:	f00a fb5e 	bl	801d3a0 <rand>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012cf2:	b29a      	uxth	r2, r3
 8012cf4:	4b01      	ldr	r3, [pc, #4]	@ (8012cfc <tcp_init+0x20>)
 8012cf6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012cf8:	bf00      	nop
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	20000040 	.word	0x20000040

08012d00 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	7d1b      	ldrb	r3, [r3, #20]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d105      	bne.n	8012d1c <tcp_free+0x1c>
 8012d10:	4b06      	ldr	r3, [pc, #24]	@ (8012d2c <tcp_free+0x2c>)
 8012d12:	22d4      	movs	r2, #212	@ 0xd4
 8012d14:	4906      	ldr	r1, [pc, #24]	@ (8012d30 <tcp_free+0x30>)
 8012d16:	4807      	ldr	r0, [pc, #28]	@ (8012d34 <tcp_free+0x34>)
 8012d18:	f00b fc0e 	bl	801e538 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012d1c:	6879      	ldr	r1, [r7, #4]
 8012d1e:	2001      	movs	r0, #1
 8012d20:	f7fe fd28 	bl	8011774 <memp_free>
}
 8012d24:	bf00      	nop
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	08022bf4 	.word	0x08022bf4
 8012d30:	08022c24 	.word	0x08022c24
 8012d34:	08022c38 	.word	0x08022c38

08012d38 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	7d1b      	ldrb	r3, [r3, #20]
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d105      	bne.n	8012d54 <tcp_free_listen+0x1c>
 8012d48:	4b06      	ldr	r3, [pc, #24]	@ (8012d64 <tcp_free_listen+0x2c>)
 8012d4a:	22df      	movs	r2, #223	@ 0xdf
 8012d4c:	4906      	ldr	r1, [pc, #24]	@ (8012d68 <tcp_free_listen+0x30>)
 8012d4e:	4807      	ldr	r0, [pc, #28]	@ (8012d6c <tcp_free_listen+0x34>)
 8012d50:	f00b fbf2 	bl	801e538 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012d54:	6879      	ldr	r1, [r7, #4]
 8012d56:	2002      	movs	r0, #2
 8012d58:	f7fe fd0c 	bl	8011774 <memp_free>
}
 8012d5c:	bf00      	nop
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	08022bf4 	.word	0x08022bf4
 8012d68:	08022c60 	.word	0x08022c60
 8012d6c:	08022c38 	.word	0x08022c38

08012d70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012d74:	f000 fea4 	bl	8013ac0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012d78:	4b07      	ldr	r3, [pc, #28]	@ (8012d98 <tcp_tmr+0x28>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	4b05      	ldr	r3, [pc, #20]	@ (8012d98 <tcp_tmr+0x28>)
 8012d82:	701a      	strb	r2, [r3, #0]
 8012d84:	4b04      	ldr	r3, [pc, #16]	@ (8012d98 <tcp_tmr+0x28>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f003 0301 	and.w	r3, r3, #1
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012d90:	f000 fb54 	bl	801343c <tcp_slowtmr>
  }
}
 8012d94:	bf00      	nop
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	2001776d 	.word	0x2001776d

08012d9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d105      	bne.n	8012db8 <tcp_remove_listener+0x1c>
 8012dac:	4b0d      	ldr	r3, [pc, #52]	@ (8012de4 <tcp_remove_listener+0x48>)
 8012dae:	22ff      	movs	r2, #255	@ 0xff
 8012db0:	490d      	ldr	r1, [pc, #52]	@ (8012de8 <tcp_remove_listener+0x4c>)
 8012db2:	480e      	ldr	r0, [pc, #56]	@ (8012dec <tcp_remove_listener+0x50>)
 8012db4:	f00b fbc0 	bl	801e538 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	60fb      	str	r3, [r7, #12]
 8012dbc:	e00a      	b.n	8012dd4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012dc2:	683a      	ldr	r2, [r7, #0]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d102      	bne.n	8012dce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	60fb      	str	r3, [r7, #12]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d1f1      	bne.n	8012dbe <tcp_remove_listener+0x22>
    }
  }
}
 8012dda:	bf00      	nop
 8012ddc:	bf00      	nop
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	08022bf4 	.word	0x08022bf4
 8012de8:	08022c7c 	.word	0x08022c7c
 8012dec:	08022c38 	.word	0x08022c38

08012df0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_listen_closed+0x1c>
 8012dfe:	4b14      	ldr	r3, [pc, #80]	@ (8012e50 <tcp_listen_closed+0x60>)
 8012e00:	f240 1211 	movw	r2, #273	@ 0x111
 8012e04:	4913      	ldr	r1, [pc, #76]	@ (8012e54 <tcp_listen_closed+0x64>)
 8012e06:	4814      	ldr	r0, [pc, #80]	@ (8012e58 <tcp_listen_closed+0x68>)
 8012e08:	f00b fb96 	bl	801e538 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	7d1b      	ldrb	r3, [r3, #20]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d006      	beq.n	8012e22 <tcp_listen_closed+0x32>
 8012e14:	4b0e      	ldr	r3, [pc, #56]	@ (8012e50 <tcp_listen_closed+0x60>)
 8012e16:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012e1a:	4910      	ldr	r1, [pc, #64]	@ (8012e5c <tcp_listen_closed+0x6c>)
 8012e1c:	480e      	ldr	r0, [pc, #56]	@ (8012e58 <tcp_listen_closed+0x68>)
 8012e1e:	f00b fb8b 	bl	801e538 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012e22:	2301      	movs	r3, #1
 8012e24:	60fb      	str	r3, [r7, #12]
 8012e26:	e00b      	b.n	8012e40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012e28:	4a0d      	ldr	r2, [pc, #52]	@ (8012e60 <tcp_listen_closed+0x70>)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	6879      	ldr	r1, [r7, #4]
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff ffb1 	bl	8012d9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2b03      	cmp	r3, #3
 8012e44:	d9f0      	bls.n	8012e28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012e46:	bf00      	nop
 8012e48:	bf00      	nop
 8012e4a:	3710      	adds	r7, #16
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	08022bf4 	.word	0x08022bf4
 8012e54:	08022ca4 	.word	0x08022ca4
 8012e58:	08022c38 	.word	0x08022c38
 8012e5c:	08022cb0 	.word	0x08022cb0
 8012e60:	080251dc 	.word	0x080251dc

08012e64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012e64:	b5b0      	push	{r4, r5, r7, lr}
 8012e66:	b088      	sub	sp, #32
 8012e68:	af04      	add	r7, sp, #16
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d106      	bne.n	8012e84 <tcp_close_shutdown+0x20>
 8012e76:	4b63      	ldr	r3, [pc, #396]	@ (8013004 <tcp_close_shutdown+0x1a0>)
 8012e78:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012e7c:	4962      	ldr	r1, [pc, #392]	@ (8013008 <tcp_close_shutdown+0x1a4>)
 8012e7e:	4863      	ldr	r0, [pc, #396]	@ (801300c <tcp_close_shutdown+0x1a8>)
 8012e80:	f00b fb5a 	bl	801e538 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012e84:	78fb      	ldrb	r3, [r7, #3]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d066      	beq.n	8012f58 <tcp_close_shutdown+0xf4>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	7d1b      	ldrb	r3, [r3, #20]
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	d003      	beq.n	8012e9a <tcp_close_shutdown+0x36>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	7d1b      	ldrb	r3, [r3, #20]
 8012e96:	2b07      	cmp	r3, #7
 8012e98:	d15e      	bne.n	8012f58 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d104      	bne.n	8012eac <tcp_close_shutdown+0x48>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ea6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012eaa:	d055      	beq.n	8012f58 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	8b5b      	ldrh	r3, [r3, #26]
 8012eb0:	f003 0310 	and.w	r3, r3, #16
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d106      	bne.n	8012ec6 <tcp_close_shutdown+0x62>
 8012eb8:	4b52      	ldr	r3, [pc, #328]	@ (8013004 <tcp_close_shutdown+0x1a0>)
 8012eba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012ebe:	4954      	ldr	r1, [pc, #336]	@ (8013010 <tcp_close_shutdown+0x1ac>)
 8012ec0:	4852      	ldr	r0, [pc, #328]	@ (801300c <tcp_close_shutdown+0x1a8>)
 8012ec2:	f00b fb39 	bl	801e538 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012ece:	687d      	ldr	r5, [r7, #4]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	8ad2      	ldrh	r2, [r2, #22]
 8012ed8:	6879      	ldr	r1, [r7, #4]
 8012eda:	8b09      	ldrh	r1, [r1, #24]
 8012edc:	9102      	str	r1, [sp, #8]
 8012ede:	9201      	str	r2, [sp, #4]
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	462b      	mov	r3, r5
 8012ee4:	4622      	mov	r2, r4
 8012ee6:	4601      	mov	r1, r0
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f004 fe8d 	bl	8017c08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f001 f8c8 	bl	8014084 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012ef4:	4b47      	ldr	r3, [pc, #284]	@ (8013014 <tcp_close_shutdown+0x1b0>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d105      	bne.n	8012f0a <tcp_close_shutdown+0xa6>
 8012efe:	4b45      	ldr	r3, [pc, #276]	@ (8013014 <tcp_close_shutdown+0x1b0>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	4a43      	ldr	r2, [pc, #268]	@ (8013014 <tcp_close_shutdown+0x1b0>)
 8012f06:	6013      	str	r3, [r2, #0]
 8012f08:	e013      	b.n	8012f32 <tcp_close_shutdown+0xce>
 8012f0a:	4b42      	ldr	r3, [pc, #264]	@ (8013014 <tcp_close_shutdown+0x1b0>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	60fb      	str	r3, [r7, #12]
 8012f10:	e00c      	b.n	8012f2c <tcp_close_shutdown+0xc8>
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d104      	bne.n	8012f26 <tcp_close_shutdown+0xc2>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	68da      	ldr	r2, [r3, #12]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	60da      	str	r2, [r3, #12]
 8012f24:	e005      	b.n	8012f32 <tcp_close_shutdown+0xce>
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	60fb      	str	r3, [r7, #12]
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d1ef      	bne.n	8012f12 <tcp_close_shutdown+0xae>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2200      	movs	r2, #0
 8012f36:	60da      	str	r2, [r3, #12]
 8012f38:	4b37      	ldr	r3, [pc, #220]	@ (8013018 <tcp_close_shutdown+0x1b4>)
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012f3e:	4b37      	ldr	r3, [pc, #220]	@ (801301c <tcp_close_shutdown+0x1b8>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d102      	bne.n	8012f4e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012f48:	f003 fd5c 	bl	8016a04 <tcp_trigger_input_pcb_close>
 8012f4c:	e002      	b.n	8012f54 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7ff fed6 	bl	8012d00 <tcp_free>
      }
      return ERR_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	e050      	b.n	8012ffa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	7d1b      	ldrb	r3, [r3, #20]
 8012f5c:	2b02      	cmp	r3, #2
 8012f5e:	d03b      	beq.n	8012fd8 <tcp_close_shutdown+0x174>
 8012f60:	2b02      	cmp	r3, #2
 8012f62:	dc44      	bgt.n	8012fee <tcp_close_shutdown+0x18a>
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <tcp_close_shutdown+0x10a>
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d02a      	beq.n	8012fc2 <tcp_close_shutdown+0x15e>
 8012f6c:	e03f      	b.n	8012fee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	8adb      	ldrh	r3, [r3, #22]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d021      	beq.n	8012fba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012f76:	4b2a      	ldr	r3, [pc, #168]	@ (8013020 <tcp_close_shutdown+0x1bc>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d105      	bne.n	8012f8c <tcp_close_shutdown+0x128>
 8012f80:	4b27      	ldr	r3, [pc, #156]	@ (8013020 <tcp_close_shutdown+0x1bc>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	4a26      	ldr	r2, [pc, #152]	@ (8013020 <tcp_close_shutdown+0x1bc>)
 8012f88:	6013      	str	r3, [r2, #0]
 8012f8a:	e013      	b.n	8012fb4 <tcp_close_shutdown+0x150>
 8012f8c:	4b24      	ldr	r3, [pc, #144]	@ (8013020 <tcp_close_shutdown+0x1bc>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	60bb      	str	r3, [r7, #8]
 8012f92:	e00c      	b.n	8012fae <tcp_close_shutdown+0x14a>
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d104      	bne.n	8012fa8 <tcp_close_shutdown+0x144>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	68da      	ldr	r2, [r3, #12]
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	60da      	str	r2, [r3, #12]
 8012fa6:	e005      	b.n	8012fb4 <tcp_close_shutdown+0x150>
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	60bb      	str	r3, [r7, #8]
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1ef      	bne.n	8012f94 <tcp_close_shutdown+0x130>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7ff fea0 	bl	8012d00 <tcp_free>
      break;
 8012fc0:	e01a      	b.n	8012ff8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f7ff ff14 	bl	8012df0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012fc8:	6879      	ldr	r1, [r7, #4]
 8012fca:	4816      	ldr	r0, [pc, #88]	@ (8013024 <tcp_close_shutdown+0x1c0>)
 8012fcc:	f001 f8aa 	bl	8014124 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f7ff feb1 	bl	8012d38 <tcp_free_listen>
      break;
 8012fd6:	e00f      	b.n	8012ff8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012fd8:	6879      	ldr	r1, [r7, #4]
 8012fda:	480e      	ldr	r0, [pc, #56]	@ (8013014 <tcp_close_shutdown+0x1b0>)
 8012fdc:	f001 f8a2 	bl	8014124 <tcp_pcb_remove>
 8012fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <tcp_close_shutdown+0x1b4>)
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7ff fe8a 	bl	8012d00 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012fec:	e004      	b.n	8012ff8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 f81a 	bl	8013028 <tcp_close_shutdown_fin>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	e000      	b.n	8012ffa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012ff8:	2300      	movs	r3, #0
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3710      	adds	r7, #16
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bdb0      	pop	{r4, r5, r7, pc}
 8013002:	bf00      	nop
 8013004:	08022bf4 	.word	0x08022bf4
 8013008:	08022cc8 	.word	0x08022cc8
 801300c:	08022c38 	.word	0x08022c38
 8013010:	08022ce8 	.word	0x08022ce8
 8013014:	20017764 	.word	0x20017764
 8013018:	2001776c 	.word	0x2001776c
 801301c:	200177a4 	.word	0x200177a4
 8013020:	2001775c 	.word	0x2001775c
 8013024:	20017760 	.word	0x20017760

08013028 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d106      	bne.n	8013044 <tcp_close_shutdown_fin+0x1c>
 8013036:	4b2e      	ldr	r3, [pc, #184]	@ (80130f0 <tcp_close_shutdown_fin+0xc8>)
 8013038:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801303c:	492d      	ldr	r1, [pc, #180]	@ (80130f4 <tcp_close_shutdown_fin+0xcc>)
 801303e:	482e      	ldr	r0, [pc, #184]	@ (80130f8 <tcp_close_shutdown_fin+0xd0>)
 8013040:	f00b fa7a 	bl	801e538 <iprintf>

  switch (pcb->state) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	7d1b      	ldrb	r3, [r3, #20]
 8013048:	2b07      	cmp	r3, #7
 801304a:	d020      	beq.n	801308e <tcp_close_shutdown_fin+0x66>
 801304c:	2b07      	cmp	r3, #7
 801304e:	dc2b      	bgt.n	80130a8 <tcp_close_shutdown_fin+0x80>
 8013050:	2b03      	cmp	r3, #3
 8013052:	d002      	beq.n	801305a <tcp_close_shutdown_fin+0x32>
 8013054:	2b04      	cmp	r3, #4
 8013056:	d00d      	beq.n	8013074 <tcp_close_shutdown_fin+0x4c>
 8013058:	e026      	b.n	80130a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f003 fee2 	bl	8016e24 <tcp_send_fin>
 8013060:	4603      	mov	r3, r0
 8013062:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d11f      	bne.n	80130ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2205      	movs	r2, #5
 8013070:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013072:	e01b      	b.n	80130ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f003 fed5 	bl	8016e24 <tcp_send_fin>
 801307a:	4603      	mov	r3, r0
 801307c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d114      	bne.n	80130b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2205      	movs	r2, #5
 801308a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801308c:	e010      	b.n	80130b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f003 fec8 	bl	8016e24 <tcp_send_fin>
 8013094:	4603      	mov	r3, r0
 8013096:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d109      	bne.n	80130b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2209      	movs	r2, #9
 80130a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80130a6:	e005      	b.n	80130b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	e01c      	b.n	80130e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80130ac:	bf00      	nop
 80130ae:	e002      	b.n	80130b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80130b0:	bf00      	nop
 80130b2:	e000      	b.n	80130b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80130b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80130b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d103      	bne.n	80130c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f003 ffee 	bl	80170a0 <tcp_output>
 80130c4:	e00d      	b.n	80130e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80130c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ce:	d108      	bne.n	80130e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	8b5b      	ldrh	r3, [r3, #26]
 80130d4:	f043 0308 	orr.w	r3, r3, #8
 80130d8:	b29a      	uxth	r2, r3
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80130de:	2300      	movs	r3, #0
 80130e0:	e001      	b.n	80130e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80130e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	08022bf4 	.word	0x08022bf4
 80130f4:	08022ca4 	.word	0x08022ca4
 80130f8:	08022c38 	.word	0x08022c38

080130fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d109      	bne.n	801311e <tcp_close+0x22>
 801310a:	4b0f      	ldr	r3, [pc, #60]	@ (8013148 <tcp_close+0x4c>)
 801310c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013110:	490e      	ldr	r1, [pc, #56]	@ (801314c <tcp_close+0x50>)
 8013112:	480f      	ldr	r0, [pc, #60]	@ (8013150 <tcp_close+0x54>)
 8013114:	f00b fa10 	bl	801e538 <iprintf>
 8013118:	f06f 030f 	mvn.w	r3, #15
 801311c:	e00f      	b.n	801313e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	7d1b      	ldrb	r3, [r3, #20]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d006      	beq.n	8013134 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	8b5b      	ldrh	r3, [r3, #26]
 801312a:	f043 0310 	orr.w	r3, r3, #16
 801312e:	b29a      	uxth	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013134:	2101      	movs	r1, #1
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7ff fe94 	bl	8012e64 <tcp_close_shutdown>
 801313c:	4603      	mov	r3, r0
}
 801313e:	4618      	mov	r0, r3
 8013140:	3708      	adds	r7, #8
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	08022bf4 	.word	0x08022bf4
 801314c:	08022d04 	.word	0x08022d04
 8013150:	08022c38 	.word	0x08022c38

08013154 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b08e      	sub	sp, #56	@ 0x38
 8013158:	af04      	add	r7, sp, #16
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d107      	bne.n	8013174 <tcp_abandon+0x20>
 8013164:	4b52      	ldr	r3, [pc, #328]	@ (80132b0 <tcp_abandon+0x15c>)
 8013166:	f240 223d 	movw	r2, #573	@ 0x23d
 801316a:	4952      	ldr	r1, [pc, #328]	@ (80132b4 <tcp_abandon+0x160>)
 801316c:	4852      	ldr	r0, [pc, #328]	@ (80132b8 <tcp_abandon+0x164>)
 801316e:	f00b f9e3 	bl	801e538 <iprintf>
 8013172:	e099      	b.n	80132a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	7d1b      	ldrb	r3, [r3, #20]
 8013178:	2b01      	cmp	r3, #1
 801317a:	d106      	bne.n	801318a <tcp_abandon+0x36>
 801317c:	4b4c      	ldr	r3, [pc, #304]	@ (80132b0 <tcp_abandon+0x15c>)
 801317e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013182:	494e      	ldr	r1, [pc, #312]	@ (80132bc <tcp_abandon+0x168>)
 8013184:	484c      	ldr	r0, [pc, #304]	@ (80132b8 <tcp_abandon+0x164>)
 8013186:	f00b f9d7 	bl	801e538 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	2b0a      	cmp	r3, #10
 8013190:	d107      	bne.n	80131a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013192:	6879      	ldr	r1, [r7, #4]
 8013194:	484a      	ldr	r0, [pc, #296]	@ (80132c0 <tcp_abandon+0x16c>)
 8013196:	f000 ffc5 	bl	8014124 <tcp_pcb_remove>
    tcp_free(pcb);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff fdb0 	bl	8012d00 <tcp_free>
 80131a0:	e082      	b.n	80132a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	691b      	ldr	r3, [r3, #16]
 80131c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	7d1b      	ldrb	r3, [r3, #20]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d126      	bne.n	801321a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	8adb      	ldrh	r3, [r3, #22]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d02e      	beq.n	8013232 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80131d4:	4b3b      	ldr	r3, [pc, #236]	@ (80132c4 <tcp_abandon+0x170>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	687a      	ldr	r2, [r7, #4]
 80131da:	429a      	cmp	r2, r3
 80131dc:	d105      	bne.n	80131ea <tcp_abandon+0x96>
 80131de:	4b39      	ldr	r3, [pc, #228]	@ (80132c4 <tcp_abandon+0x170>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	4a37      	ldr	r2, [pc, #220]	@ (80132c4 <tcp_abandon+0x170>)
 80131e6:	6013      	str	r3, [r2, #0]
 80131e8:	e013      	b.n	8013212 <tcp_abandon+0xbe>
 80131ea:	4b36      	ldr	r3, [pc, #216]	@ (80132c4 <tcp_abandon+0x170>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	61fb      	str	r3, [r7, #28]
 80131f0:	e00c      	b.n	801320c <tcp_abandon+0xb8>
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d104      	bne.n	8013206 <tcp_abandon+0xb2>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	68da      	ldr	r2, [r3, #12]
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	60da      	str	r2, [r3, #12]
 8013204:	e005      	b.n	8013212 <tcp_abandon+0xbe>
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	61fb      	str	r3, [r7, #28]
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d1ef      	bne.n	80131f2 <tcp_abandon+0x9e>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	60da      	str	r2, [r3, #12]
 8013218:	e00b      	b.n	8013232 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8adb      	ldrh	r3, [r3, #22]
 8013222:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013224:	6879      	ldr	r1, [r7, #4]
 8013226:	4828      	ldr	r0, [pc, #160]	@ (80132c8 <tcp_abandon+0x174>)
 8013228:	f000 ff7c 	bl	8014124 <tcp_pcb_remove>
 801322c:	4b27      	ldr	r3, [pc, #156]	@ (80132cc <tcp_abandon+0x178>)
 801322e:	2201      	movs	r2, #1
 8013230:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013236:	2b00      	cmp	r3, #0
 8013238:	d004      	beq.n	8013244 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801323e:	4618      	mov	r0, r3
 8013240:	f000 fd1e 	bl	8013c80 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013248:	2b00      	cmp	r3, #0
 801324a:	d004      	beq.n	8013256 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013250:	4618      	mov	r0, r3
 8013252:	f000 fd15 	bl	8013c80 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801325a:	2b00      	cmp	r3, #0
 801325c:	d004      	beq.n	8013268 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013262:	4618      	mov	r0, r3
 8013264:	f000 fd0c 	bl	8013c80 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00e      	beq.n	801328c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801326e:	6879      	ldr	r1, [r7, #4]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	3304      	adds	r3, #4
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	8b12      	ldrh	r2, [r2, #24]
 8013278:	9202      	str	r2, [sp, #8]
 801327a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801327c:	9201      	str	r2, [sp, #4]
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	460b      	mov	r3, r1
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	69b9      	ldr	r1, [r7, #24]
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f004 fcbe 	bl	8017c08 <tcp_rst>
    }
    last_state = pcb->state;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	7d1b      	ldrb	r3, [r3, #20]
 8013290:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7ff fd34 	bl	8012d00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d004      	beq.n	80132a8 <tcp_abandon+0x154>
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	f06f 010c 	mvn.w	r1, #12
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	4798      	blx	r3
  }
}
 80132a8:	3728      	adds	r7, #40	@ 0x28
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	08022bf4 	.word	0x08022bf4
 80132b4:	08022d38 	.word	0x08022d38
 80132b8:	08022c38 	.word	0x08022c38
 80132bc:	08022d54 	.word	0x08022d54
 80132c0:	20017768 	.word	0x20017768
 80132c4:	2001775c 	.word	0x2001775c
 80132c8:	20017764 	.word	0x20017764
 80132cc:	2001776c 	.word	0x2001776c

080132d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80132d8:	2101      	movs	r1, #1
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff ff3a 	bl	8013154 <tcp_abandon>
}
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <tcp_update_rcv_ann_wnd+0x1c>
 80132f6:	4b25      	ldr	r3, [pc, #148]	@ (801338c <tcp_update_rcv_ann_wnd+0xa4>)
 80132f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80132fc:	4924      	ldr	r1, [pc, #144]	@ (8013390 <tcp_update_rcv_ann_wnd+0xa8>)
 80132fe:	4825      	ldr	r0, [pc, #148]	@ (8013394 <tcp_update_rcv_ann_wnd+0xac>)
 8013300:	f00b f91a 	bl	801e538 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801330c:	4413      	add	r3, r2
 801330e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013318:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801331c:	bf28      	it	cs
 801331e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013322:	b292      	uxth	r2, r2
 8013324:	4413      	add	r3, r2
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	1ad3      	subs	r3, r2, r3
 801332a:	2b00      	cmp	r3, #0
 801332c:	db08      	blt.n	8013340 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	e020      	b.n	8013382 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	dd03      	ble.n	8013356 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2200      	movs	r2, #0
 8013352:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013354:	e014      	b.n	8013380 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013368:	d306      	bcc.n	8013378 <tcp_update_rcv_ann_wnd+0x90>
 801336a:	4b08      	ldr	r3, [pc, #32]	@ (801338c <tcp_update_rcv_ann_wnd+0xa4>)
 801336c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013370:	4909      	ldr	r1, [pc, #36]	@ (8013398 <tcp_update_rcv_ann_wnd+0xb0>)
 8013372:	4808      	ldr	r0, [pc, #32]	@ (8013394 <tcp_update_rcv_ann_wnd+0xac>)
 8013374:	f00b f8e0 	bl	801e538 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	b29a      	uxth	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013380:	2300      	movs	r3, #0
  }
}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	08022bf4 	.word	0x08022bf4
 8013390:	08022e50 	.word	0x08022e50
 8013394:	08022c38 	.word	0x08022c38
 8013398:	08022e74 	.word	0x08022e74

0801339c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	460b      	mov	r3, r1
 80133a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d107      	bne.n	80133be <tcp_recved+0x22>
 80133ae:	4b1f      	ldr	r3, [pc, #124]	@ (801342c <tcp_recved+0x90>)
 80133b0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80133b4:	491e      	ldr	r1, [pc, #120]	@ (8013430 <tcp_recved+0x94>)
 80133b6:	481f      	ldr	r0, [pc, #124]	@ (8013434 <tcp_recved+0x98>)
 80133b8:	f00b f8be 	bl	801e538 <iprintf>
 80133bc:	e032      	b.n	8013424 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	7d1b      	ldrb	r3, [r3, #20]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d106      	bne.n	80133d4 <tcp_recved+0x38>
 80133c6:	4b19      	ldr	r3, [pc, #100]	@ (801342c <tcp_recved+0x90>)
 80133c8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80133cc:	491a      	ldr	r1, [pc, #104]	@ (8013438 <tcp_recved+0x9c>)
 80133ce:	4819      	ldr	r0, [pc, #100]	@ (8013434 <tcp_recved+0x98>)
 80133d0:	f00b f8b2 	bl	801e538 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80133d8:	887b      	ldrh	r3, [r7, #2]
 80133da:	4413      	add	r3, r2
 80133dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80133de:	89fb      	ldrh	r3, [r7, #14]
 80133e0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80133e4:	d804      	bhi.n	80133f0 <tcp_recved+0x54>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133ea:	89fa      	ldrh	r2, [r7, #14]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d204      	bcs.n	80133fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80133f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80133f8:	e002      	b.n	8013400 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	89fa      	ldrh	r2, [r7, #14]
 80133fe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ff ff71 	bl	80132e8 <tcp_update_rcv_ann_wnd>
 8013406:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801340e:	d309      	bcc.n	8013424 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	8b5b      	ldrh	r3, [r3, #26]
 8013414:	f043 0302 	orr.w	r3, r3, #2
 8013418:	b29a      	uxth	r2, r3
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f003 fe3e 	bl	80170a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	08022bf4 	.word	0x08022bf4
 8013430:	08022e90 	.word	0x08022e90
 8013434:	08022c38 	.word	0x08022c38
 8013438:	08022ea8 	.word	0x08022ea8

0801343c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801343c:	b5b0      	push	{r4, r5, r7, lr}
 801343e:	b090      	sub	sp, #64	@ 0x40
 8013440:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013442:	2300      	movs	r3, #0
 8013444:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013448:	4b95      	ldr	r3, [pc, #596]	@ (80136a0 <tcp_slowtmr+0x264>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	3301      	adds	r3, #1
 801344e:	4a94      	ldr	r2, [pc, #592]	@ (80136a0 <tcp_slowtmr+0x264>)
 8013450:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013452:	4b94      	ldr	r3, [pc, #592]	@ (80136a4 <tcp_slowtmr+0x268>)
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	3301      	adds	r3, #1
 8013458:	b2da      	uxtb	r2, r3
 801345a:	4b92      	ldr	r3, [pc, #584]	@ (80136a4 <tcp_slowtmr+0x268>)
 801345c:	701a      	strb	r2, [r3, #0]
 801345e:	e000      	b.n	8013462 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013460:	bf00      	nop
  prev = NULL;
 8013462:	2300      	movs	r3, #0
 8013464:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013466:	4b90      	ldr	r3, [pc, #576]	@ (80136a8 <tcp_slowtmr+0x26c>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801346c:	e29f      	b.n	80139ae <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013470:	7d1b      	ldrb	r3, [r3, #20]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d106      	bne.n	8013484 <tcp_slowtmr+0x48>
 8013476:	4b8d      	ldr	r3, [pc, #564]	@ (80136ac <tcp_slowtmr+0x270>)
 8013478:	f240 42be 	movw	r2, #1214	@ 0x4be
 801347c:	498c      	ldr	r1, [pc, #560]	@ (80136b0 <tcp_slowtmr+0x274>)
 801347e:	488d      	ldr	r0, [pc, #564]	@ (80136b4 <tcp_slowtmr+0x278>)
 8013480:	f00b f85a 	bl	801e538 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013486:	7d1b      	ldrb	r3, [r3, #20]
 8013488:	2b01      	cmp	r3, #1
 801348a:	d106      	bne.n	801349a <tcp_slowtmr+0x5e>
 801348c:	4b87      	ldr	r3, [pc, #540]	@ (80136ac <tcp_slowtmr+0x270>)
 801348e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013492:	4989      	ldr	r1, [pc, #548]	@ (80136b8 <tcp_slowtmr+0x27c>)
 8013494:	4887      	ldr	r0, [pc, #540]	@ (80136b4 <tcp_slowtmr+0x278>)
 8013496:	f00b f84f 	bl	801e538 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349c:	7d1b      	ldrb	r3, [r3, #20]
 801349e:	2b0a      	cmp	r3, #10
 80134a0:	d106      	bne.n	80134b0 <tcp_slowtmr+0x74>
 80134a2:	4b82      	ldr	r3, [pc, #520]	@ (80136ac <tcp_slowtmr+0x270>)
 80134a4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80134a8:	4984      	ldr	r1, [pc, #528]	@ (80136bc <tcp_slowtmr+0x280>)
 80134aa:	4882      	ldr	r0, [pc, #520]	@ (80136b4 <tcp_slowtmr+0x278>)
 80134ac:	f00b f844 	bl	801e538 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80134b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b2:	7f9a      	ldrb	r2, [r3, #30]
 80134b4:	4b7b      	ldr	r3, [pc, #492]	@ (80136a4 <tcp_slowtmr+0x268>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d105      	bne.n	80134c8 <tcp_slowtmr+0x8c>
      prev = pcb;
 80134bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80134c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80134c6:	e272      	b.n	80139ae <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80134c8:	4b76      	ldr	r3, [pc, #472]	@ (80136a4 <tcp_slowtmr+0x268>)
 80134ca:	781a      	ldrb	r2, [r3, #0]
 80134cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ce:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80134d6:	2300      	movs	r3, #0
 80134d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80134dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134de:	7d1b      	ldrb	r3, [r3, #20]
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	d10a      	bne.n	80134fa <tcp_slowtmr+0xbe>
 80134e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80134ea:	2b05      	cmp	r3, #5
 80134ec:	d905      	bls.n	80134fa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80134ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134f2:	3301      	adds	r3, #1
 80134f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80134f8:	e11e      	b.n	8013738 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80134fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013500:	2b0b      	cmp	r3, #11
 8013502:	d905      	bls.n	8013510 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013508:	3301      	adds	r3, #1
 801350a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801350e:	e113      	b.n	8013738 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013512:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013516:	2b00      	cmp	r3, #0
 8013518:	d075      	beq.n	8013606 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801351a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801351e:	2b00      	cmp	r3, #0
 8013520:	d006      	beq.n	8013530 <tcp_slowtmr+0xf4>
 8013522:	4b62      	ldr	r3, [pc, #392]	@ (80136ac <tcp_slowtmr+0x270>)
 8013524:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013528:	4965      	ldr	r1, [pc, #404]	@ (80136c0 <tcp_slowtmr+0x284>)
 801352a:	4862      	ldr	r0, [pc, #392]	@ (80136b4 <tcp_slowtmr+0x278>)
 801352c:	f00b f804 	bl	801e538 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013534:	2b00      	cmp	r3, #0
 8013536:	d106      	bne.n	8013546 <tcp_slowtmr+0x10a>
 8013538:	4b5c      	ldr	r3, [pc, #368]	@ (80136ac <tcp_slowtmr+0x270>)
 801353a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801353e:	4961      	ldr	r1, [pc, #388]	@ (80136c4 <tcp_slowtmr+0x288>)
 8013540:	485c      	ldr	r0, [pc, #368]	@ (80136b4 <tcp_slowtmr+0x278>)
 8013542:	f00a fff9 	bl	801e538 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013548:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801354c:	2b0b      	cmp	r3, #11
 801354e:	d905      	bls.n	801355c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013554:	3301      	adds	r3, #1
 8013556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801355a:	e0ed      	b.n	8013738 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013562:	3b01      	subs	r3, #1
 8013564:	4a58      	ldr	r2, [pc, #352]	@ (80136c8 <tcp_slowtmr+0x28c>)
 8013566:	5cd3      	ldrb	r3, [r2, r3]
 8013568:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013570:	7c7a      	ldrb	r2, [r7, #17]
 8013572:	429a      	cmp	r2, r3
 8013574:	d907      	bls.n	8013586 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013578:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801357c:	3301      	adds	r3, #1
 801357e:	b2da      	uxtb	r2, r3
 8013580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013582:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013588:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801358c:	7c7a      	ldrb	r2, [r7, #17]
 801358e:	429a      	cmp	r2, r3
 8013590:	f200 80d2 	bhi.w	8013738 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013594:	2301      	movs	r3, #1
 8013596:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801359a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d108      	bne.n	80135b4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80135a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135a4:	f004 fc24 	bl	8017df0 <tcp_zero_window_probe>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d014      	beq.n	80135d8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80135ae:	2300      	movs	r3, #0
 80135b0:	623b      	str	r3, [r7, #32]
 80135b2:	e011      	b.n	80135d8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80135b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80135ba:	4619      	mov	r1, r3
 80135bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135be:	f003 fae9 	bl	8016b94 <tcp_split_unsent_seg>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d107      	bne.n	80135d8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80135c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135ca:	f003 fd69 	bl	80170a0 <tcp_output>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80135d4:	2300      	movs	r3, #0
 80135d6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80135d8:	6a3b      	ldr	r3, [r7, #32]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f000 80ac 	beq.w	8013738 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80135e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80135e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80135ee:	2b06      	cmp	r3, #6
 80135f0:	f200 80a2 	bhi.w	8013738 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80135f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80135fa:	3301      	adds	r3, #1
 80135fc:	b2da      	uxtb	r2, r3
 80135fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013600:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013604:	e098      	b.n	8013738 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013608:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801360c:	2b00      	cmp	r3, #0
 801360e:	db0f      	blt.n	8013630 <tcp_slowtmr+0x1f4>
 8013610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013612:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013616:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801361a:	4293      	cmp	r3, r2
 801361c:	d008      	beq.n	8013630 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013620:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013624:	b29b      	uxth	r3, r3
 8013626:	3301      	adds	r3, #1
 8013628:	b29b      	uxth	r3, r3
 801362a:	b21a      	sxth	r2, r3
 801362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801362e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013632:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8013636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013638:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801363c:	429a      	cmp	r2, r3
 801363e:	db7b      	blt.n	8013738 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013642:	f004 f821 	bl	8017688 <tcp_rexmit_rto_prepare>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d007      	beq.n	801365c <tcp_slowtmr+0x220>
 801364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013650:	2b00      	cmp	r3, #0
 8013652:	d171      	bne.n	8013738 <tcp_slowtmr+0x2fc>
 8013654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013658:	2b00      	cmp	r3, #0
 801365a:	d06d      	beq.n	8013738 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365e:	7d1b      	ldrb	r3, [r3, #20]
 8013660:	2b02      	cmp	r3, #2
 8013662:	d03a      	beq.n	80136da <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801366a:	2b0c      	cmp	r3, #12
 801366c:	bf28      	it	cs
 801366e:	230c      	movcs	r3, #12
 8013670:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013678:	10db      	asrs	r3, r3, #3
 801367a:	b21b      	sxth	r3, r3
 801367c:	461a      	mov	r2, r3
 801367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013684:	4413      	add	r3, r2
 8013686:	7efa      	ldrb	r2, [r7, #27]
 8013688:	4910      	ldr	r1, [pc, #64]	@ (80136cc <tcp_slowtmr+0x290>)
 801368a:	5c8a      	ldrb	r2, [r1, r2]
 801368c:	4093      	lsls	r3, r2
 801368e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8013696:	4293      	cmp	r3, r2
 8013698:	dc1a      	bgt.n	80136d0 <tcp_slowtmr+0x294>
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	b21a      	sxth	r2, r3
 801369e:	e019      	b.n	80136d4 <tcp_slowtmr+0x298>
 80136a0:	20017758 	.word	0x20017758
 80136a4:	2001776e 	.word	0x2001776e
 80136a8:	20017764 	.word	0x20017764
 80136ac:	08022bf4 	.word	0x08022bf4
 80136b0:	08022f38 	.word	0x08022f38
 80136b4:	08022c38 	.word	0x08022c38
 80136b8:	08022f64 	.word	0x08022f64
 80136bc:	08022f90 	.word	0x08022f90
 80136c0:	08022fc0 	.word	0x08022fc0
 80136c4:	08022ff4 	.word	0x08022ff4
 80136c8:	080251d4 	.word	0x080251d4
 80136cc:	080251c4 	.word	0x080251c4
 80136d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80136d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80136da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136dc:	2200      	movs	r2, #0
 80136de:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80136e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80136e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80136ec:	4293      	cmp	r3, r2
 80136ee:	bf28      	it	cs
 80136f0:	4613      	movcs	r3, r2
 80136f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80136f4:	8a7b      	ldrh	r3, [r7, #18]
 80136f6:	085b      	lsrs	r3, r3, #1
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013702:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013708:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	b29b      	uxth	r3, r3
 801370e:	429a      	cmp	r2, r3
 8013710:	d206      	bcs.n	8013720 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013714:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	b29a      	uxth	r2, r3
 801371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013722:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8013724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013726:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801372a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372c:	2200      	movs	r2, #0
 801372e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8013732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013734:	f004 f818 	bl	8017768 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8013738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b06      	cmp	r3, #6
 801373e:	d111      	bne.n	8013764 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8013740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013742:	8b5b      	ldrh	r3, [r3, #26]
 8013744:	f003 0310 	and.w	r3, r3, #16
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00b      	beq.n	8013764 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801374c:	4b9d      	ldr	r3, [pc, #628]	@ (80139c4 <tcp_slowtmr+0x588>)
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013752:	6a1b      	ldr	r3, [r3, #32]
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	2b28      	cmp	r3, #40	@ 0x28
 8013758:	d904      	bls.n	8013764 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801375a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801375e:	3301      	adds	r3, #1
 8013760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013766:	7a5b      	ldrb	r3, [r3, #9]
 8013768:	f003 0308 	and.w	r3, r3, #8
 801376c:	2b00      	cmp	r3, #0
 801376e:	d04c      	beq.n	801380a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8013770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013772:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013774:	2b04      	cmp	r3, #4
 8013776:	d003      	beq.n	8013780 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8013778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801377a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801377c:	2b07      	cmp	r3, #7
 801377e:	d144      	bne.n	801380a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013780:	4b90      	ldr	r3, [pc, #576]	@ (80139c4 <tcp_slowtmr+0x588>)
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013786:	6a1b      	ldr	r3, [r3, #32]
 8013788:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013790:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8013794:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8013798:	498b      	ldr	r1, [pc, #556]	@ (80139c8 <tcp_slowtmr+0x58c>)
 801379a:	fba1 1303 	umull	r1, r3, r1, r3
 801379e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d90a      	bls.n	80137ba <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80137a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137a8:	3301      	adds	r3, #1
 80137aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80137ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80137b2:	3301      	adds	r3, #1
 80137b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80137b8:	e027      	b.n	801380a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137ba:	4b82      	ldr	r3, [pc, #520]	@ (80139c4 <tcp_slowtmr+0x588>)
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c0:	6a1b      	ldr	r3, [r3, #32]
 80137c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80137c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80137ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80137d0:	4618      	mov	r0, r3
 80137d2:	4b7e      	ldr	r3, [pc, #504]	@ (80139cc <tcp_slowtmr+0x590>)
 80137d4:	fb00 f303 	mul.w	r3, r0, r3
 80137d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80137da:	497b      	ldr	r1, [pc, #492]	@ (80139c8 <tcp_slowtmr+0x58c>)
 80137dc:	fba1 1303 	umull	r1, r3, r1, r3
 80137e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d911      	bls.n	801380a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80137e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137e8:	f004 fac2 	bl	8017d70 <tcp_keepalive>
 80137ec:	4603      	mov	r3, r0
 80137ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80137f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d107      	bne.n	801380a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80137fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013800:	3301      	adds	r3, #1
 8013802:	b2da      	uxtb	r2, r3
 8013804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013806:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801380e:	2b00      	cmp	r3, #0
 8013810:	d011      	beq.n	8013836 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013812:	4b6c      	ldr	r3, [pc, #432]	@ (80139c4 <tcp_slowtmr+0x588>)
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013818:	6a1b      	ldr	r3, [r3, #32]
 801381a:	1ad2      	subs	r2, r2, r3
 801381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801381e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013822:	4619      	mov	r1, r3
 8013824:	460b      	mov	r3, r1
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	440b      	add	r3, r1
 801382a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801382c:	429a      	cmp	r2, r3
 801382e:	d302      	bcc.n	8013836 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8013830:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013832:	f000 fddb 	bl	80143ec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8013836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013838:	7d1b      	ldrb	r3, [r3, #20]
 801383a:	2b03      	cmp	r3, #3
 801383c:	d10b      	bne.n	8013856 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801383e:	4b61      	ldr	r3, [pc, #388]	@ (80139c4 <tcp_slowtmr+0x588>)
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013844:	6a1b      	ldr	r3, [r3, #32]
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	2b28      	cmp	r3, #40	@ 0x28
 801384a:	d904      	bls.n	8013856 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 801384c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013850:	3301      	adds	r3, #1
 8013852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013858:	7d1b      	ldrb	r3, [r3, #20]
 801385a:	2b09      	cmp	r3, #9
 801385c:	d10b      	bne.n	8013876 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801385e:	4b59      	ldr	r3, [pc, #356]	@ (80139c4 <tcp_slowtmr+0x588>)
 8013860:	681a      	ldr	r2, [r3, #0]
 8013862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013864:	6a1b      	ldr	r3, [r3, #32]
 8013866:	1ad3      	subs	r3, r2, r3
 8013868:	2bf0      	cmp	r3, #240	@ 0xf0
 801386a:	d904      	bls.n	8013876 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 801386c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013870:	3301      	adds	r3, #1
 8013872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801387a:	2b00      	cmp	r3, #0
 801387c:	d060      	beq.n	8013940 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 801387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013884:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013886:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013888:	f000 fbfc 	bl	8014084 <tcp_pcb_purge>
      if (prev != NULL) {
 801388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801388e:	2b00      	cmp	r3, #0
 8013890:	d010      	beq.n	80138b4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013892:	4b4f      	ldr	r3, [pc, #316]	@ (80139d0 <tcp_slowtmr+0x594>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013898:	429a      	cmp	r2, r3
 801389a:	d106      	bne.n	80138aa <tcp_slowtmr+0x46e>
 801389c:	4b4d      	ldr	r3, [pc, #308]	@ (80139d4 <tcp_slowtmr+0x598>)
 801389e:	f240 526d 	movw	r2, #1389	@ 0x56d
 80138a2:	494d      	ldr	r1, [pc, #308]	@ (80139d8 <tcp_slowtmr+0x59c>)
 80138a4:	484d      	ldr	r0, [pc, #308]	@ (80139dc <tcp_slowtmr+0x5a0>)
 80138a6:	f00a fe47 	bl	801e538 <iprintf>
        prev->next = pcb->next;
 80138aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ac:	68da      	ldr	r2, [r3, #12]
 80138ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b0:	60da      	str	r2, [r3, #12]
 80138b2:	e00f      	b.n	80138d4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80138b4:	4b46      	ldr	r3, [pc, #280]	@ (80139d0 <tcp_slowtmr+0x594>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d006      	beq.n	80138cc <tcp_slowtmr+0x490>
 80138be:	4b45      	ldr	r3, [pc, #276]	@ (80139d4 <tcp_slowtmr+0x598>)
 80138c0:	f240 5271 	movw	r2, #1393	@ 0x571
 80138c4:	4946      	ldr	r1, [pc, #280]	@ (80139e0 <tcp_slowtmr+0x5a4>)
 80138c6:	4845      	ldr	r0, [pc, #276]	@ (80139dc <tcp_slowtmr+0x5a0>)
 80138c8:	f00a fe36 	bl	801e538 <iprintf>
        tcp_active_pcbs = pcb->next;
 80138cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	4a3f      	ldr	r2, [pc, #252]	@ (80139d0 <tcp_slowtmr+0x594>)
 80138d2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80138d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d013      	beq.n	8013904 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80138dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138de:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80138e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80138e4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80138e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e8:	3304      	adds	r3, #4
 80138ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138ec:	8ad2      	ldrh	r2, [r2, #22]
 80138ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138f0:	8b09      	ldrh	r1, [r1, #24]
 80138f2:	9102      	str	r1, [sp, #8]
 80138f4:	9201      	str	r2, [sp, #4]
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	462b      	mov	r3, r5
 80138fa:	4622      	mov	r2, r4
 80138fc:	4601      	mov	r1, r0
 80138fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013900:	f004 f982 	bl	8017c08 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	691b      	ldr	r3, [r3, #16]
 8013908:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390c:	7d1b      	ldrb	r3, [r3, #20]
 801390e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013912:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801391a:	6838      	ldr	r0, [r7, #0]
 801391c:	f7ff f9f0 	bl	8012d00 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013920:	4b30      	ldr	r3, [pc, #192]	@ (80139e4 <tcp_slowtmr+0x5a8>)
 8013922:	2200      	movs	r2, #0
 8013924:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d004      	beq.n	8013936 <tcp_slowtmr+0x4fa>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f06f 010c 	mvn.w	r1, #12
 8013932:	68b8      	ldr	r0, [r7, #8]
 8013934:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013936:	4b2b      	ldr	r3, [pc, #172]	@ (80139e4 <tcp_slowtmr+0x5a8>)
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d037      	beq.n	80139ae <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 801393e:	e590      	b.n	8013462 <tcp_slowtmr+0x26>
      prev = pcb;
 8013940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013942:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394c:	7f1b      	ldrb	r3, [r3, #28]
 801394e:	3301      	adds	r3, #1
 8013950:	b2da      	uxtb	r2, r3
 8013952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013954:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013958:	7f1a      	ldrb	r2, [r3, #28]
 801395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801395c:	7f5b      	ldrb	r3, [r3, #29]
 801395e:	429a      	cmp	r2, r3
 8013960:	d325      	bcc.n	80139ae <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8013962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013964:	2200      	movs	r2, #0
 8013966:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013968:	4b1e      	ldr	r3, [pc, #120]	@ (80139e4 <tcp_slowtmr+0x5a8>)
 801396a:	2200      	movs	r2, #0
 801396c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00b      	beq.n	8013990 <tcp_slowtmr+0x554>
 8013978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801397a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801397e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013980:	6912      	ldr	r2, [r2, #16]
 8013982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013984:	4610      	mov	r0, r2
 8013986:	4798      	blx	r3
 8013988:	4603      	mov	r3, r0
 801398a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801398e:	e002      	b.n	8013996 <tcp_slowtmr+0x55a>
 8013990:	2300      	movs	r3, #0
 8013992:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013996:	4b13      	ldr	r3, [pc, #76]	@ (80139e4 <tcp_slowtmr+0x5a8>)
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f47f ad60 	bne.w	8013460 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80139a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d102      	bne.n	80139ae <tcp_slowtmr+0x572>
          tcp_output(prev);
 80139a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139aa:	f003 fb79 	bl	80170a0 <tcp_output>
  while (pcb != NULL) {
 80139ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f47f ad5c 	bne.w	801346e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80139ba:	4b0b      	ldr	r3, [pc, #44]	@ (80139e8 <tcp_slowtmr+0x5ac>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80139c0:	e067      	b.n	8013a92 <tcp_slowtmr+0x656>
 80139c2:	bf00      	nop
 80139c4:	20017758 	.word	0x20017758
 80139c8:	10624dd3 	.word	0x10624dd3
 80139cc:	000124f8 	.word	0x000124f8
 80139d0:	20017764 	.word	0x20017764
 80139d4:	08022bf4 	.word	0x08022bf4
 80139d8:	0802302c 	.word	0x0802302c
 80139dc:	08022c38 	.word	0x08022c38
 80139e0:	08023058 	.word	0x08023058
 80139e4:	2001776c 	.word	0x2001776c
 80139e8:	20017768 	.word	0x20017768
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ee:	7d1b      	ldrb	r3, [r3, #20]
 80139f0:	2b0a      	cmp	r3, #10
 80139f2:	d006      	beq.n	8013a02 <tcp_slowtmr+0x5c6>
 80139f4:	4b2b      	ldr	r3, [pc, #172]	@ (8013aa4 <tcp_slowtmr+0x668>)
 80139f6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80139fa:	492b      	ldr	r1, [pc, #172]	@ (8013aa8 <tcp_slowtmr+0x66c>)
 80139fc:	482b      	ldr	r0, [pc, #172]	@ (8013aac <tcp_slowtmr+0x670>)
 80139fe:	f00a fd9b 	bl	801e538 <iprintf>
    pcb_remove = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013a08:	4b29      	ldr	r3, [pc, #164]	@ (8013ab0 <tcp_slowtmr+0x674>)
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a0e:	6a1b      	ldr	r3, [r3, #32]
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	2bf0      	cmp	r3, #240	@ 0xf0
 8013a14:	d904      	bls.n	8013a20 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d02f      	beq.n	8013a88 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a2a:	f000 fb2b 	bl	8014084 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d010      	beq.n	8013a56 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013a34:	4b1f      	ldr	r3, [pc, #124]	@ (8013ab4 <tcp_slowtmr+0x678>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d106      	bne.n	8013a4c <tcp_slowtmr+0x610>
 8013a3e:	4b19      	ldr	r3, [pc, #100]	@ (8013aa4 <tcp_slowtmr+0x668>)
 8013a40:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013a44:	491c      	ldr	r1, [pc, #112]	@ (8013ab8 <tcp_slowtmr+0x67c>)
 8013a46:	4819      	ldr	r0, [pc, #100]	@ (8013aac <tcp_slowtmr+0x670>)
 8013a48:	f00a fd76 	bl	801e538 <iprintf>
        prev->next = pcb->next;
 8013a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4e:	68da      	ldr	r2, [r3, #12]
 8013a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a52:	60da      	str	r2, [r3, #12]
 8013a54:	e00f      	b.n	8013a76 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013a56:	4b17      	ldr	r3, [pc, #92]	@ (8013ab4 <tcp_slowtmr+0x678>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d006      	beq.n	8013a6e <tcp_slowtmr+0x632>
 8013a60:	4b10      	ldr	r3, [pc, #64]	@ (8013aa4 <tcp_slowtmr+0x668>)
 8013a62:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8013a66:	4915      	ldr	r1, [pc, #84]	@ (8013abc <tcp_slowtmr+0x680>)
 8013a68:	4810      	ldr	r0, [pc, #64]	@ (8013aac <tcp_slowtmr+0x670>)
 8013a6a:	f00a fd65 	bl	801e538 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	4a10      	ldr	r2, [pc, #64]	@ (8013ab4 <tcp_slowtmr+0x678>)
 8013a74:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a78:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a7c:	68db      	ldr	r3, [r3, #12]
 8013a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013a80:	69f8      	ldr	r0, [r7, #28]
 8013a82:	f7ff f93d 	bl	8012d00 <tcp_free>
 8013a86:	e004      	b.n	8013a92 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d1a9      	bne.n	80139ec <tcp_slowtmr+0x5b0>
    }
  }
}
 8013a98:	bf00      	nop
 8013a9a:	bf00      	nop
 8013a9c:	3730      	adds	r7, #48	@ 0x30
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	08022bf4 	.word	0x08022bf4
 8013aa8:	08023084 	.word	0x08023084
 8013aac:	08022c38 	.word	0x08022c38
 8013ab0:	20017758 	.word	0x20017758
 8013ab4:	20017768 	.word	0x20017768
 8013ab8:	080230b4 	.word	0x080230b4
 8013abc:	080230dc 	.word	0x080230dc

08013ac0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8013b7c <tcp_fasttmr+0xbc>)
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	3301      	adds	r3, #1
 8013acc:	b2da      	uxtb	r2, r3
 8013ace:	4b2b      	ldr	r3, [pc, #172]	@ (8013b7c <tcp_fasttmr+0xbc>)
 8013ad0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8013b80 <tcp_fasttmr+0xc0>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013ad8:	e048      	b.n	8013b6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	7f9a      	ldrb	r2, [r3, #30]
 8013ade:	4b27      	ldr	r3, [pc, #156]	@ (8013b7c <tcp_fasttmr+0xbc>)
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d03f      	beq.n	8013b66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013ae6:	4b25      	ldr	r3, [pc, #148]	@ (8013b7c <tcp_fasttmr+0xbc>)
 8013ae8:	781a      	ldrb	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	8b5b      	ldrh	r3, [r3, #26]
 8013af2:	f003 0301 	and.w	r3, r3, #1
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d010      	beq.n	8013b1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8b5b      	ldrh	r3, [r3, #26]
 8013afe:	f043 0302 	orr.w	r3, r3, #2
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f003 fac9 	bl	80170a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	8b5b      	ldrh	r3, [r3, #26]
 8013b12:	f023 0303 	bic.w	r3, r3, #3
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	8b5b      	ldrh	r3, [r3, #26]
 8013b20:	f003 0308 	and.w	r3, r3, #8
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d009      	beq.n	8013b3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	8b5b      	ldrh	r3, [r3, #26]
 8013b2c:	f023 0308 	bic.w	r3, r3, #8
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff fa76 	bl	8013028 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00a      	beq.n	8013b60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8013b84 <tcp_fasttmr+0xc4>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 f819 	bl	8013b88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013b56:	4b0b      	ldr	r3, [pc, #44]	@ (8013b84 <tcp_fasttmr+0xc4>)
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d000      	beq.n	8013b60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013b5e:	e7b8      	b.n	8013ad2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	607b      	str	r3, [r7, #4]
 8013b64:	e002      	b.n	8013b6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d1b3      	bne.n	8013ada <tcp_fasttmr+0x1a>
    }
  }
}
 8013b72:	bf00      	nop
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	2001776e 	.word	0x2001776e
 8013b80:	20017764 	.word	0x20017764
 8013b84:	2001776c 	.word	0x2001776c

08013b88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013b88:	b590      	push	{r4, r7, lr}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d109      	bne.n	8013baa <tcp_process_refused_data+0x22>
 8013b96:	4b37      	ldr	r3, [pc, #220]	@ (8013c74 <tcp_process_refused_data+0xec>)
 8013b98:	f240 6209 	movw	r2, #1545	@ 0x609
 8013b9c:	4936      	ldr	r1, [pc, #216]	@ (8013c78 <tcp_process_refused_data+0xf0>)
 8013b9e:	4837      	ldr	r0, [pc, #220]	@ (8013c7c <tcp_process_refused_data+0xf4>)
 8013ba0:	f00a fcca 	bl	801e538 <iprintf>
 8013ba4:	f06f 030f 	mvn.w	r3, #15
 8013ba8:	e060      	b.n	8013c6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013bae:	7b5b      	ldrb	r3, [r3, #13]
 8013bb0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013bb6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d00b      	beq.n	8013be0 <tcp_process_refused_data+0x58>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6918      	ldr	r0, [r3, #16]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	68ba      	ldr	r2, [r7, #8]
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	47a0      	blx	r4
 8013bda:	4603      	mov	r3, r0
 8013bdc:	73fb      	strb	r3, [r7, #15]
 8013bde:	e007      	b.n	8013bf0 <tcp_process_refused_data+0x68>
 8013be0:	2300      	movs	r3, #0
 8013be2:	68ba      	ldr	r2, [r7, #8]
 8013be4:	6879      	ldr	r1, [r7, #4]
 8013be6:	2000      	movs	r0, #0
 8013be8:	f000 f8a4 	bl	8013d34 <tcp_recv_null>
 8013bec:	4603      	mov	r3, r0
 8013bee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d12a      	bne.n	8013c4e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013bf8:	7bbb      	ldrb	r3, [r7, #14]
 8013bfa:	f003 0320 	and.w	r3, r3, #32
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d033      	beq.n	8013c6a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c06:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013c0a:	d005      	beq.n	8013c18 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c10:	3301      	adds	r3, #1
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00b      	beq.n	8013c3a <tcp_process_refused_data+0xb2>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6918      	ldr	r0, [r3, #16]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	2200      	movs	r2, #0
 8013c30:	6879      	ldr	r1, [r7, #4]
 8013c32:	47a0      	blx	r4
 8013c34:	4603      	mov	r3, r0
 8013c36:	73fb      	strb	r3, [r7, #15]
 8013c38:	e001      	b.n	8013c3e <tcp_process_refused_data+0xb6>
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c42:	f113 0f0d 	cmn.w	r3, #13
 8013c46:	d110      	bne.n	8013c6a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013c48:	f06f 030c 	mvn.w	r3, #12
 8013c4c:	e00e      	b.n	8013c6c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c52:	f113 0f0d 	cmn.w	r3, #13
 8013c56:	d102      	bne.n	8013c5e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013c58:	f06f 030c 	mvn.w	r3, #12
 8013c5c:	e006      	b.n	8013c6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	68ba      	ldr	r2, [r7, #8]
 8013c62:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013c64:	f06f 0304 	mvn.w	r3, #4
 8013c68:	e000      	b.n	8013c6c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3714      	adds	r7, #20
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd90      	pop	{r4, r7, pc}
 8013c74:	08022bf4 	.word	0x08022bf4
 8013c78:	08023104 	.word	0x08023104
 8013c7c:	08022c38 	.word	0x08022c38

08013c80 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013c88:	e007      	b.n	8013c9a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 f80a 	bl	8013caa <tcp_seg_free>
    seg = next;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d1f4      	bne.n	8013c8a <tcp_segs_free+0xa>
  }
}
 8013ca0:	bf00      	nop
 8013ca2:	bf00      	nop
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b082      	sub	sp, #8
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00c      	beq.n	8013cd2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d004      	beq.n	8013cca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fe fc05 	bl	80124d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013cca:	6879      	ldr	r1, [r7, #4]
 8013ccc:	2003      	movs	r0, #3
 8013cce:	f7fd fd51 	bl	8011774 <memp_free>
  }
}
 8013cd2:	bf00      	nop
 8013cd4:	3708      	adds	r7, #8
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
	...

08013cdc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d106      	bne.n	8013cf8 <tcp_seg_copy+0x1c>
 8013cea:	4b0f      	ldr	r3, [pc, #60]	@ (8013d28 <tcp_seg_copy+0x4c>)
 8013cec:	f240 6282 	movw	r2, #1666	@ 0x682
 8013cf0:	490e      	ldr	r1, [pc, #56]	@ (8013d2c <tcp_seg_copy+0x50>)
 8013cf2:	480f      	ldr	r0, [pc, #60]	@ (8013d30 <tcp_seg_copy+0x54>)
 8013cf4:	f00a fc20 	bl	801e538 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013cf8:	2003      	movs	r0, #3
 8013cfa:	f7fd fcc5 	bl	8011688 <memp_malloc>
 8013cfe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <tcp_seg_copy+0x2e>
    return NULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	e00a      	b.n	8013d20 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013d0a:	2210      	movs	r2, #16
 8013d0c:	6879      	ldr	r1, [r7, #4]
 8013d0e:	68f8      	ldr	r0, [r7, #12]
 8013d10:	f00a fea9 	bl	801ea66 <memcpy>
  pbuf_ref(cseg->p);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fe fc81 	bl	8012620 <pbuf_ref>
  return cseg;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	08022bf4 	.word	0x08022bf4
 8013d2c:	08023148 	.word	0x08023148
 8013d30:	08022c38 	.word	0x08022c38

08013d34 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
 8013d40:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d109      	bne.n	8013d5c <tcp_recv_null+0x28>
 8013d48:	4b12      	ldr	r3, [pc, #72]	@ (8013d94 <tcp_recv_null+0x60>)
 8013d4a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013d4e:	4912      	ldr	r1, [pc, #72]	@ (8013d98 <tcp_recv_null+0x64>)
 8013d50:	4812      	ldr	r0, [pc, #72]	@ (8013d9c <tcp_recv_null+0x68>)
 8013d52:	f00a fbf1 	bl	801e538 <iprintf>
 8013d56:	f06f 030f 	mvn.w	r3, #15
 8013d5a:	e016      	b.n	8013d8a <tcp_recv_null+0x56>

  if (p != NULL) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d009      	beq.n	8013d76 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	891b      	ldrh	r3, [r3, #8]
 8013d66:	4619      	mov	r1, r3
 8013d68:	68b8      	ldr	r0, [r7, #8]
 8013d6a:	f7ff fb17 	bl	801339c <tcp_recved>
    pbuf_free(p);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f7fe fbb0 	bl	80124d4 <pbuf_free>
 8013d74:	e008      	b.n	8013d88 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d104      	bne.n	8013d88 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013d7e:	68b8      	ldr	r0, [r7, #8]
 8013d80:	f7ff f9bc 	bl	80130fc <tcp_close>
 8013d84:	4603      	mov	r3, r0
 8013d86:	e000      	b.n	8013d8a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	08022bf4 	.word	0x08022bf4
 8013d98:	08023164 	.word	0x08023164
 8013d9c:	08022c38 	.word	0x08022c38

08013da0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b086      	sub	sp, #24
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	db01      	blt.n	8013db6 <tcp_kill_prio+0x16>
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	e000      	b.n	8013db8 <tcp_kill_prio+0x18>
 8013db6:	237f      	movs	r3, #127	@ 0x7f
 8013db8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013dba:	7afb      	ldrb	r3, [r7, #11]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d034      	beq.n	8013e2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013dc0:	7afb      	ldrb	r3, [r7, #11]
 8013dc2:	3b01      	subs	r3, #1
 8013dc4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dce:	4b19      	ldr	r3, [pc, #100]	@ (8013e34 <tcp_kill_prio+0x94>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	e01f      	b.n	8013e16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	7d5b      	ldrb	r3, [r3, #21]
 8013dda:	7afa      	ldrb	r2, [r7, #11]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d80c      	bhi.n	8013dfa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013de4:	7afa      	ldrb	r2, [r7, #11]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d112      	bne.n	8013e10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013dea:	4b13      	ldr	r3, [pc, #76]	@ (8013e38 <tcp_kill_prio+0x98>)
 8013dec:	681a      	ldr	r2, [r3, #0]
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	6a1b      	ldr	r3, [r3, #32]
 8013df2:	1ad3      	subs	r3, r2, r3
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d80a      	bhi.n	8013e10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8013e38 <tcp_kill_prio+0x98>)
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	6a1b      	ldr	r3, [r3, #32]
 8013e02:	1ad3      	subs	r3, r2, r3
 8013e04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	7d5b      	ldrb	r3, [r3, #21]
 8013e0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	68db      	ldr	r3, [r3, #12]
 8013e14:	617b      	str	r3, [r7, #20]
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d1dc      	bne.n	8013dd6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d004      	beq.n	8013e2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013e22:	6938      	ldr	r0, [r7, #16]
 8013e24:	f7ff fa54 	bl	80132d0 <tcp_abort>
 8013e28:	e000      	b.n	8013e2c <tcp_kill_prio+0x8c>
    return;
 8013e2a:	bf00      	nop
  }
}
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	20017764 	.word	0x20017764
 8013e38:	20017758 	.word	0x20017758

08013e3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b086      	sub	sp, #24
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	4603      	mov	r3, r0
 8013e44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013e46:	79fb      	ldrb	r3, [r7, #7]
 8013e48:	2b08      	cmp	r3, #8
 8013e4a:	d009      	beq.n	8013e60 <tcp_kill_state+0x24>
 8013e4c:	79fb      	ldrb	r3, [r7, #7]
 8013e4e:	2b09      	cmp	r3, #9
 8013e50:	d006      	beq.n	8013e60 <tcp_kill_state+0x24>
 8013e52:	4b1a      	ldr	r3, [pc, #104]	@ (8013ebc <tcp_kill_state+0x80>)
 8013e54:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013e58:	4919      	ldr	r1, [pc, #100]	@ (8013ec0 <tcp_kill_state+0x84>)
 8013e5a:	481a      	ldr	r0, [pc, #104]	@ (8013ec4 <tcp_kill_state+0x88>)
 8013e5c:	f00a fb6c 	bl	801e538 <iprintf>

  inactivity = 0;
 8013e60:	2300      	movs	r3, #0
 8013e62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013e64:	2300      	movs	r3, #0
 8013e66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e68:	4b17      	ldr	r3, [pc, #92]	@ (8013ec8 <tcp_kill_state+0x8c>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	617b      	str	r3, [r7, #20]
 8013e6e:	e017      	b.n	8013ea0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	7d1b      	ldrb	r3, [r3, #20]
 8013e74:	79fa      	ldrb	r2, [r7, #7]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d10f      	bne.n	8013e9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013e7a:	4b14      	ldr	r3, [pc, #80]	@ (8013ecc <tcp_kill_state+0x90>)
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	6a1b      	ldr	r3, [r3, #32]
 8013e82:	1ad3      	subs	r3, r2, r3
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d807      	bhi.n	8013e9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013e8a:	4b10      	ldr	r3, [pc, #64]	@ (8013ecc <tcp_kill_state+0x90>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	6a1b      	ldr	r3, [r3, #32]
 8013e92:	1ad3      	subs	r3, r2, r3
 8013e94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d1e4      	bne.n	8013e70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d003      	beq.n	8013eb4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013eac:	2100      	movs	r1, #0
 8013eae:	6938      	ldr	r0, [r7, #16]
 8013eb0:	f7ff f950 	bl	8013154 <tcp_abandon>
  }
}
 8013eb4:	bf00      	nop
 8013eb6:	3718      	adds	r7, #24
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	08022bf4 	.word	0x08022bf4
 8013ec0:	08023180 	.word	0x08023180
 8013ec4:	08022c38 	.word	0x08022c38
 8013ec8:	20017764 	.word	0x20017764
 8013ecc:	20017758 	.word	0x20017758

08013ed0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ede:	4b12      	ldr	r3, [pc, #72]	@ (8013f28 <tcp_kill_timewait+0x58>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	60fb      	str	r3, [r7, #12]
 8013ee4:	e012      	b.n	8013f0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013ee6:	4b11      	ldr	r3, [pc, #68]	@ (8013f2c <tcp_kill_timewait+0x5c>)
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	6a1b      	ldr	r3, [r3, #32]
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d807      	bhi.n	8013f06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8013f2c <tcp_kill_timewait+0x5c>)
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	6a1b      	ldr	r3, [r3, #32]
 8013efe:	1ad3      	subs	r3, r2, r3
 8013f00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	60fb      	str	r3, [r7, #12]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d1e9      	bne.n	8013ee6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013f18:	68b8      	ldr	r0, [r7, #8]
 8013f1a:	f7ff f9d9 	bl	80132d0 <tcp_abort>
  }
}
 8013f1e:	bf00      	nop
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	20017768 	.word	0x20017768
 8013f2c:	20017758 	.word	0x20017758

08013f30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013f36:	4b10      	ldr	r3, [pc, #64]	@ (8013f78 <tcp_handle_closepend+0x48>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013f3c:	e014      	b.n	8013f68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	8b5b      	ldrh	r3, [r3, #26]
 8013f48:	f003 0308 	and.w	r3, r3, #8
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d009      	beq.n	8013f64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	8b5b      	ldrh	r3, [r3, #26]
 8013f54:	f023 0308 	bic.w	r3, r3, #8
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff f862 	bl	8013028 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d1e7      	bne.n	8013f3e <tcp_handle_closepend+0xe>
  }
}
 8013f6e:	bf00      	nop
 8013f70:	bf00      	nop
 8013f72:	3708      	adds	r7, #8
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	20017764 	.word	0x20017764

08013f7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	4603      	mov	r3, r0
 8013f84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013f86:	2001      	movs	r0, #1
 8013f88:	f7fd fb7e 	bl	8011688 <memp_malloc>
 8013f8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d126      	bne.n	8013fe2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013f94:	f7ff ffcc 	bl	8013f30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013f98:	f7ff ff9a 	bl	8013ed0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013f9c:	2001      	movs	r0, #1
 8013f9e:	f7fd fb73 	bl	8011688 <memp_malloc>
 8013fa2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d11b      	bne.n	8013fe2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013faa:	2009      	movs	r0, #9
 8013fac:	f7ff ff46 	bl	8013e3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	f7fd fb69 	bl	8011688 <memp_malloc>
 8013fb6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d111      	bne.n	8013fe2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013fbe:	2008      	movs	r0, #8
 8013fc0:	f7ff ff3c 	bl	8013e3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013fc4:	2001      	movs	r0, #1
 8013fc6:	f7fd fb5f 	bl	8011688 <memp_malloc>
 8013fca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d107      	bne.n	8013fe2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013fd2:	79fb      	ldrb	r3, [r7, #7]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff fee3 	bl	8013da0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013fda:	2001      	movs	r0, #1
 8013fdc:	f7fd fb54 	bl	8011688 <memp_malloc>
 8013fe0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d03f      	beq.n	8014068 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013fe8:	229c      	movs	r2, #156	@ 0x9c
 8013fea:	2100      	movs	r1, #0
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	f00a fbd7 	bl	801e7a0 <memset>
    pcb->prio = prio;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	79fa      	ldrb	r2, [r7, #7]
 8013ff6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013ffe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014008:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	22ff      	movs	r2, #255	@ 0xff
 8014016:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801401e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2206      	movs	r2, #6
 8014024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2206      	movs	r2, #6
 801402c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014034:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2201      	movs	r2, #1
 801403a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801403e:	4b0d      	ldr	r3, [pc, #52]	@ (8014074 <tcp_alloc+0xf8>)
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014046:	4b0c      	ldr	r3, [pc, #48]	@ (8014078 <tcp_alloc+0xfc>)
 8014048:	781a      	ldrb	r2, [r3, #0]
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014054:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	4a08      	ldr	r2, [pc, #32]	@ (801407c <tcp_alloc+0x100>)
 801405c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	4a07      	ldr	r2, [pc, #28]	@ (8014080 <tcp_alloc+0x104>)
 8014064:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014068:	68fb      	ldr	r3, [r7, #12]
}
 801406a:	4618      	mov	r0, r3
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	20017758 	.word	0x20017758
 8014078:	2001776e 	.word	0x2001776e
 801407c:	08013d35 	.word	0x08013d35
 8014080:	006ddd00 	.word	0x006ddd00

08014084 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d107      	bne.n	80140a2 <tcp_pcb_purge+0x1e>
 8014092:	4b21      	ldr	r3, [pc, #132]	@ (8014118 <tcp_pcb_purge+0x94>)
 8014094:	f640 0251 	movw	r2, #2129	@ 0x851
 8014098:	4920      	ldr	r1, [pc, #128]	@ (801411c <tcp_pcb_purge+0x98>)
 801409a:	4821      	ldr	r0, [pc, #132]	@ (8014120 <tcp_pcb_purge+0x9c>)
 801409c:	f00a fa4c 	bl	801e538 <iprintf>
 80140a0:	e037      	b.n	8014112 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	7d1b      	ldrb	r3, [r3, #20]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d033      	beq.n	8014112 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80140ae:	2b0a      	cmp	r3, #10
 80140b0:	d02f      	beq.n	8014112 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d02b      	beq.n	8014112 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d007      	beq.n	80140d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fe fa04 	bl	80124d4 <pbuf_free>
      pcb->refused_data = NULL;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d002      	beq.n	80140e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f000 f986 	bl	80143ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80140e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fdc7 	bl	8013c80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7ff fdc2 	bl	8013c80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2200      	movs	r2, #0
 8014100:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2200      	movs	r2, #0
 801410e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	08022bf4 	.word	0x08022bf4
 801411c:	08023240 	.word	0x08023240
 8014120:	08022c38 	.word	0x08022c38

08014124 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d106      	bne.n	8014142 <tcp_pcb_remove+0x1e>
 8014134:	4b3e      	ldr	r3, [pc, #248]	@ (8014230 <tcp_pcb_remove+0x10c>)
 8014136:	f640 0283 	movw	r2, #2179	@ 0x883
 801413a:	493e      	ldr	r1, [pc, #248]	@ (8014234 <tcp_pcb_remove+0x110>)
 801413c:	483e      	ldr	r0, [pc, #248]	@ (8014238 <tcp_pcb_remove+0x114>)
 801413e:	f00a f9fb 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d106      	bne.n	8014156 <tcp_pcb_remove+0x32>
 8014148:	4b39      	ldr	r3, [pc, #228]	@ (8014230 <tcp_pcb_remove+0x10c>)
 801414a:	f640 0284 	movw	r2, #2180	@ 0x884
 801414e:	493b      	ldr	r1, [pc, #236]	@ (801423c <tcp_pcb_remove+0x118>)
 8014150:	4839      	ldr	r0, [pc, #228]	@ (8014238 <tcp_pcb_remove+0x114>)
 8014152:	f00a f9f1 	bl	801e538 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	683a      	ldr	r2, [r7, #0]
 801415c:	429a      	cmp	r2, r3
 801415e:	d105      	bne.n	801416c <tcp_pcb_remove+0x48>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	68da      	ldr	r2, [r3, #12]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	e013      	b.n	8014194 <tcp_pcb_remove+0x70>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	60fb      	str	r3, [r7, #12]
 8014172:	e00c      	b.n	801418e <tcp_pcb_remove+0x6a>
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	683a      	ldr	r2, [r7, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d104      	bne.n	8014188 <tcp_pcb_remove+0x64>
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	68da      	ldr	r2, [r3, #12]
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	60da      	str	r2, [r3, #12]
 8014186:	e005      	b.n	8014194 <tcp_pcb_remove+0x70>
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	68db      	ldr	r3, [r3, #12]
 801418c:	60fb      	str	r3, [r7, #12]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d1ef      	bne.n	8014174 <tcp_pcb_remove+0x50>
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	2200      	movs	r2, #0
 8014198:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801419a:	6838      	ldr	r0, [r7, #0]
 801419c:	f7ff ff72 	bl	8014084 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	7d1b      	ldrb	r3, [r3, #20]
 80141a4:	2b0a      	cmp	r3, #10
 80141a6:	d013      	beq.n	80141d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d00f      	beq.n	80141d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	8b5b      	ldrh	r3, [r3, #26]
 80141b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d009      	beq.n	80141d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	8b5b      	ldrh	r3, [r3, #26]
 80141c0:	f043 0302 	orr.w	r3, r3, #2
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80141ca:	6838      	ldr	r0, [r7, #0]
 80141cc:	f002 ff68 	bl	80170a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	7d1b      	ldrb	r3, [r3, #20]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d020      	beq.n	801421a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d006      	beq.n	80141ee <tcp_pcb_remove+0xca>
 80141e0:	4b13      	ldr	r3, [pc, #76]	@ (8014230 <tcp_pcb_remove+0x10c>)
 80141e2:	f640 0293 	movw	r2, #2195	@ 0x893
 80141e6:	4916      	ldr	r1, [pc, #88]	@ (8014240 <tcp_pcb_remove+0x11c>)
 80141e8:	4813      	ldr	r0, [pc, #76]	@ (8014238 <tcp_pcb_remove+0x114>)
 80141ea:	f00a f9a5 	bl	801e538 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d006      	beq.n	8014204 <tcp_pcb_remove+0xe0>
 80141f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014230 <tcp_pcb_remove+0x10c>)
 80141f8:	f640 0294 	movw	r2, #2196	@ 0x894
 80141fc:	4911      	ldr	r1, [pc, #68]	@ (8014244 <tcp_pcb_remove+0x120>)
 80141fe:	480e      	ldr	r0, [pc, #56]	@ (8014238 <tcp_pcb_remove+0x114>)
 8014200:	f00a f99a 	bl	801e538 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014208:	2b00      	cmp	r3, #0
 801420a:	d006      	beq.n	801421a <tcp_pcb_remove+0xf6>
 801420c:	4b08      	ldr	r3, [pc, #32]	@ (8014230 <tcp_pcb_remove+0x10c>)
 801420e:	f640 0296 	movw	r2, #2198	@ 0x896
 8014212:	490d      	ldr	r1, [pc, #52]	@ (8014248 <tcp_pcb_remove+0x124>)
 8014214:	4808      	ldr	r0, [pc, #32]	@ (8014238 <tcp_pcb_remove+0x114>)
 8014216:	f00a f98f 	bl	801e538 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	2200      	movs	r2, #0
 801421e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	2200      	movs	r2, #0
 8014224:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014226:	bf00      	nop
 8014228:	3710      	adds	r7, #16
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	08022bf4 	.word	0x08022bf4
 8014234:	0802325c 	.word	0x0802325c
 8014238:	08022c38 	.word	0x08022c38
 801423c:	08023278 	.word	0x08023278
 8014240:	08023298 	.word	0x08023298
 8014244:	080232b0 	.word	0x080232b0
 8014248:	080232cc 	.word	0x080232cc

0801424c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <tcp_next_iss+0x1c>
 801425a:	4b0a      	ldr	r3, [pc, #40]	@ (8014284 <tcp_next_iss+0x38>)
 801425c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014260:	4909      	ldr	r1, [pc, #36]	@ (8014288 <tcp_next_iss+0x3c>)
 8014262:	480a      	ldr	r0, [pc, #40]	@ (801428c <tcp_next_iss+0x40>)
 8014264:	f00a f968 	bl	801e538 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014268:	4b09      	ldr	r3, [pc, #36]	@ (8014290 <tcp_next_iss+0x44>)
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	4b09      	ldr	r3, [pc, #36]	@ (8014294 <tcp_next_iss+0x48>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4413      	add	r3, r2
 8014272:	4a07      	ldr	r2, [pc, #28]	@ (8014290 <tcp_next_iss+0x44>)
 8014274:	6013      	str	r3, [r2, #0]
  return iss;
 8014276:	4b06      	ldr	r3, [pc, #24]	@ (8014290 <tcp_next_iss+0x44>)
 8014278:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801427a:	4618      	mov	r0, r3
 801427c:	3708      	adds	r7, #8
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	08022bf4 	.word	0x08022bf4
 8014288:	080232e4 	.word	0x080232e4
 801428c:	08022c38 	.word	0x08022c38
 8014290:	20000044 	.word	0x20000044
 8014294:	20017758 	.word	0x20017758

08014298 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	4603      	mov	r3, r0
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	607a      	str	r2, [r7, #4]
 80142a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <tcp_eff_send_mss_netif+0x22>
 80142ac:	4b14      	ldr	r3, [pc, #80]	@ (8014300 <tcp_eff_send_mss_netif+0x68>)
 80142ae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80142b2:	4914      	ldr	r1, [pc, #80]	@ (8014304 <tcp_eff_send_mss_netif+0x6c>)
 80142b4:	4814      	ldr	r0, [pc, #80]	@ (8014308 <tcp_eff_send_mss_netif+0x70>)
 80142b6:	f00a f93f 	bl	801e538 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d101      	bne.n	80142c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80142c0:	89fb      	ldrh	r3, [r7, #14]
 80142c2:	e019      	b.n	80142f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80142ca:	8afb      	ldrh	r3, [r7, #22]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d012      	beq.n	80142f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80142d0:	2328      	movs	r3, #40	@ 0x28
 80142d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80142d4:	8afa      	ldrh	r2, [r7, #22]
 80142d6:	8abb      	ldrh	r3, [r7, #20]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d904      	bls.n	80142e6 <tcp_eff_send_mss_netif+0x4e>
 80142dc:	8afa      	ldrh	r2, [r7, #22]
 80142de:	8abb      	ldrh	r3, [r7, #20]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	e000      	b.n	80142e8 <tcp_eff_send_mss_netif+0x50>
 80142e6:	2300      	movs	r3, #0
 80142e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80142ea:	8a7a      	ldrh	r2, [r7, #18]
 80142ec:	89fb      	ldrh	r3, [r7, #14]
 80142ee:	4293      	cmp	r3, r2
 80142f0:	bf28      	it	cs
 80142f2:	4613      	movcs	r3, r2
 80142f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80142f6:	89fb      	ldrh	r3, [r7, #14]
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3718      	adds	r7, #24
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	08022bf4 	.word	0x08022bf4
 8014304:	08023300 	.word	0x08023300
 8014308:	08022c38 	.word	0x08022c38

0801430c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d119      	bne.n	8014354 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014320:	4b10      	ldr	r3, [pc, #64]	@ (8014364 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014322:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014326:	4910      	ldr	r1, [pc, #64]	@ (8014368 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014328:	4810      	ldr	r0, [pc, #64]	@ (801436c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801432a:	f00a f905 	bl	801e538 <iprintf>

  while (pcb != NULL) {
 801432e:	e011      	b.n	8014354 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681a      	ldr	r2, [r3, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	429a      	cmp	r2, r3
 801433a:	d108      	bne.n	801434e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f7fe ffc4 	bl	80132d0 <tcp_abort>
      pcb = next;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	60fb      	str	r3, [r7, #12]
 801434c:	e002      	b.n	8014354 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1ea      	bne.n	8014330 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801435a:	bf00      	nop
 801435c:	bf00      	nop
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	08022bf4 	.word	0x08022bf4
 8014368:	08023328 	.word	0x08023328
 801436c:	08022c38 	.word	0x08022c38

08014370 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d02a      	beq.n	80143d6 <tcp_netif_ip_addr_changed+0x66>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d026      	beq.n	80143d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014388:	4b15      	ldr	r3, [pc, #84]	@ (80143e0 <tcp_netif_ip_addr_changed+0x70>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	4619      	mov	r1, r3
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f7ff ffbc 	bl	801430c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014394:	4b13      	ldr	r3, [pc, #76]	@ (80143e4 <tcp_netif_ip_addr_changed+0x74>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4619      	mov	r1, r3
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ff ffb6 	bl	801430c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d017      	beq.n	80143d6 <tcp_netif_ip_addr_changed+0x66>
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d013      	beq.n	80143d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80143ae:	4b0e      	ldr	r3, [pc, #56]	@ (80143e8 <tcp_netif_ip_addr_changed+0x78>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	e00c      	b.n	80143d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d103      	bne.n	80143ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	60fb      	str	r3, [r7, #12]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d1ef      	bne.n	80143b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80143d6:	bf00      	nop
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	20017764 	.word	0x20017764
 80143e4:	2001775c 	.word	0x2001775c
 80143e8:	20017760 	.word	0x20017760

080143ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d007      	beq.n	801440c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014400:	4618      	mov	r0, r3
 8014402:	f7ff fc3d 	bl	8013c80 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2200      	movs	r2, #0
 801440a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014414:	b590      	push	{r4, r7, lr}
 8014416:	b08d      	sub	sp, #52	@ 0x34
 8014418:	af04      	add	r7, sp, #16
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d105      	bne.n	8014430 <tcp_input+0x1c>
 8014424:	4b9b      	ldr	r3, [pc, #620]	@ (8014694 <tcp_input+0x280>)
 8014426:	2283      	movs	r2, #131	@ 0x83
 8014428:	499b      	ldr	r1, [pc, #620]	@ (8014698 <tcp_input+0x284>)
 801442a:	489c      	ldr	r0, [pc, #624]	@ (801469c <tcp_input+0x288>)
 801442c:	f00a f884 	bl	801e538 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	4a9a      	ldr	r2, [pc, #616]	@ (80146a0 <tcp_input+0x28c>)
 8014436:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	895b      	ldrh	r3, [r3, #10]
 801443c:	2b13      	cmp	r3, #19
 801443e:	f240 83d1 	bls.w	8014be4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014442:	4b98      	ldr	r3, [pc, #608]	@ (80146a4 <tcp_input+0x290>)
 8014444:	695b      	ldr	r3, [r3, #20]
 8014446:	4a97      	ldr	r2, [pc, #604]	@ (80146a4 <tcp_input+0x290>)
 8014448:	6812      	ldr	r2, [r2, #0]
 801444a:	4611      	mov	r1, r2
 801444c:	4618      	mov	r0, r3
 801444e:	f007 fe9d 	bl	801c18c <ip4_addr_isbroadcast_u32>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	f040 83c7 	bne.w	8014be8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801445a:	4b92      	ldr	r3, [pc, #584]	@ (80146a4 <tcp_input+0x290>)
 801445c:	695b      	ldr	r3, [r3, #20]
 801445e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014462:	2be0      	cmp	r3, #224	@ 0xe0
 8014464:	f000 83c0 	beq.w	8014be8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014468:	4b8d      	ldr	r3, [pc, #564]	@ (80146a0 <tcp_input+0x28c>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	899b      	ldrh	r3, [r3, #12]
 801446e:	b29b      	uxth	r3, r3
 8014470:	4618      	mov	r0, r3
 8014472:	f7fc f943 	bl	80106fc <lwip_htons>
 8014476:	4603      	mov	r3, r0
 8014478:	0b1b      	lsrs	r3, r3, #12
 801447a:	b29b      	uxth	r3, r3
 801447c:	b2db      	uxtb	r3, r3
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014482:	7cbb      	ldrb	r3, [r7, #18]
 8014484:	2b13      	cmp	r3, #19
 8014486:	f240 83b1 	bls.w	8014bec <tcp_input+0x7d8>
 801448a:	7cbb      	ldrb	r3, [r7, #18]
 801448c:	b29a      	uxth	r2, r3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	891b      	ldrh	r3, [r3, #8]
 8014492:	429a      	cmp	r2, r3
 8014494:	f200 83aa 	bhi.w	8014bec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014498:	7cbb      	ldrb	r3, [r7, #18]
 801449a:	b29b      	uxth	r3, r3
 801449c:	3b14      	subs	r3, #20
 801449e:	b29a      	uxth	r2, r3
 80144a0:	4b81      	ldr	r3, [pc, #516]	@ (80146a8 <tcp_input+0x294>)
 80144a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80144a4:	4b81      	ldr	r3, [pc, #516]	@ (80146ac <tcp_input+0x298>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	895a      	ldrh	r2, [r3, #10]
 80144ae:	7cbb      	ldrb	r3, [r7, #18]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d309      	bcc.n	80144ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80144b6:	4b7c      	ldr	r3, [pc, #496]	@ (80146a8 <tcp_input+0x294>)
 80144b8:	881a      	ldrh	r2, [r3, #0]
 80144ba:	4b7d      	ldr	r3, [pc, #500]	@ (80146b0 <tcp_input+0x29c>)
 80144bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80144be:	7cbb      	ldrb	r3, [r7, #18]
 80144c0:	4619      	mov	r1, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7fd ff80 	bl	80123c8 <pbuf_remove_header>
 80144c8:	e04e      	b.n	8014568 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d105      	bne.n	80144de <tcp_input+0xca>
 80144d2:	4b70      	ldr	r3, [pc, #448]	@ (8014694 <tcp_input+0x280>)
 80144d4:	22c2      	movs	r2, #194	@ 0xc2
 80144d6:	4977      	ldr	r1, [pc, #476]	@ (80146b4 <tcp_input+0x2a0>)
 80144d8:	4870      	ldr	r0, [pc, #448]	@ (801469c <tcp_input+0x288>)
 80144da:	f00a f82d 	bl	801e538 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80144de:	2114      	movs	r1, #20
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7fd ff71 	bl	80123c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	895a      	ldrh	r2, [r3, #10]
 80144ea:	4b71      	ldr	r3, [pc, #452]	@ (80146b0 <tcp_input+0x29c>)
 80144ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80144ee:	4b6e      	ldr	r3, [pc, #440]	@ (80146a8 <tcp_input+0x294>)
 80144f0:	881a      	ldrh	r2, [r3, #0]
 80144f2:	4b6f      	ldr	r3, [pc, #444]	@ (80146b0 <tcp_input+0x29c>)
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80144fa:	4b6d      	ldr	r3, [pc, #436]	@ (80146b0 <tcp_input+0x29c>)
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	4619      	mov	r1, r3
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f7fd ff61 	bl	80123c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	895b      	ldrh	r3, [r3, #10]
 801450c:	8a3a      	ldrh	r2, [r7, #16]
 801450e:	429a      	cmp	r2, r3
 8014510:	f200 836e 	bhi.w	8014bf0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	4a64      	ldr	r2, [pc, #400]	@ (80146ac <tcp_input+0x298>)
 801451c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	8a3a      	ldrh	r2, [r7, #16]
 8014524:	4611      	mov	r1, r2
 8014526:	4618      	mov	r0, r3
 8014528:	f7fd ff4e 	bl	80123c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	891a      	ldrh	r2, [r3, #8]
 8014530:	8a3b      	ldrh	r3, [r7, #16]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	b29a      	uxth	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	895b      	ldrh	r3, [r3, #10]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d005      	beq.n	801454e <tcp_input+0x13a>
 8014542:	4b54      	ldr	r3, [pc, #336]	@ (8014694 <tcp_input+0x280>)
 8014544:	22df      	movs	r2, #223	@ 0xdf
 8014546:	495c      	ldr	r1, [pc, #368]	@ (80146b8 <tcp_input+0x2a4>)
 8014548:	4854      	ldr	r0, [pc, #336]	@ (801469c <tcp_input+0x288>)
 801454a:	f009 fff5 	bl	801e538 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	891a      	ldrh	r2, [r3, #8]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	891b      	ldrh	r3, [r3, #8]
 8014558:	429a      	cmp	r2, r3
 801455a:	d005      	beq.n	8014568 <tcp_input+0x154>
 801455c:	4b4d      	ldr	r3, [pc, #308]	@ (8014694 <tcp_input+0x280>)
 801455e:	22e0      	movs	r2, #224	@ 0xe0
 8014560:	4956      	ldr	r1, [pc, #344]	@ (80146bc <tcp_input+0x2a8>)
 8014562:	484e      	ldr	r0, [pc, #312]	@ (801469c <tcp_input+0x288>)
 8014564:	f009 ffe8 	bl	801e538 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014568:	4b4d      	ldr	r3, [pc, #308]	@ (80146a0 <tcp_input+0x28c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	b29b      	uxth	r3, r3
 8014570:	4a4b      	ldr	r2, [pc, #300]	@ (80146a0 <tcp_input+0x28c>)
 8014572:	6814      	ldr	r4, [r2, #0]
 8014574:	4618      	mov	r0, r3
 8014576:	f7fc f8c1 	bl	80106fc <lwip_htons>
 801457a:	4603      	mov	r3, r0
 801457c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801457e:	4b48      	ldr	r3, [pc, #288]	@ (80146a0 <tcp_input+0x28c>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	885b      	ldrh	r3, [r3, #2]
 8014584:	b29b      	uxth	r3, r3
 8014586:	4a46      	ldr	r2, [pc, #280]	@ (80146a0 <tcp_input+0x28c>)
 8014588:	6814      	ldr	r4, [r2, #0]
 801458a:	4618      	mov	r0, r3
 801458c:	f7fc f8b6 	bl	80106fc <lwip_htons>
 8014590:	4603      	mov	r3, r0
 8014592:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014594:	4b42      	ldr	r3, [pc, #264]	@ (80146a0 <tcp_input+0x28c>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	4a41      	ldr	r2, [pc, #260]	@ (80146a0 <tcp_input+0x28c>)
 801459c:	6814      	ldr	r4, [r2, #0]
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fc f8c1 	bl	8010726 <lwip_htonl>
 80145a4:	4603      	mov	r3, r0
 80145a6:	6063      	str	r3, [r4, #4]
 80145a8:	6863      	ldr	r3, [r4, #4]
 80145aa:	4a45      	ldr	r2, [pc, #276]	@ (80146c0 <tcp_input+0x2ac>)
 80145ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80145ae:	4b3c      	ldr	r3, [pc, #240]	@ (80146a0 <tcp_input+0x28c>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	689b      	ldr	r3, [r3, #8]
 80145b4:	4a3a      	ldr	r2, [pc, #232]	@ (80146a0 <tcp_input+0x28c>)
 80145b6:	6814      	ldr	r4, [r2, #0]
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fc f8b4 	bl	8010726 <lwip_htonl>
 80145be:	4603      	mov	r3, r0
 80145c0:	60a3      	str	r3, [r4, #8]
 80145c2:	68a3      	ldr	r3, [r4, #8]
 80145c4:	4a3f      	ldr	r2, [pc, #252]	@ (80146c4 <tcp_input+0x2b0>)
 80145c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80145c8:	4b35      	ldr	r3, [pc, #212]	@ (80146a0 <tcp_input+0x28c>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	89db      	ldrh	r3, [r3, #14]
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	4a33      	ldr	r2, [pc, #204]	@ (80146a0 <tcp_input+0x28c>)
 80145d2:	6814      	ldr	r4, [r2, #0]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fc f891 	bl	80106fc <lwip_htons>
 80145da:	4603      	mov	r3, r0
 80145dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80145de:	4b30      	ldr	r3, [pc, #192]	@ (80146a0 <tcp_input+0x28c>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	899b      	ldrh	r3, [r3, #12]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fc f888 	bl	80106fc <lwip_htons>
 80145ec:	4603      	mov	r3, r0
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80145f4:	b2da      	uxtb	r2, r3
 80145f6:	4b34      	ldr	r3, [pc, #208]	@ (80146c8 <tcp_input+0x2b4>)
 80145f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	891a      	ldrh	r2, [r3, #8]
 80145fe:	4b33      	ldr	r3, [pc, #204]	@ (80146cc <tcp_input+0x2b8>)
 8014600:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014602:	4b31      	ldr	r3, [pc, #196]	@ (80146c8 <tcp_input+0x2b4>)
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	f003 0303 	and.w	r3, r3, #3
 801460a:	2b00      	cmp	r3, #0
 801460c:	d00c      	beq.n	8014628 <tcp_input+0x214>
    tcplen++;
 801460e:	4b2f      	ldr	r3, [pc, #188]	@ (80146cc <tcp_input+0x2b8>)
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	3301      	adds	r3, #1
 8014614:	b29a      	uxth	r2, r3
 8014616:	4b2d      	ldr	r3, [pc, #180]	@ (80146cc <tcp_input+0x2b8>)
 8014618:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	891a      	ldrh	r2, [r3, #8]
 801461e:	4b2b      	ldr	r3, [pc, #172]	@ (80146cc <tcp_input+0x2b8>)
 8014620:	881b      	ldrh	r3, [r3, #0]
 8014622:	429a      	cmp	r2, r3
 8014624:	f200 82e6 	bhi.w	8014bf4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014628:	2300      	movs	r3, #0
 801462a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801462c:	4b28      	ldr	r3, [pc, #160]	@ (80146d0 <tcp_input+0x2bc>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	61fb      	str	r3, [r7, #28]
 8014632:	e09d      	b.n	8014770 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	7d1b      	ldrb	r3, [r3, #20]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d105      	bne.n	8014648 <tcp_input+0x234>
 801463c:	4b15      	ldr	r3, [pc, #84]	@ (8014694 <tcp_input+0x280>)
 801463e:	22fb      	movs	r2, #251	@ 0xfb
 8014640:	4924      	ldr	r1, [pc, #144]	@ (80146d4 <tcp_input+0x2c0>)
 8014642:	4816      	ldr	r0, [pc, #88]	@ (801469c <tcp_input+0x288>)
 8014644:	f009 ff78 	bl	801e538 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	7d1b      	ldrb	r3, [r3, #20]
 801464c:	2b0a      	cmp	r3, #10
 801464e:	d105      	bne.n	801465c <tcp_input+0x248>
 8014650:	4b10      	ldr	r3, [pc, #64]	@ (8014694 <tcp_input+0x280>)
 8014652:	22fc      	movs	r2, #252	@ 0xfc
 8014654:	4920      	ldr	r1, [pc, #128]	@ (80146d8 <tcp_input+0x2c4>)
 8014656:	4811      	ldr	r0, [pc, #68]	@ (801469c <tcp_input+0x288>)
 8014658:	f009 ff6e 	bl	801e538 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	7d1b      	ldrb	r3, [r3, #20]
 8014660:	2b01      	cmp	r3, #1
 8014662:	d105      	bne.n	8014670 <tcp_input+0x25c>
 8014664:	4b0b      	ldr	r3, [pc, #44]	@ (8014694 <tcp_input+0x280>)
 8014666:	22fd      	movs	r2, #253	@ 0xfd
 8014668:	491c      	ldr	r1, [pc, #112]	@ (80146dc <tcp_input+0x2c8>)
 801466a:	480c      	ldr	r0, [pc, #48]	@ (801469c <tcp_input+0x288>)
 801466c:	f009 ff64 	bl	801e538 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	7a1b      	ldrb	r3, [r3, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d033      	beq.n	80146e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	7a1a      	ldrb	r2, [r3, #8]
 801467c:	4b09      	ldr	r3, [pc, #36]	@ (80146a4 <tcp_input+0x290>)
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014684:	3301      	adds	r3, #1
 8014686:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014688:	429a      	cmp	r2, r3
 801468a:	d029      	beq.n	80146e0 <tcp_input+0x2cc>
      prev = pcb;
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	61bb      	str	r3, [r7, #24]
      continue;
 8014690:	e06b      	b.n	801476a <tcp_input+0x356>
 8014692:	bf00      	nop
 8014694:	0802335c 	.word	0x0802335c
 8014698:	08023390 	.word	0x08023390
 801469c:	080233a8 	.word	0x080233a8
 80146a0:	20017780 	.word	0x20017780
 80146a4:	20013e98 	.word	0x20013e98
 80146a8:	20017784 	.word	0x20017784
 80146ac:	20017788 	.word	0x20017788
 80146b0:	20017786 	.word	0x20017786
 80146b4:	080233d0 	.word	0x080233d0
 80146b8:	080233e0 	.word	0x080233e0
 80146bc:	080233ec 	.word	0x080233ec
 80146c0:	20017790 	.word	0x20017790
 80146c4:	20017794 	.word	0x20017794
 80146c8:	2001779c 	.word	0x2001779c
 80146cc:	2001779a 	.word	0x2001779a
 80146d0:	20017764 	.word	0x20017764
 80146d4:	0802340c 	.word	0x0802340c
 80146d8:	08023434 	.word	0x08023434
 80146dc:	08023460 	.word	0x08023460
    }

    if (pcb->remote_port == tcphdr->src &&
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	8b1a      	ldrh	r2, [r3, #24]
 80146e4:	4b72      	ldr	r3, [pc, #456]	@ (80148b0 <tcp_input+0x49c>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	881b      	ldrh	r3, [r3, #0]
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d13a      	bne.n	8014766 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	8ada      	ldrh	r2, [r3, #22]
 80146f4:	4b6e      	ldr	r3, [pc, #440]	@ (80148b0 <tcp_input+0x49c>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	885b      	ldrh	r3, [r3, #2]
 80146fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d132      	bne.n	8014766 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	685a      	ldr	r2, [r3, #4]
 8014704:	4b6b      	ldr	r3, [pc, #428]	@ (80148b4 <tcp_input+0x4a0>)
 8014706:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014708:	429a      	cmp	r2, r3
 801470a:	d12c      	bne.n	8014766 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	4b68      	ldr	r3, [pc, #416]	@ (80148b4 <tcp_input+0x4a0>)
 8014712:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014714:	429a      	cmp	r2, r3
 8014716:	d126      	bne.n	8014766 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	68db      	ldr	r3, [r3, #12]
 801471c:	69fa      	ldr	r2, [r7, #28]
 801471e:	429a      	cmp	r2, r3
 8014720:	d106      	bne.n	8014730 <tcp_input+0x31c>
 8014722:	4b65      	ldr	r3, [pc, #404]	@ (80148b8 <tcp_input+0x4a4>)
 8014724:	f240 120d 	movw	r2, #269	@ 0x10d
 8014728:	4964      	ldr	r1, [pc, #400]	@ (80148bc <tcp_input+0x4a8>)
 801472a:	4865      	ldr	r0, [pc, #404]	@ (80148c0 <tcp_input+0x4ac>)
 801472c:	f009 ff04 	bl	801e538 <iprintf>
      if (prev != NULL) {
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00a      	beq.n	801474c <tcp_input+0x338>
        prev->next = pcb->next;
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	68da      	ldr	r2, [r3, #12]
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801473e:	4b61      	ldr	r3, [pc, #388]	@ (80148c4 <tcp_input+0x4b0>)
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014746:	4a5f      	ldr	r2, [pc, #380]	@ (80148c4 <tcp_input+0x4b0>)
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	68db      	ldr	r3, [r3, #12]
 8014750:	69fa      	ldr	r2, [r7, #28]
 8014752:	429a      	cmp	r2, r3
 8014754:	d111      	bne.n	801477a <tcp_input+0x366>
 8014756:	4b58      	ldr	r3, [pc, #352]	@ (80148b8 <tcp_input+0x4a4>)
 8014758:	f240 1215 	movw	r2, #277	@ 0x115
 801475c:	495a      	ldr	r1, [pc, #360]	@ (80148c8 <tcp_input+0x4b4>)
 801475e:	4858      	ldr	r0, [pc, #352]	@ (80148c0 <tcp_input+0x4ac>)
 8014760:	f009 feea 	bl	801e538 <iprintf>
      break;
 8014764:	e009      	b.n	801477a <tcp_input+0x366>
    }
    prev = pcb;
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	61fb      	str	r3, [r7, #28]
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	2b00      	cmp	r3, #0
 8014774:	f47f af5e 	bne.w	8014634 <tcp_input+0x220>
 8014778:	e000      	b.n	801477c <tcp_input+0x368>
      break;
 801477a:	bf00      	nop
  }

  if (pcb == NULL) {
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	2b00      	cmp	r3, #0
 8014780:	f040 80aa 	bne.w	80148d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014784:	4b51      	ldr	r3, [pc, #324]	@ (80148cc <tcp_input+0x4b8>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	61fb      	str	r3, [r7, #28]
 801478a:	e03f      	b.n	801480c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	7d1b      	ldrb	r3, [r3, #20]
 8014790:	2b0a      	cmp	r3, #10
 8014792:	d006      	beq.n	80147a2 <tcp_input+0x38e>
 8014794:	4b48      	ldr	r3, [pc, #288]	@ (80148b8 <tcp_input+0x4a4>)
 8014796:	f240 121f 	movw	r2, #287	@ 0x11f
 801479a:	494d      	ldr	r1, [pc, #308]	@ (80148d0 <tcp_input+0x4bc>)
 801479c:	4848      	ldr	r0, [pc, #288]	@ (80148c0 <tcp_input+0x4ac>)
 801479e:	f009 fecb 	bl	801e538 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147a2:	69fb      	ldr	r3, [r7, #28]
 80147a4:	7a1b      	ldrb	r3, [r3, #8]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d009      	beq.n	80147be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	7a1a      	ldrb	r2, [r3, #8]
 80147ae:	4b41      	ldr	r3, [pc, #260]	@ (80148b4 <tcp_input+0x4a0>)
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80147b6:	3301      	adds	r3, #1
 80147b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d122      	bne.n	8014804 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	8b1a      	ldrh	r2, [r3, #24]
 80147c2:	4b3b      	ldr	r3, [pc, #236]	@ (80148b0 <tcp_input+0x49c>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d11b      	bne.n	8014806 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	8ada      	ldrh	r2, [r3, #22]
 80147d2:	4b37      	ldr	r3, [pc, #220]	@ (80148b0 <tcp_input+0x49c>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	885b      	ldrh	r3, [r3, #2]
 80147d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80147da:	429a      	cmp	r2, r3
 80147dc:	d113      	bne.n	8014806 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	4b34      	ldr	r3, [pc, #208]	@ (80148b4 <tcp_input+0x4a0>)
 80147e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d10d      	bne.n	8014806 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	681a      	ldr	r2, [r3, #0]
 80147ee:	4b31      	ldr	r3, [pc, #196]	@ (80148b4 <tcp_input+0x4a0>)
 80147f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d107      	bne.n	8014806 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80147f6:	69f8      	ldr	r0, [r7, #28]
 80147f8:	f000 fb56 	bl	8014ea8 <tcp_timewait_input>
        }
        pbuf_free(p);
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f7fd fe69 	bl	80124d4 <pbuf_free>
        return;
 8014802:	e1fd      	b.n	8014c00 <tcp_input+0x7ec>
        continue;
 8014804:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	61fb      	str	r3, [r7, #28]
 801480c:	69fb      	ldr	r3, [r7, #28]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d1bc      	bne.n	801478c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014812:	2300      	movs	r3, #0
 8014814:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014816:	4b2f      	ldr	r3, [pc, #188]	@ (80148d4 <tcp_input+0x4c0>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	617b      	str	r3, [r7, #20]
 801481c:	e02a      	b.n	8014874 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	7a1b      	ldrb	r3, [r3, #8]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d00c      	beq.n	8014840 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	7a1a      	ldrb	r2, [r3, #8]
 801482a:	4b22      	ldr	r3, [pc, #136]	@ (80148b4 <tcp_input+0x4a0>)
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014832:	3301      	adds	r3, #1
 8014834:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014836:	429a      	cmp	r2, r3
 8014838:	d002      	beq.n	8014840 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	61bb      	str	r3, [r7, #24]
        continue;
 801483e:	e016      	b.n	801486e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	8ada      	ldrh	r2, [r3, #22]
 8014844:	4b1a      	ldr	r3, [pc, #104]	@ (80148b0 <tcp_input+0x49c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	885b      	ldrh	r3, [r3, #2]
 801484a:	b29b      	uxth	r3, r3
 801484c:	429a      	cmp	r2, r3
 801484e:	d10c      	bne.n	801486a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	4b17      	ldr	r3, [pc, #92]	@ (80148b4 <tcp_input+0x4a0>)
 8014856:	695b      	ldr	r3, [r3, #20]
 8014858:	429a      	cmp	r2, r3
 801485a:	d00f      	beq.n	801487c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00d      	beq.n	801487e <tcp_input+0x46a>
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d009      	beq.n	801487e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	617b      	str	r3, [r7, #20]
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1d1      	bne.n	801481e <tcp_input+0x40a>
 801487a:	e000      	b.n	801487e <tcp_input+0x46a>
            break;
 801487c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d029      	beq.n	80148d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d00a      	beq.n	80148a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	68da      	ldr	r2, [r3, #12]
 801488e:	69bb      	ldr	r3, [r7, #24]
 8014890:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014892:	4b10      	ldr	r3, [pc, #64]	@ (80148d4 <tcp_input+0x4c0>)
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801489a:	4a0e      	ldr	r2, [pc, #56]	@ (80148d4 <tcp_input+0x4c0>)
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80148a0:	6978      	ldr	r0, [r7, #20]
 80148a2:	f000 fa03 	bl	8014cac <tcp_listen_input>
      }
      pbuf_free(p);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7fd fe14 	bl	80124d4 <pbuf_free>
      return;
 80148ac:	e1a8      	b.n	8014c00 <tcp_input+0x7ec>
 80148ae:	bf00      	nop
 80148b0:	20017780 	.word	0x20017780
 80148b4:	20013e98 	.word	0x20013e98
 80148b8:	0802335c 	.word	0x0802335c
 80148bc:	08023488 	.word	0x08023488
 80148c0:	080233a8 	.word	0x080233a8
 80148c4:	20017764 	.word	0x20017764
 80148c8:	080234b4 	.word	0x080234b4
 80148cc:	20017768 	.word	0x20017768
 80148d0:	080234e0 	.word	0x080234e0
 80148d4:	20017760 	.word	0x20017760
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80148d8:	69fb      	ldr	r3, [r7, #28]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f000 8158 	beq.w	8014b90 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80148e0:	4b95      	ldr	r3, [pc, #596]	@ (8014b38 <tcp_input+0x724>)
 80148e2:	2200      	movs	r2, #0
 80148e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	891a      	ldrh	r2, [r3, #8]
 80148ea:	4b93      	ldr	r3, [pc, #588]	@ (8014b38 <tcp_input+0x724>)
 80148ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80148ee:	4a92      	ldr	r2, [pc, #584]	@ (8014b38 <tcp_input+0x724>)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80148f4:	4b91      	ldr	r3, [pc, #580]	@ (8014b3c <tcp_input+0x728>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4a8f      	ldr	r2, [pc, #572]	@ (8014b38 <tcp_input+0x724>)
 80148fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80148fc:	4b90      	ldr	r3, [pc, #576]	@ (8014b40 <tcp_input+0x72c>)
 80148fe:	2200      	movs	r2, #0
 8014900:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014902:	4b90      	ldr	r3, [pc, #576]	@ (8014b44 <tcp_input+0x730>)
 8014904:	2200      	movs	r2, #0
 8014906:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014908:	4b8f      	ldr	r3, [pc, #572]	@ (8014b48 <tcp_input+0x734>)
 801490a:	2200      	movs	r2, #0
 801490c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801490e:	4b8f      	ldr	r3, [pc, #572]	@ (8014b4c <tcp_input+0x738>)
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	f003 0308 	and.w	r3, r3, #8
 8014916:	2b00      	cmp	r3, #0
 8014918:	d006      	beq.n	8014928 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	7b5b      	ldrb	r3, [r3, #13]
 801491e:	f043 0301 	orr.w	r3, r3, #1
 8014922:	b2da      	uxtb	r2, r3
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801492c:	2b00      	cmp	r3, #0
 801492e:	d017      	beq.n	8014960 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014930:	69f8      	ldr	r0, [r7, #28]
 8014932:	f7ff f929 	bl	8013b88 <tcp_process_refused_data>
 8014936:	4603      	mov	r3, r0
 8014938:	f113 0f0d 	cmn.w	r3, #13
 801493c:	d007      	beq.n	801494e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014942:	2b00      	cmp	r3, #0
 8014944:	d00c      	beq.n	8014960 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014946:	4b82      	ldr	r3, [pc, #520]	@ (8014b50 <tcp_input+0x73c>)
 8014948:	881b      	ldrh	r3, [r3, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d008      	beq.n	8014960 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014952:	2b00      	cmp	r3, #0
 8014954:	f040 80e3 	bne.w	8014b1e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014958:	69f8      	ldr	r0, [r7, #28]
 801495a:	f003 f9a7 	bl	8017cac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801495e:	e0de      	b.n	8014b1e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014960:	4a7c      	ldr	r2, [pc, #496]	@ (8014b54 <tcp_input+0x740>)
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014966:	69f8      	ldr	r0, [r7, #28]
 8014968:	f000 fb18 	bl	8014f9c <tcp_process>
 801496c:	4603      	mov	r3, r0
 801496e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014974:	f113 0f0d 	cmn.w	r3, #13
 8014978:	f000 80d3 	beq.w	8014b22 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801497c:	4b71      	ldr	r3, [pc, #452]	@ (8014b44 <tcp_input+0x730>)
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	f003 0308 	and.w	r3, r3, #8
 8014984:	2b00      	cmp	r3, #0
 8014986:	d015      	beq.n	80149b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801498e:	2b00      	cmp	r3, #0
 8014990:	d008      	beq.n	80149a4 <tcp_input+0x590>
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014998:	69fa      	ldr	r2, [r7, #28]
 801499a:	6912      	ldr	r2, [r2, #16]
 801499c:	f06f 010d 	mvn.w	r1, #13
 80149a0:	4610      	mov	r0, r2
 80149a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80149a4:	69f9      	ldr	r1, [r7, #28]
 80149a6:	486c      	ldr	r0, [pc, #432]	@ (8014b58 <tcp_input+0x744>)
 80149a8:	f7ff fbbc 	bl	8014124 <tcp_pcb_remove>
        tcp_free(pcb);
 80149ac:	69f8      	ldr	r0, [r7, #28]
 80149ae:	f7fe f9a7 	bl	8012d00 <tcp_free>
 80149b2:	e0da      	b.n	8014b6a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80149b4:	2300      	movs	r3, #0
 80149b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80149b8:	4b63      	ldr	r3, [pc, #396]	@ (8014b48 <tcp_input+0x734>)
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d01d      	beq.n	80149fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80149c0:	4b61      	ldr	r3, [pc, #388]	@ (8014b48 <tcp_input+0x734>)
 80149c2:	881b      	ldrh	r3, [r3, #0]
 80149c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d00a      	beq.n	80149e6 <tcp_input+0x5d2>
 80149d0:	69fb      	ldr	r3, [r7, #28]
 80149d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80149d6:	69fa      	ldr	r2, [r7, #28]
 80149d8:	6910      	ldr	r0, [r2, #16]
 80149da:	89fa      	ldrh	r2, [r7, #14]
 80149dc:	69f9      	ldr	r1, [r7, #28]
 80149de:	4798      	blx	r3
 80149e0:	4603      	mov	r3, r0
 80149e2:	74fb      	strb	r3, [r7, #19]
 80149e4:	e001      	b.n	80149ea <tcp_input+0x5d6>
 80149e6:	2300      	movs	r3, #0
 80149e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80149ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149ee:	f113 0f0d 	cmn.w	r3, #13
 80149f2:	f000 8098 	beq.w	8014b26 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80149f6:	4b54      	ldr	r3, [pc, #336]	@ (8014b48 <tcp_input+0x734>)
 80149f8:	2200      	movs	r2, #0
 80149fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80149fc:	69f8      	ldr	r0, [r7, #28]
 80149fe:	f000 f915 	bl	8014c2c <tcp_input_delayed_close>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	f040 8090 	bne.w	8014b2a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8014b40 <tcp_input+0x72c>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d041      	beq.n	8014a96 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d006      	beq.n	8014a28 <tcp_input+0x614>
 8014a1a:	4b50      	ldr	r3, [pc, #320]	@ (8014b5c <tcp_input+0x748>)
 8014a1c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014a20:	494f      	ldr	r1, [pc, #316]	@ (8014b60 <tcp_input+0x74c>)
 8014a22:	4850      	ldr	r0, [pc, #320]	@ (8014b64 <tcp_input+0x750>)
 8014a24:	f009 fd88 	bl	801e538 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	8b5b      	ldrh	r3, [r3, #26]
 8014a2c:	f003 0310 	and.w	r3, r3, #16
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d008      	beq.n	8014a46 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014a34:	4b42      	ldr	r3, [pc, #264]	@ (8014b40 <tcp_input+0x72c>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7fd fd4b 	bl	80124d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014a3e:	69f8      	ldr	r0, [r7, #28]
 8014a40:	f7fe fc46 	bl	80132d0 <tcp_abort>
            goto aborted;
 8014a44:	e091      	b.n	8014b6a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014a46:	69fb      	ldr	r3, [r7, #28]
 8014a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d00c      	beq.n	8014a6a <tcp_input+0x656>
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014a56:	69fb      	ldr	r3, [r7, #28]
 8014a58:	6918      	ldr	r0, [r3, #16]
 8014a5a:	4b39      	ldr	r3, [pc, #228]	@ (8014b40 <tcp_input+0x72c>)
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	2300      	movs	r3, #0
 8014a60:	69f9      	ldr	r1, [r7, #28]
 8014a62:	47a0      	blx	r4
 8014a64:	4603      	mov	r3, r0
 8014a66:	74fb      	strb	r3, [r7, #19]
 8014a68:	e008      	b.n	8014a7c <tcp_input+0x668>
 8014a6a:	4b35      	ldr	r3, [pc, #212]	@ (8014b40 <tcp_input+0x72c>)
 8014a6c:	681a      	ldr	r2, [r3, #0]
 8014a6e:	2300      	movs	r3, #0
 8014a70:	69f9      	ldr	r1, [r7, #28]
 8014a72:	2000      	movs	r0, #0
 8014a74:	f7ff f95e 	bl	8013d34 <tcp_recv_null>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014a7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a80:	f113 0f0d 	cmn.w	r3, #13
 8014a84:	d053      	beq.n	8014b2e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014a86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d003      	beq.n	8014a96 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8014b40 <tcp_input+0x72c>)
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014a96:	4b2b      	ldr	r3, [pc, #172]	@ (8014b44 <tcp_input+0x730>)
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	f003 0320 	and.w	r3, r3, #32
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d030      	beq.n	8014b04 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d009      	beq.n	8014abe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014aae:	7b5a      	ldrb	r2, [r3, #13]
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ab4:	f042 0220 	orr.w	r2, r2, #32
 8014ab8:	b2d2      	uxtb	r2, r2
 8014aba:	735a      	strb	r2, [r3, #13]
 8014abc:	e022      	b.n	8014b04 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ac2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014ac6:	d005      	beq.n	8014ad4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014acc:	3301      	adds	r3, #1
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00b      	beq.n	8014af6 <tcp_input+0x6e2>
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	6918      	ldr	r0, [r3, #16]
 8014ae8:	2300      	movs	r3, #0
 8014aea:	2200      	movs	r2, #0
 8014aec:	69f9      	ldr	r1, [r7, #28]
 8014aee:	47a0      	blx	r4
 8014af0:	4603      	mov	r3, r0
 8014af2:	74fb      	strb	r3, [r7, #19]
 8014af4:	e001      	b.n	8014afa <tcp_input+0x6e6>
 8014af6:	2300      	movs	r3, #0
 8014af8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014afa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014afe:	f113 0f0d 	cmn.w	r3, #13
 8014b02:	d016      	beq.n	8014b32 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014b04:	4b13      	ldr	r3, [pc, #76]	@ (8014b54 <tcp_input+0x740>)
 8014b06:	2200      	movs	r2, #0
 8014b08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014b0a:	69f8      	ldr	r0, [r7, #28]
 8014b0c:	f000 f88e 	bl	8014c2c <tcp_input_delayed_close>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d128      	bne.n	8014b68 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014b16:	69f8      	ldr	r0, [r7, #28]
 8014b18:	f002 fac2 	bl	80170a0 <tcp_output>
 8014b1c:	e025      	b.n	8014b6a <tcp_input+0x756>
        goto aborted;
 8014b1e:	bf00      	nop
 8014b20:	e023      	b.n	8014b6a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014b22:	bf00      	nop
 8014b24:	e021      	b.n	8014b6a <tcp_input+0x756>
              goto aborted;
 8014b26:	bf00      	nop
 8014b28:	e01f      	b.n	8014b6a <tcp_input+0x756>
          goto aborted;
 8014b2a:	bf00      	nop
 8014b2c:	e01d      	b.n	8014b6a <tcp_input+0x756>
            goto aborted;
 8014b2e:	bf00      	nop
 8014b30:	e01b      	b.n	8014b6a <tcp_input+0x756>
              goto aborted;
 8014b32:	bf00      	nop
 8014b34:	e019      	b.n	8014b6a <tcp_input+0x756>
 8014b36:	bf00      	nop
 8014b38:	20017770 	.word	0x20017770
 8014b3c:	20017780 	.word	0x20017780
 8014b40:	200177a0 	.word	0x200177a0
 8014b44:	2001779d 	.word	0x2001779d
 8014b48:	20017798 	.word	0x20017798
 8014b4c:	2001779c 	.word	0x2001779c
 8014b50:	2001779a 	.word	0x2001779a
 8014b54:	200177a4 	.word	0x200177a4
 8014b58:	20017764 	.word	0x20017764
 8014b5c:	0802335c 	.word	0x0802335c
 8014b60:	08023510 	.word	0x08023510
 8014b64:	080233a8 	.word	0x080233a8
          goto aborted;
 8014b68:	bf00      	nop
    tcp_input_pcb = NULL;
 8014b6a:	4b27      	ldr	r3, [pc, #156]	@ (8014c08 <tcp_input+0x7f4>)
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014b70:	4b26      	ldr	r3, [pc, #152]	@ (8014c0c <tcp_input+0x7f8>)
 8014b72:	2200      	movs	r2, #0
 8014b74:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014b76:	4b26      	ldr	r3, [pc, #152]	@ (8014c10 <tcp_input+0x7fc>)
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d03f      	beq.n	8014bfe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014b7e:	4b24      	ldr	r3, [pc, #144]	@ (8014c10 <tcp_input+0x7fc>)
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fd fca6 	bl	80124d4 <pbuf_free>
      inseg.p = NULL;
 8014b88:	4b21      	ldr	r3, [pc, #132]	@ (8014c10 <tcp_input+0x7fc>)
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014b8e:	e036      	b.n	8014bfe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014b90:	4b20      	ldr	r3, [pc, #128]	@ (8014c14 <tcp_input+0x800>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	899b      	ldrh	r3, [r3, #12]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7fb fdaf 	bl	80106fc <lwip_htons>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	b2db      	uxtb	r3, r3
 8014ba2:	f003 0304 	and.w	r3, r3, #4
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d118      	bne.n	8014bdc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014baa:	4b1b      	ldr	r3, [pc, #108]	@ (8014c18 <tcp_input+0x804>)
 8014bac:	6819      	ldr	r1, [r3, #0]
 8014bae:	4b1b      	ldr	r3, [pc, #108]	@ (8014c1c <tcp_input+0x808>)
 8014bb0:	881b      	ldrh	r3, [r3, #0]
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8014c20 <tcp_input+0x80c>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bba:	4b16      	ldr	r3, [pc, #88]	@ (8014c14 <tcp_input+0x800>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bbe:	885b      	ldrh	r3, [r3, #2]
 8014bc0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bc2:	4a14      	ldr	r2, [pc, #80]	@ (8014c14 <tcp_input+0x800>)
 8014bc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bc6:	8812      	ldrh	r2, [r2, #0]
 8014bc8:	b292      	uxth	r2, r2
 8014bca:	9202      	str	r2, [sp, #8]
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	4b15      	ldr	r3, [pc, #84]	@ (8014c24 <tcp_input+0x810>)
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	4b15      	ldr	r3, [pc, #84]	@ (8014c28 <tcp_input+0x814>)
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	f003 f816 	bl	8017c08 <tcp_rst>
    pbuf_free(p);
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f7fd fc79 	bl	80124d4 <pbuf_free>
  return;
 8014be2:	e00c      	b.n	8014bfe <tcp_input+0x7ea>
    goto dropped;
 8014be4:	bf00      	nop
 8014be6:	e006      	b.n	8014bf6 <tcp_input+0x7e2>
    goto dropped;
 8014be8:	bf00      	nop
 8014bea:	e004      	b.n	8014bf6 <tcp_input+0x7e2>
    goto dropped;
 8014bec:	bf00      	nop
 8014bee:	e002      	b.n	8014bf6 <tcp_input+0x7e2>
      goto dropped;
 8014bf0:	bf00      	nop
 8014bf2:	e000      	b.n	8014bf6 <tcp_input+0x7e2>
      goto dropped;
 8014bf4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f7fd fc6c 	bl	80124d4 <pbuf_free>
 8014bfc:	e000      	b.n	8014c00 <tcp_input+0x7ec>
  return;
 8014bfe:	bf00      	nop
}
 8014c00:	3724      	adds	r7, #36	@ 0x24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd90      	pop	{r4, r7, pc}
 8014c06:	bf00      	nop
 8014c08:	200177a4 	.word	0x200177a4
 8014c0c:	200177a0 	.word	0x200177a0
 8014c10:	20017770 	.word	0x20017770
 8014c14:	20017780 	.word	0x20017780
 8014c18:	20017794 	.word	0x20017794
 8014c1c:	2001779a 	.word	0x2001779a
 8014c20:	20017790 	.word	0x20017790
 8014c24:	20013ea8 	.word	0x20013ea8
 8014c28:	20013eac 	.word	0x20013eac

08014c2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d106      	bne.n	8014c48 <tcp_input_delayed_close+0x1c>
 8014c3a:	4b17      	ldr	r3, [pc, #92]	@ (8014c98 <tcp_input_delayed_close+0x6c>)
 8014c3c:	f240 225a 	movw	r2, #602	@ 0x25a
 8014c40:	4916      	ldr	r1, [pc, #88]	@ (8014c9c <tcp_input_delayed_close+0x70>)
 8014c42:	4817      	ldr	r0, [pc, #92]	@ (8014ca0 <tcp_input_delayed_close+0x74>)
 8014c44:	f009 fc78 	bl	801e538 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014c48:	4b16      	ldr	r3, [pc, #88]	@ (8014ca4 <tcp_input_delayed_close+0x78>)
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	f003 0310 	and.w	r3, r3, #16
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d01c      	beq.n	8014c8e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	8b5b      	ldrh	r3, [r3, #26]
 8014c58:	f003 0310 	and.w	r3, r3, #16
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d10d      	bne.n	8014c7c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d008      	beq.n	8014c7c <tcp_input_delayed_close+0x50>
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	6912      	ldr	r2, [r2, #16]
 8014c74:	f06f 010e 	mvn.w	r1, #14
 8014c78:	4610      	mov	r0, r2
 8014c7a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014c7c:	6879      	ldr	r1, [r7, #4]
 8014c7e:	480a      	ldr	r0, [pc, #40]	@ (8014ca8 <tcp_input_delayed_close+0x7c>)
 8014c80:	f7ff fa50 	bl	8014124 <tcp_pcb_remove>
    tcp_free(pcb);
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f7fe f83b 	bl	8012d00 <tcp_free>
    return 1;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e000      	b.n	8014c90 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014c8e:	2300      	movs	r3, #0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	0802335c 	.word	0x0802335c
 8014c9c:	0802352c 	.word	0x0802352c
 8014ca0:	080233a8 	.word	0x080233a8
 8014ca4:	2001779d 	.word	0x2001779d
 8014ca8:	20017764 	.word	0x20017764

08014cac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014cac:	b590      	push	{r4, r7, lr}
 8014cae:	b08b      	sub	sp, #44	@ 0x2c
 8014cb0:	af04      	add	r7, sp, #16
 8014cb2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8014e74 <tcp_listen_input+0x1c8>)
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	f003 0304 	and.w	r3, r3, #4
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	f040 80d2 	bne.w	8014e66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d106      	bne.n	8014cd6 <tcp_listen_input+0x2a>
 8014cc8:	4b6b      	ldr	r3, [pc, #428]	@ (8014e78 <tcp_listen_input+0x1cc>)
 8014cca:	f240 2281 	movw	r2, #641	@ 0x281
 8014cce:	496b      	ldr	r1, [pc, #428]	@ (8014e7c <tcp_listen_input+0x1d0>)
 8014cd0:	486b      	ldr	r0, [pc, #428]	@ (8014e80 <tcp_listen_input+0x1d4>)
 8014cd2:	f009 fc31 	bl	801e538 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014cd6:	4b67      	ldr	r3, [pc, #412]	@ (8014e74 <tcp_listen_input+0x1c8>)
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	f003 0310 	and.w	r3, r3, #16
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d019      	beq.n	8014d16 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ce2:	4b68      	ldr	r3, [pc, #416]	@ (8014e84 <tcp_listen_input+0x1d8>)
 8014ce4:	6819      	ldr	r1, [r3, #0]
 8014ce6:	4b68      	ldr	r3, [pc, #416]	@ (8014e88 <tcp_listen_input+0x1dc>)
 8014ce8:	881b      	ldrh	r3, [r3, #0]
 8014cea:	461a      	mov	r2, r3
 8014cec:	4b67      	ldr	r3, [pc, #412]	@ (8014e8c <tcp_listen_input+0x1e0>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cf2:	4b67      	ldr	r3, [pc, #412]	@ (8014e90 <tcp_listen_input+0x1e4>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cf6:	885b      	ldrh	r3, [r3, #2]
 8014cf8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cfa:	4a65      	ldr	r2, [pc, #404]	@ (8014e90 <tcp_listen_input+0x1e4>)
 8014cfc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cfe:	8812      	ldrh	r2, [r2, #0]
 8014d00:	b292      	uxth	r2, r2
 8014d02:	9202      	str	r2, [sp, #8]
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	4b63      	ldr	r3, [pc, #396]	@ (8014e94 <tcp_listen_input+0x1e8>)
 8014d08:	9300      	str	r3, [sp, #0]
 8014d0a:	4b63      	ldr	r3, [pc, #396]	@ (8014e98 <tcp_listen_input+0x1ec>)
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f002 ff7a 	bl	8017c08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014d14:	e0a9      	b.n	8014e6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014d16:	4b57      	ldr	r3, [pc, #348]	@ (8014e74 <tcp_listen_input+0x1c8>)
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	f003 0302 	and.w	r3, r3, #2
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f000 80a3 	beq.w	8014e6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	7d5b      	ldrb	r3, [r3, #21]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff f927 	bl	8013f7c <tcp_alloc>
 8014d2e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d111      	bne.n	8014d5a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	699b      	ldr	r3, [r3, #24]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d00a      	beq.n	8014d54 <tcp_listen_input+0xa8>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	699b      	ldr	r3, [r3, #24]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	6910      	ldr	r0, [r2, #16]
 8014d46:	f04f 32ff 	mov.w	r2, #4294967295
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	4798      	blx	r3
 8014d4e:	4603      	mov	r3, r0
 8014d50:	73bb      	strb	r3, [r7, #14]
      return;
 8014d52:	e08b      	b.n	8014e6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014d54:	23f0      	movs	r3, #240	@ 0xf0
 8014d56:	73bb      	strb	r3, [r7, #14]
      return;
 8014d58:	e088      	b.n	8014e6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014d5a:	4b50      	ldr	r3, [pc, #320]	@ (8014e9c <tcp_listen_input+0x1f0>)
 8014d5c:	695a      	ldr	r2, [r3, #20]
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014d62:	4b4e      	ldr	r3, [pc, #312]	@ (8014e9c <tcp_listen_input+0x1f0>)
 8014d64:	691a      	ldr	r2, [r3, #16]
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8ada      	ldrh	r2, [r3, #22]
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014d72:	4b47      	ldr	r3, [pc, #284]	@ (8014e90 <tcp_listen_input+0x1e4>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	881b      	ldrh	r3, [r3, #0]
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2203      	movs	r2, #3
 8014d82:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014d84:	4b41      	ldr	r3, [pc, #260]	@ (8014e8c <tcp_listen_input+0x1e0>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	1c5a      	adds	r2, r3, #1
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014d96:	6978      	ldr	r0, [r7, #20]
 8014d98:	f7ff fa58 	bl	801424c <tcp_next_iss>
 8014d9c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	693a      	ldr	r2, [r7, #16]
 8014da2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	693a      	ldr	r2, [r7, #16]
 8014da8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	693a      	ldr	r2, [r7, #16]
 8014dae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	693a      	ldr	r2, [r7, #16]
 8014db4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014db6:	4b35      	ldr	r3, [pc, #212]	@ (8014e8c <tcp_listen_input+0x1e0>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	1e5a      	subs	r2, r3, #1
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	691a      	ldr	r2, [r3, #16]
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	7a5b      	ldrb	r3, [r3, #9]
 8014dd2:	f003 030c 	and.w	r3, r3, #12
 8014dd6:	b2da      	uxtb	r2, r3
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	7a1a      	ldrb	r2, [r3, #8]
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014de4:	4b2e      	ldr	r3, [pc, #184]	@ (8014ea0 <tcp_listen_input+0x1f4>)
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	60da      	str	r2, [r3, #12]
 8014dec:	4a2c      	ldr	r2, [pc, #176]	@ (8014ea0 <tcp_listen_input+0x1f4>)
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	6013      	str	r3, [r2, #0]
 8014df2:	f003 f8cb 	bl	8017f8c <tcp_timer_needed>
 8014df6:	4b2b      	ldr	r3, [pc, #172]	@ (8014ea4 <tcp_listen_input+0x1f8>)
 8014df8:	2201      	movs	r2, #1
 8014dfa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014dfc:	6978      	ldr	r0, [r7, #20]
 8014dfe:	f001 fd8b 	bl	8016918 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014e02:	4b23      	ldr	r3, [pc, #140]	@ (8014e90 <tcp_listen_input+0x1e4>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	89db      	ldrh	r3, [r3, #14]
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	3304      	adds	r3, #4
 8014e24:	4618      	mov	r0, r3
 8014e26:	f006 fefd 	bl	801bc24 <ip4_route>
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	3304      	adds	r3, #4
 8014e30:	461a      	mov	r2, r3
 8014e32:	4620      	mov	r0, r4
 8014e34:	f7ff fa30 	bl	8014298 <tcp_eff_send_mss_netif>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014e40:	2112      	movs	r1, #18
 8014e42:	6978      	ldr	r0, [r7, #20]
 8014e44:	f002 f83e 	bl	8016ec4 <tcp_enqueue_flags>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d004      	beq.n	8014e5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014e54:	2100      	movs	r1, #0
 8014e56:	6978      	ldr	r0, [r7, #20]
 8014e58:	f7fe f97c 	bl	8013154 <tcp_abandon>
      return;
 8014e5c:	e006      	b.n	8014e6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014e5e:	6978      	ldr	r0, [r7, #20]
 8014e60:	f002 f91e 	bl	80170a0 <tcp_output>
  return;
 8014e64:	e001      	b.n	8014e6a <tcp_listen_input+0x1be>
    return;
 8014e66:	bf00      	nop
 8014e68:	e000      	b.n	8014e6c <tcp_listen_input+0x1c0>
  return;
 8014e6a:	bf00      	nop
}
 8014e6c:	371c      	adds	r7, #28
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd90      	pop	{r4, r7, pc}
 8014e72:	bf00      	nop
 8014e74:	2001779c 	.word	0x2001779c
 8014e78:	0802335c 	.word	0x0802335c
 8014e7c:	08023554 	.word	0x08023554
 8014e80:	080233a8 	.word	0x080233a8
 8014e84:	20017794 	.word	0x20017794
 8014e88:	2001779a 	.word	0x2001779a
 8014e8c:	20017790 	.word	0x20017790
 8014e90:	20017780 	.word	0x20017780
 8014e94:	20013ea8 	.word	0x20013ea8
 8014e98:	20013eac 	.word	0x20013eac
 8014e9c:	20013e98 	.word	0x20013e98
 8014ea0:	20017764 	.word	0x20017764
 8014ea4:	2001776c 	.word	0x2001776c

08014ea8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af04      	add	r7, sp, #16
 8014eae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8014f70 <tcp_timewait_input+0xc8>)
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	f003 0304 	and.w	r3, r3, #4
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d153      	bne.n	8014f64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d106      	bne.n	8014ed0 <tcp_timewait_input+0x28>
 8014ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8014f74 <tcp_timewait_input+0xcc>)
 8014ec4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014ec8:	492b      	ldr	r1, [pc, #172]	@ (8014f78 <tcp_timewait_input+0xd0>)
 8014eca:	482c      	ldr	r0, [pc, #176]	@ (8014f7c <tcp_timewait_input+0xd4>)
 8014ecc:	f009 fb34 	bl	801e538 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014ed0:	4b27      	ldr	r3, [pc, #156]	@ (8014f70 <tcp_timewait_input+0xc8>)
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	f003 0302 	and.w	r3, r3, #2
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d02a      	beq.n	8014f32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014edc:	4b28      	ldr	r3, [pc, #160]	@ (8014f80 <tcp_timewait_input+0xd8>)
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee4:	1ad3      	subs	r3, r2, r3
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	db2d      	blt.n	8014f46 <tcp_timewait_input+0x9e>
 8014eea:	4b25      	ldr	r3, [pc, #148]	@ (8014f80 <tcp_timewait_input+0xd8>)
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ef2:	6879      	ldr	r1, [r7, #4]
 8014ef4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014ef6:	440b      	add	r3, r1
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	dc23      	bgt.n	8014f46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014efe:	4b21      	ldr	r3, [pc, #132]	@ (8014f84 <tcp_timewait_input+0xdc>)
 8014f00:	6819      	ldr	r1, [r3, #0]
 8014f02:	4b21      	ldr	r3, [pc, #132]	@ (8014f88 <tcp_timewait_input+0xe0>)
 8014f04:	881b      	ldrh	r3, [r3, #0]
 8014f06:	461a      	mov	r2, r3
 8014f08:	4b1d      	ldr	r3, [pc, #116]	@ (8014f80 <tcp_timewait_input+0xd8>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8014f8c <tcp_timewait_input+0xe4>)
 8014f10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f12:	885b      	ldrh	r3, [r3, #2]
 8014f14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f16:	4a1d      	ldr	r2, [pc, #116]	@ (8014f8c <tcp_timewait_input+0xe4>)
 8014f18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f1a:	8812      	ldrh	r2, [r2, #0]
 8014f1c:	b292      	uxth	r2, r2
 8014f1e:	9202      	str	r2, [sp, #8]
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	4b1b      	ldr	r3, [pc, #108]	@ (8014f90 <tcp_timewait_input+0xe8>)
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	4b1b      	ldr	r3, [pc, #108]	@ (8014f94 <tcp_timewait_input+0xec>)
 8014f28:	4602      	mov	r2, r0
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f002 fe6c 	bl	8017c08 <tcp_rst>
      return;
 8014f30:	e01b      	b.n	8014f6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014f32:	4b0f      	ldr	r3, [pc, #60]	@ (8014f70 <tcp_timewait_input+0xc8>)
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	f003 0301 	and.w	r3, r3, #1
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d003      	beq.n	8014f46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014f3e:	4b16      	ldr	r3, [pc, #88]	@ (8014f98 <tcp_timewait_input+0xf0>)
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014f46:	4b10      	ldr	r3, [pc, #64]	@ (8014f88 <tcp_timewait_input+0xe0>)
 8014f48:	881b      	ldrh	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d00c      	beq.n	8014f68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	8b5b      	ldrh	r3, [r3, #26]
 8014f52:	f043 0302 	orr.w	r3, r3, #2
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f002 f89f 	bl	80170a0 <tcp_output>
  }
  return;
 8014f62:	e001      	b.n	8014f68 <tcp_timewait_input+0xc0>
    return;
 8014f64:	bf00      	nop
 8014f66:	e000      	b.n	8014f6a <tcp_timewait_input+0xc2>
  return;
 8014f68:	bf00      	nop
}
 8014f6a:	3708      	adds	r7, #8
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	2001779c 	.word	0x2001779c
 8014f74:	0802335c 	.word	0x0802335c
 8014f78:	08023574 	.word	0x08023574
 8014f7c:	080233a8 	.word	0x080233a8
 8014f80:	20017790 	.word	0x20017790
 8014f84:	20017794 	.word	0x20017794
 8014f88:	2001779a 	.word	0x2001779a
 8014f8c:	20017780 	.word	0x20017780
 8014f90:	20013ea8 	.word	0x20013ea8
 8014f94:	20013eac 	.word	0x20013eac
 8014f98:	20017758 	.word	0x20017758

08014f9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014f9c:	b590      	push	{r4, r7, lr}
 8014f9e:	b08d      	sub	sp, #52	@ 0x34
 8014fa0:	af04      	add	r7, sp, #16
 8014fa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d106      	bne.n	8014fc0 <tcp_process+0x24>
 8014fb2:	4b9d      	ldr	r3, [pc, #628]	@ (8015228 <tcp_process+0x28c>)
 8014fb4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014fb8:	499c      	ldr	r1, [pc, #624]	@ (801522c <tcp_process+0x290>)
 8014fba:	489d      	ldr	r0, [pc, #628]	@ (8015230 <tcp_process+0x294>)
 8014fbc:	f009 fabc 	bl	801e538 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8015234 <tcp_process+0x298>)
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	f003 0304 	and.w	r3, r3, #4
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d04e      	beq.n	801506a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	7d1b      	ldrb	r3, [r3, #20]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d108      	bne.n	8014fe6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014fd8:	4b97      	ldr	r3, [pc, #604]	@ (8015238 <tcp_process+0x29c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d123      	bne.n	8015028 <tcp_process+0x8c>
        acceptable = 1;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	76fb      	strb	r3, [r7, #27]
 8014fe4:	e020      	b.n	8015028 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014fea:	4b94      	ldr	r3, [pc, #592]	@ (801523c <tcp_process+0x2a0>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d102      	bne.n	8014ff8 <tcp_process+0x5c>
        acceptable = 1;
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	76fb      	strb	r3, [r7, #27]
 8014ff6:	e017      	b.n	8015028 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014ff8:	4b90      	ldr	r3, [pc, #576]	@ (801523c <tcp_process+0x2a0>)
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	db10      	blt.n	8015028 <tcp_process+0x8c>
 8015006:	4b8d      	ldr	r3, [pc, #564]	@ (801523c <tcp_process+0x2a0>)
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801500e:	6879      	ldr	r1, [r7, #4]
 8015010:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015012:	440b      	add	r3, r1
 8015014:	1ad3      	subs	r3, r2, r3
 8015016:	2b00      	cmp	r3, #0
 8015018:	dc06      	bgt.n	8015028 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	8b5b      	ldrh	r3, [r3, #26]
 801501e:	f043 0302 	orr.w	r3, r3, #2
 8015022:	b29a      	uxth	r2, r3
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015028:	7efb      	ldrb	r3, [r7, #27]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d01b      	beq.n	8015066 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	7d1b      	ldrb	r3, [r3, #20]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <tcp_process+0xa8>
 8015036:	4b7c      	ldr	r3, [pc, #496]	@ (8015228 <tcp_process+0x28c>)
 8015038:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801503c:	4980      	ldr	r1, [pc, #512]	@ (8015240 <tcp_process+0x2a4>)
 801503e:	487c      	ldr	r0, [pc, #496]	@ (8015230 <tcp_process+0x294>)
 8015040:	f009 fa7a 	bl	801e538 <iprintf>
      recv_flags |= TF_RESET;
 8015044:	4b7f      	ldr	r3, [pc, #508]	@ (8015244 <tcp_process+0x2a8>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	f043 0308 	orr.w	r3, r3, #8
 801504c:	b2da      	uxtb	r2, r3
 801504e:	4b7d      	ldr	r3, [pc, #500]	@ (8015244 <tcp_process+0x2a8>)
 8015050:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	8b5b      	ldrh	r3, [r3, #26]
 8015056:	f023 0301 	bic.w	r3, r3, #1
 801505a:	b29a      	uxth	r2, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015060:	f06f 030d 	mvn.w	r3, #13
 8015064:	e37a      	b.n	801575c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015066:	2300      	movs	r3, #0
 8015068:	e378      	b.n	801575c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801506a:	4b72      	ldr	r3, [pc, #456]	@ (8015234 <tcp_process+0x298>)
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	f003 0302 	and.w	r3, r3, #2
 8015072:	2b00      	cmp	r3, #0
 8015074:	d010      	beq.n	8015098 <tcp_process+0xfc>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	7d1b      	ldrb	r3, [r3, #20]
 801507a:	2b02      	cmp	r3, #2
 801507c:	d00c      	beq.n	8015098 <tcp_process+0xfc>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	7d1b      	ldrb	r3, [r3, #20]
 8015082:	2b03      	cmp	r3, #3
 8015084:	d008      	beq.n	8015098 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	8b5b      	ldrh	r3, [r3, #26]
 801508a:	f043 0302 	orr.w	r3, r3, #2
 801508e:	b29a      	uxth	r2, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015094:	2300      	movs	r3, #0
 8015096:	e361      	b.n	801575c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	8b5b      	ldrh	r3, [r3, #26]
 801509c:	f003 0310 	and.w	r3, r3, #16
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d103      	bne.n	80150ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80150a4:	4b68      	ldr	r3, [pc, #416]	@ (8015248 <tcp_process+0x2ac>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2200      	movs	r2, #0
 80150b0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	2200      	movs	r2, #0
 80150b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f001 fc2b 	bl	8016918 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	7d1b      	ldrb	r3, [r3, #20]
 80150c6:	3b02      	subs	r3, #2
 80150c8:	2b07      	cmp	r3, #7
 80150ca:	f200 8337 	bhi.w	801573c <tcp_process+0x7a0>
 80150ce:	a201      	add	r2, pc, #4	@ (adr r2, 80150d4 <tcp_process+0x138>)
 80150d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d4:	080150f5 	.word	0x080150f5
 80150d8:	08015325 	.word	0x08015325
 80150dc:	0801549d 	.word	0x0801549d
 80150e0:	080154c7 	.word	0x080154c7
 80150e4:	080155eb 	.word	0x080155eb
 80150e8:	0801549d 	.word	0x0801549d
 80150ec:	08015677 	.word	0x08015677
 80150f0:	08015707 	.word	0x08015707
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80150f4:	4b4f      	ldr	r3, [pc, #316]	@ (8015234 <tcp_process+0x298>)
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	f003 0310 	and.w	r3, r3, #16
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 80e4 	beq.w	80152ca <tcp_process+0x32e>
 8015102:	4b4c      	ldr	r3, [pc, #304]	@ (8015234 <tcp_process+0x298>)
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	f003 0302 	and.w	r3, r3, #2
 801510a:	2b00      	cmp	r3, #0
 801510c:	f000 80dd 	beq.w	80152ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	4b48      	ldr	r3, [pc, #288]	@ (8015238 <tcp_process+0x29c>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	429a      	cmp	r2, r3
 801511c:	f040 80d5 	bne.w	80152ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015120:	4b46      	ldr	r3, [pc, #280]	@ (801523c <tcp_process+0x2a0>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	1c5a      	adds	r2, r3, #1
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015132:	4b41      	ldr	r3, [pc, #260]	@ (8015238 <tcp_process+0x29c>)
 8015134:	681a      	ldr	r2, [r3, #0]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801513a:	4b44      	ldr	r3, [pc, #272]	@ (801524c <tcp_process+0x2b0>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	89db      	ldrh	r3, [r3, #14]
 8015140:	b29a      	uxth	r2, r3
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015154:	4b39      	ldr	r3, [pc, #228]	@ (801523c <tcp_process+0x2a0>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	1e5a      	subs	r2, r3, #1
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2204      	movs	r2, #4
 8015162:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	3304      	adds	r3, #4
 801516c:	4618      	mov	r0, r3
 801516e:	f006 fd59 	bl	801bc24 <ip4_route>
 8015172:	4601      	mov	r1, r0
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	3304      	adds	r3, #4
 8015178:	461a      	mov	r2, r3
 801517a:	4620      	mov	r0, r4
 801517c:	f7ff f88c 	bl	8014298 <tcp_eff_send_mss_netif>
 8015180:	4603      	mov	r3, r0
 8015182:	461a      	mov	r2, r3
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801518c:	009a      	lsls	r2, r3, #2
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015198:	428b      	cmp	r3, r1
 801519a:	bf38      	it	cc
 801519c:	460b      	movcc	r3, r1
 801519e:	429a      	cmp	r2, r3
 80151a0:	d204      	bcs.n	80151ac <tcp_process+0x210>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	e00d      	b.n	80151c8 <tcp_process+0x22c>
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d904      	bls.n	80151c4 <tcp_process+0x228>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151be:	005b      	lsls	r3, r3, #1
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	e001      	b.n	80151c8 <tcp_process+0x22c>
 80151c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d106      	bne.n	80151e6 <tcp_process+0x24a>
 80151d8:	4b13      	ldr	r3, [pc, #76]	@ (8015228 <tcp_process+0x28c>)
 80151da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80151de:	491c      	ldr	r1, [pc, #112]	@ (8015250 <tcp_process+0x2b4>)
 80151e0:	4813      	ldr	r0, [pc, #76]	@ (8015230 <tcp_process+0x294>)
 80151e2:	f009 f9a9 	bl	801e538 <iprintf>
        --pcb->snd_queuelen;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151ec:	3b01      	subs	r3, #1
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d12a      	bne.n	8015258 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015206:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <tcp_process+0x280>
 801520e:	4b06      	ldr	r3, [pc, #24]	@ (8015228 <tcp_process+0x28c>)
 8015210:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015214:	490f      	ldr	r1, [pc, #60]	@ (8015254 <tcp_process+0x2b8>)
 8015216:	4806      	ldr	r0, [pc, #24]	@ (8015230 <tcp_process+0x294>)
 8015218:	f009 f98e 	bl	801e538 <iprintf>
          pcb->unsent = rseg->next;
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015224:	e01c      	b.n	8015260 <tcp_process+0x2c4>
 8015226:	bf00      	nop
 8015228:	0802335c 	.word	0x0802335c
 801522c:	08023594 	.word	0x08023594
 8015230:	080233a8 	.word	0x080233a8
 8015234:	2001779c 	.word	0x2001779c
 8015238:	20017794 	.word	0x20017794
 801523c:	20017790 	.word	0x20017790
 8015240:	080235b0 	.word	0x080235b0
 8015244:	2001779d 	.word	0x2001779d
 8015248:	20017758 	.word	0x20017758
 801524c:	20017780 	.word	0x20017780
 8015250:	080235d0 	.word	0x080235d0
 8015254:	080235e8 	.word	0x080235e8
        } else {
          pcb->unacked = rseg->next;
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015260:	69f8      	ldr	r0, [r7, #28]
 8015262:	f7fe fd22 	bl	8013caa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801526a:	2b00      	cmp	r3, #0
 801526c:	d104      	bne.n	8015278 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015274:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015276:	e006      	b.n	8015286 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2200      	movs	r2, #0
 801527c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2200      	movs	r2, #0
 8015282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801528c:	2b00      	cmp	r3, #0
 801528e:	d00a      	beq.n	80152a6 <tcp_process+0x30a>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	6910      	ldr	r0, [r2, #16]
 801529a:	2200      	movs	r2, #0
 801529c:	6879      	ldr	r1, [r7, #4]
 801529e:	4798      	blx	r3
 80152a0:	4603      	mov	r3, r0
 80152a2:	76bb      	strb	r3, [r7, #26]
 80152a4:	e001      	b.n	80152aa <tcp_process+0x30e>
 80152a6:	2300      	movs	r3, #0
 80152a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80152aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80152ae:	f113 0f0d 	cmn.w	r3, #13
 80152b2:	d102      	bne.n	80152ba <tcp_process+0x31e>
          return ERR_ABRT;
 80152b4:	f06f 030c 	mvn.w	r3, #12
 80152b8:	e250      	b.n	801575c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	8b5b      	ldrh	r3, [r3, #26]
 80152be:	f043 0302 	orr.w	r3, r3, #2
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80152c8:	e23a      	b.n	8015740 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80152ca:	4b98      	ldr	r3, [pc, #608]	@ (801552c <tcp_process+0x590>)
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	f003 0310 	and.w	r3, r3, #16
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 8234 	beq.w	8015740 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80152d8:	4b95      	ldr	r3, [pc, #596]	@ (8015530 <tcp_process+0x594>)
 80152da:	6819      	ldr	r1, [r3, #0]
 80152dc:	4b95      	ldr	r3, [pc, #596]	@ (8015534 <tcp_process+0x598>)
 80152de:	881b      	ldrh	r3, [r3, #0]
 80152e0:	461a      	mov	r2, r3
 80152e2:	4b95      	ldr	r3, [pc, #596]	@ (8015538 <tcp_process+0x59c>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80152e8:	4b94      	ldr	r3, [pc, #592]	@ (801553c <tcp_process+0x5a0>)
 80152ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80152ec:	885b      	ldrh	r3, [r3, #2]
 80152ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80152f0:	4a92      	ldr	r2, [pc, #584]	@ (801553c <tcp_process+0x5a0>)
 80152f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80152f4:	8812      	ldrh	r2, [r2, #0]
 80152f6:	b292      	uxth	r2, r2
 80152f8:	9202      	str	r2, [sp, #8]
 80152fa:	9301      	str	r3, [sp, #4]
 80152fc:	4b90      	ldr	r3, [pc, #576]	@ (8015540 <tcp_process+0x5a4>)
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	4b90      	ldr	r3, [pc, #576]	@ (8015544 <tcp_process+0x5a8>)
 8015302:	4602      	mov	r2, r0
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f002 fc7f 	bl	8017c08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015310:	2b05      	cmp	r3, #5
 8015312:	f200 8215 	bhi.w	8015740 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f002 fa4b 	bl	80177b8 <tcp_rexmit_rto>
      break;
 8015322:	e20d      	b.n	8015740 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015324:	4b81      	ldr	r3, [pc, #516]	@ (801552c <tcp_process+0x590>)
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	f003 0310 	and.w	r3, r3, #16
 801532c:	2b00      	cmp	r3, #0
 801532e:	f000 80a1 	beq.w	8015474 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015332:	4b7f      	ldr	r3, [pc, #508]	@ (8015530 <tcp_process+0x594>)
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801533a:	1ad3      	subs	r3, r2, r3
 801533c:	3b01      	subs	r3, #1
 801533e:	2b00      	cmp	r3, #0
 8015340:	db7e      	blt.n	8015440 <tcp_process+0x4a4>
 8015342:	4b7b      	ldr	r3, [pc, #492]	@ (8015530 <tcp_process+0x594>)
 8015344:	681a      	ldr	r2, [r3, #0]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801534a:	1ad3      	subs	r3, r2, r3
 801534c:	2b00      	cmp	r3, #0
 801534e:	dc77      	bgt.n	8015440 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2204      	movs	r2, #4
 8015354:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801535a:	2b00      	cmp	r3, #0
 801535c:	d102      	bne.n	8015364 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801535e:	23fa      	movs	r3, #250	@ 0xfa
 8015360:	76bb      	strb	r3, [r7, #26]
 8015362:	e01d      	b.n	80153a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015368:	699b      	ldr	r3, [r3, #24]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d106      	bne.n	801537c <tcp_process+0x3e0>
 801536e:	4b76      	ldr	r3, [pc, #472]	@ (8015548 <tcp_process+0x5ac>)
 8015370:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015374:	4975      	ldr	r1, [pc, #468]	@ (801554c <tcp_process+0x5b0>)
 8015376:	4876      	ldr	r0, [pc, #472]	@ (8015550 <tcp_process+0x5b4>)
 8015378:	f009 f8de 	bl	801e538 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015380:	699b      	ldr	r3, [r3, #24]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d00a      	beq.n	801539c <tcp_process+0x400>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801538a:	699b      	ldr	r3, [r3, #24]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	6910      	ldr	r0, [r2, #16]
 8015390:	2200      	movs	r2, #0
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	4798      	blx	r3
 8015396:	4603      	mov	r3, r0
 8015398:	76bb      	strb	r3, [r7, #26]
 801539a:	e001      	b.n	80153a0 <tcp_process+0x404>
 801539c:	23f0      	movs	r3, #240	@ 0xf0
 801539e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80153a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d00a      	beq.n	80153be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80153a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80153ac:	f113 0f0d 	cmn.w	r3, #13
 80153b0:	d002      	beq.n	80153b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f7fd ff8c 	bl	80132d0 <tcp_abort>
            }
            return ERR_ABRT;
 80153b8:	f06f 030c 	mvn.w	r3, #12
 80153bc:	e1ce      	b.n	801575c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 fae0 	bl	8015984 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80153c4:	4b63      	ldr	r3, [pc, #396]	@ (8015554 <tcp_process+0x5b8>)
 80153c6:	881b      	ldrh	r3, [r3, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d005      	beq.n	80153d8 <tcp_process+0x43c>
            recv_acked--;
 80153cc:	4b61      	ldr	r3, [pc, #388]	@ (8015554 <tcp_process+0x5b8>)
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	3b01      	subs	r3, #1
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	4b5f      	ldr	r3, [pc, #380]	@ (8015554 <tcp_process+0x5b8>)
 80153d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153dc:	009a      	lsls	r2, r3, #2
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153e2:	005b      	lsls	r3, r3, #1
 80153e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80153e8:	428b      	cmp	r3, r1
 80153ea:	bf38      	it	cc
 80153ec:	460b      	movcc	r3, r1
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d204      	bcs.n	80153fc <tcp_process+0x460>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	e00d      	b.n	8015418 <tcp_process+0x47c>
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015400:	005b      	lsls	r3, r3, #1
 8015402:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015406:	4293      	cmp	r3, r2
 8015408:	d904      	bls.n	8015414 <tcp_process+0x478>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	b29b      	uxth	r3, r3
 8015412:	e001      	b.n	8015418 <tcp_process+0x47c>
 8015414:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015418:	687a      	ldr	r2, [r7, #4]
 801541a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801541e:	4b4e      	ldr	r3, [pc, #312]	@ (8015558 <tcp_process+0x5bc>)
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	f003 0320 	and.w	r3, r3, #32
 8015426:	2b00      	cmp	r3, #0
 8015428:	d037      	beq.n	801549a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	8b5b      	ldrh	r3, [r3, #26]
 801542e:	f043 0302 	orr.w	r3, r3, #2
 8015432:	b29a      	uxth	r2, r3
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2207      	movs	r2, #7
 801543c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801543e:	e02c      	b.n	801549a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015440:	4b3b      	ldr	r3, [pc, #236]	@ (8015530 <tcp_process+0x594>)
 8015442:	6819      	ldr	r1, [r3, #0]
 8015444:	4b3b      	ldr	r3, [pc, #236]	@ (8015534 <tcp_process+0x598>)
 8015446:	881b      	ldrh	r3, [r3, #0]
 8015448:	461a      	mov	r2, r3
 801544a:	4b3b      	ldr	r3, [pc, #236]	@ (8015538 <tcp_process+0x59c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015450:	4b3a      	ldr	r3, [pc, #232]	@ (801553c <tcp_process+0x5a0>)
 8015452:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015454:	885b      	ldrh	r3, [r3, #2]
 8015456:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015458:	4a38      	ldr	r2, [pc, #224]	@ (801553c <tcp_process+0x5a0>)
 801545a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801545c:	8812      	ldrh	r2, [r2, #0]
 801545e:	b292      	uxth	r2, r2
 8015460:	9202      	str	r2, [sp, #8]
 8015462:	9301      	str	r3, [sp, #4]
 8015464:	4b36      	ldr	r3, [pc, #216]	@ (8015540 <tcp_process+0x5a4>)
 8015466:	9300      	str	r3, [sp, #0]
 8015468:	4b36      	ldr	r3, [pc, #216]	@ (8015544 <tcp_process+0x5a8>)
 801546a:	4602      	mov	r2, r0
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f002 fbcb 	bl	8017c08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015472:	e167      	b.n	8015744 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015474:	4b2d      	ldr	r3, [pc, #180]	@ (801552c <tcp_process+0x590>)
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	f003 0302 	and.w	r3, r3, #2
 801547c:	2b00      	cmp	r3, #0
 801547e:	f000 8161 	beq.w	8015744 <tcp_process+0x7a8>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015486:	1e5a      	subs	r2, r3, #1
 8015488:	4b2b      	ldr	r3, [pc, #172]	@ (8015538 <tcp_process+0x59c>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	429a      	cmp	r2, r3
 801548e:	f040 8159 	bne.w	8015744 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f002 f9b2 	bl	80177fc <tcp_rexmit>
      break;
 8015498:	e154      	b.n	8015744 <tcp_process+0x7a8>
 801549a:	e153      	b.n	8015744 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fa71 	bl	8015984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80154a2:	4b2d      	ldr	r3, [pc, #180]	@ (8015558 <tcp_process+0x5bc>)
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	f003 0320 	and.w	r3, r3, #32
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	f000 814c 	beq.w	8015748 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	8b5b      	ldrh	r3, [r3, #26]
 80154b4:	f043 0302 	orr.w	r3, r3, #2
 80154b8:	b29a      	uxth	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2207      	movs	r2, #7
 80154c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154c4:	e140      	b.n	8015748 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 fa5c 	bl	8015984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80154cc:	4b22      	ldr	r3, [pc, #136]	@ (8015558 <tcp_process+0x5bc>)
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	f003 0320 	and.w	r3, r3, #32
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d071      	beq.n	80155bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80154d8:	4b14      	ldr	r3, [pc, #80]	@ (801552c <tcp_process+0x590>)
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	f003 0310 	and.w	r3, r3, #16
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d060      	beq.n	80155a6 <tcp_process+0x60a>
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154e8:	4b11      	ldr	r3, [pc, #68]	@ (8015530 <tcp_process+0x594>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d15a      	bne.n	80155a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d156      	bne.n	80155a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	8b5b      	ldrh	r3, [r3, #26]
 80154fc:	f043 0302 	orr.w	r3, r3, #2
 8015500:	b29a      	uxth	r2, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f7fe fdbc 	bl	8014084 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801550c:	4b13      	ldr	r3, [pc, #76]	@ (801555c <tcp_process+0x5c0>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	429a      	cmp	r2, r3
 8015514:	d105      	bne.n	8015522 <tcp_process+0x586>
 8015516:	4b11      	ldr	r3, [pc, #68]	@ (801555c <tcp_process+0x5c0>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	4a0f      	ldr	r2, [pc, #60]	@ (801555c <tcp_process+0x5c0>)
 801551e:	6013      	str	r3, [r2, #0]
 8015520:	e02e      	b.n	8015580 <tcp_process+0x5e4>
 8015522:	4b0e      	ldr	r3, [pc, #56]	@ (801555c <tcp_process+0x5c0>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	617b      	str	r3, [r7, #20]
 8015528:	e027      	b.n	801557a <tcp_process+0x5de>
 801552a:	bf00      	nop
 801552c:	2001779c 	.word	0x2001779c
 8015530:	20017794 	.word	0x20017794
 8015534:	2001779a 	.word	0x2001779a
 8015538:	20017790 	.word	0x20017790
 801553c:	20017780 	.word	0x20017780
 8015540:	20013ea8 	.word	0x20013ea8
 8015544:	20013eac 	.word	0x20013eac
 8015548:	0802335c 	.word	0x0802335c
 801554c:	080235fc 	.word	0x080235fc
 8015550:	080233a8 	.word	0x080233a8
 8015554:	20017798 	.word	0x20017798
 8015558:	2001779d 	.word	0x2001779d
 801555c:	20017764 	.word	0x20017764
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	68db      	ldr	r3, [r3, #12]
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	429a      	cmp	r2, r3
 8015568:	d104      	bne.n	8015574 <tcp_process+0x5d8>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	68da      	ldr	r2, [r3, #12]
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	60da      	str	r2, [r3, #12]
 8015572:	e005      	b.n	8015580 <tcp_process+0x5e4>
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	617b      	str	r3, [r7, #20]
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d1ef      	bne.n	8015560 <tcp_process+0x5c4>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2200      	movs	r2, #0
 8015584:	60da      	str	r2, [r3, #12]
 8015586:	4b77      	ldr	r3, [pc, #476]	@ (8015764 <tcp_process+0x7c8>)
 8015588:	2201      	movs	r2, #1
 801558a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	220a      	movs	r2, #10
 8015590:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015592:	4b75      	ldr	r3, [pc, #468]	@ (8015768 <tcp_process+0x7cc>)
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	60da      	str	r2, [r3, #12]
 801559a:	4a73      	ldr	r2, [pc, #460]	@ (8015768 <tcp_process+0x7cc>)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6013      	str	r3, [r2, #0]
 80155a0:	f002 fcf4 	bl	8017f8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80155a4:	e0d2      	b.n	801574c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	8b5b      	ldrh	r3, [r3, #26]
 80155aa:	f043 0302 	orr.w	r3, r3, #2
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2208      	movs	r2, #8
 80155b8:	751a      	strb	r2, [r3, #20]
      break;
 80155ba:	e0c7      	b.n	801574c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80155bc:	4b6b      	ldr	r3, [pc, #428]	@ (801576c <tcp_process+0x7d0>)
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	f003 0310 	and.w	r3, r3, #16
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	f000 80c1 	beq.w	801574c <tcp_process+0x7b0>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155ce:	4b68      	ldr	r3, [pc, #416]	@ (8015770 <tcp_process+0x7d4>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	f040 80ba 	bne.w	801574c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f040 80b5 	bne.w	801574c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2206      	movs	r2, #6
 80155e6:	751a      	strb	r2, [r3, #20]
      break;
 80155e8:	e0b0      	b.n	801574c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f000 f9ca 	bl	8015984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80155f0:	4b60      	ldr	r3, [pc, #384]	@ (8015774 <tcp_process+0x7d8>)
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	f003 0320 	and.w	r3, r3, #32
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	f000 80a9 	beq.w	8015750 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	8b5b      	ldrh	r3, [r3, #26]
 8015602:	f043 0302 	orr.w	r3, r3, #2
 8015606:	b29a      	uxth	r2, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f7fe fd39 	bl	8014084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015612:	4b59      	ldr	r3, [pc, #356]	@ (8015778 <tcp_process+0x7dc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	429a      	cmp	r2, r3
 801561a:	d105      	bne.n	8015628 <tcp_process+0x68c>
 801561c:	4b56      	ldr	r3, [pc, #344]	@ (8015778 <tcp_process+0x7dc>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	68db      	ldr	r3, [r3, #12]
 8015622:	4a55      	ldr	r2, [pc, #340]	@ (8015778 <tcp_process+0x7dc>)
 8015624:	6013      	str	r3, [r2, #0]
 8015626:	e013      	b.n	8015650 <tcp_process+0x6b4>
 8015628:	4b53      	ldr	r3, [pc, #332]	@ (8015778 <tcp_process+0x7dc>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	613b      	str	r3, [r7, #16]
 801562e:	e00c      	b.n	801564a <tcp_process+0x6ae>
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	429a      	cmp	r2, r3
 8015638:	d104      	bne.n	8015644 <tcp_process+0x6a8>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	68da      	ldr	r2, [r3, #12]
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	60da      	str	r2, [r3, #12]
 8015642:	e005      	b.n	8015650 <tcp_process+0x6b4>
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	613b      	str	r3, [r7, #16]
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d1ef      	bne.n	8015630 <tcp_process+0x694>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2200      	movs	r2, #0
 8015654:	60da      	str	r2, [r3, #12]
 8015656:	4b43      	ldr	r3, [pc, #268]	@ (8015764 <tcp_process+0x7c8>)
 8015658:	2201      	movs	r2, #1
 801565a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	220a      	movs	r2, #10
 8015660:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015662:	4b41      	ldr	r3, [pc, #260]	@ (8015768 <tcp_process+0x7cc>)
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	60da      	str	r2, [r3, #12]
 801566a:	4a3f      	ldr	r2, [pc, #252]	@ (8015768 <tcp_process+0x7cc>)
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6013      	str	r3, [r2, #0]
 8015670:	f002 fc8c 	bl	8017f8c <tcp_timer_needed>
      }
      break;
 8015674:	e06c      	b.n	8015750 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f000 f984 	bl	8015984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801567c:	4b3b      	ldr	r3, [pc, #236]	@ (801576c <tcp_process+0x7d0>)
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	f003 0310 	and.w	r3, r3, #16
 8015684:	2b00      	cmp	r3, #0
 8015686:	d065      	beq.n	8015754 <tcp_process+0x7b8>
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801568c:	4b38      	ldr	r3, [pc, #224]	@ (8015770 <tcp_process+0x7d4>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d15f      	bne.n	8015754 <tcp_process+0x7b8>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015698:	2b00      	cmp	r3, #0
 801569a:	d15b      	bne.n	8015754 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7fe fcf1 	bl	8014084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80156a2:	4b35      	ldr	r3, [pc, #212]	@ (8015778 <tcp_process+0x7dc>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d105      	bne.n	80156b8 <tcp_process+0x71c>
 80156ac:	4b32      	ldr	r3, [pc, #200]	@ (8015778 <tcp_process+0x7dc>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	4a31      	ldr	r2, [pc, #196]	@ (8015778 <tcp_process+0x7dc>)
 80156b4:	6013      	str	r3, [r2, #0]
 80156b6:	e013      	b.n	80156e0 <tcp_process+0x744>
 80156b8:	4b2f      	ldr	r3, [pc, #188]	@ (8015778 <tcp_process+0x7dc>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	60fb      	str	r3, [r7, #12]
 80156be:	e00c      	b.n	80156da <tcp_process+0x73e>
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d104      	bne.n	80156d4 <tcp_process+0x738>
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	68da      	ldr	r2, [r3, #12]
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	60da      	str	r2, [r3, #12]
 80156d2:	e005      	b.n	80156e0 <tcp_process+0x744>
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	60fb      	str	r3, [r7, #12]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d1ef      	bne.n	80156c0 <tcp_process+0x724>
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2200      	movs	r2, #0
 80156e4:	60da      	str	r2, [r3, #12]
 80156e6:	4b1f      	ldr	r3, [pc, #124]	@ (8015764 <tcp_process+0x7c8>)
 80156e8:	2201      	movs	r2, #1
 80156ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	220a      	movs	r2, #10
 80156f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80156f2:	4b1d      	ldr	r3, [pc, #116]	@ (8015768 <tcp_process+0x7cc>)
 80156f4:	681a      	ldr	r2, [r3, #0]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	60da      	str	r2, [r3, #12]
 80156fa:	4a1b      	ldr	r2, [pc, #108]	@ (8015768 <tcp_process+0x7cc>)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6013      	str	r3, [r2, #0]
 8015700:	f002 fc44 	bl	8017f8c <tcp_timer_needed>
      }
      break;
 8015704:	e026      	b.n	8015754 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 f93c 	bl	8015984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801570c:	4b17      	ldr	r3, [pc, #92]	@ (801576c <tcp_process+0x7d0>)
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	f003 0310 	and.w	r3, r3, #16
 8015714:	2b00      	cmp	r3, #0
 8015716:	d01f      	beq.n	8015758 <tcp_process+0x7bc>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801571c:	4b14      	ldr	r3, [pc, #80]	@ (8015770 <tcp_process+0x7d4>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	429a      	cmp	r2, r3
 8015722:	d119      	bne.n	8015758 <tcp_process+0x7bc>
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015728:	2b00      	cmp	r3, #0
 801572a:	d115      	bne.n	8015758 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801572c:	4b11      	ldr	r3, [pc, #68]	@ (8015774 <tcp_process+0x7d8>)
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	f043 0310 	orr.w	r3, r3, #16
 8015734:	b2da      	uxtb	r2, r3
 8015736:	4b0f      	ldr	r3, [pc, #60]	@ (8015774 <tcp_process+0x7d8>)
 8015738:	701a      	strb	r2, [r3, #0]
      }
      break;
 801573a:	e00d      	b.n	8015758 <tcp_process+0x7bc>
    default:
      break;
 801573c:	bf00      	nop
 801573e:	e00c      	b.n	801575a <tcp_process+0x7be>
      break;
 8015740:	bf00      	nop
 8015742:	e00a      	b.n	801575a <tcp_process+0x7be>
      break;
 8015744:	bf00      	nop
 8015746:	e008      	b.n	801575a <tcp_process+0x7be>
      break;
 8015748:	bf00      	nop
 801574a:	e006      	b.n	801575a <tcp_process+0x7be>
      break;
 801574c:	bf00      	nop
 801574e:	e004      	b.n	801575a <tcp_process+0x7be>
      break;
 8015750:	bf00      	nop
 8015752:	e002      	b.n	801575a <tcp_process+0x7be>
      break;
 8015754:	bf00      	nop
 8015756:	e000      	b.n	801575a <tcp_process+0x7be>
      break;
 8015758:	bf00      	nop
  }
  return ERR_OK;
 801575a:	2300      	movs	r3, #0
}
 801575c:	4618      	mov	r0, r3
 801575e:	3724      	adds	r7, #36	@ 0x24
 8015760:	46bd      	mov	sp, r7
 8015762:	bd90      	pop	{r4, r7, pc}
 8015764:	2001776c 	.word	0x2001776c
 8015768:	20017768 	.word	0x20017768
 801576c:	2001779c 	.word	0x2001779c
 8015770:	20017794 	.word	0x20017794
 8015774:	2001779d 	.word	0x2001779d
 8015778:	20017764 	.word	0x20017764

0801577c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801577c:	b590      	push	{r4, r7, lr}
 801577e:	b085      	sub	sp, #20
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d106      	bne.n	801579a <tcp_oos_insert_segment+0x1e>
 801578c:	4b3b      	ldr	r3, [pc, #236]	@ (801587c <tcp_oos_insert_segment+0x100>)
 801578e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8015792:	493b      	ldr	r1, [pc, #236]	@ (8015880 <tcp_oos_insert_segment+0x104>)
 8015794:	483b      	ldr	r0, [pc, #236]	@ (8015884 <tcp_oos_insert_segment+0x108>)
 8015796:	f008 fecf 	bl	801e538 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	899b      	ldrh	r3, [r3, #12]
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fa ffaa 	bl	80106fc <lwip_htons>
 80157a8:	4603      	mov	r3, r0
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	f003 0301 	and.w	r3, r3, #1
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d028      	beq.n	8015806 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80157b4:	6838      	ldr	r0, [r7, #0]
 80157b6:	f7fe fa63 	bl	8013c80 <tcp_segs_free>
    next = NULL;
 80157ba:	2300      	movs	r3, #0
 80157bc:	603b      	str	r3, [r7, #0]
 80157be:	e056      	b.n	801586e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	899b      	ldrh	r3, [r3, #12]
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7fa ff97 	bl	80106fc <lwip_htons>
 80157ce:	4603      	mov	r3, r0
 80157d0:	b2db      	uxtb	r3, r3
 80157d2:	f003 0301 	and.w	r3, r3, #1
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d00d      	beq.n	80157f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	899b      	ldrh	r3, [r3, #12]
 80157e0:	b29c      	uxth	r4, r3
 80157e2:	2001      	movs	r0, #1
 80157e4:	f7fa ff8a 	bl	80106fc <lwip_htons>
 80157e8:	4603      	mov	r3, r0
 80157ea:	461a      	mov	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	4322      	orrs	r2, r4
 80157f2:	b292      	uxth	r2, r2
 80157f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	f7fe fa52 	bl	8013caa <tcp_seg_free>
    while (next &&
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d00e      	beq.n	801582a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	891b      	ldrh	r3, [r3, #8]
 8015810:	461a      	mov	r2, r3
 8015812:	4b1d      	ldr	r3, [pc, #116]	@ (8015888 <tcp_oos_insert_segment+0x10c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	441a      	add	r2, r3
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	8909      	ldrh	r1, [r1, #8]
 8015822:	440b      	add	r3, r1
 8015824:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015826:	2b00      	cmp	r3, #0
 8015828:	daca      	bge.n	80157c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d01e      	beq.n	801586e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	891b      	ldrh	r3, [r3, #8]
 8015834:	461a      	mov	r2, r3
 8015836:	4b14      	ldr	r3, [pc, #80]	@ (8015888 <tcp_oos_insert_segment+0x10c>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	441a      	add	r2, r3
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015844:	2b00      	cmp	r3, #0
 8015846:	dd12      	ble.n	801586e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	68db      	ldr	r3, [r3, #12]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	b29a      	uxth	r2, r3
 8015850:	4b0d      	ldr	r3, [pc, #52]	@ (8015888 <tcp_oos_insert_segment+0x10c>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	b29b      	uxth	r3, r3
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	b29a      	uxth	r2, r3
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	685a      	ldr	r2, [r3, #4]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	891b      	ldrh	r3, [r3, #8]
 8015866:	4619      	mov	r1, r3
 8015868:	4610      	mov	r0, r2
 801586a:	f7fc fcad 	bl	80121c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	601a      	str	r2, [r3, #0]
}
 8015874:	bf00      	nop
 8015876:	3714      	adds	r7, #20
 8015878:	46bd      	mov	sp, r7
 801587a:	bd90      	pop	{r4, r7, pc}
 801587c:	0802335c 	.word	0x0802335c
 8015880:	0802361c 	.word	0x0802361c
 8015884:	080233a8 	.word	0x080233a8
 8015888:	20017790 	.word	0x20017790

0801588c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801588c:	b5b0      	push	{r4, r5, r7, lr}
 801588e:	b086      	sub	sp, #24
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801589a:	e03e      	b.n	801591a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7fc fea0 	bl	80125f0 <pbuf_clen>
 80158b0:	4603      	mov	r3, r0
 80158b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80158ba:	8a7a      	ldrh	r2, [r7, #18]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d906      	bls.n	80158ce <tcp_free_acked_segments+0x42>
 80158c0:	4b2a      	ldr	r3, [pc, #168]	@ (801596c <tcp_free_acked_segments+0xe0>)
 80158c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80158c6:	492a      	ldr	r1, [pc, #168]	@ (8015970 <tcp_free_acked_segments+0xe4>)
 80158c8:	482a      	ldr	r0, [pc, #168]	@ (8015974 <tcp_free_acked_segments+0xe8>)
 80158ca:	f008 fe35 	bl	801e538 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80158d4:	8a7b      	ldrh	r3, [r7, #18]
 80158d6:	1ad3      	subs	r3, r2, r3
 80158d8:	b29a      	uxth	r2, r3
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	891a      	ldrh	r2, [r3, #8]
 80158e4:	4b24      	ldr	r3, [pc, #144]	@ (8015978 <tcp_free_acked_segments+0xec>)
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	4413      	add	r3, r2
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	4b22      	ldr	r3, [pc, #136]	@ (8015978 <tcp_free_acked_segments+0xec>)
 80158ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80158f0:	6978      	ldr	r0, [r7, #20]
 80158f2:	f7fe f9da 	bl	8013caa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d00c      	beq.n	801591a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d109      	bne.n	801591a <tcp_free_acked_segments+0x8e>
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d106      	bne.n	801591a <tcp_free_acked_segments+0x8e>
 801590c:	4b17      	ldr	r3, [pc, #92]	@ (801596c <tcp_free_acked_segments+0xe0>)
 801590e:	f240 4261 	movw	r2, #1121	@ 0x461
 8015912:	491a      	ldr	r1, [pc, #104]	@ (801597c <tcp_free_acked_segments+0xf0>)
 8015914:	4817      	ldr	r0, [pc, #92]	@ (8015974 <tcp_free_acked_segments+0xe8>)
 8015916:	f008 fe0f 	bl	801e538 <iprintf>
  while (seg_list != NULL &&
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d020      	beq.n	8015962 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	4618      	mov	r0, r3
 8015928:	f7fa fefd 	bl	8010726 <lwip_htonl>
 801592c:	4604      	mov	r4, r0
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	891b      	ldrh	r3, [r3, #8]
 8015932:	461d      	mov	r5, r3
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	899b      	ldrh	r3, [r3, #12]
 801593a:	b29b      	uxth	r3, r3
 801593c:	4618      	mov	r0, r3
 801593e:	f7fa fedd 	bl	80106fc <lwip_htons>
 8015942:	4603      	mov	r3, r0
 8015944:	b2db      	uxtb	r3, r3
 8015946:	f003 0303 	and.w	r3, r3, #3
 801594a:	2b00      	cmp	r3, #0
 801594c:	d001      	beq.n	8015952 <tcp_free_acked_segments+0xc6>
 801594e:	2301      	movs	r3, #1
 8015950:	e000      	b.n	8015954 <tcp_free_acked_segments+0xc8>
 8015952:	2300      	movs	r3, #0
 8015954:	442b      	add	r3, r5
 8015956:	18e2      	adds	r2, r4, r3
 8015958:	4b09      	ldr	r3, [pc, #36]	@ (8015980 <tcp_free_acked_segments+0xf4>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801595e:	2b00      	cmp	r3, #0
 8015960:	dd9c      	ble.n	801589c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015962:	68bb      	ldr	r3, [r7, #8]
}
 8015964:	4618      	mov	r0, r3
 8015966:	3718      	adds	r7, #24
 8015968:	46bd      	mov	sp, r7
 801596a:	bdb0      	pop	{r4, r5, r7, pc}
 801596c:	0802335c 	.word	0x0802335c
 8015970:	08023644 	.word	0x08023644
 8015974:	080233a8 	.word	0x080233a8
 8015978:	20017798 	.word	0x20017798
 801597c:	0802366c 	.word	0x0802366c
 8015980:	20017794 	.word	0x20017794

08015984 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015984:	b5b0      	push	{r4, r5, r7, lr}
 8015986:	b094      	sub	sp, #80	@ 0x50
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801598c:	2300      	movs	r3, #0
 801598e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d106      	bne.n	80159a4 <tcp_receive+0x20>
 8015996:	4b91      	ldr	r3, [pc, #580]	@ (8015bdc <tcp_receive+0x258>)
 8015998:	f240 427b 	movw	r2, #1147	@ 0x47b
 801599c:	4990      	ldr	r1, [pc, #576]	@ (8015be0 <tcp_receive+0x25c>)
 801599e:	4891      	ldr	r0, [pc, #580]	@ (8015be4 <tcp_receive+0x260>)
 80159a0:	f008 fdca 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	7d1b      	ldrb	r3, [r3, #20]
 80159a8:	2b03      	cmp	r3, #3
 80159aa:	d806      	bhi.n	80159ba <tcp_receive+0x36>
 80159ac:	4b8b      	ldr	r3, [pc, #556]	@ (8015bdc <tcp_receive+0x258>)
 80159ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80159b2:	498d      	ldr	r1, [pc, #564]	@ (8015be8 <tcp_receive+0x264>)
 80159b4:	488b      	ldr	r0, [pc, #556]	@ (8015be4 <tcp_receive+0x260>)
 80159b6:	f008 fdbf 	bl	801e538 <iprintf>

  if (flags & TCP_ACK) {
 80159ba:	4b8c      	ldr	r3, [pc, #560]	@ (8015bec <tcp_receive+0x268>)
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	f003 0310 	and.w	r3, r3, #16
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	f000 8264 	beq.w	8015e90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80159ce:	461a      	mov	r2, r3
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159d4:	4413      	add	r3, r2
 80159d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80159dc:	4b84      	ldr	r3, [pc, #528]	@ (8015bf0 <tcp_receive+0x26c>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	1ad3      	subs	r3, r2, r3
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	db1b      	blt.n	8015a1e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80159ea:	4b81      	ldr	r3, [pc, #516]	@ (8015bf0 <tcp_receive+0x26c>)
 80159ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d106      	bne.n	8015a00 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80159f6:	4b7f      	ldr	r3, [pc, #508]	@ (8015bf4 <tcp_receive+0x270>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	db0e      	blt.n	8015a1e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015a04:	4b7b      	ldr	r3, [pc, #492]	@ (8015bf4 <tcp_receive+0x270>)
 8015a06:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d125      	bne.n	8015a58 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015a0c:	4b7a      	ldr	r3, [pc, #488]	@ (8015bf8 <tcp_receive+0x274>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	89db      	ldrh	r3, [r3, #14]
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d91c      	bls.n	8015a58 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015a1e:	4b76      	ldr	r3, [pc, #472]	@ (8015bf8 <tcp_receive+0x274>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	89db      	ldrh	r3, [r3, #14]
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d205      	bcs.n	8015a48 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015a48:	4b69      	ldr	r3, [pc, #420]	@ (8015bf0 <tcp_receive+0x26c>)
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015a50:	4b68      	ldr	r3, [pc, #416]	@ (8015bf4 <tcp_receive+0x270>)
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015a58:	4b66      	ldr	r3, [pc, #408]	@ (8015bf4 <tcp_receive+0x270>)
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	dc58      	bgt.n	8015b18 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015a66:	4b65      	ldr	r3, [pc, #404]	@ (8015bfc <tcp_receive+0x278>)
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d14b      	bne.n	8015b06 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015a78:	4413      	add	r3, r2
 8015a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d142      	bne.n	8015b06 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	db3d      	blt.n	8015b06 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015a8e:	4b59      	ldr	r3, [pc, #356]	@ (8015bf4 <tcp_receive+0x270>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d137      	bne.n	8015b06 <tcp_receive+0x182>
              found_dupack = 1;
 8015a96:	2301      	movs	r3, #1
 8015a98:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015aa0:	2bff      	cmp	r3, #255	@ 0xff
 8015aa2:	d007      	beq.n	8015ab4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015aaa:	3301      	adds	r3, #1
 8015aac:	b2da      	uxtb	r2, r3
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d91b      	bls.n	8015af6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ac8:	4413      	add	r3, r2
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d30a      	bcc.n	8015aec <tcp_receive+0x168>
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ae0:	4413      	add	r3, r2
 8015ae2:	b29a      	uxth	r2, r3
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015aea:	e004      	b.n	8015af6 <tcp_receive+0x172>
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015af2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015afc:	2b02      	cmp	r3, #2
 8015afe:	d902      	bls.n	8015b06 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 fee7 	bl	80178d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	f040 8161 	bne.w	8015dd0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2200      	movs	r2, #0
 8015b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015b16:	e15b      	b.n	8015dd0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b18:	4b36      	ldr	r3, [pc, #216]	@ (8015bf4 <tcp_receive+0x270>)
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	3b01      	subs	r3, #1
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f2c0 814e 	blt.w	8015dc6 <tcp_receive+0x442>
 8015b2a:	4b32      	ldr	r3, [pc, #200]	@ (8015bf4 <tcp_receive+0x270>)
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b32:	1ad3      	subs	r3, r2, r3
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f300 8146 	bgt.w	8015dc6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	8b5b      	ldrh	r3, [r3, #26]
 8015b3e:	f003 0304 	and.w	r3, r3, #4
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d010      	beq.n	8015b68 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	8b5b      	ldrh	r3, [r3, #26]
 8015b4a:	f023 0304 	bic.w	r3, r3, #4
 8015b4e:	b29a      	uxth	r2, r3
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015b76:	10db      	asrs	r3, r3, #3
 8015b78:	b21b      	sxth	r3, r3
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	4413      	add	r3, r2
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	b21a      	sxth	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015b90:	4b18      	ldr	r3, [pc, #96]	@ (8015bf4 <tcp_receive+0x270>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	1ad3      	subs	r3, r2, r3
 8015b9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015ba8:	4b12      	ldr	r3, [pc, #72]	@ (8015bf4 <tcp_receive+0x270>)
 8015baa:	681a      	ldr	r2, [r3, #0]
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7d1b      	ldrb	r3, [r3, #20]
 8015bb4:	2b03      	cmp	r3, #3
 8015bb6:	f240 8097 	bls.w	8015ce8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d245      	bcs.n	8015c56 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	8b5b      	ldrh	r3, [r3, #26]
 8015bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d014      	beq.n	8015c00 <tcp_receive+0x27c>
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	e013      	b.n	8015c02 <tcp_receive+0x27e>
 8015bda:	bf00      	nop
 8015bdc:	0802335c 	.word	0x0802335c
 8015be0:	0802368c 	.word	0x0802368c
 8015be4:	080233a8 	.word	0x080233a8
 8015be8:	080236a8 	.word	0x080236a8
 8015bec:	2001779c 	.word	0x2001779c
 8015bf0:	20017790 	.word	0x20017790
 8015bf4:	20017794 	.word	0x20017794
 8015bf8:	20017780 	.word	0x20017780
 8015bfc:	2001779a 	.word	0x2001779a
 8015c00:	2302      	movs	r3, #2
 8015c02:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015c06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015c0a:	b29a      	uxth	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c10:	fb12 f303 	smulbb	r3, r2, r3
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015c18:	4293      	cmp	r3, r2
 8015c1a:	bf28      	it	cs
 8015c1c:	4613      	movcs	r3, r2
 8015c1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c28:	4413      	add	r3, r2
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d309      	bcc.n	8015c4a <tcp_receive+0x2c6>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c3e:	4413      	add	r3, r2
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c48:	e04e      	b.n	8015ce8 <tcp_receive+0x364>
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c54:	e048      	b.n	8015ce8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015c5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c5e:	4413      	add	r3, r2
 8015c60:	b29a      	uxth	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d309      	bcc.n	8015c80 <tcp_receive+0x2fc>
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015c72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c74:	4413      	add	r3, r2
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015c7e:	e004      	b.n	8015c8a <tcp_receive+0x306>
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d326      	bcc.n	8015ce8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ca6:	1ad3      	subs	r3, r2, r3
 8015ca8:	b29a      	uxth	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cba:	4413      	add	r3, r2
 8015cbc:	b29a      	uxth	r2, r3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d30a      	bcc.n	8015cde <tcp_receive+0x35a>
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cd2:	4413      	add	r3, r2
 8015cd4:	b29a      	uxth	r2, r3
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015cdc:	e004      	b.n	8015ce8 <tcp_receive+0x364>
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ce4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015cf0:	4a98      	ldr	r2, [pc, #608]	@ (8015f54 <tcp_receive+0x5d0>)
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7ff fdca 	bl	801588c <tcp_free_acked_segments>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d06:	4a94      	ldr	r2, [pc, #592]	@ (8015f58 <tcp_receive+0x5d4>)
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f7ff fdbf 	bl	801588c <tcp_free_acked_segments>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d104      	bne.n	8015d26 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d22:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015d24:	e002      	b.n	8015d2c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d103      	bne.n	8015d42 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015d48:	4b84      	ldr	r3, [pc, #528]	@ (8015f5c <tcp_receive+0x5d8>)
 8015d4a:	881b      	ldrh	r3, [r3, #0]
 8015d4c:	4413      	add	r3, r2
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	8b5b      	ldrh	r3, [r3, #26]
 8015d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d035      	beq.n	8015dce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d118      	bne.n	8015d9c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d00c      	beq.n	8015d8c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	685b      	ldr	r3, [r3, #4]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fa fcd1 	bl	8010726 <lwip_htonl>
 8015d84:	4603      	mov	r3, r0
 8015d86:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	dc20      	bgt.n	8015dce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	8b5b      	ldrh	r3, [r3, #26]
 8015d90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015d94:	b29a      	uxth	r2, r3
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015d9a:	e018      	b.n	8015dce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7fa fcbc 	bl	8010726 <lwip_htonl>
 8015dae:	4603      	mov	r3, r0
 8015db0:	1ae3      	subs	r3, r4, r3
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	dc0b      	bgt.n	8015dce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	8b5b      	ldrh	r3, [r3, #26]
 8015dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015dc4:	e003      	b.n	8015dce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f001 ff70 	bl	8017cac <tcp_send_empty_ack>
 8015dcc:	e000      	b.n	8015dd0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015dce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d05b      	beq.n	8015e90 <tcp_receive+0x50c>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ddc:	4b60      	ldr	r3, [pc, #384]	@ (8015f60 <tcp_receive+0x5dc>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	1ad3      	subs	r3, r2, r3
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	da54      	bge.n	8015e90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015de6:	4b5f      	ldr	r3, [pc, #380]	@ (8015f64 <tcp_receive+0x5e0>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	1ad3      	subs	r3, r2, r3
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015dfa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015e04:	10db      	asrs	r3, r3, #3
 8015e06:	b21b      	sxth	r3, r3
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	1ad3      	subs	r3, r2, r3
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015e1e:	4413      	add	r3, r2
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	b21a      	sxth	r2, r3
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015e28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	da05      	bge.n	8015e3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015e34:	425b      	negs	r3, r3
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015e3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015e46:	109b      	asrs	r3, r3, #2
 8015e48:	b21b      	sxth	r3, r3
 8015e4a:	b29b      	uxth	r3, r3
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015e5a:	b29a      	uxth	r2, r3
 8015e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015e60:	4413      	add	r3, r2
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	b21a      	sxth	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015e70:	10db      	asrs	r3, r3, #3
 8015e72:	b21b      	sxth	r3, r3
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	4413      	add	r3, r2
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	b21a      	sxth	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015e90:	4b35      	ldr	r3, [pc, #212]	@ (8015f68 <tcp_receive+0x5e4>)
 8015e92:	881b      	ldrh	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f000 84df 	beq.w	8016858 <tcp_receive+0xed4>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	7d1b      	ldrb	r3, [r3, #20]
 8015e9e:	2b06      	cmp	r3, #6
 8015ea0:	f200 84da 	bhi.w	8016858 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ea8:	4b30      	ldr	r3, [pc, #192]	@ (8015f6c <tcp_receive+0x5e8>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f2c0 808f 	blt.w	8015fd4 <tcp_receive+0x650>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015eba:	4b2b      	ldr	r3, [pc, #172]	@ (8015f68 <tcp_receive+0x5e4>)
 8015ebc:	881b      	ldrh	r3, [r3, #0]
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8015f6c <tcp_receive+0x5e8>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	440b      	add	r3, r1
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	3301      	adds	r3, #1
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f300 8082 	bgt.w	8015fd4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015ed0:	4b27      	ldr	r3, [pc, #156]	@ (8015f70 <tcp_receive+0x5ec>)
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015eda:	4b24      	ldr	r3, [pc, #144]	@ (8015f6c <tcp_receive+0x5e8>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	1ad3      	subs	r3, r2, r3
 8015ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015ee2:	4b23      	ldr	r3, [pc, #140]	@ (8015f70 <tcp_receive+0x5ec>)
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d106      	bne.n	8015ef8 <tcp_receive+0x574>
 8015eea:	4b22      	ldr	r3, [pc, #136]	@ (8015f74 <tcp_receive+0x5f0>)
 8015eec:	f240 5294 	movw	r2, #1428	@ 0x594
 8015ef0:	4921      	ldr	r1, [pc, #132]	@ (8015f78 <tcp_receive+0x5f4>)
 8015ef2:	4822      	ldr	r0, [pc, #136]	@ (8015f7c <tcp_receive+0x5f8>)
 8015ef4:	f008 fb20 	bl	801e538 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d906      	bls.n	8015f10 <tcp_receive+0x58c>
 8015f02:	4b1c      	ldr	r3, [pc, #112]	@ (8015f74 <tcp_receive+0x5f0>)
 8015f04:	f240 5295 	movw	r2, #1429	@ 0x595
 8015f08:	491d      	ldr	r1, [pc, #116]	@ (8015f80 <tcp_receive+0x5fc>)
 8015f0a:	481c      	ldr	r0, [pc, #112]	@ (8015f7c <tcp_receive+0x5f8>)
 8015f0c:	f008 fb14 	bl	801e538 <iprintf>
      off = (u16_t)off32;
 8015f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015f16:	4b16      	ldr	r3, [pc, #88]	@ (8015f70 <tcp_receive+0x5ec>)
 8015f18:	685b      	ldr	r3, [r3, #4]
 8015f1a:	891b      	ldrh	r3, [r3, #8]
 8015f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d906      	bls.n	8015f32 <tcp_receive+0x5ae>
 8015f24:	4b13      	ldr	r3, [pc, #76]	@ (8015f74 <tcp_receive+0x5f0>)
 8015f26:	f240 5297 	movw	r2, #1431	@ 0x597
 8015f2a:	4916      	ldr	r1, [pc, #88]	@ (8015f84 <tcp_receive+0x600>)
 8015f2c:	4813      	ldr	r0, [pc, #76]	@ (8015f7c <tcp_receive+0x5f8>)
 8015f2e:	f008 fb03 	bl	801e538 <iprintf>
      inseg.len -= off;
 8015f32:	4b0f      	ldr	r3, [pc, #60]	@ (8015f70 <tcp_receive+0x5ec>)
 8015f34:	891a      	ldrh	r2, [r3, #8]
 8015f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f3a:	1ad3      	subs	r3, r2, r3
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8015f70 <tcp_receive+0x5ec>)
 8015f40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015f42:	4b0b      	ldr	r3, [pc, #44]	@ (8015f70 <tcp_receive+0x5ec>)
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	891a      	ldrh	r2, [r3, #8]
 8015f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f4c:	1ad3      	subs	r3, r2, r3
 8015f4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015f50:	e02a      	b.n	8015fa8 <tcp_receive+0x624>
 8015f52:	bf00      	nop
 8015f54:	080236c4 	.word	0x080236c4
 8015f58:	080236cc 	.word	0x080236cc
 8015f5c:	20017798 	.word	0x20017798
 8015f60:	20017794 	.word	0x20017794
 8015f64:	20017758 	.word	0x20017758
 8015f68:	2001779a 	.word	0x2001779a
 8015f6c:	20017790 	.word	0x20017790
 8015f70:	20017770 	.word	0x20017770
 8015f74:	0802335c 	.word	0x0802335c
 8015f78:	080236d4 	.word	0x080236d4
 8015f7c:	080233a8 	.word	0x080233a8
 8015f80:	080236e4 	.word	0x080236e4
 8015f84:	080236f4 	.word	0x080236f4
        off -= p->len;
 8015f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f8a:	895b      	ldrh	r3, [r3, #10]
 8015f8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f90:	1ad3      	subs	r3, r2, r3
 8015f92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015f9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015faa:	895b      	ldrh	r3, [r3, #10]
 8015fac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d8e9      	bhi.n	8015f88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015fb8:	4619      	mov	r1, r3
 8015fba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015fbc:	f7fc fa04 	bl	80123c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fc4:	4a90      	ldr	r2, [pc, #576]	@ (8016208 <tcp_receive+0x884>)
 8015fc6:	6013      	str	r3, [r2, #0]
 8015fc8:	4b90      	ldr	r3, [pc, #576]	@ (801620c <tcp_receive+0x888>)
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8016208 <tcp_receive+0x884>)
 8015fce:	6812      	ldr	r2, [r2, #0]
 8015fd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015fd2:	e00d      	b.n	8015ff0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8016208 <tcp_receive+0x884>)
 8015fd6:	681a      	ldr	r2, [r3, #0]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fdc:	1ad3      	subs	r3, r2, r3
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	da06      	bge.n	8015ff0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	8b5b      	ldrh	r3, [r3, #26]
 8015fe6:	f043 0302 	orr.w	r3, r3, #2
 8015fea:	b29a      	uxth	r2, r3
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ff0:	4b85      	ldr	r3, [pc, #532]	@ (8016208 <tcp_receive+0x884>)
 8015ff2:	681a      	ldr	r2, [r3, #0]
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ff8:	1ad3      	subs	r3, r2, r3
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	f2c0 8427 	blt.w	801684e <tcp_receive+0xeca>
 8016000:	4b81      	ldr	r3, [pc, #516]	@ (8016208 <tcp_receive+0x884>)
 8016002:	681a      	ldr	r2, [r3, #0]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016008:	6879      	ldr	r1, [r7, #4]
 801600a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801600c:	440b      	add	r3, r1
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	3301      	adds	r3, #1
 8016012:	2b00      	cmp	r3, #0
 8016014:	f300 841b 	bgt.w	801684e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801601c:	4b7a      	ldr	r3, [pc, #488]	@ (8016208 <tcp_receive+0x884>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	429a      	cmp	r2, r3
 8016022:	f040 8298 	bne.w	8016556 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016026:	4b79      	ldr	r3, [pc, #484]	@ (801620c <tcp_receive+0x888>)
 8016028:	891c      	ldrh	r4, [r3, #8]
 801602a:	4b78      	ldr	r3, [pc, #480]	@ (801620c <tcp_receive+0x888>)
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	899b      	ldrh	r3, [r3, #12]
 8016030:	b29b      	uxth	r3, r3
 8016032:	4618      	mov	r0, r3
 8016034:	f7fa fb62 	bl	80106fc <lwip_htons>
 8016038:	4603      	mov	r3, r0
 801603a:	b2db      	uxtb	r3, r3
 801603c:	f003 0303 	and.w	r3, r3, #3
 8016040:	2b00      	cmp	r3, #0
 8016042:	d001      	beq.n	8016048 <tcp_receive+0x6c4>
 8016044:	2301      	movs	r3, #1
 8016046:	e000      	b.n	801604a <tcp_receive+0x6c6>
 8016048:	2300      	movs	r3, #0
 801604a:	4423      	add	r3, r4
 801604c:	b29a      	uxth	r2, r3
 801604e:	4b70      	ldr	r3, [pc, #448]	@ (8016210 <tcp_receive+0x88c>)
 8016050:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016056:	4b6e      	ldr	r3, [pc, #440]	@ (8016210 <tcp_receive+0x88c>)
 8016058:	881b      	ldrh	r3, [r3, #0]
 801605a:	429a      	cmp	r2, r3
 801605c:	d274      	bcs.n	8016148 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801605e:	4b6b      	ldr	r3, [pc, #428]	@ (801620c <tcp_receive+0x888>)
 8016060:	68db      	ldr	r3, [r3, #12]
 8016062:	899b      	ldrh	r3, [r3, #12]
 8016064:	b29b      	uxth	r3, r3
 8016066:	4618      	mov	r0, r3
 8016068:	f7fa fb48 	bl	80106fc <lwip_htons>
 801606c:	4603      	mov	r3, r0
 801606e:	b2db      	uxtb	r3, r3
 8016070:	f003 0301 	and.w	r3, r3, #1
 8016074:	2b00      	cmp	r3, #0
 8016076:	d01e      	beq.n	80160b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016078:	4b64      	ldr	r3, [pc, #400]	@ (801620c <tcp_receive+0x888>)
 801607a:	68db      	ldr	r3, [r3, #12]
 801607c:	899b      	ldrh	r3, [r3, #12]
 801607e:	b29b      	uxth	r3, r3
 8016080:	b21b      	sxth	r3, r3
 8016082:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016086:	b21c      	sxth	r4, r3
 8016088:	4b60      	ldr	r3, [pc, #384]	@ (801620c <tcp_receive+0x888>)
 801608a:	68db      	ldr	r3, [r3, #12]
 801608c:	899b      	ldrh	r3, [r3, #12]
 801608e:	b29b      	uxth	r3, r3
 8016090:	4618      	mov	r0, r3
 8016092:	f7fa fb33 	bl	80106fc <lwip_htons>
 8016096:	4603      	mov	r3, r0
 8016098:	b2db      	uxtb	r3, r3
 801609a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801609e:	b29b      	uxth	r3, r3
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fa fb2b 	bl	80106fc <lwip_htons>
 80160a6:	4603      	mov	r3, r0
 80160a8:	b21b      	sxth	r3, r3
 80160aa:	4323      	orrs	r3, r4
 80160ac:	b21a      	sxth	r2, r3
 80160ae:	4b57      	ldr	r3, [pc, #348]	@ (801620c <tcp_receive+0x888>)
 80160b0:	68db      	ldr	r3, [r3, #12]
 80160b2:	b292      	uxth	r2, r2
 80160b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80160ba:	4b54      	ldr	r3, [pc, #336]	@ (801620c <tcp_receive+0x888>)
 80160bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80160be:	4b53      	ldr	r3, [pc, #332]	@ (801620c <tcp_receive+0x888>)
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	899b      	ldrh	r3, [r3, #12]
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fa fb18 	bl	80106fc <lwip_htons>
 80160cc:	4603      	mov	r3, r0
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	f003 0302 	and.w	r3, r3, #2
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d005      	beq.n	80160e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80160d8:	4b4c      	ldr	r3, [pc, #304]	@ (801620c <tcp_receive+0x888>)
 80160da:	891b      	ldrh	r3, [r3, #8]
 80160dc:	3b01      	subs	r3, #1
 80160de:	b29a      	uxth	r2, r3
 80160e0:	4b4a      	ldr	r3, [pc, #296]	@ (801620c <tcp_receive+0x888>)
 80160e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80160e4:	4b49      	ldr	r3, [pc, #292]	@ (801620c <tcp_receive+0x888>)
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	4a48      	ldr	r2, [pc, #288]	@ (801620c <tcp_receive+0x888>)
 80160ea:	8912      	ldrh	r2, [r2, #8]
 80160ec:	4611      	mov	r1, r2
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fc f86a 	bl	80121c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80160f4:	4b45      	ldr	r3, [pc, #276]	@ (801620c <tcp_receive+0x888>)
 80160f6:	891c      	ldrh	r4, [r3, #8]
 80160f8:	4b44      	ldr	r3, [pc, #272]	@ (801620c <tcp_receive+0x888>)
 80160fa:	68db      	ldr	r3, [r3, #12]
 80160fc:	899b      	ldrh	r3, [r3, #12]
 80160fe:	b29b      	uxth	r3, r3
 8016100:	4618      	mov	r0, r3
 8016102:	f7fa fafb 	bl	80106fc <lwip_htons>
 8016106:	4603      	mov	r3, r0
 8016108:	b2db      	uxtb	r3, r3
 801610a:	f003 0303 	and.w	r3, r3, #3
 801610e:	2b00      	cmp	r3, #0
 8016110:	d001      	beq.n	8016116 <tcp_receive+0x792>
 8016112:	2301      	movs	r3, #1
 8016114:	e000      	b.n	8016118 <tcp_receive+0x794>
 8016116:	2300      	movs	r3, #0
 8016118:	4423      	add	r3, r4
 801611a:	b29a      	uxth	r2, r3
 801611c:	4b3c      	ldr	r3, [pc, #240]	@ (8016210 <tcp_receive+0x88c>)
 801611e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016120:	4b3b      	ldr	r3, [pc, #236]	@ (8016210 <tcp_receive+0x88c>)
 8016122:	881b      	ldrh	r3, [r3, #0]
 8016124:	461a      	mov	r2, r3
 8016126:	4b38      	ldr	r3, [pc, #224]	@ (8016208 <tcp_receive+0x884>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	441a      	add	r2, r3
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016130:	6879      	ldr	r1, [r7, #4]
 8016132:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016134:	440b      	add	r3, r1
 8016136:	429a      	cmp	r2, r3
 8016138:	d006      	beq.n	8016148 <tcp_receive+0x7c4>
 801613a:	4b36      	ldr	r3, [pc, #216]	@ (8016214 <tcp_receive+0x890>)
 801613c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016140:	4935      	ldr	r1, [pc, #212]	@ (8016218 <tcp_receive+0x894>)
 8016142:	4836      	ldr	r0, [pc, #216]	@ (801621c <tcp_receive+0x898>)
 8016144:	f008 f9f8 	bl	801e538 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801614c:	2b00      	cmp	r3, #0
 801614e:	f000 80e6 	beq.w	801631e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016152:	4b2e      	ldr	r3, [pc, #184]	@ (801620c <tcp_receive+0x888>)
 8016154:	68db      	ldr	r3, [r3, #12]
 8016156:	899b      	ldrh	r3, [r3, #12]
 8016158:	b29b      	uxth	r3, r3
 801615a:	4618      	mov	r0, r3
 801615c:	f7fa face 	bl	80106fc <lwip_htons>
 8016160:	4603      	mov	r3, r0
 8016162:	b2db      	uxtb	r3, r3
 8016164:	f003 0301 	and.w	r3, r3, #1
 8016168:	2b00      	cmp	r3, #0
 801616a:	d010      	beq.n	801618e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801616c:	e00a      	b.n	8016184 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016172:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801617e:	68f8      	ldr	r0, [r7, #12]
 8016180:	f7fd fd93 	bl	8013caa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016188:	2b00      	cmp	r3, #0
 801618a:	d1f0      	bne.n	801616e <tcp_receive+0x7ea>
 801618c:	e0c7      	b.n	801631e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016192:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016194:	e051      	b.n	801623a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	899b      	ldrh	r3, [r3, #12]
 801619c:	b29b      	uxth	r3, r3
 801619e:	4618      	mov	r0, r3
 80161a0:	f7fa faac 	bl	80106fc <lwip_htons>
 80161a4:	4603      	mov	r3, r0
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	f003 0301 	and.w	r3, r3, #1
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d03c      	beq.n	801622a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80161b0:	4b16      	ldr	r3, [pc, #88]	@ (801620c <tcp_receive+0x888>)
 80161b2:	68db      	ldr	r3, [r3, #12]
 80161b4:	899b      	ldrh	r3, [r3, #12]
 80161b6:	b29b      	uxth	r3, r3
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7fa fa9f 	bl	80106fc <lwip_htons>
 80161be:	4603      	mov	r3, r0
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d12f      	bne.n	801622a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80161ca:	4b10      	ldr	r3, [pc, #64]	@ (801620c <tcp_receive+0x888>)
 80161cc:	68db      	ldr	r3, [r3, #12]
 80161ce:	899b      	ldrh	r3, [r3, #12]
 80161d0:	b29c      	uxth	r4, r3
 80161d2:	2001      	movs	r0, #1
 80161d4:	f7fa fa92 	bl	80106fc <lwip_htons>
 80161d8:	4603      	mov	r3, r0
 80161da:	461a      	mov	r2, r3
 80161dc:	4b0b      	ldr	r3, [pc, #44]	@ (801620c <tcp_receive+0x888>)
 80161de:	68db      	ldr	r3, [r3, #12]
 80161e0:	4322      	orrs	r2, r4
 80161e2:	b292      	uxth	r2, r2
 80161e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80161e6:	4b09      	ldr	r3, [pc, #36]	@ (801620c <tcp_receive+0x888>)
 80161e8:	891c      	ldrh	r4, [r3, #8]
 80161ea:	4b08      	ldr	r3, [pc, #32]	@ (801620c <tcp_receive+0x888>)
 80161ec:	68db      	ldr	r3, [r3, #12]
 80161ee:	899b      	ldrh	r3, [r3, #12]
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7fa fa82 	bl	80106fc <lwip_htons>
 80161f8:	4603      	mov	r3, r0
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	f003 0303 	and.w	r3, r3, #3
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00d      	beq.n	8016220 <tcp_receive+0x89c>
 8016204:	2301      	movs	r3, #1
 8016206:	e00c      	b.n	8016222 <tcp_receive+0x89e>
 8016208:	20017790 	.word	0x20017790
 801620c:	20017770 	.word	0x20017770
 8016210:	2001779a 	.word	0x2001779a
 8016214:	0802335c 	.word	0x0802335c
 8016218:	08023704 	.word	0x08023704
 801621c:	080233a8 	.word	0x080233a8
 8016220:	2300      	movs	r3, #0
 8016222:	4423      	add	r3, r4
 8016224:	b29a      	uxth	r2, r3
 8016226:	4b98      	ldr	r3, [pc, #608]	@ (8016488 <tcp_receive+0xb04>)
 8016228:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801622c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801622e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016234:	6938      	ldr	r0, [r7, #16]
 8016236:	f7fd fd38 	bl	8013caa <tcp_seg_free>
            while (next &&
 801623a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00e      	beq.n	801625e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016240:	4b91      	ldr	r3, [pc, #580]	@ (8016488 <tcp_receive+0xb04>)
 8016242:	881b      	ldrh	r3, [r3, #0]
 8016244:	461a      	mov	r2, r3
 8016246:	4b91      	ldr	r3, [pc, #580]	@ (801648c <tcp_receive+0xb08>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	441a      	add	r2, r3
 801624c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801624e:	68db      	ldr	r3, [r3, #12]
 8016250:	685b      	ldr	r3, [r3, #4]
 8016252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016254:	8909      	ldrh	r1, [r1, #8]
 8016256:	440b      	add	r3, r1
 8016258:	1ad3      	subs	r3, r2, r3
            while (next &&
 801625a:	2b00      	cmp	r3, #0
 801625c:	da9b      	bge.n	8016196 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801625e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016260:	2b00      	cmp	r3, #0
 8016262:	d059      	beq.n	8016318 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016264:	4b88      	ldr	r3, [pc, #544]	@ (8016488 <tcp_receive+0xb04>)
 8016266:	881b      	ldrh	r3, [r3, #0]
 8016268:	461a      	mov	r2, r3
 801626a:	4b88      	ldr	r3, [pc, #544]	@ (801648c <tcp_receive+0xb08>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	441a      	add	r2, r3
 8016270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016278:	2b00      	cmp	r3, #0
 801627a:	dd4d      	ble.n	8016318 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	b29a      	uxth	r2, r3
 8016284:	4b81      	ldr	r3, [pc, #516]	@ (801648c <tcp_receive+0xb08>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	b29b      	uxth	r3, r3
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	b29a      	uxth	r2, r3
 801628e:	4b80      	ldr	r3, [pc, #512]	@ (8016490 <tcp_receive+0xb0c>)
 8016290:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016292:	4b7f      	ldr	r3, [pc, #508]	@ (8016490 <tcp_receive+0xb0c>)
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	899b      	ldrh	r3, [r3, #12]
 8016298:	b29b      	uxth	r3, r3
 801629a:	4618      	mov	r0, r3
 801629c:	f7fa fa2e 	bl	80106fc <lwip_htons>
 80162a0:	4603      	mov	r3, r0
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	f003 0302 	and.w	r3, r3, #2
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d005      	beq.n	80162b8 <tcp_receive+0x934>
                inseg.len -= 1;
 80162ac:	4b78      	ldr	r3, [pc, #480]	@ (8016490 <tcp_receive+0xb0c>)
 80162ae:	891b      	ldrh	r3, [r3, #8]
 80162b0:	3b01      	subs	r3, #1
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	4b76      	ldr	r3, [pc, #472]	@ (8016490 <tcp_receive+0xb0c>)
 80162b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80162b8:	4b75      	ldr	r3, [pc, #468]	@ (8016490 <tcp_receive+0xb0c>)
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	4a74      	ldr	r2, [pc, #464]	@ (8016490 <tcp_receive+0xb0c>)
 80162be:	8912      	ldrh	r2, [r2, #8]
 80162c0:	4611      	mov	r1, r2
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fb ff80 	bl	80121c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80162c8:	4b71      	ldr	r3, [pc, #452]	@ (8016490 <tcp_receive+0xb0c>)
 80162ca:	891c      	ldrh	r4, [r3, #8]
 80162cc:	4b70      	ldr	r3, [pc, #448]	@ (8016490 <tcp_receive+0xb0c>)
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	899b      	ldrh	r3, [r3, #12]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7fa fa11 	bl	80106fc <lwip_htons>
 80162da:	4603      	mov	r3, r0
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	f003 0303 	and.w	r3, r3, #3
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <tcp_receive+0x966>
 80162e6:	2301      	movs	r3, #1
 80162e8:	e000      	b.n	80162ec <tcp_receive+0x968>
 80162ea:	2300      	movs	r3, #0
 80162ec:	4423      	add	r3, r4
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	4b65      	ldr	r3, [pc, #404]	@ (8016488 <tcp_receive+0xb04>)
 80162f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80162f4:	4b64      	ldr	r3, [pc, #400]	@ (8016488 <tcp_receive+0xb04>)
 80162f6:	881b      	ldrh	r3, [r3, #0]
 80162f8:	461a      	mov	r2, r3
 80162fa:	4b64      	ldr	r3, [pc, #400]	@ (801648c <tcp_receive+0xb08>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	441a      	add	r2, r3
 8016300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	429a      	cmp	r2, r3
 8016308:	d006      	beq.n	8016318 <tcp_receive+0x994>
 801630a:	4b62      	ldr	r3, [pc, #392]	@ (8016494 <tcp_receive+0xb10>)
 801630c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016310:	4961      	ldr	r1, [pc, #388]	@ (8016498 <tcp_receive+0xb14>)
 8016312:	4862      	ldr	r0, [pc, #392]	@ (801649c <tcp_receive+0xb18>)
 8016314:	f008 f910 	bl	801e538 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801631c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801631e:	4b5a      	ldr	r3, [pc, #360]	@ (8016488 <tcp_receive+0xb04>)
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	461a      	mov	r2, r3
 8016324:	4b59      	ldr	r3, [pc, #356]	@ (801648c <tcp_receive+0xb08>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	441a      	add	r2, r3
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016332:	4b55      	ldr	r3, [pc, #340]	@ (8016488 <tcp_receive+0xb04>)
 8016334:	881b      	ldrh	r3, [r3, #0]
 8016336:	429a      	cmp	r2, r3
 8016338:	d206      	bcs.n	8016348 <tcp_receive+0x9c4>
 801633a:	4b56      	ldr	r3, [pc, #344]	@ (8016494 <tcp_receive+0xb10>)
 801633c:	f240 6207 	movw	r2, #1543	@ 0x607
 8016340:	4957      	ldr	r1, [pc, #348]	@ (80164a0 <tcp_receive+0xb1c>)
 8016342:	4856      	ldr	r0, [pc, #344]	@ (801649c <tcp_receive+0xb18>)
 8016344:	f008 f8f8 	bl	801e538 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801634c:	4b4e      	ldr	r3, [pc, #312]	@ (8016488 <tcp_receive+0xb04>)
 801634e:	881b      	ldrh	r3, [r3, #0]
 8016350:	1ad3      	subs	r3, r2, r3
 8016352:	b29a      	uxth	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7fc ffc5 	bl	80132e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801635e:	4b4c      	ldr	r3, [pc, #304]	@ (8016490 <tcp_receive+0xb0c>)
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	891b      	ldrh	r3, [r3, #8]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d006      	beq.n	8016376 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016368:	4b49      	ldr	r3, [pc, #292]	@ (8016490 <tcp_receive+0xb0c>)
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	4a4d      	ldr	r2, [pc, #308]	@ (80164a4 <tcp_receive+0xb20>)
 801636e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016370:	4b47      	ldr	r3, [pc, #284]	@ (8016490 <tcp_receive+0xb0c>)
 8016372:	2200      	movs	r2, #0
 8016374:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016376:	4b46      	ldr	r3, [pc, #280]	@ (8016490 <tcp_receive+0xb0c>)
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	899b      	ldrh	r3, [r3, #12]
 801637c:	b29b      	uxth	r3, r3
 801637e:	4618      	mov	r0, r3
 8016380:	f7fa f9bc 	bl	80106fc <lwip_htons>
 8016384:	4603      	mov	r3, r0
 8016386:	b2db      	uxtb	r3, r3
 8016388:	f003 0301 	and.w	r3, r3, #1
 801638c:	2b00      	cmp	r3, #0
 801638e:	f000 80b8 	beq.w	8016502 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016392:	4b45      	ldr	r3, [pc, #276]	@ (80164a8 <tcp_receive+0xb24>)
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	f043 0320 	orr.w	r3, r3, #32
 801639a:	b2da      	uxtb	r2, r3
 801639c:	4b42      	ldr	r3, [pc, #264]	@ (80164a8 <tcp_receive+0xb24>)
 801639e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80163a0:	e0af      	b.n	8016502 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	4a36      	ldr	r2, [pc, #216]	@ (801648c <tcp_receive+0xb08>)
 80163b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	891b      	ldrh	r3, [r3, #8]
 80163b8:	461c      	mov	r4, r3
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	899b      	ldrh	r3, [r3, #12]
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fa f99a 	bl	80106fc <lwip_htons>
 80163c8:	4603      	mov	r3, r0
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	f003 0303 	and.w	r3, r3, #3
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d001      	beq.n	80163d8 <tcp_receive+0xa54>
 80163d4:	2301      	movs	r3, #1
 80163d6:	e000      	b.n	80163da <tcp_receive+0xa56>
 80163d8:	2300      	movs	r3, #0
 80163da:	191a      	adds	r2, r3, r4
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163e0:	441a      	add	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163ea:	461c      	mov	r4, r3
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	891b      	ldrh	r3, [r3, #8]
 80163f0:	461d      	mov	r5, r3
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	68db      	ldr	r3, [r3, #12]
 80163f6:	899b      	ldrh	r3, [r3, #12]
 80163f8:	b29b      	uxth	r3, r3
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7fa f97e 	bl	80106fc <lwip_htons>
 8016400:	4603      	mov	r3, r0
 8016402:	b2db      	uxtb	r3, r3
 8016404:	f003 0303 	and.w	r3, r3, #3
 8016408:	2b00      	cmp	r3, #0
 801640a:	d001      	beq.n	8016410 <tcp_receive+0xa8c>
 801640c:	2301      	movs	r3, #1
 801640e:	e000      	b.n	8016412 <tcp_receive+0xa8e>
 8016410:	2300      	movs	r3, #0
 8016412:	442b      	add	r3, r5
 8016414:	429c      	cmp	r4, r3
 8016416:	d206      	bcs.n	8016426 <tcp_receive+0xaa2>
 8016418:	4b1e      	ldr	r3, [pc, #120]	@ (8016494 <tcp_receive+0xb10>)
 801641a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801641e:	4923      	ldr	r1, [pc, #140]	@ (80164ac <tcp_receive+0xb28>)
 8016420:	481e      	ldr	r0, [pc, #120]	@ (801649c <tcp_receive+0xb18>)
 8016422:	f008 f889 	bl	801e538 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	891b      	ldrh	r3, [r3, #8]
 801642a:	461c      	mov	r4, r3
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	899b      	ldrh	r3, [r3, #12]
 8016432:	b29b      	uxth	r3, r3
 8016434:	4618      	mov	r0, r3
 8016436:	f7fa f961 	bl	80106fc <lwip_htons>
 801643a:	4603      	mov	r3, r0
 801643c:	b2db      	uxtb	r3, r3
 801643e:	f003 0303 	and.w	r3, r3, #3
 8016442:	2b00      	cmp	r3, #0
 8016444:	d001      	beq.n	801644a <tcp_receive+0xac6>
 8016446:	2301      	movs	r3, #1
 8016448:	e000      	b.n	801644c <tcp_receive+0xac8>
 801644a:	2300      	movs	r3, #0
 801644c:	1919      	adds	r1, r3, r4
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016452:	b28b      	uxth	r3, r1
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	b29a      	uxth	r2, r3
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f7fc ff43 	bl	80132e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	891b      	ldrh	r3, [r3, #8]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d028      	beq.n	80164be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801646c:	4b0d      	ldr	r3, [pc, #52]	@ (80164a4 <tcp_receive+0xb20>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d01d      	beq.n	80164b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016474:	4b0b      	ldr	r3, [pc, #44]	@ (80164a4 <tcp_receive+0xb20>)
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	4619      	mov	r1, r3
 801647e:	4610      	mov	r0, r2
 8016480:	f7fc f8f6 	bl	8012670 <pbuf_cat>
 8016484:	e018      	b.n	80164b8 <tcp_receive+0xb34>
 8016486:	bf00      	nop
 8016488:	2001779a 	.word	0x2001779a
 801648c:	20017790 	.word	0x20017790
 8016490:	20017770 	.word	0x20017770
 8016494:	0802335c 	.word	0x0802335c
 8016498:	0802373c 	.word	0x0802373c
 801649c:	080233a8 	.word	0x080233a8
 80164a0:	08023778 	.word	0x08023778
 80164a4:	200177a0 	.word	0x200177a0
 80164a8:	2001779d 	.word	0x2001779d
 80164ac:	08023798 	.word	0x08023798
            } else {
              recv_data = cseg->p;
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	685b      	ldr	r3, [r3, #4]
 80164b4:	4a70      	ldr	r2, [pc, #448]	@ (8016678 <tcp_receive+0xcf4>)
 80164b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	2200      	movs	r2, #0
 80164bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	68db      	ldr	r3, [r3, #12]
 80164c2:	899b      	ldrh	r3, [r3, #12]
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fa f918 	bl	80106fc <lwip_htons>
 80164cc:	4603      	mov	r3, r0
 80164ce:	b2db      	uxtb	r3, r3
 80164d0:	f003 0301 	and.w	r3, r3, #1
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d00d      	beq.n	80164f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80164d8:	4b68      	ldr	r3, [pc, #416]	@ (801667c <tcp_receive+0xcf8>)
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	f043 0320 	orr.w	r3, r3, #32
 80164e0:	b2da      	uxtb	r2, r3
 80164e2:	4b66      	ldr	r3, [pc, #408]	@ (801667c <tcp_receive+0xcf8>)
 80164e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	7d1b      	ldrb	r3, [r3, #20]
 80164ea:	2b04      	cmp	r3, #4
 80164ec:	d102      	bne.n	80164f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2207      	movs	r2, #7
 80164f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80164fc:	68b8      	ldr	r0, [r7, #8]
 80164fe:	f7fd fbd4 	bl	8013caa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016506:	2b00      	cmp	r3, #0
 8016508:	d008      	beq.n	801651c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801650e:	68db      	ldr	r3, [r3, #12]
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8016516:	429a      	cmp	r2, r3
 8016518:	f43f af43 	beq.w	80163a2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	8b5b      	ldrh	r3, [r3, #26]
 8016520:	f003 0301 	and.w	r3, r3, #1
 8016524:	2b00      	cmp	r3, #0
 8016526:	d00e      	beq.n	8016546 <tcp_receive+0xbc2>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	8b5b      	ldrh	r3, [r3, #26]
 801652c:	f023 0301 	bic.w	r3, r3, #1
 8016530:	b29a      	uxth	r2, r3
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	835a      	strh	r2, [r3, #26]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	8b5b      	ldrh	r3, [r3, #26]
 801653a:	f043 0302 	orr.w	r3, r3, #2
 801653e:	b29a      	uxth	r2, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016544:	e187      	b.n	8016856 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	8b5b      	ldrh	r3, [r3, #26]
 801654a:	f043 0301 	orr.w	r3, r3, #1
 801654e:	b29a      	uxth	r2, r3
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016554:	e17f      	b.n	8016856 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801655a:	2b00      	cmp	r3, #0
 801655c:	d106      	bne.n	801656c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801655e:	4848      	ldr	r0, [pc, #288]	@ (8016680 <tcp_receive+0xcfc>)
 8016560:	f7fd fbbc 	bl	8013cdc <tcp_seg_copy>
 8016564:	4602      	mov	r2, r0
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	675a      	str	r2, [r3, #116]	@ 0x74
 801656a:	e16c      	b.n	8016846 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801656c:	2300      	movs	r3, #0
 801656e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016576:	e156      	b.n	8016826 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8016578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	685a      	ldr	r2, [r3, #4]
 801657e:	4b41      	ldr	r3, [pc, #260]	@ (8016684 <tcp_receive+0xd00>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	429a      	cmp	r2, r3
 8016584:	d11d      	bne.n	80165c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016586:	4b3e      	ldr	r3, [pc, #248]	@ (8016680 <tcp_receive+0xcfc>)
 8016588:	891a      	ldrh	r2, [r3, #8]
 801658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801658c:	891b      	ldrh	r3, [r3, #8]
 801658e:	429a      	cmp	r2, r3
 8016590:	f240 814e 	bls.w	8016830 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016594:	483a      	ldr	r0, [pc, #232]	@ (8016680 <tcp_receive+0xcfc>)
 8016596:	f7fd fba1 	bl	8013cdc <tcp_seg_copy>
 801659a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	f000 8148 	beq.w	8016834 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80165a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d003      	beq.n	80165b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80165aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165ac:	697a      	ldr	r2, [r7, #20]
 80165ae:	601a      	str	r2, [r3, #0]
 80165b0:	e002      	b.n	80165b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	697a      	ldr	r2, [r7, #20]
 80165b6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80165b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80165ba:	6978      	ldr	r0, [r7, #20]
 80165bc:	f7ff f8de 	bl	801577c <tcp_oos_insert_segment>
                }
                break;
 80165c0:	e138      	b.n	8016834 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80165c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d117      	bne.n	80165f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80165c8:	4b2e      	ldr	r3, [pc, #184]	@ (8016684 <tcp_receive+0xd00>)
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	1ad3      	subs	r3, r2, r3
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	da57      	bge.n	8016688 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80165d8:	4829      	ldr	r0, [pc, #164]	@ (8016680 <tcp_receive+0xcfc>)
 80165da:	f7fd fb7f 	bl	8013cdc <tcp_seg_copy>
 80165de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	f000 8128 	beq.w	8016838 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	69ba      	ldr	r2, [r7, #24]
 80165ec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80165ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80165f0:	69b8      	ldr	r0, [r7, #24]
 80165f2:	f7ff f8c3 	bl	801577c <tcp_oos_insert_segment>
                  }
                  break;
 80165f6:	e11f      	b.n	8016838 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80165f8:	4b22      	ldr	r3, [pc, #136]	@ (8016684 <tcp_receive+0xd00>)
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	1ad3      	subs	r3, r2, r3
 8016604:	3b01      	subs	r3, #1
 8016606:	2b00      	cmp	r3, #0
 8016608:	db3e      	blt.n	8016688 <tcp_receive+0xd04>
 801660a:	4b1e      	ldr	r3, [pc, #120]	@ (8016684 <tcp_receive+0xd00>)
 801660c:	681a      	ldr	r2, [r3, #0]
 801660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016610:	68db      	ldr	r3, [r3, #12]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	1ad3      	subs	r3, r2, r3
 8016616:	3301      	adds	r3, #1
 8016618:	2b00      	cmp	r3, #0
 801661a:	dc35      	bgt.n	8016688 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801661c:	4818      	ldr	r0, [pc, #96]	@ (8016680 <tcp_receive+0xcfc>)
 801661e:	f7fd fb5d 	bl	8013cdc <tcp_seg_copy>
 8016622:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016624:	69fb      	ldr	r3, [r7, #28]
 8016626:	2b00      	cmp	r3, #0
 8016628:	f000 8108 	beq.w	801683c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801662c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801662e:	68db      	ldr	r3, [r3, #12]
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016634:	8912      	ldrh	r2, [r2, #8]
 8016636:	441a      	add	r2, r3
 8016638:	4b12      	ldr	r3, [pc, #72]	@ (8016684 <tcp_receive+0xd00>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	1ad3      	subs	r3, r2, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	dd12      	ble.n	8016668 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016642:	4b10      	ldr	r3, [pc, #64]	@ (8016684 <tcp_receive+0xd00>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	b29a      	uxth	r2, r3
 8016648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	b29b      	uxth	r3, r3
 8016650:	1ad3      	subs	r3, r2, r3
 8016652:	b29a      	uxth	r2, r3
 8016654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016656:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801665e:	891b      	ldrh	r3, [r3, #8]
 8016660:	4619      	mov	r1, r3
 8016662:	4610      	mov	r0, r2
 8016664:	f7fb fdb0 	bl	80121c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801666a:	69fa      	ldr	r2, [r7, #28]
 801666c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801666e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016670:	69f8      	ldr	r0, [r7, #28]
 8016672:	f7ff f883 	bl	801577c <tcp_oos_insert_segment>
                  }
                  break;
 8016676:	e0e1      	b.n	801683c <tcp_receive+0xeb8>
 8016678:	200177a0 	.word	0x200177a0
 801667c:	2001779d 	.word	0x2001779d
 8016680:	20017770 	.word	0x20017770
 8016684:	20017790 	.word	0x20017790
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	f040 80c5 	bne.w	8016820 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016696:	4b7f      	ldr	r3, [pc, #508]	@ (8016894 <tcp_receive+0xf10>)
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	685b      	ldr	r3, [r3, #4]
 80166a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	f340 80bc 	ble.w	8016820 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80166a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166aa:	68db      	ldr	r3, [r3, #12]
 80166ac:	899b      	ldrh	r3, [r3, #12]
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7fa f823 	bl	80106fc <lwip_htons>
 80166b6:	4603      	mov	r3, r0
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	f003 0301 	and.w	r3, r3, #1
 80166be:	2b00      	cmp	r3, #0
 80166c0:	f040 80be 	bne.w	8016840 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80166c4:	4874      	ldr	r0, [pc, #464]	@ (8016898 <tcp_receive+0xf14>)
 80166c6:	f7fd fb09 	bl	8013cdc <tcp_seg_copy>
 80166ca:	4602      	mov	r2, r0
 80166cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80166d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f000 80b5 	beq.w	8016844 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80166da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80166e2:	8912      	ldrh	r2, [r2, #8]
 80166e4:	441a      	add	r2, r3
 80166e6:	4b6b      	ldr	r3, [pc, #428]	@ (8016894 <tcp_receive+0xf10>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	1ad3      	subs	r3, r2, r3
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	dd12      	ble.n	8016716 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80166f0:	4b68      	ldr	r3, [pc, #416]	@ (8016894 <tcp_receive+0xf10>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	b29b      	uxth	r3, r3
 80166fe:	1ad3      	subs	r3, r2, r3
 8016700:	b29a      	uxth	r2, r3
 8016702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016704:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016708:	685a      	ldr	r2, [r3, #4]
 801670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801670c:	891b      	ldrh	r3, [r3, #8]
 801670e:	4619      	mov	r1, r3
 8016710:	4610      	mov	r0, r2
 8016712:	f7fb fd59 	bl	80121c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016716:	4b61      	ldr	r3, [pc, #388]	@ (801689c <tcp_receive+0xf18>)
 8016718:	881b      	ldrh	r3, [r3, #0]
 801671a:	461a      	mov	r2, r3
 801671c:	4b5d      	ldr	r3, [pc, #372]	@ (8016894 <tcp_receive+0xf10>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	441a      	add	r2, r3
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016726:	6879      	ldr	r1, [r7, #4]
 8016728:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801672a:	440b      	add	r3, r1
 801672c:	1ad3      	subs	r3, r2, r3
 801672e:	2b00      	cmp	r3, #0
 8016730:	f340 8088 	ble.w	8016844 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	68db      	ldr	r3, [r3, #12]
 801673a:	899b      	ldrh	r3, [r3, #12]
 801673c:	b29b      	uxth	r3, r3
 801673e:	4618      	mov	r0, r3
 8016740:	f7f9 ffdc 	bl	80106fc <lwip_htons>
 8016744:	4603      	mov	r3, r0
 8016746:	b2db      	uxtb	r3, r3
 8016748:	f003 0301 	and.w	r3, r3, #1
 801674c:	2b00      	cmp	r3, #0
 801674e:	d021      	beq.n	8016794 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	899b      	ldrh	r3, [r3, #12]
 8016758:	b29b      	uxth	r3, r3
 801675a:	b21b      	sxth	r3, r3
 801675c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016760:	b21c      	sxth	r4, r3
 8016762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	68db      	ldr	r3, [r3, #12]
 8016768:	899b      	ldrh	r3, [r3, #12]
 801676a:	b29b      	uxth	r3, r3
 801676c:	4618      	mov	r0, r3
 801676e:	f7f9 ffc5 	bl	80106fc <lwip_htons>
 8016772:	4603      	mov	r3, r0
 8016774:	b2db      	uxtb	r3, r3
 8016776:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801677a:	b29b      	uxth	r3, r3
 801677c:	4618      	mov	r0, r3
 801677e:	f7f9 ffbd 	bl	80106fc <lwip_htons>
 8016782:	4603      	mov	r3, r0
 8016784:	b21b      	sxth	r3, r3
 8016786:	4323      	orrs	r3, r4
 8016788:	b21a      	sxth	r2, r3
 801678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	b292      	uxth	r2, r2
 8016792:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801679e:	4413      	add	r3, r2
 80167a0:	b299      	uxth	r1, r3
 80167a2:	4b3c      	ldr	r3, [pc, #240]	@ (8016894 <tcp_receive+0xf10>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	b29a      	uxth	r2, r3
 80167a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	1a8a      	subs	r2, r1, r2
 80167ae:	b292      	uxth	r2, r2
 80167b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80167b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	685a      	ldr	r2, [r3, #4]
 80167b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	891b      	ldrh	r3, [r3, #8]
 80167be:	4619      	mov	r1, r3
 80167c0:	4610      	mov	r0, r2
 80167c2:	f7fb fd01 	bl	80121c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80167c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	891c      	ldrh	r4, [r3, #8]
 80167cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	899b      	ldrh	r3, [r3, #12]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7f9 ff90 	bl	80106fc <lwip_htons>
 80167dc:	4603      	mov	r3, r0
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	f003 0303 	and.w	r3, r3, #3
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d001      	beq.n	80167ec <tcp_receive+0xe68>
 80167e8:	2301      	movs	r3, #1
 80167ea:	e000      	b.n	80167ee <tcp_receive+0xe6a>
 80167ec:	2300      	movs	r3, #0
 80167ee:	4423      	add	r3, r4
 80167f0:	b29a      	uxth	r2, r3
 80167f2:	4b2a      	ldr	r3, [pc, #168]	@ (801689c <tcp_receive+0xf18>)
 80167f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80167f6:	4b29      	ldr	r3, [pc, #164]	@ (801689c <tcp_receive+0xf18>)
 80167f8:	881b      	ldrh	r3, [r3, #0]
 80167fa:	461a      	mov	r2, r3
 80167fc:	4b25      	ldr	r3, [pc, #148]	@ (8016894 <tcp_receive+0xf10>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	441a      	add	r2, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016806:	6879      	ldr	r1, [r7, #4]
 8016808:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801680a:	440b      	add	r3, r1
 801680c:	429a      	cmp	r2, r3
 801680e:	d019      	beq.n	8016844 <tcp_receive+0xec0>
 8016810:	4b23      	ldr	r3, [pc, #140]	@ (80168a0 <tcp_receive+0xf1c>)
 8016812:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016816:	4923      	ldr	r1, [pc, #140]	@ (80168a4 <tcp_receive+0xf20>)
 8016818:	4823      	ldr	r0, [pc, #140]	@ (80168a8 <tcp_receive+0xf24>)
 801681a:	f007 fe8d 	bl	801e538 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801681e:	e011      	b.n	8016844 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016828:	2b00      	cmp	r3, #0
 801682a:	f47f aea5 	bne.w	8016578 <tcp_receive+0xbf4>
 801682e:	e00a      	b.n	8016846 <tcp_receive+0xec2>
                break;
 8016830:	bf00      	nop
 8016832:	e008      	b.n	8016846 <tcp_receive+0xec2>
                break;
 8016834:	bf00      	nop
 8016836:	e006      	b.n	8016846 <tcp_receive+0xec2>
                  break;
 8016838:	bf00      	nop
 801683a:	e004      	b.n	8016846 <tcp_receive+0xec2>
                  break;
 801683c:	bf00      	nop
 801683e:	e002      	b.n	8016846 <tcp_receive+0xec2>
                  break;
 8016840:	bf00      	nop
 8016842:	e000      	b.n	8016846 <tcp_receive+0xec2>
                break;
 8016844:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f001 fa30 	bl	8017cac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801684c:	e003      	b.n	8016856 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f001 fa2c 	bl	8017cac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016854:	e01a      	b.n	801688c <tcp_receive+0xf08>
 8016856:	e019      	b.n	801688c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016858:	4b0e      	ldr	r3, [pc, #56]	@ (8016894 <tcp_receive+0xf10>)
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	db0a      	blt.n	801687c <tcp_receive+0xef8>
 8016866:	4b0b      	ldr	r3, [pc, #44]	@ (8016894 <tcp_receive+0xf10>)
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801686e:	6879      	ldr	r1, [r7, #4]
 8016870:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016872:	440b      	add	r3, r1
 8016874:	1ad3      	subs	r3, r2, r3
 8016876:	3301      	adds	r3, #1
 8016878:	2b00      	cmp	r3, #0
 801687a:	dd07      	ble.n	801688c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	8b5b      	ldrh	r3, [r3, #26]
 8016880:	f043 0302 	orr.w	r3, r3, #2
 8016884:	b29a      	uxth	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801688a:	e7ff      	b.n	801688c <tcp_receive+0xf08>
 801688c:	bf00      	nop
 801688e:	3750      	adds	r7, #80	@ 0x50
 8016890:	46bd      	mov	sp, r7
 8016892:	bdb0      	pop	{r4, r5, r7, pc}
 8016894:	20017790 	.word	0x20017790
 8016898:	20017770 	.word	0x20017770
 801689c:	2001779a 	.word	0x2001779a
 80168a0:	0802335c 	.word	0x0802335c
 80168a4:	08023704 	.word	0x08023704
 80168a8:	080233a8 	.word	0x080233a8

080168ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80168b2:	4b15      	ldr	r3, [pc, #84]	@ (8016908 <tcp_get_next_optbyte+0x5c>)
 80168b4:	881b      	ldrh	r3, [r3, #0]
 80168b6:	1c5a      	adds	r2, r3, #1
 80168b8:	b291      	uxth	r1, r2
 80168ba:	4a13      	ldr	r2, [pc, #76]	@ (8016908 <tcp_get_next_optbyte+0x5c>)
 80168bc:	8011      	strh	r1, [r2, #0]
 80168be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80168c0:	4b12      	ldr	r3, [pc, #72]	@ (801690c <tcp_get_next_optbyte+0x60>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d004      	beq.n	80168d2 <tcp_get_next_optbyte+0x26>
 80168c8:	4b11      	ldr	r3, [pc, #68]	@ (8016910 <tcp_get_next_optbyte+0x64>)
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	88fa      	ldrh	r2, [r7, #6]
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d208      	bcs.n	80168e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80168d2:	4b10      	ldr	r3, [pc, #64]	@ (8016914 <tcp_get_next_optbyte+0x68>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	3314      	adds	r3, #20
 80168d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80168da:	88fb      	ldrh	r3, [r7, #6]
 80168dc:	683a      	ldr	r2, [r7, #0]
 80168de:	4413      	add	r3, r2
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	e00b      	b.n	80168fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80168e4:	88fb      	ldrh	r3, [r7, #6]
 80168e6:	b2da      	uxtb	r2, r3
 80168e8:	4b09      	ldr	r3, [pc, #36]	@ (8016910 <tcp_get_next_optbyte+0x64>)
 80168ea:	881b      	ldrh	r3, [r3, #0]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	1ad3      	subs	r3, r2, r3
 80168f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80168f2:	4b06      	ldr	r3, [pc, #24]	@ (801690c <tcp_get_next_optbyte+0x60>)
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	797b      	ldrb	r3, [r7, #5]
 80168f8:	4413      	add	r3, r2
 80168fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	370c      	adds	r7, #12
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr
 8016908:	2001778c 	.word	0x2001778c
 801690c:	20017788 	.word	0x20017788
 8016910:	20017786 	.word	0x20017786
 8016914:	20017780 	.word	0x20017780

08016918 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d106      	bne.n	8016934 <tcp_parseopt+0x1c>
 8016926:	4b32      	ldr	r3, [pc, #200]	@ (80169f0 <tcp_parseopt+0xd8>)
 8016928:	f240 727d 	movw	r2, #1917	@ 0x77d
 801692c:	4931      	ldr	r1, [pc, #196]	@ (80169f4 <tcp_parseopt+0xdc>)
 801692e:	4832      	ldr	r0, [pc, #200]	@ (80169f8 <tcp_parseopt+0xe0>)
 8016930:	f007 fe02 	bl	801e538 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016934:	4b31      	ldr	r3, [pc, #196]	@ (80169fc <tcp_parseopt+0xe4>)
 8016936:	881b      	ldrh	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d056      	beq.n	80169ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801693c:	4b30      	ldr	r3, [pc, #192]	@ (8016a00 <tcp_parseopt+0xe8>)
 801693e:	2200      	movs	r2, #0
 8016940:	801a      	strh	r2, [r3, #0]
 8016942:	e046      	b.n	80169d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016944:	f7ff ffb2 	bl	80168ac <tcp_get_next_optbyte>
 8016948:	4603      	mov	r3, r0
 801694a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801694c:	7bfb      	ldrb	r3, [r7, #15]
 801694e:	2b02      	cmp	r3, #2
 8016950:	d006      	beq.n	8016960 <tcp_parseopt+0x48>
 8016952:	2b02      	cmp	r3, #2
 8016954:	dc2a      	bgt.n	80169ac <tcp_parseopt+0x94>
 8016956:	2b00      	cmp	r3, #0
 8016958:	d042      	beq.n	80169e0 <tcp_parseopt+0xc8>
 801695a:	2b01      	cmp	r3, #1
 801695c:	d038      	beq.n	80169d0 <tcp_parseopt+0xb8>
 801695e:	e025      	b.n	80169ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016960:	f7ff ffa4 	bl	80168ac <tcp_get_next_optbyte>
 8016964:	4603      	mov	r3, r0
 8016966:	2b04      	cmp	r3, #4
 8016968:	d13c      	bne.n	80169e4 <tcp_parseopt+0xcc>
 801696a:	4b25      	ldr	r3, [pc, #148]	@ (8016a00 <tcp_parseopt+0xe8>)
 801696c:	881b      	ldrh	r3, [r3, #0]
 801696e:	3301      	adds	r3, #1
 8016970:	4a22      	ldr	r2, [pc, #136]	@ (80169fc <tcp_parseopt+0xe4>)
 8016972:	8812      	ldrh	r2, [r2, #0]
 8016974:	4293      	cmp	r3, r2
 8016976:	da35      	bge.n	80169e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016978:	f7ff ff98 	bl	80168ac <tcp_get_next_optbyte>
 801697c:	4603      	mov	r3, r0
 801697e:	021b      	lsls	r3, r3, #8
 8016980:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016982:	f7ff ff93 	bl	80168ac <tcp_get_next_optbyte>
 8016986:	4603      	mov	r3, r0
 8016988:	461a      	mov	r2, r3
 801698a:	89bb      	ldrh	r3, [r7, #12]
 801698c:	4313      	orrs	r3, r2
 801698e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016990:	89bb      	ldrh	r3, [r7, #12]
 8016992:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016996:	d804      	bhi.n	80169a2 <tcp_parseopt+0x8a>
 8016998:	89bb      	ldrh	r3, [r7, #12]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d001      	beq.n	80169a2 <tcp_parseopt+0x8a>
 801699e:	89ba      	ldrh	r2, [r7, #12]
 80169a0:	e001      	b.n	80169a6 <tcp_parseopt+0x8e>
 80169a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80169aa:	e012      	b.n	80169d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80169ac:	f7ff ff7e 	bl	80168ac <tcp_get_next_optbyte>
 80169b0:	4603      	mov	r3, r0
 80169b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80169b4:	7afb      	ldrb	r3, [r7, #11]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d916      	bls.n	80169e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80169ba:	7afb      	ldrb	r3, [r7, #11]
 80169bc:	b29a      	uxth	r2, r3
 80169be:	4b10      	ldr	r3, [pc, #64]	@ (8016a00 <tcp_parseopt+0xe8>)
 80169c0:	881b      	ldrh	r3, [r3, #0]
 80169c2:	4413      	add	r3, r2
 80169c4:	b29b      	uxth	r3, r3
 80169c6:	3b02      	subs	r3, #2
 80169c8:	b29a      	uxth	r2, r3
 80169ca:	4b0d      	ldr	r3, [pc, #52]	@ (8016a00 <tcp_parseopt+0xe8>)
 80169cc:	801a      	strh	r2, [r3, #0]
 80169ce:	e000      	b.n	80169d2 <tcp_parseopt+0xba>
          break;
 80169d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80169d2:	4b0b      	ldr	r3, [pc, #44]	@ (8016a00 <tcp_parseopt+0xe8>)
 80169d4:	881a      	ldrh	r2, [r3, #0]
 80169d6:	4b09      	ldr	r3, [pc, #36]	@ (80169fc <tcp_parseopt+0xe4>)
 80169d8:	881b      	ldrh	r3, [r3, #0]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d3b2      	bcc.n	8016944 <tcp_parseopt+0x2c>
 80169de:	e004      	b.n	80169ea <tcp_parseopt+0xd2>
          return;
 80169e0:	bf00      	nop
 80169e2:	e002      	b.n	80169ea <tcp_parseopt+0xd2>
            return;
 80169e4:	bf00      	nop
 80169e6:	e000      	b.n	80169ea <tcp_parseopt+0xd2>
            return;
 80169e8:	bf00      	nop
      }
    }
  }
}
 80169ea:	3710      	adds	r7, #16
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	0802335c 	.word	0x0802335c
 80169f4:	080237c0 	.word	0x080237c0
 80169f8:	080233a8 	.word	0x080233a8
 80169fc:	20017784 	.word	0x20017784
 8016a00:	2001778c 	.word	0x2001778c

08016a04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016a04:	b480      	push	{r7}
 8016a06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016a08:	4b05      	ldr	r3, [pc, #20]	@ (8016a20 <tcp_trigger_input_pcb_close+0x1c>)
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	f043 0310 	orr.w	r3, r3, #16
 8016a10:	b2da      	uxtb	r2, r3
 8016a12:	4b03      	ldr	r3, [pc, #12]	@ (8016a20 <tcp_trigger_input_pcb_close+0x1c>)
 8016a14:	701a      	strb	r2, [r3, #0]
}
 8016a16:	bf00      	nop
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1e:	4770      	bx	lr
 8016a20:	2001779d 	.word	0x2001779d

08016a24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d00a      	beq.n	8016a4c <tcp_route+0x28>
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	7a1b      	ldrb	r3, [r3, #8]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d006      	beq.n	8016a4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	7a1b      	ldrb	r3, [r3, #8]
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7fb f9b8 	bl	8011db8 <netif_get_by_index>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	e003      	b.n	8016a54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f005 f8e9 	bl	801bc24 <ip4_route>
 8016a52:	4603      	mov	r3, r0
  }
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3710      	adds	r7, #16
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016a5c:	b590      	push	{r4, r7, lr}
 8016a5e:	b087      	sub	sp, #28
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	60f8      	str	r0, [r7, #12]
 8016a64:	60b9      	str	r1, [r7, #8]
 8016a66:	603b      	str	r3, [r7, #0]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d105      	bne.n	8016a7e <tcp_create_segment+0x22>
 8016a72:	4b43      	ldr	r3, [pc, #268]	@ (8016b80 <tcp_create_segment+0x124>)
 8016a74:	22a3      	movs	r2, #163	@ 0xa3
 8016a76:	4943      	ldr	r1, [pc, #268]	@ (8016b84 <tcp_create_segment+0x128>)
 8016a78:	4843      	ldr	r0, [pc, #268]	@ (8016b88 <tcp_create_segment+0x12c>)
 8016a7a:	f007 fd5d 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016a7e:	68bb      	ldr	r3, [r7, #8]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d105      	bne.n	8016a90 <tcp_create_segment+0x34>
 8016a84:	4b3e      	ldr	r3, [pc, #248]	@ (8016b80 <tcp_create_segment+0x124>)
 8016a86:	22a4      	movs	r2, #164	@ 0xa4
 8016a88:	4940      	ldr	r1, [pc, #256]	@ (8016b8c <tcp_create_segment+0x130>)
 8016a8a:	483f      	ldr	r0, [pc, #252]	@ (8016b88 <tcp_create_segment+0x12c>)
 8016a8c:	f007 fd54 	bl	801e538 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016a94:	009b      	lsls	r3, r3, #2
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	f003 0304 	and.w	r3, r3, #4
 8016a9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016a9e:	2003      	movs	r0, #3
 8016aa0:	f7fa fdf2 	bl	8011688 <memp_malloc>
 8016aa4:	6138      	str	r0, [r7, #16]
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d104      	bne.n	8016ab6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016aac:	68b8      	ldr	r0, [r7, #8]
 8016aae:	f7fb fd11 	bl	80124d4 <pbuf_free>
    return NULL;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	e060      	b.n	8016b78 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016abc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	68ba      	ldr	r2, [r7, #8]
 8016ac8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	891a      	ldrh	r2, [r3, #8]
 8016ace:	7dfb      	ldrb	r3, [r7, #23]
 8016ad0:	b29b      	uxth	r3, r3
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d205      	bcs.n	8016ae2 <tcp_create_segment+0x86>
 8016ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8016b80 <tcp_create_segment+0x124>)
 8016ad8:	22b0      	movs	r2, #176	@ 0xb0
 8016ada:	492d      	ldr	r1, [pc, #180]	@ (8016b90 <tcp_create_segment+0x134>)
 8016adc:	482a      	ldr	r0, [pc, #168]	@ (8016b88 <tcp_create_segment+0x12c>)
 8016ade:	f007 fd2b 	bl	801e538 <iprintf>
  seg->len = p->tot_len - optlen;
 8016ae2:	68bb      	ldr	r3, [r7, #8]
 8016ae4:	891a      	ldrh	r2, [r3, #8]
 8016ae6:	7dfb      	ldrb	r3, [r7, #23]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	1ad3      	subs	r3, r2, r3
 8016aec:	b29a      	uxth	r2, r3
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016af2:	2114      	movs	r1, #20
 8016af4:	68b8      	ldr	r0, [r7, #8]
 8016af6:	f7fb fc57 	bl	80123a8 <pbuf_add_header>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d004      	beq.n	8016b0a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016b00:	6938      	ldr	r0, [r7, #16]
 8016b02:	f7fd f8d2 	bl	8013caa <tcp_seg_free>
    return NULL;
 8016b06:	2300      	movs	r3, #0
 8016b08:	e036      	b.n	8016b78 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	685a      	ldr	r2, [r3, #4]
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	8ada      	ldrh	r2, [r3, #22]
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	68dc      	ldr	r4, [r3, #12]
 8016b1c:	4610      	mov	r0, r2
 8016b1e:	f7f9 fded 	bl	80106fc <lwip_htons>
 8016b22:	4603      	mov	r3, r0
 8016b24:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	8b1a      	ldrh	r2, [r3, #24]
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	68dc      	ldr	r4, [r3, #12]
 8016b2e:	4610      	mov	r0, r2
 8016b30:	f7f9 fde4 	bl	80106fc <lwip_htons>
 8016b34:	4603      	mov	r3, r0
 8016b36:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	68dc      	ldr	r4, [r3, #12]
 8016b3c:	6838      	ldr	r0, [r7, #0]
 8016b3e:	f7f9 fdf2 	bl	8010726 <lwip_htonl>
 8016b42:	4603      	mov	r3, r0
 8016b44:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016b46:	7dfb      	ldrb	r3, [r7, #23]
 8016b48:	089b      	lsrs	r3, r3, #2
 8016b4a:	b2db      	uxtb	r3, r3
 8016b4c:	3305      	adds	r3, #5
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	031b      	lsls	r3, r3, #12
 8016b52:	b29a      	uxth	r2, r3
 8016b54:	79fb      	ldrb	r3, [r7, #7]
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	4313      	orrs	r3, r2
 8016b5a:	b29a      	uxth	r2, r3
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	68dc      	ldr	r4, [r3, #12]
 8016b60:	4610      	mov	r0, r2
 8016b62:	f7f9 fdcb 	bl	80106fc <lwip_htons>
 8016b66:	4603      	mov	r3, r0
 8016b68:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	68db      	ldr	r3, [r3, #12]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	749a      	strb	r2, [r3, #18]
 8016b72:	2200      	movs	r2, #0
 8016b74:	74da      	strb	r2, [r3, #19]
  return seg;
 8016b76:	693b      	ldr	r3, [r7, #16]
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	371c      	adds	r7, #28
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd90      	pop	{r4, r7, pc}
 8016b80:	080237dc 	.word	0x080237dc
 8016b84:	08023810 	.word	0x08023810
 8016b88:	08023830 	.word	0x08023830
 8016b8c:	08023858 	.word	0x08023858
 8016b90:	0802387c 	.word	0x0802387c

08016b94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016b94:	b590      	push	{r4, r7, lr}
 8016b96:	b08b      	sub	sp, #44	@ 0x2c
 8016b98:	af02      	add	r7, sp, #8
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	61fb      	str	r3, [r7, #28]
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d106      	bne.n	8016bc0 <tcp_split_unsent_seg+0x2c>
 8016bb2:	4b95      	ldr	r3, [pc, #596]	@ (8016e08 <tcp_split_unsent_seg+0x274>)
 8016bb4:	f240 324b 	movw	r2, #843	@ 0x34b
 8016bb8:	4994      	ldr	r1, [pc, #592]	@ (8016e0c <tcp_split_unsent_seg+0x278>)
 8016bba:	4895      	ldr	r0, [pc, #596]	@ (8016e10 <tcp_split_unsent_seg+0x27c>)
 8016bbc:	f007 fcbc 	bl	801e538 <iprintf>

  useg = pcb->unsent;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d102      	bne.n	8016bd2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd0:	e116      	b.n	8016e00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016bd2:	887b      	ldrh	r3, [r7, #2]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d109      	bne.n	8016bec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016bd8:	4b8b      	ldr	r3, [pc, #556]	@ (8016e08 <tcp_split_unsent_seg+0x274>)
 8016bda:	f240 3253 	movw	r2, #851	@ 0x353
 8016bde:	498d      	ldr	r1, [pc, #564]	@ (8016e14 <tcp_split_unsent_seg+0x280>)
 8016be0:	488b      	ldr	r0, [pc, #556]	@ (8016e10 <tcp_split_unsent_seg+0x27c>)
 8016be2:	f007 fca9 	bl	801e538 <iprintf>
    return ERR_VAL;
 8016be6:	f06f 0305 	mvn.w	r3, #5
 8016bea:	e109      	b.n	8016e00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	891b      	ldrh	r3, [r3, #8]
 8016bf0:	887a      	ldrh	r2, [r7, #2]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d301      	bcc.n	8016bfa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	e102      	b.n	8016e00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016bfe:	887a      	ldrh	r2, [r7, #2]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d906      	bls.n	8016c12 <tcp_split_unsent_seg+0x7e>
 8016c04:	4b80      	ldr	r3, [pc, #512]	@ (8016e08 <tcp_split_unsent_seg+0x274>)
 8016c06:	f240 325b 	movw	r2, #859	@ 0x35b
 8016c0a:	4983      	ldr	r1, [pc, #524]	@ (8016e18 <tcp_split_unsent_seg+0x284>)
 8016c0c:	4880      	ldr	r0, [pc, #512]	@ (8016e10 <tcp_split_unsent_seg+0x27c>)
 8016c0e:	f007 fc93 	bl	801e538 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	891b      	ldrh	r3, [r3, #8]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d106      	bne.n	8016c28 <tcp_split_unsent_seg+0x94>
 8016c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8016e08 <tcp_split_unsent_seg+0x274>)
 8016c1c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016c20:	497e      	ldr	r1, [pc, #504]	@ (8016e1c <tcp_split_unsent_seg+0x288>)
 8016c22:	487b      	ldr	r0, [pc, #492]	@ (8016e10 <tcp_split_unsent_seg+0x27c>)
 8016c24:	f007 fc88 	bl	801e538 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	7a9b      	ldrb	r3, [r3, #10]
 8016c2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016c2e:	7bfb      	ldrb	r3, [r7, #15]
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	f003 0304 	and.w	r3, r3, #4
 8016c38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	891a      	ldrh	r2, [r3, #8]
 8016c3e:	887b      	ldrh	r3, [r7, #2]
 8016c40:	1ad3      	subs	r3, r2, r3
 8016c42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016c44:	7bbb      	ldrb	r3, [r7, #14]
 8016c46:	b29a      	uxth	r2, r3
 8016c48:	89bb      	ldrh	r3, [r7, #12]
 8016c4a:	4413      	add	r3, r2
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016c52:	4619      	mov	r1, r3
 8016c54:	2036      	movs	r0, #54	@ 0x36
 8016c56:	f7fb f959 	bl	8011f0c <pbuf_alloc>
 8016c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	f000 80b7 	beq.w	8016dd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	891a      	ldrh	r2, [r3, #8]
 8016c6a:	697b      	ldr	r3, [r7, #20]
 8016c6c:	891b      	ldrh	r3, [r3, #8]
 8016c6e:	1ad3      	subs	r3, r2, r3
 8016c70:	b29a      	uxth	r2, r3
 8016c72:	887b      	ldrh	r3, [r7, #2]
 8016c74:	4413      	add	r3, r2
 8016c76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	6858      	ldr	r0, [r3, #4]
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	685a      	ldr	r2, [r3, #4]
 8016c80:	7bbb      	ldrb	r3, [r7, #14]
 8016c82:	18d1      	adds	r1, r2, r3
 8016c84:	897b      	ldrh	r3, [r7, #10]
 8016c86:	89ba      	ldrh	r2, [r7, #12]
 8016c88:	f7fb fe2a 	bl	80128e0 <pbuf_copy_partial>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	461a      	mov	r2, r3
 8016c90:	89bb      	ldrh	r3, [r7, #12]
 8016c92:	4293      	cmp	r3, r2
 8016c94:	f040 809f 	bne.w	8016dd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	899b      	ldrh	r3, [r3, #12]
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7f9 fd2b 	bl	80106fc <lwip_htons>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016cae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016cb4:	7efb      	ldrb	r3, [r7, #27]
 8016cb6:	f003 0308 	and.w	r3, r3, #8
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d007      	beq.n	8016cce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016cbe:	7efb      	ldrb	r3, [r7, #27]
 8016cc0:	f023 0308 	bic.w	r3, r3, #8
 8016cc4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016cc6:	7ebb      	ldrb	r3, [r7, #26]
 8016cc8:	f043 0308 	orr.w	r3, r3, #8
 8016ccc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016cce:	7efb      	ldrb	r3, [r7, #27]
 8016cd0:	f003 0301 	and.w	r3, r3, #1
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d007      	beq.n	8016ce8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016cd8:	7efb      	ldrb	r3, [r7, #27]
 8016cda:	f023 0301 	bic.w	r3, r3, #1
 8016cde:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016ce0:	7ebb      	ldrb	r3, [r7, #26]
 8016ce2:	f043 0301 	orr.w	r3, r3, #1
 8016ce6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f9 fd19 	bl	8010726 <lwip_htonl>
 8016cf4:	4602      	mov	r2, r0
 8016cf6:	887b      	ldrh	r3, [r7, #2]
 8016cf8:	18d1      	adds	r1, r2, r3
 8016cfa:	7eba      	ldrb	r2, [r7, #26]
 8016cfc:	7bfb      	ldrb	r3, [r7, #15]
 8016cfe:	9300      	str	r3, [sp, #0]
 8016d00:	460b      	mov	r3, r1
 8016d02:	6939      	ldr	r1, [r7, #16]
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f7ff fea9 	bl	8016a5c <tcp_create_segment>
 8016d0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016d0c:	69fb      	ldr	r3, [r7, #28]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d063      	beq.n	8016dda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fb fc6a 	bl	80125f0 <pbuf_clen>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	461a      	mov	r2, r3
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d26:	1a9b      	subs	r3, r3, r2
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	6858      	ldr	r0, [r3, #4]
 8016d34:	697b      	ldr	r3, [r7, #20]
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	891a      	ldrh	r2, [r3, #8]
 8016d3a:	89bb      	ldrh	r3, [r7, #12]
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	4619      	mov	r1, r3
 8016d42:	f7fb fa41 	bl	80121c8 <pbuf_realloc>
  useg->len -= remainder;
 8016d46:	697b      	ldr	r3, [r7, #20]
 8016d48:	891a      	ldrh	r2, [r3, #8]
 8016d4a:	89bb      	ldrh	r3, [r7, #12]
 8016d4c:	1ad3      	subs	r3, r2, r3
 8016d4e:	b29a      	uxth	r2, r3
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	899b      	ldrh	r3, [r3, #12]
 8016d5a:	b29c      	uxth	r4, r3
 8016d5c:	7efb      	ldrb	r3, [r7, #27]
 8016d5e:	b29b      	uxth	r3, r3
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7f9 fccb 	bl	80106fc <lwip_htons>
 8016d66:	4603      	mov	r3, r0
 8016d68:	461a      	mov	r2, r3
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	68db      	ldr	r3, [r3, #12]
 8016d6e:	4322      	orrs	r2, r4
 8016d70:	b292      	uxth	r2, r2
 8016d72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	685b      	ldr	r3, [r3, #4]
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fb fc39 	bl	80125f0 <pbuf_clen>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	461a      	mov	r2, r3
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d88:	4413      	add	r3, r2
 8016d8a:	b29a      	uxth	r2, r3
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7fb fc2a 	bl	80125f0 <pbuf_clen>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	461a      	mov	r2, r3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016da6:	4413      	add	r3, r2
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	681a      	ldr	r2, [r3, #0]
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016db8:	697b      	ldr	r3, [r7, #20]
 8016dba:	69fa      	ldr	r2, [r7, #28]
 8016dbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d103      	bne.n	8016dce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	e016      	b.n	8016e00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016dd2:	bf00      	nop
 8016dd4:	e002      	b.n	8016ddc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016dd6:	bf00      	nop
 8016dd8:	e000      	b.n	8016ddc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016dda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d006      	beq.n	8016df0 <tcp_split_unsent_seg+0x25c>
 8016de2:	4b09      	ldr	r3, [pc, #36]	@ (8016e08 <tcp_split_unsent_seg+0x274>)
 8016de4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016de8:	490d      	ldr	r1, [pc, #52]	@ (8016e20 <tcp_split_unsent_seg+0x28c>)
 8016dea:	4809      	ldr	r0, [pc, #36]	@ (8016e10 <tcp_split_unsent_seg+0x27c>)
 8016dec:	f007 fba4 	bl	801e538 <iprintf>
  if (p != NULL) {
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d002      	beq.n	8016dfc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016df6:	6938      	ldr	r0, [r7, #16]
 8016df8:	f7fb fb6c 	bl	80124d4 <pbuf_free>
  }

  return ERR_MEM;
 8016dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3724      	adds	r7, #36	@ 0x24
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd90      	pop	{r4, r7, pc}
 8016e08:	080237dc 	.word	0x080237dc
 8016e0c:	08023b70 	.word	0x08023b70
 8016e10:	08023830 	.word	0x08023830
 8016e14:	08023b94 	.word	0x08023b94
 8016e18:	08023bb8 	.word	0x08023bb8
 8016e1c:	08023bc8 	.word	0x08023bc8
 8016e20:	08023bd8 	.word	0x08023bd8

08016e24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016e24:	b590      	push	{r4, r7, lr}
 8016e26:	b085      	sub	sp, #20
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d106      	bne.n	8016e40 <tcp_send_fin+0x1c>
 8016e32:	4b21      	ldr	r3, [pc, #132]	@ (8016eb8 <tcp_send_fin+0x94>)
 8016e34:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016e38:	4920      	ldr	r1, [pc, #128]	@ (8016ebc <tcp_send_fin+0x98>)
 8016e3a:	4821      	ldr	r0, [pc, #132]	@ (8016ec0 <tcp_send_fin+0x9c>)
 8016e3c:	f007 fb7c 	bl	801e538 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d02e      	beq.n	8016ea6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e4c:	60fb      	str	r3, [r7, #12]
 8016e4e:	e002      	b.n	8016e56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1f8      	bne.n	8016e50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	899b      	ldrh	r3, [r3, #12]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7f9 fc48 	bl	80106fc <lwip_htons>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	f003 0307 	and.w	r3, r3, #7
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d116      	bne.n	8016ea6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	899b      	ldrh	r3, [r3, #12]
 8016e7e:	b29c      	uxth	r4, r3
 8016e80:	2001      	movs	r0, #1
 8016e82:	f7f9 fc3b 	bl	80106fc <lwip_htons>
 8016e86:	4603      	mov	r3, r0
 8016e88:	461a      	mov	r2, r3
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	68db      	ldr	r3, [r3, #12]
 8016e8e:	4322      	orrs	r2, r4
 8016e90:	b292      	uxth	r2, r2
 8016e92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	8b5b      	ldrh	r3, [r3, #26]
 8016e98:	f043 0320 	orr.w	r3, r3, #32
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	e004      	b.n	8016eb0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016ea6:	2101      	movs	r1, #1
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f000 f80b 	bl	8016ec4 <tcp_enqueue_flags>
 8016eae:	4603      	mov	r3, r0
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3714      	adds	r7, #20
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd90      	pop	{r4, r7, pc}
 8016eb8:	080237dc 	.word	0x080237dc
 8016ebc:	08023be4 	.word	0x08023be4
 8016ec0:	08023830 	.word	0x08023830

08016ec4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b08a      	sub	sp, #40	@ 0x28
 8016ec8:	af02      	add	r7, sp, #8
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	460b      	mov	r3, r1
 8016ece:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016ed8:	78fb      	ldrb	r3, [r7, #3]
 8016eda:	f003 0303 	and.w	r3, r3, #3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d106      	bne.n	8016ef0 <tcp_enqueue_flags+0x2c>
 8016ee2:	4b67      	ldr	r3, [pc, #412]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8016ee4:	f240 4211 	movw	r2, #1041	@ 0x411
 8016ee8:	4966      	ldr	r1, [pc, #408]	@ (8017084 <tcp_enqueue_flags+0x1c0>)
 8016eea:	4867      	ldr	r0, [pc, #412]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8016eec:	f007 fb24 	bl	801e538 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d106      	bne.n	8016f04 <tcp_enqueue_flags+0x40>
 8016ef6:	4b62      	ldr	r3, [pc, #392]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8016ef8:	f240 4213 	movw	r2, #1043	@ 0x413
 8016efc:	4963      	ldr	r1, [pc, #396]	@ (801708c <tcp_enqueue_flags+0x1c8>)
 8016efe:	4862      	ldr	r0, [pc, #392]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8016f00:	f007 fb1a 	bl	801e538 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016f04:	78fb      	ldrb	r3, [r7, #3]
 8016f06:	f003 0302 	and.w	r3, r3, #2
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d001      	beq.n	8016f12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016f0e:	2301      	movs	r3, #1
 8016f10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016f12:	7ffb      	ldrb	r3, [r7, #31]
 8016f14:	009b      	lsls	r3, r3, #2
 8016f16:	b2db      	uxtb	r3, r3
 8016f18:	f003 0304 	and.w	r3, r3, #4
 8016f1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016f1e:	7dfb      	ldrb	r3, [r7, #23]
 8016f20:	b29b      	uxth	r3, r3
 8016f22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016f26:	4619      	mov	r1, r3
 8016f28:	2036      	movs	r0, #54	@ 0x36
 8016f2a:	f7fa ffef 	bl	8011f0c <pbuf_alloc>
 8016f2e:	6138      	str	r0, [r7, #16]
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d109      	bne.n	8016f4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	8b5b      	ldrh	r3, [r3, #26]
 8016f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016f44:	f04f 33ff 	mov.w	r3, #4294967295
 8016f48:	e095      	b.n	8017076 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	895a      	ldrh	r2, [r3, #10]
 8016f4e:	7dfb      	ldrb	r3, [r7, #23]
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d206      	bcs.n	8016f64 <tcp_enqueue_flags+0xa0>
 8016f56:	4b4a      	ldr	r3, [pc, #296]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8016f58:	f240 4239 	movw	r2, #1081	@ 0x439
 8016f5c:	494c      	ldr	r1, [pc, #304]	@ (8017090 <tcp_enqueue_flags+0x1cc>)
 8016f5e:	484a      	ldr	r0, [pc, #296]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8016f60:	f007 faea 	bl	801e538 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016f68:	78fa      	ldrb	r2, [r7, #3]
 8016f6a:	7ffb      	ldrb	r3, [r7, #31]
 8016f6c:	9300      	str	r3, [sp, #0]
 8016f6e:	460b      	mov	r3, r1
 8016f70:	6939      	ldr	r1, [r7, #16]
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7ff fd72 	bl	8016a5c <tcp_create_segment>
 8016f78:	60f8      	str	r0, [r7, #12]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d109      	bne.n	8016f94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	8b5b      	ldrh	r3, [r3, #26]
 8016f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f92:	e070      	b.n	8017076 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	68db      	ldr	r3, [r3, #12]
 8016f98:	f003 0303 	and.w	r3, r3, #3
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d006      	beq.n	8016fae <tcp_enqueue_flags+0xea>
 8016fa0:	4b37      	ldr	r3, [pc, #220]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8016fa2:	f240 4242 	movw	r2, #1090	@ 0x442
 8016fa6:	493b      	ldr	r1, [pc, #236]	@ (8017094 <tcp_enqueue_flags+0x1d0>)
 8016fa8:	4837      	ldr	r0, [pc, #220]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8016faa:	f007 fac5 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	891b      	ldrh	r3, [r3, #8]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d006      	beq.n	8016fc4 <tcp_enqueue_flags+0x100>
 8016fb6:	4b32      	ldr	r3, [pc, #200]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8016fb8:	f240 4243 	movw	r2, #1091	@ 0x443
 8016fbc:	4936      	ldr	r1, [pc, #216]	@ (8017098 <tcp_enqueue_flags+0x1d4>)
 8016fbe:	4832      	ldr	r0, [pc, #200]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8016fc0:	f007 faba 	bl	801e538 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d103      	bne.n	8016fd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	68fa      	ldr	r2, [r7, #12]
 8016fd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016fd2:	e00d      	b.n	8016ff0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fd8:	61bb      	str	r3, [r7, #24]
 8016fda:	e002      	b.n	8016fe2 <tcp_enqueue_flags+0x11e>
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	61bb      	str	r3, [r7, #24]
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d1f8      	bne.n	8016fdc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	68fa      	ldr	r2, [r7, #12]
 8016fee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016ff8:	78fb      	ldrb	r3, [r7, #3]
 8016ffa:	f003 0302 	and.w	r3, r3, #2
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d104      	bne.n	801700c <tcp_enqueue_flags+0x148>
 8017002:	78fb      	ldrb	r3, [r7, #3]
 8017004:	f003 0301 	and.w	r3, r3, #1
 8017008:	2b00      	cmp	r3, #0
 801700a:	d004      	beq.n	8017016 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017010:	1c5a      	adds	r2, r3, #1
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017016:	78fb      	ldrb	r3, [r7, #3]
 8017018:	f003 0301 	and.w	r3, r3, #1
 801701c:	2b00      	cmp	r3, #0
 801701e:	d006      	beq.n	801702e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	8b5b      	ldrh	r3, [r3, #26]
 8017024:	f043 0320 	orr.w	r3, r3, #32
 8017028:	b29a      	uxth	r2, r3
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	4618      	mov	r0, r3
 8017034:	f7fb fadc 	bl	80125f0 <pbuf_clen>
 8017038:	4603      	mov	r3, r0
 801703a:	461a      	mov	r2, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017042:	4413      	add	r3, r2
 8017044:	b29a      	uxth	r2, r3
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00e      	beq.n	8017074 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801705a:	2b00      	cmp	r3, #0
 801705c:	d10a      	bne.n	8017074 <tcp_enqueue_flags+0x1b0>
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017062:	2b00      	cmp	r3, #0
 8017064:	d106      	bne.n	8017074 <tcp_enqueue_flags+0x1b0>
 8017066:	4b06      	ldr	r3, [pc, #24]	@ (8017080 <tcp_enqueue_flags+0x1bc>)
 8017068:	f240 4265 	movw	r2, #1125	@ 0x465
 801706c:	490b      	ldr	r1, [pc, #44]	@ (801709c <tcp_enqueue_flags+0x1d8>)
 801706e:	4806      	ldr	r0, [pc, #24]	@ (8017088 <tcp_enqueue_flags+0x1c4>)
 8017070:	f007 fa62 	bl	801e538 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017074:	2300      	movs	r3, #0
}
 8017076:	4618      	mov	r0, r3
 8017078:	3720      	adds	r7, #32
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	080237dc 	.word	0x080237dc
 8017084:	08023c00 	.word	0x08023c00
 8017088:	08023830 	.word	0x08023830
 801708c:	08023c58 	.word	0x08023c58
 8017090:	08023c78 	.word	0x08023c78
 8017094:	08023cb4 	.word	0x08023cb4
 8017098:	08023ccc 	.word	0x08023ccc
 801709c:	08023cf8 	.word	0x08023cf8

080170a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80170a0:	b5b0      	push	{r4, r5, r7, lr}
 80170a2:	b08a      	sub	sp, #40	@ 0x28
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d106      	bne.n	80170bc <tcp_output+0x1c>
 80170ae:	4b8a      	ldr	r3, [pc, #552]	@ (80172d8 <tcp_output+0x238>)
 80170b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80170b4:	4989      	ldr	r1, [pc, #548]	@ (80172dc <tcp_output+0x23c>)
 80170b6:	488a      	ldr	r0, [pc, #552]	@ (80172e0 <tcp_output+0x240>)
 80170b8:	f007 fa3e 	bl	801e538 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	7d1b      	ldrb	r3, [r3, #20]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d106      	bne.n	80170d2 <tcp_output+0x32>
 80170c4:	4b84      	ldr	r3, [pc, #528]	@ (80172d8 <tcp_output+0x238>)
 80170c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80170ca:	4986      	ldr	r1, [pc, #536]	@ (80172e4 <tcp_output+0x244>)
 80170cc:	4884      	ldr	r0, [pc, #528]	@ (80172e0 <tcp_output+0x240>)
 80170ce:	f007 fa33 	bl	801e538 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80170d2:	4b85      	ldr	r3, [pc, #532]	@ (80172e8 <tcp_output+0x248>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	687a      	ldr	r2, [r7, #4]
 80170d8:	429a      	cmp	r2, r3
 80170da:	d101      	bne.n	80170e0 <tcp_output+0x40>
    return ERR_OK;
 80170dc:	2300      	movs	r3, #0
 80170de:	e1ce      	b.n	801747e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80170ec:	4293      	cmp	r3, r2
 80170ee:	bf28      	it	cs
 80170f0:	4613      	movcs	r3, r2
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80170fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d10b      	bne.n	801711a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	8b5b      	ldrh	r3, [r3, #26]
 8017106:	f003 0302 	and.w	r3, r3, #2
 801710a:	2b00      	cmp	r3, #0
 801710c:	f000 81aa 	beq.w	8017464 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 fdcb 	bl	8017cac <tcp_send_empty_ack>
 8017116:	4603      	mov	r3, r0
 8017118:	e1b1      	b.n	801747e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801711a:	6879      	ldr	r1, [r7, #4]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	3304      	adds	r3, #4
 8017120:	461a      	mov	r2, r3
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f7ff fc7e 	bl	8016a24 <tcp_route>
 8017128:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d102      	bne.n	8017136 <tcp_output+0x96>
    return ERR_RTE;
 8017130:	f06f 0303 	mvn.w	r3, #3
 8017134:	e1a3      	b.n	801747e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d003      	beq.n	8017144 <tcp_output+0xa4>
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d111      	bne.n	8017168 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d002      	beq.n	8017150 <tcp_output+0xb0>
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	3304      	adds	r3, #4
 801714e:	e000      	b.n	8017152 <tcp_output+0xb2>
 8017150:	2300      	movs	r3, #0
 8017152:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d102      	bne.n	8017160 <tcp_output+0xc0>
      return ERR_RTE;
 801715a:	f06f 0303 	mvn.w	r3, #3
 801715e:	e18e      	b.n	801747e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	4618      	mov	r0, r3
 8017170:	f7f9 fad9 	bl	8010726 <lwip_htonl>
 8017174:	4602      	mov	r2, r0
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801717e:	8912      	ldrh	r2, [r2, #8]
 8017180:	4413      	add	r3, r2
 8017182:	69ba      	ldr	r2, [r7, #24]
 8017184:	429a      	cmp	r2, r3
 8017186:	d227      	bcs.n	80171d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801718e:	461a      	mov	r2, r3
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	4293      	cmp	r3, r2
 8017194:	d114      	bne.n	80171c0 <tcp_output+0x120>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801719a:	2b00      	cmp	r3, #0
 801719c:	d110      	bne.n	80171c0 <tcp_output+0x120>
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d10b      	bne.n	80171c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2200      	movs	r2, #0
 80171ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2201      	movs	r2, #1
 80171b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2200      	movs	r2, #0
 80171bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	8b5b      	ldrh	r3, [r3, #26]
 80171c4:	f003 0302 	and.w	r3, r3, #2
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	f000 814d 	beq.w	8017468 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f000 fd6c 	bl	8017cac <tcp_send_empty_ack>
 80171d4:	4603      	mov	r3, r0
 80171d6:	e152      	b.n	801747e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2200      	movs	r2, #0
 80171dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80171e6:	6a3b      	ldr	r3, [r7, #32]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f000 811c 	beq.w	8017426 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80171ee:	e002      	b.n	80171f6 <tcp_output+0x156>
 80171f0:	6a3b      	ldr	r3, [r7, #32]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	623b      	str	r3, [r7, #32]
 80171f6:	6a3b      	ldr	r3, [r7, #32]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1f8      	bne.n	80171f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80171fe:	e112      	b.n	8017426 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	899b      	ldrh	r3, [r3, #12]
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7f9 fa77 	bl	80106fc <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	b2db      	uxtb	r3, r3
 8017212:	f003 0304 	and.w	r3, r3, #4
 8017216:	2b00      	cmp	r3, #0
 8017218:	d006      	beq.n	8017228 <tcp_output+0x188>
 801721a:	4b2f      	ldr	r3, [pc, #188]	@ (80172d8 <tcp_output+0x238>)
 801721c:	f240 5236 	movw	r2, #1334	@ 0x536
 8017220:	4932      	ldr	r1, [pc, #200]	@ (80172ec <tcp_output+0x24c>)
 8017222:	482f      	ldr	r0, [pc, #188]	@ (80172e0 <tcp_output+0x240>)
 8017224:	f007 f988 	bl	801e538 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801722c:	2b00      	cmp	r3, #0
 801722e:	d01f      	beq.n	8017270 <tcp_output+0x1d0>
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	8b5b      	ldrh	r3, [r3, #26]
 8017234:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017238:	2b00      	cmp	r3, #0
 801723a:	d119      	bne.n	8017270 <tcp_output+0x1d0>
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017240:	2b00      	cmp	r3, #0
 8017242:	d00b      	beq.n	801725c <tcp_output+0x1bc>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d110      	bne.n	8017270 <tcp_output+0x1d0>
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017252:	891a      	ldrh	r2, [r3, #8]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017258:	429a      	cmp	r2, r3
 801725a:	d209      	bcs.n	8017270 <tcp_output+0x1d0>
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017262:	2b00      	cmp	r3, #0
 8017264:	d004      	beq.n	8017270 <tcp_output+0x1d0>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801726c:	2b08      	cmp	r3, #8
 801726e:	d901      	bls.n	8017274 <tcp_output+0x1d4>
 8017270:	2301      	movs	r3, #1
 8017272:	e000      	b.n	8017276 <tcp_output+0x1d6>
 8017274:	2300      	movs	r3, #0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d106      	bne.n	8017288 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017282:	2b00      	cmp	r3, #0
 8017284:	f000 80e4 	beq.w	8017450 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	7d1b      	ldrb	r3, [r3, #20]
 801728c:	2b02      	cmp	r3, #2
 801728e:	d00d      	beq.n	80172ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	899b      	ldrh	r3, [r3, #12]
 8017296:	b29c      	uxth	r4, r3
 8017298:	2010      	movs	r0, #16
 801729a:	f7f9 fa2f 	bl	80106fc <lwip_htons>
 801729e:	4603      	mov	r3, r0
 80172a0:	461a      	mov	r2, r3
 80172a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	4322      	orrs	r2, r4
 80172a8:	b292      	uxth	r2, r2
 80172aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80172ac:	697a      	ldr	r2, [r7, #20]
 80172ae:	6879      	ldr	r1, [r7, #4]
 80172b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80172b2:	f000 f909 	bl	80174c8 <tcp_output_segment>
 80172b6:	4603      	mov	r3, r0
 80172b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80172ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d016      	beq.n	80172f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	8b5b      	ldrh	r3, [r3, #26]
 80172c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80172ca:	b29a      	uxth	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	835a      	strh	r2, [r3, #26]
      return err;
 80172d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172d4:	e0d3      	b.n	801747e <tcp_output+0x3de>
 80172d6:	bf00      	nop
 80172d8:	080237dc 	.word	0x080237dc
 80172dc:	08023d20 	.word	0x08023d20
 80172e0:	08023830 	.word	0x08023830
 80172e4:	08023d38 	.word	0x08023d38
 80172e8:	200177a4 	.word	0x200177a4
 80172ec:	08023d60 	.word	0x08023d60
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80172f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f2:	681a      	ldr	r2, [r3, #0]
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	7d1b      	ldrb	r3, [r3, #20]
 80172fc:	2b02      	cmp	r3, #2
 80172fe:	d006      	beq.n	801730e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	8b5b      	ldrh	r3, [r3, #26]
 8017304:	f023 0303 	bic.w	r3, r3, #3
 8017308:	b29a      	uxth	r2, r3
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	4618      	mov	r0, r3
 8017316:	f7f9 fa06 	bl	8010726 <lwip_htonl>
 801731a:	4604      	mov	r4, r0
 801731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801731e:	891b      	ldrh	r3, [r3, #8]
 8017320:	461d      	mov	r5, r3
 8017322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017324:	68db      	ldr	r3, [r3, #12]
 8017326:	899b      	ldrh	r3, [r3, #12]
 8017328:	b29b      	uxth	r3, r3
 801732a:	4618      	mov	r0, r3
 801732c:	f7f9 f9e6 	bl	80106fc <lwip_htons>
 8017330:	4603      	mov	r3, r0
 8017332:	b2db      	uxtb	r3, r3
 8017334:	f003 0303 	and.w	r3, r3, #3
 8017338:	2b00      	cmp	r3, #0
 801733a:	d001      	beq.n	8017340 <tcp_output+0x2a0>
 801733c:	2301      	movs	r3, #1
 801733e:	e000      	b.n	8017342 <tcp_output+0x2a2>
 8017340:	2300      	movs	r3, #0
 8017342:	442b      	add	r3, r5
 8017344:	4423      	add	r3, r4
 8017346:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	1ad3      	subs	r3, r2, r3
 8017350:	2b00      	cmp	r3, #0
 8017352:	da02      	bge.n	801735a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	68ba      	ldr	r2, [r7, #8]
 8017358:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735c:	891b      	ldrh	r3, [r3, #8]
 801735e:	461c      	mov	r4, r3
 8017360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	899b      	ldrh	r3, [r3, #12]
 8017366:	b29b      	uxth	r3, r3
 8017368:	4618      	mov	r0, r3
 801736a:	f7f9 f9c7 	bl	80106fc <lwip_htons>
 801736e:	4603      	mov	r3, r0
 8017370:	b2db      	uxtb	r3, r3
 8017372:	f003 0303 	and.w	r3, r3, #3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d001      	beq.n	801737e <tcp_output+0x2de>
 801737a:	2301      	movs	r3, #1
 801737c:	e000      	b.n	8017380 <tcp_output+0x2e0>
 801737e:	2300      	movs	r3, #0
 8017380:	4423      	add	r3, r4
 8017382:	2b00      	cmp	r3, #0
 8017384:	d049      	beq.n	801741a <tcp_output+0x37a>
      seg->next = NULL;
 8017386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017388:	2200      	movs	r2, #0
 801738a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017390:	2b00      	cmp	r3, #0
 8017392:	d105      	bne.n	80173a0 <tcp_output+0x300>
        pcb->unacked = seg;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017398:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801739c:	623b      	str	r3, [r7, #32]
 801739e:	e03f      	b.n	8017420 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80173a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7f9 f9bd 	bl	8010726 <lwip_htonl>
 80173ac:	4604      	mov	r4, r0
 80173ae:	6a3b      	ldr	r3, [r7, #32]
 80173b0:	68db      	ldr	r3, [r3, #12]
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	4618      	mov	r0, r3
 80173b6:	f7f9 f9b6 	bl	8010726 <lwip_htonl>
 80173ba:	4603      	mov	r3, r0
 80173bc:	1ae3      	subs	r3, r4, r3
 80173be:	2b00      	cmp	r3, #0
 80173c0:	da24      	bge.n	801740c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	3370      	adds	r3, #112	@ 0x70
 80173c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80173c8:	e002      	b.n	80173d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80173d0:	69fb      	ldr	r3, [r7, #28]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d011      	beq.n	80173fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173d8:	69fb      	ldr	r3, [r7, #28]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7f9 f9a0 	bl	8010726 <lwip_htonl>
 80173e6:	4604      	mov	r4, r0
 80173e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f9 f999 	bl	8010726 <lwip_htonl>
 80173f4:	4603      	mov	r3, r0
 80173f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	dbe6      	blt.n	80173ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80173fc:	69fb      	ldr	r3, [r7, #28]
 80173fe:	681a      	ldr	r2, [r3, #0]
 8017400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017402:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017404:	69fb      	ldr	r3, [r7, #28]
 8017406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017408:	601a      	str	r2, [r3, #0]
 801740a:	e009      	b.n	8017420 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801740c:	6a3b      	ldr	r3, [r7, #32]
 801740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017410:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017412:	6a3b      	ldr	r3, [r7, #32]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	623b      	str	r3, [r7, #32]
 8017418:	e002      	b.n	8017420 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801741a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801741c:	f7fc fc45 	bl	8013caa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017424:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8017426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017428:	2b00      	cmp	r3, #0
 801742a:	d012      	beq.n	8017452 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742e:	68db      	ldr	r3, [r3, #12]
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	4618      	mov	r0, r3
 8017434:	f7f9 f977 	bl	8010726 <lwip_htonl>
 8017438:	4602      	mov	r2, r0
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801743e:	1ad3      	subs	r3, r2, r3
 8017440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017442:	8912      	ldrh	r2, [r2, #8]
 8017444:	4413      	add	r3, r2
  while (seg != NULL &&
 8017446:	69ba      	ldr	r2, [r7, #24]
 8017448:	429a      	cmp	r2, r3
 801744a:	f4bf aed9 	bcs.w	8017200 <tcp_output+0x160>
 801744e:	e000      	b.n	8017452 <tcp_output+0x3b2>
      break;
 8017450:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017456:	2b00      	cmp	r3, #0
 8017458:	d108      	bne.n	801746c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017462:	e004      	b.n	801746e <tcp_output+0x3ce>
    goto output_done;
 8017464:	bf00      	nop
 8017466:	e002      	b.n	801746e <tcp_output+0x3ce>
    goto output_done;
 8017468:	bf00      	nop
 801746a:	e000      	b.n	801746e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801746c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	8b5b      	ldrh	r3, [r3, #26]
 8017472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017476:	b29a      	uxth	r2, r3
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801747c:	2300      	movs	r3, #0
}
 801747e:	4618      	mov	r0, r3
 8017480:	3728      	adds	r7, #40	@ 0x28
 8017482:	46bd      	mov	sp, r7
 8017484:	bdb0      	pop	{r4, r5, r7, pc}
 8017486:	bf00      	nop

08017488 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b082      	sub	sp, #8
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d106      	bne.n	80174a4 <tcp_output_segment_busy+0x1c>
 8017496:	4b09      	ldr	r3, [pc, #36]	@ (80174bc <tcp_output_segment_busy+0x34>)
 8017498:	f240 529a 	movw	r2, #1434	@ 0x59a
 801749c:	4908      	ldr	r1, [pc, #32]	@ (80174c0 <tcp_output_segment_busy+0x38>)
 801749e:	4809      	ldr	r0, [pc, #36]	@ (80174c4 <tcp_output_segment_busy+0x3c>)
 80174a0:	f007 f84a 	bl	801e538 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	685b      	ldr	r3, [r3, #4]
 80174a8:	7b9b      	ldrb	r3, [r3, #14]
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	d001      	beq.n	80174b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80174ae:	2301      	movs	r3, #1
 80174b0:	e000      	b.n	80174b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80174b2:	2300      	movs	r3, #0
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	080237dc 	.word	0x080237dc
 80174c0:	08023d78 	.word	0x08023d78
 80174c4:	08023830 	.word	0x08023830

080174c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80174c8:	b5b0      	push	{r4, r5, r7, lr}
 80174ca:	b08c      	sub	sp, #48	@ 0x30
 80174cc:	af04      	add	r7, sp, #16
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	60b9      	str	r1, [r7, #8]
 80174d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d106      	bne.n	80174e8 <tcp_output_segment+0x20>
 80174da:	4b64      	ldr	r3, [pc, #400]	@ (801766c <tcp_output_segment+0x1a4>)
 80174dc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80174e0:	4963      	ldr	r1, [pc, #396]	@ (8017670 <tcp_output_segment+0x1a8>)
 80174e2:	4864      	ldr	r0, [pc, #400]	@ (8017674 <tcp_output_segment+0x1ac>)
 80174e4:	f007 f828 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d106      	bne.n	80174fc <tcp_output_segment+0x34>
 80174ee:	4b5f      	ldr	r3, [pc, #380]	@ (801766c <tcp_output_segment+0x1a4>)
 80174f0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80174f4:	4960      	ldr	r1, [pc, #384]	@ (8017678 <tcp_output_segment+0x1b0>)
 80174f6:	485f      	ldr	r0, [pc, #380]	@ (8017674 <tcp_output_segment+0x1ac>)
 80174f8:	f007 f81e 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d106      	bne.n	8017510 <tcp_output_segment+0x48>
 8017502:	4b5a      	ldr	r3, [pc, #360]	@ (801766c <tcp_output_segment+0x1a4>)
 8017504:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017508:	495c      	ldr	r1, [pc, #368]	@ (801767c <tcp_output_segment+0x1b4>)
 801750a:	485a      	ldr	r0, [pc, #360]	@ (8017674 <tcp_output_segment+0x1ac>)
 801750c:	f007 f814 	bl	801e538 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f7ff ffb9 	bl	8017488 <tcp_output_segment_busy>
 8017516:	4603      	mov	r3, r0
 8017518:	2b00      	cmp	r3, #0
 801751a:	d001      	beq.n	8017520 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801751c:	2300      	movs	r3, #0
 801751e:	e0a1      	b.n	8017664 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	68dc      	ldr	r4, [r3, #12]
 8017528:	4610      	mov	r0, r2
 801752a:	f7f9 f8fc 	bl	8010726 <lwip_htonl>
 801752e:	4603      	mov	r3, r0
 8017530:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	68dc      	ldr	r4, [r3, #12]
 801753a:	4610      	mov	r0, r2
 801753c:	f7f9 f8de 	bl	80106fc <lwip_htons>
 8017540:	4603      	mov	r3, r0
 8017542:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017548:	68ba      	ldr	r2, [r7, #8]
 801754a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801754c:	441a      	add	r2, r3
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	3314      	adds	r3, #20
 8017558:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	7a9b      	ldrb	r3, [r3, #10]
 801755e:	f003 0301 	and.w	r3, r3, #1
 8017562:	2b00      	cmp	r3, #0
 8017564:	d015      	beq.n	8017592 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	3304      	adds	r3, #4
 801756a:	461a      	mov	r2, r3
 801756c:	6879      	ldr	r1, [r7, #4]
 801756e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017572:	f7fc fe91 	bl	8014298 <tcp_eff_send_mss_netif>
 8017576:	4603      	mov	r3, r0
 8017578:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801757a:	8b7b      	ldrh	r3, [r7, #26]
 801757c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017580:	4618      	mov	r0, r3
 8017582:	f7f9 f8d0 	bl	8010726 <lwip_htonl>
 8017586:	4602      	mov	r2, r0
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801758c:	69fb      	ldr	r3, [r7, #28]
 801758e:	3304      	adds	r3, #4
 8017590:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017598:	2b00      	cmp	r3, #0
 801759a:	da02      	bge.n	80175a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801759c:	68bb      	ldr	r3, [r7, #8]
 801759e:	2200      	movs	r2, #0
 80175a0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d10c      	bne.n	80175c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80175aa:	4b35      	ldr	r3, [pc, #212]	@ (8017680 <tcp_output_segment+0x1b8>)
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	68db      	ldr	r3, [r3, #12]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7f9 f8b4 	bl	8010726 <lwip_htonl>
 80175be:	4602      	mov	r2, r0
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	68da      	ldr	r2, [r3, #12]
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	1ad3      	subs	r3, r2, r3
 80175d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	8959      	ldrh	r1, [r3, #10]
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	8b3a      	ldrh	r2, [r7, #24]
 80175de:	1a8a      	subs	r2, r1, r2
 80175e0:	b292      	uxth	r2, r2
 80175e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	685b      	ldr	r3, [r3, #4]
 80175e8:	8919      	ldrh	r1, [r3, #8]
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	685b      	ldr	r3, [r3, #4]
 80175ee:	8b3a      	ldrh	r2, [r7, #24]
 80175f0:	1a8a      	subs	r2, r1, r2
 80175f2:	b292      	uxth	r2, r2
 80175f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	685b      	ldr	r3, [r3, #4]
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	68d2      	ldr	r2, [r2, #12]
 80175fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	68db      	ldr	r3, [r3, #12]
 8017604:	2200      	movs	r2, #0
 8017606:	741a      	strb	r2, [r3, #16]
 8017608:	2200      	movs	r2, #0
 801760a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	68da      	ldr	r2, [r3, #12]
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	7a9b      	ldrb	r3, [r3, #10]
 8017614:	f003 0301 	and.w	r3, r3, #1
 8017618:	2b00      	cmp	r3, #0
 801761a:	d001      	beq.n	8017620 <tcp_output_segment+0x158>
 801761c:	2318      	movs	r3, #24
 801761e:	e000      	b.n	8017622 <tcp_output_segment+0x15a>
 8017620:	2314      	movs	r3, #20
 8017622:	4413      	add	r3, r2
 8017624:	69fa      	ldr	r2, [r7, #28]
 8017626:	429a      	cmp	r2, r3
 8017628:	d006      	beq.n	8017638 <tcp_output_segment+0x170>
 801762a:	4b10      	ldr	r3, [pc, #64]	@ (801766c <tcp_output_segment+0x1a4>)
 801762c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017630:	4914      	ldr	r1, [pc, #80]	@ (8017684 <tcp_output_segment+0x1bc>)
 8017632:	4810      	ldr	r0, [pc, #64]	@ (8017674 <tcp_output_segment+0x1ac>)
 8017634:	f006 ff80 	bl	801e538 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	6858      	ldr	r0, [r3, #4]
 801763c:	68b9      	ldr	r1, [r7, #8]
 801763e:	68bb      	ldr	r3, [r7, #8]
 8017640:	1d1c      	adds	r4, r3, #4
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	7add      	ldrb	r5, [r3, #11]
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	7a9b      	ldrb	r3, [r3, #10]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	9202      	str	r2, [sp, #8]
 801764e:	2206      	movs	r2, #6
 8017650:	9201      	str	r2, [sp, #4]
 8017652:	9300      	str	r3, [sp, #0]
 8017654:	462b      	mov	r3, r5
 8017656:	4622      	mov	r2, r4
 8017658:	f004 fcc0 	bl	801bfdc <ip4_output_if>
 801765c:	4603      	mov	r3, r0
 801765e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017664:	4618      	mov	r0, r3
 8017666:	3720      	adds	r7, #32
 8017668:	46bd      	mov	sp, r7
 801766a:	bdb0      	pop	{r4, r5, r7, pc}
 801766c:	080237dc 	.word	0x080237dc
 8017670:	08023da0 	.word	0x08023da0
 8017674:	08023830 	.word	0x08023830
 8017678:	08023dc0 	.word	0x08023dc0
 801767c:	08023de0 	.word	0x08023de0
 8017680:	20017758 	.word	0x20017758
 8017684:	08023e04 	.word	0x08023e04

08017688 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017688:	b5b0      	push	{r4, r5, r7, lr}
 801768a:	b084      	sub	sp, #16
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d106      	bne.n	80176a4 <tcp_rexmit_rto_prepare+0x1c>
 8017696:	4b31      	ldr	r3, [pc, #196]	@ (801775c <tcp_rexmit_rto_prepare+0xd4>)
 8017698:	f240 6263 	movw	r2, #1635	@ 0x663
 801769c:	4930      	ldr	r1, [pc, #192]	@ (8017760 <tcp_rexmit_rto_prepare+0xd8>)
 801769e:	4831      	ldr	r0, [pc, #196]	@ (8017764 <tcp_rexmit_rto_prepare+0xdc>)
 80176a0:	f006 ff4a 	bl	801e538 <iprintf>

  if (pcb->unacked == NULL) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d102      	bne.n	80176b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80176ac:	f06f 0305 	mvn.w	r3, #5
 80176b0:	e050      	b.n	8017754 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176b6:	60fb      	str	r3, [r7, #12]
 80176b8:	e00b      	b.n	80176d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff fee4 	bl	8017488 <tcp_output_segment_busy>
 80176c0:	4603      	mov	r3, r0
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d002      	beq.n	80176cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80176c6:	f06f 0305 	mvn.w	r3, #5
 80176ca:	e043      	b.n	8017754 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	60fb      	str	r3, [r7, #12]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d1ef      	bne.n	80176ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80176da:	68f8      	ldr	r0, [r7, #12]
 80176dc:	f7ff fed4 	bl	8017488 <tcp_output_segment_busy>
 80176e0:	4603      	mov	r3, r0
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d002      	beq.n	80176ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80176e6:	f06f 0305 	mvn.w	r3, #5
 80176ea:	e033      	b.n	8017754 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2200      	movs	r2, #0
 8017700:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	8b5b      	ldrh	r3, [r3, #26]
 8017706:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801770a:	b29a      	uxth	r2, r3
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	68db      	ldr	r3, [r3, #12]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	4618      	mov	r0, r3
 8017718:	f7f9 f805 	bl	8010726 <lwip_htonl>
 801771c:	4604      	mov	r4, r0
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	891b      	ldrh	r3, [r3, #8]
 8017722:	461d      	mov	r5, r3
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	68db      	ldr	r3, [r3, #12]
 8017728:	899b      	ldrh	r3, [r3, #12]
 801772a:	b29b      	uxth	r3, r3
 801772c:	4618      	mov	r0, r3
 801772e:	f7f8 ffe5 	bl	80106fc <lwip_htons>
 8017732:	4603      	mov	r3, r0
 8017734:	b2db      	uxtb	r3, r3
 8017736:	f003 0303 	and.w	r3, r3, #3
 801773a:	2b00      	cmp	r3, #0
 801773c:	d001      	beq.n	8017742 <tcp_rexmit_rto_prepare+0xba>
 801773e:	2301      	movs	r3, #1
 8017740:	e000      	b.n	8017744 <tcp_rexmit_rto_prepare+0xbc>
 8017742:	2300      	movs	r3, #0
 8017744:	442b      	add	r3, r5
 8017746:	18e2      	adds	r2, r4, r3
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2200      	movs	r2, #0
 8017750:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017752:	2300      	movs	r3, #0
}
 8017754:	4618      	mov	r0, r3
 8017756:	3710      	adds	r7, #16
 8017758:	46bd      	mov	sp, r7
 801775a:	bdb0      	pop	{r4, r5, r7, pc}
 801775c:	080237dc 	.word	0x080237dc
 8017760:	08023e18 	.word	0x08023e18
 8017764:	08023830 	.word	0x08023830

08017768 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d106      	bne.n	8017784 <tcp_rexmit_rto_commit+0x1c>
 8017776:	4b0d      	ldr	r3, [pc, #52]	@ (80177ac <tcp_rexmit_rto_commit+0x44>)
 8017778:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801777c:	490c      	ldr	r1, [pc, #48]	@ (80177b0 <tcp_rexmit_rto_commit+0x48>)
 801777e:	480d      	ldr	r0, [pc, #52]	@ (80177b4 <tcp_rexmit_rto_commit+0x4c>)
 8017780:	f006 feda 	bl	801e538 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801778a:	2bff      	cmp	r3, #255	@ 0xff
 801778c:	d007      	beq.n	801779e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017794:	3301      	adds	r3, #1
 8017796:	b2da      	uxtb	r2, r3
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7ff fc7e 	bl	80170a0 <tcp_output>
}
 80177a4:	bf00      	nop
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	080237dc 	.word	0x080237dc
 80177b0:	08023e3c 	.word	0x08023e3c
 80177b4:	08023830 	.word	0x08023830

080177b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d106      	bne.n	80177d4 <tcp_rexmit_rto+0x1c>
 80177c6:	4b0a      	ldr	r3, [pc, #40]	@ (80177f0 <tcp_rexmit_rto+0x38>)
 80177c8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80177cc:	4909      	ldr	r1, [pc, #36]	@ (80177f4 <tcp_rexmit_rto+0x3c>)
 80177ce:	480a      	ldr	r0, [pc, #40]	@ (80177f8 <tcp_rexmit_rto+0x40>)
 80177d0:	f006 feb2 	bl	801e538 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7ff ff57 	bl	8017688 <tcp_rexmit_rto_prepare>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d102      	bne.n	80177e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f7ff ffc1 	bl	8017768 <tcp_rexmit_rto_commit>
  }
}
 80177e6:	bf00      	nop
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	080237dc 	.word	0x080237dc
 80177f4:	08023e60 	.word	0x08023e60
 80177f8:	08023830 	.word	0x08023830

080177fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80177fc:	b590      	push	{r4, r7, lr}
 80177fe:	b085      	sub	sp, #20
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d106      	bne.n	8017818 <tcp_rexmit+0x1c>
 801780a:	4b2f      	ldr	r3, [pc, #188]	@ (80178c8 <tcp_rexmit+0xcc>)
 801780c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017810:	492e      	ldr	r1, [pc, #184]	@ (80178cc <tcp_rexmit+0xd0>)
 8017812:	482f      	ldr	r0, [pc, #188]	@ (80178d0 <tcp_rexmit+0xd4>)
 8017814:	f006 fe90 	bl	801e538 <iprintf>

  if (pcb->unacked == NULL) {
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801781c:	2b00      	cmp	r3, #0
 801781e:	d102      	bne.n	8017826 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017820:	f06f 0305 	mvn.w	r3, #5
 8017824:	e04c      	b.n	80178c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801782a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801782c:	68b8      	ldr	r0, [r7, #8]
 801782e:	f7ff fe2b 	bl	8017488 <tcp_output_segment_busy>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d002      	beq.n	801783e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017838:	f06f 0305 	mvn.w	r3, #5
 801783c:	e040      	b.n	80178c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	681a      	ldr	r2, [r3, #0]
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	336c      	adds	r3, #108	@ 0x6c
 801784a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801784c:	e002      	b.n	8017854 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d011      	beq.n	8017880 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	68db      	ldr	r3, [r3, #12]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	4618      	mov	r0, r3
 8017866:	f7f8 ff5e 	bl	8010726 <lwip_htonl>
 801786a:	4604      	mov	r4, r0
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	4618      	mov	r0, r3
 8017874:	f7f8 ff57 	bl	8010726 <lwip_htonl>
 8017878:	4603      	mov	r3, r0
 801787a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801787c:	2b00      	cmp	r3, #0
 801787e:	dbe6      	blt.n	801784e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681a      	ldr	r2, [r3, #0]
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	68ba      	ldr	r2, [r7, #8]
 801788c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801788e:	68bb      	ldr	r3, [r7, #8]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d103      	bne.n	801789e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2200      	movs	r2, #0
 801789a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80178a4:	2bff      	cmp	r3, #255	@ 0xff
 80178a6:	d007      	beq.n	80178b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80178ae:	3301      	adds	r3, #1
 80178b0:	b2da      	uxtb	r2, r3
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	2200      	movs	r2, #0
 80178bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80178be:	2300      	movs	r3, #0
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3714      	adds	r7, #20
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd90      	pop	{r4, r7, pc}
 80178c8:	080237dc 	.word	0x080237dc
 80178cc:	08023e7c 	.word	0x08023e7c
 80178d0:	08023830 	.word	0x08023830

080178d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d106      	bne.n	80178f0 <tcp_rexmit_fast+0x1c>
 80178e2:	4b2a      	ldr	r3, [pc, #168]	@ (801798c <tcp_rexmit_fast+0xb8>)
 80178e4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80178e8:	4929      	ldr	r1, [pc, #164]	@ (8017990 <tcp_rexmit_fast+0xbc>)
 80178ea:	482a      	ldr	r0, [pc, #168]	@ (8017994 <tcp_rexmit_fast+0xc0>)
 80178ec:	f006 fe24 	bl	801e538 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d044      	beq.n	8017982 <tcp_rexmit_fast+0xae>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	8b5b      	ldrh	r3, [r3, #26]
 80178fc:	f003 0304 	and.w	r3, r3, #4
 8017900:	2b00      	cmp	r3, #0
 8017902:	d13e      	bne.n	8017982 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f7ff ff79 	bl	80177fc <tcp_rexmit>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d138      	bne.n	8017982 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801791c:	4293      	cmp	r3, r2
 801791e:	bf28      	it	cs
 8017920:	4613      	movcs	r3, r2
 8017922:	b29b      	uxth	r3, r3
 8017924:	0fda      	lsrs	r2, r3, #31
 8017926:	4413      	add	r3, r2
 8017928:	105b      	asrs	r3, r3, #1
 801792a:	b29a      	uxth	r2, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017938:	461a      	mov	r2, r3
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	429a      	cmp	r2, r3
 8017942:	d206      	bcs.n	8017952 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017948:	005b      	lsls	r3, r3, #1
 801794a:	b29a      	uxth	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801795c:	4619      	mov	r1, r3
 801795e:	0049      	lsls	r1, r1, #1
 8017960:	440b      	add	r3, r1
 8017962:	b29b      	uxth	r3, r3
 8017964:	4413      	add	r3, r2
 8017966:	b29a      	uxth	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	8b5b      	ldrh	r3, [r3, #26]
 8017972:	f043 0304 	orr.w	r3, r3, #4
 8017976:	b29a      	uxth	r2, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	2200      	movs	r2, #0
 8017980:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017982:	bf00      	nop
 8017984:	3708      	adds	r7, #8
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}
 801798a:	bf00      	nop
 801798c:	080237dc 	.word	0x080237dc
 8017990:	08023e94 	.word	0x08023e94
 8017994:	08023830 	.word	0x08023830

08017998 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	607b      	str	r3, [r7, #4]
 80179a2:	460b      	mov	r3, r1
 80179a4:	817b      	strh	r3, [r7, #10]
 80179a6:	4613      	mov	r3, r2
 80179a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80179aa:	897a      	ldrh	r2, [r7, #10]
 80179ac:	893b      	ldrh	r3, [r7, #8]
 80179ae:	4413      	add	r3, r2
 80179b0:	b29b      	uxth	r3, r3
 80179b2:	3314      	adds	r3, #20
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80179ba:	4619      	mov	r1, r3
 80179bc:	2022      	movs	r0, #34	@ 0x22
 80179be:	f7fa faa5 	bl	8011f0c <pbuf_alloc>
 80179c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d04d      	beq.n	8017a66 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80179ca:	897b      	ldrh	r3, [r7, #10]
 80179cc:	3313      	adds	r3, #19
 80179ce:	697a      	ldr	r2, [r7, #20]
 80179d0:	8952      	ldrh	r2, [r2, #10]
 80179d2:	4293      	cmp	r3, r2
 80179d4:	db06      	blt.n	80179e4 <tcp_output_alloc_header_common+0x4c>
 80179d6:	4b26      	ldr	r3, [pc, #152]	@ (8017a70 <tcp_output_alloc_header_common+0xd8>)
 80179d8:	f240 7223 	movw	r2, #1827	@ 0x723
 80179dc:	4925      	ldr	r1, [pc, #148]	@ (8017a74 <tcp_output_alloc_header_common+0xdc>)
 80179de:	4826      	ldr	r0, [pc, #152]	@ (8017a78 <tcp_output_alloc_header_common+0xe0>)
 80179e0:	f006 fdaa 	bl	801e538 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80179ea:	8c3b      	ldrh	r3, [r7, #32]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7f8 fe85 	bl	80106fc <lwip_htons>
 80179f2:	4603      	mov	r3, r0
 80179f4:	461a      	mov	r2, r3
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80179fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7f8 fe7d 	bl	80106fc <lwip_htons>
 8017a02:	4603      	mov	r3, r0
 8017a04:	461a      	mov	r2, r3
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017a0a:	693b      	ldr	r3, [r7, #16]
 8017a0c:	687a      	ldr	r2, [r7, #4]
 8017a0e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017a10:	68f8      	ldr	r0, [r7, #12]
 8017a12:	f7f8 fe88 	bl	8010726 <lwip_htonl>
 8017a16:	4602      	mov	r2, r0
 8017a18:	693b      	ldr	r3, [r7, #16]
 8017a1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017a1c:	897b      	ldrh	r3, [r7, #10]
 8017a1e:	089b      	lsrs	r3, r3, #2
 8017a20:	b29b      	uxth	r3, r3
 8017a22:	3305      	adds	r3, #5
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	031b      	lsls	r3, r3, #12
 8017a28:	b29a      	uxth	r2, r3
 8017a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	4313      	orrs	r3, r2
 8017a32:	b29b      	uxth	r3, r3
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7f8 fe61 	bl	80106fc <lwip_htons>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017a42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a44:	4618      	mov	r0, r3
 8017a46:	f7f8 fe59 	bl	80106fc <lwip_htons>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	461a      	mov	r2, r3
 8017a4e:	693b      	ldr	r3, [r7, #16]
 8017a50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	2200      	movs	r2, #0
 8017a56:	741a      	strb	r2, [r3, #16]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	749a      	strb	r2, [r3, #18]
 8017a62:	2200      	movs	r2, #0
 8017a64:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017a66:	697b      	ldr	r3, [r7, #20]
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3718      	adds	r7, #24
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	080237dc 	.word	0x080237dc
 8017a74:	08023eb4 	.word	0x08023eb4
 8017a78:	08023830 	.word	0x08023830

08017a7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017a7c:	b5b0      	push	{r4, r5, r7, lr}
 8017a7e:	b08a      	sub	sp, #40	@ 0x28
 8017a80:	af04      	add	r7, sp, #16
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	607b      	str	r3, [r7, #4]
 8017a86:	460b      	mov	r3, r1
 8017a88:	817b      	strh	r3, [r7, #10]
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d106      	bne.n	8017aa2 <tcp_output_alloc_header+0x26>
 8017a94:	4b15      	ldr	r3, [pc, #84]	@ (8017aec <tcp_output_alloc_header+0x70>)
 8017a96:	f240 7242 	movw	r2, #1858	@ 0x742
 8017a9a:	4915      	ldr	r1, [pc, #84]	@ (8017af0 <tcp_output_alloc_header+0x74>)
 8017a9c:	4815      	ldr	r0, [pc, #84]	@ (8017af4 <tcp_output_alloc_header+0x78>)
 8017a9e:	f006 fd4b 	bl	801e538 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	8adb      	ldrh	r3, [r3, #22]
 8017aaa:	68fa      	ldr	r2, [r7, #12]
 8017aac:	8b12      	ldrh	r2, [r2, #24]
 8017aae:	68f9      	ldr	r1, [r7, #12]
 8017ab0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017ab2:	893d      	ldrh	r5, [r7, #8]
 8017ab4:	897c      	ldrh	r4, [r7, #10]
 8017ab6:	9103      	str	r1, [sp, #12]
 8017ab8:	2110      	movs	r1, #16
 8017aba:	9102      	str	r1, [sp, #8]
 8017abc:	9201      	str	r2, [sp, #4]
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	462a      	mov	r2, r5
 8017ac4:	4621      	mov	r1, r4
 8017ac6:	f7ff ff67 	bl	8017998 <tcp_output_alloc_header_common>
 8017aca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017acc:	697b      	ldr	r3, [r7, #20]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d006      	beq.n	8017ae0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ad6:	68fa      	ldr	r2, [r7, #12]
 8017ad8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017ada:	441a      	add	r2, r3
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017ae0:	697b      	ldr	r3, [r7, #20]
}
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	3718      	adds	r7, #24
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8017aea:	bf00      	nop
 8017aec:	080237dc 	.word	0x080237dc
 8017af0:	08023ee4 	.word	0x08023ee4
 8017af4:	08023830 	.word	0x08023830

08017af8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b088      	sub	sp, #32
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	4611      	mov	r1, r2
 8017b04:	461a      	mov	r2, r3
 8017b06:	460b      	mov	r3, r1
 8017b08:	71fb      	strb	r3, [r7, #7]
 8017b0a:	4613      	mov	r3, r2
 8017b0c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d106      	bne.n	8017b26 <tcp_output_fill_options+0x2e>
 8017b18:	4b12      	ldr	r3, [pc, #72]	@ (8017b64 <tcp_output_fill_options+0x6c>)
 8017b1a:	f240 7256 	movw	r2, #1878	@ 0x756
 8017b1e:	4912      	ldr	r1, [pc, #72]	@ (8017b68 <tcp_output_fill_options+0x70>)
 8017b20:	4812      	ldr	r0, [pc, #72]	@ (8017b6c <tcp_output_fill_options+0x74>)
 8017b22:	f006 fd09 	bl	801e538 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	3314      	adds	r3, #20
 8017b30:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017b32:	8bfb      	ldrh	r3, [r7, #30]
 8017b34:	009b      	lsls	r3, r3, #2
 8017b36:	461a      	mov	r2, r3
 8017b38:	79fb      	ldrb	r3, [r7, #7]
 8017b3a:	009b      	lsls	r3, r3, #2
 8017b3c:	f003 0304 	and.w	r3, r3, #4
 8017b40:	4413      	add	r3, r2
 8017b42:	3314      	adds	r3, #20
 8017b44:	69ba      	ldr	r2, [r7, #24]
 8017b46:	4413      	add	r3, r2
 8017b48:	697a      	ldr	r2, [r7, #20]
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d006      	beq.n	8017b5c <tcp_output_fill_options+0x64>
 8017b4e:	4b05      	ldr	r3, [pc, #20]	@ (8017b64 <tcp_output_fill_options+0x6c>)
 8017b50:	f240 7275 	movw	r2, #1909	@ 0x775
 8017b54:	4906      	ldr	r1, [pc, #24]	@ (8017b70 <tcp_output_fill_options+0x78>)
 8017b56:	4805      	ldr	r0, [pc, #20]	@ (8017b6c <tcp_output_fill_options+0x74>)
 8017b58:	f006 fcee 	bl	801e538 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017b5c:	bf00      	nop
 8017b5e:	3720      	adds	r7, #32
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	080237dc 	.word	0x080237dc
 8017b68:	08023f0c 	.word	0x08023f0c
 8017b6c:	08023830 	.word	0x08023830
 8017b70:	08023e04 	.word	0x08023e04

08017b74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b08a      	sub	sp, #40	@ 0x28
 8017b78:	af04      	add	r7, sp, #16
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
 8017b80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d106      	bne.n	8017b96 <tcp_output_control_segment+0x22>
 8017b88:	4b1c      	ldr	r3, [pc, #112]	@ (8017bfc <tcp_output_control_segment+0x88>)
 8017b8a:	f240 7287 	movw	r2, #1927	@ 0x787
 8017b8e:	491c      	ldr	r1, [pc, #112]	@ (8017c00 <tcp_output_control_segment+0x8c>)
 8017b90:	481c      	ldr	r0, [pc, #112]	@ (8017c04 <tcp_output_control_segment+0x90>)
 8017b92:	f006 fcd1 	bl	801e538 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017b96:	683a      	ldr	r2, [r7, #0]
 8017b98:	6879      	ldr	r1, [r7, #4]
 8017b9a:	68f8      	ldr	r0, [r7, #12]
 8017b9c:	f7fe ff42 	bl	8016a24 <tcp_route>
 8017ba0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017ba2:	693b      	ldr	r3, [r7, #16]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d102      	bne.n	8017bae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017ba8:	23fc      	movs	r3, #252	@ 0xfc
 8017baa:	75fb      	strb	r3, [r7, #23]
 8017bac:	e01c      	b.n	8017be8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d006      	beq.n	8017bc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	7adb      	ldrb	r3, [r3, #11]
 8017bb8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	7a9b      	ldrb	r3, [r3, #10]
 8017bbe:	757b      	strb	r3, [r7, #21]
 8017bc0:	e003      	b.n	8017bca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017bc2:	23ff      	movs	r3, #255	@ 0xff
 8017bc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017bca:	7dba      	ldrb	r2, [r7, #22]
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	9302      	str	r3, [sp, #8]
 8017bd0:	2306      	movs	r3, #6
 8017bd2:	9301      	str	r3, [sp, #4]
 8017bd4:	7d7b      	ldrb	r3, [r7, #21]
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	4613      	mov	r3, r2
 8017bda:	683a      	ldr	r2, [r7, #0]
 8017bdc:	6879      	ldr	r1, [r7, #4]
 8017bde:	68b8      	ldr	r0, [r7, #8]
 8017be0:	f004 f9fc 	bl	801bfdc <ip4_output_if>
 8017be4:	4603      	mov	r3, r0
 8017be6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017be8:	68b8      	ldr	r0, [r7, #8]
 8017bea:	f7fa fc73 	bl	80124d4 <pbuf_free>
  return err;
 8017bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3718      	adds	r7, #24
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	080237dc 	.word	0x080237dc
 8017c00:	08023f34 	.word	0x08023f34
 8017c04:	08023830 	.word	0x08023830

08017c08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017c08:	b590      	push	{r4, r7, lr}
 8017c0a:	b08b      	sub	sp, #44	@ 0x2c
 8017c0c:	af04      	add	r7, sp, #16
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	607a      	str	r2, [r7, #4]
 8017c14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d106      	bne.n	8017c2a <tcp_rst+0x22>
 8017c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8017c9c <tcp_rst+0x94>)
 8017c1e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017c22:	491f      	ldr	r1, [pc, #124]	@ (8017ca0 <tcp_rst+0x98>)
 8017c24:	481f      	ldr	r0, [pc, #124]	@ (8017ca4 <tcp_rst+0x9c>)
 8017c26:	f006 fc87 	bl	801e538 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d106      	bne.n	8017c3e <tcp_rst+0x36>
 8017c30:	4b1a      	ldr	r3, [pc, #104]	@ (8017c9c <tcp_rst+0x94>)
 8017c32:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017c36:	491c      	ldr	r1, [pc, #112]	@ (8017ca8 <tcp_rst+0xa0>)
 8017c38:	481a      	ldr	r0, [pc, #104]	@ (8017ca4 <tcp_rst+0x9c>)
 8017c3a:	f006 fc7d 	bl	801e538 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017c3e:	2300      	movs	r3, #0
 8017c40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017c42:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017c46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017c48:	7dfb      	ldrb	r3, [r7, #23]
 8017c4a:	b29c      	uxth	r4, r3
 8017c4c:	68b8      	ldr	r0, [r7, #8]
 8017c4e:	f7f8 fd6a 	bl	8010726 <lwip_htonl>
 8017c52:	4602      	mov	r2, r0
 8017c54:	8abb      	ldrh	r3, [r7, #20]
 8017c56:	9303      	str	r3, [sp, #12]
 8017c58:	2314      	movs	r3, #20
 8017c5a:	9302      	str	r3, [sp, #8]
 8017c5c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c5e:	9301      	str	r3, [sp, #4]
 8017c60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	4613      	mov	r3, r2
 8017c66:	2200      	movs	r2, #0
 8017c68:	4621      	mov	r1, r4
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7ff fe94 	bl	8017998 <tcp_output_alloc_header_common>
 8017c70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d00c      	beq.n	8017c92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017c78:	7dfb      	ldrb	r3, [r7, #23]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	6939      	ldr	r1, [r7, #16]
 8017c7e:	68f8      	ldr	r0, [r7, #12]
 8017c80:	f7ff ff3a 	bl	8017af8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c86:	683a      	ldr	r2, [r7, #0]
 8017c88:	6939      	ldr	r1, [r7, #16]
 8017c8a:	68f8      	ldr	r0, [r7, #12]
 8017c8c:	f7ff ff72 	bl	8017b74 <tcp_output_control_segment>
 8017c90:	e000      	b.n	8017c94 <tcp_rst+0x8c>
    return;
 8017c92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017c94:	371c      	adds	r7, #28
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd90      	pop	{r4, r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	080237dc 	.word	0x080237dc
 8017ca0:	08023f60 	.word	0x08023f60
 8017ca4:	08023830 	.word	0x08023830
 8017ca8:	08023f7c 	.word	0x08023f7c

08017cac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017cac:	b590      	push	{r4, r7, lr}
 8017cae:	b087      	sub	sp, #28
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017cb8:	2300      	movs	r3, #0
 8017cba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d106      	bne.n	8017cd0 <tcp_send_empty_ack+0x24>
 8017cc2:	4b28      	ldr	r3, [pc, #160]	@ (8017d64 <tcp_send_empty_ack+0xb8>)
 8017cc4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017cc8:	4927      	ldr	r1, [pc, #156]	@ (8017d68 <tcp_send_empty_ack+0xbc>)
 8017cca:	4828      	ldr	r0, [pc, #160]	@ (8017d6c <tcp_send_empty_ack+0xc0>)
 8017ccc:	f006 fc34 	bl	801e538 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017cd0:	7dfb      	ldrb	r3, [r7, #23]
 8017cd2:	009b      	lsls	r3, r3, #2
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	f003 0304 	and.w	r3, r3, #4
 8017cda:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017cdc:	7d7b      	ldrb	r3, [r7, #21]
 8017cde:	b29c      	uxth	r4, r3
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7f8 fd1e 	bl	8010726 <lwip_htonl>
 8017cea:	4603      	mov	r3, r0
 8017cec:	2200      	movs	r2, #0
 8017cee:	4621      	mov	r1, r4
 8017cf0:	6878      	ldr	r0, [r7, #4]
 8017cf2:	f7ff fec3 	bl	8017a7c <tcp_output_alloc_header>
 8017cf6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d109      	bne.n	8017d12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	8b5b      	ldrh	r3, [r3, #26]
 8017d02:	f043 0303 	orr.w	r3, r3, #3
 8017d06:	b29a      	uxth	r2, r3
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017d0c:	f06f 0301 	mvn.w	r3, #1
 8017d10:	e023      	b.n	8017d5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017d12:	7dbb      	ldrb	r3, [r7, #22]
 8017d14:	7dfa      	ldrb	r2, [r7, #23]
 8017d16:	6939      	ldr	r1, [r7, #16]
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f7ff feed 	bl	8017af8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	3304      	adds	r3, #4
 8017d24:	6939      	ldr	r1, [r7, #16]
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f7ff ff24 	bl	8017b74 <tcp_output_control_segment>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d007      	beq.n	8017d48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	8b5b      	ldrh	r3, [r3, #26]
 8017d3c:	f043 0303 	orr.w	r3, r3, #3
 8017d40:	b29a      	uxth	r2, r3
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	835a      	strh	r2, [r3, #26]
 8017d46:	e006      	b.n	8017d56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	8b5b      	ldrh	r3, [r3, #26]
 8017d4c:	f023 0303 	bic.w	r3, r3, #3
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	371c      	adds	r7, #28
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd90      	pop	{r4, r7, pc}
 8017d62:	bf00      	nop
 8017d64:	080237dc 	.word	0x080237dc
 8017d68:	08023f98 	.word	0x08023f98
 8017d6c:	08023830 	.word	0x08023830

08017d70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017d70:	b590      	push	{r4, r7, lr}
 8017d72:	b087      	sub	sp, #28
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d78:	2300      	movs	r3, #0
 8017d7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d106      	bne.n	8017d90 <tcp_keepalive+0x20>
 8017d82:	4b18      	ldr	r3, [pc, #96]	@ (8017de4 <tcp_keepalive+0x74>)
 8017d84:	f640 0224 	movw	r2, #2084	@ 0x824
 8017d88:	4917      	ldr	r1, [pc, #92]	@ (8017de8 <tcp_keepalive+0x78>)
 8017d8a:	4818      	ldr	r0, [pc, #96]	@ (8017dec <tcp_keepalive+0x7c>)
 8017d8c:	f006 fbd4 	bl	801e538 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017d90:	7dfb      	ldrb	r3, [r7, #23]
 8017d92:	b29c      	uxth	r4, r3
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d98:	3b01      	subs	r3, #1
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7f8 fcc3 	bl	8010726 <lwip_htonl>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2200      	movs	r2, #0
 8017da4:	4621      	mov	r1, r4
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f7ff fe68 	bl	8017a7c <tcp_output_alloc_header>
 8017dac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d102      	bne.n	8017dba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017db4:	f04f 33ff 	mov.w	r3, #4294967295
 8017db8:	e010      	b.n	8017ddc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017dba:	7dfb      	ldrb	r3, [r7, #23]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	6939      	ldr	r1, [r7, #16]
 8017dc0:	6878      	ldr	r0, [r7, #4]
 8017dc2:	f7ff fe99 	bl	8017af8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	3304      	adds	r3, #4
 8017dcc:	6939      	ldr	r1, [r7, #16]
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f7ff fed0 	bl	8017b74 <tcp_output_control_segment>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	371c      	adds	r7, #28
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd90      	pop	{r4, r7, pc}
 8017de4:	080237dc 	.word	0x080237dc
 8017de8:	08023fb8 	.word	0x08023fb8
 8017dec:	08023830 	.word	0x08023830

08017df0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017df0:	b590      	push	{r4, r7, lr}
 8017df2:	b08b      	sub	sp, #44	@ 0x2c
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017df8:	2300      	movs	r3, #0
 8017dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d106      	bne.n	8017e12 <tcp_zero_window_probe+0x22>
 8017e04:	4b4c      	ldr	r3, [pc, #304]	@ (8017f38 <tcp_zero_window_probe+0x148>)
 8017e06:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017e0a:	494c      	ldr	r1, [pc, #304]	@ (8017f3c <tcp_zero_window_probe+0x14c>)
 8017e0c:	484c      	ldr	r0, [pc, #304]	@ (8017f40 <tcp_zero_window_probe+0x150>)
 8017e0e:	f006 fb93 	bl	801e538 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017e16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017e18:	6a3b      	ldr	r3, [r7, #32]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d101      	bne.n	8017e22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	e086      	b.n	8017f30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017e28:	2bff      	cmp	r3, #255	@ 0xff
 8017e2a:	d007      	beq.n	8017e3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017e32:	3301      	adds	r3, #1
 8017e34:	b2da      	uxtb	r2, r3
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017e3c:	6a3b      	ldr	r3, [r7, #32]
 8017e3e:	68db      	ldr	r3, [r3, #12]
 8017e40:	899b      	ldrh	r3, [r3, #12]
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7f8 fc59 	bl	80106fc <lwip_htons>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	b2db      	uxtb	r3, r3
 8017e4e:	f003 0301 	and.w	r3, r3, #1
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d005      	beq.n	8017e62 <tcp_zero_window_probe+0x72>
 8017e56:	6a3b      	ldr	r3, [r7, #32]
 8017e58:	891b      	ldrh	r3, [r3, #8]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d101      	bne.n	8017e62 <tcp_zero_window_probe+0x72>
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e000      	b.n	8017e64 <tcp_zero_window_probe+0x74>
 8017e62:	2300      	movs	r3, #0
 8017e64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017e66:	7ffb      	ldrb	r3, [r7, #31]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	bf0c      	ite	eq
 8017e6c:	2301      	moveq	r3, #1
 8017e6e:	2300      	movne	r3, #0
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e78:	b299      	uxth	r1, r3
 8017e7a:	6a3b      	ldr	r3, [r7, #32]
 8017e7c:	68db      	ldr	r3, [r3, #12]
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	8bba      	ldrh	r2, [r7, #28]
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f7ff fdfa 	bl	8017a7c <tcp_output_alloc_header>
 8017e88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017e8a:	69bb      	ldr	r3, [r7, #24]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d102      	bne.n	8017e96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017e90:	f04f 33ff 	mov.w	r3, #4294967295
 8017e94:	e04c      	b.n	8017f30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017e9c:	7ffb      	ldrb	r3, [r7, #31]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d011      	beq.n	8017ec6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	899b      	ldrh	r3, [r3, #12]
 8017ea6:	b29b      	uxth	r3, r3
 8017ea8:	b21b      	sxth	r3, r3
 8017eaa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017eae:	b21c      	sxth	r4, r3
 8017eb0:	2011      	movs	r0, #17
 8017eb2:	f7f8 fc23 	bl	80106fc <lwip_htons>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	b21b      	sxth	r3, r3
 8017eba:	4323      	orrs	r3, r4
 8017ebc:	b21b      	sxth	r3, r3
 8017ebe:	b29a      	uxth	r2, r3
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	819a      	strh	r2, [r3, #12]
 8017ec4:	e010      	b.n	8017ee8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	3314      	adds	r3, #20
 8017ecc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017ece:	6a3b      	ldr	r3, [r7, #32]
 8017ed0:	6858      	ldr	r0, [r3, #4]
 8017ed2:	6a3b      	ldr	r3, [r7, #32]
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	891a      	ldrh	r2, [r3, #8]
 8017ed8:	6a3b      	ldr	r3, [r7, #32]
 8017eda:	891b      	ldrh	r3, [r3, #8]
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	2201      	movs	r2, #1
 8017ee2:	6939      	ldr	r1, [r7, #16]
 8017ee4:	f7fa fcfc 	bl	80128e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017ee8:	6a3b      	ldr	r3, [r7, #32]
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7f8 fc19 	bl	8010726 <lwip_htonl>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	1ad3      	subs	r3, r2, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	da02      	bge.n	8017f0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	68fa      	ldr	r2, [r7, #12]
 8017f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f10:	2200      	movs	r2, #0
 8017f12:	69b9      	ldr	r1, [r7, #24]
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f7ff fdef 	bl	8017af8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017f1a:	687a      	ldr	r2, [r7, #4]
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	3304      	adds	r3, #4
 8017f20:	69b9      	ldr	r1, [r7, #24]
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f7ff fe26 	bl	8017b74 <tcp_output_control_segment>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	372c      	adds	r7, #44	@ 0x2c
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd90      	pop	{r4, r7, pc}
 8017f38:	080237dc 	.word	0x080237dc
 8017f3c:	08023fd4 	.word	0x08023fd4
 8017f40:	08023830 	.word	0x08023830

08017f44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017f4c:	f7fa ff10 	bl	8012d70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017f50:	4b0a      	ldr	r3, [pc, #40]	@ (8017f7c <tcpip_tcp_timer+0x38>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d103      	bne.n	8017f60 <tcpip_tcp_timer+0x1c>
 8017f58:	4b09      	ldr	r3, [pc, #36]	@ (8017f80 <tcpip_tcp_timer+0x3c>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d005      	beq.n	8017f6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017f60:	2200      	movs	r2, #0
 8017f62:	4908      	ldr	r1, [pc, #32]	@ (8017f84 <tcpip_tcp_timer+0x40>)
 8017f64:	20fa      	movs	r0, #250	@ 0xfa
 8017f66:	f000 f8f3 	bl	8018150 <sys_timeout>
 8017f6a:	e003      	b.n	8017f74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017f6c:	4b06      	ldr	r3, [pc, #24]	@ (8017f88 <tcpip_tcp_timer+0x44>)
 8017f6e:	2200      	movs	r2, #0
 8017f70:	601a      	str	r2, [r3, #0]
  }
}
 8017f72:	bf00      	nop
 8017f74:	bf00      	nop
 8017f76:	3708      	adds	r7, #8
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}
 8017f7c:	20017764 	.word	0x20017764
 8017f80:	20017768 	.word	0x20017768
 8017f84:	08017f45 	.word	0x08017f45
 8017f88:	200177b0 	.word	0x200177b0

08017f8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017f90:	4b0a      	ldr	r3, [pc, #40]	@ (8017fbc <tcp_timer_needed+0x30>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d10f      	bne.n	8017fb8 <tcp_timer_needed+0x2c>
 8017f98:	4b09      	ldr	r3, [pc, #36]	@ (8017fc0 <tcp_timer_needed+0x34>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d103      	bne.n	8017fa8 <tcp_timer_needed+0x1c>
 8017fa0:	4b08      	ldr	r3, [pc, #32]	@ (8017fc4 <tcp_timer_needed+0x38>)
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d007      	beq.n	8017fb8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017fa8:	4b04      	ldr	r3, [pc, #16]	@ (8017fbc <tcp_timer_needed+0x30>)
 8017faa:	2201      	movs	r2, #1
 8017fac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017fae:	2200      	movs	r2, #0
 8017fb0:	4905      	ldr	r1, [pc, #20]	@ (8017fc8 <tcp_timer_needed+0x3c>)
 8017fb2:	20fa      	movs	r0, #250	@ 0xfa
 8017fb4:	f000 f8cc 	bl	8018150 <sys_timeout>
  }
}
 8017fb8:	bf00      	nop
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	200177b0 	.word	0x200177b0
 8017fc0:	20017764 	.word	0x20017764
 8017fc4:	20017768 	.word	0x20017768
 8017fc8:	08017f45 	.word	0x08017f45

08017fcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b086      	sub	sp, #24
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017fd8:	200a      	movs	r0, #10
 8017fda:	f7f9 fb55 	bl	8011688 <memp_malloc>
 8017fde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017fe0:	693b      	ldr	r3, [r7, #16]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d109      	bne.n	8017ffa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d151      	bne.n	8018090 <sys_timeout_abs+0xc4>
 8017fec:	4b2a      	ldr	r3, [pc, #168]	@ (8018098 <sys_timeout_abs+0xcc>)
 8017fee:	22be      	movs	r2, #190	@ 0xbe
 8017ff0:	492a      	ldr	r1, [pc, #168]	@ (801809c <sys_timeout_abs+0xd0>)
 8017ff2:	482b      	ldr	r0, [pc, #172]	@ (80180a0 <sys_timeout_abs+0xd4>)
 8017ff4:	f006 faa0 	bl	801e538 <iprintf>
    return;
 8017ff8:	e04a      	b.n	8018090 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	68ba      	ldr	r2, [r7, #8]
 8018004:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018006:	693b      	ldr	r3, [r7, #16]
 8018008:	687a      	ldr	r2, [r7, #4]
 801800a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	68fa      	ldr	r2, [r7, #12]
 8018010:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018012:	4b24      	ldr	r3, [pc, #144]	@ (80180a4 <sys_timeout_abs+0xd8>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d103      	bne.n	8018022 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801801a:	4a22      	ldr	r2, [pc, #136]	@ (80180a4 <sys_timeout_abs+0xd8>)
 801801c:	693b      	ldr	r3, [r7, #16]
 801801e:	6013      	str	r3, [r2, #0]
    return;
 8018020:	e037      	b.n	8018092 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018022:	693b      	ldr	r3, [r7, #16]
 8018024:	685a      	ldr	r2, [r3, #4]
 8018026:	4b1f      	ldr	r3, [pc, #124]	@ (80180a4 <sys_timeout_abs+0xd8>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	1ad3      	subs	r3, r2, r3
 801802e:	0fdb      	lsrs	r3, r3, #31
 8018030:	f003 0301 	and.w	r3, r3, #1
 8018034:	b2db      	uxtb	r3, r3
 8018036:	2b00      	cmp	r3, #0
 8018038:	d007      	beq.n	801804a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801803a:	4b1a      	ldr	r3, [pc, #104]	@ (80180a4 <sys_timeout_abs+0xd8>)
 801803c:	681a      	ldr	r2, [r3, #0]
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018042:	4a18      	ldr	r2, [pc, #96]	@ (80180a4 <sys_timeout_abs+0xd8>)
 8018044:	693b      	ldr	r3, [r7, #16]
 8018046:	6013      	str	r3, [r2, #0]
 8018048:	e023      	b.n	8018092 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801804a:	4b16      	ldr	r3, [pc, #88]	@ (80180a4 <sys_timeout_abs+0xd8>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	617b      	str	r3, [r7, #20]
 8018050:	e01a      	b.n	8018088 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d00b      	beq.n	8018072 <sys_timeout_abs+0xa6>
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	685a      	ldr	r2, [r3, #4]
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	1ad3      	subs	r3, r2, r3
 8018066:	0fdb      	lsrs	r3, r3, #31
 8018068:	f003 0301 	and.w	r3, r3, #1
 801806c:	b2db      	uxtb	r3, r3
 801806e:	2b00      	cmp	r3, #0
 8018070:	d007      	beq.n	8018082 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	681a      	ldr	r2, [r3, #0]
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	693a      	ldr	r2, [r7, #16]
 801807e:	601a      	str	r2, [r3, #0]
        break;
 8018080:	e007      	b.n	8018092 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	617b      	str	r3, [r7, #20]
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d1e1      	bne.n	8018052 <sys_timeout_abs+0x86>
 801808e:	e000      	b.n	8018092 <sys_timeout_abs+0xc6>
    return;
 8018090:	bf00      	nop
      }
    }
  }
}
 8018092:	3718      	adds	r7, #24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	08023ff8 	.word	0x08023ff8
 801809c:	0802402c 	.word	0x0802402c
 80180a0:	0802406c 	.word	0x0802406c
 80180a4:	200177a8 	.word	0x200177a8

080180a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b086      	sub	sp, #24
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80180b4:	697b      	ldr	r3, [r7, #20]
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	4798      	blx	r3

  now = sys_now();
 80180ba:	f7f1 fbbd 	bl	8009838 <sys_now>
 80180be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	4b0f      	ldr	r3, [pc, #60]	@ (8018104 <lwip_cyclic_timer+0x5c>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	4413      	add	r3, r2
 80180ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80180cc:	68fa      	ldr	r2, [r7, #12]
 80180ce:	693b      	ldr	r3, [r7, #16]
 80180d0:	1ad3      	subs	r3, r2, r3
 80180d2:	0fdb      	lsrs	r3, r3, #31
 80180d4:	f003 0301 	and.w	r3, r3, #1
 80180d8:	b2db      	uxtb	r3, r3
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d009      	beq.n	80180f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	681a      	ldr	r2, [r3, #0]
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	4413      	add	r3, r2
 80180e6:	687a      	ldr	r2, [r7, #4]
 80180e8:	4907      	ldr	r1, [pc, #28]	@ (8018108 <lwip_cyclic_timer+0x60>)
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7ff ff6e 	bl	8017fcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80180f0:	e004      	b.n	80180fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80180f2:	687a      	ldr	r2, [r7, #4]
 80180f4:	4904      	ldr	r1, [pc, #16]	@ (8018108 <lwip_cyclic_timer+0x60>)
 80180f6:	68f8      	ldr	r0, [r7, #12]
 80180f8:	f7ff ff68 	bl	8017fcc <sys_timeout_abs>
}
 80180fc:	bf00      	nop
 80180fe:	3718      	adds	r7, #24
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}
 8018104:	200177ac 	.word	0x200177ac
 8018108:	080180a9 	.word	0x080180a9

0801810c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b082      	sub	sp, #8
 8018110:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018112:	2301      	movs	r3, #1
 8018114:	607b      	str	r3, [r7, #4]
 8018116:	e00e      	b.n	8018136 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018118:	4a0b      	ldr	r2, [pc, #44]	@ (8018148 <sys_timeouts_init+0x3c>)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	4a08      	ldr	r2, [pc, #32]	@ (8018148 <sys_timeouts_init+0x3c>)
 8018126:	4413      	add	r3, r2
 8018128:	461a      	mov	r2, r3
 801812a:	4908      	ldr	r1, [pc, #32]	@ (801814c <sys_timeouts_init+0x40>)
 801812c:	f000 f810 	bl	8018150 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	3301      	adds	r3, #1
 8018134:	607b      	str	r3, [r7, #4]
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2b05      	cmp	r3, #5
 801813a:	d9ed      	bls.n	8018118 <sys_timeouts_init+0xc>
  }
}
 801813c:	bf00      	nop
 801813e:	bf00      	nop
 8018140:	3708      	adds	r7, #8
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	080251ec 	.word	0x080251ec
 801814c:	080180a9 	.word	0x080180a9

08018150 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b086      	sub	sp, #24
 8018154:	af00      	add	r7, sp, #0
 8018156:	60f8      	str	r0, [r7, #12]
 8018158:	60b9      	str	r1, [r7, #8]
 801815a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018162:	d306      	bcc.n	8018172 <sys_timeout+0x22>
 8018164:	4b0a      	ldr	r3, [pc, #40]	@ (8018190 <sys_timeout+0x40>)
 8018166:	f240 1229 	movw	r2, #297	@ 0x129
 801816a:	490a      	ldr	r1, [pc, #40]	@ (8018194 <sys_timeout+0x44>)
 801816c:	480a      	ldr	r0, [pc, #40]	@ (8018198 <sys_timeout+0x48>)
 801816e:	f006 f9e3 	bl	801e538 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018172:	f7f1 fb61 	bl	8009838 <sys_now>
 8018176:	4602      	mov	r2, r0
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	4413      	add	r3, r2
 801817c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801817e:	687a      	ldr	r2, [r7, #4]
 8018180:	68b9      	ldr	r1, [r7, #8]
 8018182:	6978      	ldr	r0, [r7, #20]
 8018184:	f7ff ff22 	bl	8017fcc <sys_timeout_abs>
#endif
}
 8018188:	bf00      	nop
 801818a:	3718      	adds	r7, #24
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	08023ff8 	.word	0x08023ff8
 8018194:	08024094 	.word	0x08024094
 8018198:	0802406c 	.word	0x0802406c

0801819c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b084      	sub	sp, #16
 80181a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80181a2:	f7f1 fb49 	bl	8009838 <sys_now>
 80181a6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80181a8:	4b17      	ldr	r3, [pc, #92]	@ (8018208 <sys_check_timeouts+0x6c>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d022      	beq.n	80181fa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	68fa      	ldr	r2, [r7, #12]
 80181ba:	1ad3      	subs	r3, r2, r3
 80181bc:	0fdb      	lsrs	r3, r3, #31
 80181be:	f003 0301 	and.w	r3, r3, #1
 80181c2:	b2db      	uxtb	r3, r3
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d11a      	bne.n	80181fe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	4a0e      	ldr	r2, [pc, #56]	@ (8018208 <sys_check_timeouts+0x6c>)
 80181ce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	689b      	ldr	r3, [r3, #8]
 80181d4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	68db      	ldr	r3, [r3, #12]
 80181da:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	685b      	ldr	r3, [r3, #4]
 80181e0:	4a0a      	ldr	r2, [pc, #40]	@ (801820c <sys_check_timeouts+0x70>)
 80181e2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80181e4:	68b9      	ldr	r1, [r7, #8]
 80181e6:	200a      	movs	r0, #10
 80181e8:	f7f9 fac4 	bl	8011774 <memp_free>
    if (handler != NULL) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d0da      	beq.n	80181a8 <sys_check_timeouts+0xc>
      handler(arg);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6838      	ldr	r0, [r7, #0]
 80181f6:	4798      	blx	r3
  do {
 80181f8:	e7d6      	b.n	80181a8 <sys_check_timeouts+0xc>
      return;
 80181fa:	bf00      	nop
 80181fc:	e000      	b.n	8018200 <sys_check_timeouts+0x64>
      return;
 80181fe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018200:	3710      	adds	r7, #16
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	200177a8 	.word	0x200177a8
 801820c:	200177ac 	.word	0x200177ac

08018210 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b082      	sub	sp, #8
 8018214:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018216:	4b16      	ldr	r3, [pc, #88]	@ (8018270 <sys_timeouts_sleeptime+0x60>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d102      	bne.n	8018224 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801821e:	f04f 33ff 	mov.w	r3, #4294967295
 8018222:	e020      	b.n	8018266 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018224:	f7f1 fb08 	bl	8009838 <sys_now>
 8018228:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801822a:	4b11      	ldr	r3, [pc, #68]	@ (8018270 <sys_timeouts_sleeptime+0x60>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	685a      	ldr	r2, [r3, #4]
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	1ad3      	subs	r3, r2, r3
 8018234:	0fdb      	lsrs	r3, r3, #31
 8018236:	f003 0301 	and.w	r3, r3, #1
 801823a:	b2db      	uxtb	r3, r3
 801823c:	2b00      	cmp	r3, #0
 801823e:	d001      	beq.n	8018244 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018240:	2300      	movs	r3, #0
 8018242:	e010      	b.n	8018266 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018244:	4b0a      	ldr	r3, [pc, #40]	@ (8018270 <sys_timeouts_sleeptime+0x60>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	685a      	ldr	r2, [r3, #4]
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	1ad3      	subs	r3, r2, r3
 801824e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	da06      	bge.n	8018264 <sys_timeouts_sleeptime+0x54>
 8018256:	4b07      	ldr	r3, [pc, #28]	@ (8018274 <sys_timeouts_sleeptime+0x64>)
 8018258:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801825c:	4906      	ldr	r1, [pc, #24]	@ (8018278 <sys_timeouts_sleeptime+0x68>)
 801825e:	4807      	ldr	r0, [pc, #28]	@ (801827c <sys_timeouts_sleeptime+0x6c>)
 8018260:	f006 f96a 	bl	801e538 <iprintf>
    return ret;
 8018264:	683b      	ldr	r3, [r7, #0]
  }
}
 8018266:	4618      	mov	r0, r3
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	200177a8 	.word	0x200177a8
 8018274:	08023ff8 	.word	0x08023ff8
 8018278:	080240cc 	.word	0x080240cc
 801827c:	0802406c 	.word	0x0802406c

08018280 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018284:	f005 f88c 	bl	801d3a0 <rand>
 8018288:	4603      	mov	r3, r0
 801828a:	b29b      	uxth	r3, r3
 801828c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018290:	b29b      	uxth	r3, r3
 8018292:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018296:	b29a      	uxth	r2, r3
 8018298:	4b01      	ldr	r3, [pc, #4]	@ (80182a0 <udp_init+0x20>)
 801829a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801829c:	bf00      	nop
 801829e:	bd80      	pop	{r7, pc}
 80182a0:	20000048 	.word	0x20000048

080182a4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80182a4:	b480      	push	{r7}
 80182a6:	b083      	sub	sp, #12
 80182a8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80182aa:	2300      	movs	r3, #0
 80182ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80182ae:	4b17      	ldr	r3, [pc, #92]	@ (801830c <udp_new_port+0x68>)
 80182b0:	881b      	ldrh	r3, [r3, #0]
 80182b2:	1c5a      	adds	r2, r3, #1
 80182b4:	b291      	uxth	r1, r2
 80182b6:	4a15      	ldr	r2, [pc, #84]	@ (801830c <udp_new_port+0x68>)
 80182b8:	8011      	strh	r1, [r2, #0]
 80182ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80182be:	4293      	cmp	r3, r2
 80182c0:	d103      	bne.n	80182ca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80182c2:	4b12      	ldr	r3, [pc, #72]	@ (801830c <udp_new_port+0x68>)
 80182c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80182c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80182ca:	4b11      	ldr	r3, [pc, #68]	@ (8018310 <udp_new_port+0x6c>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	603b      	str	r3, [r7, #0]
 80182d0:	e011      	b.n	80182f6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	8a5a      	ldrh	r2, [r3, #18]
 80182d6:	4b0d      	ldr	r3, [pc, #52]	@ (801830c <udp_new_port+0x68>)
 80182d8:	881b      	ldrh	r3, [r3, #0]
 80182da:	429a      	cmp	r2, r3
 80182dc:	d108      	bne.n	80182f0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80182de:	88fb      	ldrh	r3, [r7, #6]
 80182e0:	3301      	adds	r3, #1
 80182e2:	80fb      	strh	r3, [r7, #6]
 80182e4:	88fb      	ldrh	r3, [r7, #6]
 80182e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80182ea:	d3e0      	bcc.n	80182ae <udp_new_port+0xa>
        return 0;
 80182ec:	2300      	movs	r3, #0
 80182ee:	e007      	b.n	8018300 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	68db      	ldr	r3, [r3, #12]
 80182f4:	603b      	str	r3, [r7, #0]
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d1ea      	bne.n	80182d2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80182fc:	4b03      	ldr	r3, [pc, #12]	@ (801830c <udp_new_port+0x68>)
 80182fe:	881b      	ldrh	r3, [r3, #0]
}
 8018300:	4618      	mov	r0, r3
 8018302:	370c      	adds	r7, #12
 8018304:	46bd      	mov	sp, r7
 8018306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830a:	4770      	bx	lr
 801830c:	20000048 	.word	0x20000048
 8018310:	200177b4 	.word	0x200177b4

08018314 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b084      	sub	sp, #16
 8018318:	af00      	add	r7, sp, #0
 801831a:	60f8      	str	r0, [r7, #12]
 801831c:	60b9      	str	r1, [r7, #8]
 801831e:	4613      	mov	r3, r2
 8018320:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d105      	bne.n	8018334 <udp_input_local_match+0x20>
 8018328:	4b27      	ldr	r3, [pc, #156]	@ (80183c8 <udp_input_local_match+0xb4>)
 801832a:	2287      	movs	r2, #135	@ 0x87
 801832c:	4927      	ldr	r1, [pc, #156]	@ (80183cc <udp_input_local_match+0xb8>)
 801832e:	4828      	ldr	r0, [pc, #160]	@ (80183d0 <udp_input_local_match+0xbc>)
 8018330:	f006 f902 	bl	801e538 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d105      	bne.n	8018346 <udp_input_local_match+0x32>
 801833a:	4b23      	ldr	r3, [pc, #140]	@ (80183c8 <udp_input_local_match+0xb4>)
 801833c:	2288      	movs	r2, #136	@ 0x88
 801833e:	4925      	ldr	r1, [pc, #148]	@ (80183d4 <udp_input_local_match+0xc0>)
 8018340:	4823      	ldr	r0, [pc, #140]	@ (80183d0 <udp_input_local_match+0xbc>)
 8018342:	f006 f8f9 	bl	801e538 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	7a1b      	ldrb	r3, [r3, #8]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d00b      	beq.n	8018366 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	7a1a      	ldrb	r2, [r3, #8]
 8018352:	4b21      	ldr	r3, [pc, #132]	@ (80183d8 <udp_input_local_match+0xc4>)
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801835a:	3301      	adds	r3, #1
 801835c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801835e:	429a      	cmp	r2, r3
 8018360:	d001      	beq.n	8018366 <udp_input_local_match+0x52>
    return 0;
 8018362:	2300      	movs	r3, #0
 8018364:	e02b      	b.n	80183be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018366:	79fb      	ldrb	r3, [r7, #7]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d018      	beq.n	801839e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d013      	beq.n	801839a <udp_input_local_match+0x86>
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d00f      	beq.n	801839a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801837a:	4b17      	ldr	r3, [pc, #92]	@ (80183d8 <udp_input_local_match+0xc4>)
 801837c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018382:	d00a      	beq.n	801839a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	681a      	ldr	r2, [r3, #0]
 8018388:	4b13      	ldr	r3, [pc, #76]	@ (80183d8 <udp_input_local_match+0xc4>)
 801838a:	695b      	ldr	r3, [r3, #20]
 801838c:	405a      	eors	r2, r3
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	3308      	adds	r3, #8
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018396:	2b00      	cmp	r3, #0
 8018398:	d110      	bne.n	80183bc <udp_input_local_match+0xa8>
          return 1;
 801839a:	2301      	movs	r3, #1
 801839c:	e00f      	b.n	80183be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d009      	beq.n	80183b8 <udp_input_local_match+0xa4>
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d005      	beq.n	80183b8 <udp_input_local_match+0xa4>
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	4b09      	ldr	r3, [pc, #36]	@ (80183d8 <udp_input_local_match+0xc4>)
 80183b2:	695b      	ldr	r3, [r3, #20]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d101      	bne.n	80183bc <udp_input_local_match+0xa8>
        return 1;
 80183b8:	2301      	movs	r3, #1
 80183ba:	e000      	b.n	80183be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3710      	adds	r7, #16
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}
 80183c6:	bf00      	nop
 80183c8:	080240e0 	.word	0x080240e0
 80183cc:	08024110 	.word	0x08024110
 80183d0:	08024134 	.word	0x08024134
 80183d4:	0802415c 	.word	0x0802415c
 80183d8:	20013e98 	.word	0x20013e98

080183dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80183dc:	b590      	push	{r4, r7, lr}
 80183de:	b08d      	sub	sp, #52	@ 0x34
 80183e0:	af02      	add	r7, sp, #8
 80183e2:	6078      	str	r0, [r7, #4]
 80183e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80183e6:	2300      	movs	r3, #0
 80183e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d105      	bne.n	80183fc <udp_input+0x20>
 80183f0:	4b7c      	ldr	r3, [pc, #496]	@ (80185e4 <udp_input+0x208>)
 80183f2:	22cf      	movs	r2, #207	@ 0xcf
 80183f4:	497c      	ldr	r1, [pc, #496]	@ (80185e8 <udp_input+0x20c>)
 80183f6:	487d      	ldr	r0, [pc, #500]	@ (80185ec <udp_input+0x210>)
 80183f8:	f006 f89e 	bl	801e538 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d105      	bne.n	801840e <udp_input+0x32>
 8018402:	4b78      	ldr	r3, [pc, #480]	@ (80185e4 <udp_input+0x208>)
 8018404:	22d0      	movs	r2, #208	@ 0xd0
 8018406:	497a      	ldr	r1, [pc, #488]	@ (80185f0 <udp_input+0x214>)
 8018408:	4878      	ldr	r0, [pc, #480]	@ (80185ec <udp_input+0x210>)
 801840a:	f006 f895 	bl	801e538 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	895b      	ldrh	r3, [r3, #10]
 8018412:	2b07      	cmp	r3, #7
 8018414:	d803      	bhi.n	801841e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	f7fa f85c 	bl	80124d4 <pbuf_free>
    goto end;
 801841c:	e0de      	b.n	80185dc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018424:	4b73      	ldr	r3, [pc, #460]	@ (80185f4 <udp_input+0x218>)
 8018426:	695b      	ldr	r3, [r3, #20]
 8018428:	4a72      	ldr	r2, [pc, #456]	@ (80185f4 <udp_input+0x218>)
 801842a:	6812      	ldr	r2, [r2, #0]
 801842c:	4611      	mov	r1, r2
 801842e:	4618      	mov	r0, r3
 8018430:	f003 feac 	bl	801c18c <ip4_addr_isbroadcast_u32>
 8018434:	4603      	mov	r3, r0
 8018436:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	881b      	ldrh	r3, [r3, #0]
 801843c:	b29b      	uxth	r3, r3
 801843e:	4618      	mov	r0, r3
 8018440:	f7f8 f95c 	bl	80106fc <lwip_htons>
 8018444:	4603      	mov	r3, r0
 8018446:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	885b      	ldrh	r3, [r3, #2]
 801844c:	b29b      	uxth	r3, r3
 801844e:	4618      	mov	r0, r3
 8018450:	f7f8 f954 	bl	80106fc <lwip_htons>
 8018454:	4603      	mov	r3, r0
 8018456:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018458:	2300      	movs	r3, #0
 801845a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801845c:	2300      	movs	r3, #0
 801845e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018460:	2300      	movs	r3, #0
 8018462:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018464:	4b64      	ldr	r3, [pc, #400]	@ (80185f8 <udp_input+0x21c>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	627b      	str	r3, [r7, #36]	@ 0x24
 801846a:	e054      	b.n	8018516 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801846e:	8a5b      	ldrh	r3, [r3, #18]
 8018470:	89fa      	ldrh	r2, [r7, #14]
 8018472:	429a      	cmp	r2, r3
 8018474:	d14a      	bne.n	801850c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018476:	7cfb      	ldrb	r3, [r7, #19]
 8018478:	461a      	mov	r2, r3
 801847a:	6839      	ldr	r1, [r7, #0]
 801847c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801847e:	f7ff ff49 	bl	8018314 <udp_input_local_match>
 8018482:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018484:	2b00      	cmp	r3, #0
 8018486:	d041      	beq.n	801850c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801848a:	7c1b      	ldrb	r3, [r3, #16]
 801848c:	f003 0304 	and.w	r3, r3, #4
 8018490:	2b00      	cmp	r3, #0
 8018492:	d11d      	bne.n	80184d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018494:	69fb      	ldr	r3, [r7, #28]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d102      	bne.n	80184a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801849c:	61fb      	str	r3, [r7, #28]
 801849e:	e017      	b.n	80184d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80184a0:	7cfb      	ldrb	r3, [r7, #19]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d014      	beq.n	80184d0 <udp_input+0xf4>
 80184a6:	4b53      	ldr	r3, [pc, #332]	@ (80185f4 <udp_input+0x218>)
 80184a8:	695b      	ldr	r3, [r3, #20]
 80184aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ae:	d10f      	bne.n	80184d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	681a      	ldr	r2, [r3, #0]
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	3304      	adds	r3, #4
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d008      	beq.n	80184d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80184be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	3304      	adds	r3, #4
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d101      	bne.n	80184d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80184cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80184d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d2:	8a9b      	ldrh	r3, [r3, #20]
 80184d4:	8a3a      	ldrh	r2, [r7, #16]
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d118      	bne.n	801850c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80184da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d005      	beq.n	80184ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80184e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e4:	685a      	ldr	r2, [r3, #4]
 80184e6:	4b43      	ldr	r3, [pc, #268]	@ (80185f4 <udp_input+0x218>)
 80184e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d10e      	bne.n	801850c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80184ee:	6a3b      	ldr	r3, [r7, #32]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d014      	beq.n	801851e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80184f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f6:	68da      	ldr	r2, [r3, #12]
 80184f8:	6a3b      	ldr	r3, [r7, #32]
 80184fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80184fc:	4b3e      	ldr	r3, [pc, #248]	@ (80185f8 <udp_input+0x21c>)
 80184fe:	681a      	ldr	r2, [r3, #0]
 8018500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018502:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018504:	4a3c      	ldr	r2, [pc, #240]	@ (80185f8 <udp_input+0x21c>)
 8018506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018508:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801850a:	e008      	b.n	801851e <udp_input+0x142>
      }
    }

    prev = pcb;
 801850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801850e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	627b      	str	r3, [r7, #36]	@ 0x24
 8018516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018518:	2b00      	cmp	r3, #0
 801851a:	d1a7      	bne.n	801846c <udp_input+0x90>
 801851c:	e000      	b.n	8018520 <udp_input+0x144>
        break;
 801851e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018522:	2b00      	cmp	r3, #0
 8018524:	d101      	bne.n	801852a <udp_input+0x14e>
    pcb = uncon_pcb;
 8018526:	69fb      	ldr	r3, [r7, #28]
 8018528:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801852c:	2b00      	cmp	r3, #0
 801852e:	d002      	beq.n	8018536 <udp_input+0x15a>
    for_us = 1;
 8018530:	2301      	movs	r3, #1
 8018532:	76fb      	strb	r3, [r7, #27]
 8018534:	e00a      	b.n	801854c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	3304      	adds	r3, #4
 801853a:	681a      	ldr	r2, [r3, #0]
 801853c:	4b2d      	ldr	r3, [pc, #180]	@ (80185f4 <udp_input+0x218>)
 801853e:	695b      	ldr	r3, [r3, #20]
 8018540:	429a      	cmp	r2, r3
 8018542:	bf0c      	ite	eq
 8018544:	2301      	moveq	r3, #1
 8018546:	2300      	movne	r3, #0
 8018548:	b2db      	uxtb	r3, r3
 801854a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801854c:	7efb      	ldrb	r3, [r7, #27]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d041      	beq.n	80185d6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018552:	2108      	movs	r1, #8
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f7f9 ff37 	bl	80123c8 <pbuf_remove_header>
 801855a:	4603      	mov	r3, r0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d00a      	beq.n	8018576 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018560:	4b20      	ldr	r3, [pc, #128]	@ (80185e4 <udp_input+0x208>)
 8018562:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018566:	4925      	ldr	r1, [pc, #148]	@ (80185fc <udp_input+0x220>)
 8018568:	4820      	ldr	r0, [pc, #128]	@ (80185ec <udp_input+0x210>)
 801856a:	f005 ffe5 	bl	801e538 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801856e:	6878      	ldr	r0, [r7, #4]
 8018570:	f7f9 ffb0 	bl	80124d4 <pbuf_free>
      goto end;
 8018574:	e032      	b.n	80185dc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018578:	2b00      	cmp	r3, #0
 801857a:	d012      	beq.n	80185a2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801857e:	699b      	ldr	r3, [r3, #24]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d00a      	beq.n	801859a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018586:	699c      	ldr	r4, [r3, #24]
 8018588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801858a:	69d8      	ldr	r0, [r3, #28]
 801858c:	8a3b      	ldrh	r3, [r7, #16]
 801858e:	9300      	str	r3, [sp, #0]
 8018590:	4b1b      	ldr	r3, [pc, #108]	@ (8018600 <udp_input+0x224>)
 8018592:	687a      	ldr	r2, [r7, #4]
 8018594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018596:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018598:	e021      	b.n	80185de <udp_input+0x202>
        pbuf_free(p);
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7f9 ff9a 	bl	80124d4 <pbuf_free>
        goto end;
 80185a0:	e01c      	b.n	80185dc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80185a2:	7cfb      	ldrb	r3, [r7, #19]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d112      	bne.n	80185ce <udp_input+0x1f2>
 80185a8:	4b12      	ldr	r3, [pc, #72]	@ (80185f4 <udp_input+0x218>)
 80185aa:	695b      	ldr	r3, [r3, #20]
 80185ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80185b0:	2be0      	cmp	r3, #224	@ 0xe0
 80185b2:	d00c      	beq.n	80185ce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80185b4:	4b0f      	ldr	r3, [pc, #60]	@ (80185f4 <udp_input+0x218>)
 80185b6:	899b      	ldrh	r3, [r3, #12]
 80185b8:	3308      	adds	r3, #8
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	b21b      	sxth	r3, r3
 80185be:	4619      	mov	r1, r3
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f7f9 ff74 	bl	80124ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80185c6:	2103      	movs	r1, #3
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	f003 faa1 	bl	801bb10 <icmp_dest_unreach>
      pbuf_free(p);
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7f9 ff80 	bl	80124d4 <pbuf_free>
  return;
 80185d4:	e003      	b.n	80185de <udp_input+0x202>
    pbuf_free(p);
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7f9 ff7c 	bl	80124d4 <pbuf_free>
  return;
 80185dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80185de:	372c      	adds	r7, #44	@ 0x2c
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd90      	pop	{r4, r7, pc}
 80185e4:	080240e0 	.word	0x080240e0
 80185e8:	08024184 	.word	0x08024184
 80185ec:	08024134 	.word	0x08024134
 80185f0:	0802419c 	.word	0x0802419c
 80185f4:	20013e98 	.word	0x20013e98
 80185f8:	200177b4 	.word	0x200177b4
 80185fc:	080241b8 	.word	0x080241b8
 8018600:	20013ea8 	.word	0x20013ea8

08018604 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b088      	sub	sp, #32
 8018608:	af02      	add	r7, sp, #8
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	60b9      	str	r1, [r7, #8]
 801860e:	607a      	str	r2, [r7, #4]
 8018610:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d109      	bne.n	801862c <udp_sendto+0x28>
 8018618:	4b23      	ldr	r3, [pc, #140]	@ (80186a8 <udp_sendto+0xa4>)
 801861a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801861e:	4923      	ldr	r1, [pc, #140]	@ (80186ac <udp_sendto+0xa8>)
 8018620:	4823      	ldr	r0, [pc, #140]	@ (80186b0 <udp_sendto+0xac>)
 8018622:	f005 ff89 	bl	801e538 <iprintf>
 8018626:	f06f 030f 	mvn.w	r3, #15
 801862a:	e038      	b.n	801869e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d109      	bne.n	8018646 <udp_sendto+0x42>
 8018632:	4b1d      	ldr	r3, [pc, #116]	@ (80186a8 <udp_sendto+0xa4>)
 8018634:	f240 2219 	movw	r2, #537	@ 0x219
 8018638:	491e      	ldr	r1, [pc, #120]	@ (80186b4 <udp_sendto+0xb0>)
 801863a:	481d      	ldr	r0, [pc, #116]	@ (80186b0 <udp_sendto+0xac>)
 801863c:	f005 ff7c 	bl	801e538 <iprintf>
 8018640:	f06f 030f 	mvn.w	r3, #15
 8018644:	e02b      	b.n	801869e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d109      	bne.n	8018660 <udp_sendto+0x5c>
 801864c:	4b16      	ldr	r3, [pc, #88]	@ (80186a8 <udp_sendto+0xa4>)
 801864e:	f240 221a 	movw	r2, #538	@ 0x21a
 8018652:	4919      	ldr	r1, [pc, #100]	@ (80186b8 <udp_sendto+0xb4>)
 8018654:	4816      	ldr	r0, [pc, #88]	@ (80186b0 <udp_sendto+0xac>)
 8018656:	f005 ff6f 	bl	801e538 <iprintf>
 801865a:	f06f 030f 	mvn.w	r3, #15
 801865e:	e01e      	b.n	801869e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	7a1b      	ldrb	r3, [r3, #8]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d006      	beq.n	8018676 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	7a1b      	ldrb	r3, [r3, #8]
 801866c:	4618      	mov	r0, r3
 801866e:	f7f9 fba3 	bl	8011db8 <netif_get_by_index>
 8018672:	6178      	str	r0, [r7, #20]
 8018674:	e003      	b.n	801867e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f003 fad4 	bl	801bc24 <ip4_route>
 801867c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801867e:	697b      	ldr	r3, [r7, #20]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d102      	bne.n	801868a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018684:	f06f 0303 	mvn.w	r3, #3
 8018688:	e009      	b.n	801869e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801868a:	887a      	ldrh	r2, [r7, #2]
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	4613      	mov	r3, r2
 8018692:	687a      	ldr	r2, [r7, #4]
 8018694:	68b9      	ldr	r1, [r7, #8]
 8018696:	68f8      	ldr	r0, [r7, #12]
 8018698:	f000 f810 	bl	80186bc <udp_sendto_if>
 801869c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3718      	adds	r7, #24
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	080240e0 	.word	0x080240e0
 80186ac:	08024204 	.word	0x08024204
 80186b0:	08024134 	.word	0x08024134
 80186b4:	0802421c 	.word	0x0802421c
 80186b8:	08024238 	.word	0x08024238

080186bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b088      	sub	sp, #32
 80186c0:	af02      	add	r7, sp, #8
 80186c2:	60f8      	str	r0, [r7, #12]
 80186c4:	60b9      	str	r1, [r7, #8]
 80186c6:	607a      	str	r2, [r7, #4]
 80186c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d109      	bne.n	80186e4 <udp_sendto_if+0x28>
 80186d0:	4b2e      	ldr	r3, [pc, #184]	@ (801878c <udp_sendto_if+0xd0>)
 80186d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80186d6:	492e      	ldr	r1, [pc, #184]	@ (8018790 <udp_sendto_if+0xd4>)
 80186d8:	482e      	ldr	r0, [pc, #184]	@ (8018794 <udp_sendto_if+0xd8>)
 80186da:	f005 ff2d 	bl	801e538 <iprintf>
 80186de:	f06f 030f 	mvn.w	r3, #15
 80186e2:	e04f      	b.n	8018784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d109      	bne.n	80186fe <udp_sendto_if+0x42>
 80186ea:	4b28      	ldr	r3, [pc, #160]	@ (801878c <udp_sendto_if+0xd0>)
 80186ec:	f240 2281 	movw	r2, #641	@ 0x281
 80186f0:	4929      	ldr	r1, [pc, #164]	@ (8018798 <udp_sendto_if+0xdc>)
 80186f2:	4828      	ldr	r0, [pc, #160]	@ (8018794 <udp_sendto_if+0xd8>)
 80186f4:	f005 ff20 	bl	801e538 <iprintf>
 80186f8:	f06f 030f 	mvn.w	r3, #15
 80186fc:	e042      	b.n	8018784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d109      	bne.n	8018718 <udp_sendto_if+0x5c>
 8018704:	4b21      	ldr	r3, [pc, #132]	@ (801878c <udp_sendto_if+0xd0>)
 8018706:	f240 2282 	movw	r2, #642	@ 0x282
 801870a:	4924      	ldr	r1, [pc, #144]	@ (801879c <udp_sendto_if+0xe0>)
 801870c:	4821      	ldr	r0, [pc, #132]	@ (8018794 <udp_sendto_if+0xd8>)
 801870e:	f005 ff13 	bl	801e538 <iprintf>
 8018712:	f06f 030f 	mvn.w	r3, #15
 8018716:	e035      	b.n	8018784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018718:	6a3b      	ldr	r3, [r7, #32]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d109      	bne.n	8018732 <udp_sendto_if+0x76>
 801871e:	4b1b      	ldr	r3, [pc, #108]	@ (801878c <udp_sendto_if+0xd0>)
 8018720:	f240 2283 	movw	r2, #643	@ 0x283
 8018724:	491e      	ldr	r1, [pc, #120]	@ (80187a0 <udp_sendto_if+0xe4>)
 8018726:	481b      	ldr	r0, [pc, #108]	@ (8018794 <udp_sendto_if+0xd8>)
 8018728:	f005 ff06 	bl	801e538 <iprintf>
 801872c:	f06f 030f 	mvn.w	r3, #15
 8018730:	e028      	b.n	8018784 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d009      	beq.n	801874c <udp_sendto_if+0x90>
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d005      	beq.n	801874c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018748:	2be0      	cmp	r3, #224	@ 0xe0
 801874a:	d103      	bne.n	8018754 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801874c:	6a3b      	ldr	r3, [r7, #32]
 801874e:	3304      	adds	r3, #4
 8018750:	617b      	str	r3, [r7, #20]
 8018752:	e00b      	b.n	801876c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	681a      	ldr	r2, [r3, #0]
 8018758:	6a3b      	ldr	r3, [r7, #32]
 801875a:	3304      	adds	r3, #4
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	429a      	cmp	r2, r3
 8018760:	d002      	beq.n	8018768 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018762:	f06f 0303 	mvn.w	r3, #3
 8018766:	e00d      	b.n	8018784 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801876c:	887a      	ldrh	r2, [r7, #2]
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	9301      	str	r3, [sp, #4]
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	9300      	str	r3, [sp, #0]
 8018776:	4613      	mov	r3, r2
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	68b9      	ldr	r1, [r7, #8]
 801877c:	68f8      	ldr	r0, [r7, #12]
 801877e:	f000 f811 	bl	80187a4 <udp_sendto_if_src>
 8018782:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018784:	4618      	mov	r0, r3
 8018786:	3718      	adds	r7, #24
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}
 801878c:	080240e0 	.word	0x080240e0
 8018790:	08024254 	.word	0x08024254
 8018794:	08024134 	.word	0x08024134
 8018798:	08024270 	.word	0x08024270
 801879c:	0802428c 	.word	0x0802428c
 80187a0:	080242ac 	.word	0x080242ac

080187a4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b08c      	sub	sp, #48	@ 0x30
 80187a8:	af04      	add	r7, sp, #16
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	607a      	str	r2, [r7, #4]
 80187b0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d109      	bne.n	80187cc <udp_sendto_if_src+0x28>
 80187b8:	4b65      	ldr	r3, [pc, #404]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 80187ba:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80187be:	4965      	ldr	r1, [pc, #404]	@ (8018954 <udp_sendto_if_src+0x1b0>)
 80187c0:	4865      	ldr	r0, [pc, #404]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 80187c2:	f005 feb9 	bl	801e538 <iprintf>
 80187c6:	f06f 030f 	mvn.w	r3, #15
 80187ca:	e0bc      	b.n	8018946 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d109      	bne.n	80187e6 <udp_sendto_if_src+0x42>
 80187d2:	4b5f      	ldr	r3, [pc, #380]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 80187d4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80187d8:	4960      	ldr	r1, [pc, #384]	@ (801895c <udp_sendto_if_src+0x1b8>)
 80187da:	485f      	ldr	r0, [pc, #380]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 80187dc:	f005 feac 	bl	801e538 <iprintf>
 80187e0:	f06f 030f 	mvn.w	r3, #15
 80187e4:	e0af      	b.n	8018946 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d109      	bne.n	8018800 <udp_sendto_if_src+0x5c>
 80187ec:	4b58      	ldr	r3, [pc, #352]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 80187ee:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80187f2:	495b      	ldr	r1, [pc, #364]	@ (8018960 <udp_sendto_if_src+0x1bc>)
 80187f4:	4858      	ldr	r0, [pc, #352]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 80187f6:	f005 fe9f 	bl	801e538 <iprintf>
 80187fa:	f06f 030f 	mvn.w	r3, #15
 80187fe:	e0a2      	b.n	8018946 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018802:	2b00      	cmp	r3, #0
 8018804:	d109      	bne.n	801881a <udp_sendto_if_src+0x76>
 8018806:	4b52      	ldr	r3, [pc, #328]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 8018808:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801880c:	4955      	ldr	r1, [pc, #340]	@ (8018964 <udp_sendto_if_src+0x1c0>)
 801880e:	4852      	ldr	r0, [pc, #328]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 8018810:	f005 fe92 	bl	801e538 <iprintf>
 8018814:	f06f 030f 	mvn.w	r3, #15
 8018818:	e095      	b.n	8018946 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801881c:	2b00      	cmp	r3, #0
 801881e:	d109      	bne.n	8018834 <udp_sendto_if_src+0x90>
 8018820:	4b4b      	ldr	r3, [pc, #300]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 8018822:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8018826:	4950      	ldr	r1, [pc, #320]	@ (8018968 <udp_sendto_if_src+0x1c4>)
 8018828:	484b      	ldr	r0, [pc, #300]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 801882a:	f005 fe85 	bl	801e538 <iprintf>
 801882e:	f06f 030f 	mvn.w	r3, #15
 8018832:	e088      	b.n	8018946 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	8a5b      	ldrh	r3, [r3, #18]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d10f      	bne.n	801885c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801883c:	68f9      	ldr	r1, [r7, #12]
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	8a5b      	ldrh	r3, [r3, #18]
 8018842:	461a      	mov	r2, r3
 8018844:	68f8      	ldr	r0, [r7, #12]
 8018846:	f000 f893 	bl	8018970 <udp_bind>
 801884a:	4603      	mov	r3, r0
 801884c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801884e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d002      	beq.n	801885c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018856:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801885a:	e074      	b.n	8018946 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	891b      	ldrh	r3, [r3, #8]
 8018860:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018864:	4293      	cmp	r3, r2
 8018866:	d902      	bls.n	801886e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018868:	f04f 33ff 	mov.w	r3, #4294967295
 801886c:	e06b      	b.n	8018946 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801886e:	2108      	movs	r1, #8
 8018870:	68b8      	ldr	r0, [r7, #8]
 8018872:	f7f9 fd99 	bl	80123a8 <pbuf_add_header>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d015      	beq.n	80188a8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801887c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018880:	2108      	movs	r1, #8
 8018882:	2022      	movs	r0, #34	@ 0x22
 8018884:	f7f9 fb42 	bl	8011f0c <pbuf_alloc>
 8018888:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d102      	bne.n	8018896 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018890:	f04f 33ff 	mov.w	r3, #4294967295
 8018894:	e057      	b.n	8018946 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	891b      	ldrh	r3, [r3, #8]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d006      	beq.n	80188ac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801889e:	68b9      	ldr	r1, [r7, #8]
 80188a0:	69f8      	ldr	r0, [r7, #28]
 80188a2:	f7f9 ff3b 	bl	801271c <pbuf_chain>
 80188a6:	e001      	b.n	80188ac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	895b      	ldrh	r3, [r3, #10]
 80188b0:	2b07      	cmp	r3, #7
 80188b2:	d806      	bhi.n	80188c2 <udp_sendto_if_src+0x11e>
 80188b4:	4b26      	ldr	r3, [pc, #152]	@ (8018950 <udp_sendto_if_src+0x1ac>)
 80188b6:	f240 320d 	movw	r2, #781	@ 0x30d
 80188ba:	492c      	ldr	r1, [pc, #176]	@ (801896c <udp_sendto_if_src+0x1c8>)
 80188bc:	4826      	ldr	r0, [pc, #152]	@ (8018958 <udp_sendto_if_src+0x1b4>)
 80188be:	f005 fe3b 	bl	801e538 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80188c2:	69fb      	ldr	r3, [r7, #28]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	8a5b      	ldrh	r3, [r3, #18]
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7f7 ff15 	bl	80106fc <lwip_htons>
 80188d2:	4603      	mov	r3, r0
 80188d4:	461a      	mov	r2, r3
 80188d6:	697b      	ldr	r3, [r7, #20]
 80188d8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80188da:	887b      	ldrh	r3, [r7, #2]
 80188dc:	4618      	mov	r0, r3
 80188de:	f7f7 ff0d 	bl	80106fc <lwip_htons>
 80188e2:	4603      	mov	r3, r0
 80188e4:	461a      	mov	r2, r3
 80188e6:	697b      	ldr	r3, [r7, #20]
 80188e8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80188ea:	697b      	ldr	r3, [r7, #20]
 80188ec:	2200      	movs	r2, #0
 80188ee:	719a      	strb	r2, [r3, #6]
 80188f0:	2200      	movs	r2, #0
 80188f2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80188f4:	69fb      	ldr	r3, [r7, #28]
 80188f6:	891b      	ldrh	r3, [r3, #8]
 80188f8:	4618      	mov	r0, r3
 80188fa:	f7f7 feff 	bl	80106fc <lwip_htons>
 80188fe:	4603      	mov	r3, r0
 8018900:	461a      	mov	r2, r3
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018906:	2311      	movs	r3, #17
 8018908:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	7adb      	ldrb	r3, [r3, #11]
 801890e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	7a9b      	ldrb	r3, [r3, #10]
 8018914:	7cb9      	ldrb	r1, [r7, #18]
 8018916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018918:	9202      	str	r2, [sp, #8]
 801891a:	7cfa      	ldrb	r2, [r7, #19]
 801891c:	9201      	str	r2, [sp, #4]
 801891e:	9300      	str	r3, [sp, #0]
 8018920:	460b      	mov	r3, r1
 8018922:	687a      	ldr	r2, [r7, #4]
 8018924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018926:	69f8      	ldr	r0, [r7, #28]
 8018928:	f003 fb82 	bl	801c030 <ip4_output_if_src>
 801892c:	4603      	mov	r3, r0
 801892e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018930:	69fa      	ldr	r2, [r7, #28]
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	429a      	cmp	r2, r3
 8018936:	d004      	beq.n	8018942 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018938:	69f8      	ldr	r0, [r7, #28]
 801893a:	f7f9 fdcb 	bl	80124d4 <pbuf_free>
    q = NULL;
 801893e:	2300      	movs	r3, #0
 8018940:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018942:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018946:	4618      	mov	r0, r3
 8018948:	3720      	adds	r7, #32
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
 801894e:	bf00      	nop
 8018950:	080240e0 	.word	0x080240e0
 8018954:	080242cc 	.word	0x080242cc
 8018958:	08024134 	.word	0x08024134
 801895c:	080242ec 	.word	0x080242ec
 8018960:	0802430c 	.word	0x0802430c
 8018964:	08024330 	.word	0x08024330
 8018968:	08024354 	.word	0x08024354
 801896c:	08024378 	.word	0x08024378

08018970 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b086      	sub	sp, #24
 8018974:	af00      	add	r7, sp, #0
 8018976:	60f8      	str	r0, [r7, #12]
 8018978:	60b9      	str	r1, [r7, #8]
 801897a:	4613      	mov	r3, r2
 801897c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d101      	bne.n	8018988 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018984:	4b39      	ldr	r3, [pc, #228]	@ (8018a6c <udp_bind+0xfc>)
 8018986:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d109      	bne.n	80189a2 <udp_bind+0x32>
 801898e:	4b38      	ldr	r3, [pc, #224]	@ (8018a70 <udp_bind+0x100>)
 8018990:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018994:	4937      	ldr	r1, [pc, #220]	@ (8018a74 <udp_bind+0x104>)
 8018996:	4838      	ldr	r0, [pc, #224]	@ (8018a78 <udp_bind+0x108>)
 8018998:	f005 fdce 	bl	801e538 <iprintf>
 801899c:	f06f 030f 	mvn.w	r3, #15
 80189a0:	e060      	b.n	8018a64 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80189a2:	2300      	movs	r3, #0
 80189a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189a6:	4b35      	ldr	r3, [pc, #212]	@ (8018a7c <udp_bind+0x10c>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	617b      	str	r3, [r7, #20]
 80189ac:	e009      	b.n	80189c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80189ae:	68fa      	ldr	r2, [r7, #12]
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d102      	bne.n	80189bc <udp_bind+0x4c>
      rebind = 1;
 80189b6:	2301      	movs	r3, #1
 80189b8:	74fb      	strb	r3, [r7, #19]
      break;
 80189ba:	e005      	b.n	80189c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189bc:	697b      	ldr	r3, [r7, #20]
 80189be:	68db      	ldr	r3, [r3, #12]
 80189c0:	617b      	str	r3, [r7, #20]
 80189c2:	697b      	ldr	r3, [r7, #20]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d1f2      	bne.n	80189ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80189c8:	88fb      	ldrh	r3, [r7, #6]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d109      	bne.n	80189e2 <udp_bind+0x72>
    port = udp_new_port();
 80189ce:	f7ff fc69 	bl	80182a4 <udp_new_port>
 80189d2:	4603      	mov	r3, r0
 80189d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80189d6:	88fb      	ldrh	r3, [r7, #6]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d12c      	bne.n	8018a36 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80189dc:	f06f 0307 	mvn.w	r3, #7
 80189e0:	e040      	b.n	8018a64 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189e2:	4b26      	ldr	r3, [pc, #152]	@ (8018a7c <udp_bind+0x10c>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	617b      	str	r3, [r7, #20]
 80189e8:	e022      	b.n	8018a30 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80189ea:	68fa      	ldr	r2, [r7, #12]
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	429a      	cmp	r2, r3
 80189f0:	d01b      	beq.n	8018a2a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80189f2:	697b      	ldr	r3, [r7, #20]
 80189f4:	8a5b      	ldrh	r3, [r3, #18]
 80189f6:	88fa      	ldrh	r2, [r7, #6]
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d116      	bne.n	8018a2a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	681a      	ldr	r2, [r3, #0]
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018a04:	429a      	cmp	r2, r3
 8018a06:	d00d      	beq.n	8018a24 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d00a      	beq.n	8018a24 <udp_bind+0xb4>
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d006      	beq.n	8018a24 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018a16:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d003      	beq.n	8018a24 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d102      	bne.n	8018a2a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018a24:	f06f 0307 	mvn.w	r3, #7
 8018a28:	e01c      	b.n	8018a64 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018a2a:	697b      	ldr	r3, [r7, #20]
 8018a2c:	68db      	ldr	r3, [r3, #12]
 8018a2e:	617b      	str	r3, [r7, #20]
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d1d9      	bne.n	80189ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d002      	beq.n	8018a42 <udp_bind+0xd2>
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	e000      	b.n	8018a44 <udp_bind+0xd4>
 8018a42:	2300      	movs	r3, #0
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	88fa      	ldrh	r2, [r7, #6]
 8018a4c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018a4e:	7cfb      	ldrb	r3, [r7, #19]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d106      	bne.n	8018a62 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018a54:	4b09      	ldr	r3, [pc, #36]	@ (8018a7c <udp_bind+0x10c>)
 8018a56:	681a      	ldr	r2, [r3, #0]
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018a5c:	4a07      	ldr	r2, [pc, #28]	@ (8018a7c <udp_bind+0x10c>)
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018a62:	2300      	movs	r3, #0
}
 8018a64:	4618      	mov	r0, r3
 8018a66:	3718      	adds	r7, #24
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	0802521c 	.word	0x0802521c
 8018a70:	080240e0 	.word	0x080240e0
 8018a74:	080243a8 	.word	0x080243a8
 8018a78:	08024134 	.word	0x08024134
 8018a7c:	200177b4 	.word	0x200177b4

08018a80 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b086      	sub	sp, #24
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	60f8      	str	r0, [r7, #12]
 8018a88:	60b9      	str	r1, [r7, #8]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d109      	bne.n	8018aa8 <udp_connect+0x28>
 8018a94:	4b2c      	ldr	r3, [pc, #176]	@ (8018b48 <udp_connect+0xc8>)
 8018a96:	f240 4235 	movw	r2, #1077	@ 0x435
 8018a9a:	492c      	ldr	r1, [pc, #176]	@ (8018b4c <udp_connect+0xcc>)
 8018a9c:	482c      	ldr	r0, [pc, #176]	@ (8018b50 <udp_connect+0xd0>)
 8018a9e:	f005 fd4b 	bl	801e538 <iprintf>
 8018aa2:	f06f 030f 	mvn.w	r3, #15
 8018aa6:	e04b      	b.n	8018b40 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d109      	bne.n	8018ac2 <udp_connect+0x42>
 8018aae:	4b26      	ldr	r3, [pc, #152]	@ (8018b48 <udp_connect+0xc8>)
 8018ab0:	f240 4236 	movw	r2, #1078	@ 0x436
 8018ab4:	4927      	ldr	r1, [pc, #156]	@ (8018b54 <udp_connect+0xd4>)
 8018ab6:	4826      	ldr	r0, [pc, #152]	@ (8018b50 <udp_connect+0xd0>)
 8018ab8:	f005 fd3e 	bl	801e538 <iprintf>
 8018abc:	f06f 030f 	mvn.w	r3, #15
 8018ac0:	e03e      	b.n	8018b40 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	8a5b      	ldrh	r3, [r3, #18]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d10f      	bne.n	8018aea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018aca:	68f9      	ldr	r1, [r7, #12]
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	8a5b      	ldrh	r3, [r3, #18]
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	68f8      	ldr	r0, [r7, #12]
 8018ad4:	f7ff ff4c 	bl	8018970 <udp_bind>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018adc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d002      	beq.n	8018aea <udp_connect+0x6a>
      return err;
 8018ae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018ae8:	e02a      	b.n	8018b40 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d002      	beq.n	8018af6 <udp_connect+0x76>
 8018af0:	68bb      	ldr	r3, [r7, #8]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	e000      	b.n	8018af8 <udp_connect+0x78>
 8018af6:	2300      	movs	r3, #0
 8018af8:	68fa      	ldr	r2, [r7, #12]
 8018afa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	88fa      	ldrh	r2, [r7, #6]
 8018b00:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	7c1b      	ldrb	r3, [r3, #16]
 8018b06:	f043 0304 	orr.w	r3, r3, #4
 8018b0a:	b2da      	uxtb	r2, r3
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b10:	4b11      	ldr	r3, [pc, #68]	@ (8018b58 <udp_connect+0xd8>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	617b      	str	r3, [r7, #20]
 8018b16:	e008      	b.n	8018b2a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018b18:	68fa      	ldr	r2, [r7, #12]
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d101      	bne.n	8018b24 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018b20:	2300      	movs	r3, #0
 8018b22:	e00d      	b.n	8018b40 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	617b      	str	r3, [r7, #20]
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d1f3      	bne.n	8018b18 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018b30:	4b09      	ldr	r3, [pc, #36]	@ (8018b58 <udp_connect+0xd8>)
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018b38:	4a07      	ldr	r2, [pc, #28]	@ (8018b58 <udp_connect+0xd8>)
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018b3e:	2300      	movs	r3, #0
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3718      	adds	r7, #24
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	080240e0 	.word	0x080240e0
 8018b4c:	080243c0 	.word	0x080243c0
 8018b50:	08024134 	.word	0x08024134
 8018b54:	080243dc 	.word	0x080243dc
 8018b58:	200177b4 	.word	0x200177b4

08018b5c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	60f8      	str	r0, [r7, #12]
 8018b64:	60b9      	str	r1, [r7, #8]
 8018b66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d107      	bne.n	8018b7e <udp_recv+0x22>
 8018b6e:	4b08      	ldr	r3, [pc, #32]	@ (8018b90 <udp_recv+0x34>)
 8018b70:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018b74:	4907      	ldr	r1, [pc, #28]	@ (8018b94 <udp_recv+0x38>)
 8018b76:	4808      	ldr	r0, [pc, #32]	@ (8018b98 <udp_recv+0x3c>)
 8018b78:	f005 fcde 	bl	801e538 <iprintf>
 8018b7c:	e005      	b.n	8018b8a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	68ba      	ldr	r2, [r7, #8]
 8018b82:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	687a      	ldr	r2, [r7, #4]
 8018b88:	61da      	str	r2, [r3, #28]
}
 8018b8a:	3710      	adds	r7, #16
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	080240e0 	.word	0x080240e0
 8018b94:	08024414 	.word	0x08024414
 8018b98:	08024134 	.word	0x08024134

08018b9c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d107      	bne.n	8018bba <udp_remove+0x1e>
 8018baa:	4b19      	ldr	r3, [pc, #100]	@ (8018c10 <udp_remove+0x74>)
 8018bac:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018bb0:	4918      	ldr	r1, [pc, #96]	@ (8018c14 <udp_remove+0x78>)
 8018bb2:	4819      	ldr	r0, [pc, #100]	@ (8018c18 <udp_remove+0x7c>)
 8018bb4:	f005 fcc0 	bl	801e538 <iprintf>
 8018bb8:	e026      	b.n	8018c08 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018bba:	4b18      	ldr	r3, [pc, #96]	@ (8018c1c <udp_remove+0x80>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	687a      	ldr	r2, [r7, #4]
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	d105      	bne.n	8018bd0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018bc4:	4b15      	ldr	r3, [pc, #84]	@ (8018c1c <udp_remove+0x80>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	68db      	ldr	r3, [r3, #12]
 8018bca:	4a14      	ldr	r2, [pc, #80]	@ (8018c1c <udp_remove+0x80>)
 8018bcc:	6013      	str	r3, [r2, #0]
 8018bce:	e017      	b.n	8018c00 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018bd0:	4b12      	ldr	r3, [pc, #72]	@ (8018c1c <udp_remove+0x80>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	60fb      	str	r3, [r7, #12]
 8018bd6:	e010      	b.n	8018bfa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	68db      	ldr	r3, [r3, #12]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d009      	beq.n	8018bf4 <udp_remove+0x58>
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	687a      	ldr	r2, [r7, #4]
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d104      	bne.n	8018bf4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	68da      	ldr	r2, [r3, #12]
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	60da      	str	r2, [r3, #12]
        break;
 8018bf2:	e005      	b.n	8018c00 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	60fb      	str	r3, [r7, #12]
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d1eb      	bne.n	8018bd8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018c00:	6879      	ldr	r1, [r7, #4]
 8018c02:	2000      	movs	r0, #0
 8018c04:	f7f8 fdb6 	bl	8011774 <memp_free>
}
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	080240e0 	.word	0x080240e0
 8018c14:	0802442c 	.word	0x0802442c
 8018c18:	08024134 	.word	0x08024134
 8018c1c:	200177b4 	.word	0x200177b4

08018c20 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018c26:	2000      	movs	r0, #0
 8018c28:	f7f8 fd2e 	bl	8011688 <memp_malloc>
 8018c2c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d007      	beq.n	8018c44 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018c34:	2220      	movs	r2, #32
 8018c36:	2100      	movs	r1, #0
 8018c38:	6878      	ldr	r0, [r7, #4]
 8018c3a:	f005 fdb1 	bl	801e7a0 <memset>
    pcb->ttl = UDP_TTL;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	22ff      	movs	r2, #255	@ 0xff
 8018c42:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018c44:	687b      	ldr	r3, [r7, #4]
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3708      	adds	r7, #8
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
	...

08018c50 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018c50:	b480      	push	{r7}
 8018c52:	b085      	sub	sp, #20
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d01e      	beq.n	8018c9e <udp_netif_ip_addr_changed+0x4e>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d01a      	beq.n	8018c9e <udp_netif_ip_addr_changed+0x4e>
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d017      	beq.n	8018c9e <udp_netif_ip_addr_changed+0x4e>
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d013      	beq.n	8018c9e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c76:	4b0d      	ldr	r3, [pc, #52]	@ (8018cac <udp_netif_ip_addr_changed+0x5c>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	60fb      	str	r3, [r7, #12]
 8018c7c:	e00c      	b.n	8018c98 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681a      	ldr	r2, [r3, #0]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d103      	bne.n	8018c92 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	681a      	ldr	r2, [r3, #0]
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	68db      	ldr	r3, [r3, #12]
 8018c96:	60fb      	str	r3, [r7, #12]
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d1ef      	bne.n	8018c7e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018c9e:	bf00      	nop
 8018ca0:	3714      	adds	r7, #20
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca8:	4770      	bx	lr
 8018caa:	bf00      	nop
 8018cac:	200177b4 	.word	0x200177b4

08018cb0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018cb4:	4b20      	ldr	r3, [pc, #128]	@ (8018d38 <dhcp_inc_pcb_refcount+0x88>)
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d133      	bne.n	8018d24 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d005      	beq.n	8018cd0 <dhcp_inc_pcb_refcount+0x20>
 8018cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8018d40 <dhcp_inc_pcb_refcount+0x90>)
 8018cc6:	22e5      	movs	r2, #229	@ 0xe5
 8018cc8:	491e      	ldr	r1, [pc, #120]	@ (8018d44 <dhcp_inc_pcb_refcount+0x94>)
 8018cca:	481f      	ldr	r0, [pc, #124]	@ (8018d48 <dhcp_inc_pcb_refcount+0x98>)
 8018ccc:	f005 fc34 	bl	801e538 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018cd0:	f7ff ffa6 	bl	8018c20 <udp_new>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	4a19      	ldr	r2, [pc, #100]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cd8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018cda:	4b18      	ldr	r3, [pc, #96]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d102      	bne.n	8018ce8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce6:	e024      	b.n	8018d32 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018ce8:	4b14      	ldr	r3, [pc, #80]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	7a5a      	ldrb	r2, [r3, #9]
 8018cee:	4b13      	ldr	r3, [pc, #76]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	f042 0220 	orr.w	r2, r2, #32
 8018cf6:	b2d2      	uxtb	r2, r2
 8018cf8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018cfa:	4b10      	ldr	r3, [pc, #64]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	2244      	movs	r2, #68	@ 0x44
 8018d00:	4912      	ldr	r1, [pc, #72]	@ (8018d4c <dhcp_inc_pcb_refcount+0x9c>)
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7ff fe34 	bl	8018970 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018d08:	4b0c      	ldr	r3, [pc, #48]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2243      	movs	r2, #67	@ 0x43
 8018d0e:	490f      	ldr	r1, [pc, #60]	@ (8018d4c <dhcp_inc_pcb_refcount+0x9c>)
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7ff feb5 	bl	8018a80 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8018d16:	4b09      	ldr	r3, [pc, #36]	@ (8018d3c <dhcp_inc_pcb_refcount+0x8c>)
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	490c      	ldr	r1, [pc, #48]	@ (8018d50 <dhcp_inc_pcb_refcount+0xa0>)
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7ff ff1c 	bl	8018b5c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8018d24:	4b04      	ldr	r3, [pc, #16]	@ (8018d38 <dhcp_inc_pcb_refcount+0x88>)
 8018d26:	781b      	ldrb	r3, [r3, #0]
 8018d28:	3301      	adds	r3, #1
 8018d2a:	b2da      	uxtb	r2, r3
 8018d2c:	4b02      	ldr	r3, [pc, #8]	@ (8018d38 <dhcp_inc_pcb_refcount+0x88>)
 8018d2e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018d30:	2300      	movs	r3, #0
}
 8018d32:	4618      	mov	r0, r3
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	bf00      	nop
 8018d38:	200177f0 	.word	0x200177f0
 8018d3c:	200177ec 	.word	0x200177ec
 8018d40:	08024444 	.word	0x08024444
 8018d44:	0802447c 	.word	0x0802447c
 8018d48:	080244a4 	.word	0x080244a4
 8018d4c:	0802521c 	.word	0x0802521c
 8018d50:	0801a679 	.word	0x0801a679

08018d54 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018d58:	4b0e      	ldr	r3, [pc, #56]	@ (8018d94 <dhcp_dec_pcb_refcount+0x40>)
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d105      	bne.n	8018d6c <dhcp_dec_pcb_refcount+0x18>
 8018d60:	4b0d      	ldr	r3, [pc, #52]	@ (8018d98 <dhcp_dec_pcb_refcount+0x44>)
 8018d62:	22ff      	movs	r2, #255	@ 0xff
 8018d64:	490d      	ldr	r1, [pc, #52]	@ (8018d9c <dhcp_dec_pcb_refcount+0x48>)
 8018d66:	480e      	ldr	r0, [pc, #56]	@ (8018da0 <dhcp_dec_pcb_refcount+0x4c>)
 8018d68:	f005 fbe6 	bl	801e538 <iprintf>
  dhcp_pcb_refcount--;
 8018d6c:	4b09      	ldr	r3, [pc, #36]	@ (8018d94 <dhcp_dec_pcb_refcount+0x40>)
 8018d6e:	781b      	ldrb	r3, [r3, #0]
 8018d70:	3b01      	subs	r3, #1
 8018d72:	b2da      	uxtb	r2, r3
 8018d74:	4b07      	ldr	r3, [pc, #28]	@ (8018d94 <dhcp_dec_pcb_refcount+0x40>)
 8018d76:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018d78:	4b06      	ldr	r3, [pc, #24]	@ (8018d94 <dhcp_dec_pcb_refcount+0x40>)
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d107      	bne.n	8018d90 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018d80:	4b08      	ldr	r3, [pc, #32]	@ (8018da4 <dhcp_dec_pcb_refcount+0x50>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7ff ff09 	bl	8018b9c <udp_remove>
    dhcp_pcb = NULL;
 8018d8a:	4b06      	ldr	r3, [pc, #24]	@ (8018da4 <dhcp_dec_pcb_refcount+0x50>)
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	601a      	str	r2, [r3, #0]
  }
}
 8018d90:	bf00      	nop
 8018d92:	bd80      	pop	{r7, pc}
 8018d94:	200177f0 	.word	0x200177f0
 8018d98:	08024444 	.word	0x08024444
 8018d9c:	080244cc 	.word	0x080244cc
 8018da0:	080244a4 	.word	0x080244a4
 8018da4:	200177ec 	.word	0x200177ec

08018da8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018db4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018db6:	210c      	movs	r1, #12
 8018db8:	68f8      	ldr	r0, [r7, #12]
 8018dba:	f001 f86f 	bl	8019e9c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018dbe:	4b06      	ldr	r3, [pc, #24]	@ (8018dd8 <dhcp_handle_nak+0x30>)
 8018dc0:	4a05      	ldr	r2, [pc, #20]	@ (8018dd8 <dhcp_handle_nak+0x30>)
 8018dc2:	4905      	ldr	r1, [pc, #20]	@ (8018dd8 <dhcp_handle_nak+0x30>)
 8018dc4:	6878      	ldr	r0, [r7, #4]
 8018dc6:	f7f8 fe77 	bl	8011ab8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f000 fc68 	bl	80196a0 <dhcp_discover>
}
 8018dd0:	bf00      	nop
 8018dd2:	3710      	adds	r7, #16
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	0802521c 	.word	0x0802521c

08018ddc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018de8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018dea:	2108      	movs	r1, #8
 8018dec:	68f8      	ldr	r0, [r7, #12]
 8018dee:	f001 f855 	bl	8019e9c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	331c      	adds	r3, #28
 8018df6:	2200      	movs	r2, #0
 8018df8:	4619      	mov	r1, r3
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f002 fb86 	bl	801b50c <etharp_query>
 8018e00:	4603      	mov	r3, r0
 8018e02:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	799b      	ldrb	r3, [r3, #6]
 8018e08:	2bff      	cmp	r3, #255	@ 0xff
 8018e0a:	d005      	beq.n	8018e18 <dhcp_check+0x3c>
    dhcp->tries++;
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	799b      	ldrb	r3, [r3, #6]
 8018e10:	3301      	adds	r3, #1
 8018e12:	b2da      	uxtb	r2, r3
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018e18:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8018e1c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018e1e:	893b      	ldrh	r3, [r7, #8]
 8018e20:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018e24:	4a06      	ldr	r2, [pc, #24]	@ (8018e40 <dhcp_check+0x64>)
 8018e26:	fb82 1203 	smull	r1, r2, r2, r3
 8018e2a:	1152      	asrs	r2, r2, #5
 8018e2c:	17db      	asrs	r3, r3, #31
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	b29a      	uxth	r2, r3
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8018e36:	bf00      	nop
 8018e38:	3710      	adds	r7, #16
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	10624dd3 	.word	0x10624dd3

08018e44 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8018e54:	4b0c      	ldr	r3, [pc, #48]	@ (8018e88 <dhcp_handle_offer+0x44>)
 8018e56:	789b      	ldrb	r3, [r3, #2]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d011      	beq.n	8018e80 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	2200      	movs	r2, #0
 8018e60:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8018e62:	4b0a      	ldr	r3, [pc, #40]	@ (8018e8c <dhcp_handle_offer+0x48>)
 8018e64:	689b      	ldr	r3, [r3, #8]
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7f7 fc5d 	bl	8010726 <lwip_htonl>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	691a      	ldr	r2, [r3, #16]
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f000 f808 	bl	8018e90 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018e80:	bf00      	nop
 8018e82:	3710      	adds	r7, #16
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	200177e0 	.word	0x200177e0
 8018e8c:	200177b8 	.word	0x200177b8

08018e90 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018e90:	b5b0      	push	{r4, r5, r7, lr}
 8018e92:	b08a      	sub	sp, #40	@ 0x28
 8018e94:	af02      	add	r7, sp, #8
 8018e96:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d109      	bne.n	8018eb2 <dhcp_select+0x22>
 8018e9e:	4b71      	ldr	r3, [pc, #452]	@ (8019064 <dhcp_select+0x1d4>)
 8018ea0:	f240 1277 	movw	r2, #375	@ 0x177
 8018ea4:	4970      	ldr	r1, [pc, #448]	@ (8019068 <dhcp_select+0x1d8>)
 8018ea6:	4871      	ldr	r0, [pc, #452]	@ (801906c <dhcp_select+0x1dc>)
 8018ea8:	f005 fb46 	bl	801e538 <iprintf>
 8018eac:	f06f 030f 	mvn.w	r3, #15
 8018eb0:	e0d3      	b.n	801905a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018eb6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018eb8:	69bb      	ldr	r3, [r7, #24]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d109      	bne.n	8018ed2 <dhcp_select+0x42>
 8018ebe:	4b69      	ldr	r3, [pc, #420]	@ (8019064 <dhcp_select+0x1d4>)
 8018ec0:	f240 1279 	movw	r2, #377	@ 0x179
 8018ec4:	496a      	ldr	r1, [pc, #424]	@ (8019070 <dhcp_select+0x1e0>)
 8018ec6:	4869      	ldr	r0, [pc, #420]	@ (801906c <dhcp_select+0x1dc>)
 8018ec8:	f005 fb36 	bl	801e538 <iprintf>
 8018ecc:	f06f 0305 	mvn.w	r3, #5
 8018ed0:	e0c3      	b.n	801905a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018ed2:	2101      	movs	r1, #1
 8018ed4:	69b8      	ldr	r0, [r7, #24]
 8018ed6:	f000 ffe1 	bl	8019e9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018eda:	f107 030c 	add.w	r3, r7, #12
 8018ede:	2203      	movs	r2, #3
 8018ee0:	69b9      	ldr	r1, [r7, #24]
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	f001 fc96 	bl	801a814 <dhcp_create_msg>
 8018ee8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f000 8085 	beq.w	8018ffc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018ef2:	697b      	ldr	r3, [r7, #20]
 8018ef4:	685b      	ldr	r3, [r3, #4]
 8018ef6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018ef8:	89b8      	ldrh	r0, [r7, #12]
 8018efa:	693b      	ldr	r3, [r7, #16]
 8018efc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f00:	2302      	movs	r3, #2
 8018f02:	2239      	movs	r2, #57	@ 0x39
 8018f04:	f000 ffe4 	bl	8019ed0 <dhcp_option>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018f0c:	89b8      	ldrh	r0, [r7, #12]
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018f18:	461a      	mov	r2, r3
 8018f1a:	f001 f833 	bl	8019f84 <dhcp_option_short>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018f22:	89b8      	ldrh	r0, [r7, #12]
 8018f24:	693b      	ldr	r3, [r7, #16]
 8018f26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f2a:	2304      	movs	r3, #4
 8018f2c:	2232      	movs	r2, #50	@ 0x32
 8018f2e:	f000 ffcf 	bl	8019ed0 <dhcp_option>
 8018f32:	4603      	mov	r3, r0
 8018f34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018f36:	89bc      	ldrh	r4, [r7, #12]
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018f3e:	69bb      	ldr	r3, [r7, #24]
 8018f40:	69db      	ldr	r3, [r3, #28]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7f7 fbef 	bl	8010726 <lwip_htonl>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	4629      	mov	r1, r5
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f001 f84a 	bl	8019fe8 <dhcp_option_long>
 8018f54:	4603      	mov	r3, r0
 8018f56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018f58:	89b8      	ldrh	r0, [r7, #12]
 8018f5a:	693b      	ldr	r3, [r7, #16]
 8018f5c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f60:	2304      	movs	r3, #4
 8018f62:	2236      	movs	r2, #54	@ 0x36
 8018f64:	f000 ffb4 	bl	8019ed0 <dhcp_option>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018f6c:	89bc      	ldrh	r4, [r7, #12]
 8018f6e:	693b      	ldr	r3, [r7, #16]
 8018f70:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018f74:	69bb      	ldr	r3, [r7, #24]
 8018f76:	699b      	ldr	r3, [r3, #24]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	f7f7 fbd4 	bl	8010726 <lwip_htonl>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	461a      	mov	r2, r3
 8018f82:	4629      	mov	r1, r5
 8018f84:	4620      	mov	r0, r4
 8018f86:	f001 f82f 	bl	8019fe8 <dhcp_option_long>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018f8e:	89b8      	ldrh	r0, [r7, #12]
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f96:	2304      	movs	r3, #4
 8018f98:	2237      	movs	r2, #55	@ 0x37
 8018f9a:	f000 ff99 	bl	8019ed0 <dhcp_option>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	77bb      	strb	r3, [r7, #30]
 8018fa6:	e00e      	b.n	8018fc6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018fa8:	89b8      	ldrh	r0, [r7, #12]
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018fb0:	7fbb      	ldrb	r3, [r7, #30]
 8018fb2:	4a30      	ldr	r2, [pc, #192]	@ (8019074 <dhcp_select+0x1e4>)
 8018fb4:	5cd3      	ldrb	r3, [r2, r3]
 8018fb6:	461a      	mov	r2, r3
 8018fb8:	f000 ffbe 	bl	8019f38 <dhcp_option_byte>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018fc0:	7fbb      	ldrb	r3, [r7, #30]
 8018fc2:	3301      	adds	r3, #1
 8018fc4:	77bb      	strb	r3, [r7, #30]
 8018fc6:	7fbb      	ldrb	r3, [r7, #30]
 8018fc8:	2b03      	cmp	r3, #3
 8018fca:	d9ed      	bls.n	8018fa8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018fcc:	89b8      	ldrh	r0, [r7, #12]
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	33f0      	adds	r3, #240	@ 0xf0
 8018fd2:	697a      	ldr	r2, [r7, #20]
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	f001 fcf3 	bl	801a9c0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018fda:	4b27      	ldr	r3, [pc, #156]	@ (8019078 <dhcp_select+0x1e8>)
 8018fdc:	6818      	ldr	r0, [r3, #0]
 8018fde:	4b27      	ldr	r3, [pc, #156]	@ (801907c <dhcp_select+0x1ec>)
 8018fe0:	9301      	str	r3, [sp, #4]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	9300      	str	r3, [sp, #0]
 8018fe6:	2343      	movs	r3, #67	@ 0x43
 8018fe8:	4a25      	ldr	r2, [pc, #148]	@ (8019080 <dhcp_select+0x1f0>)
 8018fea:	6979      	ldr	r1, [r7, #20]
 8018fec:	f7ff fbda 	bl	80187a4 <udp_sendto_if_src>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018ff4:	6978      	ldr	r0, [r7, #20]
 8018ff6:	f7f9 fa6d 	bl	80124d4 <pbuf_free>
 8018ffa:	e001      	b.n	8019000 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018ffc:	23ff      	movs	r3, #255	@ 0xff
 8018ffe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019000:	69bb      	ldr	r3, [r7, #24]
 8019002:	799b      	ldrb	r3, [r3, #6]
 8019004:	2bff      	cmp	r3, #255	@ 0xff
 8019006:	d005      	beq.n	8019014 <dhcp_select+0x184>
    dhcp->tries++;
 8019008:	69bb      	ldr	r3, [r7, #24]
 801900a:	799b      	ldrb	r3, [r3, #6]
 801900c:	3301      	adds	r3, #1
 801900e:	b2da      	uxtb	r2, r3
 8019010:	69bb      	ldr	r3, [r7, #24]
 8019012:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019014:	69bb      	ldr	r3, [r7, #24]
 8019016:	799b      	ldrb	r3, [r3, #6]
 8019018:	2b05      	cmp	r3, #5
 801901a:	d80d      	bhi.n	8019038 <dhcp_select+0x1a8>
 801901c:	69bb      	ldr	r3, [r7, #24]
 801901e:	799b      	ldrb	r3, [r3, #6]
 8019020:	461a      	mov	r2, r3
 8019022:	2301      	movs	r3, #1
 8019024:	4093      	lsls	r3, r2
 8019026:	b29b      	uxth	r3, r3
 8019028:	461a      	mov	r2, r3
 801902a:	0152      	lsls	r2, r2, #5
 801902c:	1ad2      	subs	r2, r2, r3
 801902e:	0092      	lsls	r2, r2, #2
 8019030:	4413      	add	r3, r2
 8019032:	00db      	lsls	r3, r3, #3
 8019034:	b29b      	uxth	r3, r3
 8019036:	e001      	b.n	801903c <dhcp_select+0x1ac>
 8019038:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801903c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801903e:	89fb      	ldrh	r3, [r7, #14]
 8019040:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019044:	4a0f      	ldr	r2, [pc, #60]	@ (8019084 <dhcp_select+0x1f4>)
 8019046:	fb82 1203 	smull	r1, r2, r2, r3
 801904a:	1152      	asrs	r2, r2, #5
 801904c:	17db      	asrs	r3, r3, #31
 801904e:	1ad3      	subs	r3, r2, r3
 8019050:	b29a      	uxth	r2, r3
 8019052:	69bb      	ldr	r3, [r7, #24]
 8019054:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019056:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801905a:	4618      	mov	r0, r3
 801905c:	3720      	adds	r7, #32
 801905e:	46bd      	mov	sp, r7
 8019060:	bdb0      	pop	{r4, r5, r7, pc}
 8019062:	bf00      	nop
 8019064:	08024444 	.word	0x08024444
 8019068:	080244f0 	.word	0x080244f0
 801906c:	080244a4 	.word	0x080244a4
 8019070:	0802450c 	.word	0x0802450c
 8019074:	2000004c 	.word	0x2000004c
 8019078:	200177ec 	.word	0x200177ec
 801907c:	0802521c 	.word	0x0802521c
 8019080:	08025220 	.word	0x08025220
 8019084:	10624dd3 	.word	0x10624dd3

08019088 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b082      	sub	sp, #8
 801908c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801908e:	4b27      	ldr	r3, [pc, #156]	@ (801912c <dhcp_coarse_tmr+0xa4>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	607b      	str	r3, [r7, #4]
 8019094:	e042      	b.n	801911c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801909a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d039      	beq.n	8019116 <dhcp_coarse_tmr+0x8e>
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	795b      	ldrb	r3, [r3, #5]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d035      	beq.n	8019116 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	8a9b      	ldrh	r3, [r3, #20]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d012      	beq.n	80190d8 <dhcp_coarse_tmr+0x50>
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	8a5b      	ldrh	r3, [r3, #18]
 80190b6:	3301      	adds	r3, #1
 80190b8:	b29a      	uxth	r2, r3
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	825a      	strh	r2, [r3, #18]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	8a5a      	ldrh	r2, [r3, #18]
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	8a9b      	ldrh	r3, [r3, #20]
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d106      	bne.n	80190d8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80190ca:	6878      	ldr	r0, [r7, #4]
 80190cc:	f000 fe4c 	bl	8019d68 <dhcp_release_and_stop>
        dhcp_start(netif);
 80190d0:	6878      	ldr	r0, [r7, #4]
 80190d2:	f000 f989 	bl	80193e8 <dhcp_start>
 80190d6:	e01e      	b.n	8019116 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	8a1b      	ldrh	r3, [r3, #16]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d00b      	beq.n	80190f8 <dhcp_coarse_tmr+0x70>
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	8a1b      	ldrh	r3, [r3, #16]
 80190e4:	1e5a      	subs	r2, r3, #1
 80190e6:	b291      	uxth	r1, r2
 80190e8:	683a      	ldr	r2, [r7, #0]
 80190ea:	8211      	strh	r1, [r2, #16]
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	d103      	bne.n	80190f8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f000 f8c6 	bl	8019282 <dhcp_t2_timeout>
 80190f6:	e00e      	b.n	8019116 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	89db      	ldrh	r3, [r3, #14]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d00a      	beq.n	8019116 <dhcp_coarse_tmr+0x8e>
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	89db      	ldrh	r3, [r3, #14]
 8019104:	1e5a      	subs	r2, r3, #1
 8019106:	b291      	uxth	r1, r2
 8019108:	683a      	ldr	r2, [r7, #0]
 801910a:	81d1      	strh	r1, [r2, #14]
 801910c:	2b01      	cmp	r3, #1
 801910e:	d102      	bne.n	8019116 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	f000 f888 	bl	8019226 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	607b      	str	r3, [r7, #4]
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d1b9      	bne.n	8019096 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8019122:	bf00      	nop
 8019124:	bf00      	nop
 8019126:	3708      	adds	r7, #8
 8019128:	46bd      	mov	sp, r7
 801912a:	bd80      	pop	{r7, pc}
 801912c:	2001774c 	.word	0x2001774c

08019130 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019136:	4b16      	ldr	r3, [pc, #88]	@ (8019190 <dhcp_fine_tmr+0x60>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	607b      	str	r3, [r7, #4]
 801913c:	e020      	b.n	8019180 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019142:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d017      	beq.n	801917a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	891b      	ldrh	r3, [r3, #8]
 801914e:	2b01      	cmp	r3, #1
 8019150:	d906      	bls.n	8019160 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	891b      	ldrh	r3, [r3, #8]
 8019156:	3b01      	subs	r3, #1
 8019158:	b29a      	uxth	r2, r3
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	811a      	strh	r2, [r3, #8]
 801915e:	e00c      	b.n	801917a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019160:	683b      	ldr	r3, [r7, #0]
 8019162:	891b      	ldrh	r3, [r3, #8]
 8019164:	2b01      	cmp	r3, #1
 8019166:	d108      	bne.n	801917a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	891b      	ldrh	r3, [r3, #8]
 801916c:	3b01      	subs	r3, #1
 801916e:	b29a      	uxth	r2, r3
 8019170:	683b      	ldr	r3, [r7, #0]
 8019172:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019174:	6878      	ldr	r0, [r7, #4]
 8019176:	f000 f80d 	bl	8019194 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	607b      	str	r3, [r7, #4]
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d1db      	bne.n	801913e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8019186:	bf00      	nop
 8019188:	bf00      	nop
 801918a:	3708      	adds	r7, #8
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}
 8019190:	2001774c 	.word	0x2001774c

08019194 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	795b      	ldrb	r3, [r3, #5]
 80191a6:	2b0c      	cmp	r3, #12
 80191a8:	d003      	beq.n	80191b2 <dhcp_timeout+0x1e>
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	795b      	ldrb	r3, [r3, #5]
 80191ae:	2b06      	cmp	r3, #6
 80191b0:	d103      	bne.n	80191ba <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f000 fa74 	bl	80196a0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80191b8:	e031      	b.n	801921e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	795b      	ldrb	r3, [r3, #5]
 80191be:	2b01      	cmp	r3, #1
 80191c0:	d10e      	bne.n	80191e0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	799b      	ldrb	r3, [r3, #6]
 80191c6:	2b05      	cmp	r3, #5
 80191c8:	d803      	bhi.n	80191d2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f7ff fe60 	bl	8018e90 <dhcp_select>
}
 80191d0:	e025      	b.n	801921e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80191d2:	6878      	ldr	r0, [r7, #4]
 80191d4:	f000 fdc8 	bl	8019d68 <dhcp_release_and_stop>
      dhcp_start(netif);
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f000 f905 	bl	80193e8 <dhcp_start>
}
 80191de:	e01e      	b.n	801921e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	795b      	ldrb	r3, [r3, #5]
 80191e4:	2b08      	cmp	r3, #8
 80191e6:	d10b      	bne.n	8019200 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	799b      	ldrb	r3, [r3, #6]
 80191ec:	2b01      	cmp	r3, #1
 80191ee:	d803      	bhi.n	80191f8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80191f0:	6878      	ldr	r0, [r7, #4]
 80191f2:	f7ff fdf3 	bl	8018ddc <dhcp_check>
}
 80191f6:	e012      	b.n	801921e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f000 faf3 	bl	80197e4 <dhcp_bind>
}
 80191fe:	e00e      	b.n	801921e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	795b      	ldrb	r3, [r3, #5]
 8019204:	2b03      	cmp	r3, #3
 8019206:	d10a      	bne.n	801921e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	799b      	ldrb	r3, [r3, #6]
 801920c:	2b01      	cmp	r3, #1
 801920e:	d803      	bhi.n	8019218 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019210:	6878      	ldr	r0, [r7, #4]
 8019212:	f000 fcf5 	bl	8019c00 <dhcp_reboot>
}
 8019216:	e002      	b.n	801921e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8019218:	6878      	ldr	r0, [r7, #4]
 801921a:	f000 fa41 	bl	80196a0 <dhcp_discover>
}
 801921e:	bf00      	nop
 8019220:	3710      	adds	r7, #16
 8019222:	46bd      	mov	sp, r7
 8019224:	bd80      	pop	{r7, pc}

08019226 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8019226:	b580      	push	{r7, lr}
 8019228:	b084      	sub	sp, #16
 801922a:	af00      	add	r7, sp, #0
 801922c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019232:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	795b      	ldrb	r3, [r3, #5]
 8019238:	2b01      	cmp	r3, #1
 801923a:	d007      	beq.n	801924c <dhcp_t1_timeout+0x26>
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	795b      	ldrb	r3, [r3, #5]
 8019240:	2b0a      	cmp	r3, #10
 8019242:	d003      	beq.n	801924c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019248:	2b05      	cmp	r3, #5
 801924a:	d116      	bne.n	801927a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	f000 fba3 	bl	8019998 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	899b      	ldrh	r3, [r3, #12]
 8019256:	461a      	mov	r2, r3
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	8a5b      	ldrh	r3, [r3, #18]
 801925c:	1ad3      	subs	r3, r2, r3
 801925e:	2b01      	cmp	r3, #1
 8019260:	dd0b      	ble.n	801927a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	899b      	ldrh	r3, [r3, #12]
 8019266:	461a      	mov	r2, r3
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	8a5b      	ldrh	r3, [r3, #18]
 801926c:	1ad3      	subs	r3, r2, r3
 801926e:	0fda      	lsrs	r2, r3, #31
 8019270:	4413      	add	r3, r2
 8019272:	105b      	asrs	r3, r3, #1
 8019274:	b29a      	uxth	r2, r3
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801927a:	bf00      	nop
 801927c:	3710      	adds	r7, #16
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}

08019282 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8019282:	b580      	push	{r7, lr}
 8019284:	b084      	sub	sp, #16
 8019286:	af00      	add	r7, sp, #0
 8019288:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801928e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	795b      	ldrb	r3, [r3, #5]
 8019294:	2b01      	cmp	r3, #1
 8019296:	d00b      	beq.n	80192b0 <dhcp_t2_timeout+0x2e>
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	795b      	ldrb	r3, [r3, #5]
 801929c:	2b0a      	cmp	r3, #10
 801929e:	d007      	beq.n	80192b0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80192a4:	2b05      	cmp	r3, #5
 80192a6:	d003      	beq.n	80192b0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	795b      	ldrb	r3, [r3, #5]
 80192ac:	2b04      	cmp	r3, #4
 80192ae:	d116      	bne.n	80192de <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 fc0b 	bl	8019acc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	8a9b      	ldrh	r3, [r3, #20]
 80192ba:	461a      	mov	r2, r3
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	8a5b      	ldrh	r3, [r3, #18]
 80192c0:	1ad3      	subs	r3, r2, r3
 80192c2:	2b01      	cmp	r3, #1
 80192c4:	dd0b      	ble.n	80192de <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	8a9b      	ldrh	r3, [r3, #20]
 80192ca:	461a      	mov	r2, r3
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	8a5b      	ldrh	r3, [r3, #18]
 80192d0:	1ad3      	subs	r3, r2, r3
 80192d2:	0fda      	lsrs	r2, r3, #31
 80192d4:	4413      	add	r3, r2
 80192d6:	105b      	asrs	r3, r3, #1
 80192d8:	b29a      	uxth	r2, r3
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80192de:	bf00      	nop
 80192e0:	3710      	adds	r7, #16
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}
	...

080192e8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b086      	sub	sp, #24
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
 80192f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192f6:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80192f8:	693b      	ldr	r3, [r7, #16]
 80192fa:	2200      	movs	r2, #0
 80192fc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80192fe:	693b      	ldr	r3, [r7, #16]
 8019300:	2200      	movs	r2, #0
 8019302:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019304:	4b36      	ldr	r3, [pc, #216]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 8019306:	78db      	ldrb	r3, [r3, #3]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d003      	beq.n	8019314 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801930c:	4b35      	ldr	r3, [pc, #212]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 801930e:	68da      	ldr	r2, [r3, #12]
 8019310:	693b      	ldr	r3, [r7, #16]
 8019312:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019314:	4b32      	ldr	r3, [pc, #200]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 8019316:	791b      	ldrb	r3, [r3, #4]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d004      	beq.n	8019326 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801931c:	4b31      	ldr	r3, [pc, #196]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 801931e:	691a      	ldr	r2, [r3, #16]
 8019320:	693b      	ldr	r3, [r7, #16]
 8019322:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019324:	e004      	b.n	8019330 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019326:	693b      	ldr	r3, [r7, #16]
 8019328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801932a:	085a      	lsrs	r2, r3, #1
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019330:	4b2b      	ldr	r3, [pc, #172]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 8019332:	795b      	ldrb	r3, [r3, #5]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d004      	beq.n	8019342 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019338:	4b2a      	ldr	r3, [pc, #168]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 801933a:	695a      	ldr	r2, [r3, #20]
 801933c:	693b      	ldr	r3, [r7, #16]
 801933e:	631a      	str	r2, [r3, #48]	@ 0x30
 8019340:	e007      	b.n	8019352 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019342:	693b      	ldr	r3, [r7, #16]
 8019344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019346:	4613      	mov	r3, r2
 8019348:	00db      	lsls	r3, r3, #3
 801934a:	1a9b      	subs	r3, r3, r2
 801934c:	08da      	lsrs	r2, r3, #3
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	691a      	ldr	r2, [r3, #16]
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801935a:	4b21      	ldr	r3, [pc, #132]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 801935c:	799b      	ldrb	r3, [r3, #6]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d00b      	beq.n	801937a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019362:	4b20      	ldr	r3, [pc, #128]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 8019364:	699b      	ldr	r3, [r3, #24]
 8019366:	4618      	mov	r0, r3
 8019368:	f7f7 f9dd 	bl	8010726 <lwip_htonl>
 801936c:	4602      	mov	r2, r0
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	2201      	movs	r2, #1
 8019376:	71da      	strb	r2, [r3, #7]
 8019378:	e002      	b.n	8019380 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801937a:	693b      	ldr	r3, [r7, #16]
 801937c:	2200      	movs	r2, #0
 801937e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019380:	4b17      	ldr	r3, [pc, #92]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 8019382:	79db      	ldrb	r3, [r3, #7]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d007      	beq.n	8019398 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019388:	4b16      	ldr	r3, [pc, #88]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 801938a:	69db      	ldr	r3, [r3, #28]
 801938c:	4618      	mov	r0, r3
 801938e:	f7f7 f9ca 	bl	8010726 <lwip_htonl>
 8019392:	4602      	mov	r2, r0
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019398:	2300      	movs	r3, #0
 801939a:	75fb      	strb	r3, [r7, #23]
 801939c:	e013      	b.n	80193c6 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801939e:	7dfb      	ldrb	r3, [r7, #23]
 80193a0:	3308      	adds	r3, #8
 80193a2:	4a10      	ldr	r2, [pc, #64]	@ (80193e4 <dhcp_handle_ack+0xfc>)
 80193a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7f7 f9bc 	bl	8010726 <lwip_htonl>
 80193ae:	4603      	mov	r3, r0
 80193b0:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80193b2:	f107 020c 	add.w	r2, r7, #12
 80193b6:	7dfb      	ldrb	r3, [r7, #23]
 80193b8:	4611      	mov	r1, r2
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7f7 f9d4 	bl	8010768 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80193c0:	7dfb      	ldrb	r3, [r7, #23]
 80193c2:	3301      	adds	r3, #1
 80193c4:	75fb      	strb	r3, [r7, #23]
 80193c6:	7dfb      	ldrb	r3, [r7, #23]
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	d805      	bhi.n	80193d8 <dhcp_handle_ack+0xf0>
 80193cc:	7dfb      	ldrb	r3, [r7, #23]
 80193ce:	3308      	adds	r3, #8
 80193d0:	4a03      	ldr	r2, [pc, #12]	@ (80193e0 <dhcp_handle_ack+0xf8>)
 80193d2:	5cd3      	ldrb	r3, [r2, r3]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d1e2      	bne.n	801939e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80193d8:	bf00      	nop
 80193da:	3718      	adds	r7, #24
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	200177e0 	.word	0x200177e0
 80193e4:	200177b8 	.word	0x200177b8

080193e8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b084      	sub	sp, #16
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d109      	bne.n	801940a <dhcp_start+0x22>
 80193f6:	4b37      	ldr	r3, [pc, #220]	@ (80194d4 <dhcp_start+0xec>)
 80193f8:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80193fc:	4936      	ldr	r1, [pc, #216]	@ (80194d8 <dhcp_start+0xf0>)
 80193fe:	4837      	ldr	r0, [pc, #220]	@ (80194dc <dhcp_start+0xf4>)
 8019400:	f005 f89a 	bl	801e538 <iprintf>
 8019404:	f06f 030f 	mvn.w	r3, #15
 8019408:	e060      	b.n	80194cc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019410:	f003 0301 	and.w	r3, r3, #1
 8019414:	2b00      	cmp	r3, #0
 8019416:	d109      	bne.n	801942c <dhcp_start+0x44>
 8019418:	4b2e      	ldr	r3, [pc, #184]	@ (80194d4 <dhcp_start+0xec>)
 801941a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801941e:	4930      	ldr	r1, [pc, #192]	@ (80194e0 <dhcp_start+0xf8>)
 8019420:	482e      	ldr	r0, [pc, #184]	@ (80194dc <dhcp_start+0xf4>)
 8019422:	f005 f889 	bl	801e538 <iprintf>
 8019426:	f06f 030f 	mvn.w	r3, #15
 801942a:	e04f      	b.n	80194cc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019430:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019436:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801943a:	d202      	bcs.n	8019442 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801943c:	f04f 33ff 	mov.w	r3, #4294967295
 8019440:	e044      	b.n	80194cc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d10d      	bne.n	8019464 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8019448:	2034      	movs	r0, #52	@ 0x34
 801944a:	f7f7 ff79 	bl	8011340 <mem_malloc>
 801944e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d102      	bne.n	801945c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8019456:	f04f 33ff 	mov.w	r3, #4294967295
 801945a:	e037      	b.n	80194cc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	68fa      	ldr	r2, [r7, #12]
 8019460:	625a      	str	r2, [r3, #36]	@ 0x24
 8019462:	e005      	b.n	8019470 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	791b      	ldrb	r3, [r3, #4]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d001      	beq.n	8019470 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801946c:	f7ff fc72 	bl	8018d54 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019470:	2234      	movs	r2, #52	@ 0x34
 8019472:	2100      	movs	r1, #0
 8019474:	68f8      	ldr	r0, [r7, #12]
 8019476:	f005 f993 	bl	801e7a0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801947a:	f7ff fc19 	bl	8018cb0 <dhcp_inc_pcb_refcount>
 801947e:	4603      	mov	r3, r0
 8019480:	2b00      	cmp	r3, #0
 8019482:	d002      	beq.n	801948a <dhcp_start+0xa2>
    return ERR_MEM;
 8019484:	f04f 33ff 	mov.w	r3, #4294967295
 8019488:	e020      	b.n	80194cc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	2201      	movs	r2, #1
 801948e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019496:	f003 0304 	and.w	r3, r3, #4
 801949a:	2b00      	cmp	r3, #0
 801949c:	d105      	bne.n	80194aa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801949e:	2102      	movs	r1, #2
 80194a0:	68f8      	ldr	r0, [r7, #12]
 80194a2:	f000 fcfb 	bl	8019e9c <dhcp_set_state>
    return ERR_OK;
 80194a6:	2300      	movs	r3, #0
 80194a8:	e010      	b.n	80194cc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80194aa:	6878      	ldr	r0, [r7, #4]
 80194ac:	f000 f8f8 	bl	80196a0 <dhcp_discover>
 80194b0:	4603      	mov	r3, r0
 80194b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80194b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d005      	beq.n	80194c8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80194bc:	6878      	ldr	r0, [r7, #4]
 80194be:	f000 fc53 	bl	8019d68 <dhcp_release_and_stop>
    return ERR_MEM;
 80194c2:	f04f 33ff 	mov.w	r3, #4294967295
 80194c6:	e001      	b.n	80194cc <dhcp_start+0xe4>
  }
  return result;
 80194c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3710      	adds	r7, #16
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	08024444 	.word	0x08024444
 80194d8:	08024528 	.word	0x08024528
 80194dc:	080244a4 	.word	0x080244a4
 80194e0:	0802456c 	.word	0x0802456c

080194e4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194f0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d025      	beq.n	8019544 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	795b      	ldrb	r3, [r3, #5]
 80194fc:	2b0a      	cmp	r3, #10
 80194fe:	d008      	beq.n	8019512 <dhcp_network_changed+0x2e>
 8019500:	2b0a      	cmp	r3, #10
 8019502:	dc0d      	bgt.n	8019520 <dhcp_network_changed+0x3c>
 8019504:	2b00      	cmp	r3, #0
 8019506:	d01f      	beq.n	8019548 <dhcp_network_changed+0x64>
 8019508:	2b00      	cmp	r3, #0
 801950a:	db09      	blt.n	8019520 <dhcp_network_changed+0x3c>
 801950c:	3b03      	subs	r3, #3
 801950e:	2b02      	cmp	r3, #2
 8019510:	d806      	bhi.n	8019520 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	2200      	movs	r2, #0
 8019516:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f000 fb71 	bl	8019c00 <dhcp_reboot>
      break;
 801951e:	e014      	b.n	801954a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	795b      	ldrb	r3, [r3, #5]
 8019524:	2b0c      	cmp	r3, #12
 8019526:	d906      	bls.n	8019536 <dhcp_network_changed+0x52>
 8019528:	4b09      	ldr	r3, [pc, #36]	@ (8019550 <dhcp_network_changed+0x6c>)
 801952a:	f240 326d 	movw	r2, #877	@ 0x36d
 801952e:	4909      	ldr	r1, [pc, #36]	@ (8019554 <dhcp_network_changed+0x70>)
 8019530:	4809      	ldr	r0, [pc, #36]	@ (8019558 <dhcp_network_changed+0x74>)
 8019532:	f005 f801 	bl	801e538 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2200      	movs	r2, #0
 801953a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	f000 f8af 	bl	80196a0 <dhcp_discover>
      break;
 8019542:	e002      	b.n	801954a <dhcp_network_changed+0x66>
    return;
 8019544:	bf00      	nop
 8019546:	e000      	b.n	801954a <dhcp_network_changed+0x66>
      break;
 8019548:	bf00      	nop
  }
}
 801954a:	3710      	adds	r7, #16
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	08024444 	.word	0x08024444
 8019554:	08024590 	.word	0x08024590
 8019558:	080244a4 	.word	0x080244a4

0801955c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b084      	sub	sp, #16
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d107      	bne.n	801957c <dhcp_arp_reply+0x20>
 801956c:	4b0e      	ldr	r3, [pc, #56]	@ (80195a8 <dhcp_arp_reply+0x4c>)
 801956e:	f240 328b 	movw	r2, #907	@ 0x38b
 8019572:	490e      	ldr	r1, [pc, #56]	@ (80195ac <dhcp_arp_reply+0x50>)
 8019574:	480e      	ldr	r0, [pc, #56]	@ (80195b0 <dhcp_arp_reply+0x54>)
 8019576:	f004 ffdf 	bl	801e538 <iprintf>
 801957a:	e012      	b.n	80195a2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019580:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d00c      	beq.n	80195a2 <dhcp_arp_reply+0x46>
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	795b      	ldrb	r3, [r3, #5]
 801958c:	2b08      	cmp	r3, #8
 801958e:	d108      	bne.n	80195a2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	681a      	ldr	r2, [r3, #0]
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	69db      	ldr	r3, [r3, #28]
 8019598:	429a      	cmp	r2, r3
 801959a:	d102      	bne.n	80195a2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f000 f809 	bl	80195b4 <dhcp_decline>
    }
  }
}
 80195a2:	3710      	adds	r7, #16
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	08024444 	.word	0x08024444
 80195ac:	08024528 	.word	0x08024528
 80195b0:	080244a4 	.word	0x080244a4

080195b4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80195b4:	b5b0      	push	{r4, r5, r7, lr}
 80195b6:	b08a      	sub	sp, #40	@ 0x28
 80195b8:	af02      	add	r7, sp, #8
 80195ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195c0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80195c2:	210c      	movs	r1, #12
 80195c4:	69b8      	ldr	r0, [r7, #24]
 80195c6:	f000 fc69 	bl	8019e9c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80195ca:	f107 030c 	add.w	r3, r7, #12
 80195ce:	2204      	movs	r2, #4
 80195d0:	69b9      	ldr	r1, [r7, #24]
 80195d2:	6878      	ldr	r0, [r7, #4]
 80195d4:	f001 f91e 	bl	801a814 <dhcp_create_msg>
 80195d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d035      	beq.n	801964c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	685b      	ldr	r3, [r3, #4]
 80195e4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80195e6:	89b8      	ldrh	r0, [r7, #12]
 80195e8:	693b      	ldr	r3, [r7, #16]
 80195ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195ee:	2304      	movs	r3, #4
 80195f0:	2232      	movs	r2, #50	@ 0x32
 80195f2:	f000 fc6d 	bl	8019ed0 <dhcp_option>
 80195f6:	4603      	mov	r3, r0
 80195f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80195fa:	89bc      	ldrh	r4, [r7, #12]
 80195fc:	693b      	ldr	r3, [r7, #16]
 80195fe:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	69db      	ldr	r3, [r3, #28]
 8019606:	4618      	mov	r0, r3
 8019608:	f7f7 f88d 	bl	8010726 <lwip_htonl>
 801960c:	4603      	mov	r3, r0
 801960e:	461a      	mov	r2, r3
 8019610:	4629      	mov	r1, r5
 8019612:	4620      	mov	r0, r4
 8019614:	f000 fce8 	bl	8019fe8 <dhcp_option_long>
 8019618:	4603      	mov	r3, r0
 801961a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801961c:	89b8      	ldrh	r0, [r7, #12]
 801961e:	693b      	ldr	r3, [r7, #16]
 8019620:	33f0      	adds	r3, #240	@ 0xf0
 8019622:	697a      	ldr	r2, [r7, #20]
 8019624:	4619      	mov	r1, r3
 8019626:	f001 f9cb 	bl	801a9c0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801962a:	4b19      	ldr	r3, [pc, #100]	@ (8019690 <dhcp_decline+0xdc>)
 801962c:	6818      	ldr	r0, [r3, #0]
 801962e:	4b19      	ldr	r3, [pc, #100]	@ (8019694 <dhcp_decline+0xe0>)
 8019630:	9301      	str	r3, [sp, #4]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	9300      	str	r3, [sp, #0]
 8019636:	2343      	movs	r3, #67	@ 0x43
 8019638:	4a17      	ldr	r2, [pc, #92]	@ (8019698 <dhcp_decline+0xe4>)
 801963a:	6979      	ldr	r1, [r7, #20]
 801963c:	f7ff f8b2 	bl	80187a4 <udp_sendto_if_src>
 8019640:	4603      	mov	r3, r0
 8019642:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019644:	6978      	ldr	r0, [r7, #20]
 8019646:	f7f8 ff45 	bl	80124d4 <pbuf_free>
 801964a:	e001      	b.n	8019650 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801964c:	23ff      	movs	r3, #255	@ 0xff
 801964e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019650:	69bb      	ldr	r3, [r7, #24]
 8019652:	799b      	ldrb	r3, [r3, #6]
 8019654:	2bff      	cmp	r3, #255	@ 0xff
 8019656:	d005      	beq.n	8019664 <dhcp_decline+0xb0>
    dhcp->tries++;
 8019658:	69bb      	ldr	r3, [r7, #24]
 801965a:	799b      	ldrb	r3, [r3, #6]
 801965c:	3301      	adds	r3, #1
 801965e:	b2da      	uxtb	r2, r3
 8019660:	69bb      	ldr	r3, [r7, #24]
 8019662:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019664:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019668:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801966a:	89fb      	ldrh	r3, [r7, #14]
 801966c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019670:	4a0a      	ldr	r2, [pc, #40]	@ (801969c <dhcp_decline+0xe8>)
 8019672:	fb82 1203 	smull	r1, r2, r2, r3
 8019676:	1152      	asrs	r2, r2, #5
 8019678:	17db      	asrs	r3, r3, #31
 801967a:	1ad3      	subs	r3, r2, r3
 801967c:	b29a      	uxth	r2, r3
 801967e:	69bb      	ldr	r3, [r7, #24]
 8019680:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019682:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019686:	4618      	mov	r0, r3
 8019688:	3720      	adds	r7, #32
 801968a:	46bd      	mov	sp, r7
 801968c:	bdb0      	pop	{r4, r5, r7, pc}
 801968e:	bf00      	nop
 8019690:	200177ec 	.word	0x200177ec
 8019694:	0802521c 	.word	0x0802521c
 8019698:	08025220 	.word	0x08025220
 801969c:	10624dd3 	.word	0x10624dd3

080196a0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b08a      	sub	sp, #40	@ 0x28
 80196a4:	af02      	add	r7, sp, #8
 80196a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196ac:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80196ae:	2300      	movs	r3, #0
 80196b0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	2200      	movs	r2, #0
 80196b6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80196b8:	2106      	movs	r1, #6
 80196ba:	69b8      	ldr	r0, [r7, #24]
 80196bc:	f000 fbee 	bl	8019e9c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80196c0:	f107 0308 	add.w	r3, r7, #8
 80196c4:	2201      	movs	r2, #1
 80196c6:	69b9      	ldr	r1, [r7, #24]
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f001 f8a3 	bl	801a814 <dhcp_create_msg>
 80196ce:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80196d0:	693b      	ldr	r3, [r7, #16]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d04b      	beq.n	801976e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80196d6:	693b      	ldr	r3, [r7, #16]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80196dc:	8938      	ldrh	r0, [r7, #8]
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196e4:	2302      	movs	r3, #2
 80196e6:	2239      	movs	r2, #57	@ 0x39
 80196e8:	f000 fbf2 	bl	8019ed0 <dhcp_option>
 80196ec:	4603      	mov	r3, r0
 80196ee:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80196f0:	8938      	ldrh	r0, [r7, #8]
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80196fc:	461a      	mov	r2, r3
 80196fe:	f000 fc41 	bl	8019f84 <dhcp_option_short>
 8019702:	4603      	mov	r3, r0
 8019704:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019706:	8938      	ldrh	r0, [r7, #8]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801970e:	2304      	movs	r3, #4
 8019710:	2237      	movs	r2, #55	@ 0x37
 8019712:	f000 fbdd 	bl	8019ed0 <dhcp_option>
 8019716:	4603      	mov	r3, r0
 8019718:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801971a:	2300      	movs	r3, #0
 801971c:	77fb      	strb	r3, [r7, #31]
 801971e:	e00e      	b.n	801973e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019720:	8938      	ldrh	r0, [r7, #8]
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019728:	7ffb      	ldrb	r3, [r7, #31]
 801972a:	4a29      	ldr	r2, [pc, #164]	@ (80197d0 <dhcp_discover+0x130>)
 801972c:	5cd3      	ldrb	r3, [r2, r3]
 801972e:	461a      	mov	r2, r3
 8019730:	f000 fc02 	bl	8019f38 <dhcp_option_byte>
 8019734:	4603      	mov	r3, r0
 8019736:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019738:	7ffb      	ldrb	r3, [r7, #31]
 801973a:	3301      	adds	r3, #1
 801973c:	77fb      	strb	r3, [r7, #31]
 801973e:	7ffb      	ldrb	r3, [r7, #31]
 8019740:	2b03      	cmp	r3, #3
 8019742:	d9ed      	bls.n	8019720 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019744:	8938      	ldrh	r0, [r7, #8]
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	33f0      	adds	r3, #240	@ 0xf0
 801974a:	693a      	ldr	r2, [r7, #16]
 801974c:	4619      	mov	r1, r3
 801974e:	f001 f937 	bl	801a9c0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019752:	4b20      	ldr	r3, [pc, #128]	@ (80197d4 <dhcp_discover+0x134>)
 8019754:	6818      	ldr	r0, [r3, #0]
 8019756:	4b20      	ldr	r3, [pc, #128]	@ (80197d8 <dhcp_discover+0x138>)
 8019758:	9301      	str	r3, [sp, #4]
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	2343      	movs	r3, #67	@ 0x43
 8019760:	4a1e      	ldr	r2, [pc, #120]	@ (80197dc <dhcp_discover+0x13c>)
 8019762:	6939      	ldr	r1, [r7, #16]
 8019764:	f7ff f81e 	bl	80187a4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019768:	6938      	ldr	r0, [r7, #16]
 801976a:	f7f8 feb3 	bl	80124d4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801976e:	69bb      	ldr	r3, [r7, #24]
 8019770:	799b      	ldrb	r3, [r3, #6]
 8019772:	2bff      	cmp	r3, #255	@ 0xff
 8019774:	d005      	beq.n	8019782 <dhcp_discover+0xe2>
    dhcp->tries++;
 8019776:	69bb      	ldr	r3, [r7, #24]
 8019778:	799b      	ldrb	r3, [r3, #6]
 801977a:	3301      	adds	r3, #1
 801977c:	b2da      	uxtb	r2, r3
 801977e:	69bb      	ldr	r3, [r7, #24]
 8019780:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	799b      	ldrb	r3, [r3, #6]
 8019786:	2b05      	cmp	r3, #5
 8019788:	d80d      	bhi.n	80197a6 <dhcp_discover+0x106>
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	799b      	ldrb	r3, [r3, #6]
 801978e:	461a      	mov	r2, r3
 8019790:	2301      	movs	r3, #1
 8019792:	4093      	lsls	r3, r2
 8019794:	b29b      	uxth	r3, r3
 8019796:	461a      	mov	r2, r3
 8019798:	0152      	lsls	r2, r2, #5
 801979a:	1ad2      	subs	r2, r2, r3
 801979c:	0092      	lsls	r2, r2, #2
 801979e:	4413      	add	r3, r2
 80197a0:	00db      	lsls	r3, r3, #3
 80197a2:	b29b      	uxth	r3, r3
 80197a4:	e001      	b.n	80197aa <dhcp_discover+0x10a>
 80197a6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80197aa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80197ac:	897b      	ldrh	r3, [r7, #10]
 80197ae:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80197b2:	4a0b      	ldr	r2, [pc, #44]	@ (80197e0 <dhcp_discover+0x140>)
 80197b4:	fb82 1203 	smull	r1, r2, r2, r3
 80197b8:	1152      	asrs	r2, r2, #5
 80197ba:	17db      	asrs	r3, r3, #31
 80197bc:	1ad3      	subs	r3, r2, r3
 80197be:	b29a      	uxth	r2, r3
 80197c0:	69bb      	ldr	r3, [r7, #24]
 80197c2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80197c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3720      	adds	r7, #32
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	2000004c 	.word	0x2000004c
 80197d4:	200177ec 	.word	0x200177ec
 80197d8:	0802521c 	.word	0x0802521c
 80197dc:	08025220 	.word	0x08025220
 80197e0:	10624dd3 	.word	0x10624dd3

080197e4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b088      	sub	sp, #32
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d107      	bne.n	8019802 <dhcp_bind+0x1e>
 80197f2:	4b64      	ldr	r3, [pc, #400]	@ (8019984 <dhcp_bind+0x1a0>)
 80197f4:	f240 4215 	movw	r2, #1045	@ 0x415
 80197f8:	4963      	ldr	r1, [pc, #396]	@ (8019988 <dhcp_bind+0x1a4>)
 80197fa:	4864      	ldr	r0, [pc, #400]	@ (801998c <dhcp_bind+0x1a8>)
 80197fc:	f004 fe9c 	bl	801e538 <iprintf>
 8019800:	e0bc      	b.n	801997c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019806:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019808:	69bb      	ldr	r3, [r7, #24]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d107      	bne.n	801981e <dhcp_bind+0x3a>
 801980e:	4b5d      	ldr	r3, [pc, #372]	@ (8019984 <dhcp_bind+0x1a0>)
 8019810:	f240 4217 	movw	r2, #1047	@ 0x417
 8019814:	495e      	ldr	r1, [pc, #376]	@ (8019990 <dhcp_bind+0x1ac>)
 8019816:	485d      	ldr	r0, [pc, #372]	@ (801998c <dhcp_bind+0x1a8>)
 8019818:	f004 fe8e 	bl	801e538 <iprintf>
 801981c:	e0ae      	b.n	801997c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	2200      	movs	r2, #0
 8019822:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8019824:	69bb      	ldr	r3, [r7, #24]
 8019826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801982c:	d019      	beq.n	8019862 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801982e:	69bb      	ldr	r3, [r7, #24]
 8019830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019832:	331e      	adds	r3, #30
 8019834:	4a57      	ldr	r2, [pc, #348]	@ (8019994 <dhcp_bind+0x1b0>)
 8019836:	fba2 2303 	umull	r2, r3, r2, r3
 801983a:	095b      	lsrs	r3, r3, #5
 801983c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801983e:	69fb      	ldr	r3, [r7, #28]
 8019840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019844:	d302      	bcc.n	801984c <dhcp_bind+0x68>
      timeout = 0xffff;
 8019846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801984a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801984c:	69fb      	ldr	r3, [r7, #28]
 801984e:	b29a      	uxth	r2, r3
 8019850:	69bb      	ldr	r3, [r7, #24]
 8019852:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8019854:	69bb      	ldr	r3, [r7, #24]
 8019856:	8a9b      	ldrh	r3, [r3, #20]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d102      	bne.n	8019862 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801985c:	69bb      	ldr	r3, [r7, #24]
 801985e:	2201      	movs	r2, #1
 8019860:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019862:	69bb      	ldr	r3, [r7, #24]
 8019864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801986a:	d01d      	beq.n	80198a8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801986c:	69bb      	ldr	r3, [r7, #24]
 801986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019870:	331e      	adds	r3, #30
 8019872:	4a48      	ldr	r2, [pc, #288]	@ (8019994 <dhcp_bind+0x1b0>)
 8019874:	fba2 2303 	umull	r2, r3, r2, r3
 8019878:	095b      	lsrs	r3, r3, #5
 801987a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801987c:	69fb      	ldr	r3, [r7, #28]
 801987e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019882:	d302      	bcc.n	801988a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019888:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	b29a      	uxth	r2, r3
 801988e:	69bb      	ldr	r3, [r7, #24]
 8019890:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019892:	69bb      	ldr	r3, [r7, #24]
 8019894:	895b      	ldrh	r3, [r3, #10]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d102      	bne.n	80198a0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	2201      	movs	r2, #1
 801989e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80198a0:	69bb      	ldr	r3, [r7, #24]
 80198a2:	895a      	ldrh	r2, [r3, #10]
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80198a8:	69bb      	ldr	r3, [r7, #24]
 80198aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b0:	d01d      	beq.n	80198ee <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80198b2:	69bb      	ldr	r3, [r7, #24]
 80198b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198b6:	331e      	adds	r3, #30
 80198b8:	4a36      	ldr	r2, [pc, #216]	@ (8019994 <dhcp_bind+0x1b0>)
 80198ba:	fba2 2303 	umull	r2, r3, r2, r3
 80198be:	095b      	lsrs	r3, r3, #5
 80198c0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80198c2:	69fb      	ldr	r3, [r7, #28]
 80198c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80198c8:	d302      	bcc.n	80198d0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80198ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198ce:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80198d0:	69fb      	ldr	r3, [r7, #28]
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	69bb      	ldr	r3, [r7, #24]
 80198d6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80198d8:	69bb      	ldr	r3, [r7, #24]
 80198da:	899b      	ldrh	r3, [r3, #12]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d102      	bne.n	80198e6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80198e0:	69bb      	ldr	r3, [r7, #24]
 80198e2:	2201      	movs	r2, #1
 80198e4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80198e6:	69bb      	ldr	r3, [r7, #24]
 80198e8:	899a      	ldrh	r2, [r3, #12]
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80198ee:	69bb      	ldr	r3, [r7, #24]
 80198f0:	895a      	ldrh	r2, [r3, #10]
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	899b      	ldrh	r3, [r3, #12]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d306      	bcc.n	8019908 <dhcp_bind+0x124>
 80198fa:	69bb      	ldr	r3, [r7, #24]
 80198fc:	899b      	ldrh	r3, [r3, #12]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d002      	beq.n	8019908 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019902:	69bb      	ldr	r3, [r7, #24]
 8019904:	2200      	movs	r2, #0
 8019906:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019908:	69bb      	ldr	r3, [r7, #24]
 801990a:	79db      	ldrb	r3, [r3, #7]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d003      	beq.n	8019918 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019910:	69bb      	ldr	r3, [r7, #24]
 8019912:	6a1b      	ldr	r3, [r3, #32]
 8019914:	613b      	str	r3, [r7, #16]
 8019916:	e014      	b.n	8019942 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019918:	69bb      	ldr	r3, [r7, #24]
 801991a:	331c      	adds	r3, #28
 801991c:	781b      	ldrb	r3, [r3, #0]
 801991e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8019920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019924:	2b00      	cmp	r3, #0
 8019926:	db02      	blt.n	801992e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019928:	23ff      	movs	r3, #255	@ 0xff
 801992a:	613b      	str	r3, [r7, #16]
 801992c:	e009      	b.n	8019942 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801992e:	7dfb      	ldrb	r3, [r7, #23]
 8019930:	2bbf      	cmp	r3, #191	@ 0xbf
 8019932:	d903      	bls.n	801993c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019934:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8019938:	613b      	str	r3, [r7, #16]
 801993a:	e002      	b.n	8019942 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801993c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019940:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019942:	69bb      	ldr	r3, [r7, #24]
 8019944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019946:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d108      	bne.n	8019960 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801994e:	69bb      	ldr	r3, [r7, #24]
 8019950:	69da      	ldr	r2, [r3, #28]
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	4013      	ands	r3, r2
 8019956:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801995e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019960:	210a      	movs	r1, #10
 8019962:	69b8      	ldr	r0, [r7, #24]
 8019964:	f000 fa9a 	bl	8019e9c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8019968:	69bb      	ldr	r3, [r7, #24]
 801996a:	f103 011c 	add.w	r1, r3, #28
 801996e:	f107 030c 	add.w	r3, r7, #12
 8019972:	f107 0210 	add.w	r2, r7, #16
 8019976:	6878      	ldr	r0, [r7, #4]
 8019978:	f7f8 f89e 	bl	8011ab8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801997c:	3720      	adds	r7, #32
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}
 8019982:	bf00      	nop
 8019984:	08024444 	.word	0x08024444
 8019988:	080245a4 	.word	0x080245a4
 801998c:	080244a4 	.word	0x080244a4
 8019990:	080245c0 	.word	0x080245c0
 8019994:	88888889 	.word	0x88888889

08019998 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b08a      	sub	sp, #40	@ 0x28
 801999c:	af02      	add	r7, sp, #8
 801999e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199a4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80199a6:	2105      	movs	r1, #5
 80199a8:	69b8      	ldr	r0, [r7, #24]
 80199aa:	f000 fa77 	bl	8019e9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80199ae:	f107 030c 	add.w	r3, r7, #12
 80199b2:	2203      	movs	r2, #3
 80199b4:	69b9      	ldr	r1, [r7, #24]
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f000 ff2c 	bl	801a814 <dhcp_create_msg>
 80199bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d04e      	beq.n	8019a62 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80199c4:	697b      	ldr	r3, [r7, #20]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80199ca:	89b8      	ldrh	r0, [r7, #12]
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199d2:	2302      	movs	r3, #2
 80199d4:	2239      	movs	r2, #57	@ 0x39
 80199d6:	f000 fa7b 	bl	8019ed0 <dhcp_option>
 80199da:	4603      	mov	r3, r0
 80199dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80199de:	89b8      	ldrh	r0, [r7, #12]
 80199e0:	693b      	ldr	r3, [r7, #16]
 80199e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80199ea:	461a      	mov	r2, r3
 80199ec:	f000 faca 	bl	8019f84 <dhcp_option_short>
 80199f0:	4603      	mov	r3, r0
 80199f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80199f4:	89b8      	ldrh	r0, [r7, #12]
 80199f6:	693b      	ldr	r3, [r7, #16]
 80199f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199fc:	2304      	movs	r3, #4
 80199fe:	2237      	movs	r2, #55	@ 0x37
 8019a00:	f000 fa66 	bl	8019ed0 <dhcp_option>
 8019a04:	4603      	mov	r3, r0
 8019a06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019a08:	2300      	movs	r3, #0
 8019a0a:	77bb      	strb	r3, [r7, #30]
 8019a0c:	e00e      	b.n	8019a2c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019a0e:	89b8      	ldrh	r0, [r7, #12]
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019a16:	7fbb      	ldrb	r3, [r7, #30]
 8019a18:	4a29      	ldr	r2, [pc, #164]	@ (8019ac0 <dhcp_renew+0x128>)
 8019a1a:	5cd3      	ldrb	r3, [r2, r3]
 8019a1c:	461a      	mov	r2, r3
 8019a1e:	f000 fa8b 	bl	8019f38 <dhcp_option_byte>
 8019a22:	4603      	mov	r3, r0
 8019a24:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019a26:	7fbb      	ldrb	r3, [r7, #30]
 8019a28:	3301      	adds	r3, #1
 8019a2a:	77bb      	strb	r3, [r7, #30]
 8019a2c:	7fbb      	ldrb	r3, [r7, #30]
 8019a2e:	2b03      	cmp	r3, #3
 8019a30:	d9ed      	bls.n	8019a0e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019a32:	89b8      	ldrh	r0, [r7, #12]
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	33f0      	adds	r3, #240	@ 0xf0
 8019a38:	697a      	ldr	r2, [r7, #20]
 8019a3a:	4619      	mov	r1, r3
 8019a3c:	f000 ffc0 	bl	801a9c0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019a40:	4b20      	ldr	r3, [pc, #128]	@ (8019ac4 <dhcp_renew+0x12c>)
 8019a42:	6818      	ldr	r0, [r3, #0]
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	f103 0218 	add.w	r2, r3, #24
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	9300      	str	r3, [sp, #0]
 8019a4e:	2343      	movs	r3, #67	@ 0x43
 8019a50:	6979      	ldr	r1, [r7, #20]
 8019a52:	f7fe fe33 	bl	80186bc <udp_sendto_if>
 8019a56:	4603      	mov	r3, r0
 8019a58:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019a5a:	6978      	ldr	r0, [r7, #20]
 8019a5c:	f7f8 fd3a 	bl	80124d4 <pbuf_free>
 8019a60:	e001      	b.n	8019a66 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019a62:	23ff      	movs	r3, #255	@ 0xff
 8019a64:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	799b      	ldrb	r3, [r3, #6]
 8019a6a:	2bff      	cmp	r3, #255	@ 0xff
 8019a6c:	d005      	beq.n	8019a7a <dhcp_renew+0xe2>
    dhcp->tries++;
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	799b      	ldrb	r3, [r3, #6]
 8019a72:	3301      	adds	r3, #1
 8019a74:	b2da      	uxtb	r2, r3
 8019a76:	69bb      	ldr	r3, [r7, #24]
 8019a78:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	799b      	ldrb	r3, [r3, #6]
 8019a7e:	2b09      	cmp	r3, #9
 8019a80:	d809      	bhi.n	8019a96 <dhcp_renew+0xfe>
 8019a82:	69bb      	ldr	r3, [r7, #24]
 8019a84:	799b      	ldrb	r3, [r3, #6]
 8019a86:	461a      	mov	r2, r3
 8019a88:	0152      	lsls	r2, r2, #5
 8019a8a:	1ad2      	subs	r2, r2, r3
 8019a8c:	0092      	lsls	r2, r2, #2
 8019a8e:	4413      	add	r3, r2
 8019a90:	011b      	lsls	r3, r3, #4
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	e001      	b.n	8019a9a <dhcp_renew+0x102>
 8019a96:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019a9a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019a9c:	89fb      	ldrh	r3, [r7, #14]
 8019a9e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019aa2:	4a09      	ldr	r2, [pc, #36]	@ (8019ac8 <dhcp_renew+0x130>)
 8019aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8019aa8:	1152      	asrs	r2, r2, #5
 8019aaa:	17db      	asrs	r3, r3, #31
 8019aac:	1ad3      	subs	r3, r2, r3
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	69bb      	ldr	r3, [r7, #24]
 8019ab2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3720      	adds	r7, #32
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}
 8019ac0:	2000004c 	.word	0x2000004c
 8019ac4:	200177ec 	.word	0x200177ec
 8019ac8:	10624dd3 	.word	0x10624dd3

08019acc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b08a      	sub	sp, #40	@ 0x28
 8019ad0:	af02      	add	r7, sp, #8
 8019ad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ad8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019ada:	2104      	movs	r1, #4
 8019adc:	69b8      	ldr	r0, [r7, #24]
 8019ade:	f000 f9dd 	bl	8019e9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019ae2:	f107 030c 	add.w	r3, r7, #12
 8019ae6:	2203      	movs	r2, #3
 8019ae8:	69b9      	ldr	r1, [r7, #24]
 8019aea:	6878      	ldr	r0, [r7, #4]
 8019aec:	f000 fe92 	bl	801a814 <dhcp_create_msg>
 8019af0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d04c      	beq.n	8019b92 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	685b      	ldr	r3, [r3, #4]
 8019afc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019afe:	89b8      	ldrh	r0, [r7, #12]
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b06:	2302      	movs	r3, #2
 8019b08:	2239      	movs	r2, #57	@ 0x39
 8019b0a:	f000 f9e1 	bl	8019ed0 <dhcp_option>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019b12:	89b8      	ldrh	r0, [r7, #12]
 8019b14:	693b      	ldr	r3, [r7, #16]
 8019b16:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019b1e:	461a      	mov	r2, r3
 8019b20:	f000 fa30 	bl	8019f84 <dhcp_option_short>
 8019b24:	4603      	mov	r3, r0
 8019b26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b28:	89b8      	ldrh	r0, [r7, #12]
 8019b2a:	693b      	ldr	r3, [r7, #16]
 8019b2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b30:	2304      	movs	r3, #4
 8019b32:	2237      	movs	r2, #55	@ 0x37
 8019b34:	f000 f9cc 	bl	8019ed0 <dhcp_option>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	77bb      	strb	r3, [r7, #30]
 8019b40:	e00e      	b.n	8019b60 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019b42:	89b8      	ldrh	r0, [r7, #12]
 8019b44:	693b      	ldr	r3, [r7, #16]
 8019b46:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b4a:	7fbb      	ldrb	r3, [r7, #30]
 8019b4c:	4a28      	ldr	r2, [pc, #160]	@ (8019bf0 <dhcp_rebind+0x124>)
 8019b4e:	5cd3      	ldrb	r3, [r2, r3]
 8019b50:	461a      	mov	r2, r3
 8019b52:	f000 f9f1 	bl	8019f38 <dhcp_option_byte>
 8019b56:	4603      	mov	r3, r0
 8019b58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019b5a:	7fbb      	ldrb	r3, [r7, #30]
 8019b5c:	3301      	adds	r3, #1
 8019b5e:	77bb      	strb	r3, [r7, #30]
 8019b60:	7fbb      	ldrb	r3, [r7, #30]
 8019b62:	2b03      	cmp	r3, #3
 8019b64:	d9ed      	bls.n	8019b42 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019b66:	89b8      	ldrh	r0, [r7, #12]
 8019b68:	693b      	ldr	r3, [r7, #16]
 8019b6a:	33f0      	adds	r3, #240	@ 0xf0
 8019b6c:	697a      	ldr	r2, [r7, #20]
 8019b6e:	4619      	mov	r1, r3
 8019b70:	f000 ff26 	bl	801a9c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019b74:	4b1f      	ldr	r3, [pc, #124]	@ (8019bf4 <dhcp_rebind+0x128>)
 8019b76:	6818      	ldr	r0, [r3, #0]
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	9300      	str	r3, [sp, #0]
 8019b7c:	2343      	movs	r3, #67	@ 0x43
 8019b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8019bf8 <dhcp_rebind+0x12c>)
 8019b80:	6979      	ldr	r1, [r7, #20]
 8019b82:	f7fe fd9b 	bl	80186bc <udp_sendto_if>
 8019b86:	4603      	mov	r3, r0
 8019b88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019b8a:	6978      	ldr	r0, [r7, #20]
 8019b8c:	f7f8 fca2 	bl	80124d4 <pbuf_free>
 8019b90:	e001      	b.n	8019b96 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019b92:	23ff      	movs	r3, #255	@ 0xff
 8019b94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019b96:	69bb      	ldr	r3, [r7, #24]
 8019b98:	799b      	ldrb	r3, [r3, #6]
 8019b9a:	2bff      	cmp	r3, #255	@ 0xff
 8019b9c:	d005      	beq.n	8019baa <dhcp_rebind+0xde>
    dhcp->tries++;
 8019b9e:	69bb      	ldr	r3, [r7, #24]
 8019ba0:	799b      	ldrb	r3, [r3, #6]
 8019ba2:	3301      	adds	r3, #1
 8019ba4:	b2da      	uxtb	r2, r3
 8019ba6:	69bb      	ldr	r3, [r7, #24]
 8019ba8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019baa:	69bb      	ldr	r3, [r7, #24]
 8019bac:	799b      	ldrb	r3, [r3, #6]
 8019bae:	2b09      	cmp	r3, #9
 8019bb0:	d809      	bhi.n	8019bc6 <dhcp_rebind+0xfa>
 8019bb2:	69bb      	ldr	r3, [r7, #24]
 8019bb4:	799b      	ldrb	r3, [r3, #6]
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	0152      	lsls	r2, r2, #5
 8019bba:	1ad2      	subs	r2, r2, r3
 8019bbc:	0092      	lsls	r2, r2, #2
 8019bbe:	4413      	add	r3, r2
 8019bc0:	00db      	lsls	r3, r3, #3
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	e001      	b.n	8019bca <dhcp_rebind+0xfe>
 8019bc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019bca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019bcc:	89fb      	ldrh	r3, [r7, #14]
 8019bce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8019bfc <dhcp_rebind+0x130>)
 8019bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8019bd8:	1152      	asrs	r2, r2, #5
 8019bda:	17db      	asrs	r3, r3, #31
 8019bdc:	1ad3      	subs	r3, r2, r3
 8019bde:	b29a      	uxth	r2, r3
 8019be0:	69bb      	ldr	r3, [r7, #24]
 8019be2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3720      	adds	r7, #32
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	2000004c 	.word	0x2000004c
 8019bf4:	200177ec 	.word	0x200177ec
 8019bf8:	08025220 	.word	0x08025220
 8019bfc:	10624dd3 	.word	0x10624dd3

08019c00 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8019c00:	b5b0      	push	{r4, r5, r7, lr}
 8019c02:	b08a      	sub	sp, #40	@ 0x28
 8019c04:	af02      	add	r7, sp, #8
 8019c06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c0c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8019c0e:	2103      	movs	r1, #3
 8019c10:	69b8      	ldr	r0, [r7, #24]
 8019c12:	f000 f943 	bl	8019e9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019c16:	f107 030c 	add.w	r3, r7, #12
 8019c1a:	2203      	movs	r2, #3
 8019c1c:	69b9      	ldr	r1, [r7, #24]
 8019c1e:	6878      	ldr	r0, [r7, #4]
 8019c20:	f000 fdf8 	bl	801a814 <dhcp_create_msg>
 8019c24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d066      	beq.n	8019cfa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	685b      	ldr	r3, [r3, #4]
 8019c30:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019c32:	89b8      	ldrh	r0, [r7, #12]
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c3a:	2302      	movs	r3, #2
 8019c3c:	2239      	movs	r2, #57	@ 0x39
 8019c3e:	f000 f947 	bl	8019ed0 <dhcp_option>
 8019c42:	4603      	mov	r3, r0
 8019c44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019c46:	89b8      	ldrh	r0, [r7, #12]
 8019c48:	693b      	ldr	r3, [r7, #16]
 8019c4a:	33f0      	adds	r3, #240	@ 0xf0
 8019c4c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019c50:	4619      	mov	r1, r3
 8019c52:	f000 f997 	bl	8019f84 <dhcp_option_short>
 8019c56:	4603      	mov	r3, r0
 8019c58:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019c5a:	89b8      	ldrh	r0, [r7, #12]
 8019c5c:	693b      	ldr	r3, [r7, #16]
 8019c5e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c62:	2304      	movs	r3, #4
 8019c64:	2232      	movs	r2, #50	@ 0x32
 8019c66:	f000 f933 	bl	8019ed0 <dhcp_option>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019c6e:	89bc      	ldrh	r4, [r7, #12]
 8019c70:	693b      	ldr	r3, [r7, #16]
 8019c72:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	69db      	ldr	r3, [r3, #28]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7f6 fd53 	bl	8010726 <lwip_htonl>
 8019c80:	4603      	mov	r3, r0
 8019c82:	461a      	mov	r2, r3
 8019c84:	4629      	mov	r1, r5
 8019c86:	4620      	mov	r0, r4
 8019c88:	f000 f9ae 	bl	8019fe8 <dhcp_option_long>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019c90:	89b8      	ldrh	r0, [r7, #12]
 8019c92:	693b      	ldr	r3, [r7, #16]
 8019c94:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c98:	2304      	movs	r3, #4
 8019c9a:	2237      	movs	r2, #55	@ 0x37
 8019c9c:	f000 f918 	bl	8019ed0 <dhcp_option>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	77bb      	strb	r3, [r7, #30]
 8019ca8:	e00e      	b.n	8019cc8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019caa:	89b8      	ldrh	r0, [r7, #12]
 8019cac:	693b      	ldr	r3, [r7, #16]
 8019cae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cb2:	7fbb      	ldrb	r3, [r7, #30]
 8019cb4:	4a28      	ldr	r2, [pc, #160]	@ (8019d58 <dhcp_reboot+0x158>)
 8019cb6:	5cd3      	ldrb	r3, [r2, r3]
 8019cb8:	461a      	mov	r2, r3
 8019cba:	f000 f93d 	bl	8019f38 <dhcp_option_byte>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cc2:	7fbb      	ldrb	r3, [r7, #30]
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	77bb      	strb	r3, [r7, #30]
 8019cc8:	7fbb      	ldrb	r3, [r7, #30]
 8019cca:	2b03      	cmp	r3, #3
 8019ccc:	d9ed      	bls.n	8019caa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019cce:	89b8      	ldrh	r0, [r7, #12]
 8019cd0:	693b      	ldr	r3, [r7, #16]
 8019cd2:	33f0      	adds	r3, #240	@ 0xf0
 8019cd4:	697a      	ldr	r2, [r7, #20]
 8019cd6:	4619      	mov	r1, r3
 8019cd8:	f000 fe72 	bl	801a9c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8019d5c <dhcp_reboot+0x15c>)
 8019cde:	6818      	ldr	r0, [r3, #0]
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	9300      	str	r3, [sp, #0]
 8019ce4:	2343      	movs	r3, #67	@ 0x43
 8019ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8019d60 <dhcp_reboot+0x160>)
 8019ce8:	6979      	ldr	r1, [r7, #20]
 8019cea:	f7fe fce7 	bl	80186bc <udp_sendto_if>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019cf2:	6978      	ldr	r0, [r7, #20]
 8019cf4:	f7f8 fbee 	bl	80124d4 <pbuf_free>
 8019cf8:	e001      	b.n	8019cfe <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019cfa:	23ff      	movs	r3, #255	@ 0xff
 8019cfc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	799b      	ldrb	r3, [r3, #6]
 8019d02:	2bff      	cmp	r3, #255	@ 0xff
 8019d04:	d005      	beq.n	8019d12 <dhcp_reboot+0x112>
    dhcp->tries++;
 8019d06:	69bb      	ldr	r3, [r7, #24]
 8019d08:	799b      	ldrb	r3, [r3, #6]
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	b2da      	uxtb	r2, r3
 8019d0e:	69bb      	ldr	r3, [r7, #24]
 8019d10:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	799b      	ldrb	r3, [r3, #6]
 8019d16:	2b09      	cmp	r3, #9
 8019d18:	d809      	bhi.n	8019d2e <dhcp_reboot+0x12e>
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	799b      	ldrb	r3, [r3, #6]
 8019d1e:	461a      	mov	r2, r3
 8019d20:	0152      	lsls	r2, r2, #5
 8019d22:	1ad2      	subs	r2, r2, r3
 8019d24:	0092      	lsls	r2, r2, #2
 8019d26:	4413      	add	r3, r2
 8019d28:	00db      	lsls	r3, r3, #3
 8019d2a:	b29b      	uxth	r3, r3
 8019d2c:	e001      	b.n	8019d32 <dhcp_reboot+0x132>
 8019d2e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019d32:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019d34:	89fb      	ldrh	r3, [r7, #14]
 8019d36:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8019d64 <dhcp_reboot+0x164>)
 8019d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8019d40:	1152      	asrs	r2, r2, #5
 8019d42:	17db      	asrs	r3, r3, #31
 8019d44:	1ad3      	subs	r3, r2, r3
 8019d46:	b29a      	uxth	r2, r3
 8019d48:	69bb      	ldr	r3, [r7, #24]
 8019d4a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	3720      	adds	r7, #32
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bdb0      	pop	{r4, r5, r7, pc}
 8019d58:	2000004c 	.word	0x2000004c
 8019d5c:	200177ec 	.word	0x200177ec
 8019d60:	08025220 	.word	0x08025220
 8019d64:	10624dd3 	.word	0x10624dd3

08019d68 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019d68:	b5b0      	push	{r4, r5, r7, lr}
 8019d6a:	b08a      	sub	sp, #40	@ 0x28
 8019d6c:	af02      	add	r7, sp, #8
 8019d6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d74:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019d76:	69fb      	ldr	r3, [r7, #28]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	f000 8084 	beq.w	8019e86 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019d7e:	69fb      	ldr	r3, [r7, #28]
 8019d80:	795b      	ldrb	r3, [r3, #5]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	f000 8081 	beq.w	8019e8a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	699b      	ldr	r3, [r3, #24]
 8019d8c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	2200      	movs	r2, #0
 8019d92:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	2200      	movs	r2, #0
 8019d98:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	2200      	movs	r2, #0
 8019da4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019da6:	69fb      	ldr	r3, [r7, #28]
 8019da8:	2200      	movs	r2, #0
 8019daa:	631a      	str	r2, [r3, #48]	@ 0x30
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019db8:	69fb      	ldr	r3, [r7, #28]
 8019dba:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019dbc:	69fb      	ldr	r3, [r7, #28]
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	829a      	strh	r2, [r3, #20]
 8019dc2:	69fb      	ldr	r3, [r7, #28]
 8019dc4:	8a9a      	ldrh	r2, [r3, #20]
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	825a      	strh	r2, [r3, #18]
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	8a5a      	ldrh	r2, [r3, #18]
 8019dce:	69fb      	ldr	r3, [r7, #28]
 8019dd0:	821a      	strh	r2, [r3, #16]
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	8a1a      	ldrh	r2, [r3, #16]
 8019dd6:	69fb      	ldr	r3, [r7, #28]
 8019dd8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019dda:	6878      	ldr	r0, [r7, #4]
 8019ddc:	f000 fe1e 	bl	801aa1c <dhcp_supplied_address>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d03b      	beq.n	8019e5e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019de6:	f107 030e 	add.w	r3, r7, #14
 8019dea:	2207      	movs	r2, #7
 8019dec:	69f9      	ldr	r1, [r7, #28]
 8019dee:	6878      	ldr	r0, [r7, #4]
 8019df0:	f000 fd10 	bl	801a814 <dhcp_create_msg>
 8019df4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019df6:	69bb      	ldr	r3, [r7, #24]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d030      	beq.n	8019e5e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019dfc:	69bb      	ldr	r3, [r7, #24]
 8019dfe:	685b      	ldr	r3, [r3, #4]
 8019e00:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019e02:	89f8      	ldrh	r0, [r7, #14]
 8019e04:	697b      	ldr	r3, [r7, #20]
 8019e06:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e0a:	2304      	movs	r3, #4
 8019e0c:	2236      	movs	r2, #54	@ 0x36
 8019e0e:	f000 f85f 	bl	8019ed0 <dhcp_option>
 8019e12:	4603      	mov	r3, r0
 8019e14:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019e16:	89fc      	ldrh	r4, [r7, #14]
 8019e18:	697b      	ldr	r3, [r7, #20]
 8019e1a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019e1e:	693b      	ldr	r3, [r7, #16]
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7f6 fc80 	bl	8010726 <lwip_htonl>
 8019e26:	4603      	mov	r3, r0
 8019e28:	461a      	mov	r2, r3
 8019e2a:	4629      	mov	r1, r5
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	f000 f8db 	bl	8019fe8 <dhcp_option_long>
 8019e32:	4603      	mov	r3, r0
 8019e34:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e36:	89f8      	ldrh	r0, [r7, #14]
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	33f0      	adds	r3, #240	@ 0xf0
 8019e3c:	69ba      	ldr	r2, [r7, #24]
 8019e3e:	4619      	mov	r1, r3
 8019e40:	f000 fdbe 	bl	801a9c0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019e44:	4b13      	ldr	r3, [pc, #76]	@ (8019e94 <dhcp_release_and_stop+0x12c>)
 8019e46:	6818      	ldr	r0, [r3, #0]
 8019e48:	f107 0210 	add.w	r2, r7, #16
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	9300      	str	r3, [sp, #0]
 8019e50:	2343      	movs	r3, #67	@ 0x43
 8019e52:	69b9      	ldr	r1, [r7, #24]
 8019e54:	f7fe fc32 	bl	80186bc <udp_sendto_if>
      pbuf_free(p_out);
 8019e58:	69b8      	ldr	r0, [r7, #24]
 8019e5a:	f7f8 fb3b 	bl	80124d4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8019e98 <dhcp_release_and_stop+0x130>)
 8019e60:	4a0d      	ldr	r2, [pc, #52]	@ (8019e98 <dhcp_release_and_stop+0x130>)
 8019e62:	490d      	ldr	r1, [pc, #52]	@ (8019e98 <dhcp_release_and_stop+0x130>)
 8019e64:	6878      	ldr	r0, [r7, #4]
 8019e66:	f7f7 fe27 	bl	8011ab8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019e6a:	2100      	movs	r1, #0
 8019e6c:	69f8      	ldr	r0, [r7, #28]
 8019e6e:	f000 f815 	bl	8019e9c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	791b      	ldrb	r3, [r3, #4]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d008      	beq.n	8019e8c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019e7a:	f7fe ff6b 	bl	8018d54 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019e7e:	69fb      	ldr	r3, [r7, #28]
 8019e80:	2200      	movs	r2, #0
 8019e82:	711a      	strb	r2, [r3, #4]
 8019e84:	e002      	b.n	8019e8c <dhcp_release_and_stop+0x124>
    return;
 8019e86:	bf00      	nop
 8019e88:	e000      	b.n	8019e8c <dhcp_release_and_stop+0x124>
    return;
 8019e8a:	bf00      	nop
  }
}
 8019e8c:	3720      	adds	r7, #32
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bdb0      	pop	{r4, r5, r7, pc}
 8019e92:	bf00      	nop
 8019e94:	200177ec 	.word	0x200177ec
 8019e98:	0802521c 	.word	0x0802521c

08019e9c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019e9c:	b480      	push	{r7}
 8019e9e:	b083      	sub	sp, #12
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
 8019ea4:	460b      	mov	r3, r1
 8019ea6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	795b      	ldrb	r3, [r3, #5]
 8019eac:	78fa      	ldrb	r2, [r7, #3]
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d008      	beq.n	8019ec4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	78fa      	ldrb	r2, [r7, #3]
 8019eb6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	811a      	strh	r2, [r3, #8]
  }
}
 8019ec4:	bf00      	nop
 8019ec6:	370c      	adds	r7, #12
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ece:	4770      	bx	lr

08019ed0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6039      	str	r1, [r7, #0]
 8019ed8:	4611      	mov	r1, r2
 8019eda:	461a      	mov	r2, r3
 8019edc:	4603      	mov	r3, r0
 8019ede:	80fb      	strh	r3, [r7, #6]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	717b      	strb	r3, [r7, #5]
 8019ee4:	4613      	mov	r3, r2
 8019ee6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019ee8:	88fa      	ldrh	r2, [r7, #6]
 8019eea:	793b      	ldrb	r3, [r7, #4]
 8019eec:	4413      	add	r3, r2
 8019eee:	3302      	adds	r3, #2
 8019ef0:	2b44      	cmp	r3, #68	@ 0x44
 8019ef2:	d906      	bls.n	8019f02 <dhcp_option+0x32>
 8019ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8019f2c <dhcp_option+0x5c>)
 8019ef6:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019efa:	490d      	ldr	r1, [pc, #52]	@ (8019f30 <dhcp_option+0x60>)
 8019efc:	480d      	ldr	r0, [pc, #52]	@ (8019f34 <dhcp_option+0x64>)
 8019efe:	f004 fb1b 	bl	801e538 <iprintf>
  options[options_out_len++] = option_type;
 8019f02:	88fb      	ldrh	r3, [r7, #6]
 8019f04:	1c5a      	adds	r2, r3, #1
 8019f06:	80fa      	strh	r2, [r7, #6]
 8019f08:	461a      	mov	r2, r3
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	4413      	add	r3, r2
 8019f0e:	797a      	ldrb	r2, [r7, #5]
 8019f10:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8019f12:	88fb      	ldrh	r3, [r7, #6]
 8019f14:	1c5a      	adds	r2, r3, #1
 8019f16:	80fa      	strh	r2, [r7, #6]
 8019f18:	461a      	mov	r2, r3
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	4413      	add	r3, r2
 8019f1e:	793a      	ldrb	r2, [r7, #4]
 8019f20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019f22:	88fb      	ldrh	r3, [r7, #6]
}
 8019f24:	4618      	mov	r0, r3
 8019f26:	3708      	adds	r7, #8
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd80      	pop	{r7, pc}
 8019f2c:	08024444 	.word	0x08024444
 8019f30:	080245d8 	.word	0x080245d8
 8019f34:	080244a4 	.word	0x080244a4

08019f38 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b082      	sub	sp, #8
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	4603      	mov	r3, r0
 8019f40:	6039      	str	r1, [r7, #0]
 8019f42:	80fb      	strh	r3, [r7, #6]
 8019f44:	4613      	mov	r3, r2
 8019f46:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019f48:	88fb      	ldrh	r3, [r7, #6]
 8019f4a:	2b43      	cmp	r3, #67	@ 0x43
 8019f4c:	d906      	bls.n	8019f5c <dhcp_option_byte+0x24>
 8019f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8019f78 <dhcp_option_byte+0x40>)
 8019f50:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019f54:	4909      	ldr	r1, [pc, #36]	@ (8019f7c <dhcp_option_byte+0x44>)
 8019f56:	480a      	ldr	r0, [pc, #40]	@ (8019f80 <dhcp_option_byte+0x48>)
 8019f58:	f004 faee 	bl	801e538 <iprintf>
  options[options_out_len++] = value;
 8019f5c:	88fb      	ldrh	r3, [r7, #6]
 8019f5e:	1c5a      	adds	r2, r3, #1
 8019f60:	80fa      	strh	r2, [r7, #6]
 8019f62:	461a      	mov	r2, r3
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	4413      	add	r3, r2
 8019f68:	797a      	ldrb	r2, [r7, #5]
 8019f6a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019f6c:	88fb      	ldrh	r3, [r7, #6]
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	3708      	adds	r7, #8
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}
 8019f76:	bf00      	nop
 8019f78:	08024444 	.word	0x08024444
 8019f7c:	0802461c 	.word	0x0802461c
 8019f80:	080244a4 	.word	0x080244a4

08019f84 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b082      	sub	sp, #8
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	6039      	str	r1, [r7, #0]
 8019f8e:	80fb      	strh	r3, [r7, #6]
 8019f90:	4613      	mov	r3, r2
 8019f92:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019f94:	88fb      	ldrh	r3, [r7, #6]
 8019f96:	3302      	adds	r3, #2
 8019f98:	2b44      	cmp	r3, #68	@ 0x44
 8019f9a:	d906      	bls.n	8019faa <dhcp_option_short+0x26>
 8019f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8019fdc <dhcp_option_short+0x58>)
 8019f9e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019fa2:	490f      	ldr	r1, [pc, #60]	@ (8019fe0 <dhcp_option_short+0x5c>)
 8019fa4:	480f      	ldr	r0, [pc, #60]	@ (8019fe4 <dhcp_option_short+0x60>)
 8019fa6:	f004 fac7 	bl	801e538 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019faa:	88bb      	ldrh	r3, [r7, #4]
 8019fac:	0a1b      	lsrs	r3, r3, #8
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	88fb      	ldrh	r3, [r7, #6]
 8019fb2:	1c59      	adds	r1, r3, #1
 8019fb4:	80f9      	strh	r1, [r7, #6]
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	440b      	add	r3, r1
 8019fbc:	b2d2      	uxtb	r2, r2
 8019fbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019fc0:	88fb      	ldrh	r3, [r7, #6]
 8019fc2:	1c5a      	adds	r2, r3, #1
 8019fc4:	80fa      	strh	r2, [r7, #6]
 8019fc6:	461a      	mov	r2, r3
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	4413      	add	r3, r2
 8019fcc:	88ba      	ldrh	r2, [r7, #4]
 8019fce:	b2d2      	uxtb	r2, r2
 8019fd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019fd2:	88fb      	ldrh	r3, [r7, #6]
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3708      	adds	r7, #8
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}
 8019fdc:	08024444 	.word	0x08024444
 8019fe0:	08024654 	.word	0x08024654
 8019fe4:	080244a4 	.word	0x080244a4

08019fe8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b084      	sub	sp, #16
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	4603      	mov	r3, r0
 8019ff0:	60b9      	str	r1, [r7, #8]
 8019ff2:	607a      	str	r2, [r7, #4]
 8019ff4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019ff6:	89fb      	ldrh	r3, [r7, #14]
 8019ff8:	3304      	adds	r3, #4
 8019ffa:	2b44      	cmp	r3, #68	@ 0x44
 8019ffc:	d906      	bls.n	801a00c <dhcp_option_long+0x24>
 8019ffe:	4b19      	ldr	r3, [pc, #100]	@ (801a064 <dhcp_option_long+0x7c>)
 801a000:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801a004:	4918      	ldr	r1, [pc, #96]	@ (801a068 <dhcp_option_long+0x80>)
 801a006:	4819      	ldr	r0, [pc, #100]	@ (801a06c <dhcp_option_long+0x84>)
 801a008:	f004 fa96 	bl	801e538 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	0e1a      	lsrs	r2, r3, #24
 801a010:	89fb      	ldrh	r3, [r7, #14]
 801a012:	1c59      	adds	r1, r3, #1
 801a014:	81f9      	strh	r1, [r7, #14]
 801a016:	4619      	mov	r1, r3
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	440b      	add	r3, r1
 801a01c:	b2d2      	uxtb	r2, r2
 801a01e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	0c1a      	lsrs	r2, r3, #16
 801a024:	89fb      	ldrh	r3, [r7, #14]
 801a026:	1c59      	adds	r1, r3, #1
 801a028:	81f9      	strh	r1, [r7, #14]
 801a02a:	4619      	mov	r1, r3
 801a02c:	68bb      	ldr	r3, [r7, #8]
 801a02e:	440b      	add	r3, r1
 801a030:	b2d2      	uxtb	r2, r2
 801a032:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	0a1a      	lsrs	r2, r3, #8
 801a038:	89fb      	ldrh	r3, [r7, #14]
 801a03a:	1c59      	adds	r1, r3, #1
 801a03c:	81f9      	strh	r1, [r7, #14]
 801a03e:	4619      	mov	r1, r3
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	440b      	add	r3, r1
 801a044:	b2d2      	uxtb	r2, r2
 801a046:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a048:	89fb      	ldrh	r3, [r7, #14]
 801a04a:	1c5a      	adds	r2, r3, #1
 801a04c:	81fa      	strh	r2, [r7, #14]
 801a04e:	461a      	mov	r2, r3
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	4413      	add	r3, r2
 801a054:	687a      	ldr	r2, [r7, #4]
 801a056:	b2d2      	uxtb	r2, r2
 801a058:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a05a:	89fb      	ldrh	r3, [r7, #14]
}
 801a05c:	4618      	mov	r0, r3
 801a05e:	3710      	adds	r7, #16
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}
 801a064:	08024444 	.word	0x08024444
 801a068:	08024690 	.word	0x08024690
 801a06c:	080244a4 	.word	0x080244a4

0801a070 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b090      	sub	sp, #64	@ 0x40
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a07a:	2300      	movs	r3, #0
 801a07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801a07e:	2300      	movs	r3, #0
 801a080:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a082:	220a      	movs	r2, #10
 801a084:	2100      	movs	r1, #0
 801a086:	48ba      	ldr	r0, [pc, #744]	@ (801a370 <dhcp_parse_reply+0x300>)
 801a088:	f004 fb8a 	bl	801e7a0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	895b      	ldrh	r3, [r3, #10]
 801a090:	2b2b      	cmp	r3, #43	@ 0x2b
 801a092:	d802      	bhi.n	801a09a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a094:	f06f 0301 	mvn.w	r3, #1
 801a098:	e2ea      	b.n	801a670 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	685b      	ldr	r3, [r3, #4]
 801a09e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a0a0:	23f0      	movs	r3, #240	@ 0xf0
 801a0a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	891b      	ldrh	r3, [r3, #8]
 801a0a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a0ae:	e00c      	b.n	801a0ca <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b2:	895b      	ldrh	r3, [r3, #10]
 801a0b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a0b6:	1ad3      	subs	r3, r2, r3
 801a0b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0bc:	895b      	ldrh	r3, [r3, #10]
 801a0be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801a0c0:	1ad3      	subs	r3, r2, r3
 801a0c2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d004      	beq.n	801a0da <dhcp_parse_reply+0x6a>
 801a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0d2:	895b      	ldrh	r3, [r3, #10]
 801a0d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a0d6:	429a      	cmp	r2, r3
 801a0d8:	d2ea      	bcs.n	801a0b0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d102      	bne.n	801a0e6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a0e0:	f06f 0301 	mvn.w	r3, #1
 801a0e4:	e2c4      	b.n	801a670 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 801a0e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a0e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801a0ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a0ec:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a0f4:	e267      	b.n	801a5c6 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801a0f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a0f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a0fa:	4413      	add	r3, r2
 801a0fc:	781b      	ldrb	r3, [r3, #0]
 801a0fe:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801a100:	2300      	movs	r3, #0
 801a102:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801a106:	f04f 33ff 	mov.w	r3, #4294967295
 801a10a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801a10c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a10e:	3302      	adds	r3, #2
 801a110:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801a112:	8bfa      	ldrh	r2, [r7, #30]
 801a114:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a116:	429a      	cmp	r2, r3
 801a118:	d202      	bcs.n	801a120 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801a11a:	f06f 0301 	mvn.w	r3, #1
 801a11e:	e2a7      	b.n	801a670 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a120:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a122:	3301      	adds	r3, #1
 801a124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a126:	8952      	ldrh	r2, [r2, #10]
 801a128:	4293      	cmp	r3, r2
 801a12a:	da07      	bge.n	801a13c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801a12c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a12e:	3301      	adds	r3, #1
 801a130:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a132:	4413      	add	r3, r2
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a13a:	e00b      	b.n	801a154 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d004      	beq.n	801a14e <dhcp_parse_reply+0xde>
 801a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	685b      	ldr	r3, [r3, #4]
 801a14a:	781b      	ldrb	r3, [r3, #0]
 801a14c:	e000      	b.n	801a150 <dhcp_parse_reply+0xe0>
 801a14e:	2300      	movs	r3, #0
 801a150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a158:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801a15c:	7dfb      	ldrb	r3, [r7, #23]
 801a15e:	2b3b      	cmp	r3, #59	@ 0x3b
 801a160:	f200 815a 	bhi.w	801a418 <dhcp_parse_reply+0x3a8>
 801a164:	a201      	add	r2, pc, #4	@ (adr r2, 801a16c <dhcp_parse_reply+0xfc>)
 801a166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a16a:	bf00      	nop
 801a16c:	0801a25d 	.word	0x0801a25d
 801a170:	0801a26d 	.word	0x0801a26d
 801a174:	0801a419 	.word	0x0801a419
 801a178:	0801a28f 	.word	0x0801a28f
 801a17c:	0801a419 	.word	0x0801a419
 801a180:	0801a419 	.word	0x0801a419
 801a184:	0801a2bb 	.word	0x0801a2bb
 801a188:	0801a419 	.word	0x0801a419
 801a18c:	0801a419 	.word	0x0801a419
 801a190:	0801a419 	.word	0x0801a419
 801a194:	0801a419 	.word	0x0801a419
 801a198:	0801a419 	.word	0x0801a419
 801a19c:	0801a419 	.word	0x0801a419
 801a1a0:	0801a419 	.word	0x0801a419
 801a1a4:	0801a419 	.word	0x0801a419
 801a1a8:	0801a419 	.word	0x0801a419
 801a1ac:	0801a419 	.word	0x0801a419
 801a1b0:	0801a419 	.word	0x0801a419
 801a1b4:	0801a419 	.word	0x0801a419
 801a1b8:	0801a419 	.word	0x0801a419
 801a1bc:	0801a419 	.word	0x0801a419
 801a1c0:	0801a419 	.word	0x0801a419
 801a1c4:	0801a419 	.word	0x0801a419
 801a1c8:	0801a419 	.word	0x0801a419
 801a1cc:	0801a419 	.word	0x0801a419
 801a1d0:	0801a419 	.word	0x0801a419
 801a1d4:	0801a419 	.word	0x0801a419
 801a1d8:	0801a419 	.word	0x0801a419
 801a1dc:	0801a419 	.word	0x0801a419
 801a1e0:	0801a419 	.word	0x0801a419
 801a1e4:	0801a419 	.word	0x0801a419
 801a1e8:	0801a419 	.word	0x0801a419
 801a1ec:	0801a419 	.word	0x0801a419
 801a1f0:	0801a419 	.word	0x0801a419
 801a1f4:	0801a419 	.word	0x0801a419
 801a1f8:	0801a419 	.word	0x0801a419
 801a1fc:	0801a419 	.word	0x0801a419
 801a200:	0801a419 	.word	0x0801a419
 801a204:	0801a419 	.word	0x0801a419
 801a208:	0801a419 	.word	0x0801a419
 801a20c:	0801a419 	.word	0x0801a419
 801a210:	0801a419 	.word	0x0801a419
 801a214:	0801a419 	.word	0x0801a419
 801a218:	0801a419 	.word	0x0801a419
 801a21c:	0801a419 	.word	0x0801a419
 801a220:	0801a419 	.word	0x0801a419
 801a224:	0801a419 	.word	0x0801a419
 801a228:	0801a419 	.word	0x0801a419
 801a22c:	0801a419 	.word	0x0801a419
 801a230:	0801a419 	.word	0x0801a419
 801a234:	0801a419 	.word	0x0801a419
 801a238:	0801a311 	.word	0x0801a311
 801a23c:	0801a333 	.word	0x0801a333
 801a240:	0801a391 	.word	0x0801a391
 801a244:	0801a3b3 	.word	0x0801a3b3
 801a248:	0801a419 	.word	0x0801a419
 801a24c:	0801a419 	.word	0x0801a419
 801a250:	0801a419 	.word	0x0801a419
 801a254:	0801a3d5 	.word	0x0801a3d5
 801a258:	0801a3f7 	.word	0x0801a3f7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a25c:	2300      	movs	r3, #0
 801a25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a266:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801a26a:	e0d9      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a26c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a270:	2b04      	cmp	r3, #4
 801a272:	d009      	beq.n	801a288 <dhcp_parse_reply+0x218>
 801a274:	4b3f      	ldr	r3, [pc, #252]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a276:	f240 622e 	movw	r2, #1582	@ 0x62e
 801a27a:	493f      	ldr	r1, [pc, #252]	@ (801a378 <dhcp_parse_reply+0x308>)
 801a27c:	483f      	ldr	r0, [pc, #252]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a27e:	f004 f95b 	bl	801e538 <iprintf>
 801a282:	f06f 0305 	mvn.w	r3, #5
 801a286:	e1f3      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a288:	2306      	movs	r3, #6
 801a28a:	623b      	str	r3, [r7, #32]
        break;
 801a28c:	e0c8      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801a28e:	2304      	movs	r3, #4
 801a290:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a294:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d209      	bcs.n	801a2b4 <dhcp_parse_reply+0x244>
 801a2a0:	4b34      	ldr	r3, [pc, #208]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a2a2:	f240 6233 	movw	r2, #1587	@ 0x633
 801a2a6:	4936      	ldr	r1, [pc, #216]	@ (801a380 <dhcp_parse_reply+0x310>)
 801a2a8:	4834      	ldr	r0, [pc, #208]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a2aa:	f004 f945 	bl	801e538 <iprintf>
 801a2ae:	f06f 0305 	mvn.w	r3, #5
 801a2b2:	e1dd      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a2b4:	2307      	movs	r3, #7
 801a2b6:	623b      	str	r3, [r7, #32]
        break;
 801a2b8:	e0b2      	b.n	801a420 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2be:	f003 0303 	and.w	r3, r3, #3
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d009      	beq.n	801a2dc <dhcp_parse_reply+0x26c>
 801a2c8:	4b2a      	ldr	r3, [pc, #168]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a2ca:	f240 6239 	movw	r2, #1593	@ 0x639
 801a2ce:	492d      	ldr	r1, [pc, #180]	@ (801a384 <dhcp_parse_reply+0x314>)
 801a2d0:	482a      	ldr	r0, [pc, #168]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a2d2:	f004 f931 	bl	801e538 <iprintf>
 801a2d6:	f06f 0305 	mvn.w	r3, #5
 801a2da:	e1c9      	b.n	801a670 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2e0:	2b08      	cmp	r3, #8
 801a2e2:	bf28      	it	cs
 801a2e4:	2308      	movcs	r3, #8
 801a2e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a2ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a2ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a2f2:	429a      	cmp	r2, r3
 801a2f4:	d209      	bcs.n	801a30a <dhcp_parse_reply+0x29a>
 801a2f6:	4b1f      	ldr	r3, [pc, #124]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a2f8:	f240 623c 	movw	r2, #1596	@ 0x63c
 801a2fc:	4920      	ldr	r1, [pc, #128]	@ (801a380 <dhcp_parse_reply+0x310>)
 801a2fe:	481f      	ldr	r0, [pc, #124]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a300:	f004 f91a 	bl	801e538 <iprintf>
 801a304:	f06f 0305 	mvn.w	r3, #5
 801a308:	e1b2      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a30a:	2308      	movs	r3, #8
 801a30c:	623b      	str	r3, [r7, #32]
        break;
 801a30e:	e087      	b.n	801a420 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a314:	2b04      	cmp	r3, #4
 801a316:	d009      	beq.n	801a32c <dhcp_parse_reply+0x2bc>
 801a318:	4b16      	ldr	r3, [pc, #88]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a31a:	f240 6241 	movw	r2, #1601	@ 0x641
 801a31e:	4916      	ldr	r1, [pc, #88]	@ (801a378 <dhcp_parse_reply+0x308>)
 801a320:	4816      	ldr	r0, [pc, #88]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a322:	f004 f909 	bl	801e538 <iprintf>
 801a326:	f06f 0305 	mvn.w	r3, #5
 801a32a:	e1a1      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a32c:	2303      	movs	r3, #3
 801a32e:	623b      	str	r3, [r7, #32]
        break;
 801a330:	e076      	b.n	801a420 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a336:	2b01      	cmp	r3, #1
 801a338:	d009      	beq.n	801a34e <dhcp_parse_reply+0x2de>
 801a33a:	4b0e      	ldr	r3, [pc, #56]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a33c:	f240 624f 	movw	r2, #1615	@ 0x64f
 801a340:	4911      	ldr	r1, [pc, #68]	@ (801a388 <dhcp_parse_reply+0x318>)
 801a342:	480e      	ldr	r0, [pc, #56]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a344:	f004 f8f8 	bl	801e538 <iprintf>
 801a348:	f06f 0305 	mvn.w	r3, #5
 801a34c:	e190      	b.n	801a670 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a34e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a350:	2bf0      	cmp	r3, #240	@ 0xf0
 801a352:	d009      	beq.n	801a368 <dhcp_parse_reply+0x2f8>
 801a354:	4b07      	ldr	r3, [pc, #28]	@ (801a374 <dhcp_parse_reply+0x304>)
 801a356:	f240 6251 	movw	r2, #1617	@ 0x651
 801a35a:	490c      	ldr	r1, [pc, #48]	@ (801a38c <dhcp_parse_reply+0x31c>)
 801a35c:	4807      	ldr	r0, [pc, #28]	@ (801a37c <dhcp_parse_reply+0x30c>)
 801a35e:	f004 f8eb 	bl	801e538 <iprintf>
 801a362:	f06f 0305 	mvn.w	r3, #5
 801a366:	e183      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a368:	2300      	movs	r3, #0
 801a36a:	623b      	str	r3, [r7, #32]
        break;
 801a36c:	e058      	b.n	801a420 <dhcp_parse_reply+0x3b0>
 801a36e:	bf00      	nop
 801a370:	200177e0 	.word	0x200177e0
 801a374:	08024444 	.word	0x08024444
 801a378:	080246cc 	.word	0x080246cc
 801a37c:	080244a4 	.word	0x080244a4
 801a380:	080246d8 	.word	0x080246d8
 801a384:	080246ec 	.word	0x080246ec
 801a388:	080246fc 	.word	0x080246fc
 801a38c:	08024708 	.word	0x08024708
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a394:	2b01      	cmp	r3, #1
 801a396:	d009      	beq.n	801a3ac <dhcp_parse_reply+0x33c>
 801a398:	4b9d      	ldr	r3, [pc, #628]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a39a:	f240 6255 	movw	r2, #1621	@ 0x655
 801a39e:	499d      	ldr	r1, [pc, #628]	@ (801a614 <dhcp_parse_reply+0x5a4>)
 801a3a0:	489d      	ldr	r0, [pc, #628]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a3a2:	f004 f8c9 	bl	801e538 <iprintf>
 801a3a6:	f06f 0305 	mvn.w	r3, #5
 801a3aa:	e161      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801a3ac:	2301      	movs	r3, #1
 801a3ae:	623b      	str	r3, [r7, #32]
        break;
 801a3b0:	e036      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3b6:	2b04      	cmp	r3, #4
 801a3b8:	d009      	beq.n	801a3ce <dhcp_parse_reply+0x35e>
 801a3ba:	4b95      	ldr	r3, [pc, #596]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a3bc:	f240 6259 	movw	r2, #1625	@ 0x659
 801a3c0:	4996      	ldr	r1, [pc, #600]	@ (801a61c <dhcp_parse_reply+0x5ac>)
 801a3c2:	4895      	ldr	r0, [pc, #596]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a3c4:	f004 f8b8 	bl	801e538 <iprintf>
 801a3c8:	f06f 0305 	mvn.w	r3, #5
 801a3cc:	e150      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a3ce:	2302      	movs	r3, #2
 801a3d0:	623b      	str	r3, [r7, #32]
        break;
 801a3d2:	e025      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3d8:	2b04      	cmp	r3, #4
 801a3da:	d009      	beq.n	801a3f0 <dhcp_parse_reply+0x380>
 801a3dc:	4b8c      	ldr	r3, [pc, #560]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a3de:	f240 625d 	movw	r2, #1629	@ 0x65d
 801a3e2:	498e      	ldr	r1, [pc, #568]	@ (801a61c <dhcp_parse_reply+0x5ac>)
 801a3e4:	488c      	ldr	r0, [pc, #560]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a3e6:	f004 f8a7 	bl	801e538 <iprintf>
 801a3ea:	f06f 0305 	mvn.w	r3, #5
 801a3ee:	e13f      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a3f0:	2304      	movs	r3, #4
 801a3f2:	623b      	str	r3, [r7, #32]
        break;
 801a3f4:	e014      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3fa:	2b04      	cmp	r3, #4
 801a3fc:	d009      	beq.n	801a412 <dhcp_parse_reply+0x3a2>
 801a3fe:	4b84      	ldr	r3, [pc, #528]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a400:	f240 6261 	movw	r2, #1633	@ 0x661
 801a404:	4985      	ldr	r1, [pc, #532]	@ (801a61c <dhcp_parse_reply+0x5ac>)
 801a406:	4884      	ldr	r0, [pc, #528]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a408:	f004 f896 	bl	801e538 <iprintf>
 801a40c:	f06f 0305 	mvn.w	r3, #5
 801a410:	e12e      	b.n	801a670 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a412:	2305      	movs	r3, #5
 801a414:	623b      	str	r3, [r7, #32]
        break;
 801a416:	e003      	b.n	801a420 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801a418:	2300      	movs	r3, #0
 801a41a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801a41e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801a420:	7dfb      	ldrb	r3, [r7, #23]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d103      	bne.n	801a42e <dhcp_parse_reply+0x3be>
      offset++;
 801a426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a428:	3301      	adds	r3, #1
 801a42a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801a42c:	e0a1      	b.n	801a572 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801a42e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a434:	4413      	add	r3, r2
 801a436:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801a43a:	4293      	cmp	r3, r2
 801a43c:	dd02      	ble.n	801a444 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801a43e:	f06f 0301 	mvn.w	r3, #1
 801a442:	e115      	b.n	801a670 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 801a444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a448:	b29a      	uxth	r2, r3
 801a44a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a44c:	4413      	add	r3, r2
 801a44e:	b29b      	uxth	r3, r3
 801a450:	3302      	adds	r3, #2
 801a452:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801a454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f000 808a 	beq.w	801a572 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801a45e:	2300      	movs	r3, #0
 801a460:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801a462:	6a3b      	ldr	r3, [r7, #32]
 801a464:	2b00      	cmp	r3, #0
 801a466:	db02      	blt.n	801a46e <dhcp_parse_reply+0x3fe>
 801a468:	6a3b      	ldr	r3, [r7, #32]
 801a46a:	2b09      	cmp	r3, #9
 801a46c:	dd06      	ble.n	801a47c <dhcp_parse_reply+0x40c>
 801a46e:	4b68      	ldr	r3, [pc, #416]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a470:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a474:	496a      	ldr	r1, [pc, #424]	@ (801a620 <dhcp_parse_reply+0x5b0>)
 801a476:	4868      	ldr	r0, [pc, #416]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a478:	f004 f85e 	bl	801e538 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a47c:	4a69      	ldr	r2, [pc, #420]	@ (801a624 <dhcp_parse_reply+0x5b4>)
 801a47e:	6a3b      	ldr	r3, [r7, #32]
 801a480:	4413      	add	r3, r2
 801a482:	781b      	ldrb	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d174      	bne.n	801a572 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801a488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a48c:	2b04      	cmp	r3, #4
 801a48e:	bf28      	it	cs
 801a490:	2304      	movcs	r3, #4
 801a492:	b2db      	uxtb	r3, r3
 801a494:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a496:	8bfb      	ldrh	r3, [r7, #30]
 801a498:	8aba      	ldrh	r2, [r7, #20]
 801a49a:	f107 0108 	add.w	r1, r7, #8
 801a49e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4a0:	f7f8 fa1e 	bl	80128e0 <pbuf_copy_partial>
 801a4a4:	4603      	mov	r3, r0
 801a4a6:	461a      	mov	r2, r3
 801a4a8:	8abb      	ldrh	r3, [r7, #20]
 801a4aa:	4293      	cmp	r3, r2
 801a4ac:	d002      	beq.n	801a4b4 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801a4ae:	f06f 0301 	mvn.w	r3, #1
 801a4b2:	e0dd      	b.n	801a670 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801a4b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a4b8:	2b04      	cmp	r3, #4
 801a4ba:	d933      	bls.n	801a524 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a4bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a4c0:	f003 0303 	and.w	r3, r3, #3
 801a4c4:	b2db      	uxtb	r3, r3
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d009      	beq.n	801a4de <dhcp_parse_reply+0x46e>
 801a4ca:	4b51      	ldr	r3, [pc, #324]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a4cc:	f240 6281 	movw	r2, #1665	@ 0x681
 801a4d0:	4955      	ldr	r1, [pc, #340]	@ (801a628 <dhcp_parse_reply+0x5b8>)
 801a4d2:	4851      	ldr	r0, [pc, #324]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a4d4:	f004 f830 	bl	801e538 <iprintf>
 801a4d8:	f06f 0305 	mvn.w	r3, #5
 801a4dc:	e0c8      	b.n	801a670 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801a4de:	4a51      	ldr	r2, [pc, #324]	@ (801a624 <dhcp_parse_reply+0x5b4>)
 801a4e0:	6a3b      	ldr	r3, [r7, #32]
 801a4e2:	4413      	add	r3, r2
 801a4e4:	2201      	movs	r2, #1
 801a4e6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f7f6 f91b 	bl	8010726 <lwip_htonl>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	494e      	ldr	r1, [pc, #312]	@ (801a62c <dhcp_parse_reply+0x5bc>)
 801a4f4:	6a3b      	ldr	r3, [r7, #32]
 801a4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a4fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a4fe:	3b04      	subs	r3, #4
 801a500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a504:	8bfb      	ldrh	r3, [r7, #30]
 801a506:	3304      	adds	r3, #4
 801a508:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a50a:	8a7a      	ldrh	r2, [r7, #18]
 801a50c:	8bfb      	ldrh	r3, [r7, #30]
 801a50e:	429a      	cmp	r2, r3
 801a510:	d202      	bcs.n	801a518 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801a512:	f06f 0301 	mvn.w	r3, #1
 801a516:	e0ab      	b.n	801a670 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801a518:	8a7b      	ldrh	r3, [r7, #18]
 801a51a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a51c:	6a3b      	ldr	r3, [r7, #32]
 801a51e:	3301      	adds	r3, #1
 801a520:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a522:	e79e      	b.n	801a462 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801a524:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a528:	2b04      	cmp	r3, #4
 801a52a:	d106      	bne.n	801a53a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	4618      	mov	r0, r3
 801a530:	f7f6 f8f9 	bl	8010726 <lwip_htonl>
 801a534:	4603      	mov	r3, r0
 801a536:	60bb      	str	r3, [r7, #8]
 801a538:	e011      	b.n	801a55e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a53a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a53e:	2b01      	cmp	r3, #1
 801a540:	d009      	beq.n	801a556 <dhcp_parse_reply+0x4e6>
 801a542:	4b33      	ldr	r3, [pc, #204]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a544:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a548:	4939      	ldr	r1, [pc, #228]	@ (801a630 <dhcp_parse_reply+0x5c0>)
 801a54a:	4833      	ldr	r0, [pc, #204]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a54c:	f003 fff4 	bl	801e538 <iprintf>
 801a550:	f06f 0305 	mvn.w	r3, #5
 801a554:	e08c      	b.n	801a670 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801a556:	f107 0308 	add.w	r3, r7, #8
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a55e:	4a31      	ldr	r2, [pc, #196]	@ (801a624 <dhcp_parse_reply+0x5b4>)
 801a560:	6a3b      	ldr	r3, [r7, #32]
 801a562:	4413      	add	r3, r2
 801a564:	2201      	movs	r2, #1
 801a566:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a568:	68ba      	ldr	r2, [r7, #8]
 801a56a:	4930      	ldr	r1, [pc, #192]	@ (801a62c <dhcp_parse_reply+0x5bc>)
 801a56c:	6a3b      	ldr	r3, [r7, #32]
 801a56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a574:	895b      	ldrh	r3, [r3, #10]
 801a576:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a578:	429a      	cmp	r2, r3
 801a57a:	d324      	bcc.n	801a5c6 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a57e:	895b      	ldrh	r3, [r3, #10]
 801a580:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a582:	1ad3      	subs	r3, r2, r3
 801a584:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a588:	895b      	ldrh	r3, [r3, #10]
 801a58a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a58c:	1ad3      	subs	r3, r2, r3
 801a58e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a590:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a592:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a594:	429a      	cmp	r2, r3
 801a596:	d213      	bcs.n	801a5c0 <dhcp_parse_reply+0x550>
        q = q->next;
 801a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d109      	bne.n	801a5b8 <dhcp_parse_reply+0x548>
 801a5a4:	4b1a      	ldr	r3, [pc, #104]	@ (801a610 <dhcp_parse_reply+0x5a0>)
 801a5a6:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a5aa:	4922      	ldr	r1, [pc, #136]	@ (801a634 <dhcp_parse_reply+0x5c4>)
 801a5ac:	481a      	ldr	r0, [pc, #104]	@ (801a618 <dhcp_parse_reply+0x5a8>)
 801a5ae:	f003 ffc3 	bl	801e538 <iprintf>
 801a5b2:	f06f 0305 	mvn.w	r3, #5
 801a5b6:	e05b      	b.n	801a670 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5ba:	685b      	ldr	r3, [r3, #4]
 801a5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a5be:	e002      	b.n	801a5c6 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a5c0:	f06f 0301 	mvn.w	r3, #1
 801a5c4:	e054      	b.n	801a670 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d00a      	beq.n	801a5e2 <dhcp_parse_reply+0x572>
 801a5cc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a5ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5d0:	429a      	cmp	r2, r3
 801a5d2:	d206      	bcs.n	801a5e2 <dhcp_parse_reply+0x572>
 801a5d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a5d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a5d8:	4413      	add	r3, r2
 801a5da:	781b      	ldrb	r3, [r3, #0]
 801a5dc:	2bff      	cmp	r3, #255	@ 0xff
 801a5de:	f47f ad8a 	bne.w	801a0f6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a5e2:	4b10      	ldr	r3, [pc, #64]	@ (801a624 <dhcp_parse_reply+0x5b4>)
 801a5e4:	781b      	ldrb	r3, [r3, #0]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d02d      	beq.n	801a646 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a5ea:	4b10      	ldr	r3, [pc, #64]	@ (801a62c <dhcp_parse_reply+0x5bc>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a5f0:	4b0c      	ldr	r3, [pc, #48]	@ (801a624 <dhcp_parse_reply+0x5b4>)
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	2b01      	cmp	r3, #1
 801a5fa:	d102      	bne.n	801a602 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a600:	e021      	b.n	801a646 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	2b02      	cmp	r3, #2
 801a606:	d117      	bne.n	801a638 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801a608:	2301      	movs	r3, #1
 801a60a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a60c:	e01b      	b.n	801a646 <dhcp_parse_reply+0x5d6>
 801a60e:	bf00      	nop
 801a610:	08024444 	.word	0x08024444
 801a614:	080246fc 	.word	0x080246fc
 801a618:	080244a4 	.word	0x080244a4
 801a61c:	080246cc 	.word	0x080246cc
 801a620:	08024720 	.word	0x08024720
 801a624:	200177e0 	.word	0x200177e0
 801a628:	08024734 	.word	0x08024734
 801a62c:	200177b8 	.word	0x200177b8
 801a630:	0802474c 	.word	0x0802474c
 801a634:	08024760 	.word	0x08024760
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	2b03      	cmp	r3, #3
 801a63c:	d103      	bne.n	801a646 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801a63e:	2301      	movs	r3, #1
 801a640:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a642:	2301      	movs	r3, #1
 801a644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d006      	beq.n	801a65a <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a64c:	2300      	movs	r3, #0
 801a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a650:	236c      	movs	r3, #108	@ 0x6c
 801a652:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a654:	23ec      	movs	r3, #236	@ 0xec
 801a656:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a658:	e527      	b.n	801a0aa <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d006      	beq.n	801a66e <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 801a660:	2300      	movs	r3, #0
 801a662:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a664:	232c      	movs	r3, #44	@ 0x2c
 801a666:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a668:	236c      	movs	r3, #108	@ 0x6c
 801a66a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a66c:	e51d      	b.n	801a0aa <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a66e:	2300      	movs	r3, #0
}
 801a670:	4618      	mov	r0, r3
 801a672:	3740      	adds	r7, #64	@ 0x40
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b08a      	sub	sp, #40	@ 0x28
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	60f8      	str	r0, [r7, #12]
 801a680:	60b9      	str	r1, [r7, #8]
 801a682:	607a      	str	r2, [r7, #4]
 801a684:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a686:	4b60      	ldr	r3, [pc, #384]	@ (801a808 <dhcp_recv+0x190>)
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a68c:	6a3b      	ldr	r3, [r7, #32]
 801a68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a690:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	685b      	ldr	r3, [r3, #4]
 801a696:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	f000 809d 	beq.w	801a7da <dhcp_recv+0x162>
 801a6a0:	69fb      	ldr	r3, [r7, #28]
 801a6a2:	791b      	ldrb	r3, [r3, #4]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f000 8098 	beq.w	801a7da <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	895b      	ldrh	r3, [r3, #10]
 801a6ae:	2b2b      	cmp	r3, #43	@ 0x2b
 801a6b0:	f240 8095 	bls.w	801a7de <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a6b4:	69bb      	ldr	r3, [r7, #24]
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	2b02      	cmp	r3, #2
 801a6ba:	f040 8092 	bne.w	801a7e2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a6be:	2300      	movs	r3, #0
 801a6c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a6c4:	e012      	b.n	801a6ec <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6ca:	6a3a      	ldr	r2, [r7, #32]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6d6:	69b9      	ldr	r1, [r7, #24]
 801a6d8:	440b      	add	r3, r1
 801a6da:	7f1b      	ldrb	r3, [r3, #28]
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	f040 8082 	bne.w	801a7e6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a6ec:	6a3b      	ldr	r3, [r7, #32]
 801a6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a6f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a6f6:	429a      	cmp	r2, r3
 801a6f8:	d203      	bcs.n	801a702 <dhcp_recv+0x8a>
 801a6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6fe:	2b05      	cmp	r3, #5
 801a700:	d9e1      	bls.n	801a6c6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a702:	69bb      	ldr	r3, [r7, #24]
 801a704:	685b      	ldr	r3, [r3, #4]
 801a706:	4618      	mov	r0, r3
 801a708:	f7f6 f80d 	bl	8010726 <lwip_htonl>
 801a70c:	4602      	mov	r2, r0
 801a70e:	69fb      	ldr	r3, [r7, #28]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	429a      	cmp	r2, r3
 801a714:	d169      	bne.n	801a7ea <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a716:	69f9      	ldr	r1, [r7, #28]
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f7ff fca9 	bl	801a070 <dhcp_parse_reply>
 801a71e:	4603      	mov	r3, r0
 801a720:	2b00      	cmp	r3, #0
 801a722:	d164      	bne.n	801a7ee <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a724:	4b39      	ldr	r3, [pc, #228]	@ (801a80c <dhcp_recv+0x194>)
 801a726:	785b      	ldrb	r3, [r3, #1]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d062      	beq.n	801a7f2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	685b      	ldr	r3, [r3, #4]
 801a730:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a732:	4b37      	ldr	r3, [pc, #220]	@ (801a810 <dhcp_recv+0x198>)
 801a734:	685b      	ldr	r3, [r3, #4]
 801a736:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a738:	7cfb      	ldrb	r3, [r7, #19]
 801a73a:	2b05      	cmp	r3, #5
 801a73c:	d12a      	bne.n	801a794 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a73e:	69fb      	ldr	r3, [r7, #28]
 801a740:	795b      	ldrb	r3, [r3, #5]
 801a742:	2b01      	cmp	r3, #1
 801a744:	d112      	bne.n	801a76c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a746:	6979      	ldr	r1, [r7, #20]
 801a748:	6a38      	ldr	r0, [r7, #32]
 801a74a:	f7fe fdcd 	bl	80192e8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a74e:	6a3b      	ldr	r3, [r7, #32]
 801a750:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a754:	f003 0308 	and.w	r3, r3, #8
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d003      	beq.n	801a764 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a75c:	6a38      	ldr	r0, [r7, #32]
 801a75e:	f7fe fb3d 	bl	8018ddc <dhcp_check>
 801a762:	e049      	b.n	801a7f8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a764:	6a38      	ldr	r0, [r7, #32]
 801a766:	f7ff f83d 	bl	80197e4 <dhcp_bind>
 801a76a:	e045      	b.n	801a7f8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a76c:	69fb      	ldr	r3, [r7, #28]
 801a76e:	795b      	ldrb	r3, [r3, #5]
 801a770:	2b03      	cmp	r3, #3
 801a772:	d007      	beq.n	801a784 <dhcp_recv+0x10c>
 801a774:	69fb      	ldr	r3, [r7, #28]
 801a776:	795b      	ldrb	r3, [r3, #5]
 801a778:	2b04      	cmp	r3, #4
 801a77a:	d003      	beq.n	801a784 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a77c:	69fb      	ldr	r3, [r7, #28]
 801a77e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a780:	2b05      	cmp	r3, #5
 801a782:	d139      	bne.n	801a7f8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a784:	6979      	ldr	r1, [r7, #20]
 801a786:	6a38      	ldr	r0, [r7, #32]
 801a788:	f7fe fdae 	bl	80192e8 <dhcp_handle_ack>
      dhcp_bind(netif);
 801a78c:	6a38      	ldr	r0, [r7, #32]
 801a78e:	f7ff f829 	bl	80197e4 <dhcp_bind>
 801a792:	e031      	b.n	801a7f8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a794:	7cfb      	ldrb	r3, [r7, #19]
 801a796:	2b06      	cmp	r3, #6
 801a798:	d113      	bne.n	801a7c2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a79a:	69fb      	ldr	r3, [r7, #28]
 801a79c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a79e:	2b03      	cmp	r3, #3
 801a7a0:	d00b      	beq.n	801a7ba <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a7a2:	69fb      	ldr	r3, [r7, #28]
 801a7a4:	795b      	ldrb	r3, [r3, #5]
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	d007      	beq.n	801a7ba <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a7aa:	69fb      	ldr	r3, [r7, #28]
 801a7ac:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a7ae:	2b04      	cmp	r3, #4
 801a7b0:	d003      	beq.n	801a7ba <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a7b2:	69fb      	ldr	r3, [r7, #28]
 801a7b4:	795b      	ldrb	r3, [r3, #5]
 801a7b6:	2b05      	cmp	r3, #5
 801a7b8:	d103      	bne.n	801a7c2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a7ba:	6a38      	ldr	r0, [r7, #32]
 801a7bc:	f7fe faf4 	bl	8018da8 <dhcp_handle_nak>
 801a7c0:	e01a      	b.n	801a7f8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a7c2:	7cfb      	ldrb	r3, [r7, #19]
 801a7c4:	2b02      	cmp	r3, #2
 801a7c6:	d116      	bne.n	801a7f6 <dhcp_recv+0x17e>
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	795b      	ldrb	r3, [r3, #5]
 801a7cc:	2b06      	cmp	r3, #6
 801a7ce:	d112      	bne.n	801a7f6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a7d0:	6979      	ldr	r1, [r7, #20]
 801a7d2:	6a38      	ldr	r0, [r7, #32]
 801a7d4:	f7fe fb36 	bl	8018e44 <dhcp_handle_offer>
 801a7d8:	e00e      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7da:	bf00      	nop
 801a7dc:	e00c      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7de:	bf00      	nop
 801a7e0:	e00a      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7e2:	bf00      	nop
 801a7e4:	e008      	b.n	801a7f8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a7e6:	bf00      	nop
 801a7e8:	e006      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7ea:	bf00      	nop
 801a7ec:	e004      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7ee:	bf00      	nop
 801a7f0:	e002      	b.n	801a7f8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7f2:	bf00      	nop
 801a7f4:	e000      	b.n	801a7f8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a7f6:	bf00      	nop
  pbuf_free(p);
 801a7f8:	6878      	ldr	r0, [r7, #4]
 801a7fa:	f7f7 fe6b 	bl	80124d4 <pbuf_free>
}
 801a7fe:	bf00      	nop
 801a800:	3728      	adds	r7, #40	@ 0x28
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	20013e98 	.word	0x20013e98
 801a80c:	200177e0 	.word	0x200177e0
 801a810:	200177b8 	.word	0x200177b8

0801a814 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b088      	sub	sp, #32
 801a818:	af00      	add	r7, sp, #0
 801a81a:	60f8      	str	r0, [r7, #12]
 801a81c:	60b9      	str	r1, [r7, #8]
 801a81e:	603b      	str	r3, [r7, #0]
 801a820:	4613      	mov	r3, r2
 801a822:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d108      	bne.n	801a83c <dhcp_create_msg+0x28>
 801a82a:	4b5f      	ldr	r3, [pc, #380]	@ (801a9a8 <dhcp_create_msg+0x194>)
 801a82c:	f240 7269 	movw	r2, #1897	@ 0x769
 801a830:	495e      	ldr	r1, [pc, #376]	@ (801a9ac <dhcp_create_msg+0x198>)
 801a832:	485f      	ldr	r0, [pc, #380]	@ (801a9b0 <dhcp_create_msg+0x19c>)
 801a834:	f003 fe80 	bl	801e538 <iprintf>
 801a838:	2300      	movs	r3, #0
 801a83a:	e0b1      	b.n	801a9a0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d108      	bne.n	801a854 <dhcp_create_msg+0x40>
 801a842:	4b59      	ldr	r3, [pc, #356]	@ (801a9a8 <dhcp_create_msg+0x194>)
 801a844:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a848:	495a      	ldr	r1, [pc, #360]	@ (801a9b4 <dhcp_create_msg+0x1a0>)
 801a84a:	4859      	ldr	r0, [pc, #356]	@ (801a9b0 <dhcp_create_msg+0x19c>)
 801a84c:	f003 fe74 	bl	801e538 <iprintf>
 801a850:	2300      	movs	r3, #0
 801a852:	e0a5      	b.n	801a9a0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a854:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a858:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a85c:	2036      	movs	r0, #54	@ 0x36
 801a85e:	f7f7 fb55 	bl	8011f0c <pbuf_alloc>
 801a862:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a864:	69bb      	ldr	r3, [r7, #24]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d101      	bne.n	801a86e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a86a:	2300      	movs	r3, #0
 801a86c:	e098      	b.n	801a9a0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a86e:	69bb      	ldr	r3, [r7, #24]
 801a870:	895b      	ldrh	r3, [r3, #10]
 801a872:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a876:	d206      	bcs.n	801a886 <dhcp_create_msg+0x72>
 801a878:	4b4b      	ldr	r3, [pc, #300]	@ (801a9a8 <dhcp_create_msg+0x194>)
 801a87a:	f240 7271 	movw	r2, #1905	@ 0x771
 801a87e:	494e      	ldr	r1, [pc, #312]	@ (801a9b8 <dhcp_create_msg+0x1a4>)
 801a880:	484b      	ldr	r0, [pc, #300]	@ (801a9b0 <dhcp_create_msg+0x19c>)
 801a882:	f003 fe59 	bl	801e538 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a886:	79fb      	ldrb	r3, [r7, #7]
 801a888:	2b03      	cmp	r3, #3
 801a88a:	d103      	bne.n	801a894 <dhcp_create_msg+0x80>
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	795b      	ldrb	r3, [r3, #5]
 801a890:	2b03      	cmp	r3, #3
 801a892:	d10d      	bne.n	801a8b0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	799b      	ldrb	r3, [r3, #6]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d105      	bne.n	801a8a8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a89c:	f002 fd80 	bl	801d3a0 <rand>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	4b45      	ldr	r3, [pc, #276]	@ (801a9bc <dhcp_create_msg+0x1a8>)
 801a8a6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a8a8:	4b44      	ldr	r3, [pc, #272]	@ (801a9bc <dhcp_create_msg+0x1a8>)
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a8b0:	69bb      	ldr	r3, [r7, #24]
 801a8b2:	685b      	ldr	r3, [r3, #4]
 801a8b4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a8b6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a8ba:	2100      	movs	r1, #0
 801a8bc:	6978      	ldr	r0, [r7, #20]
 801a8be:	f003 ff6f 	bl	801e7a0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	2201      	movs	r2, #1
 801a8c6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a8c8:	697b      	ldr	r3, [r7, #20]
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a8d4:	697b      	ldr	r3, [r7, #20]
 801a8d6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f7f5 ff22 	bl	8010726 <lwip_htonl>
 801a8e2:	4602      	mov	r2, r0
 801a8e4:	697b      	ldr	r3, [r7, #20]
 801a8e6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a8e8:	79fb      	ldrb	r3, [r7, #7]
 801a8ea:	2b08      	cmp	r3, #8
 801a8ec:	d010      	beq.n	801a910 <dhcp_create_msg+0xfc>
 801a8ee:	79fb      	ldrb	r3, [r7, #7]
 801a8f0:	2b04      	cmp	r3, #4
 801a8f2:	d00d      	beq.n	801a910 <dhcp_create_msg+0xfc>
 801a8f4:	79fb      	ldrb	r3, [r7, #7]
 801a8f6:	2b07      	cmp	r3, #7
 801a8f8:	d00a      	beq.n	801a910 <dhcp_create_msg+0xfc>
 801a8fa:	79fb      	ldrb	r3, [r7, #7]
 801a8fc:	2b03      	cmp	r3, #3
 801a8fe:	d10c      	bne.n	801a91a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a904:	2b05      	cmp	r3, #5
 801a906:	d003      	beq.n	801a910 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	795b      	ldrb	r3, [r3, #5]
 801a90c:	2b04      	cmp	r3, #4
 801a90e:	d104      	bne.n	801a91a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	3304      	adds	r3, #4
 801a914:	681a      	ldr	r2, [r3, #0]
 801a916:	697b      	ldr	r3, [r7, #20]
 801a918:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a91a:	2300      	movs	r3, #0
 801a91c:	83fb      	strh	r3, [r7, #30]
 801a91e:	e00c      	b.n	801a93a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a920:	8bfa      	ldrh	r2, [r7, #30]
 801a922:	8bfb      	ldrh	r3, [r7, #30]
 801a924:	68f9      	ldr	r1, [r7, #12]
 801a926:	440a      	add	r2, r1
 801a928:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a92c:	697a      	ldr	r2, [r7, #20]
 801a92e:	4413      	add	r3, r2
 801a930:	460a      	mov	r2, r1
 801a932:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a934:	8bfb      	ldrh	r3, [r7, #30]
 801a936:	3301      	adds	r3, #1
 801a938:	83fb      	strh	r3, [r7, #30]
 801a93a:	8bfb      	ldrh	r3, [r7, #30]
 801a93c:	2b05      	cmp	r3, #5
 801a93e:	d9ef      	bls.n	801a920 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	2200      	movs	r2, #0
 801a944:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a948:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a94c:	2200      	movs	r2, #0
 801a94e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a952:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a956:	2200      	movs	r2, #0
 801a958:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a95c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a960:	2200      	movs	r2, #0
 801a962:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a966:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a96a:	697b      	ldr	r3, [r7, #20]
 801a96c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a970:	2301      	movs	r3, #1
 801a972:	2235      	movs	r2, #53	@ 0x35
 801a974:	2000      	movs	r0, #0
 801a976:	f7ff faab 	bl	8019ed0 <dhcp_option>
 801a97a:	4603      	mov	r3, r0
 801a97c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a984:	79fa      	ldrb	r2, [r7, #7]
 801a986:	8a7b      	ldrh	r3, [r7, #18]
 801a988:	4618      	mov	r0, r3
 801a98a:	f7ff fad5 	bl	8019f38 <dhcp_option_byte>
 801a98e:	4603      	mov	r3, r0
 801a990:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d002      	beq.n	801a99e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	8a7a      	ldrh	r2, [r7, #18]
 801a99c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a99e:	69bb      	ldr	r3, [r7, #24]
}
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	3720      	adds	r7, #32
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	08024444 	.word	0x08024444
 801a9ac:	08024774 	.word	0x08024774
 801a9b0:	080244a4 	.word	0x080244a4
 801a9b4:	08024794 	.word	0x08024794
 801a9b8:	080247b4 	.word	0x080247b4
 801a9bc:	200177f4 	.word	0x200177f4

0801a9c0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	60b9      	str	r1, [r7, #8]
 801a9ca:	607a      	str	r2, [r7, #4]
 801a9cc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a9ce:	89fb      	ldrh	r3, [r7, #14]
 801a9d0:	1c5a      	adds	r2, r3, #1
 801a9d2:	81fa      	strh	r2, [r7, #14]
 801a9d4:	461a      	mov	r2, r3
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	4413      	add	r3, r2
 801a9da:	22ff      	movs	r2, #255	@ 0xff
 801a9dc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a9de:	e007      	b.n	801a9f0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a9e0:	89fb      	ldrh	r3, [r7, #14]
 801a9e2:	1c5a      	adds	r2, r3, #1
 801a9e4:	81fa      	strh	r2, [r7, #14]
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	4413      	add	r3, r2
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a9f0:	89fb      	ldrh	r3, [r7, #14]
 801a9f2:	2b43      	cmp	r3, #67	@ 0x43
 801a9f4:	d904      	bls.n	801aa00 <dhcp_option_trailer+0x40>
 801a9f6:	89fb      	ldrh	r3, [r7, #14]
 801a9f8:	f003 0303 	and.w	r3, r3, #3
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d002      	beq.n	801aa06 <dhcp_option_trailer+0x46>
 801aa00:	89fb      	ldrh	r3, [r7, #14]
 801aa02:	2b43      	cmp	r3, #67	@ 0x43
 801aa04:	d9ec      	bls.n	801a9e0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801aa06:	89fb      	ldrh	r3, [r7, #14]
 801aa08:	33f0      	adds	r3, #240	@ 0xf0
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	4619      	mov	r1, r3
 801aa0e:	6878      	ldr	r0, [r7, #4]
 801aa10:	f7f7 fbda 	bl	80121c8 <pbuf_realloc>
}
 801aa14:	bf00      	nop
 801aa16:	3710      	adds	r7, #16
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}

0801aa1c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	b085      	sub	sp, #20
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d017      	beq.n	801aa5a <dhcp_supplied_address+0x3e>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d013      	beq.n	801aa5a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa36:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	795b      	ldrb	r3, [r3, #5]
 801aa3c:	2b0a      	cmp	r3, #10
 801aa3e:	d007      	beq.n	801aa50 <dhcp_supplied_address+0x34>
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	795b      	ldrb	r3, [r3, #5]
 801aa44:	2b05      	cmp	r3, #5
 801aa46:	d003      	beq.n	801aa50 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801aa4c:	2b04      	cmp	r3, #4
 801aa4e:	d101      	bne.n	801aa54 <dhcp_supplied_address+0x38>
 801aa50:	2301      	movs	r3, #1
 801aa52:	e000      	b.n	801aa56 <dhcp_supplied_address+0x3a>
 801aa54:	2300      	movs	r3, #0
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	e000      	b.n	801aa5c <dhcp_supplied_address+0x40>
  }
  return 0;
 801aa5a:	2300      	movs	r3, #0
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3714      	adds	r7, #20
 801aa60:	46bd      	mov	sp, r7
 801aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa66:	4770      	bx	lr

0801aa68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b082      	sub	sp, #8
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801aa70:	4915      	ldr	r1, [pc, #84]	@ (801aac8 <etharp_free_entry+0x60>)
 801aa72:	687a      	ldr	r2, [r7, #4]
 801aa74:	4613      	mov	r3, r2
 801aa76:	005b      	lsls	r3, r3, #1
 801aa78:	4413      	add	r3, r2
 801aa7a:	00db      	lsls	r3, r3, #3
 801aa7c:	440b      	add	r3, r1
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d013      	beq.n	801aaac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801aa84:	4910      	ldr	r1, [pc, #64]	@ (801aac8 <etharp_free_entry+0x60>)
 801aa86:	687a      	ldr	r2, [r7, #4]
 801aa88:	4613      	mov	r3, r2
 801aa8a:	005b      	lsls	r3, r3, #1
 801aa8c:	4413      	add	r3, r2
 801aa8e:	00db      	lsls	r3, r3, #3
 801aa90:	440b      	add	r3, r1
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7f7 fd1d 	bl	80124d4 <pbuf_free>
    arp_table[i].q = NULL;
 801aa9a:	490b      	ldr	r1, [pc, #44]	@ (801aac8 <etharp_free_entry+0x60>)
 801aa9c:	687a      	ldr	r2, [r7, #4]
 801aa9e:	4613      	mov	r3, r2
 801aaa0:	005b      	lsls	r3, r3, #1
 801aaa2:	4413      	add	r3, r2
 801aaa4:	00db      	lsls	r3, r3, #3
 801aaa6:	440b      	add	r3, r1
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801aaac:	4906      	ldr	r1, [pc, #24]	@ (801aac8 <etharp_free_entry+0x60>)
 801aaae:	687a      	ldr	r2, [r7, #4]
 801aab0:	4613      	mov	r3, r2
 801aab2:	005b      	lsls	r3, r3, #1
 801aab4:	4413      	add	r3, r2
 801aab6:	00db      	lsls	r3, r3, #3
 801aab8:	440b      	add	r3, r1
 801aaba:	3314      	adds	r3, #20
 801aabc:	2200      	movs	r2, #0
 801aabe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801aac0:	bf00      	nop
 801aac2:	3708      	adds	r7, #8
 801aac4:	46bd      	mov	sp, r7
 801aac6:	bd80      	pop	{r7, pc}
 801aac8:	200177f8 	.word	0x200177f8

0801aacc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aad2:	2300      	movs	r3, #0
 801aad4:	607b      	str	r3, [r7, #4]
 801aad6:	e096      	b.n	801ac06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801aad8:	494f      	ldr	r1, [pc, #316]	@ (801ac18 <etharp_tmr+0x14c>)
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	4613      	mov	r3, r2
 801aade:	005b      	lsls	r3, r3, #1
 801aae0:	4413      	add	r3, r2
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	440b      	add	r3, r1
 801aae6:	3314      	adds	r3, #20
 801aae8:	781b      	ldrb	r3, [r3, #0]
 801aaea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801aaec:	78fb      	ldrb	r3, [r7, #3]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	f000 8086 	beq.w	801ac00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801aaf4:	4948      	ldr	r1, [pc, #288]	@ (801ac18 <etharp_tmr+0x14c>)
 801aaf6:	687a      	ldr	r2, [r7, #4]
 801aaf8:	4613      	mov	r3, r2
 801aafa:	005b      	lsls	r3, r3, #1
 801aafc:	4413      	add	r3, r2
 801aafe:	00db      	lsls	r3, r3, #3
 801ab00:	440b      	add	r3, r1
 801ab02:	3312      	adds	r3, #18
 801ab04:	881b      	ldrh	r3, [r3, #0]
 801ab06:	3301      	adds	r3, #1
 801ab08:	b298      	uxth	r0, r3
 801ab0a:	4943      	ldr	r1, [pc, #268]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab0c:	687a      	ldr	r2, [r7, #4]
 801ab0e:	4613      	mov	r3, r2
 801ab10:	005b      	lsls	r3, r3, #1
 801ab12:	4413      	add	r3, r2
 801ab14:	00db      	lsls	r3, r3, #3
 801ab16:	440b      	add	r3, r1
 801ab18:	3312      	adds	r3, #18
 801ab1a:	4602      	mov	r2, r0
 801ab1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ab1e:	493e      	ldr	r1, [pc, #248]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab20:	687a      	ldr	r2, [r7, #4]
 801ab22:	4613      	mov	r3, r2
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4413      	add	r3, r2
 801ab28:	00db      	lsls	r3, r3, #3
 801ab2a:	440b      	add	r3, r1
 801ab2c:	3312      	adds	r3, #18
 801ab2e:	881b      	ldrh	r3, [r3, #0]
 801ab30:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ab34:	d215      	bcs.n	801ab62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab36:	4938      	ldr	r1, [pc, #224]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab38:	687a      	ldr	r2, [r7, #4]
 801ab3a:	4613      	mov	r3, r2
 801ab3c:	005b      	lsls	r3, r3, #1
 801ab3e:	4413      	add	r3, r2
 801ab40:	00db      	lsls	r3, r3, #3
 801ab42:	440b      	add	r3, r1
 801ab44:	3314      	adds	r3, #20
 801ab46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ab48:	2b01      	cmp	r3, #1
 801ab4a:	d10e      	bne.n	801ab6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ab4c:	4932      	ldr	r1, [pc, #200]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab4e:	687a      	ldr	r2, [r7, #4]
 801ab50:	4613      	mov	r3, r2
 801ab52:	005b      	lsls	r3, r3, #1
 801ab54:	4413      	add	r3, r2
 801ab56:	00db      	lsls	r3, r3, #3
 801ab58:	440b      	add	r3, r1
 801ab5a:	3312      	adds	r3, #18
 801ab5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab5e:	2b04      	cmp	r3, #4
 801ab60:	d903      	bls.n	801ab6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ab62:	6878      	ldr	r0, [r7, #4]
 801ab64:	f7ff ff80 	bl	801aa68 <etharp_free_entry>
 801ab68:	e04a      	b.n	801ac00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ab6a:	492b      	ldr	r1, [pc, #172]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab6c:	687a      	ldr	r2, [r7, #4]
 801ab6e:	4613      	mov	r3, r2
 801ab70:	005b      	lsls	r3, r3, #1
 801ab72:	4413      	add	r3, r2
 801ab74:	00db      	lsls	r3, r3, #3
 801ab76:	440b      	add	r3, r1
 801ab78:	3314      	adds	r3, #20
 801ab7a:	781b      	ldrb	r3, [r3, #0]
 801ab7c:	2b03      	cmp	r3, #3
 801ab7e:	d10a      	bne.n	801ab96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ab80:	4925      	ldr	r1, [pc, #148]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	4613      	mov	r3, r2
 801ab86:	005b      	lsls	r3, r3, #1
 801ab88:	4413      	add	r3, r2
 801ab8a:	00db      	lsls	r3, r3, #3
 801ab8c:	440b      	add	r3, r1
 801ab8e:	3314      	adds	r3, #20
 801ab90:	2204      	movs	r2, #4
 801ab92:	701a      	strb	r2, [r3, #0]
 801ab94:	e034      	b.n	801ac00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ab96:	4920      	ldr	r1, [pc, #128]	@ (801ac18 <etharp_tmr+0x14c>)
 801ab98:	687a      	ldr	r2, [r7, #4]
 801ab9a:	4613      	mov	r3, r2
 801ab9c:	005b      	lsls	r3, r3, #1
 801ab9e:	4413      	add	r3, r2
 801aba0:	00db      	lsls	r3, r3, #3
 801aba2:	440b      	add	r3, r1
 801aba4:	3314      	adds	r3, #20
 801aba6:	781b      	ldrb	r3, [r3, #0]
 801aba8:	2b04      	cmp	r3, #4
 801abaa:	d10a      	bne.n	801abc2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801abac:	491a      	ldr	r1, [pc, #104]	@ (801ac18 <etharp_tmr+0x14c>)
 801abae:	687a      	ldr	r2, [r7, #4]
 801abb0:	4613      	mov	r3, r2
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	4413      	add	r3, r2
 801abb6:	00db      	lsls	r3, r3, #3
 801abb8:	440b      	add	r3, r1
 801abba:	3314      	adds	r3, #20
 801abbc:	2202      	movs	r2, #2
 801abbe:	701a      	strb	r2, [r3, #0]
 801abc0:	e01e      	b.n	801ac00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801abc2:	4915      	ldr	r1, [pc, #84]	@ (801ac18 <etharp_tmr+0x14c>)
 801abc4:	687a      	ldr	r2, [r7, #4]
 801abc6:	4613      	mov	r3, r2
 801abc8:	005b      	lsls	r3, r3, #1
 801abca:	4413      	add	r3, r2
 801abcc:	00db      	lsls	r3, r3, #3
 801abce:	440b      	add	r3, r1
 801abd0:	3314      	adds	r3, #20
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d113      	bne.n	801ac00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801abd8:	490f      	ldr	r1, [pc, #60]	@ (801ac18 <etharp_tmr+0x14c>)
 801abda:	687a      	ldr	r2, [r7, #4]
 801abdc:	4613      	mov	r3, r2
 801abde:	005b      	lsls	r3, r3, #1
 801abe0:	4413      	add	r3, r2
 801abe2:	00db      	lsls	r3, r3, #3
 801abe4:	440b      	add	r3, r1
 801abe6:	3308      	adds	r3, #8
 801abe8:	6818      	ldr	r0, [r3, #0]
 801abea:	687a      	ldr	r2, [r7, #4]
 801abec:	4613      	mov	r3, r2
 801abee:	005b      	lsls	r3, r3, #1
 801abf0:	4413      	add	r3, r2
 801abf2:	00db      	lsls	r3, r3, #3
 801abf4:	4a08      	ldr	r2, [pc, #32]	@ (801ac18 <etharp_tmr+0x14c>)
 801abf6:	4413      	add	r3, r2
 801abf8:	3304      	adds	r3, #4
 801abfa:	4619      	mov	r1, r3
 801abfc:	f000 fe72 	bl	801b8e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	3301      	adds	r3, #1
 801ac04:	607b      	str	r3, [r7, #4]
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	2b09      	cmp	r3, #9
 801ac0a:	f77f af65 	ble.w	801aad8 <etharp_tmr+0xc>
      }
    }
  }
}
 801ac0e:	bf00      	nop
 801ac10:	bf00      	nop
 801ac12:	3708      	adds	r7, #8
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	200177f8 	.word	0x200177f8

0801ac1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b08a      	sub	sp, #40	@ 0x28
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	60f8      	str	r0, [r7, #12]
 801ac24:	460b      	mov	r3, r1
 801ac26:	607a      	str	r2, [r7, #4]
 801ac28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ac2a:	230a      	movs	r3, #10
 801ac2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ac2e:	230a      	movs	r3, #10
 801ac30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ac32:	230a      	movs	r3, #10
 801ac34:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801ac36:	2300      	movs	r3, #0
 801ac38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ac3a:	230a      	movs	r3, #10
 801ac3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	83bb      	strh	r3, [r7, #28]
 801ac42:	2300      	movs	r3, #0
 801ac44:	837b      	strh	r3, [r7, #26]
 801ac46:	2300      	movs	r3, #0
 801ac48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	843b      	strh	r3, [r7, #32]
 801ac4e:	e0ae      	b.n	801adae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ac50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac54:	49a6      	ldr	r1, [pc, #664]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ac56:	4613      	mov	r3, r2
 801ac58:	005b      	lsls	r3, r3, #1
 801ac5a:	4413      	add	r3, r2
 801ac5c:	00db      	lsls	r3, r3, #3
 801ac5e:	440b      	add	r3, r1
 801ac60:	3314      	adds	r3, #20
 801ac62:	781b      	ldrb	r3, [r3, #0]
 801ac64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ac66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac6a:	2b0a      	cmp	r3, #10
 801ac6c:	d105      	bne.n	801ac7a <etharp_find_entry+0x5e>
 801ac6e:	7dfb      	ldrb	r3, [r7, #23]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d102      	bne.n	801ac7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ac74:	8c3b      	ldrh	r3, [r7, #32]
 801ac76:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ac78:	e095      	b.n	801ada6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ac7a:	7dfb      	ldrb	r3, [r7, #23]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	f000 8092 	beq.w	801ada6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ac82:	7dfb      	ldrb	r3, [r7, #23]
 801ac84:	2b01      	cmp	r3, #1
 801ac86:	d009      	beq.n	801ac9c <etharp_find_entry+0x80>
 801ac88:	7dfb      	ldrb	r3, [r7, #23]
 801ac8a:	2b01      	cmp	r3, #1
 801ac8c:	d806      	bhi.n	801ac9c <etharp_find_entry+0x80>
 801ac8e:	4b99      	ldr	r3, [pc, #612]	@ (801aef4 <etharp_find_entry+0x2d8>)
 801ac90:	f240 1223 	movw	r2, #291	@ 0x123
 801ac94:	4998      	ldr	r1, [pc, #608]	@ (801aef8 <etharp_find_entry+0x2dc>)
 801ac96:	4899      	ldr	r0, [pc, #612]	@ (801aefc <etharp_find_entry+0x2e0>)
 801ac98:	f003 fc4e 	bl	801e538 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d020      	beq.n	801ace4 <etharp_find_entry+0xc8>
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	6819      	ldr	r1, [r3, #0]
 801aca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acaa:	4891      	ldr	r0, [pc, #580]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801acac:	4613      	mov	r3, r2
 801acae:	005b      	lsls	r3, r3, #1
 801acb0:	4413      	add	r3, r2
 801acb2:	00db      	lsls	r3, r3, #3
 801acb4:	4403      	add	r3, r0
 801acb6:	3304      	adds	r3, #4
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	4299      	cmp	r1, r3
 801acbc:	d112      	bne.n	801ace4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d00c      	beq.n	801acde <etharp_find_entry+0xc2>
 801acc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acc8:	4989      	ldr	r1, [pc, #548]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801acca:	4613      	mov	r3, r2
 801accc:	005b      	lsls	r3, r3, #1
 801acce:	4413      	add	r3, r2
 801acd0:	00db      	lsls	r3, r3, #3
 801acd2:	440b      	add	r3, r1
 801acd4:	3308      	adds	r3, #8
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	687a      	ldr	r2, [r7, #4]
 801acda:	429a      	cmp	r2, r3
 801acdc:	d102      	bne.n	801ace4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801acde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ace2:	e100      	b.n	801aee6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ace4:	7dfb      	ldrb	r3, [r7, #23]
 801ace6:	2b01      	cmp	r3, #1
 801ace8:	d140      	bne.n	801ad6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801acea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acee:	4980      	ldr	r1, [pc, #512]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801acf0:	4613      	mov	r3, r2
 801acf2:	005b      	lsls	r3, r3, #1
 801acf4:	4413      	add	r3, r2
 801acf6:	00db      	lsls	r3, r3, #3
 801acf8:	440b      	add	r3, r1
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d01a      	beq.n	801ad36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ad00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad04:	497a      	ldr	r1, [pc, #488]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad06:	4613      	mov	r3, r2
 801ad08:	005b      	lsls	r3, r3, #1
 801ad0a:	4413      	add	r3, r2
 801ad0c:	00db      	lsls	r3, r3, #3
 801ad0e:	440b      	add	r3, r1
 801ad10:	3312      	adds	r3, #18
 801ad12:	881b      	ldrh	r3, [r3, #0]
 801ad14:	8bba      	ldrh	r2, [r7, #28]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d845      	bhi.n	801ada6 <etharp_find_entry+0x18a>
            old_queue = i;
 801ad1a:	8c3b      	ldrh	r3, [r7, #32]
 801ad1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ad1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad22:	4973      	ldr	r1, [pc, #460]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad24:	4613      	mov	r3, r2
 801ad26:	005b      	lsls	r3, r3, #1
 801ad28:	4413      	add	r3, r2
 801ad2a:	00db      	lsls	r3, r3, #3
 801ad2c:	440b      	add	r3, r1
 801ad2e:	3312      	adds	r3, #18
 801ad30:	881b      	ldrh	r3, [r3, #0]
 801ad32:	83bb      	strh	r3, [r7, #28]
 801ad34:	e037      	b.n	801ada6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ad36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad3a:	496d      	ldr	r1, [pc, #436]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad3c:	4613      	mov	r3, r2
 801ad3e:	005b      	lsls	r3, r3, #1
 801ad40:	4413      	add	r3, r2
 801ad42:	00db      	lsls	r3, r3, #3
 801ad44:	440b      	add	r3, r1
 801ad46:	3312      	adds	r3, #18
 801ad48:	881b      	ldrh	r3, [r3, #0]
 801ad4a:	8b7a      	ldrh	r2, [r7, #26]
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d82a      	bhi.n	801ada6 <etharp_find_entry+0x18a>
            old_pending = i;
 801ad50:	8c3b      	ldrh	r3, [r7, #32]
 801ad52:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ad54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad58:	4965      	ldr	r1, [pc, #404]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad5a:	4613      	mov	r3, r2
 801ad5c:	005b      	lsls	r3, r3, #1
 801ad5e:	4413      	add	r3, r2
 801ad60:	00db      	lsls	r3, r3, #3
 801ad62:	440b      	add	r3, r1
 801ad64:	3312      	adds	r3, #18
 801ad66:	881b      	ldrh	r3, [r3, #0]
 801ad68:	837b      	strh	r3, [r7, #26]
 801ad6a:	e01c      	b.n	801ada6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ad6c:	7dfb      	ldrb	r3, [r7, #23]
 801ad6e:	2b01      	cmp	r3, #1
 801ad70:	d919      	bls.n	801ada6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ad72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad76:	495e      	ldr	r1, [pc, #376]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad78:	4613      	mov	r3, r2
 801ad7a:	005b      	lsls	r3, r3, #1
 801ad7c:	4413      	add	r3, r2
 801ad7e:	00db      	lsls	r3, r3, #3
 801ad80:	440b      	add	r3, r1
 801ad82:	3312      	adds	r3, #18
 801ad84:	881b      	ldrh	r3, [r3, #0]
 801ad86:	8b3a      	ldrh	r2, [r7, #24]
 801ad88:	429a      	cmp	r2, r3
 801ad8a:	d80c      	bhi.n	801ada6 <etharp_find_entry+0x18a>
            old_stable = i;
 801ad8c:	8c3b      	ldrh	r3, [r7, #32]
 801ad8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801ad90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad94:	4956      	ldr	r1, [pc, #344]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ad96:	4613      	mov	r3, r2
 801ad98:	005b      	lsls	r3, r3, #1
 801ad9a:	4413      	add	r3, r2
 801ad9c:	00db      	lsls	r3, r3, #3
 801ad9e:	440b      	add	r3, r1
 801ada0:	3312      	adds	r3, #18
 801ada2:	881b      	ldrh	r3, [r3, #0]
 801ada4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ada6:	8c3b      	ldrh	r3, [r7, #32]
 801ada8:	3301      	adds	r3, #1
 801adaa:	b29b      	uxth	r3, r3
 801adac:	843b      	strh	r3, [r7, #32]
 801adae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801adb2:	2b09      	cmp	r3, #9
 801adb4:	f77f af4c 	ble.w	801ac50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801adb8:	7afb      	ldrb	r3, [r7, #11]
 801adba:	f003 0302 	and.w	r3, r3, #2
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d108      	bne.n	801add4 <etharp_find_entry+0x1b8>
 801adc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801adc6:	2b0a      	cmp	r3, #10
 801adc8:	d107      	bne.n	801adda <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801adca:	7afb      	ldrb	r3, [r7, #11]
 801adcc:	f003 0301 	and.w	r3, r3, #1
 801add0:	2b00      	cmp	r3, #0
 801add2:	d102      	bne.n	801adda <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801add4:	f04f 33ff 	mov.w	r3, #4294967295
 801add8:	e085      	b.n	801aee6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801adda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801adde:	2b09      	cmp	r3, #9
 801ade0:	dc02      	bgt.n	801ade8 <etharp_find_entry+0x1cc>
    i = empty;
 801ade2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ade4:	843b      	strh	r3, [r7, #32]
 801ade6:	e039      	b.n	801ae5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ade8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801adec:	2b09      	cmp	r3, #9
 801adee:	dc14      	bgt.n	801ae1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801adf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801adf2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801adf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adf8:	493d      	ldr	r1, [pc, #244]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801adfa:	4613      	mov	r3, r2
 801adfc:	005b      	lsls	r3, r3, #1
 801adfe:	4413      	add	r3, r2
 801ae00:	00db      	lsls	r3, r3, #3
 801ae02:	440b      	add	r3, r1
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d018      	beq.n	801ae3c <etharp_find_entry+0x220>
 801ae0a:	4b3a      	ldr	r3, [pc, #232]	@ (801aef4 <etharp_find_entry+0x2d8>)
 801ae0c:	f240 126d 	movw	r2, #365	@ 0x16d
 801ae10:	493b      	ldr	r1, [pc, #236]	@ (801af00 <etharp_find_entry+0x2e4>)
 801ae12:	483a      	ldr	r0, [pc, #232]	@ (801aefc <etharp_find_entry+0x2e0>)
 801ae14:	f003 fb90 	bl	801e538 <iprintf>
 801ae18:	e010      	b.n	801ae3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ae1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ae1e:	2b09      	cmp	r3, #9
 801ae20:	dc02      	bgt.n	801ae28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ae22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ae24:	843b      	strh	r3, [r7, #32]
 801ae26:	e009      	b.n	801ae3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ae28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ae2c:	2b09      	cmp	r3, #9
 801ae2e:	dc02      	bgt.n	801ae36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ae30:	8bfb      	ldrh	r3, [r7, #30]
 801ae32:	843b      	strh	r3, [r7, #32]
 801ae34:	e002      	b.n	801ae3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ae36:	f04f 33ff 	mov.w	r3, #4294967295
 801ae3a:	e054      	b.n	801aee6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae40:	2b09      	cmp	r3, #9
 801ae42:	dd06      	ble.n	801ae52 <etharp_find_entry+0x236>
 801ae44:	4b2b      	ldr	r3, [pc, #172]	@ (801aef4 <etharp_find_entry+0x2d8>)
 801ae46:	f240 127f 	movw	r2, #383	@ 0x17f
 801ae4a:	492e      	ldr	r1, [pc, #184]	@ (801af04 <etharp_find_entry+0x2e8>)
 801ae4c:	482b      	ldr	r0, [pc, #172]	@ (801aefc <etharp_find_entry+0x2e0>)
 801ae4e:	f003 fb73 	bl	801e538 <iprintf>
    etharp_free_entry(i);
 801ae52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae56:	4618      	mov	r0, r3
 801ae58:	f7ff fe06 	bl	801aa68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae60:	2b09      	cmp	r3, #9
 801ae62:	dd06      	ble.n	801ae72 <etharp_find_entry+0x256>
 801ae64:	4b23      	ldr	r3, [pc, #140]	@ (801aef4 <etharp_find_entry+0x2d8>)
 801ae66:	f240 1283 	movw	r2, #387	@ 0x183
 801ae6a:	4926      	ldr	r1, [pc, #152]	@ (801af04 <etharp_find_entry+0x2e8>)
 801ae6c:	4823      	ldr	r0, [pc, #140]	@ (801aefc <etharp_find_entry+0x2e0>)
 801ae6e:	f003 fb63 	bl	801e538 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ae72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae76:	491e      	ldr	r1, [pc, #120]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801ae78:	4613      	mov	r3, r2
 801ae7a:	005b      	lsls	r3, r3, #1
 801ae7c:	4413      	add	r3, r2
 801ae7e:	00db      	lsls	r3, r3, #3
 801ae80:	440b      	add	r3, r1
 801ae82:	3314      	adds	r3, #20
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d006      	beq.n	801ae98 <etharp_find_entry+0x27c>
 801ae8a:	4b1a      	ldr	r3, [pc, #104]	@ (801aef4 <etharp_find_entry+0x2d8>)
 801ae8c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801ae90:	491d      	ldr	r1, [pc, #116]	@ (801af08 <etharp_find_entry+0x2ec>)
 801ae92:	481a      	ldr	r0, [pc, #104]	@ (801aefc <etharp_find_entry+0x2e0>)
 801ae94:	f003 fb50 	bl	801e538 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d00b      	beq.n	801aeb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ae9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	6819      	ldr	r1, [r3, #0]
 801aea6:	4812      	ldr	r0, [pc, #72]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801aea8:	4613      	mov	r3, r2
 801aeaa:	005b      	lsls	r3, r3, #1
 801aeac:	4413      	add	r3, r2
 801aeae:	00db      	lsls	r3, r3, #3
 801aeb0:	4403      	add	r3, r0
 801aeb2:	3304      	adds	r3, #4
 801aeb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801aeb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aeba:	490d      	ldr	r1, [pc, #52]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801aebc:	4613      	mov	r3, r2
 801aebe:	005b      	lsls	r3, r3, #1
 801aec0:	4413      	add	r3, r2
 801aec2:	00db      	lsls	r3, r3, #3
 801aec4:	440b      	add	r3, r1
 801aec6:	3312      	adds	r3, #18
 801aec8:	2200      	movs	r2, #0
 801aeca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aecc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aed0:	4907      	ldr	r1, [pc, #28]	@ (801aef0 <etharp_find_entry+0x2d4>)
 801aed2:	4613      	mov	r3, r2
 801aed4:	005b      	lsls	r3, r3, #1
 801aed6:	4413      	add	r3, r2
 801aed8:	00db      	lsls	r3, r3, #3
 801aeda:	440b      	add	r3, r1
 801aedc:	3308      	adds	r3, #8
 801aede:	687a      	ldr	r2, [r7, #4]
 801aee0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aee2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aee6:	4618      	mov	r0, r3
 801aee8:	3728      	adds	r7, #40	@ 0x28
 801aeea:	46bd      	mov	sp, r7
 801aeec:	bd80      	pop	{r7, pc}
 801aeee:	bf00      	nop
 801aef0:	200177f8 	.word	0x200177f8
 801aef4:	080247f4 	.word	0x080247f4
 801aef8:	0802482c 	.word	0x0802482c
 801aefc:	0802486c 	.word	0x0802486c
 801af00:	08024894 	.word	0x08024894
 801af04:	080248ac 	.word	0x080248ac
 801af08:	080248c0 	.word	0x080248c0

0801af0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b088      	sub	sp, #32
 801af10:	af02      	add	r7, sp, #8
 801af12:	60f8      	str	r0, [r7, #12]
 801af14:	60b9      	str	r1, [r7, #8]
 801af16:	607a      	str	r2, [r7, #4]
 801af18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801af20:	2b06      	cmp	r3, #6
 801af22:	d006      	beq.n	801af32 <etharp_update_arp_entry+0x26>
 801af24:	4b48      	ldr	r3, [pc, #288]	@ (801b048 <etharp_update_arp_entry+0x13c>)
 801af26:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801af2a:	4948      	ldr	r1, [pc, #288]	@ (801b04c <etharp_update_arp_entry+0x140>)
 801af2c:	4848      	ldr	r0, [pc, #288]	@ (801b050 <etharp_update_arp_entry+0x144>)
 801af2e:	f003 fb03 	bl	801e538 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d012      	beq.n	801af5e <etharp_update_arp_entry+0x52>
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d00e      	beq.n	801af5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	68f9      	ldr	r1, [r7, #12]
 801af46:	4618      	mov	r0, r3
 801af48:	f001 f920 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801af4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d105      	bne.n	801af5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af5a:	2be0      	cmp	r3, #224	@ 0xe0
 801af5c:	d102      	bne.n	801af64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801af5e:	f06f 030f 	mvn.w	r3, #15
 801af62:	e06c      	b.n	801b03e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801af64:	78fb      	ldrb	r3, [r7, #3]
 801af66:	68fa      	ldr	r2, [r7, #12]
 801af68:	4619      	mov	r1, r3
 801af6a:	68b8      	ldr	r0, [r7, #8]
 801af6c:	f7ff fe56 	bl	801ac1c <etharp_find_entry>
 801af70:	4603      	mov	r3, r0
 801af72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801af74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	da02      	bge.n	801af82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801af7c:	8afb      	ldrh	r3, [r7, #22]
 801af7e:	b25b      	sxtb	r3, r3
 801af80:	e05d      	b.n	801b03e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801af82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af86:	4933      	ldr	r1, [pc, #204]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801af88:	4613      	mov	r3, r2
 801af8a:	005b      	lsls	r3, r3, #1
 801af8c:	4413      	add	r3, r2
 801af8e:	00db      	lsls	r3, r3, #3
 801af90:	440b      	add	r3, r1
 801af92:	3314      	adds	r3, #20
 801af94:	2202      	movs	r2, #2
 801af96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801af98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af9c:	492d      	ldr	r1, [pc, #180]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801af9e:	4613      	mov	r3, r2
 801afa0:	005b      	lsls	r3, r3, #1
 801afa2:	4413      	add	r3, r2
 801afa4:	00db      	lsls	r3, r3, #3
 801afa6:	440b      	add	r3, r1
 801afa8:	3308      	adds	r3, #8
 801afaa:	68fa      	ldr	r2, [r7, #12]
 801afac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801afae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afb2:	4613      	mov	r3, r2
 801afb4:	005b      	lsls	r3, r3, #1
 801afb6:	4413      	add	r3, r2
 801afb8:	00db      	lsls	r3, r3, #3
 801afba:	3308      	adds	r3, #8
 801afbc:	4a25      	ldr	r2, [pc, #148]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801afbe:	4413      	add	r3, r2
 801afc0:	3304      	adds	r3, #4
 801afc2:	2206      	movs	r2, #6
 801afc4:	6879      	ldr	r1, [r7, #4]
 801afc6:	4618      	mov	r0, r3
 801afc8:	f003 fd4d 	bl	801ea66 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801afcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afd0:	4920      	ldr	r1, [pc, #128]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801afd2:	4613      	mov	r3, r2
 801afd4:	005b      	lsls	r3, r3, #1
 801afd6:	4413      	add	r3, r2
 801afd8:	00db      	lsls	r3, r3, #3
 801afda:	440b      	add	r3, r1
 801afdc:	3312      	adds	r3, #18
 801afde:	2200      	movs	r2, #0
 801afe0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801afe2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afe6:	491b      	ldr	r1, [pc, #108]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801afe8:	4613      	mov	r3, r2
 801afea:	005b      	lsls	r3, r3, #1
 801afec:	4413      	add	r3, r2
 801afee:	00db      	lsls	r3, r3, #3
 801aff0:	440b      	add	r3, r1
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d021      	beq.n	801b03c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801aff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801affc:	4915      	ldr	r1, [pc, #84]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801affe:	4613      	mov	r3, r2
 801b000:	005b      	lsls	r3, r3, #1
 801b002:	4413      	add	r3, r2
 801b004:	00db      	lsls	r3, r3, #3
 801b006:	440b      	add	r3, r1
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b00c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b010:	4910      	ldr	r1, [pc, #64]	@ (801b054 <etharp_update_arp_entry+0x148>)
 801b012:	4613      	mov	r3, r2
 801b014:	005b      	lsls	r3, r3, #1
 801b016:	4413      	add	r3, r2
 801b018:	00db      	lsls	r3, r3, #3
 801b01a:	440b      	add	r3, r1
 801b01c:	2200      	movs	r2, #0
 801b01e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b026:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b02a:	9300      	str	r3, [sp, #0]
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6939      	ldr	r1, [r7, #16]
 801b030:	68f8      	ldr	r0, [r7, #12]
 801b032:	f001 ffb9 	bl	801cfa8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b036:	6938      	ldr	r0, [r7, #16]
 801b038:	f7f7 fa4c 	bl	80124d4 <pbuf_free>
  }
  return ERR_OK;
 801b03c:	2300      	movs	r3, #0
}
 801b03e:	4618      	mov	r0, r3
 801b040:	3718      	adds	r7, #24
 801b042:	46bd      	mov	sp, r7
 801b044:	bd80      	pop	{r7, pc}
 801b046:	bf00      	nop
 801b048:	080247f4 	.word	0x080247f4
 801b04c:	080248ec 	.word	0x080248ec
 801b050:	0802486c 	.word	0x0802486c
 801b054:	200177f8 	.word	0x200177f8

0801b058 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b084      	sub	sp, #16
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b060:	2300      	movs	r3, #0
 801b062:	60fb      	str	r3, [r7, #12]
 801b064:	e01e      	b.n	801b0a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b066:	4913      	ldr	r1, [pc, #76]	@ (801b0b4 <etharp_cleanup_netif+0x5c>)
 801b068:	68fa      	ldr	r2, [r7, #12]
 801b06a:	4613      	mov	r3, r2
 801b06c:	005b      	lsls	r3, r3, #1
 801b06e:	4413      	add	r3, r2
 801b070:	00db      	lsls	r3, r3, #3
 801b072:	440b      	add	r3, r1
 801b074:	3314      	adds	r3, #20
 801b076:	781b      	ldrb	r3, [r3, #0]
 801b078:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b07a:	7afb      	ldrb	r3, [r7, #11]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d00e      	beq.n	801b09e <etharp_cleanup_netif+0x46>
 801b080:	490c      	ldr	r1, [pc, #48]	@ (801b0b4 <etharp_cleanup_netif+0x5c>)
 801b082:	68fa      	ldr	r2, [r7, #12]
 801b084:	4613      	mov	r3, r2
 801b086:	005b      	lsls	r3, r3, #1
 801b088:	4413      	add	r3, r2
 801b08a:	00db      	lsls	r3, r3, #3
 801b08c:	440b      	add	r3, r1
 801b08e:	3308      	adds	r3, #8
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	687a      	ldr	r2, [r7, #4]
 801b094:	429a      	cmp	r2, r3
 801b096:	d102      	bne.n	801b09e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b098:	68f8      	ldr	r0, [r7, #12]
 801b09a:	f7ff fce5 	bl	801aa68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	3301      	adds	r3, #1
 801b0a2:	60fb      	str	r3, [r7, #12]
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	2b09      	cmp	r3, #9
 801b0a8:	dddd      	ble.n	801b066 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b0aa:	bf00      	nop
 801b0ac:	bf00      	nop
 801b0ae:	3710      	adds	r7, #16
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}
 801b0b4:	200177f8 	.word	0x200177f8

0801b0b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b0b8:	b5b0      	push	{r4, r5, r7, lr}
 801b0ba:	b08a      	sub	sp, #40	@ 0x28
 801b0bc:	af04      	add	r7, sp, #16
 801b0be:	6078      	str	r0, [r7, #4]
 801b0c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d107      	bne.n	801b0d8 <etharp_input+0x20>
 801b0c8:	4b3f      	ldr	r3, [pc, #252]	@ (801b1c8 <etharp_input+0x110>)
 801b0ca:	f240 228a 	movw	r2, #650	@ 0x28a
 801b0ce:	493f      	ldr	r1, [pc, #252]	@ (801b1cc <etharp_input+0x114>)
 801b0d0:	483f      	ldr	r0, [pc, #252]	@ (801b1d0 <etharp_input+0x118>)
 801b0d2:	f003 fa31 	bl	801e538 <iprintf>
 801b0d6:	e074      	b.n	801b1c2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	685b      	ldr	r3, [r3, #4]
 801b0dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0de:	693b      	ldr	r3, [r7, #16]
 801b0e0:	881b      	ldrh	r3, [r3, #0]
 801b0e2:	b29b      	uxth	r3, r3
 801b0e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0e8:	d10c      	bne.n	801b104 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0ea:	693b      	ldr	r3, [r7, #16]
 801b0ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0ee:	2b06      	cmp	r3, #6
 801b0f0:	d108      	bne.n	801b104 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b0f2:	693b      	ldr	r3, [r7, #16]
 801b0f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0f6:	2b04      	cmp	r3, #4
 801b0f8:	d104      	bne.n	801b104 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b0fa:	693b      	ldr	r3, [r7, #16]
 801b0fc:	885b      	ldrh	r3, [r3, #2]
 801b0fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b100:	2b08      	cmp	r3, #8
 801b102:	d003      	beq.n	801b10c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b104:	6878      	ldr	r0, [r7, #4]
 801b106:	f7f7 f9e5 	bl	80124d4 <pbuf_free>
    return;
 801b10a:	e05a      	b.n	801b1c2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b10c:	693b      	ldr	r3, [r7, #16]
 801b10e:	330e      	adds	r3, #14
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b114:	693b      	ldr	r3, [r7, #16]
 801b116:	3318      	adds	r3, #24
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b11c:	683b      	ldr	r3, [r7, #0]
 801b11e:	3304      	adds	r3, #4
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d102      	bne.n	801b12c <etharp_input+0x74>
    for_us = 0;
 801b126:	2300      	movs	r3, #0
 801b128:	75fb      	strb	r3, [r7, #23]
 801b12a:	e009      	b.n	801b140 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b12c:	68ba      	ldr	r2, [r7, #8]
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	3304      	adds	r3, #4
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	429a      	cmp	r2, r3
 801b136:	bf0c      	ite	eq
 801b138:	2301      	moveq	r3, #1
 801b13a:	2300      	movne	r3, #0
 801b13c:	b2db      	uxtb	r3, r3
 801b13e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b140:	693b      	ldr	r3, [r7, #16]
 801b142:	f103 0208 	add.w	r2, r3, #8
 801b146:	7dfb      	ldrb	r3, [r7, #23]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d001      	beq.n	801b150 <etharp_input+0x98>
 801b14c:	2301      	movs	r3, #1
 801b14e:	e000      	b.n	801b152 <etharp_input+0x9a>
 801b150:	2302      	movs	r3, #2
 801b152:	f107 010c 	add.w	r1, r7, #12
 801b156:	6838      	ldr	r0, [r7, #0]
 801b158:	f7ff fed8 	bl	801af0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b15c:	693b      	ldr	r3, [r7, #16]
 801b15e:	88db      	ldrh	r3, [r3, #6]
 801b160:	b29b      	uxth	r3, r3
 801b162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b166:	d003      	beq.n	801b170 <etharp_input+0xb8>
 801b168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b16c:	d01e      	beq.n	801b1ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b16e:	e025      	b.n	801b1bc <etharp_input+0x104>
      if (for_us) {
 801b170:	7dfb      	ldrb	r3, [r7, #23]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d021      	beq.n	801b1ba <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b17c:	693b      	ldr	r3, [r7, #16]
 801b17e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b182:	683b      	ldr	r3, [r7, #0]
 801b184:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b18c:	693a      	ldr	r2, [r7, #16]
 801b18e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b190:	2102      	movs	r1, #2
 801b192:	9103      	str	r1, [sp, #12]
 801b194:	f107 010c 	add.w	r1, r7, #12
 801b198:	9102      	str	r1, [sp, #8]
 801b19a:	9201      	str	r2, [sp, #4]
 801b19c:	9300      	str	r3, [sp, #0]
 801b19e:	462b      	mov	r3, r5
 801b1a0:	4622      	mov	r2, r4
 801b1a2:	4601      	mov	r1, r0
 801b1a4:	6838      	ldr	r0, [r7, #0]
 801b1a6:	f000 faef 	bl	801b788 <etharp_raw>
      break;
 801b1aa:	e006      	b.n	801b1ba <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b1ac:	f107 030c 	add.w	r3, r7, #12
 801b1b0:	4619      	mov	r1, r3
 801b1b2:	6838      	ldr	r0, [r7, #0]
 801b1b4:	f7fe f9d2 	bl	801955c <dhcp_arp_reply>
      break;
 801b1b8:	e000      	b.n	801b1bc <etharp_input+0x104>
      break;
 801b1ba:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f7f7 f989 	bl	80124d4 <pbuf_free>
}
 801b1c2:	3718      	adds	r7, #24
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bdb0      	pop	{r4, r5, r7, pc}
 801b1c8:	080247f4 	.word	0x080247f4
 801b1cc:	08024944 	.word	0x08024944
 801b1d0:	0802486c 	.word	0x0802486c

0801b1d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b086      	sub	sp, #24
 801b1d8:	af02      	add	r7, sp, #8
 801b1da:	60f8      	str	r0, [r7, #12]
 801b1dc:	60b9      	str	r1, [r7, #8]
 801b1de:	4613      	mov	r3, r2
 801b1e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b1e2:	79fa      	ldrb	r2, [r7, #7]
 801b1e4:	4944      	ldr	r1, [pc, #272]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b1e6:	4613      	mov	r3, r2
 801b1e8:	005b      	lsls	r3, r3, #1
 801b1ea:	4413      	add	r3, r2
 801b1ec:	00db      	lsls	r3, r3, #3
 801b1ee:	440b      	add	r3, r1
 801b1f0:	3314      	adds	r3, #20
 801b1f2:	781b      	ldrb	r3, [r3, #0]
 801b1f4:	2b01      	cmp	r3, #1
 801b1f6:	d806      	bhi.n	801b206 <etharp_output_to_arp_index+0x32>
 801b1f8:	4b40      	ldr	r3, [pc, #256]	@ (801b2fc <etharp_output_to_arp_index+0x128>)
 801b1fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b1fe:	4940      	ldr	r1, [pc, #256]	@ (801b300 <etharp_output_to_arp_index+0x12c>)
 801b200:	4840      	ldr	r0, [pc, #256]	@ (801b304 <etharp_output_to_arp_index+0x130>)
 801b202:	f003 f999 	bl	801e538 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b206:	79fa      	ldrb	r2, [r7, #7]
 801b208:	493b      	ldr	r1, [pc, #236]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b20a:	4613      	mov	r3, r2
 801b20c:	005b      	lsls	r3, r3, #1
 801b20e:	4413      	add	r3, r2
 801b210:	00db      	lsls	r3, r3, #3
 801b212:	440b      	add	r3, r1
 801b214:	3314      	adds	r3, #20
 801b216:	781b      	ldrb	r3, [r3, #0]
 801b218:	2b02      	cmp	r3, #2
 801b21a:	d153      	bne.n	801b2c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b21c:	79fa      	ldrb	r2, [r7, #7]
 801b21e:	4936      	ldr	r1, [pc, #216]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b220:	4613      	mov	r3, r2
 801b222:	005b      	lsls	r3, r3, #1
 801b224:	4413      	add	r3, r2
 801b226:	00db      	lsls	r3, r3, #3
 801b228:	440b      	add	r3, r1
 801b22a:	3312      	adds	r3, #18
 801b22c:	881b      	ldrh	r3, [r3, #0]
 801b22e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b232:	d919      	bls.n	801b268 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b234:	79fa      	ldrb	r2, [r7, #7]
 801b236:	4613      	mov	r3, r2
 801b238:	005b      	lsls	r3, r3, #1
 801b23a:	4413      	add	r3, r2
 801b23c:	00db      	lsls	r3, r3, #3
 801b23e:	4a2e      	ldr	r2, [pc, #184]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b240:	4413      	add	r3, r2
 801b242:	3304      	adds	r3, #4
 801b244:	4619      	mov	r1, r3
 801b246:	68f8      	ldr	r0, [r7, #12]
 801b248:	f000 fb4c 	bl	801b8e4 <etharp_request>
 801b24c:	4603      	mov	r3, r0
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d138      	bne.n	801b2c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b252:	79fa      	ldrb	r2, [r7, #7]
 801b254:	4928      	ldr	r1, [pc, #160]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b256:	4613      	mov	r3, r2
 801b258:	005b      	lsls	r3, r3, #1
 801b25a:	4413      	add	r3, r2
 801b25c:	00db      	lsls	r3, r3, #3
 801b25e:	440b      	add	r3, r1
 801b260:	3314      	adds	r3, #20
 801b262:	2203      	movs	r2, #3
 801b264:	701a      	strb	r2, [r3, #0]
 801b266:	e02d      	b.n	801b2c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b268:	79fa      	ldrb	r2, [r7, #7]
 801b26a:	4923      	ldr	r1, [pc, #140]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b26c:	4613      	mov	r3, r2
 801b26e:	005b      	lsls	r3, r3, #1
 801b270:	4413      	add	r3, r2
 801b272:	00db      	lsls	r3, r3, #3
 801b274:	440b      	add	r3, r1
 801b276:	3312      	adds	r3, #18
 801b278:	881b      	ldrh	r3, [r3, #0]
 801b27a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b27e:	d321      	bcc.n	801b2c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b280:	79fa      	ldrb	r2, [r7, #7]
 801b282:	4613      	mov	r3, r2
 801b284:	005b      	lsls	r3, r3, #1
 801b286:	4413      	add	r3, r2
 801b288:	00db      	lsls	r3, r3, #3
 801b28a:	4a1b      	ldr	r2, [pc, #108]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b28c:	4413      	add	r3, r2
 801b28e:	1d19      	adds	r1, r3, #4
 801b290:	79fa      	ldrb	r2, [r7, #7]
 801b292:	4613      	mov	r3, r2
 801b294:	005b      	lsls	r3, r3, #1
 801b296:	4413      	add	r3, r2
 801b298:	00db      	lsls	r3, r3, #3
 801b29a:	3308      	adds	r3, #8
 801b29c:	4a16      	ldr	r2, [pc, #88]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b29e:	4413      	add	r3, r2
 801b2a0:	3304      	adds	r3, #4
 801b2a2:	461a      	mov	r2, r3
 801b2a4:	68f8      	ldr	r0, [r7, #12]
 801b2a6:	f000 fafb 	bl	801b8a0 <etharp_request_dst>
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d109      	bne.n	801b2c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b2b0:	79fa      	ldrb	r2, [r7, #7]
 801b2b2:	4911      	ldr	r1, [pc, #68]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b2b4:	4613      	mov	r3, r2
 801b2b6:	005b      	lsls	r3, r3, #1
 801b2b8:	4413      	add	r3, r2
 801b2ba:	00db      	lsls	r3, r3, #3
 801b2bc:	440b      	add	r3, r1
 801b2be:	3314      	adds	r3, #20
 801b2c0:	2203      	movs	r2, #3
 801b2c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801b2ca:	79fa      	ldrb	r2, [r7, #7]
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	005b      	lsls	r3, r3, #1
 801b2d0:	4413      	add	r3, r2
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	3308      	adds	r3, #8
 801b2d6:	4a08      	ldr	r2, [pc, #32]	@ (801b2f8 <etharp_output_to_arp_index+0x124>)
 801b2d8:	4413      	add	r3, r2
 801b2da:	3304      	adds	r3, #4
 801b2dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b2e0:	9200      	str	r2, [sp, #0]
 801b2e2:	460a      	mov	r2, r1
 801b2e4:	68b9      	ldr	r1, [r7, #8]
 801b2e6:	68f8      	ldr	r0, [r7, #12]
 801b2e8:	f001 fe5e 	bl	801cfa8 <ethernet_output>
 801b2ec:	4603      	mov	r3, r0
}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}
 801b2f6:	bf00      	nop
 801b2f8:	200177f8 	.word	0x200177f8
 801b2fc:	080247f4 	.word	0x080247f4
 801b300:	08024964 	.word	0x08024964
 801b304:	0802486c 	.word	0x0802486c

0801b308 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b08a      	sub	sp, #40	@ 0x28
 801b30c:	af02      	add	r7, sp, #8
 801b30e:	60f8      	str	r0, [r7, #12]
 801b310:	60b9      	str	r1, [r7, #8]
 801b312:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d106      	bne.n	801b32c <etharp_output+0x24>
 801b31e:	4b73      	ldr	r3, [pc, #460]	@ (801b4ec <etharp_output+0x1e4>)
 801b320:	f240 321e 	movw	r2, #798	@ 0x31e
 801b324:	4972      	ldr	r1, [pc, #456]	@ (801b4f0 <etharp_output+0x1e8>)
 801b326:	4873      	ldr	r0, [pc, #460]	@ (801b4f4 <etharp_output+0x1ec>)
 801b328:	f003 f906 	bl	801e538 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d106      	bne.n	801b340 <etharp_output+0x38>
 801b332:	4b6e      	ldr	r3, [pc, #440]	@ (801b4ec <etharp_output+0x1e4>)
 801b334:	f240 321f 	movw	r2, #799	@ 0x31f
 801b338:	496f      	ldr	r1, [pc, #444]	@ (801b4f8 <etharp_output+0x1f0>)
 801b33a:	486e      	ldr	r0, [pc, #440]	@ (801b4f4 <etharp_output+0x1ec>)
 801b33c:	f003 f8fc 	bl	801e538 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d106      	bne.n	801b354 <etharp_output+0x4c>
 801b346:	4b69      	ldr	r3, [pc, #420]	@ (801b4ec <etharp_output+0x1e4>)
 801b348:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b34c:	496b      	ldr	r1, [pc, #428]	@ (801b4fc <etharp_output+0x1f4>)
 801b34e:	4869      	ldr	r0, [pc, #420]	@ (801b4f4 <etharp_output+0x1ec>)
 801b350:	f003 f8f2 	bl	801e538 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	68f9      	ldr	r1, [r7, #12]
 801b35a:	4618      	mov	r0, r3
 801b35c:	f000 ff16 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801b360:	4603      	mov	r3, r0
 801b362:	2b00      	cmp	r3, #0
 801b364:	d002      	beq.n	801b36c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b366:	4b66      	ldr	r3, [pc, #408]	@ (801b500 <etharp_output+0x1f8>)
 801b368:	61fb      	str	r3, [r7, #28]
 801b36a:	e0af      	b.n	801b4cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b374:	2be0      	cmp	r3, #224	@ 0xe0
 801b376:	d118      	bne.n	801b3aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b378:	2301      	movs	r3, #1
 801b37a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b37c:	2300      	movs	r3, #0
 801b37e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b380:	235e      	movs	r3, #94	@ 0x5e
 801b382:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	3301      	adds	r3, #1
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b38e:	b2db      	uxtb	r3, r3
 801b390:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	3302      	adds	r3, #2
 801b396:	781b      	ldrb	r3, [r3, #0]
 801b398:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	3303      	adds	r3, #3
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b3a2:	f107 0310 	add.w	r3, r7, #16
 801b3a6:	61fb      	str	r3, [r7, #28]
 801b3a8:	e090      	b.n	801b4cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	3304      	adds	r3, #4
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	405a      	eors	r2, r3
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	3308      	adds	r3, #8
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	4013      	ands	r3, r2
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d012      	beq.n	801b3e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b3c8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b3cc:	4293      	cmp	r3, r2
 801b3ce:	d00b      	beq.n	801b3e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	330c      	adds	r3, #12
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d003      	beq.n	801b3e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	330c      	adds	r3, #12
 801b3de:	61bb      	str	r3, [r7, #24]
 801b3e0:	e002      	b.n	801b3e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b3e2:	f06f 0303 	mvn.w	r3, #3
 801b3e6:	e07d      	b.n	801b4e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b3e8:	4b46      	ldr	r3, [pc, #280]	@ (801b504 <etharp_output+0x1fc>)
 801b3ea:	781b      	ldrb	r3, [r3, #0]
 801b3ec:	4619      	mov	r1, r3
 801b3ee:	4a46      	ldr	r2, [pc, #280]	@ (801b508 <etharp_output+0x200>)
 801b3f0:	460b      	mov	r3, r1
 801b3f2:	005b      	lsls	r3, r3, #1
 801b3f4:	440b      	add	r3, r1
 801b3f6:	00db      	lsls	r3, r3, #3
 801b3f8:	4413      	add	r3, r2
 801b3fa:	3314      	adds	r3, #20
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	2b01      	cmp	r3, #1
 801b400:	d925      	bls.n	801b44e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b402:	4b40      	ldr	r3, [pc, #256]	@ (801b504 <etharp_output+0x1fc>)
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	4619      	mov	r1, r3
 801b408:	4a3f      	ldr	r2, [pc, #252]	@ (801b508 <etharp_output+0x200>)
 801b40a:	460b      	mov	r3, r1
 801b40c:	005b      	lsls	r3, r3, #1
 801b40e:	440b      	add	r3, r1
 801b410:	00db      	lsls	r3, r3, #3
 801b412:	4413      	add	r3, r2
 801b414:	3308      	adds	r3, #8
 801b416:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b418:	68fa      	ldr	r2, [r7, #12]
 801b41a:	429a      	cmp	r2, r3
 801b41c:	d117      	bne.n	801b44e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b41e:	69bb      	ldr	r3, [r7, #24]
 801b420:	681a      	ldr	r2, [r3, #0]
 801b422:	4b38      	ldr	r3, [pc, #224]	@ (801b504 <etharp_output+0x1fc>)
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	4618      	mov	r0, r3
 801b428:	4937      	ldr	r1, [pc, #220]	@ (801b508 <etharp_output+0x200>)
 801b42a:	4603      	mov	r3, r0
 801b42c:	005b      	lsls	r3, r3, #1
 801b42e:	4403      	add	r3, r0
 801b430:	00db      	lsls	r3, r3, #3
 801b432:	440b      	add	r3, r1
 801b434:	3304      	adds	r3, #4
 801b436:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b438:	429a      	cmp	r2, r3
 801b43a:	d108      	bne.n	801b44e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b43c:	4b31      	ldr	r3, [pc, #196]	@ (801b504 <etharp_output+0x1fc>)
 801b43e:	781b      	ldrb	r3, [r3, #0]
 801b440:	461a      	mov	r2, r3
 801b442:	68b9      	ldr	r1, [r7, #8]
 801b444:	68f8      	ldr	r0, [r7, #12]
 801b446:	f7ff fec5 	bl	801b1d4 <etharp_output_to_arp_index>
 801b44a:	4603      	mov	r3, r0
 801b44c:	e04a      	b.n	801b4e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b44e:	2300      	movs	r3, #0
 801b450:	75fb      	strb	r3, [r7, #23]
 801b452:	e031      	b.n	801b4b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b454:	7dfa      	ldrb	r2, [r7, #23]
 801b456:	492c      	ldr	r1, [pc, #176]	@ (801b508 <etharp_output+0x200>)
 801b458:	4613      	mov	r3, r2
 801b45a:	005b      	lsls	r3, r3, #1
 801b45c:	4413      	add	r3, r2
 801b45e:	00db      	lsls	r3, r3, #3
 801b460:	440b      	add	r3, r1
 801b462:	3314      	adds	r3, #20
 801b464:	781b      	ldrb	r3, [r3, #0]
 801b466:	2b01      	cmp	r3, #1
 801b468:	d923      	bls.n	801b4b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b46a:	7dfa      	ldrb	r2, [r7, #23]
 801b46c:	4926      	ldr	r1, [pc, #152]	@ (801b508 <etharp_output+0x200>)
 801b46e:	4613      	mov	r3, r2
 801b470:	005b      	lsls	r3, r3, #1
 801b472:	4413      	add	r3, r2
 801b474:	00db      	lsls	r3, r3, #3
 801b476:	440b      	add	r3, r1
 801b478:	3308      	adds	r3, #8
 801b47a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b47c:	68fa      	ldr	r2, [r7, #12]
 801b47e:	429a      	cmp	r2, r3
 801b480:	d117      	bne.n	801b4b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b482:	69bb      	ldr	r3, [r7, #24]
 801b484:	6819      	ldr	r1, [r3, #0]
 801b486:	7dfa      	ldrb	r2, [r7, #23]
 801b488:	481f      	ldr	r0, [pc, #124]	@ (801b508 <etharp_output+0x200>)
 801b48a:	4613      	mov	r3, r2
 801b48c:	005b      	lsls	r3, r3, #1
 801b48e:	4413      	add	r3, r2
 801b490:	00db      	lsls	r3, r3, #3
 801b492:	4403      	add	r3, r0
 801b494:	3304      	adds	r3, #4
 801b496:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b498:	4299      	cmp	r1, r3
 801b49a:	d10a      	bne.n	801b4b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b49c:	4a19      	ldr	r2, [pc, #100]	@ (801b504 <etharp_output+0x1fc>)
 801b49e:	7dfb      	ldrb	r3, [r7, #23]
 801b4a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b4a2:	7dfb      	ldrb	r3, [r7, #23]
 801b4a4:	461a      	mov	r2, r3
 801b4a6:	68b9      	ldr	r1, [r7, #8]
 801b4a8:	68f8      	ldr	r0, [r7, #12]
 801b4aa:	f7ff fe93 	bl	801b1d4 <etharp_output_to_arp_index>
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	e018      	b.n	801b4e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b4b2:	7dfb      	ldrb	r3, [r7, #23]
 801b4b4:	3301      	adds	r3, #1
 801b4b6:	75fb      	strb	r3, [r7, #23]
 801b4b8:	7dfb      	ldrb	r3, [r7, #23]
 801b4ba:	2b09      	cmp	r3, #9
 801b4bc:	d9ca      	bls.n	801b454 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b4be:	68ba      	ldr	r2, [r7, #8]
 801b4c0:	69b9      	ldr	r1, [r7, #24]
 801b4c2:	68f8      	ldr	r0, [r7, #12]
 801b4c4:	f000 f822 	bl	801b50c <etharp_query>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	e00b      	b.n	801b4e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b4d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b4d6:	9300      	str	r3, [sp, #0]
 801b4d8:	69fb      	ldr	r3, [r7, #28]
 801b4da:	68b9      	ldr	r1, [r7, #8]
 801b4dc:	68f8      	ldr	r0, [r7, #12]
 801b4de:	f001 fd63 	bl	801cfa8 <ethernet_output>
 801b4e2:	4603      	mov	r3, r0
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3720      	adds	r7, #32
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bd80      	pop	{r7, pc}
 801b4ec:	080247f4 	.word	0x080247f4
 801b4f0:	08024944 	.word	0x08024944
 801b4f4:	0802486c 	.word	0x0802486c
 801b4f8:	08024994 	.word	0x08024994
 801b4fc:	08024934 	.word	0x08024934
 801b500:	08025224 	.word	0x08025224
 801b504:	200178e8 	.word	0x200178e8
 801b508:	200177f8 	.word	0x200177f8

0801b50c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b08c      	sub	sp, #48	@ 0x30
 801b510:	af02      	add	r7, sp, #8
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	332a      	adds	r3, #42	@ 0x2a
 801b51c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b51e:	23ff      	movs	r3, #255	@ 0xff
 801b520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b524:	2300      	movs	r3, #0
 801b526:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b528:	68bb      	ldr	r3, [r7, #8]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	68f9      	ldr	r1, [r7, #12]
 801b52e:	4618      	mov	r0, r3
 801b530:	f000 fe2c 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801b534:	4603      	mov	r3, r0
 801b536:	2b00      	cmp	r3, #0
 801b538:	d10c      	bne.n	801b554 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b53a:	68bb      	ldr	r3, [r7, #8]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b542:	2be0      	cmp	r3, #224	@ 0xe0
 801b544:	d006      	beq.n	801b554 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d003      	beq.n	801b554 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d102      	bne.n	801b55a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b554:	f06f 030f 	mvn.w	r3, #15
 801b558:	e101      	b.n	801b75e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b55a:	68fa      	ldr	r2, [r7, #12]
 801b55c:	2101      	movs	r1, #1
 801b55e:	68b8      	ldr	r0, [r7, #8]
 801b560:	f7ff fb5c 	bl	801ac1c <etharp_find_entry>
 801b564:	4603      	mov	r3, r0
 801b566:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b568:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	da02      	bge.n	801b576 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b570:	8a7b      	ldrh	r3, [r7, #18]
 801b572:	b25b      	sxtb	r3, r3
 801b574:	e0f3      	b.n	801b75e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b576:	8a7b      	ldrh	r3, [r7, #18]
 801b578:	2b7e      	cmp	r3, #126	@ 0x7e
 801b57a:	d906      	bls.n	801b58a <etharp_query+0x7e>
 801b57c:	4b7a      	ldr	r3, [pc, #488]	@ (801b768 <etharp_query+0x25c>)
 801b57e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b582:	497a      	ldr	r1, [pc, #488]	@ (801b76c <etharp_query+0x260>)
 801b584:	487a      	ldr	r0, [pc, #488]	@ (801b770 <etharp_query+0x264>)
 801b586:	f002 ffd7 	bl	801e538 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b58a:	8a7b      	ldrh	r3, [r7, #18]
 801b58c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b58e:	7c7a      	ldrb	r2, [r7, #17]
 801b590:	4978      	ldr	r1, [pc, #480]	@ (801b774 <etharp_query+0x268>)
 801b592:	4613      	mov	r3, r2
 801b594:	005b      	lsls	r3, r3, #1
 801b596:	4413      	add	r3, r2
 801b598:	00db      	lsls	r3, r3, #3
 801b59a:	440b      	add	r3, r1
 801b59c:	3314      	adds	r3, #20
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d115      	bne.n	801b5d0 <etharp_query+0xc4>
    is_new_entry = 1;
 801b5a4:	2301      	movs	r3, #1
 801b5a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b5a8:	7c7a      	ldrb	r2, [r7, #17]
 801b5aa:	4972      	ldr	r1, [pc, #456]	@ (801b774 <etharp_query+0x268>)
 801b5ac:	4613      	mov	r3, r2
 801b5ae:	005b      	lsls	r3, r3, #1
 801b5b0:	4413      	add	r3, r2
 801b5b2:	00db      	lsls	r3, r3, #3
 801b5b4:	440b      	add	r3, r1
 801b5b6:	3314      	adds	r3, #20
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b5bc:	7c7a      	ldrb	r2, [r7, #17]
 801b5be:	496d      	ldr	r1, [pc, #436]	@ (801b774 <etharp_query+0x268>)
 801b5c0:	4613      	mov	r3, r2
 801b5c2:	005b      	lsls	r3, r3, #1
 801b5c4:	4413      	add	r3, r2
 801b5c6:	00db      	lsls	r3, r3, #3
 801b5c8:	440b      	add	r3, r1
 801b5ca:	3308      	adds	r3, #8
 801b5cc:	68fa      	ldr	r2, [r7, #12]
 801b5ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b5d0:	7c7a      	ldrb	r2, [r7, #17]
 801b5d2:	4968      	ldr	r1, [pc, #416]	@ (801b774 <etharp_query+0x268>)
 801b5d4:	4613      	mov	r3, r2
 801b5d6:	005b      	lsls	r3, r3, #1
 801b5d8:	4413      	add	r3, r2
 801b5da:	00db      	lsls	r3, r3, #3
 801b5dc:	440b      	add	r3, r1
 801b5de:	3314      	adds	r3, #20
 801b5e0:	781b      	ldrb	r3, [r3, #0]
 801b5e2:	2b01      	cmp	r3, #1
 801b5e4:	d011      	beq.n	801b60a <etharp_query+0xfe>
 801b5e6:	7c7a      	ldrb	r2, [r7, #17]
 801b5e8:	4962      	ldr	r1, [pc, #392]	@ (801b774 <etharp_query+0x268>)
 801b5ea:	4613      	mov	r3, r2
 801b5ec:	005b      	lsls	r3, r3, #1
 801b5ee:	4413      	add	r3, r2
 801b5f0:	00db      	lsls	r3, r3, #3
 801b5f2:	440b      	add	r3, r1
 801b5f4:	3314      	adds	r3, #20
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	2b01      	cmp	r3, #1
 801b5fa:	d806      	bhi.n	801b60a <etharp_query+0xfe>
 801b5fc:	4b5a      	ldr	r3, [pc, #360]	@ (801b768 <etharp_query+0x25c>)
 801b5fe:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b602:	495d      	ldr	r1, [pc, #372]	@ (801b778 <etharp_query+0x26c>)
 801b604:	485a      	ldr	r0, [pc, #360]	@ (801b770 <etharp_query+0x264>)
 801b606:	f002 ff97 	bl	801e538 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b60a:	6a3b      	ldr	r3, [r7, #32]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d102      	bne.n	801b616 <etharp_query+0x10a>
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2b00      	cmp	r3, #0
 801b614:	d10c      	bne.n	801b630 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b616:	68b9      	ldr	r1, [r7, #8]
 801b618:	68f8      	ldr	r0, [r7, #12]
 801b61a:	f000 f963 	bl	801b8e4 <etharp_request>
 801b61e:	4603      	mov	r3, r0
 801b620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d102      	bne.n	801b630 <etharp_query+0x124>
      return result;
 801b62a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b62e:	e096      	b.n	801b75e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d106      	bne.n	801b644 <etharp_query+0x138>
 801b636:	4b4c      	ldr	r3, [pc, #304]	@ (801b768 <etharp_query+0x25c>)
 801b638:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b63c:	494f      	ldr	r1, [pc, #316]	@ (801b77c <etharp_query+0x270>)
 801b63e:	484c      	ldr	r0, [pc, #304]	@ (801b770 <etharp_query+0x264>)
 801b640:	f002 ff7a 	bl	801e538 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b644:	7c7a      	ldrb	r2, [r7, #17]
 801b646:	494b      	ldr	r1, [pc, #300]	@ (801b774 <etharp_query+0x268>)
 801b648:	4613      	mov	r3, r2
 801b64a:	005b      	lsls	r3, r3, #1
 801b64c:	4413      	add	r3, r2
 801b64e:	00db      	lsls	r3, r3, #3
 801b650:	440b      	add	r3, r1
 801b652:	3314      	adds	r3, #20
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	2b01      	cmp	r3, #1
 801b658:	d917      	bls.n	801b68a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b65a:	4a49      	ldr	r2, [pc, #292]	@ (801b780 <etharp_query+0x274>)
 801b65c:	7c7b      	ldrb	r3, [r7, #17]
 801b65e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b660:	7c7a      	ldrb	r2, [r7, #17]
 801b662:	4613      	mov	r3, r2
 801b664:	005b      	lsls	r3, r3, #1
 801b666:	4413      	add	r3, r2
 801b668:	00db      	lsls	r3, r3, #3
 801b66a:	3308      	adds	r3, #8
 801b66c:	4a41      	ldr	r2, [pc, #260]	@ (801b774 <etharp_query+0x268>)
 801b66e:	4413      	add	r3, r2
 801b670:	3304      	adds	r3, #4
 801b672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b676:	9200      	str	r2, [sp, #0]
 801b678:	697a      	ldr	r2, [r7, #20]
 801b67a:	6879      	ldr	r1, [r7, #4]
 801b67c:	68f8      	ldr	r0, [r7, #12]
 801b67e:	f001 fc93 	bl	801cfa8 <ethernet_output>
 801b682:	4603      	mov	r3, r0
 801b684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b688:	e067      	b.n	801b75a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b68a:	7c7a      	ldrb	r2, [r7, #17]
 801b68c:	4939      	ldr	r1, [pc, #228]	@ (801b774 <etharp_query+0x268>)
 801b68e:	4613      	mov	r3, r2
 801b690:	005b      	lsls	r3, r3, #1
 801b692:	4413      	add	r3, r2
 801b694:	00db      	lsls	r3, r3, #3
 801b696:	440b      	add	r3, r1
 801b698:	3314      	adds	r3, #20
 801b69a:	781b      	ldrb	r3, [r3, #0]
 801b69c:	2b01      	cmp	r3, #1
 801b69e:	d15c      	bne.n	801b75a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b6a8:	e01c      	b.n	801b6e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b6aa:	69fb      	ldr	r3, [r7, #28]
 801b6ac:	895a      	ldrh	r2, [r3, #10]
 801b6ae:	69fb      	ldr	r3, [r7, #28]
 801b6b0:	891b      	ldrh	r3, [r3, #8]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	d10a      	bne.n	801b6cc <etharp_query+0x1c0>
 801b6b6:	69fb      	ldr	r3, [r7, #28]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d006      	beq.n	801b6cc <etharp_query+0x1c0>
 801b6be:	4b2a      	ldr	r3, [pc, #168]	@ (801b768 <etharp_query+0x25c>)
 801b6c0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b6c4:	492f      	ldr	r1, [pc, #188]	@ (801b784 <etharp_query+0x278>)
 801b6c6:	482a      	ldr	r0, [pc, #168]	@ (801b770 <etharp_query+0x264>)
 801b6c8:	f002 ff36 	bl	801e538 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b6cc:	69fb      	ldr	r3, [r7, #28]
 801b6ce:	7b1b      	ldrb	r3, [r3, #12]
 801b6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d002      	beq.n	801b6de <etharp_query+0x1d2>
        copy_needed = 1;
 801b6d8:	2301      	movs	r3, #1
 801b6da:	61bb      	str	r3, [r7, #24]
        break;
 801b6dc:	e005      	b.n	801b6ea <etharp_query+0x1de>
      }
      p = p->next;
 801b6de:	69fb      	ldr	r3, [r7, #28]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d1df      	bne.n	801b6aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d007      	beq.n	801b700 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b6f0:	687a      	ldr	r2, [r7, #4]
 801b6f2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b6f6:	200e      	movs	r0, #14
 801b6f8:	f7f7 fa9c 	bl	8012c34 <pbuf_clone>
 801b6fc:	61f8      	str	r0, [r7, #28]
 801b6fe:	e004      	b.n	801b70a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b704:	69f8      	ldr	r0, [r7, #28]
 801b706:	f7f6 ff8b 	bl	8012620 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b70a:	69fb      	ldr	r3, [r7, #28]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d021      	beq.n	801b754 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b710:	7c7a      	ldrb	r2, [r7, #17]
 801b712:	4918      	ldr	r1, [pc, #96]	@ (801b774 <etharp_query+0x268>)
 801b714:	4613      	mov	r3, r2
 801b716:	005b      	lsls	r3, r3, #1
 801b718:	4413      	add	r3, r2
 801b71a:	00db      	lsls	r3, r3, #3
 801b71c:	440b      	add	r3, r1
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d00a      	beq.n	801b73a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b724:	7c7a      	ldrb	r2, [r7, #17]
 801b726:	4913      	ldr	r1, [pc, #76]	@ (801b774 <etharp_query+0x268>)
 801b728:	4613      	mov	r3, r2
 801b72a:	005b      	lsls	r3, r3, #1
 801b72c:	4413      	add	r3, r2
 801b72e:	00db      	lsls	r3, r3, #3
 801b730:	440b      	add	r3, r1
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	4618      	mov	r0, r3
 801b736:	f7f6 fecd 	bl	80124d4 <pbuf_free>
      }
      arp_table[i].q = p;
 801b73a:	7c7a      	ldrb	r2, [r7, #17]
 801b73c:	490d      	ldr	r1, [pc, #52]	@ (801b774 <etharp_query+0x268>)
 801b73e:	4613      	mov	r3, r2
 801b740:	005b      	lsls	r3, r3, #1
 801b742:	4413      	add	r3, r2
 801b744:	00db      	lsls	r3, r3, #3
 801b746:	440b      	add	r3, r1
 801b748:	69fa      	ldr	r2, [r7, #28]
 801b74a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b74c:	2300      	movs	r3, #0
 801b74e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b752:	e002      	b.n	801b75a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b754:	23ff      	movs	r3, #255	@ 0xff
 801b756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b75e:	4618      	mov	r0, r3
 801b760:	3728      	adds	r7, #40	@ 0x28
 801b762:	46bd      	mov	sp, r7
 801b764:	bd80      	pop	{r7, pc}
 801b766:	bf00      	nop
 801b768:	080247f4 	.word	0x080247f4
 801b76c:	080249a0 	.word	0x080249a0
 801b770:	0802486c 	.word	0x0802486c
 801b774:	200177f8 	.word	0x200177f8
 801b778:	080249b0 	.word	0x080249b0
 801b77c:	08024994 	.word	0x08024994
 801b780:	200178e8 	.word	0x200178e8
 801b784:	080249d8 	.word	0x080249d8

0801b788 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b08a      	sub	sp, #40	@ 0x28
 801b78c:	af02      	add	r7, sp, #8
 801b78e:	60f8      	str	r0, [r7, #12]
 801b790:	60b9      	str	r1, [r7, #8]
 801b792:	607a      	str	r2, [r7, #4]
 801b794:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b796:	2300      	movs	r3, #0
 801b798:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d106      	bne.n	801b7ae <etharp_raw+0x26>
 801b7a0:	4b3a      	ldr	r3, [pc, #232]	@ (801b88c <etharp_raw+0x104>)
 801b7a2:	f240 4257 	movw	r2, #1111	@ 0x457
 801b7a6:	493a      	ldr	r1, [pc, #232]	@ (801b890 <etharp_raw+0x108>)
 801b7a8:	483a      	ldr	r0, [pc, #232]	@ (801b894 <etharp_raw+0x10c>)
 801b7aa:	f002 fec5 	bl	801e538 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b7ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7b2:	211c      	movs	r1, #28
 801b7b4:	200e      	movs	r0, #14
 801b7b6:	f7f6 fba9 	bl	8011f0c <pbuf_alloc>
 801b7ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b7bc:	69bb      	ldr	r3, [r7, #24]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d102      	bne.n	801b7c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b7c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b7c6:	e05d      	b.n	801b884 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b7c8:	69bb      	ldr	r3, [r7, #24]
 801b7ca:	895b      	ldrh	r3, [r3, #10]
 801b7cc:	2b1b      	cmp	r3, #27
 801b7ce:	d806      	bhi.n	801b7de <etharp_raw+0x56>
 801b7d0:	4b2e      	ldr	r3, [pc, #184]	@ (801b88c <etharp_raw+0x104>)
 801b7d2:	f240 4262 	movw	r2, #1122	@ 0x462
 801b7d6:	4930      	ldr	r1, [pc, #192]	@ (801b898 <etharp_raw+0x110>)
 801b7d8:	482e      	ldr	r0, [pc, #184]	@ (801b894 <etharp_raw+0x10c>)
 801b7da:	f002 fead 	bl	801e538 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b7de:	69bb      	ldr	r3, [r7, #24]
 801b7e0:	685b      	ldr	r3, [r3, #4]
 801b7e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b7e4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7f4 ff88 	bl	80106fc <lwip_htons>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	461a      	mov	r2, r3
 801b7f0:	697b      	ldr	r3, [r7, #20]
 801b7f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b7fa:	2b06      	cmp	r3, #6
 801b7fc:	d006      	beq.n	801b80c <etharp_raw+0x84>
 801b7fe:	4b23      	ldr	r3, [pc, #140]	@ (801b88c <etharp_raw+0x104>)
 801b800:	f240 4269 	movw	r2, #1129	@ 0x469
 801b804:	4925      	ldr	r1, [pc, #148]	@ (801b89c <etharp_raw+0x114>)
 801b806:	4823      	ldr	r0, [pc, #140]	@ (801b894 <etharp_raw+0x10c>)
 801b808:	f002 fe96 	bl	801e538 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	3308      	adds	r3, #8
 801b810:	2206      	movs	r2, #6
 801b812:	6839      	ldr	r1, [r7, #0]
 801b814:	4618      	mov	r0, r3
 801b816:	f003 f926 	bl	801ea66 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b81a:	697b      	ldr	r3, [r7, #20]
 801b81c:	3312      	adds	r3, #18
 801b81e:	2206      	movs	r2, #6
 801b820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b822:	4618      	mov	r0, r3
 801b824:	f003 f91f 	bl	801ea66 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b828:	697b      	ldr	r3, [r7, #20]
 801b82a:	330e      	adds	r3, #14
 801b82c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b82e:	6812      	ldr	r2, [r2, #0]
 801b830:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b832:	697b      	ldr	r3, [r7, #20]
 801b834:	3318      	adds	r3, #24
 801b836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b838:	6812      	ldr	r2, [r2, #0]
 801b83a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b83c:	697b      	ldr	r3, [r7, #20]
 801b83e:	2200      	movs	r2, #0
 801b840:	701a      	strb	r2, [r3, #0]
 801b842:	2200      	movs	r2, #0
 801b844:	f042 0201 	orr.w	r2, r2, #1
 801b848:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	2200      	movs	r2, #0
 801b84e:	f042 0208 	orr.w	r2, r2, #8
 801b852:	709a      	strb	r2, [r3, #2]
 801b854:	2200      	movs	r2, #0
 801b856:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	2206      	movs	r2, #6
 801b85c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	2204      	movs	r2, #4
 801b862:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b864:	f640 0306 	movw	r3, #2054	@ 0x806
 801b868:	9300      	str	r3, [sp, #0]
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	68ba      	ldr	r2, [r7, #8]
 801b86e:	69b9      	ldr	r1, [r7, #24]
 801b870:	68f8      	ldr	r0, [r7, #12]
 801b872:	f001 fb99 	bl	801cfa8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b876:	69b8      	ldr	r0, [r7, #24]
 801b878:	f7f6 fe2c 	bl	80124d4 <pbuf_free>
  p = NULL;
 801b87c:	2300      	movs	r3, #0
 801b87e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b880:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b884:	4618      	mov	r0, r3
 801b886:	3720      	adds	r7, #32
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}
 801b88c:	080247f4 	.word	0x080247f4
 801b890:	08024944 	.word	0x08024944
 801b894:	0802486c 	.word	0x0802486c
 801b898:	080249f4 	.word	0x080249f4
 801b89c:	08024a28 	.word	0x08024a28

0801b8a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b8a0:	b580      	push	{r7, lr}
 801b8a2:	b088      	sub	sp, #32
 801b8a4:	af04      	add	r7, sp, #16
 801b8a6:	60f8      	str	r0, [r7, #12]
 801b8a8:	60b9      	str	r1, [r7, #8]
 801b8aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8bc:	2201      	movs	r2, #1
 801b8be:	9203      	str	r2, [sp, #12]
 801b8c0:	68ba      	ldr	r2, [r7, #8]
 801b8c2:	9202      	str	r2, [sp, #8]
 801b8c4:	4a06      	ldr	r2, [pc, #24]	@ (801b8e0 <etharp_request_dst+0x40>)
 801b8c6:	9201      	str	r2, [sp, #4]
 801b8c8:	9300      	str	r3, [sp, #0]
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	687a      	ldr	r2, [r7, #4]
 801b8ce:	68f8      	ldr	r0, [r7, #12]
 801b8d0:	f7ff ff5a 	bl	801b788 <etharp_raw>
 801b8d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	3710      	adds	r7, #16
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd80      	pop	{r7, pc}
 801b8de:	bf00      	nop
 801b8e0:	0802522c 	.word	0x0802522c

0801b8e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b082      	sub	sp, #8
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
 801b8ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b8ee:	4a05      	ldr	r2, [pc, #20]	@ (801b904 <etharp_request+0x20>)
 801b8f0:	6839      	ldr	r1, [r7, #0]
 801b8f2:	6878      	ldr	r0, [r7, #4]
 801b8f4:	f7ff ffd4 	bl	801b8a0 <etharp_request_dst>
 801b8f8:	4603      	mov	r3, r0
}
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	3708      	adds	r7, #8
 801b8fe:	46bd      	mov	sp, r7
 801b900:	bd80      	pop	{r7, pc}
 801b902:	bf00      	nop
 801b904:	08025224 	.word	0x08025224

0801b908 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b08e      	sub	sp, #56	@ 0x38
 801b90c:	af04      	add	r7, sp, #16
 801b90e:	6078      	str	r0, [r7, #4]
 801b910:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b912:	4b79      	ldr	r3, [pc, #484]	@ (801baf8 <icmp_input+0x1f0>)
 801b914:	689b      	ldr	r3, [r3, #8]
 801b916:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	f003 030f 	and.w	r3, r3, #15
 801b920:	b2db      	uxtb	r3, r3
 801b922:	009b      	lsls	r3, r3, #2
 801b924:	b2db      	uxtb	r3, r3
 801b926:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b92a:	2b13      	cmp	r3, #19
 801b92c:	f240 80cd 	bls.w	801baca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	895b      	ldrh	r3, [r3, #10]
 801b934:	2b03      	cmp	r3, #3
 801b936:	f240 80ca 	bls.w	801bace <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	685b      	ldr	r3, [r3, #4]
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b944:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f000 80b7 	beq.w	801babc <icmp_input+0x1b4>
 801b94e:	2b08      	cmp	r3, #8
 801b950:	f040 80b7 	bne.w	801bac2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b954:	4b69      	ldr	r3, [pc, #420]	@ (801bafc <icmp_input+0x1f4>)
 801b956:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b958:	4b67      	ldr	r3, [pc, #412]	@ (801baf8 <icmp_input+0x1f0>)
 801b95a:	695b      	ldr	r3, [r3, #20]
 801b95c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b960:	2be0      	cmp	r3, #224	@ 0xe0
 801b962:	f000 80bb 	beq.w	801badc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b966:	4b64      	ldr	r3, [pc, #400]	@ (801baf8 <icmp_input+0x1f0>)
 801b968:	695b      	ldr	r3, [r3, #20]
 801b96a:	4a63      	ldr	r2, [pc, #396]	@ (801baf8 <icmp_input+0x1f0>)
 801b96c:	6812      	ldr	r2, [r2, #0]
 801b96e:	4611      	mov	r1, r2
 801b970:	4618      	mov	r0, r3
 801b972:	f000 fc0b 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801b976:	4603      	mov	r3, r0
 801b978:	2b00      	cmp	r3, #0
 801b97a:	f040 80b1 	bne.w	801bae0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	891b      	ldrh	r3, [r3, #8]
 801b982:	2b07      	cmp	r3, #7
 801b984:	f240 80a5 	bls.w	801bad2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b988:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b98a:	330e      	adds	r3, #14
 801b98c:	4619      	mov	r1, r3
 801b98e:	6878      	ldr	r0, [r7, #4]
 801b990:	f7f6 fd0a 	bl	80123a8 <pbuf_add_header>
 801b994:	4603      	mov	r3, r0
 801b996:	2b00      	cmp	r3, #0
 801b998:	d04b      	beq.n	801ba32 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	891a      	ldrh	r2, [r3, #8]
 801b99e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9a0:	4413      	add	r3, r2
 801b9a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	891b      	ldrh	r3, [r3, #8]
 801b9a8:	8b7a      	ldrh	r2, [r7, #26]
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	f0c0 809a 	bcc.w	801bae4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b9b0:	8b7b      	ldrh	r3, [r7, #26]
 801b9b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	200e      	movs	r0, #14
 801b9ba:	f7f6 faa7 	bl	8011f0c <pbuf_alloc>
 801b9be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	f000 8090 	beq.w	801bae8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	895b      	ldrh	r3, [r3, #10]
 801b9cc:	461a      	mov	r2, r3
 801b9ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9d0:	3308      	adds	r3, #8
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d203      	bcs.n	801b9de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b9d6:	6978      	ldr	r0, [r7, #20]
 801b9d8:	f7f6 fd7c 	bl	80124d4 <pbuf_free>
          goto icmperr;
 801b9dc:	e085      	b.n	801baea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b9de:	697b      	ldr	r3, [r7, #20]
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b9e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	f003 f83d 	bl	801ea66 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b9ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9ee:	4619      	mov	r1, r3
 801b9f0:	6978      	ldr	r0, [r7, #20]
 801b9f2:	f7f6 fce9 	bl	80123c8 <pbuf_remove_header>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d009      	beq.n	801ba10 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b9fc:	4b40      	ldr	r3, [pc, #256]	@ (801bb00 <icmp_input+0x1f8>)
 801b9fe:	22b6      	movs	r2, #182	@ 0xb6
 801ba00:	4940      	ldr	r1, [pc, #256]	@ (801bb04 <icmp_input+0x1fc>)
 801ba02:	4841      	ldr	r0, [pc, #260]	@ (801bb08 <icmp_input+0x200>)
 801ba04:	f002 fd98 	bl	801e538 <iprintf>
          pbuf_free(r);
 801ba08:	6978      	ldr	r0, [r7, #20]
 801ba0a:	f7f6 fd63 	bl	80124d4 <pbuf_free>
          goto icmperr;
 801ba0e:	e06c      	b.n	801baea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ba10:	6879      	ldr	r1, [r7, #4]
 801ba12:	6978      	ldr	r0, [r7, #20]
 801ba14:	f7f6 fe92 	bl	801273c <pbuf_copy>
 801ba18:	4603      	mov	r3, r0
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d003      	beq.n	801ba26 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ba1e:	6978      	ldr	r0, [r7, #20]
 801ba20:	f7f6 fd58 	bl	80124d4 <pbuf_free>
          goto icmperr;
 801ba24:	e061      	b.n	801baea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ba26:	6878      	ldr	r0, [r7, #4]
 801ba28:	f7f6 fd54 	bl	80124d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ba2c:	697b      	ldr	r3, [r7, #20]
 801ba2e:	607b      	str	r3, [r7, #4]
 801ba30:	e00f      	b.n	801ba52 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ba32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba34:	330e      	adds	r3, #14
 801ba36:	4619      	mov	r1, r3
 801ba38:	6878      	ldr	r0, [r7, #4]
 801ba3a:	f7f6 fcc5 	bl	80123c8 <pbuf_remove_header>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d006      	beq.n	801ba52 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ba44:	4b2e      	ldr	r3, [pc, #184]	@ (801bb00 <icmp_input+0x1f8>)
 801ba46:	22c7      	movs	r2, #199	@ 0xc7
 801ba48:	4930      	ldr	r1, [pc, #192]	@ (801bb0c <icmp_input+0x204>)
 801ba4a:	482f      	ldr	r0, [pc, #188]	@ (801bb08 <icmp_input+0x200>)
 801ba4c:	f002 fd74 	bl	801e538 <iprintf>
          goto icmperr;
 801ba50:	e04b      	b.n	801baea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	685b      	ldr	r3, [r3, #4]
 801ba56:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ba58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba5a:	4619      	mov	r1, r3
 801ba5c:	6878      	ldr	r0, [r7, #4]
 801ba5e:	f7f6 fca3 	bl	80123a8 <pbuf_add_header>
 801ba62:	4603      	mov	r3, r0
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d12b      	bne.n	801bac0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ba6e:	69fb      	ldr	r3, [r7, #28]
 801ba70:	681a      	ldr	r2, [r3, #0]
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ba76:	4b20      	ldr	r3, [pc, #128]	@ (801baf8 <icmp_input+0x1f0>)
 801ba78:	691a      	ldr	r2, [r3, #16]
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	2200      	movs	r2, #0
 801ba82:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ba84:	693b      	ldr	r3, [r7, #16]
 801ba86:	2200      	movs	r2, #0
 801ba88:	709a      	strb	r2, [r3, #2]
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	22ff      	movs	r2, #255	@ 0xff
 801ba92:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	2200      	movs	r2, #0
 801ba98:	729a      	strb	r2, [r3, #10]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	9302      	str	r3, [sp, #8]
 801baa2:	2301      	movs	r3, #1
 801baa4:	9301      	str	r3, [sp, #4]
 801baa6:	2300      	movs	r3, #0
 801baa8:	9300      	str	r3, [sp, #0]
 801baaa:	23ff      	movs	r3, #255	@ 0xff
 801baac:	2200      	movs	r2, #0
 801baae:	69f9      	ldr	r1, [r7, #28]
 801bab0:	6878      	ldr	r0, [r7, #4]
 801bab2:	f000 fa93 	bl	801bfdc <ip4_output_if>
 801bab6:	4603      	mov	r3, r0
 801bab8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801baba:	e001      	b.n	801bac0 <icmp_input+0x1b8>
      break;
 801babc:	bf00      	nop
 801babe:	e000      	b.n	801bac2 <icmp_input+0x1ba>
      break;
 801bac0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bac2:	6878      	ldr	r0, [r7, #4]
 801bac4:	f7f6 fd06 	bl	80124d4 <pbuf_free>
  return;
 801bac8:	e013      	b.n	801baf2 <icmp_input+0x1ea>
    goto lenerr;
 801baca:	bf00      	nop
 801bacc:	e002      	b.n	801bad4 <icmp_input+0x1cc>
    goto lenerr;
 801bace:	bf00      	nop
 801bad0:	e000      	b.n	801bad4 <icmp_input+0x1cc>
        goto lenerr;
 801bad2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bad4:	6878      	ldr	r0, [r7, #4]
 801bad6:	f7f6 fcfd 	bl	80124d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bada:	e00a      	b.n	801baf2 <icmp_input+0x1ea>
        goto icmperr;
 801badc:	bf00      	nop
 801bade:	e004      	b.n	801baea <icmp_input+0x1e2>
        goto icmperr;
 801bae0:	bf00      	nop
 801bae2:	e002      	b.n	801baea <icmp_input+0x1e2>
          goto icmperr;
 801bae4:	bf00      	nop
 801bae6:	e000      	b.n	801baea <icmp_input+0x1e2>
          goto icmperr;
 801bae8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801baea:	6878      	ldr	r0, [r7, #4]
 801baec:	f7f6 fcf2 	bl	80124d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801baf0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801baf2:	3728      	adds	r7, #40	@ 0x28
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bd80      	pop	{r7, pc}
 801baf8:	20013e98 	.word	0x20013e98
 801bafc:	20013eac 	.word	0x20013eac
 801bb00:	08024a6c 	.word	0x08024a6c
 801bb04:	08024aa4 	.word	0x08024aa4
 801bb08:	08024adc 	.word	0x08024adc
 801bb0c:	08024b04 	.word	0x08024b04

0801bb10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
 801bb18:	460b      	mov	r3, r1
 801bb1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bb1c:	78fb      	ldrb	r3, [r7, #3]
 801bb1e:	461a      	mov	r2, r3
 801bb20:	2103      	movs	r1, #3
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f000 f814 	bl	801bb50 <icmp_send_response>
}
 801bb28:	bf00      	nop
 801bb2a:	3708      	adds	r7, #8
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}

0801bb30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b082      	sub	sp, #8
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
 801bb38:	460b      	mov	r3, r1
 801bb3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bb3c:	78fb      	ldrb	r3, [r7, #3]
 801bb3e:	461a      	mov	r2, r3
 801bb40:	210b      	movs	r1, #11
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	f000 f804 	bl	801bb50 <icmp_send_response>
}
 801bb48:	bf00      	nop
 801bb4a:	3708      	adds	r7, #8
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}

0801bb50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b08c      	sub	sp, #48	@ 0x30
 801bb54:	af04      	add	r7, sp, #16
 801bb56:	6078      	str	r0, [r7, #4]
 801bb58:	460b      	mov	r3, r1
 801bb5a:	70fb      	strb	r3, [r7, #3]
 801bb5c:	4613      	mov	r3, r2
 801bb5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bb60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bb64:	2124      	movs	r1, #36	@ 0x24
 801bb66:	2022      	movs	r0, #34	@ 0x22
 801bb68:	f7f6 f9d0 	bl	8011f0c <pbuf_alloc>
 801bb6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bb6e:	69fb      	ldr	r3, [r7, #28]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d04c      	beq.n	801bc0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bb74:	69fb      	ldr	r3, [r7, #28]
 801bb76:	895b      	ldrh	r3, [r3, #10]
 801bb78:	2b23      	cmp	r3, #35	@ 0x23
 801bb7a:	d806      	bhi.n	801bb8a <icmp_send_response+0x3a>
 801bb7c:	4b26      	ldr	r3, [pc, #152]	@ (801bc18 <icmp_send_response+0xc8>)
 801bb7e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bb82:	4926      	ldr	r1, [pc, #152]	@ (801bc1c <icmp_send_response+0xcc>)
 801bb84:	4826      	ldr	r0, [pc, #152]	@ (801bc20 <icmp_send_response+0xd0>)
 801bb86:	f002 fcd7 	bl	801e538 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bb90:	69fb      	ldr	r3, [r7, #28]
 801bb92:	685b      	ldr	r3, [r3, #4]
 801bb94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bb96:	697b      	ldr	r3, [r7, #20]
 801bb98:	78fa      	ldrb	r2, [r7, #3]
 801bb9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	78ba      	ldrb	r2, [r7, #2]
 801bba0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	2200      	movs	r2, #0
 801bba6:	711a      	strb	r2, [r3, #4]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	2200      	movs	r2, #0
 801bbb0:	719a      	strb	r2, [r3, #6]
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bbb6:	69fb      	ldr	r3, [r7, #28]
 801bbb8:	685b      	ldr	r3, [r3, #4]
 801bbba:	f103 0008 	add.w	r0, r3, #8
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	685b      	ldr	r3, [r3, #4]
 801bbc2:	221c      	movs	r2, #28
 801bbc4:	4619      	mov	r1, r3
 801bbc6:	f002 ff4e 	bl	801ea66 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bbca:	69bb      	ldr	r3, [r7, #24]
 801bbcc:	68db      	ldr	r3, [r3, #12]
 801bbce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bbd0:	f107 030c 	add.w	r3, r7, #12
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f000 f825 	bl	801bc24 <ip4_route>
 801bbda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bbdc:	693b      	ldr	r3, [r7, #16]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d011      	beq.n	801bc06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bbe2:	697b      	ldr	r3, [r7, #20]
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	709a      	strb	r2, [r3, #2]
 801bbe8:	2200      	movs	r2, #0
 801bbea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bbec:	f107 020c 	add.w	r2, r7, #12
 801bbf0:	693b      	ldr	r3, [r7, #16]
 801bbf2:	9302      	str	r3, [sp, #8]
 801bbf4:	2301      	movs	r3, #1
 801bbf6:	9301      	str	r3, [sp, #4]
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	9300      	str	r3, [sp, #0]
 801bbfc:	23ff      	movs	r3, #255	@ 0xff
 801bbfe:	2100      	movs	r1, #0
 801bc00:	69f8      	ldr	r0, [r7, #28]
 801bc02:	f000 f9eb 	bl	801bfdc <ip4_output_if>
  }
  pbuf_free(q);
 801bc06:	69f8      	ldr	r0, [r7, #28]
 801bc08:	f7f6 fc64 	bl	80124d4 <pbuf_free>
 801bc0c:	e000      	b.n	801bc10 <icmp_send_response+0xc0>
    return;
 801bc0e:	bf00      	nop
}
 801bc10:	3720      	adds	r7, #32
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}
 801bc16:	bf00      	nop
 801bc18:	08024a6c 	.word	0x08024a6c
 801bc1c:	08024b38 	.word	0x08024b38
 801bc20:	08024adc 	.word	0x08024adc

0801bc24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bc24:	b480      	push	{r7}
 801bc26:	b085      	sub	sp, #20
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bc2c:	4b33      	ldr	r3, [pc, #204]	@ (801bcfc <ip4_route+0xd8>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	60fb      	str	r3, [r7, #12]
 801bc32:	e036      	b.n	801bca2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc3a:	f003 0301 	and.w	r3, r3, #1
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d02b      	beq.n	801bc9c <ip4_route+0x78>
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc4a:	089b      	lsrs	r3, r3, #2
 801bc4c:	f003 0301 	and.w	r3, r3, #1
 801bc50:	b2db      	uxtb	r3, r3
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d022      	beq.n	801bc9c <ip4_route+0x78>
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	3304      	adds	r3, #4
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d01d      	beq.n	801bc9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	681a      	ldr	r2, [r3, #0]
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	3304      	adds	r3, #4
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	405a      	eors	r2, r3
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	3308      	adds	r3, #8
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4013      	ands	r3, r2
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d101      	bne.n	801bc7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	e038      	b.n	801bcee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc82:	f003 0302 	and.w	r3, r3, #2
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d108      	bne.n	801bc9c <ip4_route+0x78>
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	681a      	ldr	r2, [r3, #0]
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	330c      	adds	r3, #12
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d101      	bne.n	801bc9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	e028      	b.n	801bcee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	60fb      	str	r3, [r7, #12]
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d1c5      	bne.n	801bc34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bca8:	4b15      	ldr	r3, [pc, #84]	@ (801bd00 <ip4_route+0xdc>)
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d01a      	beq.n	801bce6 <ip4_route+0xc2>
 801bcb0:	4b13      	ldr	r3, [pc, #76]	@ (801bd00 <ip4_route+0xdc>)
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bcb8:	f003 0301 	and.w	r3, r3, #1
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d012      	beq.n	801bce6 <ip4_route+0xc2>
 801bcc0:	4b0f      	ldr	r3, [pc, #60]	@ (801bd00 <ip4_route+0xdc>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bcc8:	f003 0304 	and.w	r3, r3, #4
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d00a      	beq.n	801bce6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bcd0:	4b0b      	ldr	r3, [pc, #44]	@ (801bd00 <ip4_route+0xdc>)
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	3304      	adds	r3, #4
 801bcd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d004      	beq.n	801bce6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	b2db      	uxtb	r3, r3
 801bce2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bce4:	d101      	bne.n	801bcea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bce6:	2300      	movs	r3, #0
 801bce8:	e001      	b.n	801bcee <ip4_route+0xca>
  }

  return netif_default;
 801bcea:	4b05      	ldr	r3, [pc, #20]	@ (801bd00 <ip4_route+0xdc>)
 801bcec:	681b      	ldr	r3, [r3, #0]
}
 801bcee:	4618      	mov	r0, r3
 801bcf0:	3714      	adds	r7, #20
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf8:	4770      	bx	lr
 801bcfa:	bf00      	nop
 801bcfc:	2001774c 	.word	0x2001774c
 801bd00:	20017750 	.word	0x20017750

0801bd04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd12:	f003 0301 	and.w	r3, r3, #1
 801bd16:	b2db      	uxtb	r3, r3
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d016      	beq.n	801bd4a <ip4_input_accept+0x46>
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	3304      	adds	r3, #4
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d011      	beq.n	801bd4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd26:	4b0b      	ldr	r3, [pc, #44]	@ (801bd54 <ip4_input_accept+0x50>)
 801bd28:	695a      	ldr	r2, [r3, #20]
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	3304      	adds	r3, #4
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	429a      	cmp	r2, r3
 801bd32:	d008      	beq.n	801bd46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bd34:	4b07      	ldr	r3, [pc, #28]	@ (801bd54 <ip4_input_accept+0x50>)
 801bd36:	695b      	ldr	r3, [r3, #20]
 801bd38:	6879      	ldr	r1, [r7, #4]
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f000 fa26 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801bd40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d001      	beq.n	801bd4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bd46:	2301      	movs	r3, #1
 801bd48:	e000      	b.n	801bd4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bd4a:	2300      	movs	r3, #0
}
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	3708      	adds	r7, #8
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bd80      	pop	{r7, pc}
 801bd54:	20013e98 	.word	0x20013e98

0801bd58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bd58:	b580      	push	{r7, lr}
 801bd5a:	b088      	sub	sp, #32
 801bd5c:	af00      	add	r7, sp, #0
 801bd5e:	6078      	str	r0, [r7, #4]
 801bd60:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801bd62:	2301      	movs	r3, #1
 801bd64:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	685b      	ldr	r3, [r3, #4]
 801bd6a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801bd6c:	69fb      	ldr	r3, [r7, #28]
 801bd6e:	781b      	ldrb	r3, [r3, #0]
 801bd70:	091b      	lsrs	r3, r3, #4
 801bd72:	b2db      	uxtb	r3, r3
 801bd74:	2b04      	cmp	r3, #4
 801bd76:	d004      	beq.n	801bd82 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bd78:	6878      	ldr	r0, [r7, #4]
 801bd7a:	f7f6 fbab 	bl	80124d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bd7e:	2300      	movs	r3, #0
 801bd80:	e123      	b.n	801bfca <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bd82:	69fb      	ldr	r3, [r7, #28]
 801bd84:	781b      	ldrb	r3, [r3, #0]
 801bd86:	f003 030f 	and.w	r3, r3, #15
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	009b      	lsls	r3, r3, #2
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bd92:	69fb      	ldr	r3, [r7, #28]
 801bd94:	885b      	ldrh	r3, [r3, #2]
 801bd96:	b29b      	uxth	r3, r3
 801bd98:	4618      	mov	r0, r3
 801bd9a:	f7f4 fcaf 	bl	80106fc <lwip_htons>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	891b      	ldrh	r3, [r3, #8]
 801bda6:	8a3a      	ldrh	r2, [r7, #16]
 801bda8:	429a      	cmp	r2, r3
 801bdaa:	d204      	bcs.n	801bdb6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801bdac:	8a3b      	ldrh	r3, [r7, #16]
 801bdae:	4619      	mov	r1, r3
 801bdb0:	6878      	ldr	r0, [r7, #4]
 801bdb2:	f7f6 fa09 	bl	80121c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	895b      	ldrh	r3, [r3, #10]
 801bdba:	8a7a      	ldrh	r2, [r7, #18]
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	d807      	bhi.n	801bdd0 <ip4_input+0x78>
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	891b      	ldrh	r3, [r3, #8]
 801bdc4:	8a3a      	ldrh	r2, [r7, #16]
 801bdc6:	429a      	cmp	r2, r3
 801bdc8:	d802      	bhi.n	801bdd0 <ip4_input+0x78>
 801bdca:	8a7b      	ldrh	r3, [r7, #18]
 801bdcc:	2b13      	cmp	r3, #19
 801bdce:	d804      	bhi.n	801bdda <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7f6 fb7f 	bl	80124d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	e0f7      	b.n	801bfca <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bdda:	69fb      	ldr	r3, [r7, #28]
 801bddc:	691b      	ldr	r3, [r3, #16]
 801bdde:	4a7d      	ldr	r2, [pc, #500]	@ (801bfd4 <ip4_input+0x27c>)
 801bde0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bde2:	69fb      	ldr	r3, [r7, #28]
 801bde4:	68db      	ldr	r3, [r3, #12]
 801bde6:	4a7b      	ldr	r2, [pc, #492]	@ (801bfd4 <ip4_input+0x27c>)
 801bde8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bdea:	4b7a      	ldr	r3, [pc, #488]	@ (801bfd4 <ip4_input+0x27c>)
 801bdec:	695b      	ldr	r3, [r3, #20]
 801bdee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bdf2:	2be0      	cmp	r3, #224	@ 0xe0
 801bdf4:	d112      	bne.n	801be1c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bdf6:	683b      	ldr	r3, [r7, #0]
 801bdf8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bdfc:	f003 0301 	and.w	r3, r3, #1
 801be00:	b2db      	uxtb	r3, r3
 801be02:	2b00      	cmp	r3, #0
 801be04:	d007      	beq.n	801be16 <ip4_input+0xbe>
 801be06:	683b      	ldr	r3, [r7, #0]
 801be08:	3304      	adds	r3, #4
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d002      	beq.n	801be16 <ip4_input+0xbe>
      netif = inp;
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	61bb      	str	r3, [r7, #24]
 801be14:	e02a      	b.n	801be6c <ip4_input+0x114>
    } else {
      netif = NULL;
 801be16:	2300      	movs	r3, #0
 801be18:	61bb      	str	r3, [r7, #24]
 801be1a:	e027      	b.n	801be6c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801be1c:	6838      	ldr	r0, [r7, #0]
 801be1e:	f7ff ff71 	bl	801bd04 <ip4_input_accept>
 801be22:	4603      	mov	r3, r0
 801be24:	2b00      	cmp	r3, #0
 801be26:	d002      	beq.n	801be2e <ip4_input+0xd6>
      netif = inp;
 801be28:	683b      	ldr	r3, [r7, #0]
 801be2a:	61bb      	str	r3, [r7, #24]
 801be2c:	e01e      	b.n	801be6c <ip4_input+0x114>
    } else {
      netif = NULL;
 801be2e:	2300      	movs	r3, #0
 801be30:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801be32:	4b68      	ldr	r3, [pc, #416]	@ (801bfd4 <ip4_input+0x27c>)
 801be34:	695b      	ldr	r3, [r3, #20]
 801be36:	b2db      	uxtb	r3, r3
 801be38:	2b7f      	cmp	r3, #127	@ 0x7f
 801be3a:	d017      	beq.n	801be6c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801be3c:	4b66      	ldr	r3, [pc, #408]	@ (801bfd8 <ip4_input+0x280>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	61bb      	str	r3, [r7, #24]
 801be42:	e00e      	b.n	801be62 <ip4_input+0x10a>
          if (netif == inp) {
 801be44:	69ba      	ldr	r2, [r7, #24]
 801be46:	683b      	ldr	r3, [r7, #0]
 801be48:	429a      	cmp	r2, r3
 801be4a:	d006      	beq.n	801be5a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801be4c:	69b8      	ldr	r0, [r7, #24]
 801be4e:	f7ff ff59 	bl	801bd04 <ip4_input_accept>
 801be52:	4603      	mov	r3, r0
 801be54:	2b00      	cmp	r3, #0
 801be56:	d108      	bne.n	801be6a <ip4_input+0x112>
 801be58:	e000      	b.n	801be5c <ip4_input+0x104>
            continue;
 801be5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801be5c:	69bb      	ldr	r3, [r7, #24]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	61bb      	str	r3, [r7, #24]
 801be62:	69bb      	ldr	r3, [r7, #24]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d1ed      	bne.n	801be44 <ip4_input+0xec>
 801be68:	e000      	b.n	801be6c <ip4_input+0x114>
            break;
 801be6a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801be6c:	69bb      	ldr	r3, [r7, #24]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d111      	bne.n	801be96 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801be72:	69fb      	ldr	r3, [r7, #28]
 801be74:	7a5b      	ldrb	r3, [r3, #9]
 801be76:	2b11      	cmp	r3, #17
 801be78:	d10d      	bne.n	801be96 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801be7a:	8a7b      	ldrh	r3, [r7, #18]
 801be7c:	69fa      	ldr	r2, [r7, #28]
 801be7e:	4413      	add	r3, r2
 801be80:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	885b      	ldrh	r3, [r3, #2]
 801be86:	b29b      	uxth	r3, r3
 801be88:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801be8c:	d103      	bne.n	801be96 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801be8e:	683b      	ldr	r3, [r7, #0]
 801be90:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801be92:	2300      	movs	r3, #0
 801be94:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d017      	beq.n	801becc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801be9c:	4b4d      	ldr	r3, [pc, #308]	@ (801bfd4 <ip4_input+0x27c>)
 801be9e:	691b      	ldr	r3, [r3, #16]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d013      	beq.n	801becc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bea4:	4b4b      	ldr	r3, [pc, #300]	@ (801bfd4 <ip4_input+0x27c>)
 801bea6:	691b      	ldr	r3, [r3, #16]
 801bea8:	6839      	ldr	r1, [r7, #0]
 801beaa:	4618      	mov	r0, r3
 801beac:	f000 f96e 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801beb0:	4603      	mov	r3, r0
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d105      	bne.n	801bec2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801beb6:	4b47      	ldr	r3, [pc, #284]	@ (801bfd4 <ip4_input+0x27c>)
 801beb8:	691b      	ldr	r3, [r3, #16]
 801beba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bebe:	2be0      	cmp	r3, #224	@ 0xe0
 801bec0:	d104      	bne.n	801becc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bec2:	6878      	ldr	r0, [r7, #4]
 801bec4:	f7f6 fb06 	bl	80124d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bec8:	2300      	movs	r3, #0
 801beca:	e07e      	b.n	801bfca <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801becc:	69bb      	ldr	r3, [r7, #24]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d104      	bne.n	801bedc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bed2:	6878      	ldr	r0, [r7, #4]
 801bed4:	f7f6 fafe 	bl	80124d4 <pbuf_free>
    return ERR_OK;
 801bed8:	2300      	movs	r3, #0
 801beda:	e076      	b.n	801bfca <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bedc:	69fb      	ldr	r3, [r7, #28]
 801bede:	88db      	ldrh	r3, [r3, #6]
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	461a      	mov	r2, r3
 801bee4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bee8:	4013      	ands	r3, r2
 801beea:	2b00      	cmp	r3, #0
 801beec:	d00b      	beq.n	801bf06 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801beee:	6878      	ldr	r0, [r7, #4]
 801bef0:	f000 fc92 	bl	801c818 <ip4_reass>
 801bef4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	2b00      	cmp	r3, #0
 801befa:	d101      	bne.n	801bf00 <ip4_input+0x1a8>
      return ERR_OK;
 801befc:	2300      	movs	r3, #0
 801befe:	e064      	b.n	801bfca <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	685b      	ldr	r3, [r3, #4]
 801bf04:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bf06:	4a33      	ldr	r2, [pc, #204]	@ (801bfd4 <ip4_input+0x27c>)
 801bf08:	69bb      	ldr	r3, [r7, #24]
 801bf0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bf0c:	4a31      	ldr	r2, [pc, #196]	@ (801bfd4 <ip4_input+0x27c>)
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bf12:	4a30      	ldr	r2, [pc, #192]	@ (801bfd4 <ip4_input+0x27c>)
 801bf14:	69fb      	ldr	r3, [r7, #28]
 801bf16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bf18:	69fb      	ldr	r3, [r7, #28]
 801bf1a:	781b      	ldrb	r3, [r3, #0]
 801bf1c:	f003 030f 	and.w	r3, r3, #15
 801bf20:	b2db      	uxtb	r3, r3
 801bf22:	009b      	lsls	r3, r3, #2
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	461a      	mov	r2, r3
 801bf28:	4b2a      	ldr	r3, [pc, #168]	@ (801bfd4 <ip4_input+0x27c>)
 801bf2a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bf2c:	8a7b      	ldrh	r3, [r7, #18]
 801bf2e:	4619      	mov	r1, r3
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7f6 fa49 	bl	80123c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bf36:	69fb      	ldr	r3, [r7, #28]
 801bf38:	7a5b      	ldrb	r3, [r3, #9]
 801bf3a:	2b11      	cmp	r3, #17
 801bf3c:	d006      	beq.n	801bf4c <ip4_input+0x1f4>
 801bf3e:	2b11      	cmp	r3, #17
 801bf40:	dc13      	bgt.n	801bf6a <ip4_input+0x212>
 801bf42:	2b01      	cmp	r3, #1
 801bf44:	d00c      	beq.n	801bf60 <ip4_input+0x208>
 801bf46:	2b06      	cmp	r3, #6
 801bf48:	d005      	beq.n	801bf56 <ip4_input+0x1fe>
 801bf4a:	e00e      	b.n	801bf6a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bf4c:	6839      	ldr	r1, [r7, #0]
 801bf4e:	6878      	ldr	r0, [r7, #4]
 801bf50:	f7fc fa44 	bl	80183dc <udp_input>
        break;
 801bf54:	e026      	b.n	801bfa4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bf56:	6839      	ldr	r1, [r7, #0]
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7f8 fa5b 	bl	8014414 <tcp_input>
        break;
 801bf5e:	e021      	b.n	801bfa4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bf60:	6839      	ldr	r1, [r7, #0]
 801bf62:	6878      	ldr	r0, [r7, #4]
 801bf64:	f7ff fcd0 	bl	801b908 <icmp_input>
        break;
 801bf68:	e01c      	b.n	801bfa4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf6a:	4b1a      	ldr	r3, [pc, #104]	@ (801bfd4 <ip4_input+0x27c>)
 801bf6c:	695b      	ldr	r3, [r3, #20]
 801bf6e:	69b9      	ldr	r1, [r7, #24]
 801bf70:	4618      	mov	r0, r3
 801bf72:	f000 f90b 	bl	801c18c <ip4_addr_isbroadcast_u32>
 801bf76:	4603      	mov	r3, r0
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d10f      	bne.n	801bf9c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bf7c:	4b15      	ldr	r3, [pc, #84]	@ (801bfd4 <ip4_input+0x27c>)
 801bf7e:	695b      	ldr	r3, [r3, #20]
 801bf80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf84:	2be0      	cmp	r3, #224	@ 0xe0
 801bf86:	d009      	beq.n	801bf9c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bf88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f7f6 fa8d 	bl	80124ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bf94:	2102      	movs	r1, #2
 801bf96:	6878      	ldr	r0, [r7, #4]
 801bf98:	f7ff fdba 	bl	801bb10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f7f6 fa99 	bl	80124d4 <pbuf_free>
        break;
 801bfa2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bfa4:	4b0b      	ldr	r3, [pc, #44]	@ (801bfd4 <ip4_input+0x27c>)
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bfaa:	4b0a      	ldr	r3, [pc, #40]	@ (801bfd4 <ip4_input+0x27c>)
 801bfac:	2200      	movs	r2, #0
 801bfae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bfb0:	4b08      	ldr	r3, [pc, #32]	@ (801bfd4 <ip4_input+0x27c>)
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bfb6:	4b07      	ldr	r3, [pc, #28]	@ (801bfd4 <ip4_input+0x27c>)
 801bfb8:	2200      	movs	r2, #0
 801bfba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bfbc:	4b05      	ldr	r3, [pc, #20]	@ (801bfd4 <ip4_input+0x27c>)
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bfc2:	4b04      	ldr	r3, [pc, #16]	@ (801bfd4 <ip4_input+0x27c>)
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bfc8:	2300      	movs	r3, #0
}
 801bfca:	4618      	mov	r0, r3
 801bfcc:	3720      	adds	r7, #32
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bd80      	pop	{r7, pc}
 801bfd2:	bf00      	nop
 801bfd4:	20013e98 	.word	0x20013e98
 801bfd8:	2001774c 	.word	0x2001774c

0801bfdc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b08a      	sub	sp, #40	@ 0x28
 801bfe0:	af04      	add	r7, sp, #16
 801bfe2:	60f8      	str	r0, [r7, #12]
 801bfe4:	60b9      	str	r1, [r7, #8]
 801bfe6:	607a      	str	r2, [r7, #4]
 801bfe8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bfea:	68bb      	ldr	r3, [r7, #8]
 801bfec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d009      	beq.n	801c008 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d003      	beq.n	801c002 <ip4_output_if+0x26>
 801bffa:	68bb      	ldr	r3, [r7, #8]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d102      	bne.n	801c008 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c004:	3304      	adds	r3, #4
 801c006:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c008:	78fa      	ldrb	r2, [r7, #3]
 801c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c00c:	9302      	str	r3, [sp, #8]
 801c00e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c012:	9301      	str	r3, [sp, #4]
 801c014:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c018:	9300      	str	r3, [sp, #0]
 801c01a:	4613      	mov	r3, r2
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	6979      	ldr	r1, [r7, #20]
 801c020:	68f8      	ldr	r0, [r7, #12]
 801c022:	f000 f805 	bl	801c030 <ip4_output_if_src>
 801c026:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c028:	4618      	mov	r0, r3
 801c02a:	3718      	adds	r7, #24
 801c02c:	46bd      	mov	sp, r7
 801c02e:	bd80      	pop	{r7, pc}

0801c030 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b088      	sub	sp, #32
 801c034:	af00      	add	r7, sp, #0
 801c036:	60f8      	str	r0, [r7, #12]
 801c038:	60b9      	str	r1, [r7, #8]
 801c03a:	607a      	str	r2, [r7, #4]
 801c03c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	7b9b      	ldrb	r3, [r3, #14]
 801c042:	2b01      	cmp	r3, #1
 801c044:	d006      	beq.n	801c054 <ip4_output_if_src+0x24>
 801c046:	4b4b      	ldr	r3, [pc, #300]	@ (801c174 <ip4_output_if_src+0x144>)
 801c048:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c04c:	494a      	ldr	r1, [pc, #296]	@ (801c178 <ip4_output_if_src+0x148>)
 801c04e:	484b      	ldr	r0, [pc, #300]	@ (801c17c <ip4_output_if_src+0x14c>)
 801c050:	f002 fa72 	bl	801e538 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d060      	beq.n	801c11c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c05a:	2314      	movs	r3, #20
 801c05c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c05e:	2114      	movs	r1, #20
 801c060:	68f8      	ldr	r0, [r7, #12]
 801c062:	f7f6 f9a1 	bl	80123a8 <pbuf_add_header>
 801c066:	4603      	mov	r3, r0
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d002      	beq.n	801c072 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c06c:	f06f 0301 	mvn.w	r3, #1
 801c070:	e07c      	b.n	801c16c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	895b      	ldrh	r3, [r3, #10]
 801c07c:	2b13      	cmp	r3, #19
 801c07e:	d806      	bhi.n	801c08e <ip4_output_if_src+0x5e>
 801c080:	4b3c      	ldr	r3, [pc, #240]	@ (801c174 <ip4_output_if_src+0x144>)
 801c082:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c086:	493e      	ldr	r1, [pc, #248]	@ (801c180 <ip4_output_if_src+0x150>)
 801c088:	483c      	ldr	r0, [pc, #240]	@ (801c17c <ip4_output_if_src+0x14c>)
 801c08a:	f002 fa55 	bl	801e538 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c08e:	69fb      	ldr	r3, [r7, #28]
 801c090:	78fa      	ldrb	r2, [r7, #3]
 801c092:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c094:	69fb      	ldr	r3, [r7, #28]
 801c096:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c09a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	681a      	ldr	r2, [r3, #0]
 801c0a0:	69fb      	ldr	r3, [r7, #28]
 801c0a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c0a4:	8b7b      	ldrh	r3, [r7, #26]
 801c0a6:	089b      	lsrs	r3, r3, #2
 801c0a8:	b29b      	uxth	r3, r3
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0b0:	b2da      	uxtb	r2, r3
 801c0b2:	69fb      	ldr	r3, [r7, #28]
 801c0b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c0b6:	69fb      	ldr	r3, [r7, #28]
 801c0b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c0bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	891b      	ldrh	r3, [r3, #8]
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	f7f4 fb1a 	bl	80106fc <lwip_htons>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	461a      	mov	r2, r3
 801c0cc:	69fb      	ldr	r3, [r7, #28]
 801c0ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	719a      	strb	r2, [r3, #6]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c0da:	4b2a      	ldr	r3, [pc, #168]	@ (801c184 <ip4_output_if_src+0x154>)
 801c0dc:	881b      	ldrh	r3, [r3, #0]
 801c0de:	4618      	mov	r0, r3
 801c0e0:	f7f4 fb0c 	bl	80106fc <lwip_htons>
 801c0e4:	4603      	mov	r3, r0
 801c0e6:	461a      	mov	r2, r3
 801c0e8:	69fb      	ldr	r3, [r7, #28]
 801c0ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c0ec:	4b25      	ldr	r3, [pc, #148]	@ (801c184 <ip4_output_if_src+0x154>)
 801c0ee:	881b      	ldrh	r3, [r3, #0]
 801c0f0:	3301      	adds	r3, #1
 801c0f2:	b29a      	uxth	r2, r3
 801c0f4:	4b23      	ldr	r3, [pc, #140]	@ (801c184 <ip4_output_if_src+0x154>)
 801c0f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d104      	bne.n	801c108 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c0fe:	4b22      	ldr	r3, [pc, #136]	@ (801c188 <ip4_output_if_src+0x158>)
 801c100:	681a      	ldr	r2, [r3, #0]
 801c102:	69fb      	ldr	r3, [r7, #28]
 801c104:	60da      	str	r2, [r3, #12]
 801c106:	e003      	b.n	801c110 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	681a      	ldr	r2, [r3, #0]
 801c10c:	69fb      	ldr	r3, [r7, #28]
 801c10e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c110:	69fb      	ldr	r3, [r7, #28]
 801c112:	2200      	movs	r2, #0
 801c114:	729a      	strb	r2, [r3, #10]
 801c116:	2200      	movs	r2, #0
 801c118:	72da      	strb	r2, [r3, #11]
 801c11a:	e00f      	b.n	801c13c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	895b      	ldrh	r3, [r3, #10]
 801c120:	2b13      	cmp	r3, #19
 801c122:	d802      	bhi.n	801c12a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c124:	f06f 0301 	mvn.w	r3, #1
 801c128:	e020      	b.n	801c16c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	685b      	ldr	r3, [r3, #4]
 801c12e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c130:	69fb      	ldr	r3, [r7, #28]
 801c132:	691b      	ldr	r3, [r3, #16]
 801c134:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c136:	f107 0314 	add.w	r3, r7, #20
 801c13a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c13e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c140:	2b00      	cmp	r3, #0
 801c142:	d00c      	beq.n	801c15e <ip4_output_if_src+0x12e>
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	891a      	ldrh	r2, [r3, #8]
 801c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c14a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c14c:	429a      	cmp	r2, r3
 801c14e:	d906      	bls.n	801c15e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c150:	687a      	ldr	r2, [r7, #4]
 801c152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c154:	68f8      	ldr	r0, [r7, #12]
 801c156:	f000 fd53 	bl	801cc00 <ip4_frag>
 801c15a:	4603      	mov	r3, r0
 801c15c:	e006      	b.n	801c16c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c160:	695b      	ldr	r3, [r3, #20]
 801c162:	687a      	ldr	r2, [r7, #4]
 801c164:	68f9      	ldr	r1, [r7, #12]
 801c166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c168:	4798      	blx	r3
 801c16a:	4603      	mov	r3, r0
}
 801c16c:	4618      	mov	r0, r3
 801c16e:	3720      	adds	r7, #32
 801c170:	46bd      	mov	sp, r7
 801c172:	bd80      	pop	{r7, pc}
 801c174:	08024b64 	.word	0x08024b64
 801c178:	08024b98 	.word	0x08024b98
 801c17c:	08024ba4 	.word	0x08024ba4
 801c180:	08024bcc 	.word	0x08024bcc
 801c184:	200178ea 	.word	0x200178ea
 801c188:	0802521c 	.word	0x0802521c

0801c18c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c18c:	b480      	push	{r7}
 801c18e:	b085      	sub	sp, #20
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
 801c194:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1a0:	d002      	beq.n	801c1a8 <ip4_addr_isbroadcast_u32+0x1c>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d101      	bne.n	801c1ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c1a8:	2301      	movs	r3, #1
 801c1aa:	e02a      	b.n	801c202 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c1b2:	f003 0302 	and.w	r3, r3, #2
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d101      	bne.n	801c1be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	e021      	b.n	801c202 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	3304      	adds	r3, #4
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	687a      	ldr	r2, [r7, #4]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d101      	bne.n	801c1ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c1ca:	2300      	movs	r3, #0
 801c1cc:	e019      	b.n	801c202 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c1ce:	68fa      	ldr	r2, [r7, #12]
 801c1d0:	683b      	ldr	r3, [r7, #0]
 801c1d2:	3304      	adds	r3, #4
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	405a      	eors	r2, r3
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	3308      	adds	r3, #8
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	4013      	ands	r3, r2
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d10d      	bne.n	801c200 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	3308      	adds	r3, #8
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	43da      	mvns	r2, r3
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	3308      	adds	r3, #8
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	d101      	bne.n	801c200 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c1fc:	2301      	movs	r3, #1
 801c1fe:	e000      	b.n	801c202 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c200:	2300      	movs	r3, #0
  }
}
 801c202:	4618      	mov	r0, r3
 801c204:	3714      	adds	r7, #20
 801c206:	46bd      	mov	sp, r7
 801c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20c:	4770      	bx	lr
	...

0801c210 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b084      	sub	sp, #16
 801c214:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c216:	2300      	movs	r3, #0
 801c218:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c21a:	4b12      	ldr	r3, [pc, #72]	@ (801c264 <ip_reass_tmr+0x54>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c220:	e018      	b.n	801c254 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	7fdb      	ldrb	r3, [r3, #31]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d00b      	beq.n	801c242 <ip_reass_tmr+0x32>
      r->timer--;
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	7fdb      	ldrb	r3, [r3, #31]
 801c22e:	3b01      	subs	r3, #1
 801c230:	b2da      	uxtb	r2, r3
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	60fb      	str	r3, [r7, #12]
 801c240:	e008      	b.n	801c254 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c24c:	68b9      	ldr	r1, [r7, #8]
 801c24e:	6878      	ldr	r0, [r7, #4]
 801c250:	f000 f80a 	bl	801c268 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d1e3      	bne.n	801c222 <ip_reass_tmr+0x12>
    }
  }
}
 801c25a:	bf00      	nop
 801c25c:	bf00      	nop
 801c25e:	3710      	adds	r7, #16
 801c260:	46bd      	mov	sp, r7
 801c262:	bd80      	pop	{r7, pc}
 801c264:	200178ec 	.word	0x200178ec

0801c268 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b088      	sub	sp, #32
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c272:	2300      	movs	r3, #0
 801c274:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c276:	683a      	ldr	r2, [r7, #0]
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	429a      	cmp	r2, r3
 801c27c:	d105      	bne.n	801c28a <ip_reass_free_complete_datagram+0x22>
 801c27e:	4b45      	ldr	r3, [pc, #276]	@ (801c394 <ip_reass_free_complete_datagram+0x12c>)
 801c280:	22ab      	movs	r2, #171	@ 0xab
 801c282:	4945      	ldr	r1, [pc, #276]	@ (801c398 <ip_reass_free_complete_datagram+0x130>)
 801c284:	4845      	ldr	r0, [pc, #276]	@ (801c39c <ip_reass_free_complete_datagram+0x134>)
 801c286:	f002 f957 	bl	801e538 <iprintf>
  if (prev != NULL) {
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d00a      	beq.n	801c2a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	687a      	ldr	r2, [r7, #4]
 801c296:	429a      	cmp	r2, r3
 801c298:	d005      	beq.n	801c2a6 <ip_reass_free_complete_datagram+0x3e>
 801c29a:	4b3e      	ldr	r3, [pc, #248]	@ (801c394 <ip_reass_free_complete_datagram+0x12c>)
 801c29c:	22ad      	movs	r2, #173	@ 0xad
 801c29e:	4940      	ldr	r1, [pc, #256]	@ (801c3a0 <ip_reass_free_complete_datagram+0x138>)
 801c2a0:	483e      	ldr	r0, [pc, #248]	@ (801c39c <ip_reass_free_complete_datagram+0x134>)
 801c2a2:	f002 f949 	bl	801e538 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	685b      	ldr	r3, [r3, #4]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c2ae:	697b      	ldr	r3, [r7, #20]
 801c2b0:	889b      	ldrh	r3, [r3, #4]
 801c2b2:	b29b      	uxth	r3, r3
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d12a      	bne.n	801c30e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	685b      	ldr	r3, [r3, #4]
 801c2bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c2be:	697b      	ldr	r3, [r7, #20]
 801c2c0:	681a      	ldr	r2, [r3, #0]
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c2c6:	69bb      	ldr	r3, [r7, #24]
 801c2c8:	6858      	ldr	r0, [r3, #4]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	3308      	adds	r3, #8
 801c2ce:	2214      	movs	r2, #20
 801c2d0:	4619      	mov	r1, r3
 801c2d2:	f002 fbc8 	bl	801ea66 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c2d6:	2101      	movs	r1, #1
 801c2d8:	69b8      	ldr	r0, [r7, #24]
 801c2da:	f7ff fc29 	bl	801bb30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c2de:	69b8      	ldr	r0, [r7, #24]
 801c2e0:	f7f6 f986 	bl	80125f0 <pbuf_clen>
 801c2e4:	4603      	mov	r3, r0
 801c2e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c2e8:	8bfa      	ldrh	r2, [r7, #30]
 801c2ea:	8a7b      	ldrh	r3, [r7, #18]
 801c2ec:	4413      	add	r3, r2
 801c2ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c2f2:	db05      	blt.n	801c300 <ip_reass_free_complete_datagram+0x98>
 801c2f4:	4b27      	ldr	r3, [pc, #156]	@ (801c394 <ip_reass_free_complete_datagram+0x12c>)
 801c2f6:	22bc      	movs	r2, #188	@ 0xbc
 801c2f8:	492a      	ldr	r1, [pc, #168]	@ (801c3a4 <ip_reass_free_complete_datagram+0x13c>)
 801c2fa:	4828      	ldr	r0, [pc, #160]	@ (801c39c <ip_reass_free_complete_datagram+0x134>)
 801c2fc:	f002 f91c 	bl	801e538 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c300:	8bfa      	ldrh	r2, [r7, #30]
 801c302:	8a7b      	ldrh	r3, [r7, #18]
 801c304:	4413      	add	r3, r2
 801c306:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c308:	69b8      	ldr	r0, [r7, #24]
 801c30a:	f7f6 f8e3 	bl	80124d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	685b      	ldr	r3, [r3, #4]
 801c312:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c314:	e01f      	b.n	801c356 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c316:	69bb      	ldr	r3, [r7, #24]
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c31c:	69bb      	ldr	r3, [r7, #24]
 801c31e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c320:	697b      	ldr	r3, [r7, #20]
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c326:	68f8      	ldr	r0, [r7, #12]
 801c328:	f7f6 f962 	bl	80125f0 <pbuf_clen>
 801c32c:	4603      	mov	r3, r0
 801c32e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c330:	8bfa      	ldrh	r2, [r7, #30]
 801c332:	8a7b      	ldrh	r3, [r7, #18]
 801c334:	4413      	add	r3, r2
 801c336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c33a:	db05      	blt.n	801c348 <ip_reass_free_complete_datagram+0xe0>
 801c33c:	4b15      	ldr	r3, [pc, #84]	@ (801c394 <ip_reass_free_complete_datagram+0x12c>)
 801c33e:	22cc      	movs	r2, #204	@ 0xcc
 801c340:	4918      	ldr	r1, [pc, #96]	@ (801c3a4 <ip_reass_free_complete_datagram+0x13c>)
 801c342:	4816      	ldr	r0, [pc, #88]	@ (801c39c <ip_reass_free_complete_datagram+0x134>)
 801c344:	f002 f8f8 	bl	801e538 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c348:	8bfa      	ldrh	r2, [r7, #30]
 801c34a:	8a7b      	ldrh	r3, [r7, #18]
 801c34c:	4413      	add	r3, r2
 801c34e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c350:	68f8      	ldr	r0, [r7, #12]
 801c352:	f7f6 f8bf 	bl	80124d4 <pbuf_free>
  while (p != NULL) {
 801c356:	69bb      	ldr	r3, [r7, #24]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d1dc      	bne.n	801c316 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c35c:	6839      	ldr	r1, [r7, #0]
 801c35e:	6878      	ldr	r0, [r7, #4]
 801c360:	f000 f8c2 	bl	801c4e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c364:	4b10      	ldr	r3, [pc, #64]	@ (801c3a8 <ip_reass_free_complete_datagram+0x140>)
 801c366:	881b      	ldrh	r3, [r3, #0]
 801c368:	8bfa      	ldrh	r2, [r7, #30]
 801c36a:	429a      	cmp	r2, r3
 801c36c:	d905      	bls.n	801c37a <ip_reass_free_complete_datagram+0x112>
 801c36e:	4b09      	ldr	r3, [pc, #36]	@ (801c394 <ip_reass_free_complete_datagram+0x12c>)
 801c370:	22d2      	movs	r2, #210	@ 0xd2
 801c372:	490e      	ldr	r1, [pc, #56]	@ (801c3ac <ip_reass_free_complete_datagram+0x144>)
 801c374:	4809      	ldr	r0, [pc, #36]	@ (801c39c <ip_reass_free_complete_datagram+0x134>)
 801c376:	f002 f8df 	bl	801e538 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c37a:	4b0b      	ldr	r3, [pc, #44]	@ (801c3a8 <ip_reass_free_complete_datagram+0x140>)
 801c37c:	881a      	ldrh	r2, [r3, #0]
 801c37e:	8bfb      	ldrh	r3, [r7, #30]
 801c380:	1ad3      	subs	r3, r2, r3
 801c382:	b29a      	uxth	r2, r3
 801c384:	4b08      	ldr	r3, [pc, #32]	@ (801c3a8 <ip_reass_free_complete_datagram+0x140>)
 801c386:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c388:	8bfb      	ldrh	r3, [r7, #30]
}
 801c38a:	4618      	mov	r0, r3
 801c38c:	3720      	adds	r7, #32
 801c38e:	46bd      	mov	sp, r7
 801c390:	bd80      	pop	{r7, pc}
 801c392:	bf00      	nop
 801c394:	08024bfc 	.word	0x08024bfc
 801c398:	08024c38 	.word	0x08024c38
 801c39c:	08024c44 	.word	0x08024c44
 801c3a0:	08024c6c 	.word	0x08024c6c
 801c3a4:	08024c80 	.word	0x08024c80
 801c3a8:	200178f0 	.word	0x200178f0
 801c3ac:	08024ca0 	.word	0x08024ca0

0801c3b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b08a      	sub	sp, #40	@ 0x28
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c3be:	2300      	movs	r3, #0
 801c3c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c3ce:	4b28      	ldr	r3, [pc, #160]	@ (801c470 <ip_reass_remove_oldest_datagram+0xc0>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c3d4:	e030      	b.n	801c438 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3d8:	695a      	ldr	r2, [r3, #20]
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	68db      	ldr	r3, [r3, #12]
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d10c      	bne.n	801c3fc <ip_reass_remove_oldest_datagram+0x4c>
 801c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3e4:	699a      	ldr	r2, [r3, #24]
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	691b      	ldr	r3, [r3, #16]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	d106      	bne.n	801c3fc <ip_reass_remove_oldest_datagram+0x4c>
 801c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f0:	899a      	ldrh	r2, [r3, #12]
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	889b      	ldrh	r3, [r3, #4]
 801c3f6:	b29b      	uxth	r3, r3
 801c3f8:	429a      	cmp	r2, r3
 801c3fa:	d014      	beq.n	801c426 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	3301      	adds	r3, #1
 801c400:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c402:	6a3b      	ldr	r3, [r7, #32]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d104      	bne.n	801c412 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c40c:	69fb      	ldr	r3, [r7, #28]
 801c40e:	61bb      	str	r3, [r7, #24]
 801c410:	e009      	b.n	801c426 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c414:	7fda      	ldrb	r2, [r3, #31]
 801c416:	6a3b      	ldr	r3, [r7, #32]
 801c418:	7fdb      	ldrb	r3, [r3, #31]
 801c41a:	429a      	cmp	r2, r3
 801c41c:	d803      	bhi.n	801c426 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c420:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c422:	69fb      	ldr	r3, [r7, #28]
 801c424:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d001      	beq.n	801c432 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c430:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1cb      	bne.n	801c3d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c43e:	6a3b      	ldr	r3, [r7, #32]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d008      	beq.n	801c456 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c444:	69b9      	ldr	r1, [r7, #24]
 801c446:	6a38      	ldr	r0, [r7, #32]
 801c448:	f7ff ff0e 	bl	801c268 <ip_reass_free_complete_datagram>
 801c44c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c44e:	697a      	ldr	r2, [r7, #20]
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	4413      	add	r3, r2
 801c454:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c456:	697a      	ldr	r2, [r7, #20]
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	429a      	cmp	r2, r3
 801c45c:	da02      	bge.n	801c464 <ip_reass_remove_oldest_datagram+0xb4>
 801c45e:	693b      	ldr	r3, [r7, #16]
 801c460:	2b01      	cmp	r3, #1
 801c462:	dcac      	bgt.n	801c3be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c464:	697b      	ldr	r3, [r7, #20]
}
 801c466:	4618      	mov	r0, r3
 801c468:	3728      	adds	r7, #40	@ 0x28
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	bf00      	nop
 801c470:	200178ec 	.word	0x200178ec

0801c474 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b084      	sub	sp, #16
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c47e:	2004      	movs	r0, #4
 801c480:	f7f5 f902 	bl	8011688 <memp_malloc>
 801c484:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d110      	bne.n	801c4ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c48c:	6839      	ldr	r1, [r7, #0]
 801c48e:	6878      	ldr	r0, [r7, #4]
 801c490:	f7ff ff8e 	bl	801c3b0 <ip_reass_remove_oldest_datagram>
 801c494:	4602      	mov	r2, r0
 801c496:	683b      	ldr	r3, [r7, #0]
 801c498:	4293      	cmp	r3, r2
 801c49a:	dc03      	bgt.n	801c4a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c49c:	2004      	movs	r0, #4
 801c49e:	f7f5 f8f3 	bl	8011688 <memp_malloc>
 801c4a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d101      	bne.n	801c4ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	e016      	b.n	801c4dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c4ae:	2220      	movs	r2, #32
 801c4b0:	2100      	movs	r1, #0
 801c4b2:	68f8      	ldr	r0, [r7, #12]
 801c4b4:	f002 f974 	bl	801e7a0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	220f      	movs	r2, #15
 801c4bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c4be:	4b09      	ldr	r3, [pc, #36]	@ (801c4e4 <ip_reass_enqueue_new_datagram+0x70>)
 801c4c0:	681a      	ldr	r2, [r3, #0]
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c4c6:	4a07      	ldr	r2, [pc, #28]	@ (801c4e4 <ip_reass_enqueue_new_datagram+0x70>)
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	3308      	adds	r3, #8
 801c4d0:	2214      	movs	r2, #20
 801c4d2:	6879      	ldr	r1, [r7, #4]
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f002 fac6 	bl	801ea66 <memcpy>
  return ipr;
 801c4da:	68fb      	ldr	r3, [r7, #12]
}
 801c4dc:	4618      	mov	r0, r3
 801c4de:	3710      	adds	r7, #16
 801c4e0:	46bd      	mov	sp, r7
 801c4e2:	bd80      	pop	{r7, pc}
 801c4e4:	200178ec 	.word	0x200178ec

0801c4e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b082      	sub	sp, #8
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
 801c4f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c4f2:	4b10      	ldr	r3, [pc, #64]	@ (801c534 <ip_reass_dequeue_datagram+0x4c>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	687a      	ldr	r2, [r7, #4]
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	d104      	bne.n	801c506 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4a0c      	ldr	r2, [pc, #48]	@ (801c534 <ip_reass_dequeue_datagram+0x4c>)
 801c502:	6013      	str	r3, [r2, #0]
 801c504:	e00d      	b.n	801c522 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c506:	683b      	ldr	r3, [r7, #0]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d106      	bne.n	801c51a <ip_reass_dequeue_datagram+0x32>
 801c50c:	4b0a      	ldr	r3, [pc, #40]	@ (801c538 <ip_reass_dequeue_datagram+0x50>)
 801c50e:	f240 1245 	movw	r2, #325	@ 0x145
 801c512:	490a      	ldr	r1, [pc, #40]	@ (801c53c <ip_reass_dequeue_datagram+0x54>)
 801c514:	480a      	ldr	r0, [pc, #40]	@ (801c540 <ip_reass_dequeue_datagram+0x58>)
 801c516:	f002 f80f 	bl	801e538 <iprintf>
    prev->next = ipr->next;
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681a      	ldr	r2, [r3, #0]
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c522:	6879      	ldr	r1, [r7, #4]
 801c524:	2004      	movs	r0, #4
 801c526:	f7f5 f925 	bl	8011774 <memp_free>
}
 801c52a:	bf00      	nop
 801c52c:	3708      	adds	r7, #8
 801c52e:	46bd      	mov	sp, r7
 801c530:	bd80      	pop	{r7, pc}
 801c532:	bf00      	nop
 801c534:	200178ec 	.word	0x200178ec
 801c538:	08024bfc 	.word	0x08024bfc
 801c53c:	08024cc4 	.word	0x08024cc4
 801c540:	08024c44 	.word	0x08024c44

0801c544 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b08c      	sub	sp, #48	@ 0x30
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c550:	2300      	movs	r3, #0
 801c552:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c554:	2301      	movs	r3, #1
 801c556:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	685b      	ldr	r3, [r3, #4]
 801c55c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c55e:	69fb      	ldr	r3, [r7, #28]
 801c560:	885b      	ldrh	r3, [r3, #2]
 801c562:	b29b      	uxth	r3, r3
 801c564:	4618      	mov	r0, r3
 801c566:	f7f4 f8c9 	bl	80106fc <lwip_htons>
 801c56a:	4603      	mov	r3, r0
 801c56c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c56e:	69fb      	ldr	r3, [r7, #28]
 801c570:	781b      	ldrb	r3, [r3, #0]
 801c572:	f003 030f 	and.w	r3, r3, #15
 801c576:	b2db      	uxtb	r3, r3
 801c578:	009b      	lsls	r3, r3, #2
 801c57a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c57c:	7e7b      	ldrb	r3, [r7, #25]
 801c57e:	b29b      	uxth	r3, r3
 801c580:	8b7a      	ldrh	r2, [r7, #26]
 801c582:	429a      	cmp	r2, r3
 801c584:	d202      	bcs.n	801c58c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c586:	f04f 33ff 	mov.w	r3, #4294967295
 801c58a:	e135      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c58c:	7e7b      	ldrb	r3, [r7, #25]
 801c58e:	b29b      	uxth	r3, r3
 801c590:	8b7a      	ldrh	r2, [r7, #26]
 801c592:	1ad3      	subs	r3, r2, r3
 801c594:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c596:	69fb      	ldr	r3, [r7, #28]
 801c598:	88db      	ldrh	r3, [r3, #6]
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	4618      	mov	r0, r3
 801c59e:	f7f4 f8ad 	bl	80106fc <lwip_htons>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	00db      	lsls	r3, r3, #3
 801c5ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c5ae:	68bb      	ldr	r3, [r7, #8]
 801c5b0:	685b      	ldr	r3, [r3, #4]
 801c5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5b6:	2200      	movs	r2, #0
 801c5b8:	701a      	strb	r2, [r3, #0]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	705a      	strb	r2, [r3, #1]
 801c5be:	2200      	movs	r2, #0
 801c5c0:	709a      	strb	r2, [r3, #2]
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5c8:	8afa      	ldrh	r2, [r7, #22]
 801c5ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c5cc:	8afa      	ldrh	r2, [r7, #22]
 801c5ce:	8b7b      	ldrh	r3, [r7, #26]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	b29a      	uxth	r2, r3
 801c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5da:	88db      	ldrh	r3, [r3, #6]
 801c5dc:	b29b      	uxth	r3, r3
 801c5de:	8afa      	ldrh	r2, [r7, #22]
 801c5e0:	429a      	cmp	r2, r3
 801c5e2:	d902      	bls.n	801c5ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c5e8:	e106      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	685b      	ldr	r3, [r3, #4]
 801c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
 801c5f0:	e068      	b.n	801c6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5f4:	685b      	ldr	r3, [r3, #4]
 801c5f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5fa:	889b      	ldrh	r3, [r3, #4]
 801c5fc:	b29a      	uxth	r2, r3
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	889b      	ldrh	r3, [r3, #4]
 801c602:	b29b      	uxth	r3, r3
 801c604:	429a      	cmp	r2, r3
 801c606:	d235      	bcs.n	801c674 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c60c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c610:	2b00      	cmp	r3, #0
 801c612:	d020      	beq.n	801c656 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c616:	889b      	ldrh	r3, [r3, #4]
 801c618:	b29a      	uxth	r2, r3
 801c61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c61c:	88db      	ldrh	r3, [r3, #6]
 801c61e:	b29b      	uxth	r3, r3
 801c620:	429a      	cmp	r2, r3
 801c622:	d307      	bcc.n	801c634 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c626:	88db      	ldrh	r3, [r3, #6]
 801c628:	b29a      	uxth	r2, r3
 801c62a:	693b      	ldr	r3, [r7, #16]
 801c62c:	889b      	ldrh	r3, [r3, #4]
 801c62e:	b29b      	uxth	r3, r3
 801c630:	429a      	cmp	r2, r3
 801c632:	d902      	bls.n	801c63a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c634:	f04f 33ff 	mov.w	r3, #4294967295
 801c638:	e0de      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c63c:	68ba      	ldr	r2, [r7, #8]
 801c63e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c642:	88db      	ldrh	r3, [r3, #6]
 801c644:	b29a      	uxth	r2, r3
 801c646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c648:	889b      	ldrh	r3, [r3, #4]
 801c64a:	b29b      	uxth	r3, r3
 801c64c:	429a      	cmp	r2, r3
 801c64e:	d03d      	beq.n	801c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c650:	2300      	movs	r3, #0
 801c652:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c654:	e03a      	b.n	801c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c658:	88db      	ldrh	r3, [r3, #6]
 801c65a:	b29a      	uxth	r2, r3
 801c65c:	693b      	ldr	r3, [r7, #16]
 801c65e:	889b      	ldrh	r3, [r3, #4]
 801c660:	b29b      	uxth	r3, r3
 801c662:	429a      	cmp	r2, r3
 801c664:	d902      	bls.n	801c66c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c666:	f04f 33ff 	mov.w	r3, #4294967295
 801c66a:	e0c5      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	68ba      	ldr	r2, [r7, #8]
 801c670:	605a      	str	r2, [r3, #4]
      break;
 801c672:	e02b      	b.n	801c6cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c676:	889b      	ldrh	r3, [r3, #4]
 801c678:	b29a      	uxth	r2, r3
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	889b      	ldrh	r3, [r3, #4]
 801c67e:	b29b      	uxth	r3, r3
 801c680:	429a      	cmp	r2, r3
 801c682:	d102      	bne.n	801c68a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c684:	f04f 33ff 	mov.w	r3, #4294967295
 801c688:	e0b6      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c68c:	889b      	ldrh	r3, [r3, #4]
 801c68e:	b29a      	uxth	r2, r3
 801c690:	693b      	ldr	r3, [r7, #16]
 801c692:	88db      	ldrh	r3, [r3, #6]
 801c694:	b29b      	uxth	r3, r3
 801c696:	429a      	cmp	r2, r3
 801c698:	d202      	bcs.n	801c6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c69a:	f04f 33ff 	mov.w	r3, #4294967295
 801c69e:	e0ab      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d009      	beq.n	801c6ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6a8:	88db      	ldrh	r3, [r3, #6]
 801c6aa:	b29a      	uxth	r2, r3
 801c6ac:	693b      	ldr	r3, [r7, #16]
 801c6ae:	889b      	ldrh	r3, [r3, #4]
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d001      	beq.n	801c6ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c6ba:	693b      	ldr	r3, [r7, #16]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d193      	bne.n	801c5f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c6ca:	e000      	b.n	801c6ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c6cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d12d      	bne.n	801c730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d01c      	beq.n	801c714 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6dc:	88db      	ldrh	r3, [r3, #6]
 801c6de:	b29a      	uxth	r2, r3
 801c6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6e2:	889b      	ldrh	r3, [r3, #4]
 801c6e4:	b29b      	uxth	r3, r3
 801c6e6:	429a      	cmp	r2, r3
 801c6e8:	d906      	bls.n	801c6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c6ea:	4b45      	ldr	r3, [pc, #276]	@ (801c800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c6ec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c6f0:	4944      	ldr	r1, [pc, #272]	@ (801c804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c6f2:	4845      	ldr	r0, [pc, #276]	@ (801c808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c6f4:	f001 ff20 	bl	801e538 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6fa:	68ba      	ldr	r2, [r7, #8]
 801c6fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c700:	88db      	ldrh	r3, [r3, #6]
 801c702:	b29a      	uxth	r2, r3
 801c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c706:	889b      	ldrh	r3, [r3, #4]
 801c708:	b29b      	uxth	r3, r3
 801c70a:	429a      	cmp	r2, r3
 801c70c:	d010      	beq.n	801c730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c70e:	2300      	movs	r3, #0
 801c710:	623b      	str	r3, [r7, #32]
 801c712:	e00d      	b.n	801c730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	685b      	ldr	r3, [r3, #4]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d006      	beq.n	801c72a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c71c:	4b38      	ldr	r3, [pc, #224]	@ (801c800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c71e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c722:	493a      	ldr	r1, [pc, #232]	@ (801c80c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c724:	4838      	ldr	r0, [pc, #224]	@ (801c808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c726:	f001 ff07 	bl	801e538 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	68ba      	ldr	r2, [r7, #8]
 801c72e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d105      	bne.n	801c742 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	7f9b      	ldrb	r3, [r3, #30]
 801c73a:	f003 0301 	and.w	r3, r3, #1
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d059      	beq.n	801c7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c742:	6a3b      	ldr	r3, [r7, #32]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d04f      	beq.n	801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	685b      	ldr	r3, [r3, #4]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d006      	beq.n	801c75e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	685b      	ldr	r3, [r3, #4]
 801c754:	685b      	ldr	r3, [r3, #4]
 801c756:	889b      	ldrh	r3, [r3, #4]
 801c758:	b29b      	uxth	r3, r3
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d002      	beq.n	801c764 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c75e:	2300      	movs	r3, #0
 801c760:	623b      	str	r3, [r7, #32]
 801c762:	e041      	b.n	801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c766:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c76e:	e012      	b.n	801c796 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c772:	685b      	ldr	r3, [r3, #4]
 801c774:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c778:	88db      	ldrh	r3, [r3, #6]
 801c77a:	b29a      	uxth	r2, r3
 801c77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c77e:	889b      	ldrh	r3, [r3, #4]
 801c780:	b29b      	uxth	r3, r3
 801c782:	429a      	cmp	r2, r3
 801c784:	d002      	beq.n	801c78c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c786:	2300      	movs	r3, #0
 801c788:	623b      	str	r3, [r7, #32]
            break;
 801c78a:	e007      	b.n	801c79c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c78e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d1e9      	bne.n	801c770 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c79c:	6a3b      	ldr	r3, [r7, #32]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d022      	beq.n	801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d106      	bne.n	801c7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c7aa:	4b15      	ldr	r3, [pc, #84]	@ (801c800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c7ac:	f240 12df 	movw	r2, #479	@ 0x1df
 801c7b0:	4917      	ldr	r1, [pc, #92]	@ (801c810 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c7b2:	4815      	ldr	r0, [pc, #84]	@ (801c808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c7b4:	f001 fec0 	bl	801e538 <iprintf>
          LWIP_ASSERT("sanity check",
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	685b      	ldr	r3, [r3, #4]
 801c7bc:	685b      	ldr	r3, [r3, #4]
 801c7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	d106      	bne.n	801c7d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c7c4:	4b0e      	ldr	r3, [pc, #56]	@ (801c800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c7c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c7ca:	4911      	ldr	r1, [pc, #68]	@ (801c810 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c7cc:	480e      	ldr	r0, [pc, #56]	@ (801c808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c7ce:	f001 feb3 	bl	801e538 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d006      	beq.n	801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c7da:	4b09      	ldr	r3, [pc, #36]	@ (801c800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c7dc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c7e0:	490c      	ldr	r1, [pc, #48]	@ (801c814 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c7e2:	4809      	ldr	r0, [pc, #36]	@ (801c808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c7e4:	f001 fea8 	bl	801e538 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c7e8:	6a3b      	ldr	r3, [r7, #32]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	bf14      	ite	ne
 801c7ee:	2301      	movne	r3, #1
 801c7f0:	2300      	moveq	r3, #0
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	e000      	b.n	801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c7f6:	2300      	movs	r3, #0
}
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	3730      	adds	r7, #48	@ 0x30
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	bd80      	pop	{r7, pc}
 801c800:	08024bfc 	.word	0x08024bfc
 801c804:	08024ce0 	.word	0x08024ce0
 801c808:	08024c44 	.word	0x08024c44
 801c80c:	08024d00 	.word	0x08024d00
 801c810:	08024d38 	.word	0x08024d38
 801c814:	08024d48 	.word	0x08024d48

0801c818 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b08e      	sub	sp, #56	@ 0x38
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	685b      	ldr	r3, [r3, #4]
 801c824:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c828:	781b      	ldrb	r3, [r3, #0]
 801c82a:	f003 030f 	and.w	r3, r3, #15
 801c82e:	b2db      	uxtb	r3, r3
 801c830:	009b      	lsls	r3, r3, #2
 801c832:	b2db      	uxtb	r3, r3
 801c834:	2b14      	cmp	r3, #20
 801c836:	f040 8171 	bne.w	801cb1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c83c:	88db      	ldrh	r3, [r3, #6]
 801c83e:	b29b      	uxth	r3, r3
 801c840:	4618      	mov	r0, r3
 801c842:	f7f3 ff5b 	bl	80106fc <lwip_htons>
 801c846:	4603      	mov	r3, r0
 801c848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c84c:	b29b      	uxth	r3, r3
 801c84e:	00db      	lsls	r3, r3, #3
 801c850:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c854:	885b      	ldrh	r3, [r3, #2]
 801c856:	b29b      	uxth	r3, r3
 801c858:	4618      	mov	r0, r3
 801c85a:	f7f3 ff4f 	bl	80106fc <lwip_htons>
 801c85e:	4603      	mov	r3, r0
 801c860:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c864:	781b      	ldrb	r3, [r3, #0]
 801c866:	f003 030f 	and.w	r3, r3, #15
 801c86a:	b2db      	uxtb	r3, r3
 801c86c:	009b      	lsls	r3, r3, #2
 801c86e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c872:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c876:	b29b      	uxth	r3, r3
 801c878:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c87a:	429a      	cmp	r2, r3
 801c87c:	f0c0 8150 	bcc.w	801cb20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c884:	b29b      	uxth	r3, r3
 801c886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c888:	1ad3      	subs	r3, r2, r3
 801c88a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c88c:	6878      	ldr	r0, [r7, #4]
 801c88e:	f7f5 feaf 	bl	80125f0 <pbuf_clen>
 801c892:	4603      	mov	r3, r0
 801c894:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c896:	4b8c      	ldr	r3, [pc, #560]	@ (801cac8 <ip4_reass+0x2b0>)
 801c898:	881b      	ldrh	r3, [r3, #0]
 801c89a:	461a      	mov	r2, r3
 801c89c:	8c3b      	ldrh	r3, [r7, #32]
 801c89e:	4413      	add	r3, r2
 801c8a0:	2b0a      	cmp	r3, #10
 801c8a2:	dd10      	ble.n	801c8c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c8a4:	8c3b      	ldrh	r3, [r7, #32]
 801c8a6:	4619      	mov	r1, r3
 801c8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c8aa:	f7ff fd81 	bl	801c3b0 <ip_reass_remove_oldest_datagram>
 801c8ae:	4603      	mov	r3, r0
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	f000 8137 	beq.w	801cb24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c8b6:	4b84      	ldr	r3, [pc, #528]	@ (801cac8 <ip4_reass+0x2b0>)
 801c8b8:	881b      	ldrh	r3, [r3, #0]
 801c8ba:	461a      	mov	r2, r3
 801c8bc:	8c3b      	ldrh	r3, [r7, #32]
 801c8be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c8c0:	2b0a      	cmp	r3, #10
 801c8c2:	f300 812f 	bgt.w	801cb24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c8c6:	4b81      	ldr	r3, [pc, #516]	@ (801cacc <ip4_reass+0x2b4>)
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801c8cc:	e015      	b.n	801c8fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8d0:	695a      	ldr	r2, [r3, #20]
 801c8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8d4:	68db      	ldr	r3, [r3, #12]
 801c8d6:	429a      	cmp	r2, r3
 801c8d8:	d10c      	bne.n	801c8f4 <ip4_reass+0xdc>
 801c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8dc:	699a      	ldr	r2, [r3, #24]
 801c8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8e0:	691b      	ldr	r3, [r3, #16]
 801c8e2:	429a      	cmp	r2, r3
 801c8e4:	d106      	bne.n	801c8f4 <ip4_reass+0xdc>
 801c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8e8:	899a      	ldrh	r2, [r3, #12]
 801c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8ec:	889b      	ldrh	r3, [r3, #4]
 801c8ee:	b29b      	uxth	r3, r3
 801c8f0:	429a      	cmp	r2, r3
 801c8f2:	d006      	beq.n	801c902 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	633b      	str	r3, [r7, #48]	@ 0x30
 801c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d1e6      	bne.n	801c8ce <ip4_reass+0xb6>
 801c900:	e000      	b.n	801c904 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c902:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c906:	2b00      	cmp	r3, #0
 801c908:	d109      	bne.n	801c91e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c90a:	8c3b      	ldrh	r3, [r7, #32]
 801c90c:	4619      	mov	r1, r3
 801c90e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c910:	f7ff fdb0 	bl	801c474 <ip_reass_enqueue_new_datagram>
 801c914:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d11c      	bne.n	801c956 <ip4_reass+0x13e>
      goto nullreturn;
 801c91c:	e105      	b.n	801cb2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c920:	88db      	ldrh	r3, [r3, #6]
 801c922:	b29b      	uxth	r3, r3
 801c924:	4618      	mov	r0, r3
 801c926:	f7f3 fee9 	bl	80106fc <lwip_htons>
 801c92a:	4603      	mov	r3, r0
 801c92c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c930:	2b00      	cmp	r3, #0
 801c932:	d110      	bne.n	801c956 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c936:	89db      	ldrh	r3, [r3, #14]
 801c938:	4618      	mov	r0, r3
 801c93a:	f7f3 fedf 	bl	80106fc <lwip_htons>
 801c93e:	4603      	mov	r3, r0
 801c940:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c944:	2b00      	cmp	r3, #0
 801c946:	d006      	beq.n	801c956 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c94a:	3308      	adds	r3, #8
 801c94c:	2214      	movs	r2, #20
 801c94e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c950:	4618      	mov	r0, r3
 801c952:	f002 f888 	bl	801ea66 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c958:	88db      	ldrh	r3, [r3, #6]
 801c95a:	b29b      	uxth	r3, r3
 801c95c:	f003 0320 	and.w	r3, r3, #32
 801c960:	2b00      	cmp	r3, #0
 801c962:	bf0c      	ite	eq
 801c964:	2301      	moveq	r3, #1
 801c966:	2300      	movne	r3, #0
 801c968:	b2db      	uxtb	r3, r3
 801c96a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c96c:	69fb      	ldr	r3, [r7, #28]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d00e      	beq.n	801c990 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c972:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c974:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c976:	4413      	add	r3, r2
 801c978:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c97a:	8b7a      	ldrh	r2, [r7, #26]
 801c97c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c97e:	429a      	cmp	r2, r3
 801c980:	f0c0 80a0 	bcc.w	801cac4 <ip4_reass+0x2ac>
 801c984:	8b7b      	ldrh	r3, [r7, #26]
 801c986:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c98a:	4293      	cmp	r3, r2
 801c98c:	f200 809a 	bhi.w	801cac4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c990:	69fa      	ldr	r2, [r7, #28]
 801c992:	6879      	ldr	r1, [r7, #4]
 801c994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c996:	f7ff fdd5 	bl	801c544 <ip_reass_chain_frag_into_datagram_and_validate>
 801c99a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9a2:	f000 809b 	beq.w	801cadc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c9a6:	4b48      	ldr	r3, [pc, #288]	@ (801cac8 <ip4_reass+0x2b0>)
 801c9a8:	881a      	ldrh	r2, [r3, #0]
 801c9aa:	8c3b      	ldrh	r3, [r7, #32]
 801c9ac:	4413      	add	r3, r2
 801c9ae:	b29a      	uxth	r2, r3
 801c9b0:	4b45      	ldr	r3, [pc, #276]	@ (801cac8 <ip4_reass+0x2b0>)
 801c9b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c9b4:	69fb      	ldr	r3, [r7, #28]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d00d      	beq.n	801c9d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c9ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c9bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9be:	4413      	add	r3, r2
 801c9c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9c4:	8a7a      	ldrh	r2, [r7, #18]
 801c9c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9ca:	7f9b      	ldrb	r3, [r3, #30]
 801c9cc:	f043 0301 	orr.w	r3, r3, #1
 801c9d0:	b2da      	uxtb	r2, r3
 801c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	2b01      	cmp	r3, #1
 801c9da:	d171      	bne.n	801cac0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9de:	8b9b      	ldrh	r3, [r3, #28]
 801c9e0:	3314      	adds	r3, #20
 801c9e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9e6:	685b      	ldr	r3, [r3, #4]
 801c9e8:	685b      	ldr	r3, [r3, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	685b      	ldr	r3, [r3, #4]
 801c9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9f8:	3308      	adds	r3, #8
 801c9fa:	2214      	movs	r2, #20
 801c9fc:	4619      	mov	r1, r3
 801c9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ca00:	f002 f831 	bl	801ea66 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ca04:	8a3b      	ldrh	r3, [r7, #16]
 801ca06:	4618      	mov	r0, r3
 801ca08:	f7f3 fe78 	bl	80106fc <lwip_htons>
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	461a      	mov	r2, r3
 801ca10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ca14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca16:	2200      	movs	r2, #0
 801ca18:	719a      	strb	r2, [r3, #6]
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca20:	2200      	movs	r2, #0
 801ca22:	729a      	strb	r2, [r3, #10]
 801ca24:	2200      	movs	r2, #0
 801ca26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca2a:	685b      	ldr	r3, [r3, #4]
 801ca2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ca2e:	e00d      	b.n	801ca4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ca30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca32:	685b      	ldr	r3, [r3, #4]
 801ca34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ca36:	2114      	movs	r1, #20
 801ca38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801ca3a:	f7f5 fcc5 	bl	80123c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801ca3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ca40:	6878      	ldr	r0, [r7, #4]
 801ca42:	f7f5 fe15 	bl	8012670 <pbuf_cat>
      r = iprh->next_pbuf;
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801ca4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d1ee      	bne.n	801ca30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ca52:	4b1e      	ldr	r3, [pc, #120]	@ (801cacc <ip4_reass+0x2b4>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d102      	bne.n	801ca62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ca60:	e010      	b.n	801ca84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ca62:	4b1a      	ldr	r3, [pc, #104]	@ (801cacc <ip4_reass+0x2b4>)
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ca68:	e007      	b.n	801ca7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ca70:	429a      	cmp	r2, r3
 801ca72:	d006      	beq.n	801ca82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ca7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d1f4      	bne.n	801ca6a <ip4_reass+0x252>
 801ca80:	e000      	b.n	801ca84 <ip4_reass+0x26c>
          break;
 801ca82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ca84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ca86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ca88:	f7ff fd2e 	bl	801c4e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ca8c:	6878      	ldr	r0, [r7, #4]
 801ca8e:	f7f5 fdaf 	bl	80125f0 <pbuf_clen>
 801ca92:	4603      	mov	r3, r0
 801ca94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ca96:	4b0c      	ldr	r3, [pc, #48]	@ (801cac8 <ip4_reass+0x2b0>)
 801ca98:	881b      	ldrh	r3, [r3, #0]
 801ca9a:	8c3a      	ldrh	r2, [r7, #32]
 801ca9c:	429a      	cmp	r2, r3
 801ca9e:	d906      	bls.n	801caae <ip4_reass+0x296>
 801caa0:	4b0b      	ldr	r3, [pc, #44]	@ (801cad0 <ip4_reass+0x2b8>)
 801caa2:	f240 229b 	movw	r2, #667	@ 0x29b
 801caa6:	490b      	ldr	r1, [pc, #44]	@ (801cad4 <ip4_reass+0x2bc>)
 801caa8:	480b      	ldr	r0, [pc, #44]	@ (801cad8 <ip4_reass+0x2c0>)
 801caaa:	f001 fd45 	bl	801e538 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801caae:	4b06      	ldr	r3, [pc, #24]	@ (801cac8 <ip4_reass+0x2b0>)
 801cab0:	881a      	ldrh	r2, [r3, #0]
 801cab2:	8c3b      	ldrh	r3, [r7, #32]
 801cab4:	1ad3      	subs	r3, r2, r3
 801cab6:	b29a      	uxth	r2, r3
 801cab8:	4b03      	ldr	r3, [pc, #12]	@ (801cac8 <ip4_reass+0x2b0>)
 801caba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	e038      	b.n	801cb32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cac0:	2300      	movs	r3, #0
 801cac2:	e036      	b.n	801cb32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cac4:	bf00      	nop
 801cac6:	e00a      	b.n	801cade <ip4_reass+0x2c6>
 801cac8:	200178f0 	.word	0x200178f0
 801cacc:	200178ec 	.word	0x200178ec
 801cad0:	08024bfc 	.word	0x08024bfc
 801cad4:	08024d6c 	.word	0x08024d6c
 801cad8:	08024c44 	.word	0x08024c44
    goto nullreturn_ipr;
 801cadc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d106      	bne.n	801caf2 <ip4_reass+0x2da>
 801cae4:	4b15      	ldr	r3, [pc, #84]	@ (801cb3c <ip4_reass+0x324>)
 801cae6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801caea:	4915      	ldr	r1, [pc, #84]	@ (801cb40 <ip4_reass+0x328>)
 801caec:	4815      	ldr	r0, [pc, #84]	@ (801cb44 <ip4_reass+0x32c>)
 801caee:	f001 fd23 	bl	801e538 <iprintf>
  if (ipr->p == NULL) {
 801caf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caf4:	685b      	ldr	r3, [r3, #4]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d116      	bne.n	801cb28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801cafa:	4b13      	ldr	r3, [pc, #76]	@ (801cb48 <ip4_reass+0x330>)
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cb00:	429a      	cmp	r2, r3
 801cb02:	d006      	beq.n	801cb12 <ip4_reass+0x2fa>
 801cb04:	4b0d      	ldr	r3, [pc, #52]	@ (801cb3c <ip4_reass+0x324>)
 801cb06:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801cb0a:	4910      	ldr	r1, [pc, #64]	@ (801cb4c <ip4_reass+0x334>)
 801cb0c:	480d      	ldr	r0, [pc, #52]	@ (801cb44 <ip4_reass+0x32c>)
 801cb0e:	f001 fd13 	bl	801e538 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801cb12:	2100      	movs	r1, #0
 801cb14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cb16:	f7ff fce7 	bl	801c4e8 <ip_reass_dequeue_datagram>
 801cb1a:	e006      	b.n	801cb2a <ip4_reass+0x312>
    goto nullreturn;
 801cb1c:	bf00      	nop
 801cb1e:	e004      	b.n	801cb2a <ip4_reass+0x312>
    goto nullreturn;
 801cb20:	bf00      	nop
 801cb22:	e002      	b.n	801cb2a <ip4_reass+0x312>
      goto nullreturn;
 801cb24:	bf00      	nop
 801cb26:	e000      	b.n	801cb2a <ip4_reass+0x312>
  }

nullreturn:
 801cb28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801cb2a:	6878      	ldr	r0, [r7, #4]
 801cb2c:	f7f5 fcd2 	bl	80124d4 <pbuf_free>
  return NULL;
 801cb30:	2300      	movs	r3, #0
}
 801cb32:	4618      	mov	r0, r3
 801cb34:	3738      	adds	r7, #56	@ 0x38
 801cb36:	46bd      	mov	sp, r7
 801cb38:	bd80      	pop	{r7, pc}
 801cb3a:	bf00      	nop
 801cb3c:	08024bfc 	.word	0x08024bfc
 801cb40:	08024d88 	.word	0x08024d88
 801cb44:	08024c44 	.word	0x08024c44
 801cb48:	200178ec 	.word	0x200178ec
 801cb4c:	08024d94 	.word	0x08024d94

0801cb50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801cb54:	2005      	movs	r0, #5
 801cb56:	f7f4 fd97 	bl	8011688 <memp_malloc>
 801cb5a:	4603      	mov	r3, r0
}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	bd80      	pop	{r7, pc}

0801cb60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b082      	sub	sp, #8
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d106      	bne.n	801cb7c <ip_frag_free_pbuf_custom_ref+0x1c>
 801cb6e:	4b07      	ldr	r3, [pc, #28]	@ (801cb8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801cb70:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801cb74:	4906      	ldr	r1, [pc, #24]	@ (801cb90 <ip_frag_free_pbuf_custom_ref+0x30>)
 801cb76:	4807      	ldr	r0, [pc, #28]	@ (801cb94 <ip_frag_free_pbuf_custom_ref+0x34>)
 801cb78:	f001 fcde 	bl	801e538 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801cb7c:	6879      	ldr	r1, [r7, #4]
 801cb7e:	2005      	movs	r0, #5
 801cb80:	f7f4 fdf8 	bl	8011774 <memp_free>
}
 801cb84:	bf00      	nop
 801cb86:	3708      	adds	r7, #8
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	bd80      	pop	{r7, pc}
 801cb8c:	08024bfc 	.word	0x08024bfc
 801cb90:	08024db4 	.word	0x08024db4
 801cb94:	08024c44 	.word	0x08024c44

0801cb98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b084      	sub	sp, #16
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d106      	bne.n	801cbb8 <ipfrag_free_pbuf_custom+0x20>
 801cbaa:	4b11      	ldr	r3, [pc, #68]	@ (801cbf0 <ipfrag_free_pbuf_custom+0x58>)
 801cbac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801cbb0:	4910      	ldr	r1, [pc, #64]	@ (801cbf4 <ipfrag_free_pbuf_custom+0x5c>)
 801cbb2:	4811      	ldr	r0, [pc, #68]	@ (801cbf8 <ipfrag_free_pbuf_custom+0x60>)
 801cbb4:	f001 fcc0 	bl	801e538 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801cbb8:	68fa      	ldr	r2, [r7, #12]
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d006      	beq.n	801cbce <ipfrag_free_pbuf_custom+0x36>
 801cbc0:	4b0b      	ldr	r3, [pc, #44]	@ (801cbf0 <ipfrag_free_pbuf_custom+0x58>)
 801cbc2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801cbc6:	490d      	ldr	r1, [pc, #52]	@ (801cbfc <ipfrag_free_pbuf_custom+0x64>)
 801cbc8:	480b      	ldr	r0, [pc, #44]	@ (801cbf8 <ipfrag_free_pbuf_custom+0x60>)
 801cbca:	f001 fcb5 	bl	801e538 <iprintf>
  if (pcr->original != NULL) {
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	695b      	ldr	r3, [r3, #20]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d004      	beq.n	801cbe0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	695b      	ldr	r3, [r3, #20]
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f7f5 fc7a 	bl	80124d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801cbe0:	68f8      	ldr	r0, [r7, #12]
 801cbe2:	f7ff ffbd 	bl	801cb60 <ip_frag_free_pbuf_custom_ref>
}
 801cbe6:	bf00      	nop
 801cbe8:	3710      	adds	r7, #16
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	08024bfc 	.word	0x08024bfc
 801cbf4:	08024dc0 	.word	0x08024dc0
 801cbf8:	08024c44 	.word	0x08024c44
 801cbfc:	08024dcc 	.word	0x08024dcc

0801cc00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b094      	sub	sp, #80	@ 0x50
 801cc04:	af02      	add	r7, sp, #8
 801cc06:	60f8      	str	r0, [r7, #12]
 801cc08:	60b9      	str	r1, [r7, #8]
 801cc0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801cc12:	68bb      	ldr	r3, [r7, #8]
 801cc14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cc16:	3b14      	subs	r3, #20
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	da00      	bge.n	801cc1e <ip4_frag+0x1e>
 801cc1c:	3307      	adds	r3, #7
 801cc1e:	10db      	asrs	r3, r3, #3
 801cc20:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801cc22:	2314      	movs	r3, #20
 801cc24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	685b      	ldr	r3, [r3, #4]
 801cc2a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801cc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	f003 030f 	and.w	r3, r3, #15
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	009b      	lsls	r3, r3, #2
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b14      	cmp	r3, #20
 801cc40:	d002      	beq.n	801cc48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801cc42:	f06f 0305 	mvn.w	r3, #5
 801cc46:	e110      	b.n	801ce6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	895b      	ldrh	r3, [r3, #10]
 801cc4c:	2b13      	cmp	r3, #19
 801cc4e:	d809      	bhi.n	801cc64 <ip4_frag+0x64>
 801cc50:	4b88      	ldr	r3, [pc, #544]	@ (801ce74 <ip4_frag+0x274>)
 801cc52:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801cc56:	4988      	ldr	r1, [pc, #544]	@ (801ce78 <ip4_frag+0x278>)
 801cc58:	4888      	ldr	r0, [pc, #544]	@ (801ce7c <ip4_frag+0x27c>)
 801cc5a:	f001 fc6d 	bl	801e538 <iprintf>
 801cc5e:	f06f 0305 	mvn.w	r3, #5
 801cc62:	e102      	b.n	801ce6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc66:	88db      	ldrh	r3, [r3, #6]
 801cc68:	b29b      	uxth	r3, r3
 801cc6a:	4618      	mov	r0, r3
 801cc6c:	f7f3 fd46 	bl	80106fc <lwip_htons>
 801cc70:	4603      	mov	r3, r0
 801cc72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801cc74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cc76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801cc7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cc80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cc84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	891b      	ldrh	r3, [r3, #8]
 801cc8a:	3b14      	subs	r3, #20
 801cc8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801cc90:	e0e1      	b.n	801ce56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801cc92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc94:	00db      	lsls	r3, r3, #3
 801cc96:	b29b      	uxth	r3, r3
 801cc98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc9c:	4293      	cmp	r3, r2
 801cc9e:	bf28      	it	cs
 801cca0:	4613      	movcs	r3, r2
 801cca2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cca4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cca8:	2114      	movs	r1, #20
 801ccaa:	200e      	movs	r0, #14
 801ccac:	f7f5 f92e 	bl	8011f0c <pbuf_alloc>
 801ccb0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ccb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	f000 80d5 	beq.w	801ce64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccbc:	895b      	ldrh	r3, [r3, #10]
 801ccbe:	2b13      	cmp	r3, #19
 801ccc0:	d806      	bhi.n	801ccd0 <ip4_frag+0xd0>
 801ccc2:	4b6c      	ldr	r3, [pc, #432]	@ (801ce74 <ip4_frag+0x274>)
 801ccc4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ccc8:	496d      	ldr	r1, [pc, #436]	@ (801ce80 <ip4_frag+0x280>)
 801ccca:	486c      	ldr	r0, [pc, #432]	@ (801ce7c <ip4_frag+0x27c>)
 801cccc:	f001 fc34 	bl	801e538 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ccd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccd2:	685b      	ldr	r3, [r3, #4]
 801ccd4:	2214      	movs	r2, #20
 801ccd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f001 fec4 	bl	801ea66 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ccde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cce0:	685b      	ldr	r3, [r3, #4]
 801cce2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cce4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cce6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ccea:	e064      	b.n	801cdb6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	895a      	ldrh	r2, [r3, #10]
 801ccf0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ccf2:	1ad3      	subs	r3, r2, r3
 801ccf4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	895b      	ldrh	r3, [r3, #10]
 801ccfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	d906      	bls.n	801cd0e <ip4_frag+0x10e>
 801cd00:	4b5c      	ldr	r3, [pc, #368]	@ (801ce74 <ip4_frag+0x274>)
 801cd02:	f240 322d 	movw	r2, #813	@ 0x32d
 801cd06:	495f      	ldr	r1, [pc, #380]	@ (801ce84 <ip4_frag+0x284>)
 801cd08:	485c      	ldr	r0, [pc, #368]	@ (801ce7c <ip4_frag+0x27c>)
 801cd0a:	f001 fc15 	bl	801e538 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cd0e:	8bfa      	ldrh	r2, [r7, #30]
 801cd10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cd14:	4293      	cmp	r3, r2
 801cd16:	bf28      	it	cs
 801cd18:	4613      	movcs	r3, r2
 801cd1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cd1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d105      	bne.n	801cd32 <ip4_frag+0x132>
        poff = 0;
 801cd26:	2300      	movs	r3, #0
 801cd28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	60fb      	str	r3, [r7, #12]
        continue;
 801cd30:	e041      	b.n	801cdb6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cd32:	f7ff ff0d 	bl	801cb50 <ip_frag_alloc_pbuf_custom_ref>
 801cd36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cd38:	69bb      	ldr	r3, [r7, #24]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d103      	bne.n	801cd46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cd3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cd40:	f7f5 fbc8 	bl	80124d4 <pbuf_free>
        goto memerr;
 801cd44:	e08f      	b.n	801ce66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cd46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cd4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cd4e:	4413      	add	r3, r2
 801cd50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cd54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cd58:	9201      	str	r2, [sp, #4]
 801cd5a:	9300      	str	r3, [sp, #0]
 801cd5c:	4603      	mov	r3, r0
 801cd5e:	2241      	movs	r2, #65	@ 0x41
 801cd60:	2000      	movs	r0, #0
 801cd62:	f7f5 f9fd 	bl	8012160 <pbuf_alloced_custom>
 801cd66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cd68:	697b      	ldr	r3, [r7, #20]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d106      	bne.n	801cd7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cd6e:	69b8      	ldr	r0, [r7, #24]
 801cd70:	f7ff fef6 	bl	801cb60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cd74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cd76:	f7f5 fbad 	bl	80124d4 <pbuf_free>
        goto memerr;
 801cd7a:	e074      	b.n	801ce66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cd7c:	68f8      	ldr	r0, [r7, #12]
 801cd7e:	f7f5 fc4f 	bl	8012620 <pbuf_ref>
      pcr->original = p;
 801cd82:	69bb      	ldr	r3, [r7, #24]
 801cd84:	68fa      	ldr	r2, [r7, #12]
 801cd86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cd88:	69bb      	ldr	r3, [r7, #24]
 801cd8a:	4a3f      	ldr	r2, [pc, #252]	@ (801ce88 <ip4_frag+0x288>)
 801cd8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cd8e:	6979      	ldr	r1, [r7, #20]
 801cd90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cd92:	f7f5 fc6d 	bl	8012670 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cd96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cd9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cd9e:	1ad3      	subs	r3, r2, r3
 801cda0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cda4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d004      	beq.n	801cdb6 <ip4_frag+0x1b6>
        poff = 0;
 801cdac:	2300      	movs	r3, #0
 801cdae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cdb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d196      	bne.n	801ccec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cdbe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cdc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cdc4:	4413      	add	r3, r2
 801cdc6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cdc8:	68bb      	ldr	r3, [r7, #8]
 801cdca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cdcc:	f1a3 0213 	sub.w	r2, r3, #19
 801cdd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	bfcc      	ite	gt
 801cdd8:	2301      	movgt	r3, #1
 801cdda:	2300      	movle	r3, #0
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cde0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cde4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cde8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cdea:	6a3b      	ldr	r3, [r7, #32]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d002      	beq.n	801cdf6 <ip4_frag+0x1f6>
 801cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d003      	beq.n	801cdfe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cdf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cdf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cdfc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cdfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ce00:	4618      	mov	r0, r3
 801ce02:	f7f3 fc7b 	bl	80106fc <lwip_htons>
 801ce06:	4603      	mov	r3, r0
 801ce08:	461a      	mov	r2, r3
 801ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ce0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ce10:	3314      	adds	r3, #20
 801ce12:	b29b      	uxth	r3, r3
 801ce14:	4618      	mov	r0, r3
 801ce16:	f7f3 fc71 	bl	80106fc <lwip_htons>
 801ce1a:	4603      	mov	r3, r0
 801ce1c:	461a      	mov	r2, r3
 801ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce24:	2200      	movs	r2, #0
 801ce26:	729a      	strb	r2, [r3, #10]
 801ce28:	2200      	movs	r2, #0
 801ce2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	695b      	ldr	r3, [r3, #20]
 801ce30:	687a      	ldr	r2, [r7, #4]
 801ce32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ce34:	68b8      	ldr	r0, [r7, #8]
 801ce36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ce38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ce3a:	f7f5 fb4b 	bl	80124d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ce3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ce42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ce44:	1ad3      	subs	r3, r2, r3
 801ce46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ce4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ce4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ce50:	4413      	add	r3, r2
 801ce52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ce56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	f47f af19 	bne.w	801cc92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ce60:	2300      	movs	r3, #0
 801ce62:	e002      	b.n	801ce6a <ip4_frag+0x26a>
      goto memerr;
 801ce64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ce66:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	3748      	adds	r7, #72	@ 0x48
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	bd80      	pop	{r7, pc}
 801ce72:	bf00      	nop
 801ce74:	08024bfc 	.word	0x08024bfc
 801ce78:	08024dd8 	.word	0x08024dd8
 801ce7c:	08024c44 	.word	0x08024c44
 801ce80:	08024df4 	.word	0x08024df4
 801ce84:	08024e14 	.word	0x08024e14
 801ce88:	0801cb99 	.word	0x0801cb99

0801ce8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b086      	sub	sp, #24
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ce96:	230e      	movs	r3, #14
 801ce98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	895b      	ldrh	r3, [r3, #10]
 801ce9e:	2b0e      	cmp	r3, #14
 801cea0:	d96e      	bls.n	801cf80 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	7bdb      	ldrb	r3, [r3, #15]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d106      	bne.n	801ceb8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	b2da      	uxtb	r2, r3
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	685b      	ldr	r3, [r3, #4]
 801cebc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801cebe:	693b      	ldr	r3, [r7, #16]
 801cec0:	7b1a      	ldrb	r2, [r3, #12]
 801cec2:	7b5b      	ldrb	r3, [r3, #13]
 801cec4:	021b      	lsls	r3, r3, #8
 801cec6:	4313      	orrs	r3, r2
 801cec8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ceca:	693b      	ldr	r3, [r7, #16]
 801cecc:	781b      	ldrb	r3, [r3, #0]
 801cece:	f003 0301 	and.w	r3, r3, #1
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d023      	beq.n	801cf1e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ced6:	693b      	ldr	r3, [r7, #16]
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	2b01      	cmp	r3, #1
 801cedc:	d10f      	bne.n	801cefe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cede:	693b      	ldr	r3, [r7, #16]
 801cee0:	785b      	ldrb	r3, [r3, #1]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d11b      	bne.n	801cf1e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801cee6:	693b      	ldr	r3, [r7, #16]
 801cee8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ceea:	2b5e      	cmp	r3, #94	@ 0x5e
 801ceec:	d117      	bne.n	801cf1e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	7b5b      	ldrb	r3, [r3, #13]
 801cef2:	f043 0310 	orr.w	r3, r3, #16
 801cef6:	b2da      	uxtb	r2, r3
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	735a      	strb	r2, [r3, #13]
 801cefc:	e00f      	b.n	801cf1e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cefe:	693b      	ldr	r3, [r7, #16]
 801cf00:	2206      	movs	r2, #6
 801cf02:	4928      	ldr	r1, [pc, #160]	@ (801cfa4 <ethernet_input+0x118>)
 801cf04:	4618      	mov	r0, r3
 801cf06:	f001 fc21 	bl	801e74c <memcmp>
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d106      	bne.n	801cf1e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	7b5b      	ldrb	r3, [r3, #13]
 801cf14:	f043 0308 	orr.w	r3, r3, #8
 801cf18:	b2da      	uxtb	r2, r3
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cf1e:	89fb      	ldrh	r3, [r7, #14]
 801cf20:	2b08      	cmp	r3, #8
 801cf22:	d003      	beq.n	801cf2c <ethernet_input+0xa0>
 801cf24:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cf28:	d014      	beq.n	801cf54 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cf2a:	e032      	b.n	801cf92 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cf2c:	683b      	ldr	r3, [r7, #0]
 801cf2e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cf32:	f003 0308 	and.w	r3, r3, #8
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d024      	beq.n	801cf84 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cf3a:	8afb      	ldrh	r3, [r7, #22]
 801cf3c:	4619      	mov	r1, r3
 801cf3e:	6878      	ldr	r0, [r7, #4]
 801cf40:	f7f5 fa42 	bl	80123c8 <pbuf_remove_header>
 801cf44:	4603      	mov	r3, r0
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d11e      	bne.n	801cf88 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cf4a:	6839      	ldr	r1, [r7, #0]
 801cf4c:	6878      	ldr	r0, [r7, #4]
 801cf4e:	f7fe ff03 	bl	801bd58 <ip4_input>
      break;
 801cf52:	e013      	b.n	801cf7c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cf54:	683b      	ldr	r3, [r7, #0]
 801cf56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cf5a:	f003 0308 	and.w	r3, r3, #8
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d014      	beq.n	801cf8c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cf62:	8afb      	ldrh	r3, [r7, #22]
 801cf64:	4619      	mov	r1, r3
 801cf66:	6878      	ldr	r0, [r7, #4]
 801cf68:	f7f5 fa2e 	bl	80123c8 <pbuf_remove_header>
 801cf6c:	4603      	mov	r3, r0
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d10e      	bne.n	801cf90 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cf72:	6839      	ldr	r1, [r7, #0]
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f7fe f89f 	bl	801b0b8 <etharp_input>
      break;
 801cf7a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	e00c      	b.n	801cf9a <ethernet_input+0x10e>
    goto free_and_return;
 801cf80:	bf00      	nop
 801cf82:	e006      	b.n	801cf92 <ethernet_input+0x106>
        goto free_and_return;
 801cf84:	bf00      	nop
 801cf86:	e004      	b.n	801cf92 <ethernet_input+0x106>
        goto free_and_return;
 801cf88:	bf00      	nop
 801cf8a:	e002      	b.n	801cf92 <ethernet_input+0x106>
        goto free_and_return;
 801cf8c:	bf00      	nop
 801cf8e:	e000      	b.n	801cf92 <ethernet_input+0x106>
        goto free_and_return;
 801cf90:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cf92:	6878      	ldr	r0, [r7, #4]
 801cf94:	f7f5 fa9e 	bl	80124d4 <pbuf_free>
  return ERR_OK;
 801cf98:	2300      	movs	r3, #0
}
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	3718      	adds	r7, #24
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	bd80      	pop	{r7, pc}
 801cfa2:	bf00      	nop
 801cfa4:	08025224 	.word	0x08025224

0801cfa8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b086      	sub	sp, #24
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	60f8      	str	r0, [r7, #12]
 801cfb0:	60b9      	str	r1, [r7, #8]
 801cfb2:	607a      	str	r2, [r7, #4]
 801cfb4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cfb6:	8c3b      	ldrh	r3, [r7, #32]
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f7f3 fb9f 	bl	80106fc <lwip_htons>
 801cfbe:	4603      	mov	r3, r0
 801cfc0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cfc2:	210e      	movs	r1, #14
 801cfc4:	68b8      	ldr	r0, [r7, #8]
 801cfc6:	f7f5 f9ef 	bl	80123a8 <pbuf_add_header>
 801cfca:	4603      	mov	r3, r0
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d125      	bne.n	801d01c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	685b      	ldr	r3, [r3, #4]
 801cfd4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cfd6:	693b      	ldr	r3, [r7, #16]
 801cfd8:	8afa      	ldrh	r2, [r7, #22]
 801cfda:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cfdc:	693b      	ldr	r3, [r7, #16]
 801cfde:	2206      	movs	r2, #6
 801cfe0:	6839      	ldr	r1, [r7, #0]
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f001 fd3f 	bl	801ea66 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cfe8:	693b      	ldr	r3, [r7, #16]
 801cfea:	3306      	adds	r3, #6
 801cfec:	2206      	movs	r2, #6
 801cfee:	6879      	ldr	r1, [r7, #4]
 801cff0:	4618      	mov	r0, r3
 801cff2:	f001 fd38 	bl	801ea66 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cffc:	2b06      	cmp	r3, #6
 801cffe:	d006      	beq.n	801d00e <ethernet_output+0x66>
 801d000:	4b0a      	ldr	r3, [pc, #40]	@ (801d02c <ethernet_output+0x84>)
 801d002:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d006:	490a      	ldr	r1, [pc, #40]	@ (801d030 <ethernet_output+0x88>)
 801d008:	480a      	ldr	r0, [pc, #40]	@ (801d034 <ethernet_output+0x8c>)
 801d00a:	f001 fa95 	bl	801e538 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	699b      	ldr	r3, [r3, #24]
 801d012:	68b9      	ldr	r1, [r7, #8]
 801d014:	68f8      	ldr	r0, [r7, #12]
 801d016:	4798      	blx	r3
 801d018:	4603      	mov	r3, r0
 801d01a:	e002      	b.n	801d022 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d01c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d01e:	f06f 0301 	mvn.w	r3, #1
}
 801d022:	4618      	mov	r0, r3
 801d024:	3718      	adds	r7, #24
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	bf00      	nop
 801d02c:	08024e24 	.word	0x08024e24
 801d030:	08024e5c 	.word	0x08024e5c
 801d034:	08024e90 	.word	0x08024e90

0801d038 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d038:	b580      	push	{r7, lr}
 801d03a:	b082      	sub	sp, #8
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	6078      	str	r0, [r7, #4]
 801d040:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d042:	683b      	ldr	r3, [r7, #0]
 801d044:	2200      	movs	r2, #0
 801d046:	2104      	movs	r1, #4
 801d048:	4618      	mov	r0, r3
 801d04a:	f7ef fea5 	bl	800cd98 <osMessageQueueNew>
 801d04e:	4602      	mov	r2, r0
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d102      	bne.n	801d062 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d05c:	f04f 33ff 	mov.w	r3, #4294967295
 801d060:	e000      	b.n	801d064 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d062:	2300      	movs	r3, #0
}
 801d064:	4618      	mov	r0, r3
 801d066:	3708      	adds	r7, #8
 801d068:	46bd      	mov	sp, r7
 801d06a:	bd80      	pop	{r7, pc}

0801d06c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b084      	sub	sp, #16
 801d070:	af00      	add	r7, sp, #0
 801d072:	6078      	str	r0, [r7, #4]
 801d074:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	6818      	ldr	r0, [r3, #0]
 801d07a:	4639      	mov	r1, r7
 801d07c:	2300      	movs	r3, #0
 801d07e:	2200      	movs	r2, #0
 801d080:	f7ef fefe 	bl	800ce80 <osMessageQueuePut>
 801d084:	4603      	mov	r3, r0
 801d086:	2b00      	cmp	r3, #0
 801d088:	d102      	bne.n	801d090 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d08a:	2300      	movs	r3, #0
 801d08c:	73fb      	strb	r3, [r7, #15]
 801d08e:	e001      	b.n	801d094 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d090:	23ff      	movs	r3, #255	@ 0xff
 801d092:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d098:	4618      	mov	r0, r3
 801d09a:	3710      	adds	r7, #16
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b086      	sub	sp, #24
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	60f8      	str	r0, [r7, #12]
 801d0a8:	60b9      	str	r1, [r7, #8]
 801d0aa:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d0ac:	f7ef fb60 	bl	800c770 <osKernelGetTickCount>
 801d0b0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d013      	beq.n	801d0e0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	6818      	ldr	r0, [r3, #0]
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	2200      	movs	r2, #0
 801d0c0:	68b9      	ldr	r1, [r7, #8]
 801d0c2:	f7ef ff3d 	bl	800cf40 <osMessageQueueGet>
 801d0c6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d0c8:	693b      	ldr	r3, [r7, #16]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d105      	bne.n	801d0da <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d0ce:	f7ef fb4f 	bl	800c770 <osKernelGetTickCount>
 801d0d2:	4602      	mov	r2, r0
 801d0d4:	697b      	ldr	r3, [r7, #20]
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	e00f      	b.n	801d0fa <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d0da:	f04f 33ff 	mov.w	r3, #4294967295
 801d0de:	e00c      	b.n	801d0fa <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	6818      	ldr	r0, [r3, #0]
 801d0e4:	f04f 33ff 	mov.w	r3, #4294967295
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	68b9      	ldr	r1, [r7, #8]
 801d0ec:	f7ef ff28 	bl	800cf40 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d0f0:	f7ef fb3e 	bl	800c770 <osKernelGetTickCount>
 801d0f4:	4602      	mov	r2, r0
 801d0f6:	697b      	ldr	r3, [r7, #20]
 801d0f8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	3718      	adds	r7, #24
 801d0fe:	46bd      	mov	sp, r7
 801d100:	bd80      	pop	{r7, pc}

0801d102 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d102:	b480      	push	{r7}
 801d104:	b083      	sub	sp, #12
 801d106:	af00      	add	r7, sp, #0
 801d108:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d101      	bne.n	801d116 <sys_mbox_valid+0x14>
    return 0;
 801d112:	2300      	movs	r3, #0
 801d114:	e000      	b.n	801d118 <sys_mbox_valid+0x16>
  else
    return 1;
 801d116:	2301      	movs	r3, #1
}
 801d118:	4618      	mov	r0, r3
 801d11a:	370c      	adds	r7, #12
 801d11c:	46bd      	mov	sp, r7
 801d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d122:	4770      	bx	lr

0801d124 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d128:	2000      	movs	r0, #0
 801d12a:	f7ef fbe4 	bl	800c8f6 <osMutexNew>
 801d12e:	4603      	mov	r3, r0
 801d130:	4a01      	ldr	r2, [pc, #4]	@ (801d138 <sys_init+0x14>)
 801d132:	6013      	str	r3, [r2, #0]
#endif
}
 801d134:	bf00      	nop
 801d136:	bd80      	pop	{r7, pc}
 801d138:	200178f4 	.word	0x200178f4

0801d13c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b082      	sub	sp, #8
 801d140:	af00      	add	r7, sp, #0
 801d142:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d144:	2000      	movs	r0, #0
 801d146:	f7ef fbd6 	bl	800c8f6 <osMutexNew>
 801d14a:	4602      	mov	r2, r0
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	2b00      	cmp	r3, #0
 801d156:	d102      	bne.n	801d15e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d158:	f04f 33ff 	mov.w	r3, #4294967295
 801d15c:	e000      	b.n	801d160 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d15e:	2300      	movs	r3, #0
}
 801d160:	4618      	mov	r0, r3
 801d162:	3708      	adds	r7, #8
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}

0801d168 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b082      	sub	sp, #8
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	f04f 31ff 	mov.w	r1, #4294967295
 801d178:	4618      	mov	r0, r3
 801d17a:	f7ef fc42 	bl	800ca02 <osMutexAcquire>
#endif
}
 801d17e:	bf00      	nop
 801d180:	3708      	adds	r7, #8
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}

0801d186 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d186:	b580      	push	{r7, lr}
 801d188:	b082      	sub	sp, #8
 801d18a:	af00      	add	r7, sp, #0
 801d18c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	4618      	mov	r0, r3
 801d194:	f7ef fc80 	bl	800ca98 <osMutexRelease>
}
 801d198:	bf00      	nop
 801d19a:	3708      	adds	r7, #8
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd80      	pop	{r7, pc}

0801d1a0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b08e      	sub	sp, #56	@ 0x38
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	60f8      	str	r0, [r7, #12]
 801d1a8:	60b9      	str	r1, [r7, #8]
 801d1aa:	607a      	str	r2, [r7, #4]
 801d1ac:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d1ae:	f107 0314 	add.w	r3, r7, #20
 801d1b2:	2224      	movs	r2, #36	@ 0x24
 801d1b4:	2100      	movs	r1, #0
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f001 faf2 	bl	801e7a0 <memset>
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	617b      	str	r3, [r7, #20]
 801d1c0:	683b      	ldr	r3, [r7, #0]
 801d1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d1c8:	f107 0314 	add.w	r3, r7, #20
 801d1cc:	461a      	mov	r2, r3
 801d1ce:	6879      	ldr	r1, [r7, #4]
 801d1d0:	68b8      	ldr	r0, [r7, #8]
 801d1d2:	f7ef fae2 	bl	800c79a <osThreadNew>
 801d1d6:	4603      	mov	r3, r0
#endif
}
 801d1d8:	4618      	mov	r0, r3
 801d1da:	3738      	adds	r7, #56	@ 0x38
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	bd80      	pop	{r7, pc}

0801d1e0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d1e4:	4b04      	ldr	r3, [pc, #16]	@ (801d1f8 <sys_arch_protect+0x18>)
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	f04f 31ff 	mov.w	r1, #4294967295
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	f7ef fc08 	bl	800ca02 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d1f2:	2301      	movs	r3, #1
}
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	bd80      	pop	{r7, pc}
 801d1f8:	200178f4 	.word	0x200178f4

0801d1fc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d1fc:	b580      	push	{r7, lr}
 801d1fe:	b082      	sub	sp, #8
 801d200:	af00      	add	r7, sp, #0
 801d202:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d204:	4b04      	ldr	r3, [pc, #16]	@ (801d218 <sys_arch_unprotect+0x1c>)
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4618      	mov	r0, r3
 801d20a:	f7ef fc45 	bl	800ca98 <osMutexRelease>
}
 801d20e:	bf00      	nop
 801d210:	3708      	adds	r7, #8
 801d212:	46bd      	mov	sp, r7
 801d214:	bd80      	pop	{r7, pc}
 801d216:	bf00      	nop
 801d218:	200178f4 	.word	0x200178f4

0801d21c <abort>:
 801d21c:	b508      	push	{r3, lr}
 801d21e:	2006      	movs	r0, #6
 801d220:	f001 fb20 	bl	801e864 <raise>
 801d224:	2001      	movs	r0, #1
 801d226:	f7e4 ff53 	bl	80020d0 <_exit>

0801d22a <atoi>:
 801d22a:	220a      	movs	r2, #10
 801d22c:	2100      	movs	r1, #0
 801d22e:	f000 b99f 	b.w	801d570 <strtol>
	...

0801d234 <malloc>:
 801d234:	4b02      	ldr	r3, [pc, #8]	@ (801d240 <malloc+0xc>)
 801d236:	4601      	mov	r1, r0
 801d238:	6818      	ldr	r0, [r3, #0]
 801d23a:	f000 b825 	b.w	801d288 <_malloc_r>
 801d23e:	bf00      	nop
 801d240:	2000005c 	.word	0x2000005c

0801d244 <sbrk_aligned>:
 801d244:	b570      	push	{r4, r5, r6, lr}
 801d246:	4e0f      	ldr	r6, [pc, #60]	@ (801d284 <sbrk_aligned+0x40>)
 801d248:	460c      	mov	r4, r1
 801d24a:	6831      	ldr	r1, [r6, #0]
 801d24c:	4605      	mov	r5, r0
 801d24e:	b911      	cbnz	r1, 801d256 <sbrk_aligned+0x12>
 801d250:	f001 fbb2 	bl	801e9b8 <_sbrk_r>
 801d254:	6030      	str	r0, [r6, #0]
 801d256:	4621      	mov	r1, r4
 801d258:	4628      	mov	r0, r5
 801d25a:	f001 fbad 	bl	801e9b8 <_sbrk_r>
 801d25e:	1c43      	adds	r3, r0, #1
 801d260:	d103      	bne.n	801d26a <sbrk_aligned+0x26>
 801d262:	f04f 34ff 	mov.w	r4, #4294967295
 801d266:	4620      	mov	r0, r4
 801d268:	bd70      	pop	{r4, r5, r6, pc}
 801d26a:	1cc4      	adds	r4, r0, #3
 801d26c:	f024 0403 	bic.w	r4, r4, #3
 801d270:	42a0      	cmp	r0, r4
 801d272:	d0f8      	beq.n	801d266 <sbrk_aligned+0x22>
 801d274:	1a21      	subs	r1, r4, r0
 801d276:	4628      	mov	r0, r5
 801d278:	f001 fb9e 	bl	801e9b8 <_sbrk_r>
 801d27c:	3001      	adds	r0, #1
 801d27e:	d1f2      	bne.n	801d266 <sbrk_aligned+0x22>
 801d280:	e7ef      	b.n	801d262 <sbrk_aligned+0x1e>
 801d282:	bf00      	nop
 801d284:	200178f8 	.word	0x200178f8

0801d288 <_malloc_r>:
 801d288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d28c:	1ccd      	adds	r5, r1, #3
 801d28e:	f025 0503 	bic.w	r5, r5, #3
 801d292:	3508      	adds	r5, #8
 801d294:	2d0c      	cmp	r5, #12
 801d296:	bf38      	it	cc
 801d298:	250c      	movcc	r5, #12
 801d29a:	2d00      	cmp	r5, #0
 801d29c:	4606      	mov	r6, r0
 801d29e:	db01      	blt.n	801d2a4 <_malloc_r+0x1c>
 801d2a0:	42a9      	cmp	r1, r5
 801d2a2:	d904      	bls.n	801d2ae <_malloc_r+0x26>
 801d2a4:	230c      	movs	r3, #12
 801d2a6:	6033      	str	r3, [r6, #0]
 801d2a8:	2000      	movs	r0, #0
 801d2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d384 <_malloc_r+0xfc>
 801d2b2:	f000 f869 	bl	801d388 <__malloc_lock>
 801d2b6:	f8d8 3000 	ldr.w	r3, [r8]
 801d2ba:	461c      	mov	r4, r3
 801d2bc:	bb44      	cbnz	r4, 801d310 <_malloc_r+0x88>
 801d2be:	4629      	mov	r1, r5
 801d2c0:	4630      	mov	r0, r6
 801d2c2:	f7ff ffbf 	bl	801d244 <sbrk_aligned>
 801d2c6:	1c43      	adds	r3, r0, #1
 801d2c8:	4604      	mov	r4, r0
 801d2ca:	d158      	bne.n	801d37e <_malloc_r+0xf6>
 801d2cc:	f8d8 4000 	ldr.w	r4, [r8]
 801d2d0:	4627      	mov	r7, r4
 801d2d2:	2f00      	cmp	r7, #0
 801d2d4:	d143      	bne.n	801d35e <_malloc_r+0xd6>
 801d2d6:	2c00      	cmp	r4, #0
 801d2d8:	d04b      	beq.n	801d372 <_malloc_r+0xea>
 801d2da:	6823      	ldr	r3, [r4, #0]
 801d2dc:	4639      	mov	r1, r7
 801d2de:	4630      	mov	r0, r6
 801d2e0:	eb04 0903 	add.w	r9, r4, r3
 801d2e4:	f001 fb68 	bl	801e9b8 <_sbrk_r>
 801d2e8:	4581      	cmp	r9, r0
 801d2ea:	d142      	bne.n	801d372 <_malloc_r+0xea>
 801d2ec:	6821      	ldr	r1, [r4, #0]
 801d2ee:	1a6d      	subs	r5, r5, r1
 801d2f0:	4629      	mov	r1, r5
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7ff ffa6 	bl	801d244 <sbrk_aligned>
 801d2f8:	3001      	adds	r0, #1
 801d2fa:	d03a      	beq.n	801d372 <_malloc_r+0xea>
 801d2fc:	6823      	ldr	r3, [r4, #0]
 801d2fe:	442b      	add	r3, r5
 801d300:	6023      	str	r3, [r4, #0]
 801d302:	f8d8 3000 	ldr.w	r3, [r8]
 801d306:	685a      	ldr	r2, [r3, #4]
 801d308:	bb62      	cbnz	r2, 801d364 <_malloc_r+0xdc>
 801d30a:	f8c8 7000 	str.w	r7, [r8]
 801d30e:	e00f      	b.n	801d330 <_malloc_r+0xa8>
 801d310:	6822      	ldr	r2, [r4, #0]
 801d312:	1b52      	subs	r2, r2, r5
 801d314:	d420      	bmi.n	801d358 <_malloc_r+0xd0>
 801d316:	2a0b      	cmp	r2, #11
 801d318:	d917      	bls.n	801d34a <_malloc_r+0xc2>
 801d31a:	1961      	adds	r1, r4, r5
 801d31c:	42a3      	cmp	r3, r4
 801d31e:	6025      	str	r5, [r4, #0]
 801d320:	bf18      	it	ne
 801d322:	6059      	strne	r1, [r3, #4]
 801d324:	6863      	ldr	r3, [r4, #4]
 801d326:	bf08      	it	eq
 801d328:	f8c8 1000 	streq.w	r1, [r8]
 801d32c:	5162      	str	r2, [r4, r5]
 801d32e:	604b      	str	r3, [r1, #4]
 801d330:	4630      	mov	r0, r6
 801d332:	f000 f82f 	bl	801d394 <__malloc_unlock>
 801d336:	f104 000b 	add.w	r0, r4, #11
 801d33a:	1d23      	adds	r3, r4, #4
 801d33c:	f020 0007 	bic.w	r0, r0, #7
 801d340:	1ac2      	subs	r2, r0, r3
 801d342:	bf1c      	itt	ne
 801d344:	1a1b      	subne	r3, r3, r0
 801d346:	50a3      	strne	r3, [r4, r2]
 801d348:	e7af      	b.n	801d2aa <_malloc_r+0x22>
 801d34a:	6862      	ldr	r2, [r4, #4]
 801d34c:	42a3      	cmp	r3, r4
 801d34e:	bf0c      	ite	eq
 801d350:	f8c8 2000 	streq.w	r2, [r8]
 801d354:	605a      	strne	r2, [r3, #4]
 801d356:	e7eb      	b.n	801d330 <_malloc_r+0xa8>
 801d358:	4623      	mov	r3, r4
 801d35a:	6864      	ldr	r4, [r4, #4]
 801d35c:	e7ae      	b.n	801d2bc <_malloc_r+0x34>
 801d35e:	463c      	mov	r4, r7
 801d360:	687f      	ldr	r7, [r7, #4]
 801d362:	e7b6      	b.n	801d2d2 <_malloc_r+0x4a>
 801d364:	461a      	mov	r2, r3
 801d366:	685b      	ldr	r3, [r3, #4]
 801d368:	42a3      	cmp	r3, r4
 801d36a:	d1fb      	bne.n	801d364 <_malloc_r+0xdc>
 801d36c:	2300      	movs	r3, #0
 801d36e:	6053      	str	r3, [r2, #4]
 801d370:	e7de      	b.n	801d330 <_malloc_r+0xa8>
 801d372:	230c      	movs	r3, #12
 801d374:	6033      	str	r3, [r6, #0]
 801d376:	4630      	mov	r0, r6
 801d378:	f000 f80c 	bl	801d394 <__malloc_unlock>
 801d37c:	e794      	b.n	801d2a8 <_malloc_r+0x20>
 801d37e:	6005      	str	r5, [r0, #0]
 801d380:	e7d6      	b.n	801d330 <_malloc_r+0xa8>
 801d382:	bf00      	nop
 801d384:	200178fc 	.word	0x200178fc

0801d388 <__malloc_lock>:
 801d388:	4801      	ldr	r0, [pc, #4]	@ (801d390 <__malloc_lock+0x8>)
 801d38a:	f001 bb62 	b.w	801ea52 <__retarget_lock_acquire_recursive>
 801d38e:	bf00      	nop
 801d390:	20017a40 	.word	0x20017a40

0801d394 <__malloc_unlock>:
 801d394:	4801      	ldr	r0, [pc, #4]	@ (801d39c <__malloc_unlock+0x8>)
 801d396:	f001 bb5d 	b.w	801ea54 <__retarget_lock_release_recursive>
 801d39a:	bf00      	nop
 801d39c:	20017a40 	.word	0x20017a40

0801d3a0 <rand>:
 801d3a0:	4b16      	ldr	r3, [pc, #88]	@ (801d3fc <rand+0x5c>)
 801d3a2:	b510      	push	{r4, lr}
 801d3a4:	681c      	ldr	r4, [r3, #0]
 801d3a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d3a8:	b9b3      	cbnz	r3, 801d3d8 <rand+0x38>
 801d3aa:	2018      	movs	r0, #24
 801d3ac:	f7ff ff42 	bl	801d234 <malloc>
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	6320      	str	r0, [r4, #48]	@ 0x30
 801d3b4:	b920      	cbnz	r0, 801d3c0 <rand+0x20>
 801d3b6:	4b12      	ldr	r3, [pc, #72]	@ (801d400 <rand+0x60>)
 801d3b8:	4812      	ldr	r0, [pc, #72]	@ (801d404 <rand+0x64>)
 801d3ba:	2152      	movs	r1, #82	@ 0x52
 801d3bc:	f001 fb68 	bl	801ea90 <__assert_func>
 801d3c0:	4911      	ldr	r1, [pc, #68]	@ (801d408 <rand+0x68>)
 801d3c2:	4b12      	ldr	r3, [pc, #72]	@ (801d40c <rand+0x6c>)
 801d3c4:	e9c0 1300 	strd	r1, r3, [r0]
 801d3c8:	4b11      	ldr	r3, [pc, #68]	@ (801d410 <rand+0x70>)
 801d3ca:	6083      	str	r3, [r0, #8]
 801d3cc:	230b      	movs	r3, #11
 801d3ce:	8183      	strh	r3, [r0, #12]
 801d3d0:	2100      	movs	r1, #0
 801d3d2:	2001      	movs	r0, #1
 801d3d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d3d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d3da:	480e      	ldr	r0, [pc, #56]	@ (801d414 <rand+0x74>)
 801d3dc:	690b      	ldr	r3, [r1, #16]
 801d3de:	694c      	ldr	r4, [r1, #20]
 801d3e0:	4a0d      	ldr	r2, [pc, #52]	@ (801d418 <rand+0x78>)
 801d3e2:	4358      	muls	r0, r3
 801d3e4:	fb02 0004 	mla	r0, r2, r4, r0
 801d3e8:	fba3 3202 	umull	r3, r2, r3, r2
 801d3ec:	3301      	adds	r3, #1
 801d3ee:	eb40 0002 	adc.w	r0, r0, r2
 801d3f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d3f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d3fa:	bd10      	pop	{r4, pc}
 801d3fc:	2000005c 	.word	0x2000005c
 801d400:	08025232 	.word	0x08025232
 801d404:	08025249 	.word	0x08025249
 801d408:	abcd330e 	.word	0xabcd330e
 801d40c:	e66d1234 	.word	0xe66d1234
 801d410:	0005deec 	.word	0x0005deec
 801d414:	5851f42d 	.word	0x5851f42d
 801d418:	4c957f2d 	.word	0x4c957f2d

0801d41c <_realloc_r>:
 801d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d420:	4680      	mov	r8, r0
 801d422:	4615      	mov	r5, r2
 801d424:	460c      	mov	r4, r1
 801d426:	b921      	cbnz	r1, 801d432 <_realloc_r+0x16>
 801d428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d42c:	4611      	mov	r1, r2
 801d42e:	f7ff bf2b 	b.w	801d288 <_malloc_r>
 801d432:	b92a      	cbnz	r2, 801d440 <_realloc_r+0x24>
 801d434:	f002 f998 	bl	801f768 <_free_r>
 801d438:	2400      	movs	r4, #0
 801d43a:	4620      	mov	r0, r4
 801d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d440:	f002 fe8e 	bl	8020160 <_malloc_usable_size_r>
 801d444:	4285      	cmp	r5, r0
 801d446:	4606      	mov	r6, r0
 801d448:	d802      	bhi.n	801d450 <_realloc_r+0x34>
 801d44a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d44e:	d8f4      	bhi.n	801d43a <_realloc_r+0x1e>
 801d450:	4629      	mov	r1, r5
 801d452:	4640      	mov	r0, r8
 801d454:	f7ff ff18 	bl	801d288 <_malloc_r>
 801d458:	4607      	mov	r7, r0
 801d45a:	2800      	cmp	r0, #0
 801d45c:	d0ec      	beq.n	801d438 <_realloc_r+0x1c>
 801d45e:	42b5      	cmp	r5, r6
 801d460:	462a      	mov	r2, r5
 801d462:	4621      	mov	r1, r4
 801d464:	bf28      	it	cs
 801d466:	4632      	movcs	r2, r6
 801d468:	f001 fafd 	bl	801ea66 <memcpy>
 801d46c:	4621      	mov	r1, r4
 801d46e:	4640      	mov	r0, r8
 801d470:	f002 f97a 	bl	801f768 <_free_r>
 801d474:	463c      	mov	r4, r7
 801d476:	e7e0      	b.n	801d43a <_realloc_r+0x1e>

0801d478 <_strtol_l.constprop.0>:
 801d478:	2b24      	cmp	r3, #36	@ 0x24
 801d47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d47e:	4686      	mov	lr, r0
 801d480:	4690      	mov	r8, r2
 801d482:	d801      	bhi.n	801d488 <_strtol_l.constprop.0+0x10>
 801d484:	2b01      	cmp	r3, #1
 801d486:	d106      	bne.n	801d496 <_strtol_l.constprop.0+0x1e>
 801d488:	f001 fab8 	bl	801e9fc <__errno>
 801d48c:	2316      	movs	r3, #22
 801d48e:	6003      	str	r3, [r0, #0]
 801d490:	2000      	movs	r0, #0
 801d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d496:	4834      	ldr	r0, [pc, #208]	@ (801d568 <_strtol_l.constprop.0+0xf0>)
 801d498:	460d      	mov	r5, r1
 801d49a:	462a      	mov	r2, r5
 801d49c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d4a0:	5d06      	ldrb	r6, [r0, r4]
 801d4a2:	f016 0608 	ands.w	r6, r6, #8
 801d4a6:	d1f8      	bne.n	801d49a <_strtol_l.constprop.0+0x22>
 801d4a8:	2c2d      	cmp	r4, #45	@ 0x2d
 801d4aa:	d12d      	bne.n	801d508 <_strtol_l.constprop.0+0x90>
 801d4ac:	782c      	ldrb	r4, [r5, #0]
 801d4ae:	2601      	movs	r6, #1
 801d4b0:	1c95      	adds	r5, r2, #2
 801d4b2:	f033 0210 	bics.w	r2, r3, #16
 801d4b6:	d109      	bne.n	801d4cc <_strtol_l.constprop.0+0x54>
 801d4b8:	2c30      	cmp	r4, #48	@ 0x30
 801d4ba:	d12a      	bne.n	801d512 <_strtol_l.constprop.0+0x9a>
 801d4bc:	782a      	ldrb	r2, [r5, #0]
 801d4be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d4c2:	2a58      	cmp	r2, #88	@ 0x58
 801d4c4:	d125      	bne.n	801d512 <_strtol_l.constprop.0+0x9a>
 801d4c6:	786c      	ldrb	r4, [r5, #1]
 801d4c8:	2310      	movs	r3, #16
 801d4ca:	3502      	adds	r5, #2
 801d4cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d4d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	fbbc f9f3 	udiv	r9, ip, r3
 801d4da:	4610      	mov	r0, r2
 801d4dc:	fb03 ca19 	mls	sl, r3, r9, ip
 801d4e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d4e4:	2f09      	cmp	r7, #9
 801d4e6:	d81b      	bhi.n	801d520 <_strtol_l.constprop.0+0xa8>
 801d4e8:	463c      	mov	r4, r7
 801d4ea:	42a3      	cmp	r3, r4
 801d4ec:	dd27      	ble.n	801d53e <_strtol_l.constprop.0+0xc6>
 801d4ee:	1c57      	adds	r7, r2, #1
 801d4f0:	d007      	beq.n	801d502 <_strtol_l.constprop.0+0x8a>
 801d4f2:	4581      	cmp	r9, r0
 801d4f4:	d320      	bcc.n	801d538 <_strtol_l.constprop.0+0xc0>
 801d4f6:	d101      	bne.n	801d4fc <_strtol_l.constprop.0+0x84>
 801d4f8:	45a2      	cmp	sl, r4
 801d4fa:	db1d      	blt.n	801d538 <_strtol_l.constprop.0+0xc0>
 801d4fc:	fb00 4003 	mla	r0, r0, r3, r4
 801d500:	2201      	movs	r2, #1
 801d502:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d506:	e7eb      	b.n	801d4e0 <_strtol_l.constprop.0+0x68>
 801d508:	2c2b      	cmp	r4, #43	@ 0x2b
 801d50a:	bf04      	itt	eq
 801d50c:	782c      	ldrbeq	r4, [r5, #0]
 801d50e:	1c95      	addeq	r5, r2, #2
 801d510:	e7cf      	b.n	801d4b2 <_strtol_l.constprop.0+0x3a>
 801d512:	2b00      	cmp	r3, #0
 801d514:	d1da      	bne.n	801d4cc <_strtol_l.constprop.0+0x54>
 801d516:	2c30      	cmp	r4, #48	@ 0x30
 801d518:	bf0c      	ite	eq
 801d51a:	2308      	moveq	r3, #8
 801d51c:	230a      	movne	r3, #10
 801d51e:	e7d5      	b.n	801d4cc <_strtol_l.constprop.0+0x54>
 801d520:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d524:	2f19      	cmp	r7, #25
 801d526:	d801      	bhi.n	801d52c <_strtol_l.constprop.0+0xb4>
 801d528:	3c37      	subs	r4, #55	@ 0x37
 801d52a:	e7de      	b.n	801d4ea <_strtol_l.constprop.0+0x72>
 801d52c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d530:	2f19      	cmp	r7, #25
 801d532:	d804      	bhi.n	801d53e <_strtol_l.constprop.0+0xc6>
 801d534:	3c57      	subs	r4, #87	@ 0x57
 801d536:	e7d8      	b.n	801d4ea <_strtol_l.constprop.0+0x72>
 801d538:	f04f 32ff 	mov.w	r2, #4294967295
 801d53c:	e7e1      	b.n	801d502 <_strtol_l.constprop.0+0x8a>
 801d53e:	1c53      	adds	r3, r2, #1
 801d540:	d108      	bne.n	801d554 <_strtol_l.constprop.0+0xdc>
 801d542:	2322      	movs	r3, #34	@ 0x22
 801d544:	f8ce 3000 	str.w	r3, [lr]
 801d548:	4660      	mov	r0, ip
 801d54a:	f1b8 0f00 	cmp.w	r8, #0
 801d54e:	d0a0      	beq.n	801d492 <_strtol_l.constprop.0+0x1a>
 801d550:	1e69      	subs	r1, r5, #1
 801d552:	e006      	b.n	801d562 <_strtol_l.constprop.0+0xea>
 801d554:	b106      	cbz	r6, 801d558 <_strtol_l.constprop.0+0xe0>
 801d556:	4240      	negs	r0, r0
 801d558:	f1b8 0f00 	cmp.w	r8, #0
 801d55c:	d099      	beq.n	801d492 <_strtol_l.constprop.0+0x1a>
 801d55e:	2a00      	cmp	r2, #0
 801d560:	d1f6      	bne.n	801d550 <_strtol_l.constprop.0+0xd8>
 801d562:	f8c8 1000 	str.w	r1, [r8]
 801d566:	e794      	b.n	801d492 <_strtol_l.constprop.0+0x1a>
 801d568:	080252a2 	.word	0x080252a2

0801d56c <_strtol_r>:
 801d56c:	f7ff bf84 	b.w	801d478 <_strtol_l.constprop.0>

0801d570 <strtol>:
 801d570:	4613      	mov	r3, r2
 801d572:	460a      	mov	r2, r1
 801d574:	4601      	mov	r1, r0
 801d576:	4802      	ldr	r0, [pc, #8]	@ (801d580 <strtol+0x10>)
 801d578:	6800      	ldr	r0, [r0, #0]
 801d57a:	f7ff bf7d 	b.w	801d478 <_strtol_l.constprop.0>
 801d57e:	bf00      	nop
 801d580:	2000005c 	.word	0x2000005c

0801d584 <__cvt>:
 801d584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d588:	ec57 6b10 	vmov	r6, r7, d0
 801d58c:	2f00      	cmp	r7, #0
 801d58e:	460c      	mov	r4, r1
 801d590:	4619      	mov	r1, r3
 801d592:	463b      	mov	r3, r7
 801d594:	bfbb      	ittet	lt
 801d596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d59a:	461f      	movlt	r7, r3
 801d59c:	2300      	movge	r3, #0
 801d59e:	232d      	movlt	r3, #45	@ 0x2d
 801d5a0:	700b      	strb	r3, [r1, #0]
 801d5a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d5a8:	4691      	mov	r9, r2
 801d5aa:	f023 0820 	bic.w	r8, r3, #32
 801d5ae:	bfbc      	itt	lt
 801d5b0:	4632      	movlt	r2, r6
 801d5b2:	4616      	movlt	r6, r2
 801d5b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d5b8:	d005      	beq.n	801d5c6 <__cvt+0x42>
 801d5ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d5be:	d100      	bne.n	801d5c2 <__cvt+0x3e>
 801d5c0:	3401      	adds	r4, #1
 801d5c2:	2102      	movs	r1, #2
 801d5c4:	e000      	b.n	801d5c8 <__cvt+0x44>
 801d5c6:	2103      	movs	r1, #3
 801d5c8:	ab03      	add	r3, sp, #12
 801d5ca:	9301      	str	r3, [sp, #4]
 801d5cc:	ab02      	add	r3, sp, #8
 801d5ce:	9300      	str	r3, [sp, #0]
 801d5d0:	ec47 6b10 	vmov	d0, r6, r7
 801d5d4:	4653      	mov	r3, sl
 801d5d6:	4622      	mov	r2, r4
 801d5d8:	f001 fb02 	bl	801ebe0 <_dtoa_r>
 801d5dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d5e0:	4605      	mov	r5, r0
 801d5e2:	d119      	bne.n	801d618 <__cvt+0x94>
 801d5e4:	f019 0f01 	tst.w	r9, #1
 801d5e8:	d00e      	beq.n	801d608 <__cvt+0x84>
 801d5ea:	eb00 0904 	add.w	r9, r0, r4
 801d5ee:	2200      	movs	r2, #0
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	4630      	mov	r0, r6
 801d5f4:	4639      	mov	r1, r7
 801d5f6:	f7e3 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 801d5fa:	b108      	cbz	r0, 801d600 <__cvt+0x7c>
 801d5fc:	f8cd 900c 	str.w	r9, [sp, #12]
 801d600:	2230      	movs	r2, #48	@ 0x30
 801d602:	9b03      	ldr	r3, [sp, #12]
 801d604:	454b      	cmp	r3, r9
 801d606:	d31e      	bcc.n	801d646 <__cvt+0xc2>
 801d608:	9b03      	ldr	r3, [sp, #12]
 801d60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d60c:	1b5b      	subs	r3, r3, r5
 801d60e:	4628      	mov	r0, r5
 801d610:	6013      	str	r3, [r2, #0]
 801d612:	b004      	add	sp, #16
 801d614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d61c:	eb00 0904 	add.w	r9, r0, r4
 801d620:	d1e5      	bne.n	801d5ee <__cvt+0x6a>
 801d622:	7803      	ldrb	r3, [r0, #0]
 801d624:	2b30      	cmp	r3, #48	@ 0x30
 801d626:	d10a      	bne.n	801d63e <__cvt+0xba>
 801d628:	2200      	movs	r2, #0
 801d62a:	2300      	movs	r3, #0
 801d62c:	4630      	mov	r0, r6
 801d62e:	4639      	mov	r1, r7
 801d630:	f7e3 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d634:	b918      	cbnz	r0, 801d63e <__cvt+0xba>
 801d636:	f1c4 0401 	rsb	r4, r4, #1
 801d63a:	f8ca 4000 	str.w	r4, [sl]
 801d63e:	f8da 3000 	ldr.w	r3, [sl]
 801d642:	4499      	add	r9, r3
 801d644:	e7d3      	b.n	801d5ee <__cvt+0x6a>
 801d646:	1c59      	adds	r1, r3, #1
 801d648:	9103      	str	r1, [sp, #12]
 801d64a:	701a      	strb	r2, [r3, #0]
 801d64c:	e7d9      	b.n	801d602 <__cvt+0x7e>

0801d64e <__exponent>:
 801d64e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d650:	2900      	cmp	r1, #0
 801d652:	bfba      	itte	lt
 801d654:	4249      	neglt	r1, r1
 801d656:	232d      	movlt	r3, #45	@ 0x2d
 801d658:	232b      	movge	r3, #43	@ 0x2b
 801d65a:	2909      	cmp	r1, #9
 801d65c:	7002      	strb	r2, [r0, #0]
 801d65e:	7043      	strb	r3, [r0, #1]
 801d660:	dd29      	ble.n	801d6b6 <__exponent+0x68>
 801d662:	f10d 0307 	add.w	r3, sp, #7
 801d666:	461d      	mov	r5, r3
 801d668:	270a      	movs	r7, #10
 801d66a:	461a      	mov	r2, r3
 801d66c:	fbb1 f6f7 	udiv	r6, r1, r7
 801d670:	fb07 1416 	mls	r4, r7, r6, r1
 801d674:	3430      	adds	r4, #48	@ 0x30
 801d676:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d67a:	460c      	mov	r4, r1
 801d67c:	2c63      	cmp	r4, #99	@ 0x63
 801d67e:	f103 33ff 	add.w	r3, r3, #4294967295
 801d682:	4631      	mov	r1, r6
 801d684:	dcf1      	bgt.n	801d66a <__exponent+0x1c>
 801d686:	3130      	adds	r1, #48	@ 0x30
 801d688:	1e94      	subs	r4, r2, #2
 801d68a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d68e:	1c41      	adds	r1, r0, #1
 801d690:	4623      	mov	r3, r4
 801d692:	42ab      	cmp	r3, r5
 801d694:	d30a      	bcc.n	801d6ac <__exponent+0x5e>
 801d696:	f10d 0309 	add.w	r3, sp, #9
 801d69a:	1a9b      	subs	r3, r3, r2
 801d69c:	42ac      	cmp	r4, r5
 801d69e:	bf88      	it	hi
 801d6a0:	2300      	movhi	r3, #0
 801d6a2:	3302      	adds	r3, #2
 801d6a4:	4403      	add	r3, r0
 801d6a6:	1a18      	subs	r0, r3, r0
 801d6a8:	b003      	add	sp, #12
 801d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d6b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d6b4:	e7ed      	b.n	801d692 <__exponent+0x44>
 801d6b6:	2330      	movs	r3, #48	@ 0x30
 801d6b8:	3130      	adds	r1, #48	@ 0x30
 801d6ba:	7083      	strb	r3, [r0, #2]
 801d6bc:	70c1      	strb	r1, [r0, #3]
 801d6be:	1d03      	adds	r3, r0, #4
 801d6c0:	e7f1      	b.n	801d6a6 <__exponent+0x58>
	...

0801d6c4 <_printf_float>:
 801d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c8:	b08d      	sub	sp, #52	@ 0x34
 801d6ca:	460c      	mov	r4, r1
 801d6cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d6d0:	4616      	mov	r6, r2
 801d6d2:	461f      	mov	r7, r3
 801d6d4:	4605      	mov	r5, r0
 801d6d6:	f001 f8cd 	bl	801e874 <_localeconv_r>
 801d6da:	6803      	ldr	r3, [r0, #0]
 801d6dc:	9304      	str	r3, [sp, #16]
 801d6de:	4618      	mov	r0, r3
 801d6e0:	f7e2 fdc6 	bl	8000270 <strlen>
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6e8:	f8d8 3000 	ldr.w	r3, [r8]
 801d6ec:	9005      	str	r0, [sp, #20]
 801d6ee:	3307      	adds	r3, #7
 801d6f0:	f023 0307 	bic.w	r3, r3, #7
 801d6f4:	f103 0208 	add.w	r2, r3, #8
 801d6f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d6fc:	f8d4 b000 	ldr.w	fp, [r4]
 801d700:	f8c8 2000 	str.w	r2, [r8]
 801d704:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d70c:	9307      	str	r3, [sp, #28]
 801d70e:	f8cd 8018 	str.w	r8, [sp, #24]
 801d712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d71a:	4b9c      	ldr	r3, [pc, #624]	@ (801d98c <_printf_float+0x2c8>)
 801d71c:	f04f 32ff 	mov.w	r2, #4294967295
 801d720:	f7e3 fa04 	bl	8000b2c <__aeabi_dcmpun>
 801d724:	bb70      	cbnz	r0, 801d784 <_printf_float+0xc0>
 801d726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d72a:	4b98      	ldr	r3, [pc, #608]	@ (801d98c <_printf_float+0x2c8>)
 801d72c:	f04f 32ff 	mov.w	r2, #4294967295
 801d730:	f7e3 f9de 	bl	8000af0 <__aeabi_dcmple>
 801d734:	bb30      	cbnz	r0, 801d784 <_printf_float+0xc0>
 801d736:	2200      	movs	r2, #0
 801d738:	2300      	movs	r3, #0
 801d73a:	4640      	mov	r0, r8
 801d73c:	4649      	mov	r1, r9
 801d73e:	f7e3 f9cd 	bl	8000adc <__aeabi_dcmplt>
 801d742:	b110      	cbz	r0, 801d74a <_printf_float+0x86>
 801d744:	232d      	movs	r3, #45	@ 0x2d
 801d746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d74a:	4a91      	ldr	r2, [pc, #580]	@ (801d990 <_printf_float+0x2cc>)
 801d74c:	4b91      	ldr	r3, [pc, #580]	@ (801d994 <_printf_float+0x2d0>)
 801d74e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d752:	bf94      	ite	ls
 801d754:	4690      	movls	r8, r2
 801d756:	4698      	movhi	r8, r3
 801d758:	2303      	movs	r3, #3
 801d75a:	6123      	str	r3, [r4, #16]
 801d75c:	f02b 0304 	bic.w	r3, fp, #4
 801d760:	6023      	str	r3, [r4, #0]
 801d762:	f04f 0900 	mov.w	r9, #0
 801d766:	9700      	str	r7, [sp, #0]
 801d768:	4633      	mov	r3, r6
 801d76a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d76c:	4621      	mov	r1, r4
 801d76e:	4628      	mov	r0, r5
 801d770:	f000 f9d2 	bl	801db18 <_printf_common>
 801d774:	3001      	adds	r0, #1
 801d776:	f040 808d 	bne.w	801d894 <_printf_float+0x1d0>
 801d77a:	f04f 30ff 	mov.w	r0, #4294967295
 801d77e:	b00d      	add	sp, #52	@ 0x34
 801d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d784:	4642      	mov	r2, r8
 801d786:	464b      	mov	r3, r9
 801d788:	4640      	mov	r0, r8
 801d78a:	4649      	mov	r1, r9
 801d78c:	f7e3 f9ce 	bl	8000b2c <__aeabi_dcmpun>
 801d790:	b140      	cbz	r0, 801d7a4 <_printf_float+0xe0>
 801d792:	464b      	mov	r3, r9
 801d794:	2b00      	cmp	r3, #0
 801d796:	bfbc      	itt	lt
 801d798:	232d      	movlt	r3, #45	@ 0x2d
 801d79a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d79e:	4a7e      	ldr	r2, [pc, #504]	@ (801d998 <_printf_float+0x2d4>)
 801d7a0:	4b7e      	ldr	r3, [pc, #504]	@ (801d99c <_printf_float+0x2d8>)
 801d7a2:	e7d4      	b.n	801d74e <_printf_float+0x8a>
 801d7a4:	6863      	ldr	r3, [r4, #4]
 801d7a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d7aa:	9206      	str	r2, [sp, #24]
 801d7ac:	1c5a      	adds	r2, r3, #1
 801d7ae:	d13b      	bne.n	801d828 <_printf_float+0x164>
 801d7b0:	2306      	movs	r3, #6
 801d7b2:	6063      	str	r3, [r4, #4]
 801d7b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	6022      	str	r2, [r4, #0]
 801d7bc:	9303      	str	r3, [sp, #12]
 801d7be:	ab0a      	add	r3, sp, #40	@ 0x28
 801d7c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d7c4:	ab09      	add	r3, sp, #36	@ 0x24
 801d7c6:	9300      	str	r3, [sp, #0]
 801d7c8:	6861      	ldr	r1, [r4, #4]
 801d7ca:	ec49 8b10 	vmov	d0, r8, r9
 801d7ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	f7ff fed6 	bl	801d584 <__cvt>
 801d7d8:	9b06      	ldr	r3, [sp, #24]
 801d7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d7dc:	2b47      	cmp	r3, #71	@ 0x47
 801d7de:	4680      	mov	r8, r0
 801d7e0:	d129      	bne.n	801d836 <_printf_float+0x172>
 801d7e2:	1cc8      	adds	r0, r1, #3
 801d7e4:	db02      	blt.n	801d7ec <_printf_float+0x128>
 801d7e6:	6863      	ldr	r3, [r4, #4]
 801d7e8:	4299      	cmp	r1, r3
 801d7ea:	dd41      	ble.n	801d870 <_printf_float+0x1ac>
 801d7ec:	f1aa 0a02 	sub.w	sl, sl, #2
 801d7f0:	fa5f fa8a 	uxtb.w	sl, sl
 801d7f4:	3901      	subs	r1, #1
 801d7f6:	4652      	mov	r2, sl
 801d7f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d7fc:	9109      	str	r1, [sp, #36]	@ 0x24
 801d7fe:	f7ff ff26 	bl	801d64e <__exponent>
 801d802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d804:	1813      	adds	r3, r2, r0
 801d806:	2a01      	cmp	r2, #1
 801d808:	4681      	mov	r9, r0
 801d80a:	6123      	str	r3, [r4, #16]
 801d80c:	dc02      	bgt.n	801d814 <_printf_float+0x150>
 801d80e:	6822      	ldr	r2, [r4, #0]
 801d810:	07d2      	lsls	r2, r2, #31
 801d812:	d501      	bpl.n	801d818 <_printf_float+0x154>
 801d814:	3301      	adds	r3, #1
 801d816:	6123      	str	r3, [r4, #16]
 801d818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d0a2      	beq.n	801d766 <_printf_float+0xa2>
 801d820:	232d      	movs	r3, #45	@ 0x2d
 801d822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d826:	e79e      	b.n	801d766 <_printf_float+0xa2>
 801d828:	9a06      	ldr	r2, [sp, #24]
 801d82a:	2a47      	cmp	r2, #71	@ 0x47
 801d82c:	d1c2      	bne.n	801d7b4 <_printf_float+0xf0>
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d1c0      	bne.n	801d7b4 <_printf_float+0xf0>
 801d832:	2301      	movs	r3, #1
 801d834:	e7bd      	b.n	801d7b2 <_printf_float+0xee>
 801d836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d83a:	d9db      	bls.n	801d7f4 <_printf_float+0x130>
 801d83c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d840:	d118      	bne.n	801d874 <_printf_float+0x1b0>
 801d842:	2900      	cmp	r1, #0
 801d844:	6863      	ldr	r3, [r4, #4]
 801d846:	dd0b      	ble.n	801d860 <_printf_float+0x19c>
 801d848:	6121      	str	r1, [r4, #16]
 801d84a:	b913      	cbnz	r3, 801d852 <_printf_float+0x18e>
 801d84c:	6822      	ldr	r2, [r4, #0]
 801d84e:	07d0      	lsls	r0, r2, #31
 801d850:	d502      	bpl.n	801d858 <_printf_float+0x194>
 801d852:	3301      	adds	r3, #1
 801d854:	440b      	add	r3, r1
 801d856:	6123      	str	r3, [r4, #16]
 801d858:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d85a:	f04f 0900 	mov.w	r9, #0
 801d85e:	e7db      	b.n	801d818 <_printf_float+0x154>
 801d860:	b913      	cbnz	r3, 801d868 <_printf_float+0x1a4>
 801d862:	6822      	ldr	r2, [r4, #0]
 801d864:	07d2      	lsls	r2, r2, #31
 801d866:	d501      	bpl.n	801d86c <_printf_float+0x1a8>
 801d868:	3302      	adds	r3, #2
 801d86a:	e7f4      	b.n	801d856 <_printf_float+0x192>
 801d86c:	2301      	movs	r3, #1
 801d86e:	e7f2      	b.n	801d856 <_printf_float+0x192>
 801d870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d876:	4299      	cmp	r1, r3
 801d878:	db05      	blt.n	801d886 <_printf_float+0x1c2>
 801d87a:	6823      	ldr	r3, [r4, #0]
 801d87c:	6121      	str	r1, [r4, #16]
 801d87e:	07d8      	lsls	r0, r3, #31
 801d880:	d5ea      	bpl.n	801d858 <_printf_float+0x194>
 801d882:	1c4b      	adds	r3, r1, #1
 801d884:	e7e7      	b.n	801d856 <_printf_float+0x192>
 801d886:	2900      	cmp	r1, #0
 801d888:	bfd4      	ite	le
 801d88a:	f1c1 0202 	rsble	r2, r1, #2
 801d88e:	2201      	movgt	r2, #1
 801d890:	4413      	add	r3, r2
 801d892:	e7e0      	b.n	801d856 <_printf_float+0x192>
 801d894:	6823      	ldr	r3, [r4, #0]
 801d896:	055a      	lsls	r2, r3, #21
 801d898:	d407      	bmi.n	801d8aa <_printf_float+0x1e6>
 801d89a:	6923      	ldr	r3, [r4, #16]
 801d89c:	4642      	mov	r2, r8
 801d89e:	4631      	mov	r1, r6
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	47b8      	blx	r7
 801d8a4:	3001      	adds	r0, #1
 801d8a6:	d12b      	bne.n	801d900 <_printf_float+0x23c>
 801d8a8:	e767      	b.n	801d77a <_printf_float+0xb6>
 801d8aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d8ae:	f240 80dd 	bls.w	801da6c <_printf_float+0x3a8>
 801d8b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	f7e3 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	d033      	beq.n	801d92a <_printf_float+0x266>
 801d8c2:	4a37      	ldr	r2, [pc, #220]	@ (801d9a0 <_printf_float+0x2dc>)
 801d8c4:	2301      	movs	r3, #1
 801d8c6:	4631      	mov	r1, r6
 801d8c8:	4628      	mov	r0, r5
 801d8ca:	47b8      	blx	r7
 801d8cc:	3001      	adds	r0, #1
 801d8ce:	f43f af54 	beq.w	801d77a <_printf_float+0xb6>
 801d8d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d8d6:	4543      	cmp	r3, r8
 801d8d8:	db02      	blt.n	801d8e0 <_printf_float+0x21c>
 801d8da:	6823      	ldr	r3, [r4, #0]
 801d8dc:	07d8      	lsls	r0, r3, #31
 801d8de:	d50f      	bpl.n	801d900 <_printf_float+0x23c>
 801d8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d8e4:	4631      	mov	r1, r6
 801d8e6:	4628      	mov	r0, r5
 801d8e8:	47b8      	blx	r7
 801d8ea:	3001      	adds	r0, #1
 801d8ec:	f43f af45 	beq.w	801d77a <_printf_float+0xb6>
 801d8f0:	f04f 0900 	mov.w	r9, #0
 801d8f4:	f108 38ff 	add.w	r8, r8, #4294967295
 801d8f8:	f104 0a1a 	add.w	sl, r4, #26
 801d8fc:	45c8      	cmp	r8, r9
 801d8fe:	dc09      	bgt.n	801d914 <_printf_float+0x250>
 801d900:	6823      	ldr	r3, [r4, #0]
 801d902:	079b      	lsls	r3, r3, #30
 801d904:	f100 8103 	bmi.w	801db0e <_printf_float+0x44a>
 801d908:	68e0      	ldr	r0, [r4, #12]
 801d90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d90c:	4298      	cmp	r0, r3
 801d90e:	bfb8      	it	lt
 801d910:	4618      	movlt	r0, r3
 801d912:	e734      	b.n	801d77e <_printf_float+0xba>
 801d914:	2301      	movs	r3, #1
 801d916:	4652      	mov	r2, sl
 801d918:	4631      	mov	r1, r6
 801d91a:	4628      	mov	r0, r5
 801d91c:	47b8      	blx	r7
 801d91e:	3001      	adds	r0, #1
 801d920:	f43f af2b 	beq.w	801d77a <_printf_float+0xb6>
 801d924:	f109 0901 	add.w	r9, r9, #1
 801d928:	e7e8      	b.n	801d8fc <_printf_float+0x238>
 801d92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	dc39      	bgt.n	801d9a4 <_printf_float+0x2e0>
 801d930:	4a1b      	ldr	r2, [pc, #108]	@ (801d9a0 <_printf_float+0x2dc>)
 801d932:	2301      	movs	r3, #1
 801d934:	4631      	mov	r1, r6
 801d936:	4628      	mov	r0, r5
 801d938:	47b8      	blx	r7
 801d93a:	3001      	adds	r0, #1
 801d93c:	f43f af1d 	beq.w	801d77a <_printf_float+0xb6>
 801d940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d944:	ea59 0303 	orrs.w	r3, r9, r3
 801d948:	d102      	bne.n	801d950 <_printf_float+0x28c>
 801d94a:	6823      	ldr	r3, [r4, #0]
 801d94c:	07d9      	lsls	r1, r3, #31
 801d94e:	d5d7      	bpl.n	801d900 <_printf_float+0x23c>
 801d950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d954:	4631      	mov	r1, r6
 801d956:	4628      	mov	r0, r5
 801d958:	47b8      	blx	r7
 801d95a:	3001      	adds	r0, #1
 801d95c:	f43f af0d 	beq.w	801d77a <_printf_float+0xb6>
 801d960:	f04f 0a00 	mov.w	sl, #0
 801d964:	f104 0b1a 	add.w	fp, r4, #26
 801d968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d96a:	425b      	negs	r3, r3
 801d96c:	4553      	cmp	r3, sl
 801d96e:	dc01      	bgt.n	801d974 <_printf_float+0x2b0>
 801d970:	464b      	mov	r3, r9
 801d972:	e793      	b.n	801d89c <_printf_float+0x1d8>
 801d974:	2301      	movs	r3, #1
 801d976:	465a      	mov	r2, fp
 801d978:	4631      	mov	r1, r6
 801d97a:	4628      	mov	r0, r5
 801d97c:	47b8      	blx	r7
 801d97e:	3001      	adds	r0, #1
 801d980:	f43f aefb 	beq.w	801d77a <_printf_float+0xb6>
 801d984:	f10a 0a01 	add.w	sl, sl, #1
 801d988:	e7ee      	b.n	801d968 <_printf_float+0x2a4>
 801d98a:	bf00      	nop
 801d98c:	7fefffff 	.word	0x7fefffff
 801d990:	080253a2 	.word	0x080253a2
 801d994:	080253a6 	.word	0x080253a6
 801d998:	080253aa 	.word	0x080253aa
 801d99c:	080253ae 	.word	0x080253ae
 801d9a0:	080253b2 	.word	0x080253b2
 801d9a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d9a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d9aa:	4553      	cmp	r3, sl
 801d9ac:	bfa8      	it	ge
 801d9ae:	4653      	movge	r3, sl
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	4699      	mov	r9, r3
 801d9b4:	dc36      	bgt.n	801da24 <_printf_float+0x360>
 801d9b6:	f04f 0b00 	mov.w	fp, #0
 801d9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9be:	f104 021a 	add.w	r2, r4, #26
 801d9c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d9c4:	9306      	str	r3, [sp, #24]
 801d9c6:	eba3 0309 	sub.w	r3, r3, r9
 801d9ca:	455b      	cmp	r3, fp
 801d9cc:	dc31      	bgt.n	801da32 <_printf_float+0x36e>
 801d9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9d0:	459a      	cmp	sl, r3
 801d9d2:	dc3a      	bgt.n	801da4a <_printf_float+0x386>
 801d9d4:	6823      	ldr	r3, [r4, #0]
 801d9d6:	07da      	lsls	r2, r3, #31
 801d9d8:	d437      	bmi.n	801da4a <_printf_float+0x386>
 801d9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9dc:	ebaa 0903 	sub.w	r9, sl, r3
 801d9e0:	9b06      	ldr	r3, [sp, #24]
 801d9e2:	ebaa 0303 	sub.w	r3, sl, r3
 801d9e6:	4599      	cmp	r9, r3
 801d9e8:	bfa8      	it	ge
 801d9ea:	4699      	movge	r9, r3
 801d9ec:	f1b9 0f00 	cmp.w	r9, #0
 801d9f0:	dc33      	bgt.n	801da5a <_printf_float+0x396>
 801d9f2:	f04f 0800 	mov.w	r8, #0
 801d9f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9fa:	f104 0b1a 	add.w	fp, r4, #26
 801d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da00:	ebaa 0303 	sub.w	r3, sl, r3
 801da04:	eba3 0309 	sub.w	r3, r3, r9
 801da08:	4543      	cmp	r3, r8
 801da0a:	f77f af79 	ble.w	801d900 <_printf_float+0x23c>
 801da0e:	2301      	movs	r3, #1
 801da10:	465a      	mov	r2, fp
 801da12:	4631      	mov	r1, r6
 801da14:	4628      	mov	r0, r5
 801da16:	47b8      	blx	r7
 801da18:	3001      	adds	r0, #1
 801da1a:	f43f aeae 	beq.w	801d77a <_printf_float+0xb6>
 801da1e:	f108 0801 	add.w	r8, r8, #1
 801da22:	e7ec      	b.n	801d9fe <_printf_float+0x33a>
 801da24:	4642      	mov	r2, r8
 801da26:	4631      	mov	r1, r6
 801da28:	4628      	mov	r0, r5
 801da2a:	47b8      	blx	r7
 801da2c:	3001      	adds	r0, #1
 801da2e:	d1c2      	bne.n	801d9b6 <_printf_float+0x2f2>
 801da30:	e6a3      	b.n	801d77a <_printf_float+0xb6>
 801da32:	2301      	movs	r3, #1
 801da34:	4631      	mov	r1, r6
 801da36:	4628      	mov	r0, r5
 801da38:	9206      	str	r2, [sp, #24]
 801da3a:	47b8      	blx	r7
 801da3c:	3001      	adds	r0, #1
 801da3e:	f43f ae9c 	beq.w	801d77a <_printf_float+0xb6>
 801da42:	9a06      	ldr	r2, [sp, #24]
 801da44:	f10b 0b01 	add.w	fp, fp, #1
 801da48:	e7bb      	b.n	801d9c2 <_printf_float+0x2fe>
 801da4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801da4e:	4631      	mov	r1, r6
 801da50:	4628      	mov	r0, r5
 801da52:	47b8      	blx	r7
 801da54:	3001      	adds	r0, #1
 801da56:	d1c0      	bne.n	801d9da <_printf_float+0x316>
 801da58:	e68f      	b.n	801d77a <_printf_float+0xb6>
 801da5a:	9a06      	ldr	r2, [sp, #24]
 801da5c:	464b      	mov	r3, r9
 801da5e:	4442      	add	r2, r8
 801da60:	4631      	mov	r1, r6
 801da62:	4628      	mov	r0, r5
 801da64:	47b8      	blx	r7
 801da66:	3001      	adds	r0, #1
 801da68:	d1c3      	bne.n	801d9f2 <_printf_float+0x32e>
 801da6a:	e686      	b.n	801d77a <_printf_float+0xb6>
 801da6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801da70:	f1ba 0f01 	cmp.w	sl, #1
 801da74:	dc01      	bgt.n	801da7a <_printf_float+0x3b6>
 801da76:	07db      	lsls	r3, r3, #31
 801da78:	d536      	bpl.n	801dae8 <_printf_float+0x424>
 801da7a:	2301      	movs	r3, #1
 801da7c:	4642      	mov	r2, r8
 801da7e:	4631      	mov	r1, r6
 801da80:	4628      	mov	r0, r5
 801da82:	47b8      	blx	r7
 801da84:	3001      	adds	r0, #1
 801da86:	f43f ae78 	beq.w	801d77a <_printf_float+0xb6>
 801da8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801da8e:	4631      	mov	r1, r6
 801da90:	4628      	mov	r0, r5
 801da92:	47b8      	blx	r7
 801da94:	3001      	adds	r0, #1
 801da96:	f43f ae70 	beq.w	801d77a <_printf_float+0xb6>
 801da9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801da9e:	2200      	movs	r2, #0
 801daa0:	2300      	movs	r3, #0
 801daa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801daa6:	f7e3 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 801daaa:	b9c0      	cbnz	r0, 801dade <_printf_float+0x41a>
 801daac:	4653      	mov	r3, sl
 801daae:	f108 0201 	add.w	r2, r8, #1
 801dab2:	4631      	mov	r1, r6
 801dab4:	4628      	mov	r0, r5
 801dab6:	47b8      	blx	r7
 801dab8:	3001      	adds	r0, #1
 801daba:	d10c      	bne.n	801dad6 <_printf_float+0x412>
 801dabc:	e65d      	b.n	801d77a <_printf_float+0xb6>
 801dabe:	2301      	movs	r3, #1
 801dac0:	465a      	mov	r2, fp
 801dac2:	4631      	mov	r1, r6
 801dac4:	4628      	mov	r0, r5
 801dac6:	47b8      	blx	r7
 801dac8:	3001      	adds	r0, #1
 801daca:	f43f ae56 	beq.w	801d77a <_printf_float+0xb6>
 801dace:	f108 0801 	add.w	r8, r8, #1
 801dad2:	45d0      	cmp	r8, sl
 801dad4:	dbf3      	blt.n	801dabe <_printf_float+0x3fa>
 801dad6:	464b      	mov	r3, r9
 801dad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801dadc:	e6df      	b.n	801d89e <_printf_float+0x1da>
 801dade:	f04f 0800 	mov.w	r8, #0
 801dae2:	f104 0b1a 	add.w	fp, r4, #26
 801dae6:	e7f4      	b.n	801dad2 <_printf_float+0x40e>
 801dae8:	2301      	movs	r3, #1
 801daea:	4642      	mov	r2, r8
 801daec:	e7e1      	b.n	801dab2 <_printf_float+0x3ee>
 801daee:	2301      	movs	r3, #1
 801daf0:	464a      	mov	r2, r9
 801daf2:	4631      	mov	r1, r6
 801daf4:	4628      	mov	r0, r5
 801daf6:	47b8      	blx	r7
 801daf8:	3001      	adds	r0, #1
 801dafa:	f43f ae3e 	beq.w	801d77a <_printf_float+0xb6>
 801dafe:	f108 0801 	add.w	r8, r8, #1
 801db02:	68e3      	ldr	r3, [r4, #12]
 801db04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801db06:	1a5b      	subs	r3, r3, r1
 801db08:	4543      	cmp	r3, r8
 801db0a:	dcf0      	bgt.n	801daee <_printf_float+0x42a>
 801db0c:	e6fc      	b.n	801d908 <_printf_float+0x244>
 801db0e:	f04f 0800 	mov.w	r8, #0
 801db12:	f104 0919 	add.w	r9, r4, #25
 801db16:	e7f4      	b.n	801db02 <_printf_float+0x43e>

0801db18 <_printf_common>:
 801db18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db1c:	4616      	mov	r6, r2
 801db1e:	4698      	mov	r8, r3
 801db20:	688a      	ldr	r2, [r1, #8]
 801db22:	690b      	ldr	r3, [r1, #16]
 801db24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801db28:	4293      	cmp	r3, r2
 801db2a:	bfb8      	it	lt
 801db2c:	4613      	movlt	r3, r2
 801db2e:	6033      	str	r3, [r6, #0]
 801db30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801db34:	4607      	mov	r7, r0
 801db36:	460c      	mov	r4, r1
 801db38:	b10a      	cbz	r2, 801db3e <_printf_common+0x26>
 801db3a:	3301      	adds	r3, #1
 801db3c:	6033      	str	r3, [r6, #0]
 801db3e:	6823      	ldr	r3, [r4, #0]
 801db40:	0699      	lsls	r1, r3, #26
 801db42:	bf42      	ittt	mi
 801db44:	6833      	ldrmi	r3, [r6, #0]
 801db46:	3302      	addmi	r3, #2
 801db48:	6033      	strmi	r3, [r6, #0]
 801db4a:	6825      	ldr	r5, [r4, #0]
 801db4c:	f015 0506 	ands.w	r5, r5, #6
 801db50:	d106      	bne.n	801db60 <_printf_common+0x48>
 801db52:	f104 0a19 	add.w	sl, r4, #25
 801db56:	68e3      	ldr	r3, [r4, #12]
 801db58:	6832      	ldr	r2, [r6, #0]
 801db5a:	1a9b      	subs	r3, r3, r2
 801db5c:	42ab      	cmp	r3, r5
 801db5e:	dc26      	bgt.n	801dbae <_printf_common+0x96>
 801db60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801db64:	6822      	ldr	r2, [r4, #0]
 801db66:	3b00      	subs	r3, #0
 801db68:	bf18      	it	ne
 801db6a:	2301      	movne	r3, #1
 801db6c:	0692      	lsls	r2, r2, #26
 801db6e:	d42b      	bmi.n	801dbc8 <_printf_common+0xb0>
 801db70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801db74:	4641      	mov	r1, r8
 801db76:	4638      	mov	r0, r7
 801db78:	47c8      	blx	r9
 801db7a:	3001      	adds	r0, #1
 801db7c:	d01e      	beq.n	801dbbc <_printf_common+0xa4>
 801db7e:	6823      	ldr	r3, [r4, #0]
 801db80:	6922      	ldr	r2, [r4, #16]
 801db82:	f003 0306 	and.w	r3, r3, #6
 801db86:	2b04      	cmp	r3, #4
 801db88:	bf02      	ittt	eq
 801db8a:	68e5      	ldreq	r5, [r4, #12]
 801db8c:	6833      	ldreq	r3, [r6, #0]
 801db8e:	1aed      	subeq	r5, r5, r3
 801db90:	68a3      	ldr	r3, [r4, #8]
 801db92:	bf0c      	ite	eq
 801db94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801db98:	2500      	movne	r5, #0
 801db9a:	4293      	cmp	r3, r2
 801db9c:	bfc4      	itt	gt
 801db9e:	1a9b      	subgt	r3, r3, r2
 801dba0:	18ed      	addgt	r5, r5, r3
 801dba2:	2600      	movs	r6, #0
 801dba4:	341a      	adds	r4, #26
 801dba6:	42b5      	cmp	r5, r6
 801dba8:	d11a      	bne.n	801dbe0 <_printf_common+0xc8>
 801dbaa:	2000      	movs	r0, #0
 801dbac:	e008      	b.n	801dbc0 <_printf_common+0xa8>
 801dbae:	2301      	movs	r3, #1
 801dbb0:	4652      	mov	r2, sl
 801dbb2:	4641      	mov	r1, r8
 801dbb4:	4638      	mov	r0, r7
 801dbb6:	47c8      	blx	r9
 801dbb8:	3001      	adds	r0, #1
 801dbba:	d103      	bne.n	801dbc4 <_printf_common+0xac>
 801dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbc4:	3501      	adds	r5, #1
 801dbc6:	e7c6      	b.n	801db56 <_printf_common+0x3e>
 801dbc8:	18e1      	adds	r1, r4, r3
 801dbca:	1c5a      	adds	r2, r3, #1
 801dbcc:	2030      	movs	r0, #48	@ 0x30
 801dbce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dbd2:	4422      	add	r2, r4
 801dbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dbd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dbdc:	3302      	adds	r3, #2
 801dbde:	e7c7      	b.n	801db70 <_printf_common+0x58>
 801dbe0:	2301      	movs	r3, #1
 801dbe2:	4622      	mov	r2, r4
 801dbe4:	4641      	mov	r1, r8
 801dbe6:	4638      	mov	r0, r7
 801dbe8:	47c8      	blx	r9
 801dbea:	3001      	adds	r0, #1
 801dbec:	d0e6      	beq.n	801dbbc <_printf_common+0xa4>
 801dbee:	3601      	adds	r6, #1
 801dbf0:	e7d9      	b.n	801dba6 <_printf_common+0x8e>
	...

0801dbf4 <_printf_i>:
 801dbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dbf8:	7e0f      	ldrb	r7, [r1, #24]
 801dbfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dbfc:	2f78      	cmp	r7, #120	@ 0x78
 801dbfe:	4691      	mov	r9, r2
 801dc00:	4680      	mov	r8, r0
 801dc02:	460c      	mov	r4, r1
 801dc04:	469a      	mov	sl, r3
 801dc06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dc0a:	d807      	bhi.n	801dc1c <_printf_i+0x28>
 801dc0c:	2f62      	cmp	r7, #98	@ 0x62
 801dc0e:	d80a      	bhi.n	801dc26 <_printf_i+0x32>
 801dc10:	2f00      	cmp	r7, #0
 801dc12:	f000 80d2 	beq.w	801ddba <_printf_i+0x1c6>
 801dc16:	2f58      	cmp	r7, #88	@ 0x58
 801dc18:	f000 80b9 	beq.w	801dd8e <_printf_i+0x19a>
 801dc1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dc20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dc24:	e03a      	b.n	801dc9c <_printf_i+0xa8>
 801dc26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dc2a:	2b15      	cmp	r3, #21
 801dc2c:	d8f6      	bhi.n	801dc1c <_printf_i+0x28>
 801dc2e:	a101      	add	r1, pc, #4	@ (adr r1, 801dc34 <_printf_i+0x40>)
 801dc30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc34:	0801dc8d 	.word	0x0801dc8d
 801dc38:	0801dca1 	.word	0x0801dca1
 801dc3c:	0801dc1d 	.word	0x0801dc1d
 801dc40:	0801dc1d 	.word	0x0801dc1d
 801dc44:	0801dc1d 	.word	0x0801dc1d
 801dc48:	0801dc1d 	.word	0x0801dc1d
 801dc4c:	0801dca1 	.word	0x0801dca1
 801dc50:	0801dc1d 	.word	0x0801dc1d
 801dc54:	0801dc1d 	.word	0x0801dc1d
 801dc58:	0801dc1d 	.word	0x0801dc1d
 801dc5c:	0801dc1d 	.word	0x0801dc1d
 801dc60:	0801dda1 	.word	0x0801dda1
 801dc64:	0801dccb 	.word	0x0801dccb
 801dc68:	0801dd5b 	.word	0x0801dd5b
 801dc6c:	0801dc1d 	.word	0x0801dc1d
 801dc70:	0801dc1d 	.word	0x0801dc1d
 801dc74:	0801ddc3 	.word	0x0801ddc3
 801dc78:	0801dc1d 	.word	0x0801dc1d
 801dc7c:	0801dccb 	.word	0x0801dccb
 801dc80:	0801dc1d 	.word	0x0801dc1d
 801dc84:	0801dc1d 	.word	0x0801dc1d
 801dc88:	0801dd63 	.word	0x0801dd63
 801dc8c:	6833      	ldr	r3, [r6, #0]
 801dc8e:	1d1a      	adds	r2, r3, #4
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	6032      	str	r2, [r6, #0]
 801dc94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dc98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	e09d      	b.n	801dddc <_printf_i+0x1e8>
 801dca0:	6833      	ldr	r3, [r6, #0]
 801dca2:	6820      	ldr	r0, [r4, #0]
 801dca4:	1d19      	adds	r1, r3, #4
 801dca6:	6031      	str	r1, [r6, #0]
 801dca8:	0606      	lsls	r6, r0, #24
 801dcaa:	d501      	bpl.n	801dcb0 <_printf_i+0xbc>
 801dcac:	681d      	ldr	r5, [r3, #0]
 801dcae:	e003      	b.n	801dcb8 <_printf_i+0xc4>
 801dcb0:	0645      	lsls	r5, r0, #25
 801dcb2:	d5fb      	bpl.n	801dcac <_printf_i+0xb8>
 801dcb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dcb8:	2d00      	cmp	r5, #0
 801dcba:	da03      	bge.n	801dcc4 <_printf_i+0xd0>
 801dcbc:	232d      	movs	r3, #45	@ 0x2d
 801dcbe:	426d      	negs	r5, r5
 801dcc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dcc4:	4859      	ldr	r0, [pc, #356]	@ (801de2c <_printf_i+0x238>)
 801dcc6:	230a      	movs	r3, #10
 801dcc8:	e011      	b.n	801dcee <_printf_i+0xfa>
 801dcca:	6821      	ldr	r1, [r4, #0]
 801dccc:	6833      	ldr	r3, [r6, #0]
 801dcce:	0608      	lsls	r0, r1, #24
 801dcd0:	f853 5b04 	ldr.w	r5, [r3], #4
 801dcd4:	d402      	bmi.n	801dcdc <_printf_i+0xe8>
 801dcd6:	0649      	lsls	r1, r1, #25
 801dcd8:	bf48      	it	mi
 801dcda:	b2ad      	uxthmi	r5, r5
 801dcdc:	2f6f      	cmp	r7, #111	@ 0x6f
 801dcde:	4853      	ldr	r0, [pc, #332]	@ (801de2c <_printf_i+0x238>)
 801dce0:	6033      	str	r3, [r6, #0]
 801dce2:	bf14      	ite	ne
 801dce4:	230a      	movne	r3, #10
 801dce6:	2308      	moveq	r3, #8
 801dce8:	2100      	movs	r1, #0
 801dcea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dcee:	6866      	ldr	r6, [r4, #4]
 801dcf0:	60a6      	str	r6, [r4, #8]
 801dcf2:	2e00      	cmp	r6, #0
 801dcf4:	bfa2      	ittt	ge
 801dcf6:	6821      	ldrge	r1, [r4, #0]
 801dcf8:	f021 0104 	bicge.w	r1, r1, #4
 801dcfc:	6021      	strge	r1, [r4, #0]
 801dcfe:	b90d      	cbnz	r5, 801dd04 <_printf_i+0x110>
 801dd00:	2e00      	cmp	r6, #0
 801dd02:	d04b      	beq.n	801dd9c <_printf_i+0x1a8>
 801dd04:	4616      	mov	r6, r2
 801dd06:	fbb5 f1f3 	udiv	r1, r5, r3
 801dd0a:	fb03 5711 	mls	r7, r3, r1, r5
 801dd0e:	5dc7      	ldrb	r7, [r0, r7]
 801dd10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dd14:	462f      	mov	r7, r5
 801dd16:	42bb      	cmp	r3, r7
 801dd18:	460d      	mov	r5, r1
 801dd1a:	d9f4      	bls.n	801dd06 <_printf_i+0x112>
 801dd1c:	2b08      	cmp	r3, #8
 801dd1e:	d10b      	bne.n	801dd38 <_printf_i+0x144>
 801dd20:	6823      	ldr	r3, [r4, #0]
 801dd22:	07df      	lsls	r7, r3, #31
 801dd24:	d508      	bpl.n	801dd38 <_printf_i+0x144>
 801dd26:	6923      	ldr	r3, [r4, #16]
 801dd28:	6861      	ldr	r1, [r4, #4]
 801dd2a:	4299      	cmp	r1, r3
 801dd2c:	bfde      	ittt	le
 801dd2e:	2330      	movle	r3, #48	@ 0x30
 801dd30:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dd34:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dd38:	1b92      	subs	r2, r2, r6
 801dd3a:	6122      	str	r2, [r4, #16]
 801dd3c:	f8cd a000 	str.w	sl, [sp]
 801dd40:	464b      	mov	r3, r9
 801dd42:	aa03      	add	r2, sp, #12
 801dd44:	4621      	mov	r1, r4
 801dd46:	4640      	mov	r0, r8
 801dd48:	f7ff fee6 	bl	801db18 <_printf_common>
 801dd4c:	3001      	adds	r0, #1
 801dd4e:	d14a      	bne.n	801dde6 <_printf_i+0x1f2>
 801dd50:	f04f 30ff 	mov.w	r0, #4294967295
 801dd54:	b004      	add	sp, #16
 801dd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd5a:	6823      	ldr	r3, [r4, #0]
 801dd5c:	f043 0320 	orr.w	r3, r3, #32
 801dd60:	6023      	str	r3, [r4, #0]
 801dd62:	4833      	ldr	r0, [pc, #204]	@ (801de30 <_printf_i+0x23c>)
 801dd64:	2778      	movs	r7, #120	@ 0x78
 801dd66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dd6a:	6823      	ldr	r3, [r4, #0]
 801dd6c:	6831      	ldr	r1, [r6, #0]
 801dd6e:	061f      	lsls	r7, r3, #24
 801dd70:	f851 5b04 	ldr.w	r5, [r1], #4
 801dd74:	d402      	bmi.n	801dd7c <_printf_i+0x188>
 801dd76:	065f      	lsls	r7, r3, #25
 801dd78:	bf48      	it	mi
 801dd7a:	b2ad      	uxthmi	r5, r5
 801dd7c:	6031      	str	r1, [r6, #0]
 801dd7e:	07d9      	lsls	r1, r3, #31
 801dd80:	bf44      	itt	mi
 801dd82:	f043 0320 	orrmi.w	r3, r3, #32
 801dd86:	6023      	strmi	r3, [r4, #0]
 801dd88:	b11d      	cbz	r5, 801dd92 <_printf_i+0x19e>
 801dd8a:	2310      	movs	r3, #16
 801dd8c:	e7ac      	b.n	801dce8 <_printf_i+0xf4>
 801dd8e:	4827      	ldr	r0, [pc, #156]	@ (801de2c <_printf_i+0x238>)
 801dd90:	e7e9      	b.n	801dd66 <_printf_i+0x172>
 801dd92:	6823      	ldr	r3, [r4, #0]
 801dd94:	f023 0320 	bic.w	r3, r3, #32
 801dd98:	6023      	str	r3, [r4, #0]
 801dd9a:	e7f6      	b.n	801dd8a <_printf_i+0x196>
 801dd9c:	4616      	mov	r6, r2
 801dd9e:	e7bd      	b.n	801dd1c <_printf_i+0x128>
 801dda0:	6833      	ldr	r3, [r6, #0]
 801dda2:	6825      	ldr	r5, [r4, #0]
 801dda4:	6961      	ldr	r1, [r4, #20]
 801dda6:	1d18      	adds	r0, r3, #4
 801dda8:	6030      	str	r0, [r6, #0]
 801ddaa:	062e      	lsls	r6, r5, #24
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	d501      	bpl.n	801ddb4 <_printf_i+0x1c0>
 801ddb0:	6019      	str	r1, [r3, #0]
 801ddb2:	e002      	b.n	801ddba <_printf_i+0x1c6>
 801ddb4:	0668      	lsls	r0, r5, #25
 801ddb6:	d5fb      	bpl.n	801ddb0 <_printf_i+0x1bc>
 801ddb8:	8019      	strh	r1, [r3, #0]
 801ddba:	2300      	movs	r3, #0
 801ddbc:	6123      	str	r3, [r4, #16]
 801ddbe:	4616      	mov	r6, r2
 801ddc0:	e7bc      	b.n	801dd3c <_printf_i+0x148>
 801ddc2:	6833      	ldr	r3, [r6, #0]
 801ddc4:	1d1a      	adds	r2, r3, #4
 801ddc6:	6032      	str	r2, [r6, #0]
 801ddc8:	681e      	ldr	r6, [r3, #0]
 801ddca:	6862      	ldr	r2, [r4, #4]
 801ddcc:	2100      	movs	r1, #0
 801ddce:	4630      	mov	r0, r6
 801ddd0:	f7e2 f9fe 	bl	80001d0 <memchr>
 801ddd4:	b108      	cbz	r0, 801ddda <_printf_i+0x1e6>
 801ddd6:	1b80      	subs	r0, r0, r6
 801ddd8:	6060      	str	r0, [r4, #4]
 801ddda:	6863      	ldr	r3, [r4, #4]
 801dddc:	6123      	str	r3, [r4, #16]
 801ddde:	2300      	movs	r3, #0
 801dde0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dde4:	e7aa      	b.n	801dd3c <_printf_i+0x148>
 801dde6:	6923      	ldr	r3, [r4, #16]
 801dde8:	4632      	mov	r2, r6
 801ddea:	4649      	mov	r1, r9
 801ddec:	4640      	mov	r0, r8
 801ddee:	47d0      	blx	sl
 801ddf0:	3001      	adds	r0, #1
 801ddf2:	d0ad      	beq.n	801dd50 <_printf_i+0x15c>
 801ddf4:	6823      	ldr	r3, [r4, #0]
 801ddf6:	079b      	lsls	r3, r3, #30
 801ddf8:	d413      	bmi.n	801de22 <_printf_i+0x22e>
 801ddfa:	68e0      	ldr	r0, [r4, #12]
 801ddfc:	9b03      	ldr	r3, [sp, #12]
 801ddfe:	4298      	cmp	r0, r3
 801de00:	bfb8      	it	lt
 801de02:	4618      	movlt	r0, r3
 801de04:	e7a6      	b.n	801dd54 <_printf_i+0x160>
 801de06:	2301      	movs	r3, #1
 801de08:	4632      	mov	r2, r6
 801de0a:	4649      	mov	r1, r9
 801de0c:	4640      	mov	r0, r8
 801de0e:	47d0      	blx	sl
 801de10:	3001      	adds	r0, #1
 801de12:	d09d      	beq.n	801dd50 <_printf_i+0x15c>
 801de14:	3501      	adds	r5, #1
 801de16:	68e3      	ldr	r3, [r4, #12]
 801de18:	9903      	ldr	r1, [sp, #12]
 801de1a:	1a5b      	subs	r3, r3, r1
 801de1c:	42ab      	cmp	r3, r5
 801de1e:	dcf2      	bgt.n	801de06 <_printf_i+0x212>
 801de20:	e7eb      	b.n	801ddfa <_printf_i+0x206>
 801de22:	2500      	movs	r5, #0
 801de24:	f104 0619 	add.w	r6, r4, #25
 801de28:	e7f5      	b.n	801de16 <_printf_i+0x222>
 801de2a:	bf00      	nop
 801de2c:	080253b4 	.word	0x080253b4
 801de30:	080253c5 	.word	0x080253c5

0801de34 <_scanf_float>:
 801de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de38:	b087      	sub	sp, #28
 801de3a:	4617      	mov	r7, r2
 801de3c:	9303      	str	r3, [sp, #12]
 801de3e:	688b      	ldr	r3, [r1, #8]
 801de40:	1e5a      	subs	r2, r3, #1
 801de42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801de46:	bf81      	itttt	hi
 801de48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801de4c:	eb03 0b05 	addhi.w	fp, r3, r5
 801de50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801de54:	608b      	strhi	r3, [r1, #8]
 801de56:	680b      	ldr	r3, [r1, #0]
 801de58:	460a      	mov	r2, r1
 801de5a:	f04f 0500 	mov.w	r5, #0
 801de5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801de62:	f842 3b1c 	str.w	r3, [r2], #28
 801de66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801de6a:	4680      	mov	r8, r0
 801de6c:	460c      	mov	r4, r1
 801de6e:	bf98      	it	ls
 801de70:	f04f 0b00 	movls.w	fp, #0
 801de74:	9201      	str	r2, [sp, #4]
 801de76:	4616      	mov	r6, r2
 801de78:	46aa      	mov	sl, r5
 801de7a:	46a9      	mov	r9, r5
 801de7c:	9502      	str	r5, [sp, #8]
 801de7e:	68a2      	ldr	r2, [r4, #8]
 801de80:	b152      	cbz	r2, 801de98 <_scanf_float+0x64>
 801de82:	683b      	ldr	r3, [r7, #0]
 801de84:	781b      	ldrb	r3, [r3, #0]
 801de86:	2b4e      	cmp	r3, #78	@ 0x4e
 801de88:	d864      	bhi.n	801df54 <_scanf_float+0x120>
 801de8a:	2b40      	cmp	r3, #64	@ 0x40
 801de8c:	d83c      	bhi.n	801df08 <_scanf_float+0xd4>
 801de8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801de92:	b2c8      	uxtb	r0, r1
 801de94:	280e      	cmp	r0, #14
 801de96:	d93a      	bls.n	801df0e <_scanf_float+0xda>
 801de98:	f1b9 0f00 	cmp.w	r9, #0
 801de9c:	d003      	beq.n	801dea6 <_scanf_float+0x72>
 801de9e:	6823      	ldr	r3, [r4, #0]
 801dea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801dea4:	6023      	str	r3, [r4, #0]
 801dea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801deaa:	f1ba 0f01 	cmp.w	sl, #1
 801deae:	f200 8117 	bhi.w	801e0e0 <_scanf_float+0x2ac>
 801deb2:	9b01      	ldr	r3, [sp, #4]
 801deb4:	429e      	cmp	r6, r3
 801deb6:	f200 8108 	bhi.w	801e0ca <_scanf_float+0x296>
 801deba:	2001      	movs	r0, #1
 801debc:	b007      	add	sp, #28
 801debe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801dec6:	2a0d      	cmp	r2, #13
 801dec8:	d8e6      	bhi.n	801de98 <_scanf_float+0x64>
 801deca:	a101      	add	r1, pc, #4	@ (adr r1, 801ded0 <_scanf_float+0x9c>)
 801decc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ded0:	0801e017 	.word	0x0801e017
 801ded4:	0801de99 	.word	0x0801de99
 801ded8:	0801de99 	.word	0x0801de99
 801dedc:	0801de99 	.word	0x0801de99
 801dee0:	0801e077 	.word	0x0801e077
 801dee4:	0801e04f 	.word	0x0801e04f
 801dee8:	0801de99 	.word	0x0801de99
 801deec:	0801de99 	.word	0x0801de99
 801def0:	0801e025 	.word	0x0801e025
 801def4:	0801de99 	.word	0x0801de99
 801def8:	0801de99 	.word	0x0801de99
 801defc:	0801de99 	.word	0x0801de99
 801df00:	0801de99 	.word	0x0801de99
 801df04:	0801dfdd 	.word	0x0801dfdd
 801df08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801df0c:	e7db      	b.n	801dec6 <_scanf_float+0x92>
 801df0e:	290e      	cmp	r1, #14
 801df10:	d8c2      	bhi.n	801de98 <_scanf_float+0x64>
 801df12:	a001      	add	r0, pc, #4	@ (adr r0, 801df18 <_scanf_float+0xe4>)
 801df14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801df18:	0801dfcd 	.word	0x0801dfcd
 801df1c:	0801de99 	.word	0x0801de99
 801df20:	0801dfcd 	.word	0x0801dfcd
 801df24:	0801e063 	.word	0x0801e063
 801df28:	0801de99 	.word	0x0801de99
 801df2c:	0801df75 	.word	0x0801df75
 801df30:	0801dfb3 	.word	0x0801dfb3
 801df34:	0801dfb3 	.word	0x0801dfb3
 801df38:	0801dfb3 	.word	0x0801dfb3
 801df3c:	0801dfb3 	.word	0x0801dfb3
 801df40:	0801dfb3 	.word	0x0801dfb3
 801df44:	0801dfb3 	.word	0x0801dfb3
 801df48:	0801dfb3 	.word	0x0801dfb3
 801df4c:	0801dfb3 	.word	0x0801dfb3
 801df50:	0801dfb3 	.word	0x0801dfb3
 801df54:	2b6e      	cmp	r3, #110	@ 0x6e
 801df56:	d809      	bhi.n	801df6c <_scanf_float+0x138>
 801df58:	2b60      	cmp	r3, #96	@ 0x60
 801df5a:	d8b2      	bhi.n	801dec2 <_scanf_float+0x8e>
 801df5c:	2b54      	cmp	r3, #84	@ 0x54
 801df5e:	d07b      	beq.n	801e058 <_scanf_float+0x224>
 801df60:	2b59      	cmp	r3, #89	@ 0x59
 801df62:	d199      	bne.n	801de98 <_scanf_float+0x64>
 801df64:	2d07      	cmp	r5, #7
 801df66:	d197      	bne.n	801de98 <_scanf_float+0x64>
 801df68:	2508      	movs	r5, #8
 801df6a:	e02c      	b.n	801dfc6 <_scanf_float+0x192>
 801df6c:	2b74      	cmp	r3, #116	@ 0x74
 801df6e:	d073      	beq.n	801e058 <_scanf_float+0x224>
 801df70:	2b79      	cmp	r3, #121	@ 0x79
 801df72:	e7f6      	b.n	801df62 <_scanf_float+0x12e>
 801df74:	6821      	ldr	r1, [r4, #0]
 801df76:	05c8      	lsls	r0, r1, #23
 801df78:	d51b      	bpl.n	801dfb2 <_scanf_float+0x17e>
 801df7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801df7e:	6021      	str	r1, [r4, #0]
 801df80:	f109 0901 	add.w	r9, r9, #1
 801df84:	f1bb 0f00 	cmp.w	fp, #0
 801df88:	d003      	beq.n	801df92 <_scanf_float+0x15e>
 801df8a:	3201      	adds	r2, #1
 801df8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df90:	60a2      	str	r2, [r4, #8]
 801df92:	68a3      	ldr	r3, [r4, #8]
 801df94:	3b01      	subs	r3, #1
 801df96:	60a3      	str	r3, [r4, #8]
 801df98:	6923      	ldr	r3, [r4, #16]
 801df9a:	3301      	adds	r3, #1
 801df9c:	6123      	str	r3, [r4, #16]
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	3b01      	subs	r3, #1
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	607b      	str	r3, [r7, #4]
 801dfa6:	f340 8087 	ble.w	801e0b8 <_scanf_float+0x284>
 801dfaa:	683b      	ldr	r3, [r7, #0]
 801dfac:	3301      	adds	r3, #1
 801dfae:	603b      	str	r3, [r7, #0]
 801dfb0:	e765      	b.n	801de7e <_scanf_float+0x4a>
 801dfb2:	eb1a 0105 	adds.w	r1, sl, r5
 801dfb6:	f47f af6f 	bne.w	801de98 <_scanf_float+0x64>
 801dfba:	6822      	ldr	r2, [r4, #0]
 801dfbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801dfc0:	6022      	str	r2, [r4, #0]
 801dfc2:	460d      	mov	r5, r1
 801dfc4:	468a      	mov	sl, r1
 801dfc6:	f806 3b01 	strb.w	r3, [r6], #1
 801dfca:	e7e2      	b.n	801df92 <_scanf_float+0x15e>
 801dfcc:	6822      	ldr	r2, [r4, #0]
 801dfce:	0610      	lsls	r0, r2, #24
 801dfd0:	f57f af62 	bpl.w	801de98 <_scanf_float+0x64>
 801dfd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801dfd8:	6022      	str	r2, [r4, #0]
 801dfda:	e7f4      	b.n	801dfc6 <_scanf_float+0x192>
 801dfdc:	f1ba 0f00 	cmp.w	sl, #0
 801dfe0:	d10e      	bne.n	801e000 <_scanf_float+0x1cc>
 801dfe2:	f1b9 0f00 	cmp.w	r9, #0
 801dfe6:	d10e      	bne.n	801e006 <_scanf_float+0x1d2>
 801dfe8:	6822      	ldr	r2, [r4, #0]
 801dfea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801dfee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801dff2:	d108      	bne.n	801e006 <_scanf_float+0x1d2>
 801dff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801dff8:	6022      	str	r2, [r4, #0]
 801dffa:	f04f 0a01 	mov.w	sl, #1
 801dffe:	e7e2      	b.n	801dfc6 <_scanf_float+0x192>
 801e000:	f1ba 0f02 	cmp.w	sl, #2
 801e004:	d055      	beq.n	801e0b2 <_scanf_float+0x27e>
 801e006:	2d01      	cmp	r5, #1
 801e008:	d002      	beq.n	801e010 <_scanf_float+0x1dc>
 801e00a:	2d04      	cmp	r5, #4
 801e00c:	f47f af44 	bne.w	801de98 <_scanf_float+0x64>
 801e010:	3501      	adds	r5, #1
 801e012:	b2ed      	uxtb	r5, r5
 801e014:	e7d7      	b.n	801dfc6 <_scanf_float+0x192>
 801e016:	f1ba 0f01 	cmp.w	sl, #1
 801e01a:	f47f af3d 	bne.w	801de98 <_scanf_float+0x64>
 801e01e:	f04f 0a02 	mov.w	sl, #2
 801e022:	e7d0      	b.n	801dfc6 <_scanf_float+0x192>
 801e024:	b97d      	cbnz	r5, 801e046 <_scanf_float+0x212>
 801e026:	f1b9 0f00 	cmp.w	r9, #0
 801e02a:	f47f af38 	bne.w	801de9e <_scanf_float+0x6a>
 801e02e:	6822      	ldr	r2, [r4, #0]
 801e030:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e034:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e038:	f040 8108 	bne.w	801e24c <_scanf_float+0x418>
 801e03c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e040:	6022      	str	r2, [r4, #0]
 801e042:	2501      	movs	r5, #1
 801e044:	e7bf      	b.n	801dfc6 <_scanf_float+0x192>
 801e046:	2d03      	cmp	r5, #3
 801e048:	d0e2      	beq.n	801e010 <_scanf_float+0x1dc>
 801e04a:	2d05      	cmp	r5, #5
 801e04c:	e7de      	b.n	801e00c <_scanf_float+0x1d8>
 801e04e:	2d02      	cmp	r5, #2
 801e050:	f47f af22 	bne.w	801de98 <_scanf_float+0x64>
 801e054:	2503      	movs	r5, #3
 801e056:	e7b6      	b.n	801dfc6 <_scanf_float+0x192>
 801e058:	2d06      	cmp	r5, #6
 801e05a:	f47f af1d 	bne.w	801de98 <_scanf_float+0x64>
 801e05e:	2507      	movs	r5, #7
 801e060:	e7b1      	b.n	801dfc6 <_scanf_float+0x192>
 801e062:	6822      	ldr	r2, [r4, #0]
 801e064:	0591      	lsls	r1, r2, #22
 801e066:	f57f af17 	bpl.w	801de98 <_scanf_float+0x64>
 801e06a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e06e:	6022      	str	r2, [r4, #0]
 801e070:	f8cd 9008 	str.w	r9, [sp, #8]
 801e074:	e7a7      	b.n	801dfc6 <_scanf_float+0x192>
 801e076:	6822      	ldr	r2, [r4, #0]
 801e078:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e07c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e080:	d006      	beq.n	801e090 <_scanf_float+0x25c>
 801e082:	0550      	lsls	r0, r2, #21
 801e084:	f57f af08 	bpl.w	801de98 <_scanf_float+0x64>
 801e088:	f1b9 0f00 	cmp.w	r9, #0
 801e08c:	f000 80de 	beq.w	801e24c <_scanf_float+0x418>
 801e090:	0591      	lsls	r1, r2, #22
 801e092:	bf58      	it	pl
 801e094:	9902      	ldrpl	r1, [sp, #8]
 801e096:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e09a:	bf58      	it	pl
 801e09c:	eba9 0101 	subpl.w	r1, r9, r1
 801e0a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e0a4:	bf58      	it	pl
 801e0a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e0aa:	6022      	str	r2, [r4, #0]
 801e0ac:	f04f 0900 	mov.w	r9, #0
 801e0b0:	e789      	b.n	801dfc6 <_scanf_float+0x192>
 801e0b2:	f04f 0a03 	mov.w	sl, #3
 801e0b6:	e786      	b.n	801dfc6 <_scanf_float+0x192>
 801e0b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e0bc:	4639      	mov	r1, r7
 801e0be:	4640      	mov	r0, r8
 801e0c0:	4798      	blx	r3
 801e0c2:	2800      	cmp	r0, #0
 801e0c4:	f43f aedb 	beq.w	801de7e <_scanf_float+0x4a>
 801e0c8:	e6e6      	b.n	801de98 <_scanf_float+0x64>
 801e0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e0ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e0d2:	463a      	mov	r2, r7
 801e0d4:	4640      	mov	r0, r8
 801e0d6:	4798      	blx	r3
 801e0d8:	6923      	ldr	r3, [r4, #16]
 801e0da:	3b01      	subs	r3, #1
 801e0dc:	6123      	str	r3, [r4, #16]
 801e0de:	e6e8      	b.n	801deb2 <_scanf_float+0x7e>
 801e0e0:	1e6b      	subs	r3, r5, #1
 801e0e2:	2b06      	cmp	r3, #6
 801e0e4:	d824      	bhi.n	801e130 <_scanf_float+0x2fc>
 801e0e6:	2d02      	cmp	r5, #2
 801e0e8:	d836      	bhi.n	801e158 <_scanf_float+0x324>
 801e0ea:	9b01      	ldr	r3, [sp, #4]
 801e0ec:	429e      	cmp	r6, r3
 801e0ee:	f67f aee4 	bls.w	801deba <_scanf_float+0x86>
 801e0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e0f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e0fa:	463a      	mov	r2, r7
 801e0fc:	4640      	mov	r0, r8
 801e0fe:	4798      	blx	r3
 801e100:	6923      	ldr	r3, [r4, #16]
 801e102:	3b01      	subs	r3, #1
 801e104:	6123      	str	r3, [r4, #16]
 801e106:	e7f0      	b.n	801e0ea <_scanf_float+0x2b6>
 801e108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e10c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e110:	463a      	mov	r2, r7
 801e112:	4640      	mov	r0, r8
 801e114:	4798      	blx	r3
 801e116:	6923      	ldr	r3, [r4, #16]
 801e118:	3b01      	subs	r3, #1
 801e11a:	6123      	str	r3, [r4, #16]
 801e11c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e120:	fa5f fa8a 	uxtb.w	sl, sl
 801e124:	f1ba 0f02 	cmp.w	sl, #2
 801e128:	d1ee      	bne.n	801e108 <_scanf_float+0x2d4>
 801e12a:	3d03      	subs	r5, #3
 801e12c:	b2ed      	uxtb	r5, r5
 801e12e:	1b76      	subs	r6, r6, r5
 801e130:	6823      	ldr	r3, [r4, #0]
 801e132:	05da      	lsls	r2, r3, #23
 801e134:	d530      	bpl.n	801e198 <_scanf_float+0x364>
 801e136:	055b      	lsls	r3, r3, #21
 801e138:	d511      	bpl.n	801e15e <_scanf_float+0x32a>
 801e13a:	9b01      	ldr	r3, [sp, #4]
 801e13c:	429e      	cmp	r6, r3
 801e13e:	f67f aebc 	bls.w	801deba <_scanf_float+0x86>
 801e142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e14a:	463a      	mov	r2, r7
 801e14c:	4640      	mov	r0, r8
 801e14e:	4798      	blx	r3
 801e150:	6923      	ldr	r3, [r4, #16]
 801e152:	3b01      	subs	r3, #1
 801e154:	6123      	str	r3, [r4, #16]
 801e156:	e7f0      	b.n	801e13a <_scanf_float+0x306>
 801e158:	46aa      	mov	sl, r5
 801e15a:	46b3      	mov	fp, r6
 801e15c:	e7de      	b.n	801e11c <_scanf_float+0x2e8>
 801e15e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e162:	6923      	ldr	r3, [r4, #16]
 801e164:	2965      	cmp	r1, #101	@ 0x65
 801e166:	f103 33ff 	add.w	r3, r3, #4294967295
 801e16a:	f106 35ff 	add.w	r5, r6, #4294967295
 801e16e:	6123      	str	r3, [r4, #16]
 801e170:	d00c      	beq.n	801e18c <_scanf_float+0x358>
 801e172:	2945      	cmp	r1, #69	@ 0x45
 801e174:	d00a      	beq.n	801e18c <_scanf_float+0x358>
 801e176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e17a:	463a      	mov	r2, r7
 801e17c:	4640      	mov	r0, r8
 801e17e:	4798      	blx	r3
 801e180:	6923      	ldr	r3, [r4, #16]
 801e182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e186:	3b01      	subs	r3, #1
 801e188:	1eb5      	subs	r5, r6, #2
 801e18a:	6123      	str	r3, [r4, #16]
 801e18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e190:	463a      	mov	r2, r7
 801e192:	4640      	mov	r0, r8
 801e194:	4798      	blx	r3
 801e196:	462e      	mov	r6, r5
 801e198:	6822      	ldr	r2, [r4, #0]
 801e19a:	f012 0210 	ands.w	r2, r2, #16
 801e19e:	d001      	beq.n	801e1a4 <_scanf_float+0x370>
 801e1a0:	2000      	movs	r0, #0
 801e1a2:	e68b      	b.n	801debc <_scanf_float+0x88>
 801e1a4:	7032      	strb	r2, [r6, #0]
 801e1a6:	6823      	ldr	r3, [r4, #0]
 801e1a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e1ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e1b0:	d11c      	bne.n	801e1ec <_scanf_float+0x3b8>
 801e1b2:	9b02      	ldr	r3, [sp, #8]
 801e1b4:	454b      	cmp	r3, r9
 801e1b6:	eba3 0209 	sub.w	r2, r3, r9
 801e1ba:	d123      	bne.n	801e204 <_scanf_float+0x3d0>
 801e1bc:	9901      	ldr	r1, [sp, #4]
 801e1be:	2200      	movs	r2, #0
 801e1c0:	4640      	mov	r0, r8
 801e1c2:	f002 fdd9 	bl	8020d78 <_strtod_r>
 801e1c6:	9b03      	ldr	r3, [sp, #12]
 801e1c8:	6821      	ldr	r1, [r4, #0]
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	f011 0f02 	tst.w	r1, #2
 801e1d0:	ec57 6b10 	vmov	r6, r7, d0
 801e1d4:	f103 0204 	add.w	r2, r3, #4
 801e1d8:	d01f      	beq.n	801e21a <_scanf_float+0x3e6>
 801e1da:	9903      	ldr	r1, [sp, #12]
 801e1dc:	600a      	str	r2, [r1, #0]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	e9c3 6700 	strd	r6, r7, [r3]
 801e1e4:	68e3      	ldr	r3, [r4, #12]
 801e1e6:	3301      	adds	r3, #1
 801e1e8:	60e3      	str	r3, [r4, #12]
 801e1ea:	e7d9      	b.n	801e1a0 <_scanf_float+0x36c>
 801e1ec:	9b04      	ldr	r3, [sp, #16]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d0e4      	beq.n	801e1bc <_scanf_float+0x388>
 801e1f2:	9905      	ldr	r1, [sp, #20]
 801e1f4:	230a      	movs	r3, #10
 801e1f6:	3101      	adds	r1, #1
 801e1f8:	4640      	mov	r0, r8
 801e1fa:	f7ff f9b7 	bl	801d56c <_strtol_r>
 801e1fe:	9b04      	ldr	r3, [sp, #16]
 801e200:	9e05      	ldr	r6, [sp, #20]
 801e202:	1ac2      	subs	r2, r0, r3
 801e204:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e208:	429e      	cmp	r6, r3
 801e20a:	bf28      	it	cs
 801e20c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e210:	4910      	ldr	r1, [pc, #64]	@ (801e254 <_scanf_float+0x420>)
 801e212:	4630      	mov	r0, r6
 801e214:	f000 f9a2 	bl	801e55c <siprintf>
 801e218:	e7d0      	b.n	801e1bc <_scanf_float+0x388>
 801e21a:	f011 0f04 	tst.w	r1, #4
 801e21e:	9903      	ldr	r1, [sp, #12]
 801e220:	600a      	str	r2, [r1, #0]
 801e222:	d1dc      	bne.n	801e1de <_scanf_float+0x3aa>
 801e224:	681d      	ldr	r5, [r3, #0]
 801e226:	4632      	mov	r2, r6
 801e228:	463b      	mov	r3, r7
 801e22a:	4630      	mov	r0, r6
 801e22c:	4639      	mov	r1, r7
 801e22e:	f7e2 fc7d 	bl	8000b2c <__aeabi_dcmpun>
 801e232:	b128      	cbz	r0, 801e240 <_scanf_float+0x40c>
 801e234:	4808      	ldr	r0, [pc, #32]	@ (801e258 <_scanf_float+0x424>)
 801e236:	f000 fc25 	bl	801ea84 <nanf>
 801e23a:	ed85 0a00 	vstr	s0, [r5]
 801e23e:	e7d1      	b.n	801e1e4 <_scanf_float+0x3b0>
 801e240:	4630      	mov	r0, r6
 801e242:	4639      	mov	r1, r7
 801e244:	f7e2 fcd0 	bl	8000be8 <__aeabi_d2f>
 801e248:	6028      	str	r0, [r5, #0]
 801e24a:	e7cb      	b.n	801e1e4 <_scanf_float+0x3b0>
 801e24c:	f04f 0900 	mov.w	r9, #0
 801e250:	e629      	b.n	801dea6 <_scanf_float+0x72>
 801e252:	bf00      	nop
 801e254:	080253d6 	.word	0x080253d6
 801e258:	08025416 	.word	0x08025416

0801e25c <__sflush_r>:
 801e25c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e264:	0716      	lsls	r6, r2, #28
 801e266:	4605      	mov	r5, r0
 801e268:	460c      	mov	r4, r1
 801e26a:	d454      	bmi.n	801e316 <__sflush_r+0xba>
 801e26c:	684b      	ldr	r3, [r1, #4]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	dc02      	bgt.n	801e278 <__sflush_r+0x1c>
 801e272:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e274:	2b00      	cmp	r3, #0
 801e276:	dd48      	ble.n	801e30a <__sflush_r+0xae>
 801e278:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e27a:	2e00      	cmp	r6, #0
 801e27c:	d045      	beq.n	801e30a <__sflush_r+0xae>
 801e27e:	2300      	movs	r3, #0
 801e280:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e284:	682f      	ldr	r7, [r5, #0]
 801e286:	6a21      	ldr	r1, [r4, #32]
 801e288:	602b      	str	r3, [r5, #0]
 801e28a:	d030      	beq.n	801e2ee <__sflush_r+0x92>
 801e28c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e28e:	89a3      	ldrh	r3, [r4, #12]
 801e290:	0759      	lsls	r1, r3, #29
 801e292:	d505      	bpl.n	801e2a0 <__sflush_r+0x44>
 801e294:	6863      	ldr	r3, [r4, #4]
 801e296:	1ad2      	subs	r2, r2, r3
 801e298:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e29a:	b10b      	cbz	r3, 801e2a0 <__sflush_r+0x44>
 801e29c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e29e:	1ad2      	subs	r2, r2, r3
 801e2a0:	2300      	movs	r3, #0
 801e2a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e2a4:	6a21      	ldr	r1, [r4, #32]
 801e2a6:	4628      	mov	r0, r5
 801e2a8:	47b0      	blx	r6
 801e2aa:	1c43      	adds	r3, r0, #1
 801e2ac:	89a3      	ldrh	r3, [r4, #12]
 801e2ae:	d106      	bne.n	801e2be <__sflush_r+0x62>
 801e2b0:	6829      	ldr	r1, [r5, #0]
 801e2b2:	291d      	cmp	r1, #29
 801e2b4:	d82b      	bhi.n	801e30e <__sflush_r+0xb2>
 801e2b6:	4a2a      	ldr	r2, [pc, #168]	@ (801e360 <__sflush_r+0x104>)
 801e2b8:	410a      	asrs	r2, r1
 801e2ba:	07d6      	lsls	r6, r2, #31
 801e2bc:	d427      	bmi.n	801e30e <__sflush_r+0xb2>
 801e2be:	2200      	movs	r2, #0
 801e2c0:	6062      	str	r2, [r4, #4]
 801e2c2:	04d9      	lsls	r1, r3, #19
 801e2c4:	6922      	ldr	r2, [r4, #16]
 801e2c6:	6022      	str	r2, [r4, #0]
 801e2c8:	d504      	bpl.n	801e2d4 <__sflush_r+0x78>
 801e2ca:	1c42      	adds	r2, r0, #1
 801e2cc:	d101      	bne.n	801e2d2 <__sflush_r+0x76>
 801e2ce:	682b      	ldr	r3, [r5, #0]
 801e2d0:	b903      	cbnz	r3, 801e2d4 <__sflush_r+0x78>
 801e2d2:	6560      	str	r0, [r4, #84]	@ 0x54
 801e2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e2d6:	602f      	str	r7, [r5, #0]
 801e2d8:	b1b9      	cbz	r1, 801e30a <__sflush_r+0xae>
 801e2da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e2de:	4299      	cmp	r1, r3
 801e2e0:	d002      	beq.n	801e2e8 <__sflush_r+0x8c>
 801e2e2:	4628      	mov	r0, r5
 801e2e4:	f001 fa40 	bl	801f768 <_free_r>
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	6363      	str	r3, [r4, #52]	@ 0x34
 801e2ec:	e00d      	b.n	801e30a <__sflush_r+0xae>
 801e2ee:	2301      	movs	r3, #1
 801e2f0:	4628      	mov	r0, r5
 801e2f2:	47b0      	blx	r6
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	1c50      	adds	r0, r2, #1
 801e2f8:	d1c9      	bne.n	801e28e <__sflush_r+0x32>
 801e2fa:	682b      	ldr	r3, [r5, #0]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d0c6      	beq.n	801e28e <__sflush_r+0x32>
 801e300:	2b1d      	cmp	r3, #29
 801e302:	d001      	beq.n	801e308 <__sflush_r+0xac>
 801e304:	2b16      	cmp	r3, #22
 801e306:	d11e      	bne.n	801e346 <__sflush_r+0xea>
 801e308:	602f      	str	r7, [r5, #0]
 801e30a:	2000      	movs	r0, #0
 801e30c:	e022      	b.n	801e354 <__sflush_r+0xf8>
 801e30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e312:	b21b      	sxth	r3, r3
 801e314:	e01b      	b.n	801e34e <__sflush_r+0xf2>
 801e316:	690f      	ldr	r7, [r1, #16]
 801e318:	2f00      	cmp	r7, #0
 801e31a:	d0f6      	beq.n	801e30a <__sflush_r+0xae>
 801e31c:	0793      	lsls	r3, r2, #30
 801e31e:	680e      	ldr	r6, [r1, #0]
 801e320:	bf08      	it	eq
 801e322:	694b      	ldreq	r3, [r1, #20]
 801e324:	600f      	str	r7, [r1, #0]
 801e326:	bf18      	it	ne
 801e328:	2300      	movne	r3, #0
 801e32a:	eba6 0807 	sub.w	r8, r6, r7
 801e32e:	608b      	str	r3, [r1, #8]
 801e330:	f1b8 0f00 	cmp.w	r8, #0
 801e334:	dde9      	ble.n	801e30a <__sflush_r+0xae>
 801e336:	6a21      	ldr	r1, [r4, #32]
 801e338:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e33a:	4643      	mov	r3, r8
 801e33c:	463a      	mov	r2, r7
 801e33e:	4628      	mov	r0, r5
 801e340:	47b0      	blx	r6
 801e342:	2800      	cmp	r0, #0
 801e344:	dc08      	bgt.n	801e358 <__sflush_r+0xfc>
 801e346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e34a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e34e:	81a3      	strh	r3, [r4, #12]
 801e350:	f04f 30ff 	mov.w	r0, #4294967295
 801e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e358:	4407      	add	r7, r0
 801e35a:	eba8 0800 	sub.w	r8, r8, r0
 801e35e:	e7e7      	b.n	801e330 <__sflush_r+0xd4>
 801e360:	dfbffffe 	.word	0xdfbffffe

0801e364 <_fflush_r>:
 801e364:	b538      	push	{r3, r4, r5, lr}
 801e366:	690b      	ldr	r3, [r1, #16]
 801e368:	4605      	mov	r5, r0
 801e36a:	460c      	mov	r4, r1
 801e36c:	b913      	cbnz	r3, 801e374 <_fflush_r+0x10>
 801e36e:	2500      	movs	r5, #0
 801e370:	4628      	mov	r0, r5
 801e372:	bd38      	pop	{r3, r4, r5, pc}
 801e374:	b118      	cbz	r0, 801e37e <_fflush_r+0x1a>
 801e376:	6a03      	ldr	r3, [r0, #32]
 801e378:	b90b      	cbnz	r3, 801e37e <_fflush_r+0x1a>
 801e37a:	f000 f8a7 	bl	801e4cc <__sinit>
 801e37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d0f3      	beq.n	801e36e <_fflush_r+0xa>
 801e386:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e388:	07d0      	lsls	r0, r2, #31
 801e38a:	d404      	bmi.n	801e396 <_fflush_r+0x32>
 801e38c:	0599      	lsls	r1, r3, #22
 801e38e:	d402      	bmi.n	801e396 <_fflush_r+0x32>
 801e390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e392:	f000 fb5e 	bl	801ea52 <__retarget_lock_acquire_recursive>
 801e396:	4628      	mov	r0, r5
 801e398:	4621      	mov	r1, r4
 801e39a:	f7ff ff5f 	bl	801e25c <__sflush_r>
 801e39e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e3a0:	07da      	lsls	r2, r3, #31
 801e3a2:	4605      	mov	r5, r0
 801e3a4:	d4e4      	bmi.n	801e370 <_fflush_r+0xc>
 801e3a6:	89a3      	ldrh	r3, [r4, #12]
 801e3a8:	059b      	lsls	r3, r3, #22
 801e3aa:	d4e1      	bmi.n	801e370 <_fflush_r+0xc>
 801e3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3ae:	f000 fb51 	bl	801ea54 <__retarget_lock_release_recursive>
 801e3b2:	e7dd      	b.n	801e370 <_fflush_r+0xc>

0801e3b4 <std>:
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	b510      	push	{r4, lr}
 801e3b8:	4604      	mov	r4, r0
 801e3ba:	e9c0 3300 	strd	r3, r3, [r0]
 801e3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e3c2:	6083      	str	r3, [r0, #8]
 801e3c4:	8181      	strh	r1, [r0, #12]
 801e3c6:	6643      	str	r3, [r0, #100]	@ 0x64
 801e3c8:	81c2      	strh	r2, [r0, #14]
 801e3ca:	6183      	str	r3, [r0, #24]
 801e3cc:	4619      	mov	r1, r3
 801e3ce:	2208      	movs	r2, #8
 801e3d0:	305c      	adds	r0, #92	@ 0x5c
 801e3d2:	f000 f9e5 	bl	801e7a0 <memset>
 801e3d6:	4b0d      	ldr	r3, [pc, #52]	@ (801e40c <std+0x58>)
 801e3d8:	6263      	str	r3, [r4, #36]	@ 0x24
 801e3da:	4b0d      	ldr	r3, [pc, #52]	@ (801e410 <std+0x5c>)
 801e3dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e3de:	4b0d      	ldr	r3, [pc, #52]	@ (801e414 <std+0x60>)
 801e3e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e3e2:	4b0d      	ldr	r3, [pc, #52]	@ (801e418 <std+0x64>)
 801e3e4:	6323      	str	r3, [r4, #48]	@ 0x30
 801e3e6:	4b0d      	ldr	r3, [pc, #52]	@ (801e41c <std+0x68>)
 801e3e8:	6224      	str	r4, [r4, #32]
 801e3ea:	429c      	cmp	r4, r3
 801e3ec:	d006      	beq.n	801e3fc <std+0x48>
 801e3ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e3f2:	4294      	cmp	r4, r2
 801e3f4:	d002      	beq.n	801e3fc <std+0x48>
 801e3f6:	33d0      	adds	r3, #208	@ 0xd0
 801e3f8:	429c      	cmp	r4, r3
 801e3fa:	d105      	bne.n	801e408 <std+0x54>
 801e3fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e404:	f000 bb24 	b.w	801ea50 <__retarget_lock_init_recursive>
 801e408:	bd10      	pop	{r4, pc}
 801e40a:	bf00      	nop
 801e40c:	0801e59d 	.word	0x0801e59d
 801e410:	0801e5bf 	.word	0x0801e5bf
 801e414:	0801e5f7 	.word	0x0801e5f7
 801e418:	0801e61b 	.word	0x0801e61b
 801e41c:	20017900 	.word	0x20017900

0801e420 <stdio_exit_handler>:
 801e420:	4a02      	ldr	r2, [pc, #8]	@ (801e42c <stdio_exit_handler+0xc>)
 801e422:	4903      	ldr	r1, [pc, #12]	@ (801e430 <stdio_exit_handler+0x10>)
 801e424:	4803      	ldr	r0, [pc, #12]	@ (801e434 <stdio_exit_handler+0x14>)
 801e426:	f000 b869 	b.w	801e4fc <_fwalk_sglue>
 801e42a:	bf00      	nop
 801e42c:	20000050 	.word	0x20000050
 801e430:	0801e365 	.word	0x0801e365
 801e434:	20000060 	.word	0x20000060

0801e438 <cleanup_stdio>:
 801e438:	6841      	ldr	r1, [r0, #4]
 801e43a:	4b0c      	ldr	r3, [pc, #48]	@ (801e46c <cleanup_stdio+0x34>)
 801e43c:	4299      	cmp	r1, r3
 801e43e:	b510      	push	{r4, lr}
 801e440:	4604      	mov	r4, r0
 801e442:	d001      	beq.n	801e448 <cleanup_stdio+0x10>
 801e444:	f7ff ff8e 	bl	801e364 <_fflush_r>
 801e448:	68a1      	ldr	r1, [r4, #8]
 801e44a:	4b09      	ldr	r3, [pc, #36]	@ (801e470 <cleanup_stdio+0x38>)
 801e44c:	4299      	cmp	r1, r3
 801e44e:	d002      	beq.n	801e456 <cleanup_stdio+0x1e>
 801e450:	4620      	mov	r0, r4
 801e452:	f7ff ff87 	bl	801e364 <_fflush_r>
 801e456:	68e1      	ldr	r1, [r4, #12]
 801e458:	4b06      	ldr	r3, [pc, #24]	@ (801e474 <cleanup_stdio+0x3c>)
 801e45a:	4299      	cmp	r1, r3
 801e45c:	d004      	beq.n	801e468 <cleanup_stdio+0x30>
 801e45e:	4620      	mov	r0, r4
 801e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e464:	f7ff bf7e 	b.w	801e364 <_fflush_r>
 801e468:	bd10      	pop	{r4, pc}
 801e46a:	bf00      	nop
 801e46c:	20017900 	.word	0x20017900
 801e470:	20017968 	.word	0x20017968
 801e474:	200179d0 	.word	0x200179d0

0801e478 <global_stdio_init.part.0>:
 801e478:	b510      	push	{r4, lr}
 801e47a:	4b0b      	ldr	r3, [pc, #44]	@ (801e4a8 <global_stdio_init.part.0+0x30>)
 801e47c:	4c0b      	ldr	r4, [pc, #44]	@ (801e4ac <global_stdio_init.part.0+0x34>)
 801e47e:	4a0c      	ldr	r2, [pc, #48]	@ (801e4b0 <global_stdio_init.part.0+0x38>)
 801e480:	601a      	str	r2, [r3, #0]
 801e482:	4620      	mov	r0, r4
 801e484:	2200      	movs	r2, #0
 801e486:	2104      	movs	r1, #4
 801e488:	f7ff ff94 	bl	801e3b4 <std>
 801e48c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e490:	2201      	movs	r2, #1
 801e492:	2109      	movs	r1, #9
 801e494:	f7ff ff8e 	bl	801e3b4 <std>
 801e498:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e49c:	2202      	movs	r2, #2
 801e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4a2:	2112      	movs	r1, #18
 801e4a4:	f7ff bf86 	b.w	801e3b4 <std>
 801e4a8:	20017a38 	.word	0x20017a38
 801e4ac:	20017900 	.word	0x20017900
 801e4b0:	0801e421 	.word	0x0801e421

0801e4b4 <__sfp_lock_acquire>:
 801e4b4:	4801      	ldr	r0, [pc, #4]	@ (801e4bc <__sfp_lock_acquire+0x8>)
 801e4b6:	f000 bacc 	b.w	801ea52 <__retarget_lock_acquire_recursive>
 801e4ba:	bf00      	nop
 801e4bc:	20017a41 	.word	0x20017a41

0801e4c0 <__sfp_lock_release>:
 801e4c0:	4801      	ldr	r0, [pc, #4]	@ (801e4c8 <__sfp_lock_release+0x8>)
 801e4c2:	f000 bac7 	b.w	801ea54 <__retarget_lock_release_recursive>
 801e4c6:	bf00      	nop
 801e4c8:	20017a41 	.word	0x20017a41

0801e4cc <__sinit>:
 801e4cc:	b510      	push	{r4, lr}
 801e4ce:	4604      	mov	r4, r0
 801e4d0:	f7ff fff0 	bl	801e4b4 <__sfp_lock_acquire>
 801e4d4:	6a23      	ldr	r3, [r4, #32]
 801e4d6:	b11b      	cbz	r3, 801e4e0 <__sinit+0x14>
 801e4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4dc:	f7ff bff0 	b.w	801e4c0 <__sfp_lock_release>
 801e4e0:	4b04      	ldr	r3, [pc, #16]	@ (801e4f4 <__sinit+0x28>)
 801e4e2:	6223      	str	r3, [r4, #32]
 801e4e4:	4b04      	ldr	r3, [pc, #16]	@ (801e4f8 <__sinit+0x2c>)
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d1f5      	bne.n	801e4d8 <__sinit+0xc>
 801e4ec:	f7ff ffc4 	bl	801e478 <global_stdio_init.part.0>
 801e4f0:	e7f2      	b.n	801e4d8 <__sinit+0xc>
 801e4f2:	bf00      	nop
 801e4f4:	0801e439 	.word	0x0801e439
 801e4f8:	20017a38 	.word	0x20017a38

0801e4fc <_fwalk_sglue>:
 801e4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e500:	4607      	mov	r7, r0
 801e502:	4688      	mov	r8, r1
 801e504:	4614      	mov	r4, r2
 801e506:	2600      	movs	r6, #0
 801e508:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e50c:	f1b9 0901 	subs.w	r9, r9, #1
 801e510:	d505      	bpl.n	801e51e <_fwalk_sglue+0x22>
 801e512:	6824      	ldr	r4, [r4, #0]
 801e514:	2c00      	cmp	r4, #0
 801e516:	d1f7      	bne.n	801e508 <_fwalk_sglue+0xc>
 801e518:	4630      	mov	r0, r6
 801e51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e51e:	89ab      	ldrh	r3, [r5, #12]
 801e520:	2b01      	cmp	r3, #1
 801e522:	d907      	bls.n	801e534 <_fwalk_sglue+0x38>
 801e524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e528:	3301      	adds	r3, #1
 801e52a:	d003      	beq.n	801e534 <_fwalk_sglue+0x38>
 801e52c:	4629      	mov	r1, r5
 801e52e:	4638      	mov	r0, r7
 801e530:	47c0      	blx	r8
 801e532:	4306      	orrs	r6, r0
 801e534:	3568      	adds	r5, #104	@ 0x68
 801e536:	e7e9      	b.n	801e50c <_fwalk_sglue+0x10>

0801e538 <iprintf>:
 801e538:	b40f      	push	{r0, r1, r2, r3}
 801e53a:	b507      	push	{r0, r1, r2, lr}
 801e53c:	4906      	ldr	r1, [pc, #24]	@ (801e558 <iprintf+0x20>)
 801e53e:	ab04      	add	r3, sp, #16
 801e540:	6808      	ldr	r0, [r1, #0]
 801e542:	f853 2b04 	ldr.w	r2, [r3], #4
 801e546:	6881      	ldr	r1, [r0, #8]
 801e548:	9301      	str	r3, [sp, #4]
 801e54a:	f002 fd9d 	bl	8021088 <_vfiprintf_r>
 801e54e:	b003      	add	sp, #12
 801e550:	f85d eb04 	ldr.w	lr, [sp], #4
 801e554:	b004      	add	sp, #16
 801e556:	4770      	bx	lr
 801e558:	2000005c 	.word	0x2000005c

0801e55c <siprintf>:
 801e55c:	b40e      	push	{r1, r2, r3}
 801e55e:	b500      	push	{lr}
 801e560:	b09c      	sub	sp, #112	@ 0x70
 801e562:	ab1d      	add	r3, sp, #116	@ 0x74
 801e564:	9002      	str	r0, [sp, #8]
 801e566:	9006      	str	r0, [sp, #24]
 801e568:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e56c:	4809      	ldr	r0, [pc, #36]	@ (801e594 <siprintf+0x38>)
 801e56e:	9107      	str	r1, [sp, #28]
 801e570:	9104      	str	r1, [sp, #16]
 801e572:	4909      	ldr	r1, [pc, #36]	@ (801e598 <siprintf+0x3c>)
 801e574:	f853 2b04 	ldr.w	r2, [r3], #4
 801e578:	9105      	str	r1, [sp, #20]
 801e57a:	6800      	ldr	r0, [r0, #0]
 801e57c:	9301      	str	r3, [sp, #4]
 801e57e:	a902      	add	r1, sp, #8
 801e580:	f002 fc5c 	bl	8020e3c <_svfiprintf_r>
 801e584:	9b02      	ldr	r3, [sp, #8]
 801e586:	2200      	movs	r2, #0
 801e588:	701a      	strb	r2, [r3, #0]
 801e58a:	b01c      	add	sp, #112	@ 0x70
 801e58c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e590:	b003      	add	sp, #12
 801e592:	4770      	bx	lr
 801e594:	2000005c 	.word	0x2000005c
 801e598:	ffff0208 	.word	0xffff0208

0801e59c <__sread>:
 801e59c:	b510      	push	{r4, lr}
 801e59e:	460c      	mov	r4, r1
 801e5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5a4:	f000 f9e2 	bl	801e96c <_read_r>
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	bfab      	itete	ge
 801e5ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e5ae:	89a3      	ldrhlt	r3, [r4, #12]
 801e5b0:	181b      	addge	r3, r3, r0
 801e5b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e5b6:	bfac      	ite	ge
 801e5b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e5ba:	81a3      	strhlt	r3, [r4, #12]
 801e5bc:	bd10      	pop	{r4, pc}

0801e5be <__swrite>:
 801e5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5c2:	461f      	mov	r7, r3
 801e5c4:	898b      	ldrh	r3, [r1, #12]
 801e5c6:	05db      	lsls	r3, r3, #23
 801e5c8:	4605      	mov	r5, r0
 801e5ca:	460c      	mov	r4, r1
 801e5cc:	4616      	mov	r6, r2
 801e5ce:	d505      	bpl.n	801e5dc <__swrite+0x1e>
 801e5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5d4:	2302      	movs	r3, #2
 801e5d6:	2200      	movs	r2, #0
 801e5d8:	f000 f9b6 	bl	801e948 <_lseek_r>
 801e5dc:	89a3      	ldrh	r3, [r4, #12]
 801e5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e5e6:	81a3      	strh	r3, [r4, #12]
 801e5e8:	4632      	mov	r2, r6
 801e5ea:	463b      	mov	r3, r7
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e5f2:	f000 b9f1 	b.w	801e9d8 <_write_r>

0801e5f6 <__sseek>:
 801e5f6:	b510      	push	{r4, lr}
 801e5f8:	460c      	mov	r4, r1
 801e5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5fe:	f000 f9a3 	bl	801e948 <_lseek_r>
 801e602:	1c43      	adds	r3, r0, #1
 801e604:	89a3      	ldrh	r3, [r4, #12]
 801e606:	bf15      	itete	ne
 801e608:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e60a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e60e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e612:	81a3      	strheq	r3, [r4, #12]
 801e614:	bf18      	it	ne
 801e616:	81a3      	strhne	r3, [r4, #12]
 801e618:	bd10      	pop	{r4, pc}

0801e61a <__sclose>:
 801e61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e61e:	f000 b92d 	b.w	801e87c <_close_r>

0801e622 <__swbuf_r>:
 801e622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e624:	460e      	mov	r6, r1
 801e626:	4614      	mov	r4, r2
 801e628:	4605      	mov	r5, r0
 801e62a:	b118      	cbz	r0, 801e634 <__swbuf_r+0x12>
 801e62c:	6a03      	ldr	r3, [r0, #32]
 801e62e:	b90b      	cbnz	r3, 801e634 <__swbuf_r+0x12>
 801e630:	f7ff ff4c 	bl	801e4cc <__sinit>
 801e634:	69a3      	ldr	r3, [r4, #24]
 801e636:	60a3      	str	r3, [r4, #8]
 801e638:	89a3      	ldrh	r3, [r4, #12]
 801e63a:	071a      	lsls	r2, r3, #28
 801e63c:	d501      	bpl.n	801e642 <__swbuf_r+0x20>
 801e63e:	6923      	ldr	r3, [r4, #16]
 801e640:	b943      	cbnz	r3, 801e654 <__swbuf_r+0x32>
 801e642:	4621      	mov	r1, r4
 801e644:	4628      	mov	r0, r5
 801e646:	f000 f82b 	bl	801e6a0 <__swsetup_r>
 801e64a:	b118      	cbz	r0, 801e654 <__swbuf_r+0x32>
 801e64c:	f04f 37ff 	mov.w	r7, #4294967295
 801e650:	4638      	mov	r0, r7
 801e652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e654:	6823      	ldr	r3, [r4, #0]
 801e656:	6922      	ldr	r2, [r4, #16]
 801e658:	1a98      	subs	r0, r3, r2
 801e65a:	6963      	ldr	r3, [r4, #20]
 801e65c:	b2f6      	uxtb	r6, r6
 801e65e:	4283      	cmp	r3, r0
 801e660:	4637      	mov	r7, r6
 801e662:	dc05      	bgt.n	801e670 <__swbuf_r+0x4e>
 801e664:	4621      	mov	r1, r4
 801e666:	4628      	mov	r0, r5
 801e668:	f7ff fe7c 	bl	801e364 <_fflush_r>
 801e66c:	2800      	cmp	r0, #0
 801e66e:	d1ed      	bne.n	801e64c <__swbuf_r+0x2a>
 801e670:	68a3      	ldr	r3, [r4, #8]
 801e672:	3b01      	subs	r3, #1
 801e674:	60a3      	str	r3, [r4, #8]
 801e676:	6823      	ldr	r3, [r4, #0]
 801e678:	1c5a      	adds	r2, r3, #1
 801e67a:	6022      	str	r2, [r4, #0]
 801e67c:	701e      	strb	r6, [r3, #0]
 801e67e:	6962      	ldr	r2, [r4, #20]
 801e680:	1c43      	adds	r3, r0, #1
 801e682:	429a      	cmp	r2, r3
 801e684:	d004      	beq.n	801e690 <__swbuf_r+0x6e>
 801e686:	89a3      	ldrh	r3, [r4, #12]
 801e688:	07db      	lsls	r3, r3, #31
 801e68a:	d5e1      	bpl.n	801e650 <__swbuf_r+0x2e>
 801e68c:	2e0a      	cmp	r6, #10
 801e68e:	d1df      	bne.n	801e650 <__swbuf_r+0x2e>
 801e690:	4621      	mov	r1, r4
 801e692:	4628      	mov	r0, r5
 801e694:	f7ff fe66 	bl	801e364 <_fflush_r>
 801e698:	2800      	cmp	r0, #0
 801e69a:	d0d9      	beq.n	801e650 <__swbuf_r+0x2e>
 801e69c:	e7d6      	b.n	801e64c <__swbuf_r+0x2a>
	...

0801e6a0 <__swsetup_r>:
 801e6a0:	b538      	push	{r3, r4, r5, lr}
 801e6a2:	4b29      	ldr	r3, [pc, #164]	@ (801e748 <__swsetup_r+0xa8>)
 801e6a4:	4605      	mov	r5, r0
 801e6a6:	6818      	ldr	r0, [r3, #0]
 801e6a8:	460c      	mov	r4, r1
 801e6aa:	b118      	cbz	r0, 801e6b4 <__swsetup_r+0x14>
 801e6ac:	6a03      	ldr	r3, [r0, #32]
 801e6ae:	b90b      	cbnz	r3, 801e6b4 <__swsetup_r+0x14>
 801e6b0:	f7ff ff0c 	bl	801e4cc <__sinit>
 801e6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6b8:	0719      	lsls	r1, r3, #28
 801e6ba:	d422      	bmi.n	801e702 <__swsetup_r+0x62>
 801e6bc:	06da      	lsls	r2, r3, #27
 801e6be:	d407      	bmi.n	801e6d0 <__swsetup_r+0x30>
 801e6c0:	2209      	movs	r2, #9
 801e6c2:	602a      	str	r2, [r5, #0]
 801e6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e6c8:	81a3      	strh	r3, [r4, #12]
 801e6ca:	f04f 30ff 	mov.w	r0, #4294967295
 801e6ce:	e033      	b.n	801e738 <__swsetup_r+0x98>
 801e6d0:	0758      	lsls	r0, r3, #29
 801e6d2:	d512      	bpl.n	801e6fa <__swsetup_r+0x5a>
 801e6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e6d6:	b141      	cbz	r1, 801e6ea <__swsetup_r+0x4a>
 801e6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e6dc:	4299      	cmp	r1, r3
 801e6de:	d002      	beq.n	801e6e6 <__swsetup_r+0x46>
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	f001 f841 	bl	801f768 <_free_r>
 801e6e6:	2300      	movs	r3, #0
 801e6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801e6ea:	89a3      	ldrh	r3, [r4, #12]
 801e6ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e6f0:	81a3      	strh	r3, [r4, #12]
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	6063      	str	r3, [r4, #4]
 801e6f6:	6923      	ldr	r3, [r4, #16]
 801e6f8:	6023      	str	r3, [r4, #0]
 801e6fa:	89a3      	ldrh	r3, [r4, #12]
 801e6fc:	f043 0308 	orr.w	r3, r3, #8
 801e700:	81a3      	strh	r3, [r4, #12]
 801e702:	6923      	ldr	r3, [r4, #16]
 801e704:	b94b      	cbnz	r3, 801e71a <__swsetup_r+0x7a>
 801e706:	89a3      	ldrh	r3, [r4, #12]
 801e708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e70c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e710:	d003      	beq.n	801e71a <__swsetup_r+0x7a>
 801e712:	4621      	mov	r1, r4
 801e714:	4628      	mov	r0, r5
 801e716:	f002 fe07 	bl	8021328 <__smakebuf_r>
 801e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e71e:	f013 0201 	ands.w	r2, r3, #1
 801e722:	d00a      	beq.n	801e73a <__swsetup_r+0x9a>
 801e724:	2200      	movs	r2, #0
 801e726:	60a2      	str	r2, [r4, #8]
 801e728:	6962      	ldr	r2, [r4, #20]
 801e72a:	4252      	negs	r2, r2
 801e72c:	61a2      	str	r2, [r4, #24]
 801e72e:	6922      	ldr	r2, [r4, #16]
 801e730:	b942      	cbnz	r2, 801e744 <__swsetup_r+0xa4>
 801e732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e736:	d1c5      	bne.n	801e6c4 <__swsetup_r+0x24>
 801e738:	bd38      	pop	{r3, r4, r5, pc}
 801e73a:	0799      	lsls	r1, r3, #30
 801e73c:	bf58      	it	pl
 801e73e:	6962      	ldrpl	r2, [r4, #20]
 801e740:	60a2      	str	r2, [r4, #8]
 801e742:	e7f4      	b.n	801e72e <__swsetup_r+0x8e>
 801e744:	2000      	movs	r0, #0
 801e746:	e7f7      	b.n	801e738 <__swsetup_r+0x98>
 801e748:	2000005c 	.word	0x2000005c

0801e74c <memcmp>:
 801e74c:	b510      	push	{r4, lr}
 801e74e:	3901      	subs	r1, #1
 801e750:	4402      	add	r2, r0
 801e752:	4290      	cmp	r0, r2
 801e754:	d101      	bne.n	801e75a <memcmp+0xe>
 801e756:	2000      	movs	r0, #0
 801e758:	e005      	b.n	801e766 <memcmp+0x1a>
 801e75a:	7803      	ldrb	r3, [r0, #0]
 801e75c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e760:	42a3      	cmp	r3, r4
 801e762:	d001      	beq.n	801e768 <memcmp+0x1c>
 801e764:	1b18      	subs	r0, r3, r4
 801e766:	bd10      	pop	{r4, pc}
 801e768:	3001      	adds	r0, #1
 801e76a:	e7f2      	b.n	801e752 <memcmp+0x6>

0801e76c <memmove>:
 801e76c:	4288      	cmp	r0, r1
 801e76e:	b510      	push	{r4, lr}
 801e770:	eb01 0402 	add.w	r4, r1, r2
 801e774:	d902      	bls.n	801e77c <memmove+0x10>
 801e776:	4284      	cmp	r4, r0
 801e778:	4623      	mov	r3, r4
 801e77a:	d807      	bhi.n	801e78c <memmove+0x20>
 801e77c:	1e43      	subs	r3, r0, #1
 801e77e:	42a1      	cmp	r1, r4
 801e780:	d008      	beq.n	801e794 <memmove+0x28>
 801e782:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e786:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e78a:	e7f8      	b.n	801e77e <memmove+0x12>
 801e78c:	4402      	add	r2, r0
 801e78e:	4601      	mov	r1, r0
 801e790:	428a      	cmp	r2, r1
 801e792:	d100      	bne.n	801e796 <memmove+0x2a>
 801e794:	bd10      	pop	{r4, pc}
 801e796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e79e:	e7f7      	b.n	801e790 <memmove+0x24>

0801e7a0 <memset>:
 801e7a0:	4402      	add	r2, r0
 801e7a2:	4603      	mov	r3, r0
 801e7a4:	4293      	cmp	r3, r2
 801e7a6:	d100      	bne.n	801e7aa <memset+0xa>
 801e7a8:	4770      	bx	lr
 801e7aa:	f803 1b01 	strb.w	r1, [r3], #1
 801e7ae:	e7f9      	b.n	801e7a4 <memset+0x4>

0801e7b0 <strchr>:
 801e7b0:	b2c9      	uxtb	r1, r1
 801e7b2:	4603      	mov	r3, r0
 801e7b4:	4618      	mov	r0, r3
 801e7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7ba:	b112      	cbz	r2, 801e7c2 <strchr+0x12>
 801e7bc:	428a      	cmp	r2, r1
 801e7be:	d1f9      	bne.n	801e7b4 <strchr+0x4>
 801e7c0:	4770      	bx	lr
 801e7c2:	2900      	cmp	r1, #0
 801e7c4:	bf18      	it	ne
 801e7c6:	2000      	movne	r0, #0
 801e7c8:	4770      	bx	lr

0801e7ca <strncmp>:
 801e7ca:	b510      	push	{r4, lr}
 801e7cc:	b16a      	cbz	r2, 801e7ea <strncmp+0x20>
 801e7ce:	3901      	subs	r1, #1
 801e7d0:	1884      	adds	r4, r0, r2
 801e7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e7da:	429a      	cmp	r2, r3
 801e7dc:	d103      	bne.n	801e7e6 <strncmp+0x1c>
 801e7de:	42a0      	cmp	r0, r4
 801e7e0:	d001      	beq.n	801e7e6 <strncmp+0x1c>
 801e7e2:	2a00      	cmp	r2, #0
 801e7e4:	d1f5      	bne.n	801e7d2 <strncmp+0x8>
 801e7e6:	1ad0      	subs	r0, r2, r3
 801e7e8:	bd10      	pop	{r4, pc}
 801e7ea:	4610      	mov	r0, r2
 801e7ec:	e7fc      	b.n	801e7e8 <strncmp+0x1e>

0801e7ee <strncpy>:
 801e7ee:	b510      	push	{r4, lr}
 801e7f0:	3901      	subs	r1, #1
 801e7f2:	4603      	mov	r3, r0
 801e7f4:	b132      	cbz	r2, 801e804 <strncpy+0x16>
 801e7f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e7fa:	f803 4b01 	strb.w	r4, [r3], #1
 801e7fe:	3a01      	subs	r2, #1
 801e800:	2c00      	cmp	r4, #0
 801e802:	d1f7      	bne.n	801e7f4 <strncpy+0x6>
 801e804:	441a      	add	r2, r3
 801e806:	2100      	movs	r1, #0
 801e808:	4293      	cmp	r3, r2
 801e80a:	d100      	bne.n	801e80e <strncpy+0x20>
 801e80c:	bd10      	pop	{r4, pc}
 801e80e:	f803 1b01 	strb.w	r1, [r3], #1
 801e812:	e7f9      	b.n	801e808 <strncpy+0x1a>

0801e814 <_raise_r>:
 801e814:	291f      	cmp	r1, #31
 801e816:	b538      	push	{r3, r4, r5, lr}
 801e818:	4605      	mov	r5, r0
 801e81a:	460c      	mov	r4, r1
 801e81c:	d904      	bls.n	801e828 <_raise_r+0x14>
 801e81e:	2316      	movs	r3, #22
 801e820:	6003      	str	r3, [r0, #0]
 801e822:	f04f 30ff 	mov.w	r0, #4294967295
 801e826:	bd38      	pop	{r3, r4, r5, pc}
 801e828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e82a:	b112      	cbz	r2, 801e832 <_raise_r+0x1e>
 801e82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e830:	b94b      	cbnz	r3, 801e846 <_raise_r+0x32>
 801e832:	4628      	mov	r0, r5
 801e834:	f000 f8be 	bl	801e9b4 <_getpid_r>
 801e838:	4622      	mov	r2, r4
 801e83a:	4601      	mov	r1, r0
 801e83c:	4628      	mov	r0, r5
 801e83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e842:	f000 b8a5 	b.w	801e990 <_kill_r>
 801e846:	2b01      	cmp	r3, #1
 801e848:	d00a      	beq.n	801e860 <_raise_r+0x4c>
 801e84a:	1c59      	adds	r1, r3, #1
 801e84c:	d103      	bne.n	801e856 <_raise_r+0x42>
 801e84e:	2316      	movs	r3, #22
 801e850:	6003      	str	r3, [r0, #0]
 801e852:	2001      	movs	r0, #1
 801e854:	e7e7      	b.n	801e826 <_raise_r+0x12>
 801e856:	2100      	movs	r1, #0
 801e858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e85c:	4620      	mov	r0, r4
 801e85e:	4798      	blx	r3
 801e860:	2000      	movs	r0, #0
 801e862:	e7e0      	b.n	801e826 <_raise_r+0x12>

0801e864 <raise>:
 801e864:	4b02      	ldr	r3, [pc, #8]	@ (801e870 <raise+0xc>)
 801e866:	4601      	mov	r1, r0
 801e868:	6818      	ldr	r0, [r3, #0]
 801e86a:	f7ff bfd3 	b.w	801e814 <_raise_r>
 801e86e:	bf00      	nop
 801e870:	2000005c 	.word	0x2000005c

0801e874 <_localeconv_r>:
 801e874:	4800      	ldr	r0, [pc, #0]	@ (801e878 <_localeconv_r+0x4>)
 801e876:	4770      	bx	lr
 801e878:	2000019c 	.word	0x2000019c

0801e87c <_close_r>:
 801e87c:	b538      	push	{r3, r4, r5, lr}
 801e87e:	4d06      	ldr	r5, [pc, #24]	@ (801e898 <_close_r+0x1c>)
 801e880:	2300      	movs	r3, #0
 801e882:	4604      	mov	r4, r0
 801e884:	4608      	mov	r0, r1
 801e886:	602b      	str	r3, [r5, #0]
 801e888:	f7e3 fc4a 	bl	8002120 <_close>
 801e88c:	1c43      	adds	r3, r0, #1
 801e88e:	d102      	bne.n	801e896 <_close_r+0x1a>
 801e890:	682b      	ldr	r3, [r5, #0]
 801e892:	b103      	cbz	r3, 801e896 <_close_r+0x1a>
 801e894:	6023      	str	r3, [r4, #0]
 801e896:	bd38      	pop	{r3, r4, r5, pc}
 801e898:	20017a3c 	.word	0x20017a3c

0801e89c <_reclaim_reent>:
 801e89c:	4b29      	ldr	r3, [pc, #164]	@ (801e944 <_reclaim_reent+0xa8>)
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	4283      	cmp	r3, r0
 801e8a2:	b570      	push	{r4, r5, r6, lr}
 801e8a4:	4604      	mov	r4, r0
 801e8a6:	d04b      	beq.n	801e940 <_reclaim_reent+0xa4>
 801e8a8:	69c3      	ldr	r3, [r0, #28]
 801e8aa:	b1ab      	cbz	r3, 801e8d8 <_reclaim_reent+0x3c>
 801e8ac:	68db      	ldr	r3, [r3, #12]
 801e8ae:	b16b      	cbz	r3, 801e8cc <_reclaim_reent+0x30>
 801e8b0:	2500      	movs	r5, #0
 801e8b2:	69e3      	ldr	r3, [r4, #28]
 801e8b4:	68db      	ldr	r3, [r3, #12]
 801e8b6:	5959      	ldr	r1, [r3, r5]
 801e8b8:	2900      	cmp	r1, #0
 801e8ba:	d13b      	bne.n	801e934 <_reclaim_reent+0x98>
 801e8bc:	3504      	adds	r5, #4
 801e8be:	2d80      	cmp	r5, #128	@ 0x80
 801e8c0:	d1f7      	bne.n	801e8b2 <_reclaim_reent+0x16>
 801e8c2:	69e3      	ldr	r3, [r4, #28]
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	68d9      	ldr	r1, [r3, #12]
 801e8c8:	f000 ff4e 	bl	801f768 <_free_r>
 801e8cc:	69e3      	ldr	r3, [r4, #28]
 801e8ce:	6819      	ldr	r1, [r3, #0]
 801e8d0:	b111      	cbz	r1, 801e8d8 <_reclaim_reent+0x3c>
 801e8d2:	4620      	mov	r0, r4
 801e8d4:	f000 ff48 	bl	801f768 <_free_r>
 801e8d8:	6961      	ldr	r1, [r4, #20]
 801e8da:	b111      	cbz	r1, 801e8e2 <_reclaim_reent+0x46>
 801e8dc:	4620      	mov	r0, r4
 801e8de:	f000 ff43 	bl	801f768 <_free_r>
 801e8e2:	69e1      	ldr	r1, [r4, #28]
 801e8e4:	b111      	cbz	r1, 801e8ec <_reclaim_reent+0x50>
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	f000 ff3e 	bl	801f768 <_free_r>
 801e8ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e8ee:	b111      	cbz	r1, 801e8f6 <_reclaim_reent+0x5a>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	f000 ff39 	bl	801f768 <_free_r>
 801e8f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e8f8:	b111      	cbz	r1, 801e900 <_reclaim_reent+0x64>
 801e8fa:	4620      	mov	r0, r4
 801e8fc:	f000 ff34 	bl	801f768 <_free_r>
 801e900:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e902:	b111      	cbz	r1, 801e90a <_reclaim_reent+0x6e>
 801e904:	4620      	mov	r0, r4
 801e906:	f000 ff2f 	bl	801f768 <_free_r>
 801e90a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e90c:	b111      	cbz	r1, 801e914 <_reclaim_reent+0x78>
 801e90e:	4620      	mov	r0, r4
 801e910:	f000 ff2a 	bl	801f768 <_free_r>
 801e914:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e916:	b111      	cbz	r1, 801e91e <_reclaim_reent+0x82>
 801e918:	4620      	mov	r0, r4
 801e91a:	f000 ff25 	bl	801f768 <_free_r>
 801e91e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e920:	b111      	cbz	r1, 801e928 <_reclaim_reent+0x8c>
 801e922:	4620      	mov	r0, r4
 801e924:	f000 ff20 	bl	801f768 <_free_r>
 801e928:	6a23      	ldr	r3, [r4, #32]
 801e92a:	b14b      	cbz	r3, 801e940 <_reclaim_reent+0xa4>
 801e92c:	4620      	mov	r0, r4
 801e92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e932:	4718      	bx	r3
 801e934:	680e      	ldr	r6, [r1, #0]
 801e936:	4620      	mov	r0, r4
 801e938:	f000 ff16 	bl	801f768 <_free_r>
 801e93c:	4631      	mov	r1, r6
 801e93e:	e7bb      	b.n	801e8b8 <_reclaim_reent+0x1c>
 801e940:	bd70      	pop	{r4, r5, r6, pc}
 801e942:	bf00      	nop
 801e944:	2000005c 	.word	0x2000005c

0801e948 <_lseek_r>:
 801e948:	b538      	push	{r3, r4, r5, lr}
 801e94a:	4d07      	ldr	r5, [pc, #28]	@ (801e968 <_lseek_r+0x20>)
 801e94c:	4604      	mov	r4, r0
 801e94e:	4608      	mov	r0, r1
 801e950:	4611      	mov	r1, r2
 801e952:	2200      	movs	r2, #0
 801e954:	602a      	str	r2, [r5, #0]
 801e956:	461a      	mov	r2, r3
 801e958:	f7e3 fc09 	bl	800216e <_lseek>
 801e95c:	1c43      	adds	r3, r0, #1
 801e95e:	d102      	bne.n	801e966 <_lseek_r+0x1e>
 801e960:	682b      	ldr	r3, [r5, #0]
 801e962:	b103      	cbz	r3, 801e966 <_lseek_r+0x1e>
 801e964:	6023      	str	r3, [r4, #0]
 801e966:	bd38      	pop	{r3, r4, r5, pc}
 801e968:	20017a3c 	.word	0x20017a3c

0801e96c <_read_r>:
 801e96c:	b538      	push	{r3, r4, r5, lr}
 801e96e:	4d07      	ldr	r5, [pc, #28]	@ (801e98c <_read_r+0x20>)
 801e970:	4604      	mov	r4, r0
 801e972:	4608      	mov	r0, r1
 801e974:	4611      	mov	r1, r2
 801e976:	2200      	movs	r2, #0
 801e978:	602a      	str	r2, [r5, #0]
 801e97a:	461a      	mov	r2, r3
 801e97c:	f7e3 fbb3 	bl	80020e6 <_read>
 801e980:	1c43      	adds	r3, r0, #1
 801e982:	d102      	bne.n	801e98a <_read_r+0x1e>
 801e984:	682b      	ldr	r3, [r5, #0]
 801e986:	b103      	cbz	r3, 801e98a <_read_r+0x1e>
 801e988:	6023      	str	r3, [r4, #0]
 801e98a:	bd38      	pop	{r3, r4, r5, pc}
 801e98c:	20017a3c 	.word	0x20017a3c

0801e990 <_kill_r>:
 801e990:	b538      	push	{r3, r4, r5, lr}
 801e992:	4d07      	ldr	r5, [pc, #28]	@ (801e9b0 <_kill_r+0x20>)
 801e994:	2300      	movs	r3, #0
 801e996:	4604      	mov	r4, r0
 801e998:	4608      	mov	r0, r1
 801e99a:	4611      	mov	r1, r2
 801e99c:	602b      	str	r3, [r5, #0]
 801e99e:	f7e3 fb85 	bl	80020ac <_kill>
 801e9a2:	1c43      	adds	r3, r0, #1
 801e9a4:	d102      	bne.n	801e9ac <_kill_r+0x1c>
 801e9a6:	682b      	ldr	r3, [r5, #0]
 801e9a8:	b103      	cbz	r3, 801e9ac <_kill_r+0x1c>
 801e9aa:	6023      	str	r3, [r4, #0]
 801e9ac:	bd38      	pop	{r3, r4, r5, pc}
 801e9ae:	bf00      	nop
 801e9b0:	20017a3c 	.word	0x20017a3c

0801e9b4 <_getpid_r>:
 801e9b4:	f7e3 bb72 	b.w	800209c <_getpid>

0801e9b8 <_sbrk_r>:
 801e9b8:	b538      	push	{r3, r4, r5, lr}
 801e9ba:	4d06      	ldr	r5, [pc, #24]	@ (801e9d4 <_sbrk_r+0x1c>)
 801e9bc:	2300      	movs	r3, #0
 801e9be:	4604      	mov	r4, r0
 801e9c0:	4608      	mov	r0, r1
 801e9c2:	602b      	str	r3, [r5, #0]
 801e9c4:	f7e3 fbe0 	bl	8002188 <_sbrk>
 801e9c8:	1c43      	adds	r3, r0, #1
 801e9ca:	d102      	bne.n	801e9d2 <_sbrk_r+0x1a>
 801e9cc:	682b      	ldr	r3, [r5, #0]
 801e9ce:	b103      	cbz	r3, 801e9d2 <_sbrk_r+0x1a>
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	bd38      	pop	{r3, r4, r5, pc}
 801e9d4:	20017a3c 	.word	0x20017a3c

0801e9d8 <_write_r>:
 801e9d8:	b538      	push	{r3, r4, r5, lr}
 801e9da:	4d07      	ldr	r5, [pc, #28]	@ (801e9f8 <_write_r+0x20>)
 801e9dc:	4604      	mov	r4, r0
 801e9de:	4608      	mov	r0, r1
 801e9e0:	4611      	mov	r1, r2
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	602a      	str	r2, [r5, #0]
 801e9e6:	461a      	mov	r2, r3
 801e9e8:	f7e2 fcad 	bl	8001346 <_write>
 801e9ec:	1c43      	adds	r3, r0, #1
 801e9ee:	d102      	bne.n	801e9f6 <_write_r+0x1e>
 801e9f0:	682b      	ldr	r3, [r5, #0]
 801e9f2:	b103      	cbz	r3, 801e9f6 <_write_r+0x1e>
 801e9f4:	6023      	str	r3, [r4, #0]
 801e9f6:	bd38      	pop	{r3, r4, r5, pc}
 801e9f8:	20017a3c 	.word	0x20017a3c

0801e9fc <__errno>:
 801e9fc:	4b01      	ldr	r3, [pc, #4]	@ (801ea04 <__errno+0x8>)
 801e9fe:	6818      	ldr	r0, [r3, #0]
 801ea00:	4770      	bx	lr
 801ea02:	bf00      	nop
 801ea04:	2000005c 	.word	0x2000005c

0801ea08 <__libc_init_array>:
 801ea08:	b570      	push	{r4, r5, r6, lr}
 801ea0a:	4d0d      	ldr	r5, [pc, #52]	@ (801ea40 <__libc_init_array+0x38>)
 801ea0c:	4c0d      	ldr	r4, [pc, #52]	@ (801ea44 <__libc_init_array+0x3c>)
 801ea0e:	1b64      	subs	r4, r4, r5
 801ea10:	10a4      	asrs	r4, r4, #2
 801ea12:	2600      	movs	r6, #0
 801ea14:	42a6      	cmp	r6, r4
 801ea16:	d109      	bne.n	801ea2c <__libc_init_array+0x24>
 801ea18:	4d0b      	ldr	r5, [pc, #44]	@ (801ea48 <__libc_init_array+0x40>)
 801ea1a:	4c0c      	ldr	r4, [pc, #48]	@ (801ea4c <__libc_init_array+0x44>)
 801ea1c:	f003 f858 	bl	8021ad0 <_init>
 801ea20:	1b64      	subs	r4, r4, r5
 801ea22:	10a4      	asrs	r4, r4, #2
 801ea24:	2600      	movs	r6, #0
 801ea26:	42a6      	cmp	r6, r4
 801ea28:	d105      	bne.n	801ea36 <__libc_init_array+0x2e>
 801ea2a:	bd70      	pop	{r4, r5, r6, pc}
 801ea2c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea30:	4798      	blx	r3
 801ea32:	3601      	adds	r6, #1
 801ea34:	e7ee      	b.n	801ea14 <__libc_init_array+0xc>
 801ea36:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea3a:	4798      	blx	r3
 801ea3c:	3601      	adds	r6, #1
 801ea3e:	e7f2      	b.n	801ea26 <__libc_init_array+0x1e>
 801ea40:	080256c4 	.word	0x080256c4
 801ea44:	080256c4 	.word	0x080256c4
 801ea48:	080256c4 	.word	0x080256c4
 801ea4c:	080256c8 	.word	0x080256c8

0801ea50 <__retarget_lock_init_recursive>:
 801ea50:	4770      	bx	lr

0801ea52 <__retarget_lock_acquire_recursive>:
 801ea52:	4770      	bx	lr

0801ea54 <__retarget_lock_release_recursive>:
 801ea54:	4770      	bx	lr

0801ea56 <strcpy>:
 801ea56:	4603      	mov	r3, r0
 801ea58:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ea5c:	f803 2b01 	strb.w	r2, [r3], #1
 801ea60:	2a00      	cmp	r2, #0
 801ea62:	d1f9      	bne.n	801ea58 <strcpy+0x2>
 801ea64:	4770      	bx	lr

0801ea66 <memcpy>:
 801ea66:	440a      	add	r2, r1
 801ea68:	4291      	cmp	r1, r2
 801ea6a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ea6e:	d100      	bne.n	801ea72 <memcpy+0xc>
 801ea70:	4770      	bx	lr
 801ea72:	b510      	push	{r4, lr}
 801ea74:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ea78:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ea7c:	4291      	cmp	r1, r2
 801ea7e:	d1f9      	bne.n	801ea74 <memcpy+0xe>
 801ea80:	bd10      	pop	{r4, pc}
	...

0801ea84 <nanf>:
 801ea84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ea8c <nanf+0x8>
 801ea88:	4770      	bx	lr
 801ea8a:	bf00      	nop
 801ea8c:	7fc00000 	.word	0x7fc00000

0801ea90 <__assert_func>:
 801ea90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ea92:	4614      	mov	r4, r2
 801ea94:	461a      	mov	r2, r3
 801ea96:	4b09      	ldr	r3, [pc, #36]	@ (801eabc <__assert_func+0x2c>)
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	4605      	mov	r5, r0
 801ea9c:	68d8      	ldr	r0, [r3, #12]
 801ea9e:	b954      	cbnz	r4, 801eab6 <__assert_func+0x26>
 801eaa0:	4b07      	ldr	r3, [pc, #28]	@ (801eac0 <__assert_func+0x30>)
 801eaa2:	461c      	mov	r4, r3
 801eaa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eaa8:	9100      	str	r1, [sp, #0]
 801eaaa:	462b      	mov	r3, r5
 801eaac:	4905      	ldr	r1, [pc, #20]	@ (801eac4 <__assert_func+0x34>)
 801eaae:	f002 fc03 	bl	80212b8 <fiprintf>
 801eab2:	f7fe fbb3 	bl	801d21c <abort>
 801eab6:	4b04      	ldr	r3, [pc, #16]	@ (801eac8 <__assert_func+0x38>)
 801eab8:	e7f4      	b.n	801eaa4 <__assert_func+0x14>
 801eaba:	bf00      	nop
 801eabc:	2000005c 	.word	0x2000005c
 801eac0:	08025416 	.word	0x08025416
 801eac4:	080253e8 	.word	0x080253e8
 801eac8:	080253db 	.word	0x080253db

0801eacc <quorem>:
 801eacc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead0:	6903      	ldr	r3, [r0, #16]
 801ead2:	690c      	ldr	r4, [r1, #16]
 801ead4:	42a3      	cmp	r3, r4
 801ead6:	4607      	mov	r7, r0
 801ead8:	db7e      	blt.n	801ebd8 <quorem+0x10c>
 801eada:	3c01      	subs	r4, #1
 801eadc:	f101 0814 	add.w	r8, r1, #20
 801eae0:	00a3      	lsls	r3, r4, #2
 801eae2:	f100 0514 	add.w	r5, r0, #20
 801eae6:	9300      	str	r3, [sp, #0]
 801eae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eaec:	9301      	str	r3, [sp, #4]
 801eaee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eaf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eaf6:	3301      	adds	r3, #1
 801eaf8:	429a      	cmp	r2, r3
 801eafa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801eafe:	fbb2 f6f3 	udiv	r6, r2, r3
 801eb02:	d32e      	bcc.n	801eb62 <quorem+0x96>
 801eb04:	f04f 0a00 	mov.w	sl, #0
 801eb08:	46c4      	mov	ip, r8
 801eb0a:	46ae      	mov	lr, r5
 801eb0c:	46d3      	mov	fp, sl
 801eb0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801eb12:	b298      	uxth	r0, r3
 801eb14:	fb06 a000 	mla	r0, r6, r0, sl
 801eb18:	0c02      	lsrs	r2, r0, #16
 801eb1a:	0c1b      	lsrs	r3, r3, #16
 801eb1c:	fb06 2303 	mla	r3, r6, r3, r2
 801eb20:	f8de 2000 	ldr.w	r2, [lr]
 801eb24:	b280      	uxth	r0, r0
 801eb26:	b292      	uxth	r2, r2
 801eb28:	1a12      	subs	r2, r2, r0
 801eb2a:	445a      	add	r2, fp
 801eb2c:	f8de 0000 	ldr.w	r0, [lr]
 801eb30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801eb34:	b29b      	uxth	r3, r3
 801eb36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801eb3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801eb3e:	b292      	uxth	r2, r2
 801eb40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801eb44:	45e1      	cmp	r9, ip
 801eb46:	f84e 2b04 	str.w	r2, [lr], #4
 801eb4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801eb4e:	d2de      	bcs.n	801eb0e <quorem+0x42>
 801eb50:	9b00      	ldr	r3, [sp, #0]
 801eb52:	58eb      	ldr	r3, [r5, r3]
 801eb54:	b92b      	cbnz	r3, 801eb62 <quorem+0x96>
 801eb56:	9b01      	ldr	r3, [sp, #4]
 801eb58:	3b04      	subs	r3, #4
 801eb5a:	429d      	cmp	r5, r3
 801eb5c:	461a      	mov	r2, r3
 801eb5e:	d32f      	bcc.n	801ebc0 <quorem+0xf4>
 801eb60:	613c      	str	r4, [r7, #16]
 801eb62:	4638      	mov	r0, r7
 801eb64:	f001 f90e 	bl	801fd84 <__mcmp>
 801eb68:	2800      	cmp	r0, #0
 801eb6a:	db25      	blt.n	801ebb8 <quorem+0xec>
 801eb6c:	4629      	mov	r1, r5
 801eb6e:	2000      	movs	r0, #0
 801eb70:	f858 2b04 	ldr.w	r2, [r8], #4
 801eb74:	f8d1 c000 	ldr.w	ip, [r1]
 801eb78:	fa1f fe82 	uxth.w	lr, r2
 801eb7c:	fa1f f38c 	uxth.w	r3, ip
 801eb80:	eba3 030e 	sub.w	r3, r3, lr
 801eb84:	4403      	add	r3, r0
 801eb86:	0c12      	lsrs	r2, r2, #16
 801eb88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801eb8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eb96:	45c1      	cmp	r9, r8
 801eb98:	f841 3b04 	str.w	r3, [r1], #4
 801eb9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801eba0:	d2e6      	bcs.n	801eb70 <quorem+0xa4>
 801eba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ebaa:	b922      	cbnz	r2, 801ebb6 <quorem+0xea>
 801ebac:	3b04      	subs	r3, #4
 801ebae:	429d      	cmp	r5, r3
 801ebb0:	461a      	mov	r2, r3
 801ebb2:	d30b      	bcc.n	801ebcc <quorem+0x100>
 801ebb4:	613c      	str	r4, [r7, #16]
 801ebb6:	3601      	adds	r6, #1
 801ebb8:	4630      	mov	r0, r6
 801ebba:	b003      	add	sp, #12
 801ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc0:	6812      	ldr	r2, [r2, #0]
 801ebc2:	3b04      	subs	r3, #4
 801ebc4:	2a00      	cmp	r2, #0
 801ebc6:	d1cb      	bne.n	801eb60 <quorem+0x94>
 801ebc8:	3c01      	subs	r4, #1
 801ebca:	e7c6      	b.n	801eb5a <quorem+0x8e>
 801ebcc:	6812      	ldr	r2, [r2, #0]
 801ebce:	3b04      	subs	r3, #4
 801ebd0:	2a00      	cmp	r2, #0
 801ebd2:	d1ef      	bne.n	801ebb4 <quorem+0xe8>
 801ebd4:	3c01      	subs	r4, #1
 801ebd6:	e7ea      	b.n	801ebae <quorem+0xe2>
 801ebd8:	2000      	movs	r0, #0
 801ebda:	e7ee      	b.n	801ebba <quorem+0xee>
 801ebdc:	0000      	movs	r0, r0
	...

0801ebe0 <_dtoa_r>:
 801ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebe4:	69c7      	ldr	r7, [r0, #28]
 801ebe6:	b099      	sub	sp, #100	@ 0x64
 801ebe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ebec:	ec55 4b10 	vmov	r4, r5, d0
 801ebf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ebf2:	9109      	str	r1, [sp, #36]	@ 0x24
 801ebf4:	4683      	mov	fp, r0
 801ebf6:	920e      	str	r2, [sp, #56]	@ 0x38
 801ebf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ebfa:	b97f      	cbnz	r7, 801ec1c <_dtoa_r+0x3c>
 801ebfc:	2010      	movs	r0, #16
 801ebfe:	f7fe fb19 	bl	801d234 <malloc>
 801ec02:	4602      	mov	r2, r0
 801ec04:	f8cb 001c 	str.w	r0, [fp, #28]
 801ec08:	b920      	cbnz	r0, 801ec14 <_dtoa_r+0x34>
 801ec0a:	4ba7      	ldr	r3, [pc, #668]	@ (801eea8 <_dtoa_r+0x2c8>)
 801ec0c:	21ef      	movs	r1, #239	@ 0xef
 801ec0e:	48a7      	ldr	r0, [pc, #668]	@ (801eeac <_dtoa_r+0x2cc>)
 801ec10:	f7ff ff3e 	bl	801ea90 <__assert_func>
 801ec14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ec18:	6007      	str	r7, [r0, #0]
 801ec1a:	60c7      	str	r7, [r0, #12]
 801ec1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ec20:	6819      	ldr	r1, [r3, #0]
 801ec22:	b159      	cbz	r1, 801ec3c <_dtoa_r+0x5c>
 801ec24:	685a      	ldr	r2, [r3, #4]
 801ec26:	604a      	str	r2, [r1, #4]
 801ec28:	2301      	movs	r3, #1
 801ec2a:	4093      	lsls	r3, r2
 801ec2c:	608b      	str	r3, [r1, #8]
 801ec2e:	4658      	mov	r0, fp
 801ec30:	f000 fe24 	bl	801f87c <_Bfree>
 801ec34:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ec38:	2200      	movs	r2, #0
 801ec3a:	601a      	str	r2, [r3, #0]
 801ec3c:	1e2b      	subs	r3, r5, #0
 801ec3e:	bfb9      	ittee	lt
 801ec40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ec44:	9303      	strlt	r3, [sp, #12]
 801ec46:	2300      	movge	r3, #0
 801ec48:	6033      	strge	r3, [r6, #0]
 801ec4a:	9f03      	ldr	r7, [sp, #12]
 801ec4c:	4b98      	ldr	r3, [pc, #608]	@ (801eeb0 <_dtoa_r+0x2d0>)
 801ec4e:	bfbc      	itt	lt
 801ec50:	2201      	movlt	r2, #1
 801ec52:	6032      	strlt	r2, [r6, #0]
 801ec54:	43bb      	bics	r3, r7
 801ec56:	d112      	bne.n	801ec7e <_dtoa_r+0x9e>
 801ec58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ec5e:	6013      	str	r3, [r2, #0]
 801ec60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ec64:	4323      	orrs	r3, r4
 801ec66:	f000 854d 	beq.w	801f704 <_dtoa_r+0xb24>
 801ec6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ec6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801eec4 <_dtoa_r+0x2e4>
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	f000 854f 	beq.w	801f714 <_dtoa_r+0xb34>
 801ec76:	f10a 0303 	add.w	r3, sl, #3
 801ec7a:	f000 bd49 	b.w	801f710 <_dtoa_r+0xb30>
 801ec7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ec82:	2200      	movs	r2, #0
 801ec84:	ec51 0b17 	vmov	r0, r1, d7
 801ec88:	2300      	movs	r3, #0
 801ec8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ec8e:	f7e1 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 801ec92:	4680      	mov	r8, r0
 801ec94:	b158      	cbz	r0, 801ecae <_dtoa_r+0xce>
 801ec96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec98:	2301      	movs	r3, #1
 801ec9a:	6013      	str	r3, [r2, #0]
 801ec9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ec9e:	b113      	cbz	r3, 801eca6 <_dtoa_r+0xc6>
 801eca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801eca2:	4b84      	ldr	r3, [pc, #528]	@ (801eeb4 <_dtoa_r+0x2d4>)
 801eca4:	6013      	str	r3, [r2, #0]
 801eca6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801eec8 <_dtoa_r+0x2e8>
 801ecaa:	f000 bd33 	b.w	801f714 <_dtoa_r+0xb34>
 801ecae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ecb2:	aa16      	add	r2, sp, #88	@ 0x58
 801ecb4:	a917      	add	r1, sp, #92	@ 0x5c
 801ecb6:	4658      	mov	r0, fp
 801ecb8:	f001 f984 	bl	801ffc4 <__d2b>
 801ecbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ecc0:	4681      	mov	r9, r0
 801ecc2:	2e00      	cmp	r6, #0
 801ecc4:	d077      	beq.n	801edb6 <_dtoa_r+0x1d6>
 801ecc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801eccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ecd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ecd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ecd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ecdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ece0:	4619      	mov	r1, r3
 801ece2:	2200      	movs	r2, #0
 801ece4:	4b74      	ldr	r3, [pc, #464]	@ (801eeb8 <_dtoa_r+0x2d8>)
 801ece6:	f7e1 facf 	bl	8000288 <__aeabi_dsub>
 801ecea:	a369      	add	r3, pc, #420	@ (adr r3, 801ee90 <_dtoa_r+0x2b0>)
 801ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecf0:	f7e1 fc82 	bl	80005f8 <__aeabi_dmul>
 801ecf4:	a368      	add	r3, pc, #416	@ (adr r3, 801ee98 <_dtoa_r+0x2b8>)
 801ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecfa:	f7e1 fac7 	bl	800028c <__adddf3>
 801ecfe:	4604      	mov	r4, r0
 801ed00:	4630      	mov	r0, r6
 801ed02:	460d      	mov	r5, r1
 801ed04:	f7e1 fc0e 	bl	8000524 <__aeabi_i2d>
 801ed08:	a365      	add	r3, pc, #404	@ (adr r3, 801eea0 <_dtoa_r+0x2c0>)
 801ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed0e:	f7e1 fc73 	bl	80005f8 <__aeabi_dmul>
 801ed12:	4602      	mov	r2, r0
 801ed14:	460b      	mov	r3, r1
 801ed16:	4620      	mov	r0, r4
 801ed18:	4629      	mov	r1, r5
 801ed1a:	f7e1 fab7 	bl	800028c <__adddf3>
 801ed1e:	4604      	mov	r4, r0
 801ed20:	460d      	mov	r5, r1
 801ed22:	f7e1 ff19 	bl	8000b58 <__aeabi_d2iz>
 801ed26:	2200      	movs	r2, #0
 801ed28:	4607      	mov	r7, r0
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	4620      	mov	r0, r4
 801ed2e:	4629      	mov	r1, r5
 801ed30:	f7e1 fed4 	bl	8000adc <__aeabi_dcmplt>
 801ed34:	b140      	cbz	r0, 801ed48 <_dtoa_r+0x168>
 801ed36:	4638      	mov	r0, r7
 801ed38:	f7e1 fbf4 	bl	8000524 <__aeabi_i2d>
 801ed3c:	4622      	mov	r2, r4
 801ed3e:	462b      	mov	r3, r5
 801ed40:	f7e1 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 801ed44:	b900      	cbnz	r0, 801ed48 <_dtoa_r+0x168>
 801ed46:	3f01      	subs	r7, #1
 801ed48:	2f16      	cmp	r7, #22
 801ed4a:	d851      	bhi.n	801edf0 <_dtoa_r+0x210>
 801ed4c:	4b5b      	ldr	r3, [pc, #364]	@ (801eebc <_dtoa_r+0x2dc>)
 801ed4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ed5a:	f7e1 febf 	bl	8000adc <__aeabi_dcmplt>
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	d048      	beq.n	801edf4 <_dtoa_r+0x214>
 801ed62:	3f01      	subs	r7, #1
 801ed64:	2300      	movs	r3, #0
 801ed66:	9312      	str	r3, [sp, #72]	@ 0x48
 801ed68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ed6a:	1b9b      	subs	r3, r3, r6
 801ed6c:	1e5a      	subs	r2, r3, #1
 801ed6e:	bf44      	itt	mi
 801ed70:	f1c3 0801 	rsbmi	r8, r3, #1
 801ed74:	2300      	movmi	r3, #0
 801ed76:	9208      	str	r2, [sp, #32]
 801ed78:	bf54      	ite	pl
 801ed7a:	f04f 0800 	movpl.w	r8, #0
 801ed7e:	9308      	strmi	r3, [sp, #32]
 801ed80:	2f00      	cmp	r7, #0
 801ed82:	db39      	blt.n	801edf8 <_dtoa_r+0x218>
 801ed84:	9b08      	ldr	r3, [sp, #32]
 801ed86:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ed88:	443b      	add	r3, r7
 801ed8a:	9308      	str	r3, [sp, #32]
 801ed8c:	2300      	movs	r3, #0
 801ed8e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed92:	2b09      	cmp	r3, #9
 801ed94:	d864      	bhi.n	801ee60 <_dtoa_r+0x280>
 801ed96:	2b05      	cmp	r3, #5
 801ed98:	bfc4      	itt	gt
 801ed9a:	3b04      	subgt	r3, #4
 801ed9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ed9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eda0:	f1a3 0302 	sub.w	r3, r3, #2
 801eda4:	bfcc      	ite	gt
 801eda6:	2400      	movgt	r4, #0
 801eda8:	2401      	movle	r4, #1
 801edaa:	2b03      	cmp	r3, #3
 801edac:	d863      	bhi.n	801ee76 <_dtoa_r+0x296>
 801edae:	e8df f003 	tbb	[pc, r3]
 801edb2:	372a      	.short	0x372a
 801edb4:	5535      	.short	0x5535
 801edb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801edba:	441e      	add	r6, r3
 801edbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801edc0:	2b20      	cmp	r3, #32
 801edc2:	bfc1      	itttt	gt
 801edc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801edc8:	409f      	lslgt	r7, r3
 801edca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801edce:	fa24 f303 	lsrgt.w	r3, r4, r3
 801edd2:	bfd6      	itet	le
 801edd4:	f1c3 0320 	rsble	r3, r3, #32
 801edd8:	ea47 0003 	orrgt.w	r0, r7, r3
 801eddc:	fa04 f003 	lslle.w	r0, r4, r3
 801ede0:	f7e1 fb90 	bl	8000504 <__aeabi_ui2d>
 801ede4:	2201      	movs	r2, #1
 801ede6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801edea:	3e01      	subs	r6, #1
 801edec:	9214      	str	r2, [sp, #80]	@ 0x50
 801edee:	e777      	b.n	801ece0 <_dtoa_r+0x100>
 801edf0:	2301      	movs	r3, #1
 801edf2:	e7b8      	b.n	801ed66 <_dtoa_r+0x186>
 801edf4:	9012      	str	r0, [sp, #72]	@ 0x48
 801edf6:	e7b7      	b.n	801ed68 <_dtoa_r+0x188>
 801edf8:	427b      	negs	r3, r7
 801edfa:	930a      	str	r3, [sp, #40]	@ 0x28
 801edfc:	2300      	movs	r3, #0
 801edfe:	eba8 0807 	sub.w	r8, r8, r7
 801ee02:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ee04:	e7c4      	b.n	801ed90 <_dtoa_r+0x1b0>
 801ee06:	2300      	movs	r3, #0
 801ee08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	dc35      	bgt.n	801ee7c <_dtoa_r+0x29c>
 801ee10:	2301      	movs	r3, #1
 801ee12:	9300      	str	r3, [sp, #0]
 801ee14:	9307      	str	r3, [sp, #28]
 801ee16:	461a      	mov	r2, r3
 801ee18:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee1a:	e00b      	b.n	801ee34 <_dtoa_r+0x254>
 801ee1c:	2301      	movs	r3, #1
 801ee1e:	e7f3      	b.n	801ee08 <_dtoa_r+0x228>
 801ee20:	2300      	movs	r3, #0
 801ee22:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee26:	18fb      	adds	r3, r7, r3
 801ee28:	9300      	str	r3, [sp, #0]
 801ee2a:	3301      	adds	r3, #1
 801ee2c:	2b01      	cmp	r3, #1
 801ee2e:	9307      	str	r3, [sp, #28]
 801ee30:	bfb8      	it	lt
 801ee32:	2301      	movlt	r3, #1
 801ee34:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ee38:	2100      	movs	r1, #0
 801ee3a:	2204      	movs	r2, #4
 801ee3c:	f102 0514 	add.w	r5, r2, #20
 801ee40:	429d      	cmp	r5, r3
 801ee42:	d91f      	bls.n	801ee84 <_dtoa_r+0x2a4>
 801ee44:	6041      	str	r1, [r0, #4]
 801ee46:	4658      	mov	r0, fp
 801ee48:	f000 fcd8 	bl	801f7fc <_Balloc>
 801ee4c:	4682      	mov	sl, r0
 801ee4e:	2800      	cmp	r0, #0
 801ee50:	d13c      	bne.n	801eecc <_dtoa_r+0x2ec>
 801ee52:	4b1b      	ldr	r3, [pc, #108]	@ (801eec0 <_dtoa_r+0x2e0>)
 801ee54:	4602      	mov	r2, r0
 801ee56:	f240 11af 	movw	r1, #431	@ 0x1af
 801ee5a:	e6d8      	b.n	801ec0e <_dtoa_r+0x2e>
 801ee5c:	2301      	movs	r3, #1
 801ee5e:	e7e0      	b.n	801ee22 <_dtoa_r+0x242>
 801ee60:	2401      	movs	r4, #1
 801ee62:	2300      	movs	r3, #0
 801ee64:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee66:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ee68:	f04f 33ff 	mov.w	r3, #4294967295
 801ee6c:	9300      	str	r3, [sp, #0]
 801ee6e:	9307      	str	r3, [sp, #28]
 801ee70:	2200      	movs	r2, #0
 801ee72:	2312      	movs	r3, #18
 801ee74:	e7d0      	b.n	801ee18 <_dtoa_r+0x238>
 801ee76:	2301      	movs	r3, #1
 801ee78:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee7a:	e7f5      	b.n	801ee68 <_dtoa_r+0x288>
 801ee7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	9307      	str	r3, [sp, #28]
 801ee82:	e7d7      	b.n	801ee34 <_dtoa_r+0x254>
 801ee84:	3101      	adds	r1, #1
 801ee86:	0052      	lsls	r2, r2, #1
 801ee88:	e7d8      	b.n	801ee3c <_dtoa_r+0x25c>
 801ee8a:	bf00      	nop
 801ee8c:	f3af 8000 	nop.w
 801ee90:	636f4361 	.word	0x636f4361
 801ee94:	3fd287a7 	.word	0x3fd287a7
 801ee98:	8b60c8b3 	.word	0x8b60c8b3
 801ee9c:	3fc68a28 	.word	0x3fc68a28
 801eea0:	509f79fb 	.word	0x509f79fb
 801eea4:	3fd34413 	.word	0x3fd34413
 801eea8:	08025232 	.word	0x08025232
 801eeac:	08025424 	.word	0x08025424
 801eeb0:	7ff00000 	.word	0x7ff00000
 801eeb4:	080253b3 	.word	0x080253b3
 801eeb8:	3ff80000 	.word	0x3ff80000
 801eebc:	08025520 	.word	0x08025520
 801eec0:	0802547c 	.word	0x0802547c
 801eec4:	08025420 	.word	0x08025420
 801eec8:	080253b2 	.word	0x080253b2
 801eecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801eed0:	6018      	str	r0, [r3, #0]
 801eed2:	9b07      	ldr	r3, [sp, #28]
 801eed4:	2b0e      	cmp	r3, #14
 801eed6:	f200 80a4 	bhi.w	801f022 <_dtoa_r+0x442>
 801eeda:	2c00      	cmp	r4, #0
 801eedc:	f000 80a1 	beq.w	801f022 <_dtoa_r+0x442>
 801eee0:	2f00      	cmp	r7, #0
 801eee2:	dd33      	ble.n	801ef4c <_dtoa_r+0x36c>
 801eee4:	4bad      	ldr	r3, [pc, #692]	@ (801f19c <_dtoa_r+0x5bc>)
 801eee6:	f007 020f 	and.w	r2, r7, #15
 801eeea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eeee:	ed93 7b00 	vldr	d7, [r3]
 801eef2:	05f8      	lsls	r0, r7, #23
 801eef4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801eef8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801eefc:	d516      	bpl.n	801ef2c <_dtoa_r+0x34c>
 801eefe:	4ba8      	ldr	r3, [pc, #672]	@ (801f1a0 <_dtoa_r+0x5c0>)
 801ef00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ef04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ef08:	f7e1 fca0 	bl	800084c <__aeabi_ddiv>
 801ef0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef10:	f004 040f 	and.w	r4, r4, #15
 801ef14:	2603      	movs	r6, #3
 801ef16:	4da2      	ldr	r5, [pc, #648]	@ (801f1a0 <_dtoa_r+0x5c0>)
 801ef18:	b954      	cbnz	r4, 801ef30 <_dtoa_r+0x350>
 801ef1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ef1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef22:	f7e1 fc93 	bl	800084c <__aeabi_ddiv>
 801ef26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef2a:	e028      	b.n	801ef7e <_dtoa_r+0x39e>
 801ef2c:	2602      	movs	r6, #2
 801ef2e:	e7f2      	b.n	801ef16 <_dtoa_r+0x336>
 801ef30:	07e1      	lsls	r1, r4, #31
 801ef32:	d508      	bpl.n	801ef46 <_dtoa_r+0x366>
 801ef34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ef38:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ef3c:	f7e1 fb5c 	bl	80005f8 <__aeabi_dmul>
 801ef40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ef44:	3601      	adds	r6, #1
 801ef46:	1064      	asrs	r4, r4, #1
 801ef48:	3508      	adds	r5, #8
 801ef4a:	e7e5      	b.n	801ef18 <_dtoa_r+0x338>
 801ef4c:	f000 80d2 	beq.w	801f0f4 <_dtoa_r+0x514>
 801ef50:	427c      	negs	r4, r7
 801ef52:	4b92      	ldr	r3, [pc, #584]	@ (801f19c <_dtoa_r+0x5bc>)
 801ef54:	4d92      	ldr	r5, [pc, #584]	@ (801f1a0 <_dtoa_r+0x5c0>)
 801ef56:	f004 020f 	and.w	r2, r4, #15
 801ef5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ef66:	f7e1 fb47 	bl	80005f8 <__aeabi_dmul>
 801ef6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef6e:	1124      	asrs	r4, r4, #4
 801ef70:	2300      	movs	r3, #0
 801ef72:	2602      	movs	r6, #2
 801ef74:	2c00      	cmp	r4, #0
 801ef76:	f040 80b2 	bne.w	801f0de <_dtoa_r+0x4fe>
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d1d3      	bne.n	801ef26 <_dtoa_r+0x346>
 801ef7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ef80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	f000 80b7 	beq.w	801f0f8 <_dtoa_r+0x518>
 801ef8a:	4b86      	ldr	r3, [pc, #536]	@ (801f1a4 <_dtoa_r+0x5c4>)
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	4620      	mov	r0, r4
 801ef90:	4629      	mov	r1, r5
 801ef92:	f7e1 fda3 	bl	8000adc <__aeabi_dcmplt>
 801ef96:	2800      	cmp	r0, #0
 801ef98:	f000 80ae 	beq.w	801f0f8 <_dtoa_r+0x518>
 801ef9c:	9b07      	ldr	r3, [sp, #28]
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	f000 80aa 	beq.w	801f0f8 <_dtoa_r+0x518>
 801efa4:	9b00      	ldr	r3, [sp, #0]
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	dd37      	ble.n	801f01a <_dtoa_r+0x43a>
 801efaa:	1e7b      	subs	r3, r7, #1
 801efac:	9304      	str	r3, [sp, #16]
 801efae:	4620      	mov	r0, r4
 801efb0:	4b7d      	ldr	r3, [pc, #500]	@ (801f1a8 <_dtoa_r+0x5c8>)
 801efb2:	2200      	movs	r2, #0
 801efb4:	4629      	mov	r1, r5
 801efb6:	f7e1 fb1f 	bl	80005f8 <__aeabi_dmul>
 801efba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efbe:	9c00      	ldr	r4, [sp, #0]
 801efc0:	3601      	adds	r6, #1
 801efc2:	4630      	mov	r0, r6
 801efc4:	f7e1 faae 	bl	8000524 <__aeabi_i2d>
 801efc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801efcc:	f7e1 fb14 	bl	80005f8 <__aeabi_dmul>
 801efd0:	4b76      	ldr	r3, [pc, #472]	@ (801f1ac <_dtoa_r+0x5cc>)
 801efd2:	2200      	movs	r2, #0
 801efd4:	f7e1 f95a 	bl	800028c <__adddf3>
 801efd8:	4605      	mov	r5, r0
 801efda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801efde:	2c00      	cmp	r4, #0
 801efe0:	f040 808d 	bne.w	801f0fe <_dtoa_r+0x51e>
 801efe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efe8:	4b71      	ldr	r3, [pc, #452]	@ (801f1b0 <_dtoa_r+0x5d0>)
 801efea:	2200      	movs	r2, #0
 801efec:	f7e1 f94c 	bl	8000288 <__aeabi_dsub>
 801eff0:	4602      	mov	r2, r0
 801eff2:	460b      	mov	r3, r1
 801eff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eff8:	462a      	mov	r2, r5
 801effa:	4633      	mov	r3, r6
 801effc:	f7e1 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 801f000:	2800      	cmp	r0, #0
 801f002:	f040 828b 	bne.w	801f51c <_dtoa_r+0x93c>
 801f006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f00a:	462a      	mov	r2, r5
 801f00c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f010:	f7e1 fd64 	bl	8000adc <__aeabi_dcmplt>
 801f014:	2800      	cmp	r0, #0
 801f016:	f040 8128 	bne.w	801f26a <_dtoa_r+0x68a>
 801f01a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f01e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f024:	2b00      	cmp	r3, #0
 801f026:	f2c0 815a 	blt.w	801f2de <_dtoa_r+0x6fe>
 801f02a:	2f0e      	cmp	r7, #14
 801f02c:	f300 8157 	bgt.w	801f2de <_dtoa_r+0x6fe>
 801f030:	4b5a      	ldr	r3, [pc, #360]	@ (801f19c <_dtoa_r+0x5bc>)
 801f032:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f036:	ed93 7b00 	vldr	d7, [r3]
 801f03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	ed8d 7b00 	vstr	d7, [sp]
 801f042:	da03      	bge.n	801f04c <_dtoa_r+0x46c>
 801f044:	9b07      	ldr	r3, [sp, #28]
 801f046:	2b00      	cmp	r3, #0
 801f048:	f340 8101 	ble.w	801f24e <_dtoa_r+0x66e>
 801f04c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f050:	4656      	mov	r6, sl
 801f052:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f056:	4620      	mov	r0, r4
 801f058:	4629      	mov	r1, r5
 801f05a:	f7e1 fbf7 	bl	800084c <__aeabi_ddiv>
 801f05e:	f7e1 fd7b 	bl	8000b58 <__aeabi_d2iz>
 801f062:	4680      	mov	r8, r0
 801f064:	f7e1 fa5e 	bl	8000524 <__aeabi_i2d>
 801f068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f06c:	f7e1 fac4 	bl	80005f8 <__aeabi_dmul>
 801f070:	4602      	mov	r2, r0
 801f072:	460b      	mov	r3, r1
 801f074:	4620      	mov	r0, r4
 801f076:	4629      	mov	r1, r5
 801f078:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f07c:	f7e1 f904 	bl	8000288 <__aeabi_dsub>
 801f080:	f806 4b01 	strb.w	r4, [r6], #1
 801f084:	9d07      	ldr	r5, [sp, #28]
 801f086:	eba6 040a 	sub.w	r4, r6, sl
 801f08a:	42a5      	cmp	r5, r4
 801f08c:	4602      	mov	r2, r0
 801f08e:	460b      	mov	r3, r1
 801f090:	f040 8117 	bne.w	801f2c2 <_dtoa_r+0x6e2>
 801f094:	f7e1 f8fa 	bl	800028c <__adddf3>
 801f098:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f09c:	4604      	mov	r4, r0
 801f09e:	460d      	mov	r5, r1
 801f0a0:	f7e1 fd3a 	bl	8000b18 <__aeabi_dcmpgt>
 801f0a4:	2800      	cmp	r0, #0
 801f0a6:	f040 80f9 	bne.w	801f29c <_dtoa_r+0x6bc>
 801f0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f0ae:	4620      	mov	r0, r4
 801f0b0:	4629      	mov	r1, r5
 801f0b2:	f7e1 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 801f0b6:	b118      	cbz	r0, 801f0c0 <_dtoa_r+0x4e0>
 801f0b8:	f018 0f01 	tst.w	r8, #1
 801f0bc:	f040 80ee 	bne.w	801f29c <_dtoa_r+0x6bc>
 801f0c0:	4649      	mov	r1, r9
 801f0c2:	4658      	mov	r0, fp
 801f0c4:	f000 fbda 	bl	801f87c <_Bfree>
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	7033      	strb	r3, [r6, #0]
 801f0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0ce:	3701      	adds	r7, #1
 801f0d0:	601f      	str	r7, [r3, #0]
 801f0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	f000 831d 	beq.w	801f714 <_dtoa_r+0xb34>
 801f0da:	601e      	str	r6, [r3, #0]
 801f0dc:	e31a      	b.n	801f714 <_dtoa_r+0xb34>
 801f0de:	07e2      	lsls	r2, r4, #31
 801f0e0:	d505      	bpl.n	801f0ee <_dtoa_r+0x50e>
 801f0e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f0e6:	f7e1 fa87 	bl	80005f8 <__aeabi_dmul>
 801f0ea:	3601      	adds	r6, #1
 801f0ec:	2301      	movs	r3, #1
 801f0ee:	1064      	asrs	r4, r4, #1
 801f0f0:	3508      	adds	r5, #8
 801f0f2:	e73f      	b.n	801ef74 <_dtoa_r+0x394>
 801f0f4:	2602      	movs	r6, #2
 801f0f6:	e742      	b.n	801ef7e <_dtoa_r+0x39e>
 801f0f8:	9c07      	ldr	r4, [sp, #28]
 801f0fa:	9704      	str	r7, [sp, #16]
 801f0fc:	e761      	b.n	801efc2 <_dtoa_r+0x3e2>
 801f0fe:	4b27      	ldr	r3, [pc, #156]	@ (801f19c <_dtoa_r+0x5bc>)
 801f100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f10a:	4454      	add	r4, sl
 801f10c:	2900      	cmp	r1, #0
 801f10e:	d053      	beq.n	801f1b8 <_dtoa_r+0x5d8>
 801f110:	4928      	ldr	r1, [pc, #160]	@ (801f1b4 <_dtoa_r+0x5d4>)
 801f112:	2000      	movs	r0, #0
 801f114:	f7e1 fb9a 	bl	800084c <__aeabi_ddiv>
 801f118:	4633      	mov	r3, r6
 801f11a:	462a      	mov	r2, r5
 801f11c:	f7e1 f8b4 	bl	8000288 <__aeabi_dsub>
 801f120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f124:	4656      	mov	r6, sl
 801f126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f12a:	f7e1 fd15 	bl	8000b58 <__aeabi_d2iz>
 801f12e:	4605      	mov	r5, r0
 801f130:	f7e1 f9f8 	bl	8000524 <__aeabi_i2d>
 801f134:	4602      	mov	r2, r0
 801f136:	460b      	mov	r3, r1
 801f138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f13c:	f7e1 f8a4 	bl	8000288 <__aeabi_dsub>
 801f140:	3530      	adds	r5, #48	@ 0x30
 801f142:	4602      	mov	r2, r0
 801f144:	460b      	mov	r3, r1
 801f146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f14a:	f806 5b01 	strb.w	r5, [r6], #1
 801f14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f152:	f7e1 fcc3 	bl	8000adc <__aeabi_dcmplt>
 801f156:	2800      	cmp	r0, #0
 801f158:	d171      	bne.n	801f23e <_dtoa_r+0x65e>
 801f15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f15e:	4911      	ldr	r1, [pc, #68]	@ (801f1a4 <_dtoa_r+0x5c4>)
 801f160:	2000      	movs	r0, #0
 801f162:	f7e1 f891 	bl	8000288 <__aeabi_dsub>
 801f166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f16a:	f7e1 fcb7 	bl	8000adc <__aeabi_dcmplt>
 801f16e:	2800      	cmp	r0, #0
 801f170:	f040 8095 	bne.w	801f29e <_dtoa_r+0x6be>
 801f174:	42a6      	cmp	r6, r4
 801f176:	f43f af50 	beq.w	801f01a <_dtoa_r+0x43a>
 801f17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f17e:	4b0a      	ldr	r3, [pc, #40]	@ (801f1a8 <_dtoa_r+0x5c8>)
 801f180:	2200      	movs	r2, #0
 801f182:	f7e1 fa39 	bl	80005f8 <__aeabi_dmul>
 801f186:	4b08      	ldr	r3, [pc, #32]	@ (801f1a8 <_dtoa_r+0x5c8>)
 801f188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f18c:	2200      	movs	r2, #0
 801f18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f192:	f7e1 fa31 	bl	80005f8 <__aeabi_dmul>
 801f196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f19a:	e7c4      	b.n	801f126 <_dtoa_r+0x546>
 801f19c:	08025520 	.word	0x08025520
 801f1a0:	080254f8 	.word	0x080254f8
 801f1a4:	3ff00000 	.word	0x3ff00000
 801f1a8:	40240000 	.word	0x40240000
 801f1ac:	401c0000 	.word	0x401c0000
 801f1b0:	40140000 	.word	0x40140000
 801f1b4:	3fe00000 	.word	0x3fe00000
 801f1b8:	4631      	mov	r1, r6
 801f1ba:	4628      	mov	r0, r5
 801f1bc:	f7e1 fa1c 	bl	80005f8 <__aeabi_dmul>
 801f1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f1c4:	9415      	str	r4, [sp, #84]	@ 0x54
 801f1c6:	4656      	mov	r6, sl
 801f1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f1cc:	f7e1 fcc4 	bl	8000b58 <__aeabi_d2iz>
 801f1d0:	4605      	mov	r5, r0
 801f1d2:	f7e1 f9a7 	bl	8000524 <__aeabi_i2d>
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	460b      	mov	r3, r1
 801f1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f1de:	f7e1 f853 	bl	8000288 <__aeabi_dsub>
 801f1e2:	3530      	adds	r5, #48	@ 0x30
 801f1e4:	f806 5b01 	strb.w	r5, [r6], #1
 801f1e8:	4602      	mov	r2, r0
 801f1ea:	460b      	mov	r3, r1
 801f1ec:	42a6      	cmp	r6, r4
 801f1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f1f2:	f04f 0200 	mov.w	r2, #0
 801f1f6:	d124      	bne.n	801f242 <_dtoa_r+0x662>
 801f1f8:	4bac      	ldr	r3, [pc, #688]	@ (801f4ac <_dtoa_r+0x8cc>)
 801f1fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f1fe:	f7e1 f845 	bl	800028c <__adddf3>
 801f202:	4602      	mov	r2, r0
 801f204:	460b      	mov	r3, r1
 801f206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f20a:	f7e1 fc85 	bl	8000b18 <__aeabi_dcmpgt>
 801f20e:	2800      	cmp	r0, #0
 801f210:	d145      	bne.n	801f29e <_dtoa_r+0x6be>
 801f212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f216:	49a5      	ldr	r1, [pc, #660]	@ (801f4ac <_dtoa_r+0x8cc>)
 801f218:	2000      	movs	r0, #0
 801f21a:	f7e1 f835 	bl	8000288 <__aeabi_dsub>
 801f21e:	4602      	mov	r2, r0
 801f220:	460b      	mov	r3, r1
 801f222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f226:	f7e1 fc59 	bl	8000adc <__aeabi_dcmplt>
 801f22a:	2800      	cmp	r0, #0
 801f22c:	f43f aef5 	beq.w	801f01a <_dtoa_r+0x43a>
 801f230:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f232:	1e73      	subs	r3, r6, #1
 801f234:	9315      	str	r3, [sp, #84]	@ 0x54
 801f236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f23a:	2b30      	cmp	r3, #48	@ 0x30
 801f23c:	d0f8      	beq.n	801f230 <_dtoa_r+0x650>
 801f23e:	9f04      	ldr	r7, [sp, #16]
 801f240:	e73e      	b.n	801f0c0 <_dtoa_r+0x4e0>
 801f242:	4b9b      	ldr	r3, [pc, #620]	@ (801f4b0 <_dtoa_r+0x8d0>)
 801f244:	f7e1 f9d8 	bl	80005f8 <__aeabi_dmul>
 801f248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f24c:	e7bc      	b.n	801f1c8 <_dtoa_r+0x5e8>
 801f24e:	d10c      	bne.n	801f26a <_dtoa_r+0x68a>
 801f250:	4b98      	ldr	r3, [pc, #608]	@ (801f4b4 <_dtoa_r+0x8d4>)
 801f252:	2200      	movs	r2, #0
 801f254:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f258:	f7e1 f9ce 	bl	80005f8 <__aeabi_dmul>
 801f25c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f260:	f7e1 fc50 	bl	8000b04 <__aeabi_dcmpge>
 801f264:	2800      	cmp	r0, #0
 801f266:	f000 8157 	beq.w	801f518 <_dtoa_r+0x938>
 801f26a:	2400      	movs	r4, #0
 801f26c:	4625      	mov	r5, r4
 801f26e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f270:	43db      	mvns	r3, r3
 801f272:	9304      	str	r3, [sp, #16]
 801f274:	4656      	mov	r6, sl
 801f276:	2700      	movs	r7, #0
 801f278:	4621      	mov	r1, r4
 801f27a:	4658      	mov	r0, fp
 801f27c:	f000 fafe 	bl	801f87c <_Bfree>
 801f280:	2d00      	cmp	r5, #0
 801f282:	d0dc      	beq.n	801f23e <_dtoa_r+0x65e>
 801f284:	b12f      	cbz	r7, 801f292 <_dtoa_r+0x6b2>
 801f286:	42af      	cmp	r7, r5
 801f288:	d003      	beq.n	801f292 <_dtoa_r+0x6b2>
 801f28a:	4639      	mov	r1, r7
 801f28c:	4658      	mov	r0, fp
 801f28e:	f000 faf5 	bl	801f87c <_Bfree>
 801f292:	4629      	mov	r1, r5
 801f294:	4658      	mov	r0, fp
 801f296:	f000 faf1 	bl	801f87c <_Bfree>
 801f29a:	e7d0      	b.n	801f23e <_dtoa_r+0x65e>
 801f29c:	9704      	str	r7, [sp, #16]
 801f29e:	4633      	mov	r3, r6
 801f2a0:	461e      	mov	r6, r3
 801f2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f2a6:	2a39      	cmp	r2, #57	@ 0x39
 801f2a8:	d107      	bne.n	801f2ba <_dtoa_r+0x6da>
 801f2aa:	459a      	cmp	sl, r3
 801f2ac:	d1f8      	bne.n	801f2a0 <_dtoa_r+0x6c0>
 801f2ae:	9a04      	ldr	r2, [sp, #16]
 801f2b0:	3201      	adds	r2, #1
 801f2b2:	9204      	str	r2, [sp, #16]
 801f2b4:	2230      	movs	r2, #48	@ 0x30
 801f2b6:	f88a 2000 	strb.w	r2, [sl]
 801f2ba:	781a      	ldrb	r2, [r3, #0]
 801f2bc:	3201      	adds	r2, #1
 801f2be:	701a      	strb	r2, [r3, #0]
 801f2c0:	e7bd      	b.n	801f23e <_dtoa_r+0x65e>
 801f2c2:	4b7b      	ldr	r3, [pc, #492]	@ (801f4b0 <_dtoa_r+0x8d0>)
 801f2c4:	2200      	movs	r2, #0
 801f2c6:	f7e1 f997 	bl	80005f8 <__aeabi_dmul>
 801f2ca:	2200      	movs	r2, #0
 801f2cc:	2300      	movs	r3, #0
 801f2ce:	4604      	mov	r4, r0
 801f2d0:	460d      	mov	r5, r1
 801f2d2:	f7e1 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 801f2d6:	2800      	cmp	r0, #0
 801f2d8:	f43f aebb 	beq.w	801f052 <_dtoa_r+0x472>
 801f2dc:	e6f0      	b.n	801f0c0 <_dtoa_r+0x4e0>
 801f2de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f2e0:	2a00      	cmp	r2, #0
 801f2e2:	f000 80db 	beq.w	801f49c <_dtoa_r+0x8bc>
 801f2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f2e8:	2a01      	cmp	r2, #1
 801f2ea:	f300 80bf 	bgt.w	801f46c <_dtoa_r+0x88c>
 801f2ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f2f0:	2a00      	cmp	r2, #0
 801f2f2:	f000 80b7 	beq.w	801f464 <_dtoa_r+0x884>
 801f2f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f2fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f2fc:	4646      	mov	r6, r8
 801f2fe:	9a08      	ldr	r2, [sp, #32]
 801f300:	2101      	movs	r1, #1
 801f302:	441a      	add	r2, r3
 801f304:	4658      	mov	r0, fp
 801f306:	4498      	add	r8, r3
 801f308:	9208      	str	r2, [sp, #32]
 801f30a:	f000 fbb5 	bl	801fa78 <__i2b>
 801f30e:	4605      	mov	r5, r0
 801f310:	b15e      	cbz	r6, 801f32a <_dtoa_r+0x74a>
 801f312:	9b08      	ldr	r3, [sp, #32]
 801f314:	2b00      	cmp	r3, #0
 801f316:	dd08      	ble.n	801f32a <_dtoa_r+0x74a>
 801f318:	42b3      	cmp	r3, r6
 801f31a:	9a08      	ldr	r2, [sp, #32]
 801f31c:	bfa8      	it	ge
 801f31e:	4633      	movge	r3, r6
 801f320:	eba8 0803 	sub.w	r8, r8, r3
 801f324:	1af6      	subs	r6, r6, r3
 801f326:	1ad3      	subs	r3, r2, r3
 801f328:	9308      	str	r3, [sp, #32]
 801f32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f32c:	b1f3      	cbz	r3, 801f36c <_dtoa_r+0x78c>
 801f32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f330:	2b00      	cmp	r3, #0
 801f332:	f000 80b7 	beq.w	801f4a4 <_dtoa_r+0x8c4>
 801f336:	b18c      	cbz	r4, 801f35c <_dtoa_r+0x77c>
 801f338:	4629      	mov	r1, r5
 801f33a:	4622      	mov	r2, r4
 801f33c:	4658      	mov	r0, fp
 801f33e:	f000 fc5b 	bl	801fbf8 <__pow5mult>
 801f342:	464a      	mov	r2, r9
 801f344:	4601      	mov	r1, r0
 801f346:	4605      	mov	r5, r0
 801f348:	4658      	mov	r0, fp
 801f34a:	f000 fbab 	bl	801faa4 <__multiply>
 801f34e:	4649      	mov	r1, r9
 801f350:	9004      	str	r0, [sp, #16]
 801f352:	4658      	mov	r0, fp
 801f354:	f000 fa92 	bl	801f87c <_Bfree>
 801f358:	9b04      	ldr	r3, [sp, #16]
 801f35a:	4699      	mov	r9, r3
 801f35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f35e:	1b1a      	subs	r2, r3, r4
 801f360:	d004      	beq.n	801f36c <_dtoa_r+0x78c>
 801f362:	4649      	mov	r1, r9
 801f364:	4658      	mov	r0, fp
 801f366:	f000 fc47 	bl	801fbf8 <__pow5mult>
 801f36a:	4681      	mov	r9, r0
 801f36c:	2101      	movs	r1, #1
 801f36e:	4658      	mov	r0, fp
 801f370:	f000 fb82 	bl	801fa78 <__i2b>
 801f374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f376:	4604      	mov	r4, r0
 801f378:	2b00      	cmp	r3, #0
 801f37a:	f000 81cf 	beq.w	801f71c <_dtoa_r+0xb3c>
 801f37e:	461a      	mov	r2, r3
 801f380:	4601      	mov	r1, r0
 801f382:	4658      	mov	r0, fp
 801f384:	f000 fc38 	bl	801fbf8 <__pow5mult>
 801f388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f38a:	2b01      	cmp	r3, #1
 801f38c:	4604      	mov	r4, r0
 801f38e:	f300 8095 	bgt.w	801f4bc <_dtoa_r+0x8dc>
 801f392:	9b02      	ldr	r3, [sp, #8]
 801f394:	2b00      	cmp	r3, #0
 801f396:	f040 8087 	bne.w	801f4a8 <_dtoa_r+0x8c8>
 801f39a:	9b03      	ldr	r3, [sp, #12]
 801f39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	f040 8089 	bne.w	801f4b8 <_dtoa_r+0x8d8>
 801f3a6:	9b03      	ldr	r3, [sp, #12]
 801f3a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f3ac:	0d1b      	lsrs	r3, r3, #20
 801f3ae:	051b      	lsls	r3, r3, #20
 801f3b0:	b12b      	cbz	r3, 801f3be <_dtoa_r+0x7de>
 801f3b2:	9b08      	ldr	r3, [sp, #32]
 801f3b4:	3301      	adds	r3, #1
 801f3b6:	9308      	str	r3, [sp, #32]
 801f3b8:	f108 0801 	add.w	r8, r8, #1
 801f3bc:	2301      	movs	r3, #1
 801f3be:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	f000 81b0 	beq.w	801f728 <_dtoa_r+0xb48>
 801f3c8:	6923      	ldr	r3, [r4, #16]
 801f3ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f3ce:	6918      	ldr	r0, [r3, #16]
 801f3d0:	f000 fb06 	bl	801f9e0 <__hi0bits>
 801f3d4:	f1c0 0020 	rsb	r0, r0, #32
 801f3d8:	9b08      	ldr	r3, [sp, #32]
 801f3da:	4418      	add	r0, r3
 801f3dc:	f010 001f 	ands.w	r0, r0, #31
 801f3e0:	d077      	beq.n	801f4d2 <_dtoa_r+0x8f2>
 801f3e2:	f1c0 0320 	rsb	r3, r0, #32
 801f3e6:	2b04      	cmp	r3, #4
 801f3e8:	dd6b      	ble.n	801f4c2 <_dtoa_r+0x8e2>
 801f3ea:	9b08      	ldr	r3, [sp, #32]
 801f3ec:	f1c0 001c 	rsb	r0, r0, #28
 801f3f0:	4403      	add	r3, r0
 801f3f2:	4480      	add	r8, r0
 801f3f4:	4406      	add	r6, r0
 801f3f6:	9308      	str	r3, [sp, #32]
 801f3f8:	f1b8 0f00 	cmp.w	r8, #0
 801f3fc:	dd05      	ble.n	801f40a <_dtoa_r+0x82a>
 801f3fe:	4649      	mov	r1, r9
 801f400:	4642      	mov	r2, r8
 801f402:	4658      	mov	r0, fp
 801f404:	f000 fc52 	bl	801fcac <__lshift>
 801f408:	4681      	mov	r9, r0
 801f40a:	9b08      	ldr	r3, [sp, #32]
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	dd05      	ble.n	801f41c <_dtoa_r+0x83c>
 801f410:	4621      	mov	r1, r4
 801f412:	461a      	mov	r2, r3
 801f414:	4658      	mov	r0, fp
 801f416:	f000 fc49 	bl	801fcac <__lshift>
 801f41a:	4604      	mov	r4, r0
 801f41c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d059      	beq.n	801f4d6 <_dtoa_r+0x8f6>
 801f422:	4621      	mov	r1, r4
 801f424:	4648      	mov	r0, r9
 801f426:	f000 fcad 	bl	801fd84 <__mcmp>
 801f42a:	2800      	cmp	r0, #0
 801f42c:	da53      	bge.n	801f4d6 <_dtoa_r+0x8f6>
 801f42e:	1e7b      	subs	r3, r7, #1
 801f430:	9304      	str	r3, [sp, #16]
 801f432:	4649      	mov	r1, r9
 801f434:	2300      	movs	r3, #0
 801f436:	220a      	movs	r2, #10
 801f438:	4658      	mov	r0, fp
 801f43a:	f000 fa41 	bl	801f8c0 <__multadd>
 801f43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f440:	4681      	mov	r9, r0
 801f442:	2b00      	cmp	r3, #0
 801f444:	f000 8172 	beq.w	801f72c <_dtoa_r+0xb4c>
 801f448:	2300      	movs	r3, #0
 801f44a:	4629      	mov	r1, r5
 801f44c:	220a      	movs	r2, #10
 801f44e:	4658      	mov	r0, fp
 801f450:	f000 fa36 	bl	801f8c0 <__multadd>
 801f454:	9b00      	ldr	r3, [sp, #0]
 801f456:	2b00      	cmp	r3, #0
 801f458:	4605      	mov	r5, r0
 801f45a:	dc67      	bgt.n	801f52c <_dtoa_r+0x94c>
 801f45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f45e:	2b02      	cmp	r3, #2
 801f460:	dc41      	bgt.n	801f4e6 <_dtoa_r+0x906>
 801f462:	e063      	b.n	801f52c <_dtoa_r+0x94c>
 801f464:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f46a:	e746      	b.n	801f2fa <_dtoa_r+0x71a>
 801f46c:	9b07      	ldr	r3, [sp, #28]
 801f46e:	1e5c      	subs	r4, r3, #1
 801f470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f472:	42a3      	cmp	r3, r4
 801f474:	bfbf      	itttt	lt
 801f476:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f478:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f47a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f47c:	1ae3      	sublt	r3, r4, r3
 801f47e:	bfb4      	ite	lt
 801f480:	18d2      	addlt	r2, r2, r3
 801f482:	1b1c      	subge	r4, r3, r4
 801f484:	9b07      	ldr	r3, [sp, #28]
 801f486:	bfbc      	itt	lt
 801f488:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f48a:	2400      	movlt	r4, #0
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	bfb5      	itete	lt
 801f490:	eba8 0603 	sublt.w	r6, r8, r3
 801f494:	9b07      	ldrge	r3, [sp, #28]
 801f496:	2300      	movlt	r3, #0
 801f498:	4646      	movge	r6, r8
 801f49a:	e730      	b.n	801f2fe <_dtoa_r+0x71e>
 801f49c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f49e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f4a0:	4646      	mov	r6, r8
 801f4a2:	e735      	b.n	801f310 <_dtoa_r+0x730>
 801f4a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f4a6:	e75c      	b.n	801f362 <_dtoa_r+0x782>
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	e788      	b.n	801f3be <_dtoa_r+0x7de>
 801f4ac:	3fe00000 	.word	0x3fe00000
 801f4b0:	40240000 	.word	0x40240000
 801f4b4:	40140000 	.word	0x40140000
 801f4b8:	9b02      	ldr	r3, [sp, #8]
 801f4ba:	e780      	b.n	801f3be <_dtoa_r+0x7de>
 801f4bc:	2300      	movs	r3, #0
 801f4be:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4c0:	e782      	b.n	801f3c8 <_dtoa_r+0x7e8>
 801f4c2:	d099      	beq.n	801f3f8 <_dtoa_r+0x818>
 801f4c4:	9a08      	ldr	r2, [sp, #32]
 801f4c6:	331c      	adds	r3, #28
 801f4c8:	441a      	add	r2, r3
 801f4ca:	4498      	add	r8, r3
 801f4cc:	441e      	add	r6, r3
 801f4ce:	9208      	str	r2, [sp, #32]
 801f4d0:	e792      	b.n	801f3f8 <_dtoa_r+0x818>
 801f4d2:	4603      	mov	r3, r0
 801f4d4:	e7f6      	b.n	801f4c4 <_dtoa_r+0x8e4>
 801f4d6:	9b07      	ldr	r3, [sp, #28]
 801f4d8:	9704      	str	r7, [sp, #16]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	dc20      	bgt.n	801f520 <_dtoa_r+0x940>
 801f4de:	9300      	str	r3, [sp, #0]
 801f4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4e2:	2b02      	cmp	r3, #2
 801f4e4:	dd1e      	ble.n	801f524 <_dtoa_r+0x944>
 801f4e6:	9b00      	ldr	r3, [sp, #0]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f47f aec0 	bne.w	801f26e <_dtoa_r+0x68e>
 801f4ee:	4621      	mov	r1, r4
 801f4f0:	2205      	movs	r2, #5
 801f4f2:	4658      	mov	r0, fp
 801f4f4:	f000 f9e4 	bl	801f8c0 <__multadd>
 801f4f8:	4601      	mov	r1, r0
 801f4fa:	4604      	mov	r4, r0
 801f4fc:	4648      	mov	r0, r9
 801f4fe:	f000 fc41 	bl	801fd84 <__mcmp>
 801f502:	2800      	cmp	r0, #0
 801f504:	f77f aeb3 	ble.w	801f26e <_dtoa_r+0x68e>
 801f508:	4656      	mov	r6, sl
 801f50a:	2331      	movs	r3, #49	@ 0x31
 801f50c:	f806 3b01 	strb.w	r3, [r6], #1
 801f510:	9b04      	ldr	r3, [sp, #16]
 801f512:	3301      	adds	r3, #1
 801f514:	9304      	str	r3, [sp, #16]
 801f516:	e6ae      	b.n	801f276 <_dtoa_r+0x696>
 801f518:	9c07      	ldr	r4, [sp, #28]
 801f51a:	9704      	str	r7, [sp, #16]
 801f51c:	4625      	mov	r5, r4
 801f51e:	e7f3      	b.n	801f508 <_dtoa_r+0x928>
 801f520:	9b07      	ldr	r3, [sp, #28]
 801f522:	9300      	str	r3, [sp, #0]
 801f524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f526:	2b00      	cmp	r3, #0
 801f528:	f000 8104 	beq.w	801f734 <_dtoa_r+0xb54>
 801f52c:	2e00      	cmp	r6, #0
 801f52e:	dd05      	ble.n	801f53c <_dtoa_r+0x95c>
 801f530:	4629      	mov	r1, r5
 801f532:	4632      	mov	r2, r6
 801f534:	4658      	mov	r0, fp
 801f536:	f000 fbb9 	bl	801fcac <__lshift>
 801f53a:	4605      	mov	r5, r0
 801f53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d05a      	beq.n	801f5f8 <_dtoa_r+0xa18>
 801f542:	6869      	ldr	r1, [r5, #4]
 801f544:	4658      	mov	r0, fp
 801f546:	f000 f959 	bl	801f7fc <_Balloc>
 801f54a:	4606      	mov	r6, r0
 801f54c:	b928      	cbnz	r0, 801f55a <_dtoa_r+0x97a>
 801f54e:	4b84      	ldr	r3, [pc, #528]	@ (801f760 <_dtoa_r+0xb80>)
 801f550:	4602      	mov	r2, r0
 801f552:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f556:	f7ff bb5a 	b.w	801ec0e <_dtoa_r+0x2e>
 801f55a:	692a      	ldr	r2, [r5, #16]
 801f55c:	3202      	adds	r2, #2
 801f55e:	0092      	lsls	r2, r2, #2
 801f560:	f105 010c 	add.w	r1, r5, #12
 801f564:	300c      	adds	r0, #12
 801f566:	f7ff fa7e 	bl	801ea66 <memcpy>
 801f56a:	2201      	movs	r2, #1
 801f56c:	4631      	mov	r1, r6
 801f56e:	4658      	mov	r0, fp
 801f570:	f000 fb9c 	bl	801fcac <__lshift>
 801f574:	f10a 0301 	add.w	r3, sl, #1
 801f578:	9307      	str	r3, [sp, #28]
 801f57a:	9b00      	ldr	r3, [sp, #0]
 801f57c:	4453      	add	r3, sl
 801f57e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f580:	9b02      	ldr	r3, [sp, #8]
 801f582:	f003 0301 	and.w	r3, r3, #1
 801f586:	462f      	mov	r7, r5
 801f588:	930a      	str	r3, [sp, #40]	@ 0x28
 801f58a:	4605      	mov	r5, r0
 801f58c:	9b07      	ldr	r3, [sp, #28]
 801f58e:	4621      	mov	r1, r4
 801f590:	3b01      	subs	r3, #1
 801f592:	4648      	mov	r0, r9
 801f594:	9300      	str	r3, [sp, #0]
 801f596:	f7ff fa99 	bl	801eacc <quorem>
 801f59a:	4639      	mov	r1, r7
 801f59c:	9002      	str	r0, [sp, #8]
 801f59e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f5a2:	4648      	mov	r0, r9
 801f5a4:	f000 fbee 	bl	801fd84 <__mcmp>
 801f5a8:	462a      	mov	r2, r5
 801f5aa:	9008      	str	r0, [sp, #32]
 801f5ac:	4621      	mov	r1, r4
 801f5ae:	4658      	mov	r0, fp
 801f5b0:	f000 fc04 	bl	801fdbc <__mdiff>
 801f5b4:	68c2      	ldr	r2, [r0, #12]
 801f5b6:	4606      	mov	r6, r0
 801f5b8:	bb02      	cbnz	r2, 801f5fc <_dtoa_r+0xa1c>
 801f5ba:	4601      	mov	r1, r0
 801f5bc:	4648      	mov	r0, r9
 801f5be:	f000 fbe1 	bl	801fd84 <__mcmp>
 801f5c2:	4602      	mov	r2, r0
 801f5c4:	4631      	mov	r1, r6
 801f5c6:	4658      	mov	r0, fp
 801f5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801f5ca:	f000 f957 	bl	801f87c <_Bfree>
 801f5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f5d2:	9e07      	ldr	r6, [sp, #28]
 801f5d4:	ea43 0102 	orr.w	r1, r3, r2
 801f5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f5da:	4319      	orrs	r1, r3
 801f5dc:	d110      	bne.n	801f600 <_dtoa_r+0xa20>
 801f5de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f5e2:	d029      	beq.n	801f638 <_dtoa_r+0xa58>
 801f5e4:	9b08      	ldr	r3, [sp, #32]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	dd02      	ble.n	801f5f0 <_dtoa_r+0xa10>
 801f5ea:	9b02      	ldr	r3, [sp, #8]
 801f5ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f5f0:	9b00      	ldr	r3, [sp, #0]
 801f5f2:	f883 8000 	strb.w	r8, [r3]
 801f5f6:	e63f      	b.n	801f278 <_dtoa_r+0x698>
 801f5f8:	4628      	mov	r0, r5
 801f5fa:	e7bb      	b.n	801f574 <_dtoa_r+0x994>
 801f5fc:	2201      	movs	r2, #1
 801f5fe:	e7e1      	b.n	801f5c4 <_dtoa_r+0x9e4>
 801f600:	9b08      	ldr	r3, [sp, #32]
 801f602:	2b00      	cmp	r3, #0
 801f604:	db04      	blt.n	801f610 <_dtoa_r+0xa30>
 801f606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f608:	430b      	orrs	r3, r1
 801f60a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f60c:	430b      	orrs	r3, r1
 801f60e:	d120      	bne.n	801f652 <_dtoa_r+0xa72>
 801f610:	2a00      	cmp	r2, #0
 801f612:	dded      	ble.n	801f5f0 <_dtoa_r+0xa10>
 801f614:	4649      	mov	r1, r9
 801f616:	2201      	movs	r2, #1
 801f618:	4658      	mov	r0, fp
 801f61a:	f000 fb47 	bl	801fcac <__lshift>
 801f61e:	4621      	mov	r1, r4
 801f620:	4681      	mov	r9, r0
 801f622:	f000 fbaf 	bl	801fd84 <__mcmp>
 801f626:	2800      	cmp	r0, #0
 801f628:	dc03      	bgt.n	801f632 <_dtoa_r+0xa52>
 801f62a:	d1e1      	bne.n	801f5f0 <_dtoa_r+0xa10>
 801f62c:	f018 0f01 	tst.w	r8, #1
 801f630:	d0de      	beq.n	801f5f0 <_dtoa_r+0xa10>
 801f632:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f636:	d1d8      	bne.n	801f5ea <_dtoa_r+0xa0a>
 801f638:	9a00      	ldr	r2, [sp, #0]
 801f63a:	2339      	movs	r3, #57	@ 0x39
 801f63c:	7013      	strb	r3, [r2, #0]
 801f63e:	4633      	mov	r3, r6
 801f640:	461e      	mov	r6, r3
 801f642:	3b01      	subs	r3, #1
 801f644:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f648:	2a39      	cmp	r2, #57	@ 0x39
 801f64a:	d052      	beq.n	801f6f2 <_dtoa_r+0xb12>
 801f64c:	3201      	adds	r2, #1
 801f64e:	701a      	strb	r2, [r3, #0]
 801f650:	e612      	b.n	801f278 <_dtoa_r+0x698>
 801f652:	2a00      	cmp	r2, #0
 801f654:	dd07      	ble.n	801f666 <_dtoa_r+0xa86>
 801f656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f65a:	d0ed      	beq.n	801f638 <_dtoa_r+0xa58>
 801f65c:	9a00      	ldr	r2, [sp, #0]
 801f65e:	f108 0301 	add.w	r3, r8, #1
 801f662:	7013      	strb	r3, [r2, #0]
 801f664:	e608      	b.n	801f278 <_dtoa_r+0x698>
 801f666:	9b07      	ldr	r3, [sp, #28]
 801f668:	9a07      	ldr	r2, [sp, #28]
 801f66a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f670:	4293      	cmp	r3, r2
 801f672:	d028      	beq.n	801f6c6 <_dtoa_r+0xae6>
 801f674:	4649      	mov	r1, r9
 801f676:	2300      	movs	r3, #0
 801f678:	220a      	movs	r2, #10
 801f67a:	4658      	mov	r0, fp
 801f67c:	f000 f920 	bl	801f8c0 <__multadd>
 801f680:	42af      	cmp	r7, r5
 801f682:	4681      	mov	r9, r0
 801f684:	f04f 0300 	mov.w	r3, #0
 801f688:	f04f 020a 	mov.w	r2, #10
 801f68c:	4639      	mov	r1, r7
 801f68e:	4658      	mov	r0, fp
 801f690:	d107      	bne.n	801f6a2 <_dtoa_r+0xac2>
 801f692:	f000 f915 	bl	801f8c0 <__multadd>
 801f696:	4607      	mov	r7, r0
 801f698:	4605      	mov	r5, r0
 801f69a:	9b07      	ldr	r3, [sp, #28]
 801f69c:	3301      	adds	r3, #1
 801f69e:	9307      	str	r3, [sp, #28]
 801f6a0:	e774      	b.n	801f58c <_dtoa_r+0x9ac>
 801f6a2:	f000 f90d 	bl	801f8c0 <__multadd>
 801f6a6:	4629      	mov	r1, r5
 801f6a8:	4607      	mov	r7, r0
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	220a      	movs	r2, #10
 801f6ae:	4658      	mov	r0, fp
 801f6b0:	f000 f906 	bl	801f8c0 <__multadd>
 801f6b4:	4605      	mov	r5, r0
 801f6b6:	e7f0      	b.n	801f69a <_dtoa_r+0xaba>
 801f6b8:	9b00      	ldr	r3, [sp, #0]
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	bfcc      	ite	gt
 801f6be:	461e      	movgt	r6, r3
 801f6c0:	2601      	movle	r6, #1
 801f6c2:	4456      	add	r6, sl
 801f6c4:	2700      	movs	r7, #0
 801f6c6:	4649      	mov	r1, r9
 801f6c8:	2201      	movs	r2, #1
 801f6ca:	4658      	mov	r0, fp
 801f6cc:	f000 faee 	bl	801fcac <__lshift>
 801f6d0:	4621      	mov	r1, r4
 801f6d2:	4681      	mov	r9, r0
 801f6d4:	f000 fb56 	bl	801fd84 <__mcmp>
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	dcb0      	bgt.n	801f63e <_dtoa_r+0xa5e>
 801f6dc:	d102      	bne.n	801f6e4 <_dtoa_r+0xb04>
 801f6de:	f018 0f01 	tst.w	r8, #1
 801f6e2:	d1ac      	bne.n	801f63e <_dtoa_r+0xa5e>
 801f6e4:	4633      	mov	r3, r6
 801f6e6:	461e      	mov	r6, r3
 801f6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f6ec:	2a30      	cmp	r2, #48	@ 0x30
 801f6ee:	d0fa      	beq.n	801f6e6 <_dtoa_r+0xb06>
 801f6f0:	e5c2      	b.n	801f278 <_dtoa_r+0x698>
 801f6f2:	459a      	cmp	sl, r3
 801f6f4:	d1a4      	bne.n	801f640 <_dtoa_r+0xa60>
 801f6f6:	9b04      	ldr	r3, [sp, #16]
 801f6f8:	3301      	adds	r3, #1
 801f6fa:	9304      	str	r3, [sp, #16]
 801f6fc:	2331      	movs	r3, #49	@ 0x31
 801f6fe:	f88a 3000 	strb.w	r3, [sl]
 801f702:	e5b9      	b.n	801f278 <_dtoa_r+0x698>
 801f704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f706:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f764 <_dtoa_r+0xb84>
 801f70a:	b11b      	cbz	r3, 801f714 <_dtoa_r+0xb34>
 801f70c:	f10a 0308 	add.w	r3, sl, #8
 801f710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f712:	6013      	str	r3, [r2, #0]
 801f714:	4650      	mov	r0, sl
 801f716:	b019      	add	sp, #100	@ 0x64
 801f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f71e:	2b01      	cmp	r3, #1
 801f720:	f77f ae37 	ble.w	801f392 <_dtoa_r+0x7b2>
 801f724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f726:	930a      	str	r3, [sp, #40]	@ 0x28
 801f728:	2001      	movs	r0, #1
 801f72a:	e655      	b.n	801f3d8 <_dtoa_r+0x7f8>
 801f72c:	9b00      	ldr	r3, [sp, #0]
 801f72e:	2b00      	cmp	r3, #0
 801f730:	f77f aed6 	ble.w	801f4e0 <_dtoa_r+0x900>
 801f734:	4656      	mov	r6, sl
 801f736:	4621      	mov	r1, r4
 801f738:	4648      	mov	r0, r9
 801f73a:	f7ff f9c7 	bl	801eacc <quorem>
 801f73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f742:	f806 8b01 	strb.w	r8, [r6], #1
 801f746:	9b00      	ldr	r3, [sp, #0]
 801f748:	eba6 020a 	sub.w	r2, r6, sl
 801f74c:	4293      	cmp	r3, r2
 801f74e:	ddb3      	ble.n	801f6b8 <_dtoa_r+0xad8>
 801f750:	4649      	mov	r1, r9
 801f752:	2300      	movs	r3, #0
 801f754:	220a      	movs	r2, #10
 801f756:	4658      	mov	r0, fp
 801f758:	f000 f8b2 	bl	801f8c0 <__multadd>
 801f75c:	4681      	mov	r9, r0
 801f75e:	e7ea      	b.n	801f736 <_dtoa_r+0xb56>
 801f760:	0802547c 	.word	0x0802547c
 801f764:	08025417 	.word	0x08025417

0801f768 <_free_r>:
 801f768:	b538      	push	{r3, r4, r5, lr}
 801f76a:	4605      	mov	r5, r0
 801f76c:	2900      	cmp	r1, #0
 801f76e:	d041      	beq.n	801f7f4 <_free_r+0x8c>
 801f770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f774:	1f0c      	subs	r4, r1, #4
 801f776:	2b00      	cmp	r3, #0
 801f778:	bfb8      	it	lt
 801f77a:	18e4      	addlt	r4, r4, r3
 801f77c:	f7fd fe04 	bl	801d388 <__malloc_lock>
 801f780:	4a1d      	ldr	r2, [pc, #116]	@ (801f7f8 <_free_r+0x90>)
 801f782:	6813      	ldr	r3, [r2, #0]
 801f784:	b933      	cbnz	r3, 801f794 <_free_r+0x2c>
 801f786:	6063      	str	r3, [r4, #4]
 801f788:	6014      	str	r4, [r2, #0]
 801f78a:	4628      	mov	r0, r5
 801f78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f790:	f7fd be00 	b.w	801d394 <__malloc_unlock>
 801f794:	42a3      	cmp	r3, r4
 801f796:	d908      	bls.n	801f7aa <_free_r+0x42>
 801f798:	6820      	ldr	r0, [r4, #0]
 801f79a:	1821      	adds	r1, r4, r0
 801f79c:	428b      	cmp	r3, r1
 801f79e:	bf01      	itttt	eq
 801f7a0:	6819      	ldreq	r1, [r3, #0]
 801f7a2:	685b      	ldreq	r3, [r3, #4]
 801f7a4:	1809      	addeq	r1, r1, r0
 801f7a6:	6021      	streq	r1, [r4, #0]
 801f7a8:	e7ed      	b.n	801f786 <_free_r+0x1e>
 801f7aa:	461a      	mov	r2, r3
 801f7ac:	685b      	ldr	r3, [r3, #4]
 801f7ae:	b10b      	cbz	r3, 801f7b4 <_free_r+0x4c>
 801f7b0:	42a3      	cmp	r3, r4
 801f7b2:	d9fa      	bls.n	801f7aa <_free_r+0x42>
 801f7b4:	6811      	ldr	r1, [r2, #0]
 801f7b6:	1850      	adds	r0, r2, r1
 801f7b8:	42a0      	cmp	r0, r4
 801f7ba:	d10b      	bne.n	801f7d4 <_free_r+0x6c>
 801f7bc:	6820      	ldr	r0, [r4, #0]
 801f7be:	4401      	add	r1, r0
 801f7c0:	1850      	adds	r0, r2, r1
 801f7c2:	4283      	cmp	r3, r0
 801f7c4:	6011      	str	r1, [r2, #0]
 801f7c6:	d1e0      	bne.n	801f78a <_free_r+0x22>
 801f7c8:	6818      	ldr	r0, [r3, #0]
 801f7ca:	685b      	ldr	r3, [r3, #4]
 801f7cc:	6053      	str	r3, [r2, #4]
 801f7ce:	4408      	add	r0, r1
 801f7d0:	6010      	str	r0, [r2, #0]
 801f7d2:	e7da      	b.n	801f78a <_free_r+0x22>
 801f7d4:	d902      	bls.n	801f7dc <_free_r+0x74>
 801f7d6:	230c      	movs	r3, #12
 801f7d8:	602b      	str	r3, [r5, #0]
 801f7da:	e7d6      	b.n	801f78a <_free_r+0x22>
 801f7dc:	6820      	ldr	r0, [r4, #0]
 801f7de:	1821      	adds	r1, r4, r0
 801f7e0:	428b      	cmp	r3, r1
 801f7e2:	bf04      	itt	eq
 801f7e4:	6819      	ldreq	r1, [r3, #0]
 801f7e6:	685b      	ldreq	r3, [r3, #4]
 801f7e8:	6063      	str	r3, [r4, #4]
 801f7ea:	bf04      	itt	eq
 801f7ec:	1809      	addeq	r1, r1, r0
 801f7ee:	6021      	streq	r1, [r4, #0]
 801f7f0:	6054      	str	r4, [r2, #4]
 801f7f2:	e7ca      	b.n	801f78a <_free_r+0x22>
 801f7f4:	bd38      	pop	{r3, r4, r5, pc}
 801f7f6:	bf00      	nop
 801f7f8:	200178fc 	.word	0x200178fc

0801f7fc <_Balloc>:
 801f7fc:	b570      	push	{r4, r5, r6, lr}
 801f7fe:	69c6      	ldr	r6, [r0, #28]
 801f800:	4604      	mov	r4, r0
 801f802:	460d      	mov	r5, r1
 801f804:	b976      	cbnz	r6, 801f824 <_Balloc+0x28>
 801f806:	2010      	movs	r0, #16
 801f808:	f7fd fd14 	bl	801d234 <malloc>
 801f80c:	4602      	mov	r2, r0
 801f80e:	61e0      	str	r0, [r4, #28]
 801f810:	b920      	cbnz	r0, 801f81c <_Balloc+0x20>
 801f812:	4b18      	ldr	r3, [pc, #96]	@ (801f874 <_Balloc+0x78>)
 801f814:	4818      	ldr	r0, [pc, #96]	@ (801f878 <_Balloc+0x7c>)
 801f816:	216b      	movs	r1, #107	@ 0x6b
 801f818:	f7ff f93a 	bl	801ea90 <__assert_func>
 801f81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f820:	6006      	str	r6, [r0, #0]
 801f822:	60c6      	str	r6, [r0, #12]
 801f824:	69e6      	ldr	r6, [r4, #28]
 801f826:	68f3      	ldr	r3, [r6, #12]
 801f828:	b183      	cbz	r3, 801f84c <_Balloc+0x50>
 801f82a:	69e3      	ldr	r3, [r4, #28]
 801f82c:	68db      	ldr	r3, [r3, #12]
 801f82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f832:	b9b8      	cbnz	r0, 801f864 <_Balloc+0x68>
 801f834:	2101      	movs	r1, #1
 801f836:	fa01 f605 	lsl.w	r6, r1, r5
 801f83a:	1d72      	adds	r2, r6, #5
 801f83c:	0092      	lsls	r2, r2, #2
 801f83e:	4620      	mov	r0, r4
 801f840:	f001 fdda 	bl	80213f8 <_calloc_r>
 801f844:	b160      	cbz	r0, 801f860 <_Balloc+0x64>
 801f846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f84a:	e00e      	b.n	801f86a <_Balloc+0x6e>
 801f84c:	2221      	movs	r2, #33	@ 0x21
 801f84e:	2104      	movs	r1, #4
 801f850:	4620      	mov	r0, r4
 801f852:	f001 fdd1 	bl	80213f8 <_calloc_r>
 801f856:	69e3      	ldr	r3, [r4, #28]
 801f858:	60f0      	str	r0, [r6, #12]
 801f85a:	68db      	ldr	r3, [r3, #12]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d1e4      	bne.n	801f82a <_Balloc+0x2e>
 801f860:	2000      	movs	r0, #0
 801f862:	bd70      	pop	{r4, r5, r6, pc}
 801f864:	6802      	ldr	r2, [r0, #0]
 801f866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f86a:	2300      	movs	r3, #0
 801f86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f870:	e7f7      	b.n	801f862 <_Balloc+0x66>
 801f872:	bf00      	nop
 801f874:	08025232 	.word	0x08025232
 801f878:	0802548d 	.word	0x0802548d

0801f87c <_Bfree>:
 801f87c:	b570      	push	{r4, r5, r6, lr}
 801f87e:	69c6      	ldr	r6, [r0, #28]
 801f880:	4605      	mov	r5, r0
 801f882:	460c      	mov	r4, r1
 801f884:	b976      	cbnz	r6, 801f8a4 <_Bfree+0x28>
 801f886:	2010      	movs	r0, #16
 801f888:	f7fd fcd4 	bl	801d234 <malloc>
 801f88c:	4602      	mov	r2, r0
 801f88e:	61e8      	str	r0, [r5, #28]
 801f890:	b920      	cbnz	r0, 801f89c <_Bfree+0x20>
 801f892:	4b09      	ldr	r3, [pc, #36]	@ (801f8b8 <_Bfree+0x3c>)
 801f894:	4809      	ldr	r0, [pc, #36]	@ (801f8bc <_Bfree+0x40>)
 801f896:	218f      	movs	r1, #143	@ 0x8f
 801f898:	f7ff f8fa 	bl	801ea90 <__assert_func>
 801f89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f8a0:	6006      	str	r6, [r0, #0]
 801f8a2:	60c6      	str	r6, [r0, #12]
 801f8a4:	b13c      	cbz	r4, 801f8b6 <_Bfree+0x3a>
 801f8a6:	69eb      	ldr	r3, [r5, #28]
 801f8a8:	6862      	ldr	r2, [r4, #4]
 801f8aa:	68db      	ldr	r3, [r3, #12]
 801f8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f8b0:	6021      	str	r1, [r4, #0]
 801f8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f8b6:	bd70      	pop	{r4, r5, r6, pc}
 801f8b8:	08025232 	.word	0x08025232
 801f8bc:	0802548d 	.word	0x0802548d

0801f8c0 <__multadd>:
 801f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8c4:	690d      	ldr	r5, [r1, #16]
 801f8c6:	4607      	mov	r7, r0
 801f8c8:	460c      	mov	r4, r1
 801f8ca:	461e      	mov	r6, r3
 801f8cc:	f101 0c14 	add.w	ip, r1, #20
 801f8d0:	2000      	movs	r0, #0
 801f8d2:	f8dc 3000 	ldr.w	r3, [ip]
 801f8d6:	b299      	uxth	r1, r3
 801f8d8:	fb02 6101 	mla	r1, r2, r1, r6
 801f8dc:	0c1e      	lsrs	r6, r3, #16
 801f8de:	0c0b      	lsrs	r3, r1, #16
 801f8e0:	fb02 3306 	mla	r3, r2, r6, r3
 801f8e4:	b289      	uxth	r1, r1
 801f8e6:	3001      	adds	r0, #1
 801f8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f8ec:	4285      	cmp	r5, r0
 801f8ee:	f84c 1b04 	str.w	r1, [ip], #4
 801f8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f8f6:	dcec      	bgt.n	801f8d2 <__multadd+0x12>
 801f8f8:	b30e      	cbz	r6, 801f93e <__multadd+0x7e>
 801f8fa:	68a3      	ldr	r3, [r4, #8]
 801f8fc:	42ab      	cmp	r3, r5
 801f8fe:	dc19      	bgt.n	801f934 <__multadd+0x74>
 801f900:	6861      	ldr	r1, [r4, #4]
 801f902:	4638      	mov	r0, r7
 801f904:	3101      	adds	r1, #1
 801f906:	f7ff ff79 	bl	801f7fc <_Balloc>
 801f90a:	4680      	mov	r8, r0
 801f90c:	b928      	cbnz	r0, 801f91a <__multadd+0x5a>
 801f90e:	4602      	mov	r2, r0
 801f910:	4b0c      	ldr	r3, [pc, #48]	@ (801f944 <__multadd+0x84>)
 801f912:	480d      	ldr	r0, [pc, #52]	@ (801f948 <__multadd+0x88>)
 801f914:	21ba      	movs	r1, #186	@ 0xba
 801f916:	f7ff f8bb 	bl	801ea90 <__assert_func>
 801f91a:	6922      	ldr	r2, [r4, #16]
 801f91c:	3202      	adds	r2, #2
 801f91e:	f104 010c 	add.w	r1, r4, #12
 801f922:	0092      	lsls	r2, r2, #2
 801f924:	300c      	adds	r0, #12
 801f926:	f7ff f89e 	bl	801ea66 <memcpy>
 801f92a:	4621      	mov	r1, r4
 801f92c:	4638      	mov	r0, r7
 801f92e:	f7ff ffa5 	bl	801f87c <_Bfree>
 801f932:	4644      	mov	r4, r8
 801f934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f938:	3501      	adds	r5, #1
 801f93a:	615e      	str	r6, [r3, #20]
 801f93c:	6125      	str	r5, [r4, #16]
 801f93e:	4620      	mov	r0, r4
 801f940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f944:	0802547c 	.word	0x0802547c
 801f948:	0802548d 	.word	0x0802548d

0801f94c <__s2b>:
 801f94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f950:	460c      	mov	r4, r1
 801f952:	4615      	mov	r5, r2
 801f954:	461f      	mov	r7, r3
 801f956:	2209      	movs	r2, #9
 801f958:	3308      	adds	r3, #8
 801f95a:	4606      	mov	r6, r0
 801f95c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f960:	2100      	movs	r1, #0
 801f962:	2201      	movs	r2, #1
 801f964:	429a      	cmp	r2, r3
 801f966:	db09      	blt.n	801f97c <__s2b+0x30>
 801f968:	4630      	mov	r0, r6
 801f96a:	f7ff ff47 	bl	801f7fc <_Balloc>
 801f96e:	b940      	cbnz	r0, 801f982 <__s2b+0x36>
 801f970:	4602      	mov	r2, r0
 801f972:	4b19      	ldr	r3, [pc, #100]	@ (801f9d8 <__s2b+0x8c>)
 801f974:	4819      	ldr	r0, [pc, #100]	@ (801f9dc <__s2b+0x90>)
 801f976:	21d3      	movs	r1, #211	@ 0xd3
 801f978:	f7ff f88a 	bl	801ea90 <__assert_func>
 801f97c:	0052      	lsls	r2, r2, #1
 801f97e:	3101      	adds	r1, #1
 801f980:	e7f0      	b.n	801f964 <__s2b+0x18>
 801f982:	9b08      	ldr	r3, [sp, #32]
 801f984:	6143      	str	r3, [r0, #20]
 801f986:	2d09      	cmp	r5, #9
 801f988:	f04f 0301 	mov.w	r3, #1
 801f98c:	6103      	str	r3, [r0, #16]
 801f98e:	dd16      	ble.n	801f9be <__s2b+0x72>
 801f990:	f104 0909 	add.w	r9, r4, #9
 801f994:	46c8      	mov	r8, r9
 801f996:	442c      	add	r4, r5
 801f998:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f99c:	4601      	mov	r1, r0
 801f99e:	3b30      	subs	r3, #48	@ 0x30
 801f9a0:	220a      	movs	r2, #10
 801f9a2:	4630      	mov	r0, r6
 801f9a4:	f7ff ff8c 	bl	801f8c0 <__multadd>
 801f9a8:	45a0      	cmp	r8, r4
 801f9aa:	d1f5      	bne.n	801f998 <__s2b+0x4c>
 801f9ac:	f1a5 0408 	sub.w	r4, r5, #8
 801f9b0:	444c      	add	r4, r9
 801f9b2:	1b2d      	subs	r5, r5, r4
 801f9b4:	1963      	adds	r3, r4, r5
 801f9b6:	42bb      	cmp	r3, r7
 801f9b8:	db04      	blt.n	801f9c4 <__s2b+0x78>
 801f9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9be:	340a      	adds	r4, #10
 801f9c0:	2509      	movs	r5, #9
 801f9c2:	e7f6      	b.n	801f9b2 <__s2b+0x66>
 801f9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f9c8:	4601      	mov	r1, r0
 801f9ca:	3b30      	subs	r3, #48	@ 0x30
 801f9cc:	220a      	movs	r2, #10
 801f9ce:	4630      	mov	r0, r6
 801f9d0:	f7ff ff76 	bl	801f8c0 <__multadd>
 801f9d4:	e7ee      	b.n	801f9b4 <__s2b+0x68>
 801f9d6:	bf00      	nop
 801f9d8:	0802547c 	.word	0x0802547c
 801f9dc:	0802548d 	.word	0x0802548d

0801f9e0 <__hi0bits>:
 801f9e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f9e4:	4603      	mov	r3, r0
 801f9e6:	bf36      	itet	cc
 801f9e8:	0403      	lslcc	r3, r0, #16
 801f9ea:	2000      	movcs	r0, #0
 801f9ec:	2010      	movcc	r0, #16
 801f9ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f9f2:	bf3c      	itt	cc
 801f9f4:	021b      	lslcc	r3, r3, #8
 801f9f6:	3008      	addcc	r0, #8
 801f9f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f9fc:	bf3c      	itt	cc
 801f9fe:	011b      	lslcc	r3, r3, #4
 801fa00:	3004      	addcc	r0, #4
 801fa02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fa06:	bf3c      	itt	cc
 801fa08:	009b      	lslcc	r3, r3, #2
 801fa0a:	3002      	addcc	r0, #2
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	db05      	blt.n	801fa1c <__hi0bits+0x3c>
 801fa10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801fa14:	f100 0001 	add.w	r0, r0, #1
 801fa18:	bf08      	it	eq
 801fa1a:	2020      	moveq	r0, #32
 801fa1c:	4770      	bx	lr

0801fa1e <__lo0bits>:
 801fa1e:	6803      	ldr	r3, [r0, #0]
 801fa20:	4602      	mov	r2, r0
 801fa22:	f013 0007 	ands.w	r0, r3, #7
 801fa26:	d00b      	beq.n	801fa40 <__lo0bits+0x22>
 801fa28:	07d9      	lsls	r1, r3, #31
 801fa2a:	d421      	bmi.n	801fa70 <__lo0bits+0x52>
 801fa2c:	0798      	lsls	r0, r3, #30
 801fa2e:	bf49      	itett	mi
 801fa30:	085b      	lsrmi	r3, r3, #1
 801fa32:	089b      	lsrpl	r3, r3, #2
 801fa34:	2001      	movmi	r0, #1
 801fa36:	6013      	strmi	r3, [r2, #0]
 801fa38:	bf5c      	itt	pl
 801fa3a:	6013      	strpl	r3, [r2, #0]
 801fa3c:	2002      	movpl	r0, #2
 801fa3e:	4770      	bx	lr
 801fa40:	b299      	uxth	r1, r3
 801fa42:	b909      	cbnz	r1, 801fa48 <__lo0bits+0x2a>
 801fa44:	0c1b      	lsrs	r3, r3, #16
 801fa46:	2010      	movs	r0, #16
 801fa48:	b2d9      	uxtb	r1, r3
 801fa4a:	b909      	cbnz	r1, 801fa50 <__lo0bits+0x32>
 801fa4c:	3008      	adds	r0, #8
 801fa4e:	0a1b      	lsrs	r3, r3, #8
 801fa50:	0719      	lsls	r1, r3, #28
 801fa52:	bf04      	itt	eq
 801fa54:	091b      	lsreq	r3, r3, #4
 801fa56:	3004      	addeq	r0, #4
 801fa58:	0799      	lsls	r1, r3, #30
 801fa5a:	bf04      	itt	eq
 801fa5c:	089b      	lsreq	r3, r3, #2
 801fa5e:	3002      	addeq	r0, #2
 801fa60:	07d9      	lsls	r1, r3, #31
 801fa62:	d403      	bmi.n	801fa6c <__lo0bits+0x4e>
 801fa64:	085b      	lsrs	r3, r3, #1
 801fa66:	f100 0001 	add.w	r0, r0, #1
 801fa6a:	d003      	beq.n	801fa74 <__lo0bits+0x56>
 801fa6c:	6013      	str	r3, [r2, #0]
 801fa6e:	4770      	bx	lr
 801fa70:	2000      	movs	r0, #0
 801fa72:	4770      	bx	lr
 801fa74:	2020      	movs	r0, #32
 801fa76:	4770      	bx	lr

0801fa78 <__i2b>:
 801fa78:	b510      	push	{r4, lr}
 801fa7a:	460c      	mov	r4, r1
 801fa7c:	2101      	movs	r1, #1
 801fa7e:	f7ff febd 	bl	801f7fc <_Balloc>
 801fa82:	4602      	mov	r2, r0
 801fa84:	b928      	cbnz	r0, 801fa92 <__i2b+0x1a>
 801fa86:	4b05      	ldr	r3, [pc, #20]	@ (801fa9c <__i2b+0x24>)
 801fa88:	4805      	ldr	r0, [pc, #20]	@ (801faa0 <__i2b+0x28>)
 801fa8a:	f240 1145 	movw	r1, #325	@ 0x145
 801fa8e:	f7fe ffff 	bl	801ea90 <__assert_func>
 801fa92:	2301      	movs	r3, #1
 801fa94:	6144      	str	r4, [r0, #20]
 801fa96:	6103      	str	r3, [r0, #16]
 801fa98:	bd10      	pop	{r4, pc}
 801fa9a:	bf00      	nop
 801fa9c:	0802547c 	.word	0x0802547c
 801faa0:	0802548d 	.word	0x0802548d

0801faa4 <__multiply>:
 801faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa8:	4614      	mov	r4, r2
 801faaa:	690a      	ldr	r2, [r1, #16]
 801faac:	6923      	ldr	r3, [r4, #16]
 801faae:	429a      	cmp	r2, r3
 801fab0:	bfa8      	it	ge
 801fab2:	4623      	movge	r3, r4
 801fab4:	460f      	mov	r7, r1
 801fab6:	bfa4      	itt	ge
 801fab8:	460c      	movge	r4, r1
 801faba:	461f      	movge	r7, r3
 801fabc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801fac0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801fac4:	68a3      	ldr	r3, [r4, #8]
 801fac6:	6861      	ldr	r1, [r4, #4]
 801fac8:	eb0a 0609 	add.w	r6, sl, r9
 801facc:	42b3      	cmp	r3, r6
 801face:	b085      	sub	sp, #20
 801fad0:	bfb8      	it	lt
 801fad2:	3101      	addlt	r1, #1
 801fad4:	f7ff fe92 	bl	801f7fc <_Balloc>
 801fad8:	b930      	cbnz	r0, 801fae8 <__multiply+0x44>
 801fada:	4602      	mov	r2, r0
 801fadc:	4b44      	ldr	r3, [pc, #272]	@ (801fbf0 <__multiply+0x14c>)
 801fade:	4845      	ldr	r0, [pc, #276]	@ (801fbf4 <__multiply+0x150>)
 801fae0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801fae4:	f7fe ffd4 	bl	801ea90 <__assert_func>
 801fae8:	f100 0514 	add.w	r5, r0, #20
 801faec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801faf0:	462b      	mov	r3, r5
 801faf2:	2200      	movs	r2, #0
 801faf4:	4543      	cmp	r3, r8
 801faf6:	d321      	bcc.n	801fb3c <__multiply+0x98>
 801faf8:	f107 0114 	add.w	r1, r7, #20
 801fafc:	f104 0214 	add.w	r2, r4, #20
 801fb00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801fb04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801fb08:	9302      	str	r3, [sp, #8]
 801fb0a:	1b13      	subs	r3, r2, r4
 801fb0c:	3b15      	subs	r3, #21
 801fb0e:	f023 0303 	bic.w	r3, r3, #3
 801fb12:	3304      	adds	r3, #4
 801fb14:	f104 0715 	add.w	r7, r4, #21
 801fb18:	42ba      	cmp	r2, r7
 801fb1a:	bf38      	it	cc
 801fb1c:	2304      	movcc	r3, #4
 801fb1e:	9301      	str	r3, [sp, #4]
 801fb20:	9b02      	ldr	r3, [sp, #8]
 801fb22:	9103      	str	r1, [sp, #12]
 801fb24:	428b      	cmp	r3, r1
 801fb26:	d80c      	bhi.n	801fb42 <__multiply+0x9e>
 801fb28:	2e00      	cmp	r6, #0
 801fb2a:	dd03      	ble.n	801fb34 <__multiply+0x90>
 801fb2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d05b      	beq.n	801fbec <__multiply+0x148>
 801fb34:	6106      	str	r6, [r0, #16]
 801fb36:	b005      	add	sp, #20
 801fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb3c:	f843 2b04 	str.w	r2, [r3], #4
 801fb40:	e7d8      	b.n	801faf4 <__multiply+0x50>
 801fb42:	f8b1 a000 	ldrh.w	sl, [r1]
 801fb46:	f1ba 0f00 	cmp.w	sl, #0
 801fb4a:	d024      	beq.n	801fb96 <__multiply+0xf2>
 801fb4c:	f104 0e14 	add.w	lr, r4, #20
 801fb50:	46a9      	mov	r9, r5
 801fb52:	f04f 0c00 	mov.w	ip, #0
 801fb56:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fb5a:	f8d9 3000 	ldr.w	r3, [r9]
 801fb5e:	fa1f fb87 	uxth.w	fp, r7
 801fb62:	b29b      	uxth	r3, r3
 801fb64:	fb0a 330b 	mla	r3, sl, fp, r3
 801fb68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801fb6c:	f8d9 7000 	ldr.w	r7, [r9]
 801fb70:	4463      	add	r3, ip
 801fb72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fb76:	fb0a c70b 	mla	r7, sl, fp, ip
 801fb7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801fb7e:	b29b      	uxth	r3, r3
 801fb80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fb84:	4572      	cmp	r2, lr
 801fb86:	f849 3b04 	str.w	r3, [r9], #4
 801fb8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fb8e:	d8e2      	bhi.n	801fb56 <__multiply+0xb2>
 801fb90:	9b01      	ldr	r3, [sp, #4]
 801fb92:	f845 c003 	str.w	ip, [r5, r3]
 801fb96:	9b03      	ldr	r3, [sp, #12]
 801fb98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801fb9c:	3104      	adds	r1, #4
 801fb9e:	f1b9 0f00 	cmp.w	r9, #0
 801fba2:	d021      	beq.n	801fbe8 <__multiply+0x144>
 801fba4:	682b      	ldr	r3, [r5, #0]
 801fba6:	f104 0c14 	add.w	ip, r4, #20
 801fbaa:	46ae      	mov	lr, r5
 801fbac:	f04f 0a00 	mov.w	sl, #0
 801fbb0:	f8bc b000 	ldrh.w	fp, [ip]
 801fbb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801fbb8:	fb09 770b 	mla	r7, r9, fp, r7
 801fbbc:	4457      	add	r7, sl
 801fbbe:	b29b      	uxth	r3, r3
 801fbc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fbc4:	f84e 3b04 	str.w	r3, [lr], #4
 801fbc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801fbcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fbd0:	f8be 3000 	ldrh.w	r3, [lr]
 801fbd4:	fb09 330a 	mla	r3, r9, sl, r3
 801fbd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801fbdc:	4562      	cmp	r2, ip
 801fbde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fbe2:	d8e5      	bhi.n	801fbb0 <__multiply+0x10c>
 801fbe4:	9f01      	ldr	r7, [sp, #4]
 801fbe6:	51eb      	str	r3, [r5, r7]
 801fbe8:	3504      	adds	r5, #4
 801fbea:	e799      	b.n	801fb20 <__multiply+0x7c>
 801fbec:	3e01      	subs	r6, #1
 801fbee:	e79b      	b.n	801fb28 <__multiply+0x84>
 801fbf0:	0802547c 	.word	0x0802547c
 801fbf4:	0802548d 	.word	0x0802548d

0801fbf8 <__pow5mult>:
 801fbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbfc:	4615      	mov	r5, r2
 801fbfe:	f012 0203 	ands.w	r2, r2, #3
 801fc02:	4607      	mov	r7, r0
 801fc04:	460e      	mov	r6, r1
 801fc06:	d007      	beq.n	801fc18 <__pow5mult+0x20>
 801fc08:	4c25      	ldr	r4, [pc, #148]	@ (801fca0 <__pow5mult+0xa8>)
 801fc0a:	3a01      	subs	r2, #1
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fc12:	f7ff fe55 	bl	801f8c0 <__multadd>
 801fc16:	4606      	mov	r6, r0
 801fc18:	10ad      	asrs	r5, r5, #2
 801fc1a:	d03d      	beq.n	801fc98 <__pow5mult+0xa0>
 801fc1c:	69fc      	ldr	r4, [r7, #28]
 801fc1e:	b97c      	cbnz	r4, 801fc40 <__pow5mult+0x48>
 801fc20:	2010      	movs	r0, #16
 801fc22:	f7fd fb07 	bl	801d234 <malloc>
 801fc26:	4602      	mov	r2, r0
 801fc28:	61f8      	str	r0, [r7, #28]
 801fc2a:	b928      	cbnz	r0, 801fc38 <__pow5mult+0x40>
 801fc2c:	4b1d      	ldr	r3, [pc, #116]	@ (801fca4 <__pow5mult+0xac>)
 801fc2e:	481e      	ldr	r0, [pc, #120]	@ (801fca8 <__pow5mult+0xb0>)
 801fc30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801fc34:	f7fe ff2c 	bl	801ea90 <__assert_func>
 801fc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fc3c:	6004      	str	r4, [r0, #0]
 801fc3e:	60c4      	str	r4, [r0, #12]
 801fc40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801fc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fc48:	b94c      	cbnz	r4, 801fc5e <__pow5mult+0x66>
 801fc4a:	f240 2171 	movw	r1, #625	@ 0x271
 801fc4e:	4638      	mov	r0, r7
 801fc50:	f7ff ff12 	bl	801fa78 <__i2b>
 801fc54:	2300      	movs	r3, #0
 801fc56:	f8c8 0008 	str.w	r0, [r8, #8]
 801fc5a:	4604      	mov	r4, r0
 801fc5c:	6003      	str	r3, [r0, #0]
 801fc5e:	f04f 0900 	mov.w	r9, #0
 801fc62:	07eb      	lsls	r3, r5, #31
 801fc64:	d50a      	bpl.n	801fc7c <__pow5mult+0x84>
 801fc66:	4631      	mov	r1, r6
 801fc68:	4622      	mov	r2, r4
 801fc6a:	4638      	mov	r0, r7
 801fc6c:	f7ff ff1a 	bl	801faa4 <__multiply>
 801fc70:	4631      	mov	r1, r6
 801fc72:	4680      	mov	r8, r0
 801fc74:	4638      	mov	r0, r7
 801fc76:	f7ff fe01 	bl	801f87c <_Bfree>
 801fc7a:	4646      	mov	r6, r8
 801fc7c:	106d      	asrs	r5, r5, #1
 801fc7e:	d00b      	beq.n	801fc98 <__pow5mult+0xa0>
 801fc80:	6820      	ldr	r0, [r4, #0]
 801fc82:	b938      	cbnz	r0, 801fc94 <__pow5mult+0x9c>
 801fc84:	4622      	mov	r2, r4
 801fc86:	4621      	mov	r1, r4
 801fc88:	4638      	mov	r0, r7
 801fc8a:	f7ff ff0b 	bl	801faa4 <__multiply>
 801fc8e:	6020      	str	r0, [r4, #0]
 801fc90:	f8c0 9000 	str.w	r9, [r0]
 801fc94:	4604      	mov	r4, r0
 801fc96:	e7e4      	b.n	801fc62 <__pow5mult+0x6a>
 801fc98:	4630      	mov	r0, r6
 801fc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc9e:	bf00      	nop
 801fca0:	080254e8 	.word	0x080254e8
 801fca4:	08025232 	.word	0x08025232
 801fca8:	0802548d 	.word	0x0802548d

0801fcac <__lshift>:
 801fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fcb0:	460c      	mov	r4, r1
 801fcb2:	6849      	ldr	r1, [r1, #4]
 801fcb4:	6923      	ldr	r3, [r4, #16]
 801fcb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fcba:	68a3      	ldr	r3, [r4, #8]
 801fcbc:	4607      	mov	r7, r0
 801fcbe:	4691      	mov	r9, r2
 801fcc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fcc4:	f108 0601 	add.w	r6, r8, #1
 801fcc8:	42b3      	cmp	r3, r6
 801fcca:	db0b      	blt.n	801fce4 <__lshift+0x38>
 801fccc:	4638      	mov	r0, r7
 801fcce:	f7ff fd95 	bl	801f7fc <_Balloc>
 801fcd2:	4605      	mov	r5, r0
 801fcd4:	b948      	cbnz	r0, 801fcea <__lshift+0x3e>
 801fcd6:	4602      	mov	r2, r0
 801fcd8:	4b28      	ldr	r3, [pc, #160]	@ (801fd7c <__lshift+0xd0>)
 801fcda:	4829      	ldr	r0, [pc, #164]	@ (801fd80 <__lshift+0xd4>)
 801fcdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801fce0:	f7fe fed6 	bl	801ea90 <__assert_func>
 801fce4:	3101      	adds	r1, #1
 801fce6:	005b      	lsls	r3, r3, #1
 801fce8:	e7ee      	b.n	801fcc8 <__lshift+0x1c>
 801fcea:	2300      	movs	r3, #0
 801fcec:	f100 0114 	add.w	r1, r0, #20
 801fcf0:	f100 0210 	add.w	r2, r0, #16
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	4553      	cmp	r3, sl
 801fcf8:	db33      	blt.n	801fd62 <__lshift+0xb6>
 801fcfa:	6920      	ldr	r0, [r4, #16]
 801fcfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fd00:	f104 0314 	add.w	r3, r4, #20
 801fd04:	f019 091f 	ands.w	r9, r9, #31
 801fd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fd0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fd10:	d02b      	beq.n	801fd6a <__lshift+0xbe>
 801fd12:	f1c9 0e20 	rsb	lr, r9, #32
 801fd16:	468a      	mov	sl, r1
 801fd18:	2200      	movs	r2, #0
 801fd1a:	6818      	ldr	r0, [r3, #0]
 801fd1c:	fa00 f009 	lsl.w	r0, r0, r9
 801fd20:	4310      	orrs	r0, r2
 801fd22:	f84a 0b04 	str.w	r0, [sl], #4
 801fd26:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd2a:	459c      	cmp	ip, r3
 801fd2c:	fa22 f20e 	lsr.w	r2, r2, lr
 801fd30:	d8f3      	bhi.n	801fd1a <__lshift+0x6e>
 801fd32:	ebac 0304 	sub.w	r3, ip, r4
 801fd36:	3b15      	subs	r3, #21
 801fd38:	f023 0303 	bic.w	r3, r3, #3
 801fd3c:	3304      	adds	r3, #4
 801fd3e:	f104 0015 	add.w	r0, r4, #21
 801fd42:	4584      	cmp	ip, r0
 801fd44:	bf38      	it	cc
 801fd46:	2304      	movcc	r3, #4
 801fd48:	50ca      	str	r2, [r1, r3]
 801fd4a:	b10a      	cbz	r2, 801fd50 <__lshift+0xa4>
 801fd4c:	f108 0602 	add.w	r6, r8, #2
 801fd50:	3e01      	subs	r6, #1
 801fd52:	4638      	mov	r0, r7
 801fd54:	612e      	str	r6, [r5, #16]
 801fd56:	4621      	mov	r1, r4
 801fd58:	f7ff fd90 	bl	801f87c <_Bfree>
 801fd5c:	4628      	mov	r0, r5
 801fd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd62:	f842 0f04 	str.w	r0, [r2, #4]!
 801fd66:	3301      	adds	r3, #1
 801fd68:	e7c5      	b.n	801fcf6 <__lshift+0x4a>
 801fd6a:	3904      	subs	r1, #4
 801fd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd70:	f841 2f04 	str.w	r2, [r1, #4]!
 801fd74:	459c      	cmp	ip, r3
 801fd76:	d8f9      	bhi.n	801fd6c <__lshift+0xc0>
 801fd78:	e7ea      	b.n	801fd50 <__lshift+0xa4>
 801fd7a:	bf00      	nop
 801fd7c:	0802547c 	.word	0x0802547c
 801fd80:	0802548d 	.word	0x0802548d

0801fd84 <__mcmp>:
 801fd84:	690a      	ldr	r2, [r1, #16]
 801fd86:	4603      	mov	r3, r0
 801fd88:	6900      	ldr	r0, [r0, #16]
 801fd8a:	1a80      	subs	r0, r0, r2
 801fd8c:	b530      	push	{r4, r5, lr}
 801fd8e:	d10e      	bne.n	801fdae <__mcmp+0x2a>
 801fd90:	3314      	adds	r3, #20
 801fd92:	3114      	adds	r1, #20
 801fd94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801fd98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fd9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fda0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fda4:	4295      	cmp	r5, r2
 801fda6:	d003      	beq.n	801fdb0 <__mcmp+0x2c>
 801fda8:	d205      	bcs.n	801fdb6 <__mcmp+0x32>
 801fdaa:	f04f 30ff 	mov.w	r0, #4294967295
 801fdae:	bd30      	pop	{r4, r5, pc}
 801fdb0:	42a3      	cmp	r3, r4
 801fdb2:	d3f3      	bcc.n	801fd9c <__mcmp+0x18>
 801fdb4:	e7fb      	b.n	801fdae <__mcmp+0x2a>
 801fdb6:	2001      	movs	r0, #1
 801fdb8:	e7f9      	b.n	801fdae <__mcmp+0x2a>
	...

0801fdbc <__mdiff>:
 801fdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc0:	4689      	mov	r9, r1
 801fdc2:	4606      	mov	r6, r0
 801fdc4:	4611      	mov	r1, r2
 801fdc6:	4648      	mov	r0, r9
 801fdc8:	4614      	mov	r4, r2
 801fdca:	f7ff ffdb 	bl	801fd84 <__mcmp>
 801fdce:	1e05      	subs	r5, r0, #0
 801fdd0:	d112      	bne.n	801fdf8 <__mdiff+0x3c>
 801fdd2:	4629      	mov	r1, r5
 801fdd4:	4630      	mov	r0, r6
 801fdd6:	f7ff fd11 	bl	801f7fc <_Balloc>
 801fdda:	4602      	mov	r2, r0
 801fddc:	b928      	cbnz	r0, 801fdea <__mdiff+0x2e>
 801fdde:	4b3f      	ldr	r3, [pc, #252]	@ (801fedc <__mdiff+0x120>)
 801fde0:	f240 2137 	movw	r1, #567	@ 0x237
 801fde4:	483e      	ldr	r0, [pc, #248]	@ (801fee0 <__mdiff+0x124>)
 801fde6:	f7fe fe53 	bl	801ea90 <__assert_func>
 801fdea:	2301      	movs	r3, #1
 801fdec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fdf0:	4610      	mov	r0, r2
 801fdf2:	b003      	add	sp, #12
 801fdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdf8:	bfbc      	itt	lt
 801fdfa:	464b      	movlt	r3, r9
 801fdfc:	46a1      	movlt	r9, r4
 801fdfe:	4630      	mov	r0, r6
 801fe00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fe04:	bfba      	itte	lt
 801fe06:	461c      	movlt	r4, r3
 801fe08:	2501      	movlt	r5, #1
 801fe0a:	2500      	movge	r5, #0
 801fe0c:	f7ff fcf6 	bl	801f7fc <_Balloc>
 801fe10:	4602      	mov	r2, r0
 801fe12:	b918      	cbnz	r0, 801fe1c <__mdiff+0x60>
 801fe14:	4b31      	ldr	r3, [pc, #196]	@ (801fedc <__mdiff+0x120>)
 801fe16:	f240 2145 	movw	r1, #581	@ 0x245
 801fe1a:	e7e3      	b.n	801fde4 <__mdiff+0x28>
 801fe1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801fe20:	6926      	ldr	r6, [r4, #16]
 801fe22:	60c5      	str	r5, [r0, #12]
 801fe24:	f109 0310 	add.w	r3, r9, #16
 801fe28:	f109 0514 	add.w	r5, r9, #20
 801fe2c:	f104 0e14 	add.w	lr, r4, #20
 801fe30:	f100 0b14 	add.w	fp, r0, #20
 801fe34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801fe38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801fe3c:	9301      	str	r3, [sp, #4]
 801fe3e:	46d9      	mov	r9, fp
 801fe40:	f04f 0c00 	mov.w	ip, #0
 801fe44:	9b01      	ldr	r3, [sp, #4]
 801fe46:	f85e 0b04 	ldr.w	r0, [lr], #4
 801fe4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801fe4e:	9301      	str	r3, [sp, #4]
 801fe50:	fa1f f38a 	uxth.w	r3, sl
 801fe54:	4619      	mov	r1, r3
 801fe56:	b283      	uxth	r3, r0
 801fe58:	1acb      	subs	r3, r1, r3
 801fe5a:	0c00      	lsrs	r0, r0, #16
 801fe5c:	4463      	add	r3, ip
 801fe5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801fe62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801fe66:	b29b      	uxth	r3, r3
 801fe68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801fe6c:	4576      	cmp	r6, lr
 801fe6e:	f849 3b04 	str.w	r3, [r9], #4
 801fe72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fe76:	d8e5      	bhi.n	801fe44 <__mdiff+0x88>
 801fe78:	1b33      	subs	r3, r6, r4
 801fe7a:	3b15      	subs	r3, #21
 801fe7c:	f023 0303 	bic.w	r3, r3, #3
 801fe80:	3415      	adds	r4, #21
 801fe82:	3304      	adds	r3, #4
 801fe84:	42a6      	cmp	r6, r4
 801fe86:	bf38      	it	cc
 801fe88:	2304      	movcc	r3, #4
 801fe8a:	441d      	add	r5, r3
 801fe8c:	445b      	add	r3, fp
 801fe8e:	461e      	mov	r6, r3
 801fe90:	462c      	mov	r4, r5
 801fe92:	4544      	cmp	r4, r8
 801fe94:	d30e      	bcc.n	801feb4 <__mdiff+0xf8>
 801fe96:	f108 0103 	add.w	r1, r8, #3
 801fe9a:	1b49      	subs	r1, r1, r5
 801fe9c:	f021 0103 	bic.w	r1, r1, #3
 801fea0:	3d03      	subs	r5, #3
 801fea2:	45a8      	cmp	r8, r5
 801fea4:	bf38      	it	cc
 801fea6:	2100      	movcc	r1, #0
 801fea8:	440b      	add	r3, r1
 801feaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801feae:	b191      	cbz	r1, 801fed6 <__mdiff+0x11a>
 801feb0:	6117      	str	r7, [r2, #16]
 801feb2:	e79d      	b.n	801fdf0 <__mdiff+0x34>
 801feb4:	f854 1b04 	ldr.w	r1, [r4], #4
 801feb8:	46e6      	mov	lr, ip
 801feba:	0c08      	lsrs	r0, r1, #16
 801febc:	fa1c fc81 	uxtah	ip, ip, r1
 801fec0:	4471      	add	r1, lr
 801fec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801fec6:	b289      	uxth	r1, r1
 801fec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801fecc:	f846 1b04 	str.w	r1, [r6], #4
 801fed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fed4:	e7dd      	b.n	801fe92 <__mdiff+0xd6>
 801fed6:	3f01      	subs	r7, #1
 801fed8:	e7e7      	b.n	801feaa <__mdiff+0xee>
 801feda:	bf00      	nop
 801fedc:	0802547c 	.word	0x0802547c
 801fee0:	0802548d 	.word	0x0802548d

0801fee4 <__ulp>:
 801fee4:	b082      	sub	sp, #8
 801fee6:	ed8d 0b00 	vstr	d0, [sp]
 801feea:	9a01      	ldr	r2, [sp, #4]
 801feec:	4b0f      	ldr	r3, [pc, #60]	@ (801ff2c <__ulp+0x48>)
 801feee:	4013      	ands	r3, r2
 801fef0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	dc08      	bgt.n	801ff0a <__ulp+0x26>
 801fef8:	425b      	negs	r3, r3
 801fefa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801fefe:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ff02:	da04      	bge.n	801ff0e <__ulp+0x2a>
 801ff04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801ff08:	4113      	asrs	r3, r2
 801ff0a:	2200      	movs	r2, #0
 801ff0c:	e008      	b.n	801ff20 <__ulp+0x3c>
 801ff0e:	f1a2 0314 	sub.w	r3, r2, #20
 801ff12:	2b1e      	cmp	r3, #30
 801ff14:	bfda      	itte	le
 801ff16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801ff1a:	40da      	lsrle	r2, r3
 801ff1c:	2201      	movgt	r2, #1
 801ff1e:	2300      	movs	r3, #0
 801ff20:	4619      	mov	r1, r3
 801ff22:	4610      	mov	r0, r2
 801ff24:	ec41 0b10 	vmov	d0, r0, r1
 801ff28:	b002      	add	sp, #8
 801ff2a:	4770      	bx	lr
 801ff2c:	7ff00000 	.word	0x7ff00000

0801ff30 <__b2d>:
 801ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff34:	6906      	ldr	r6, [r0, #16]
 801ff36:	f100 0814 	add.w	r8, r0, #20
 801ff3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ff3e:	1f37      	subs	r7, r6, #4
 801ff40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ff44:	4610      	mov	r0, r2
 801ff46:	f7ff fd4b 	bl	801f9e0 <__hi0bits>
 801ff4a:	f1c0 0320 	rsb	r3, r0, #32
 801ff4e:	280a      	cmp	r0, #10
 801ff50:	600b      	str	r3, [r1, #0]
 801ff52:	491b      	ldr	r1, [pc, #108]	@ (801ffc0 <__b2d+0x90>)
 801ff54:	dc15      	bgt.n	801ff82 <__b2d+0x52>
 801ff56:	f1c0 0c0b 	rsb	ip, r0, #11
 801ff5a:	fa22 f30c 	lsr.w	r3, r2, ip
 801ff5e:	45b8      	cmp	r8, r7
 801ff60:	ea43 0501 	orr.w	r5, r3, r1
 801ff64:	bf34      	ite	cc
 801ff66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ff6a:	2300      	movcs	r3, #0
 801ff6c:	3015      	adds	r0, #21
 801ff6e:	fa02 f000 	lsl.w	r0, r2, r0
 801ff72:	fa23 f30c 	lsr.w	r3, r3, ip
 801ff76:	4303      	orrs	r3, r0
 801ff78:	461c      	mov	r4, r3
 801ff7a:	ec45 4b10 	vmov	d0, r4, r5
 801ff7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff82:	45b8      	cmp	r8, r7
 801ff84:	bf3a      	itte	cc
 801ff86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ff8a:	f1a6 0708 	subcc.w	r7, r6, #8
 801ff8e:	2300      	movcs	r3, #0
 801ff90:	380b      	subs	r0, #11
 801ff92:	d012      	beq.n	801ffba <__b2d+0x8a>
 801ff94:	f1c0 0120 	rsb	r1, r0, #32
 801ff98:	fa23 f401 	lsr.w	r4, r3, r1
 801ff9c:	4082      	lsls	r2, r0
 801ff9e:	4322      	orrs	r2, r4
 801ffa0:	4547      	cmp	r7, r8
 801ffa2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801ffa6:	bf8c      	ite	hi
 801ffa8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ffac:	2200      	movls	r2, #0
 801ffae:	4083      	lsls	r3, r0
 801ffb0:	40ca      	lsrs	r2, r1
 801ffb2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801ffb6:	4313      	orrs	r3, r2
 801ffb8:	e7de      	b.n	801ff78 <__b2d+0x48>
 801ffba:	ea42 0501 	orr.w	r5, r2, r1
 801ffbe:	e7db      	b.n	801ff78 <__b2d+0x48>
 801ffc0:	3ff00000 	.word	0x3ff00000

0801ffc4 <__d2b>:
 801ffc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ffc8:	460f      	mov	r7, r1
 801ffca:	2101      	movs	r1, #1
 801ffcc:	ec59 8b10 	vmov	r8, r9, d0
 801ffd0:	4616      	mov	r6, r2
 801ffd2:	f7ff fc13 	bl	801f7fc <_Balloc>
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	b930      	cbnz	r0, 801ffe8 <__d2b+0x24>
 801ffda:	4602      	mov	r2, r0
 801ffdc:	4b23      	ldr	r3, [pc, #140]	@ (802006c <__d2b+0xa8>)
 801ffde:	4824      	ldr	r0, [pc, #144]	@ (8020070 <__d2b+0xac>)
 801ffe0:	f240 310f 	movw	r1, #783	@ 0x30f
 801ffe4:	f7fe fd54 	bl	801ea90 <__assert_func>
 801ffe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ffec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fff0:	b10d      	cbz	r5, 801fff6 <__d2b+0x32>
 801fff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fff6:	9301      	str	r3, [sp, #4]
 801fff8:	f1b8 0300 	subs.w	r3, r8, #0
 801fffc:	d023      	beq.n	8020046 <__d2b+0x82>
 801fffe:	4668      	mov	r0, sp
 8020000:	9300      	str	r3, [sp, #0]
 8020002:	f7ff fd0c 	bl	801fa1e <__lo0bits>
 8020006:	e9dd 1200 	ldrd	r1, r2, [sp]
 802000a:	b1d0      	cbz	r0, 8020042 <__d2b+0x7e>
 802000c:	f1c0 0320 	rsb	r3, r0, #32
 8020010:	fa02 f303 	lsl.w	r3, r2, r3
 8020014:	430b      	orrs	r3, r1
 8020016:	40c2      	lsrs	r2, r0
 8020018:	6163      	str	r3, [r4, #20]
 802001a:	9201      	str	r2, [sp, #4]
 802001c:	9b01      	ldr	r3, [sp, #4]
 802001e:	61a3      	str	r3, [r4, #24]
 8020020:	2b00      	cmp	r3, #0
 8020022:	bf0c      	ite	eq
 8020024:	2201      	moveq	r2, #1
 8020026:	2202      	movne	r2, #2
 8020028:	6122      	str	r2, [r4, #16]
 802002a:	b1a5      	cbz	r5, 8020056 <__d2b+0x92>
 802002c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020030:	4405      	add	r5, r0
 8020032:	603d      	str	r5, [r7, #0]
 8020034:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020038:	6030      	str	r0, [r6, #0]
 802003a:	4620      	mov	r0, r4
 802003c:	b003      	add	sp, #12
 802003e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020042:	6161      	str	r1, [r4, #20]
 8020044:	e7ea      	b.n	802001c <__d2b+0x58>
 8020046:	a801      	add	r0, sp, #4
 8020048:	f7ff fce9 	bl	801fa1e <__lo0bits>
 802004c:	9b01      	ldr	r3, [sp, #4]
 802004e:	6163      	str	r3, [r4, #20]
 8020050:	3020      	adds	r0, #32
 8020052:	2201      	movs	r2, #1
 8020054:	e7e8      	b.n	8020028 <__d2b+0x64>
 8020056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802005a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802005e:	6038      	str	r0, [r7, #0]
 8020060:	6918      	ldr	r0, [r3, #16]
 8020062:	f7ff fcbd 	bl	801f9e0 <__hi0bits>
 8020066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802006a:	e7e5      	b.n	8020038 <__d2b+0x74>
 802006c:	0802547c 	.word	0x0802547c
 8020070:	0802548d 	.word	0x0802548d

08020074 <__ratio>:
 8020074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020078:	b085      	sub	sp, #20
 802007a:	e9cd 1000 	strd	r1, r0, [sp]
 802007e:	a902      	add	r1, sp, #8
 8020080:	f7ff ff56 	bl	801ff30 <__b2d>
 8020084:	9800      	ldr	r0, [sp, #0]
 8020086:	a903      	add	r1, sp, #12
 8020088:	ec55 4b10 	vmov	r4, r5, d0
 802008c:	f7ff ff50 	bl	801ff30 <__b2d>
 8020090:	9b01      	ldr	r3, [sp, #4]
 8020092:	6919      	ldr	r1, [r3, #16]
 8020094:	9b00      	ldr	r3, [sp, #0]
 8020096:	691b      	ldr	r3, [r3, #16]
 8020098:	1ac9      	subs	r1, r1, r3
 802009a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802009e:	1a9b      	subs	r3, r3, r2
 80200a0:	ec5b ab10 	vmov	sl, fp, d0
 80200a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	bfce      	itee	gt
 80200ac:	462a      	movgt	r2, r5
 80200ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80200b2:	465a      	movle	r2, fp
 80200b4:	462f      	mov	r7, r5
 80200b6:	46d9      	mov	r9, fp
 80200b8:	bfcc      	ite	gt
 80200ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80200be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80200c2:	464b      	mov	r3, r9
 80200c4:	4652      	mov	r2, sl
 80200c6:	4620      	mov	r0, r4
 80200c8:	4639      	mov	r1, r7
 80200ca:	f7e0 fbbf 	bl	800084c <__aeabi_ddiv>
 80200ce:	ec41 0b10 	vmov	d0, r0, r1
 80200d2:	b005      	add	sp, #20
 80200d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200d8 <__copybits>:
 80200d8:	3901      	subs	r1, #1
 80200da:	b570      	push	{r4, r5, r6, lr}
 80200dc:	1149      	asrs	r1, r1, #5
 80200de:	6914      	ldr	r4, [r2, #16]
 80200e0:	3101      	adds	r1, #1
 80200e2:	f102 0314 	add.w	r3, r2, #20
 80200e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80200ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80200ee:	1f05      	subs	r5, r0, #4
 80200f0:	42a3      	cmp	r3, r4
 80200f2:	d30c      	bcc.n	802010e <__copybits+0x36>
 80200f4:	1aa3      	subs	r3, r4, r2
 80200f6:	3b11      	subs	r3, #17
 80200f8:	f023 0303 	bic.w	r3, r3, #3
 80200fc:	3211      	adds	r2, #17
 80200fe:	42a2      	cmp	r2, r4
 8020100:	bf88      	it	hi
 8020102:	2300      	movhi	r3, #0
 8020104:	4418      	add	r0, r3
 8020106:	2300      	movs	r3, #0
 8020108:	4288      	cmp	r0, r1
 802010a:	d305      	bcc.n	8020118 <__copybits+0x40>
 802010c:	bd70      	pop	{r4, r5, r6, pc}
 802010e:	f853 6b04 	ldr.w	r6, [r3], #4
 8020112:	f845 6f04 	str.w	r6, [r5, #4]!
 8020116:	e7eb      	b.n	80200f0 <__copybits+0x18>
 8020118:	f840 3b04 	str.w	r3, [r0], #4
 802011c:	e7f4      	b.n	8020108 <__copybits+0x30>

0802011e <__any_on>:
 802011e:	f100 0214 	add.w	r2, r0, #20
 8020122:	6900      	ldr	r0, [r0, #16]
 8020124:	114b      	asrs	r3, r1, #5
 8020126:	4298      	cmp	r0, r3
 8020128:	b510      	push	{r4, lr}
 802012a:	db11      	blt.n	8020150 <__any_on+0x32>
 802012c:	dd0a      	ble.n	8020144 <__any_on+0x26>
 802012e:	f011 011f 	ands.w	r1, r1, #31
 8020132:	d007      	beq.n	8020144 <__any_on+0x26>
 8020134:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020138:	fa24 f001 	lsr.w	r0, r4, r1
 802013c:	fa00 f101 	lsl.w	r1, r0, r1
 8020140:	428c      	cmp	r4, r1
 8020142:	d10b      	bne.n	802015c <__any_on+0x3e>
 8020144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020148:	4293      	cmp	r3, r2
 802014a:	d803      	bhi.n	8020154 <__any_on+0x36>
 802014c:	2000      	movs	r0, #0
 802014e:	bd10      	pop	{r4, pc}
 8020150:	4603      	mov	r3, r0
 8020152:	e7f7      	b.n	8020144 <__any_on+0x26>
 8020154:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020158:	2900      	cmp	r1, #0
 802015a:	d0f5      	beq.n	8020148 <__any_on+0x2a>
 802015c:	2001      	movs	r0, #1
 802015e:	e7f6      	b.n	802014e <__any_on+0x30>

08020160 <_malloc_usable_size_r>:
 8020160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020164:	1f18      	subs	r0, r3, #4
 8020166:	2b00      	cmp	r3, #0
 8020168:	bfbc      	itt	lt
 802016a:	580b      	ldrlt	r3, [r1, r0]
 802016c:	18c0      	addlt	r0, r0, r3
 802016e:	4770      	bx	lr

08020170 <sulp>:
 8020170:	b570      	push	{r4, r5, r6, lr}
 8020172:	4604      	mov	r4, r0
 8020174:	460d      	mov	r5, r1
 8020176:	ec45 4b10 	vmov	d0, r4, r5
 802017a:	4616      	mov	r6, r2
 802017c:	f7ff feb2 	bl	801fee4 <__ulp>
 8020180:	ec51 0b10 	vmov	r0, r1, d0
 8020184:	b17e      	cbz	r6, 80201a6 <sulp+0x36>
 8020186:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802018a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802018e:	2b00      	cmp	r3, #0
 8020190:	dd09      	ble.n	80201a6 <sulp+0x36>
 8020192:	051b      	lsls	r3, r3, #20
 8020194:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020198:	2400      	movs	r4, #0
 802019a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802019e:	4622      	mov	r2, r4
 80201a0:	462b      	mov	r3, r5
 80201a2:	f7e0 fa29 	bl	80005f8 <__aeabi_dmul>
 80201a6:	ec41 0b10 	vmov	d0, r0, r1
 80201aa:	bd70      	pop	{r4, r5, r6, pc}
 80201ac:	0000      	movs	r0, r0
	...

080201b0 <_strtod_l>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	b09f      	sub	sp, #124	@ 0x7c
 80201b6:	460c      	mov	r4, r1
 80201b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80201ba:	2200      	movs	r2, #0
 80201bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80201be:	9005      	str	r0, [sp, #20]
 80201c0:	f04f 0a00 	mov.w	sl, #0
 80201c4:	f04f 0b00 	mov.w	fp, #0
 80201c8:	460a      	mov	r2, r1
 80201ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80201cc:	7811      	ldrb	r1, [r2, #0]
 80201ce:	292b      	cmp	r1, #43	@ 0x2b
 80201d0:	d04a      	beq.n	8020268 <_strtod_l+0xb8>
 80201d2:	d838      	bhi.n	8020246 <_strtod_l+0x96>
 80201d4:	290d      	cmp	r1, #13
 80201d6:	d832      	bhi.n	802023e <_strtod_l+0x8e>
 80201d8:	2908      	cmp	r1, #8
 80201da:	d832      	bhi.n	8020242 <_strtod_l+0x92>
 80201dc:	2900      	cmp	r1, #0
 80201de:	d03b      	beq.n	8020258 <_strtod_l+0xa8>
 80201e0:	2200      	movs	r2, #0
 80201e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80201e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80201e6:	782a      	ldrb	r2, [r5, #0]
 80201e8:	2a30      	cmp	r2, #48	@ 0x30
 80201ea:	f040 80b3 	bne.w	8020354 <_strtod_l+0x1a4>
 80201ee:	786a      	ldrb	r2, [r5, #1]
 80201f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80201f4:	2a58      	cmp	r2, #88	@ 0x58
 80201f6:	d16e      	bne.n	80202d6 <_strtod_l+0x126>
 80201f8:	9302      	str	r3, [sp, #8]
 80201fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201fc:	9301      	str	r3, [sp, #4]
 80201fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8020200:	9300      	str	r3, [sp, #0]
 8020202:	4a8e      	ldr	r2, [pc, #568]	@ (802043c <_strtod_l+0x28c>)
 8020204:	9805      	ldr	r0, [sp, #20]
 8020206:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020208:	a919      	add	r1, sp, #100	@ 0x64
 802020a:	f001 f971 	bl	80214f0 <__gethex>
 802020e:	f010 060f 	ands.w	r6, r0, #15
 8020212:	4604      	mov	r4, r0
 8020214:	d005      	beq.n	8020222 <_strtod_l+0x72>
 8020216:	2e06      	cmp	r6, #6
 8020218:	d128      	bne.n	802026c <_strtod_l+0xbc>
 802021a:	3501      	adds	r5, #1
 802021c:	2300      	movs	r3, #0
 802021e:	9519      	str	r5, [sp, #100]	@ 0x64
 8020220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020224:	2b00      	cmp	r3, #0
 8020226:	f040 858e 	bne.w	8020d46 <_strtod_l+0xb96>
 802022a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802022c:	b1cb      	cbz	r3, 8020262 <_strtod_l+0xb2>
 802022e:	4652      	mov	r2, sl
 8020230:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8020234:	ec43 2b10 	vmov	d0, r2, r3
 8020238:	b01f      	add	sp, #124	@ 0x7c
 802023a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802023e:	2920      	cmp	r1, #32
 8020240:	d1ce      	bne.n	80201e0 <_strtod_l+0x30>
 8020242:	3201      	adds	r2, #1
 8020244:	e7c1      	b.n	80201ca <_strtod_l+0x1a>
 8020246:	292d      	cmp	r1, #45	@ 0x2d
 8020248:	d1ca      	bne.n	80201e0 <_strtod_l+0x30>
 802024a:	2101      	movs	r1, #1
 802024c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802024e:	1c51      	adds	r1, r2, #1
 8020250:	9119      	str	r1, [sp, #100]	@ 0x64
 8020252:	7852      	ldrb	r2, [r2, #1]
 8020254:	2a00      	cmp	r2, #0
 8020256:	d1c5      	bne.n	80201e4 <_strtod_l+0x34>
 8020258:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802025a:	9419      	str	r4, [sp, #100]	@ 0x64
 802025c:	2b00      	cmp	r3, #0
 802025e:	f040 8570 	bne.w	8020d42 <_strtod_l+0xb92>
 8020262:	4652      	mov	r2, sl
 8020264:	465b      	mov	r3, fp
 8020266:	e7e5      	b.n	8020234 <_strtod_l+0x84>
 8020268:	2100      	movs	r1, #0
 802026a:	e7ef      	b.n	802024c <_strtod_l+0x9c>
 802026c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802026e:	b13a      	cbz	r2, 8020280 <_strtod_l+0xd0>
 8020270:	2135      	movs	r1, #53	@ 0x35
 8020272:	a81c      	add	r0, sp, #112	@ 0x70
 8020274:	f7ff ff30 	bl	80200d8 <__copybits>
 8020278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802027a:	9805      	ldr	r0, [sp, #20]
 802027c:	f7ff fafe 	bl	801f87c <_Bfree>
 8020280:	3e01      	subs	r6, #1
 8020282:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020284:	2e04      	cmp	r6, #4
 8020286:	d806      	bhi.n	8020296 <_strtod_l+0xe6>
 8020288:	e8df f006 	tbb	[pc, r6]
 802028c:	201d0314 	.word	0x201d0314
 8020290:	14          	.byte	0x14
 8020291:	00          	.byte	0x00
 8020292:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8020296:	05e1      	lsls	r1, r4, #23
 8020298:	bf48      	it	mi
 802029a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802029e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80202a2:	0d1b      	lsrs	r3, r3, #20
 80202a4:	051b      	lsls	r3, r3, #20
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d1bb      	bne.n	8020222 <_strtod_l+0x72>
 80202aa:	f7fe fba7 	bl	801e9fc <__errno>
 80202ae:	2322      	movs	r3, #34	@ 0x22
 80202b0:	6003      	str	r3, [r0, #0]
 80202b2:	e7b6      	b.n	8020222 <_strtod_l+0x72>
 80202b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80202b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80202bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80202c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80202c4:	e7e7      	b.n	8020296 <_strtod_l+0xe6>
 80202c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8020444 <_strtod_l+0x294>
 80202ca:	e7e4      	b.n	8020296 <_strtod_l+0xe6>
 80202cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80202d0:	f04f 3aff 	mov.w	sl, #4294967295
 80202d4:	e7df      	b.n	8020296 <_strtod_l+0xe6>
 80202d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80202d8:	1c5a      	adds	r2, r3, #1
 80202da:	9219      	str	r2, [sp, #100]	@ 0x64
 80202dc:	785b      	ldrb	r3, [r3, #1]
 80202de:	2b30      	cmp	r3, #48	@ 0x30
 80202e0:	d0f9      	beq.n	80202d6 <_strtod_l+0x126>
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d09d      	beq.n	8020222 <_strtod_l+0x72>
 80202e6:	2301      	movs	r3, #1
 80202e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80202ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80202ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80202ee:	2300      	movs	r3, #0
 80202f0:	9308      	str	r3, [sp, #32]
 80202f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80202f4:	461f      	mov	r7, r3
 80202f6:	220a      	movs	r2, #10
 80202f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80202fa:	7805      	ldrb	r5, [r0, #0]
 80202fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020300:	b2d9      	uxtb	r1, r3
 8020302:	2909      	cmp	r1, #9
 8020304:	d928      	bls.n	8020358 <_strtod_l+0x1a8>
 8020306:	494e      	ldr	r1, [pc, #312]	@ (8020440 <_strtod_l+0x290>)
 8020308:	2201      	movs	r2, #1
 802030a:	f7fe fa5e 	bl	801e7ca <strncmp>
 802030e:	2800      	cmp	r0, #0
 8020310:	d032      	beq.n	8020378 <_strtod_l+0x1c8>
 8020312:	2000      	movs	r0, #0
 8020314:	462a      	mov	r2, r5
 8020316:	4681      	mov	r9, r0
 8020318:	463d      	mov	r5, r7
 802031a:	4603      	mov	r3, r0
 802031c:	2a65      	cmp	r2, #101	@ 0x65
 802031e:	d001      	beq.n	8020324 <_strtod_l+0x174>
 8020320:	2a45      	cmp	r2, #69	@ 0x45
 8020322:	d114      	bne.n	802034e <_strtod_l+0x19e>
 8020324:	b91d      	cbnz	r5, 802032e <_strtod_l+0x17e>
 8020326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020328:	4302      	orrs	r2, r0
 802032a:	d095      	beq.n	8020258 <_strtod_l+0xa8>
 802032c:	2500      	movs	r5, #0
 802032e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020330:	1c62      	adds	r2, r4, #1
 8020332:	9219      	str	r2, [sp, #100]	@ 0x64
 8020334:	7862      	ldrb	r2, [r4, #1]
 8020336:	2a2b      	cmp	r2, #43	@ 0x2b
 8020338:	d077      	beq.n	802042a <_strtod_l+0x27a>
 802033a:	2a2d      	cmp	r2, #45	@ 0x2d
 802033c:	d07b      	beq.n	8020436 <_strtod_l+0x286>
 802033e:	f04f 0c00 	mov.w	ip, #0
 8020342:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8020346:	2909      	cmp	r1, #9
 8020348:	f240 8082 	bls.w	8020450 <_strtod_l+0x2a0>
 802034c:	9419      	str	r4, [sp, #100]	@ 0x64
 802034e:	f04f 0800 	mov.w	r8, #0
 8020352:	e0a2      	b.n	802049a <_strtod_l+0x2ea>
 8020354:	2300      	movs	r3, #0
 8020356:	e7c7      	b.n	80202e8 <_strtod_l+0x138>
 8020358:	2f08      	cmp	r7, #8
 802035a:	bfd5      	itete	le
 802035c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802035e:	9908      	ldrgt	r1, [sp, #32]
 8020360:	fb02 3301 	mlale	r3, r2, r1, r3
 8020364:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020368:	f100 0001 	add.w	r0, r0, #1
 802036c:	bfd4      	ite	le
 802036e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020370:	9308      	strgt	r3, [sp, #32]
 8020372:	3701      	adds	r7, #1
 8020374:	9019      	str	r0, [sp, #100]	@ 0x64
 8020376:	e7bf      	b.n	80202f8 <_strtod_l+0x148>
 8020378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802037a:	1c5a      	adds	r2, r3, #1
 802037c:	9219      	str	r2, [sp, #100]	@ 0x64
 802037e:	785a      	ldrb	r2, [r3, #1]
 8020380:	b37f      	cbz	r7, 80203e2 <_strtod_l+0x232>
 8020382:	4681      	mov	r9, r0
 8020384:	463d      	mov	r5, r7
 8020386:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802038a:	2b09      	cmp	r3, #9
 802038c:	d912      	bls.n	80203b4 <_strtod_l+0x204>
 802038e:	2301      	movs	r3, #1
 8020390:	e7c4      	b.n	802031c <_strtod_l+0x16c>
 8020392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020394:	1c5a      	adds	r2, r3, #1
 8020396:	9219      	str	r2, [sp, #100]	@ 0x64
 8020398:	785a      	ldrb	r2, [r3, #1]
 802039a:	3001      	adds	r0, #1
 802039c:	2a30      	cmp	r2, #48	@ 0x30
 802039e:	d0f8      	beq.n	8020392 <_strtod_l+0x1e2>
 80203a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80203a4:	2b08      	cmp	r3, #8
 80203a6:	f200 84d3 	bhi.w	8020d50 <_strtod_l+0xba0>
 80203aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80203ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80203ae:	4681      	mov	r9, r0
 80203b0:	2000      	movs	r0, #0
 80203b2:	4605      	mov	r5, r0
 80203b4:	3a30      	subs	r2, #48	@ 0x30
 80203b6:	f100 0301 	add.w	r3, r0, #1
 80203ba:	d02a      	beq.n	8020412 <_strtod_l+0x262>
 80203bc:	4499      	add	r9, r3
 80203be:	eb00 0c05 	add.w	ip, r0, r5
 80203c2:	462b      	mov	r3, r5
 80203c4:	210a      	movs	r1, #10
 80203c6:	4563      	cmp	r3, ip
 80203c8:	d10d      	bne.n	80203e6 <_strtod_l+0x236>
 80203ca:	1c69      	adds	r1, r5, #1
 80203cc:	4401      	add	r1, r0
 80203ce:	4428      	add	r0, r5
 80203d0:	2808      	cmp	r0, #8
 80203d2:	dc16      	bgt.n	8020402 <_strtod_l+0x252>
 80203d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80203d6:	230a      	movs	r3, #10
 80203d8:	fb03 2300 	mla	r3, r3, r0, r2
 80203dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80203de:	2300      	movs	r3, #0
 80203e0:	e018      	b.n	8020414 <_strtod_l+0x264>
 80203e2:	4638      	mov	r0, r7
 80203e4:	e7da      	b.n	802039c <_strtod_l+0x1ec>
 80203e6:	2b08      	cmp	r3, #8
 80203e8:	f103 0301 	add.w	r3, r3, #1
 80203ec:	dc03      	bgt.n	80203f6 <_strtod_l+0x246>
 80203ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80203f0:	434e      	muls	r6, r1
 80203f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80203f4:	e7e7      	b.n	80203c6 <_strtod_l+0x216>
 80203f6:	2b10      	cmp	r3, #16
 80203f8:	bfde      	ittt	le
 80203fa:	9e08      	ldrle	r6, [sp, #32]
 80203fc:	434e      	mulle	r6, r1
 80203fe:	9608      	strle	r6, [sp, #32]
 8020400:	e7e1      	b.n	80203c6 <_strtod_l+0x216>
 8020402:	280f      	cmp	r0, #15
 8020404:	dceb      	bgt.n	80203de <_strtod_l+0x22e>
 8020406:	9808      	ldr	r0, [sp, #32]
 8020408:	230a      	movs	r3, #10
 802040a:	fb03 2300 	mla	r3, r3, r0, r2
 802040e:	9308      	str	r3, [sp, #32]
 8020410:	e7e5      	b.n	80203de <_strtod_l+0x22e>
 8020412:	4629      	mov	r1, r5
 8020414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020416:	1c50      	adds	r0, r2, #1
 8020418:	9019      	str	r0, [sp, #100]	@ 0x64
 802041a:	7852      	ldrb	r2, [r2, #1]
 802041c:	4618      	mov	r0, r3
 802041e:	460d      	mov	r5, r1
 8020420:	e7b1      	b.n	8020386 <_strtod_l+0x1d6>
 8020422:	f04f 0900 	mov.w	r9, #0
 8020426:	2301      	movs	r3, #1
 8020428:	e77d      	b.n	8020326 <_strtod_l+0x176>
 802042a:	f04f 0c00 	mov.w	ip, #0
 802042e:	1ca2      	adds	r2, r4, #2
 8020430:	9219      	str	r2, [sp, #100]	@ 0x64
 8020432:	78a2      	ldrb	r2, [r4, #2]
 8020434:	e785      	b.n	8020342 <_strtod_l+0x192>
 8020436:	f04f 0c01 	mov.w	ip, #1
 802043a:	e7f8      	b.n	802042e <_strtod_l+0x27e>
 802043c:	08025600 	.word	0x08025600
 8020440:	080255e8 	.word	0x080255e8
 8020444:	7ff00000 	.word	0x7ff00000
 8020448:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802044a:	1c51      	adds	r1, r2, #1
 802044c:	9119      	str	r1, [sp, #100]	@ 0x64
 802044e:	7852      	ldrb	r2, [r2, #1]
 8020450:	2a30      	cmp	r2, #48	@ 0x30
 8020452:	d0f9      	beq.n	8020448 <_strtod_l+0x298>
 8020454:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020458:	2908      	cmp	r1, #8
 802045a:	f63f af78 	bhi.w	802034e <_strtod_l+0x19e>
 802045e:	3a30      	subs	r2, #48	@ 0x30
 8020460:	920e      	str	r2, [sp, #56]	@ 0x38
 8020462:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020464:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020466:	f04f 080a 	mov.w	r8, #10
 802046a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802046c:	1c56      	adds	r6, r2, #1
 802046e:	9619      	str	r6, [sp, #100]	@ 0x64
 8020470:	7852      	ldrb	r2, [r2, #1]
 8020472:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020476:	f1be 0f09 	cmp.w	lr, #9
 802047a:	d939      	bls.n	80204f0 <_strtod_l+0x340>
 802047c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802047e:	1a76      	subs	r6, r6, r1
 8020480:	2e08      	cmp	r6, #8
 8020482:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8020486:	dc03      	bgt.n	8020490 <_strtod_l+0x2e0>
 8020488:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802048a:	4588      	cmp	r8, r1
 802048c:	bfa8      	it	ge
 802048e:	4688      	movge	r8, r1
 8020490:	f1bc 0f00 	cmp.w	ip, #0
 8020494:	d001      	beq.n	802049a <_strtod_l+0x2ea>
 8020496:	f1c8 0800 	rsb	r8, r8, #0
 802049a:	2d00      	cmp	r5, #0
 802049c:	d14e      	bne.n	802053c <_strtod_l+0x38c>
 802049e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204a0:	4308      	orrs	r0, r1
 80204a2:	f47f aebe 	bne.w	8020222 <_strtod_l+0x72>
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	f47f aed6 	bne.w	8020258 <_strtod_l+0xa8>
 80204ac:	2a69      	cmp	r2, #105	@ 0x69
 80204ae:	d028      	beq.n	8020502 <_strtod_l+0x352>
 80204b0:	dc25      	bgt.n	80204fe <_strtod_l+0x34e>
 80204b2:	2a49      	cmp	r2, #73	@ 0x49
 80204b4:	d025      	beq.n	8020502 <_strtod_l+0x352>
 80204b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80204b8:	f47f aece 	bne.w	8020258 <_strtod_l+0xa8>
 80204bc:	499b      	ldr	r1, [pc, #620]	@ (802072c <_strtod_l+0x57c>)
 80204be:	a819      	add	r0, sp, #100	@ 0x64
 80204c0:	f001 fa38 	bl	8021934 <__match>
 80204c4:	2800      	cmp	r0, #0
 80204c6:	f43f aec7 	beq.w	8020258 <_strtod_l+0xa8>
 80204ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80204cc:	781b      	ldrb	r3, [r3, #0]
 80204ce:	2b28      	cmp	r3, #40	@ 0x28
 80204d0:	d12e      	bne.n	8020530 <_strtod_l+0x380>
 80204d2:	4997      	ldr	r1, [pc, #604]	@ (8020730 <_strtod_l+0x580>)
 80204d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80204d6:	a819      	add	r0, sp, #100	@ 0x64
 80204d8:	f001 fa40 	bl	802195c <__hexnan>
 80204dc:	2805      	cmp	r0, #5
 80204de:	d127      	bne.n	8020530 <_strtod_l+0x380>
 80204e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80204e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80204e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80204ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80204ee:	e698      	b.n	8020222 <_strtod_l+0x72>
 80204f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80204f2:	fb08 2101 	mla	r1, r8, r1, r2
 80204f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80204fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80204fc:	e7b5      	b.n	802046a <_strtod_l+0x2ba>
 80204fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8020500:	e7da      	b.n	80204b8 <_strtod_l+0x308>
 8020502:	498c      	ldr	r1, [pc, #560]	@ (8020734 <_strtod_l+0x584>)
 8020504:	a819      	add	r0, sp, #100	@ 0x64
 8020506:	f001 fa15 	bl	8021934 <__match>
 802050a:	2800      	cmp	r0, #0
 802050c:	f43f aea4 	beq.w	8020258 <_strtod_l+0xa8>
 8020510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020512:	4989      	ldr	r1, [pc, #548]	@ (8020738 <_strtod_l+0x588>)
 8020514:	3b01      	subs	r3, #1
 8020516:	a819      	add	r0, sp, #100	@ 0x64
 8020518:	9319      	str	r3, [sp, #100]	@ 0x64
 802051a:	f001 fa0b 	bl	8021934 <__match>
 802051e:	b910      	cbnz	r0, 8020526 <_strtod_l+0x376>
 8020520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020522:	3301      	adds	r3, #1
 8020524:	9319      	str	r3, [sp, #100]	@ 0x64
 8020526:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020748 <_strtod_l+0x598>
 802052a:	f04f 0a00 	mov.w	sl, #0
 802052e:	e678      	b.n	8020222 <_strtod_l+0x72>
 8020530:	4882      	ldr	r0, [pc, #520]	@ (802073c <_strtod_l+0x58c>)
 8020532:	f000 ff59 	bl	80213e8 <nan>
 8020536:	ec5b ab10 	vmov	sl, fp, d0
 802053a:	e672      	b.n	8020222 <_strtod_l+0x72>
 802053c:	eba8 0309 	sub.w	r3, r8, r9
 8020540:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020542:	9309      	str	r3, [sp, #36]	@ 0x24
 8020544:	2f00      	cmp	r7, #0
 8020546:	bf08      	it	eq
 8020548:	462f      	moveq	r7, r5
 802054a:	2d10      	cmp	r5, #16
 802054c:	462c      	mov	r4, r5
 802054e:	bfa8      	it	ge
 8020550:	2410      	movge	r4, #16
 8020552:	f7df ffd7 	bl	8000504 <__aeabi_ui2d>
 8020556:	2d09      	cmp	r5, #9
 8020558:	4682      	mov	sl, r0
 802055a:	468b      	mov	fp, r1
 802055c:	dc13      	bgt.n	8020586 <_strtod_l+0x3d6>
 802055e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020560:	2b00      	cmp	r3, #0
 8020562:	f43f ae5e 	beq.w	8020222 <_strtod_l+0x72>
 8020566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020568:	dd78      	ble.n	802065c <_strtod_l+0x4ac>
 802056a:	2b16      	cmp	r3, #22
 802056c:	dc5f      	bgt.n	802062e <_strtod_l+0x47e>
 802056e:	4974      	ldr	r1, [pc, #464]	@ (8020740 <_strtod_l+0x590>)
 8020570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020578:	4652      	mov	r2, sl
 802057a:	465b      	mov	r3, fp
 802057c:	f7e0 f83c 	bl	80005f8 <__aeabi_dmul>
 8020580:	4682      	mov	sl, r0
 8020582:	468b      	mov	fp, r1
 8020584:	e64d      	b.n	8020222 <_strtod_l+0x72>
 8020586:	4b6e      	ldr	r3, [pc, #440]	@ (8020740 <_strtod_l+0x590>)
 8020588:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802058c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020590:	f7e0 f832 	bl	80005f8 <__aeabi_dmul>
 8020594:	4682      	mov	sl, r0
 8020596:	9808      	ldr	r0, [sp, #32]
 8020598:	468b      	mov	fp, r1
 802059a:	f7df ffb3 	bl	8000504 <__aeabi_ui2d>
 802059e:	4602      	mov	r2, r0
 80205a0:	460b      	mov	r3, r1
 80205a2:	4650      	mov	r0, sl
 80205a4:	4659      	mov	r1, fp
 80205a6:	f7df fe71 	bl	800028c <__adddf3>
 80205aa:	2d0f      	cmp	r5, #15
 80205ac:	4682      	mov	sl, r0
 80205ae:	468b      	mov	fp, r1
 80205b0:	ddd5      	ble.n	802055e <_strtod_l+0x3ae>
 80205b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205b4:	1b2c      	subs	r4, r5, r4
 80205b6:	441c      	add	r4, r3
 80205b8:	2c00      	cmp	r4, #0
 80205ba:	f340 8096 	ble.w	80206ea <_strtod_l+0x53a>
 80205be:	f014 030f 	ands.w	r3, r4, #15
 80205c2:	d00a      	beq.n	80205da <_strtod_l+0x42a>
 80205c4:	495e      	ldr	r1, [pc, #376]	@ (8020740 <_strtod_l+0x590>)
 80205c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80205ca:	4652      	mov	r2, sl
 80205cc:	465b      	mov	r3, fp
 80205ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80205d2:	f7e0 f811 	bl	80005f8 <__aeabi_dmul>
 80205d6:	4682      	mov	sl, r0
 80205d8:	468b      	mov	fp, r1
 80205da:	f034 040f 	bics.w	r4, r4, #15
 80205de:	d073      	beq.n	80206c8 <_strtod_l+0x518>
 80205e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80205e4:	dd48      	ble.n	8020678 <_strtod_l+0x4c8>
 80205e6:	2400      	movs	r4, #0
 80205e8:	46a0      	mov	r8, r4
 80205ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80205ec:	46a1      	mov	r9, r4
 80205ee:	9a05      	ldr	r2, [sp, #20]
 80205f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020748 <_strtod_l+0x598>
 80205f4:	2322      	movs	r3, #34	@ 0x22
 80205f6:	6013      	str	r3, [r2, #0]
 80205f8:	f04f 0a00 	mov.w	sl, #0
 80205fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205fe:	2b00      	cmp	r3, #0
 8020600:	f43f ae0f 	beq.w	8020222 <_strtod_l+0x72>
 8020604:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020606:	9805      	ldr	r0, [sp, #20]
 8020608:	f7ff f938 	bl	801f87c <_Bfree>
 802060c:	9805      	ldr	r0, [sp, #20]
 802060e:	4649      	mov	r1, r9
 8020610:	f7ff f934 	bl	801f87c <_Bfree>
 8020614:	9805      	ldr	r0, [sp, #20]
 8020616:	4641      	mov	r1, r8
 8020618:	f7ff f930 	bl	801f87c <_Bfree>
 802061c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802061e:	9805      	ldr	r0, [sp, #20]
 8020620:	f7ff f92c 	bl	801f87c <_Bfree>
 8020624:	9805      	ldr	r0, [sp, #20]
 8020626:	4621      	mov	r1, r4
 8020628:	f7ff f928 	bl	801f87c <_Bfree>
 802062c:	e5f9      	b.n	8020222 <_strtod_l+0x72>
 802062e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020630:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020634:	4293      	cmp	r3, r2
 8020636:	dbbc      	blt.n	80205b2 <_strtod_l+0x402>
 8020638:	4c41      	ldr	r4, [pc, #260]	@ (8020740 <_strtod_l+0x590>)
 802063a:	f1c5 050f 	rsb	r5, r5, #15
 802063e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020642:	4652      	mov	r2, sl
 8020644:	465b      	mov	r3, fp
 8020646:	e9d1 0100 	ldrd	r0, r1, [r1]
 802064a:	f7df ffd5 	bl	80005f8 <__aeabi_dmul>
 802064e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020650:	1b5d      	subs	r5, r3, r5
 8020652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020656:	e9d4 2300 	ldrd	r2, r3, [r4]
 802065a:	e78f      	b.n	802057c <_strtod_l+0x3cc>
 802065c:	3316      	adds	r3, #22
 802065e:	dba8      	blt.n	80205b2 <_strtod_l+0x402>
 8020660:	4b37      	ldr	r3, [pc, #220]	@ (8020740 <_strtod_l+0x590>)
 8020662:	eba9 0808 	sub.w	r8, r9, r8
 8020666:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802066a:	e9d8 2300 	ldrd	r2, r3, [r8]
 802066e:	4650      	mov	r0, sl
 8020670:	4659      	mov	r1, fp
 8020672:	f7e0 f8eb 	bl	800084c <__aeabi_ddiv>
 8020676:	e783      	b.n	8020580 <_strtod_l+0x3d0>
 8020678:	4b32      	ldr	r3, [pc, #200]	@ (8020744 <_strtod_l+0x594>)
 802067a:	9308      	str	r3, [sp, #32]
 802067c:	2300      	movs	r3, #0
 802067e:	1124      	asrs	r4, r4, #4
 8020680:	4650      	mov	r0, sl
 8020682:	4659      	mov	r1, fp
 8020684:	461e      	mov	r6, r3
 8020686:	2c01      	cmp	r4, #1
 8020688:	dc21      	bgt.n	80206ce <_strtod_l+0x51e>
 802068a:	b10b      	cbz	r3, 8020690 <_strtod_l+0x4e0>
 802068c:	4682      	mov	sl, r0
 802068e:	468b      	mov	fp, r1
 8020690:	492c      	ldr	r1, [pc, #176]	@ (8020744 <_strtod_l+0x594>)
 8020692:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020696:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802069a:	4652      	mov	r2, sl
 802069c:	465b      	mov	r3, fp
 802069e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80206a2:	f7df ffa9 	bl	80005f8 <__aeabi_dmul>
 80206a6:	4b28      	ldr	r3, [pc, #160]	@ (8020748 <_strtod_l+0x598>)
 80206a8:	460a      	mov	r2, r1
 80206aa:	400b      	ands	r3, r1
 80206ac:	4927      	ldr	r1, [pc, #156]	@ (802074c <_strtod_l+0x59c>)
 80206ae:	428b      	cmp	r3, r1
 80206b0:	4682      	mov	sl, r0
 80206b2:	d898      	bhi.n	80205e6 <_strtod_l+0x436>
 80206b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80206b8:	428b      	cmp	r3, r1
 80206ba:	bf86      	itte	hi
 80206bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020750 <_strtod_l+0x5a0>
 80206c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80206c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80206c8:	2300      	movs	r3, #0
 80206ca:	9308      	str	r3, [sp, #32]
 80206cc:	e07a      	b.n	80207c4 <_strtod_l+0x614>
 80206ce:	07e2      	lsls	r2, r4, #31
 80206d0:	d505      	bpl.n	80206de <_strtod_l+0x52e>
 80206d2:	9b08      	ldr	r3, [sp, #32]
 80206d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206d8:	f7df ff8e 	bl	80005f8 <__aeabi_dmul>
 80206dc:	2301      	movs	r3, #1
 80206de:	9a08      	ldr	r2, [sp, #32]
 80206e0:	3208      	adds	r2, #8
 80206e2:	3601      	adds	r6, #1
 80206e4:	1064      	asrs	r4, r4, #1
 80206e6:	9208      	str	r2, [sp, #32]
 80206e8:	e7cd      	b.n	8020686 <_strtod_l+0x4d6>
 80206ea:	d0ed      	beq.n	80206c8 <_strtod_l+0x518>
 80206ec:	4264      	negs	r4, r4
 80206ee:	f014 020f 	ands.w	r2, r4, #15
 80206f2:	d00a      	beq.n	802070a <_strtod_l+0x55a>
 80206f4:	4b12      	ldr	r3, [pc, #72]	@ (8020740 <_strtod_l+0x590>)
 80206f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80206fa:	4650      	mov	r0, sl
 80206fc:	4659      	mov	r1, fp
 80206fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020702:	f7e0 f8a3 	bl	800084c <__aeabi_ddiv>
 8020706:	4682      	mov	sl, r0
 8020708:	468b      	mov	fp, r1
 802070a:	1124      	asrs	r4, r4, #4
 802070c:	d0dc      	beq.n	80206c8 <_strtod_l+0x518>
 802070e:	2c1f      	cmp	r4, #31
 8020710:	dd20      	ble.n	8020754 <_strtod_l+0x5a4>
 8020712:	2400      	movs	r4, #0
 8020714:	46a0      	mov	r8, r4
 8020716:	940a      	str	r4, [sp, #40]	@ 0x28
 8020718:	46a1      	mov	r9, r4
 802071a:	9a05      	ldr	r2, [sp, #20]
 802071c:	2322      	movs	r3, #34	@ 0x22
 802071e:	f04f 0a00 	mov.w	sl, #0
 8020722:	f04f 0b00 	mov.w	fp, #0
 8020726:	6013      	str	r3, [r2, #0]
 8020728:	e768      	b.n	80205fc <_strtod_l+0x44c>
 802072a:	bf00      	nop
 802072c:	080253af 	.word	0x080253af
 8020730:	080255ec 	.word	0x080255ec
 8020734:	080253a7 	.word	0x080253a7
 8020738:	0802541a 	.word	0x0802541a
 802073c:	08025416 	.word	0x08025416
 8020740:	08025520 	.word	0x08025520
 8020744:	080254f8 	.word	0x080254f8
 8020748:	7ff00000 	.word	0x7ff00000
 802074c:	7ca00000 	.word	0x7ca00000
 8020750:	7fefffff 	.word	0x7fefffff
 8020754:	f014 0310 	ands.w	r3, r4, #16
 8020758:	bf18      	it	ne
 802075a:	236a      	movne	r3, #106	@ 0x6a
 802075c:	4ea9      	ldr	r6, [pc, #676]	@ (8020a04 <_strtod_l+0x854>)
 802075e:	9308      	str	r3, [sp, #32]
 8020760:	4650      	mov	r0, sl
 8020762:	4659      	mov	r1, fp
 8020764:	2300      	movs	r3, #0
 8020766:	07e2      	lsls	r2, r4, #31
 8020768:	d504      	bpl.n	8020774 <_strtod_l+0x5c4>
 802076a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802076e:	f7df ff43 	bl	80005f8 <__aeabi_dmul>
 8020772:	2301      	movs	r3, #1
 8020774:	1064      	asrs	r4, r4, #1
 8020776:	f106 0608 	add.w	r6, r6, #8
 802077a:	d1f4      	bne.n	8020766 <_strtod_l+0x5b6>
 802077c:	b10b      	cbz	r3, 8020782 <_strtod_l+0x5d2>
 802077e:	4682      	mov	sl, r0
 8020780:	468b      	mov	fp, r1
 8020782:	9b08      	ldr	r3, [sp, #32]
 8020784:	b1b3      	cbz	r3, 80207b4 <_strtod_l+0x604>
 8020786:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802078a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802078e:	2b00      	cmp	r3, #0
 8020790:	4659      	mov	r1, fp
 8020792:	dd0f      	ble.n	80207b4 <_strtod_l+0x604>
 8020794:	2b1f      	cmp	r3, #31
 8020796:	dd55      	ble.n	8020844 <_strtod_l+0x694>
 8020798:	2b34      	cmp	r3, #52	@ 0x34
 802079a:	bfde      	ittt	le
 802079c:	f04f 33ff 	movle.w	r3, #4294967295
 80207a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80207a4:	4093      	lslle	r3, r2
 80207a6:	f04f 0a00 	mov.w	sl, #0
 80207aa:	bfcc      	ite	gt
 80207ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80207b0:	ea03 0b01 	andle.w	fp, r3, r1
 80207b4:	2200      	movs	r2, #0
 80207b6:	2300      	movs	r3, #0
 80207b8:	4650      	mov	r0, sl
 80207ba:	4659      	mov	r1, fp
 80207bc:	f7e0 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80207c0:	2800      	cmp	r0, #0
 80207c2:	d1a6      	bne.n	8020712 <_strtod_l+0x562>
 80207c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80207c6:	9300      	str	r3, [sp, #0]
 80207c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80207ca:	9805      	ldr	r0, [sp, #20]
 80207cc:	462b      	mov	r3, r5
 80207ce:	463a      	mov	r2, r7
 80207d0:	f7ff f8bc 	bl	801f94c <__s2b>
 80207d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80207d6:	2800      	cmp	r0, #0
 80207d8:	f43f af05 	beq.w	80205e6 <_strtod_l+0x436>
 80207dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207de:	2a00      	cmp	r2, #0
 80207e0:	eba9 0308 	sub.w	r3, r9, r8
 80207e4:	bfa8      	it	ge
 80207e6:	2300      	movge	r3, #0
 80207e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80207ea:	2400      	movs	r4, #0
 80207ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80207f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80207f2:	46a0      	mov	r8, r4
 80207f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80207f6:	9805      	ldr	r0, [sp, #20]
 80207f8:	6859      	ldr	r1, [r3, #4]
 80207fa:	f7fe ffff 	bl	801f7fc <_Balloc>
 80207fe:	4681      	mov	r9, r0
 8020800:	2800      	cmp	r0, #0
 8020802:	f43f aef4 	beq.w	80205ee <_strtod_l+0x43e>
 8020806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020808:	691a      	ldr	r2, [r3, #16]
 802080a:	3202      	adds	r2, #2
 802080c:	f103 010c 	add.w	r1, r3, #12
 8020810:	0092      	lsls	r2, r2, #2
 8020812:	300c      	adds	r0, #12
 8020814:	f7fe f927 	bl	801ea66 <memcpy>
 8020818:	ec4b ab10 	vmov	d0, sl, fp
 802081c:	9805      	ldr	r0, [sp, #20]
 802081e:	aa1c      	add	r2, sp, #112	@ 0x70
 8020820:	a91b      	add	r1, sp, #108	@ 0x6c
 8020822:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020826:	f7ff fbcd 	bl	801ffc4 <__d2b>
 802082a:	901a      	str	r0, [sp, #104]	@ 0x68
 802082c:	2800      	cmp	r0, #0
 802082e:	f43f aede 	beq.w	80205ee <_strtod_l+0x43e>
 8020832:	9805      	ldr	r0, [sp, #20]
 8020834:	2101      	movs	r1, #1
 8020836:	f7ff f91f 	bl	801fa78 <__i2b>
 802083a:	4680      	mov	r8, r0
 802083c:	b948      	cbnz	r0, 8020852 <_strtod_l+0x6a2>
 802083e:	f04f 0800 	mov.w	r8, #0
 8020842:	e6d4      	b.n	80205ee <_strtod_l+0x43e>
 8020844:	f04f 32ff 	mov.w	r2, #4294967295
 8020848:	fa02 f303 	lsl.w	r3, r2, r3
 802084c:	ea03 0a0a 	and.w	sl, r3, sl
 8020850:	e7b0      	b.n	80207b4 <_strtod_l+0x604>
 8020852:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020854:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020856:	2d00      	cmp	r5, #0
 8020858:	bfab      	itete	ge
 802085a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802085c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802085e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020860:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020862:	bfac      	ite	ge
 8020864:	18ef      	addge	r7, r5, r3
 8020866:	1b5e      	sublt	r6, r3, r5
 8020868:	9b08      	ldr	r3, [sp, #32]
 802086a:	1aed      	subs	r5, r5, r3
 802086c:	4415      	add	r5, r2
 802086e:	4b66      	ldr	r3, [pc, #408]	@ (8020a08 <_strtod_l+0x858>)
 8020870:	3d01      	subs	r5, #1
 8020872:	429d      	cmp	r5, r3
 8020874:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020878:	da50      	bge.n	802091c <_strtod_l+0x76c>
 802087a:	1b5b      	subs	r3, r3, r5
 802087c:	2b1f      	cmp	r3, #31
 802087e:	eba2 0203 	sub.w	r2, r2, r3
 8020882:	f04f 0101 	mov.w	r1, #1
 8020886:	dc3d      	bgt.n	8020904 <_strtod_l+0x754>
 8020888:	fa01 f303 	lsl.w	r3, r1, r3
 802088c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802088e:	2300      	movs	r3, #0
 8020890:	9310      	str	r3, [sp, #64]	@ 0x40
 8020892:	18bd      	adds	r5, r7, r2
 8020894:	9b08      	ldr	r3, [sp, #32]
 8020896:	42af      	cmp	r7, r5
 8020898:	4416      	add	r6, r2
 802089a:	441e      	add	r6, r3
 802089c:	463b      	mov	r3, r7
 802089e:	bfa8      	it	ge
 80208a0:	462b      	movge	r3, r5
 80208a2:	42b3      	cmp	r3, r6
 80208a4:	bfa8      	it	ge
 80208a6:	4633      	movge	r3, r6
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	bfc2      	ittt	gt
 80208ac:	1aed      	subgt	r5, r5, r3
 80208ae:	1af6      	subgt	r6, r6, r3
 80208b0:	1aff      	subgt	r7, r7, r3
 80208b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	dd16      	ble.n	80208e6 <_strtod_l+0x736>
 80208b8:	4641      	mov	r1, r8
 80208ba:	9805      	ldr	r0, [sp, #20]
 80208bc:	461a      	mov	r2, r3
 80208be:	f7ff f99b 	bl	801fbf8 <__pow5mult>
 80208c2:	4680      	mov	r8, r0
 80208c4:	2800      	cmp	r0, #0
 80208c6:	d0ba      	beq.n	802083e <_strtod_l+0x68e>
 80208c8:	4601      	mov	r1, r0
 80208ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80208cc:	9805      	ldr	r0, [sp, #20]
 80208ce:	f7ff f8e9 	bl	801faa4 <__multiply>
 80208d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80208d4:	2800      	cmp	r0, #0
 80208d6:	f43f ae8a 	beq.w	80205ee <_strtod_l+0x43e>
 80208da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80208dc:	9805      	ldr	r0, [sp, #20]
 80208de:	f7fe ffcd 	bl	801f87c <_Bfree>
 80208e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80208e6:	2d00      	cmp	r5, #0
 80208e8:	dc1d      	bgt.n	8020926 <_strtod_l+0x776>
 80208ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	dd23      	ble.n	8020938 <_strtod_l+0x788>
 80208f0:	4649      	mov	r1, r9
 80208f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80208f4:	9805      	ldr	r0, [sp, #20]
 80208f6:	f7ff f97f 	bl	801fbf8 <__pow5mult>
 80208fa:	4681      	mov	r9, r0
 80208fc:	b9e0      	cbnz	r0, 8020938 <_strtod_l+0x788>
 80208fe:	f04f 0900 	mov.w	r9, #0
 8020902:	e674      	b.n	80205ee <_strtod_l+0x43e>
 8020904:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020908:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802090c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020910:	35e2      	adds	r5, #226	@ 0xe2
 8020912:	fa01 f305 	lsl.w	r3, r1, r5
 8020916:	9310      	str	r3, [sp, #64]	@ 0x40
 8020918:	9113      	str	r1, [sp, #76]	@ 0x4c
 802091a:	e7ba      	b.n	8020892 <_strtod_l+0x6e2>
 802091c:	2300      	movs	r3, #0
 802091e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020920:	2301      	movs	r3, #1
 8020922:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020924:	e7b5      	b.n	8020892 <_strtod_l+0x6e2>
 8020926:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020928:	9805      	ldr	r0, [sp, #20]
 802092a:	462a      	mov	r2, r5
 802092c:	f7ff f9be 	bl	801fcac <__lshift>
 8020930:	901a      	str	r0, [sp, #104]	@ 0x68
 8020932:	2800      	cmp	r0, #0
 8020934:	d1d9      	bne.n	80208ea <_strtod_l+0x73a>
 8020936:	e65a      	b.n	80205ee <_strtod_l+0x43e>
 8020938:	2e00      	cmp	r6, #0
 802093a:	dd07      	ble.n	802094c <_strtod_l+0x79c>
 802093c:	4649      	mov	r1, r9
 802093e:	9805      	ldr	r0, [sp, #20]
 8020940:	4632      	mov	r2, r6
 8020942:	f7ff f9b3 	bl	801fcac <__lshift>
 8020946:	4681      	mov	r9, r0
 8020948:	2800      	cmp	r0, #0
 802094a:	d0d8      	beq.n	80208fe <_strtod_l+0x74e>
 802094c:	2f00      	cmp	r7, #0
 802094e:	dd08      	ble.n	8020962 <_strtod_l+0x7b2>
 8020950:	4641      	mov	r1, r8
 8020952:	9805      	ldr	r0, [sp, #20]
 8020954:	463a      	mov	r2, r7
 8020956:	f7ff f9a9 	bl	801fcac <__lshift>
 802095a:	4680      	mov	r8, r0
 802095c:	2800      	cmp	r0, #0
 802095e:	f43f ae46 	beq.w	80205ee <_strtod_l+0x43e>
 8020962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020964:	9805      	ldr	r0, [sp, #20]
 8020966:	464a      	mov	r2, r9
 8020968:	f7ff fa28 	bl	801fdbc <__mdiff>
 802096c:	4604      	mov	r4, r0
 802096e:	2800      	cmp	r0, #0
 8020970:	f43f ae3d 	beq.w	80205ee <_strtod_l+0x43e>
 8020974:	68c3      	ldr	r3, [r0, #12]
 8020976:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020978:	2300      	movs	r3, #0
 802097a:	60c3      	str	r3, [r0, #12]
 802097c:	4641      	mov	r1, r8
 802097e:	f7ff fa01 	bl	801fd84 <__mcmp>
 8020982:	2800      	cmp	r0, #0
 8020984:	da46      	bge.n	8020a14 <_strtod_l+0x864>
 8020986:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020988:	ea53 030a 	orrs.w	r3, r3, sl
 802098c:	d16c      	bne.n	8020a68 <_strtod_l+0x8b8>
 802098e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020992:	2b00      	cmp	r3, #0
 8020994:	d168      	bne.n	8020a68 <_strtod_l+0x8b8>
 8020996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802099a:	0d1b      	lsrs	r3, r3, #20
 802099c:	051b      	lsls	r3, r3, #20
 802099e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80209a2:	d961      	bls.n	8020a68 <_strtod_l+0x8b8>
 80209a4:	6963      	ldr	r3, [r4, #20]
 80209a6:	b913      	cbnz	r3, 80209ae <_strtod_l+0x7fe>
 80209a8:	6923      	ldr	r3, [r4, #16]
 80209aa:	2b01      	cmp	r3, #1
 80209ac:	dd5c      	ble.n	8020a68 <_strtod_l+0x8b8>
 80209ae:	4621      	mov	r1, r4
 80209b0:	2201      	movs	r2, #1
 80209b2:	9805      	ldr	r0, [sp, #20]
 80209b4:	f7ff f97a 	bl	801fcac <__lshift>
 80209b8:	4641      	mov	r1, r8
 80209ba:	4604      	mov	r4, r0
 80209bc:	f7ff f9e2 	bl	801fd84 <__mcmp>
 80209c0:	2800      	cmp	r0, #0
 80209c2:	dd51      	ble.n	8020a68 <_strtod_l+0x8b8>
 80209c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80209c8:	9a08      	ldr	r2, [sp, #32]
 80209ca:	0d1b      	lsrs	r3, r3, #20
 80209cc:	051b      	lsls	r3, r3, #20
 80209ce:	2a00      	cmp	r2, #0
 80209d0:	d06b      	beq.n	8020aaa <_strtod_l+0x8fa>
 80209d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80209d6:	d868      	bhi.n	8020aaa <_strtod_l+0x8fa>
 80209d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80209dc:	f67f ae9d 	bls.w	802071a <_strtod_l+0x56a>
 80209e0:	4b0a      	ldr	r3, [pc, #40]	@ (8020a0c <_strtod_l+0x85c>)
 80209e2:	4650      	mov	r0, sl
 80209e4:	4659      	mov	r1, fp
 80209e6:	2200      	movs	r2, #0
 80209e8:	f7df fe06 	bl	80005f8 <__aeabi_dmul>
 80209ec:	4b08      	ldr	r3, [pc, #32]	@ (8020a10 <_strtod_l+0x860>)
 80209ee:	400b      	ands	r3, r1
 80209f0:	4682      	mov	sl, r0
 80209f2:	468b      	mov	fp, r1
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	f47f ae05 	bne.w	8020604 <_strtod_l+0x454>
 80209fa:	9a05      	ldr	r2, [sp, #20]
 80209fc:	2322      	movs	r3, #34	@ 0x22
 80209fe:	6013      	str	r3, [r2, #0]
 8020a00:	e600      	b.n	8020604 <_strtod_l+0x454>
 8020a02:	bf00      	nop
 8020a04:	08025618 	.word	0x08025618
 8020a08:	fffffc02 	.word	0xfffffc02
 8020a0c:	39500000 	.word	0x39500000
 8020a10:	7ff00000 	.word	0x7ff00000
 8020a14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020a18:	d165      	bne.n	8020ae6 <_strtod_l+0x936>
 8020a1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020a20:	b35a      	cbz	r2, 8020a7a <_strtod_l+0x8ca>
 8020a22:	4a9f      	ldr	r2, [pc, #636]	@ (8020ca0 <_strtod_l+0xaf0>)
 8020a24:	4293      	cmp	r3, r2
 8020a26:	d12b      	bne.n	8020a80 <_strtod_l+0x8d0>
 8020a28:	9b08      	ldr	r3, [sp, #32]
 8020a2a:	4651      	mov	r1, sl
 8020a2c:	b303      	cbz	r3, 8020a70 <_strtod_l+0x8c0>
 8020a2e:	4b9d      	ldr	r3, [pc, #628]	@ (8020ca4 <_strtod_l+0xaf4>)
 8020a30:	465a      	mov	r2, fp
 8020a32:	4013      	ands	r3, r2
 8020a34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020a38:	f04f 32ff 	mov.w	r2, #4294967295
 8020a3c:	d81b      	bhi.n	8020a76 <_strtod_l+0x8c6>
 8020a3e:	0d1b      	lsrs	r3, r3, #20
 8020a40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020a44:	fa02 f303 	lsl.w	r3, r2, r3
 8020a48:	4299      	cmp	r1, r3
 8020a4a:	d119      	bne.n	8020a80 <_strtod_l+0x8d0>
 8020a4c:	4b96      	ldr	r3, [pc, #600]	@ (8020ca8 <_strtod_l+0xaf8>)
 8020a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a50:	429a      	cmp	r2, r3
 8020a52:	d102      	bne.n	8020a5a <_strtod_l+0x8aa>
 8020a54:	3101      	adds	r1, #1
 8020a56:	f43f adca 	beq.w	80205ee <_strtod_l+0x43e>
 8020a5a:	4b92      	ldr	r3, [pc, #584]	@ (8020ca4 <_strtod_l+0xaf4>)
 8020a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a5e:	401a      	ands	r2, r3
 8020a60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020a64:	f04f 0a00 	mov.w	sl, #0
 8020a68:	9b08      	ldr	r3, [sp, #32]
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d1b8      	bne.n	80209e0 <_strtod_l+0x830>
 8020a6e:	e5c9      	b.n	8020604 <_strtod_l+0x454>
 8020a70:	f04f 33ff 	mov.w	r3, #4294967295
 8020a74:	e7e8      	b.n	8020a48 <_strtod_l+0x898>
 8020a76:	4613      	mov	r3, r2
 8020a78:	e7e6      	b.n	8020a48 <_strtod_l+0x898>
 8020a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8020a7e:	d0a1      	beq.n	80209c4 <_strtod_l+0x814>
 8020a80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020a82:	b1db      	cbz	r3, 8020abc <_strtod_l+0x90c>
 8020a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a86:	4213      	tst	r3, r2
 8020a88:	d0ee      	beq.n	8020a68 <_strtod_l+0x8b8>
 8020a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a8c:	9a08      	ldr	r2, [sp, #32]
 8020a8e:	4650      	mov	r0, sl
 8020a90:	4659      	mov	r1, fp
 8020a92:	b1bb      	cbz	r3, 8020ac4 <_strtod_l+0x914>
 8020a94:	f7ff fb6c 	bl	8020170 <sulp>
 8020a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020a9c:	ec53 2b10 	vmov	r2, r3, d0
 8020aa0:	f7df fbf4 	bl	800028c <__adddf3>
 8020aa4:	4682      	mov	sl, r0
 8020aa6:	468b      	mov	fp, r1
 8020aa8:	e7de      	b.n	8020a68 <_strtod_l+0x8b8>
 8020aaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020aae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020ab2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020ab6:	f04f 3aff 	mov.w	sl, #4294967295
 8020aba:	e7d5      	b.n	8020a68 <_strtod_l+0x8b8>
 8020abc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020abe:	ea13 0f0a 	tst.w	r3, sl
 8020ac2:	e7e1      	b.n	8020a88 <_strtod_l+0x8d8>
 8020ac4:	f7ff fb54 	bl	8020170 <sulp>
 8020ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020acc:	ec53 2b10 	vmov	r2, r3, d0
 8020ad0:	f7df fbda 	bl	8000288 <__aeabi_dsub>
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	4682      	mov	sl, r0
 8020ada:	468b      	mov	fp, r1
 8020adc:	f7df fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8020ae0:	2800      	cmp	r0, #0
 8020ae2:	d0c1      	beq.n	8020a68 <_strtod_l+0x8b8>
 8020ae4:	e619      	b.n	802071a <_strtod_l+0x56a>
 8020ae6:	4641      	mov	r1, r8
 8020ae8:	4620      	mov	r0, r4
 8020aea:	f7ff fac3 	bl	8020074 <__ratio>
 8020aee:	ec57 6b10 	vmov	r6, r7, d0
 8020af2:	2200      	movs	r2, #0
 8020af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020af8:	4630      	mov	r0, r6
 8020afa:	4639      	mov	r1, r7
 8020afc:	f7df fff8 	bl	8000af0 <__aeabi_dcmple>
 8020b00:	2800      	cmp	r0, #0
 8020b02:	d06f      	beq.n	8020be4 <_strtod_l+0xa34>
 8020b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d17a      	bne.n	8020c00 <_strtod_l+0xa50>
 8020b0a:	f1ba 0f00 	cmp.w	sl, #0
 8020b0e:	d158      	bne.n	8020bc2 <_strtod_l+0xa12>
 8020b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d15a      	bne.n	8020bd0 <_strtod_l+0xa20>
 8020b1a:	4b64      	ldr	r3, [pc, #400]	@ (8020cac <_strtod_l+0xafc>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	4630      	mov	r0, r6
 8020b20:	4639      	mov	r1, r7
 8020b22:	f7df ffdb 	bl	8000adc <__aeabi_dcmplt>
 8020b26:	2800      	cmp	r0, #0
 8020b28:	d159      	bne.n	8020bde <_strtod_l+0xa2e>
 8020b2a:	4630      	mov	r0, r6
 8020b2c:	4639      	mov	r1, r7
 8020b2e:	4b60      	ldr	r3, [pc, #384]	@ (8020cb0 <_strtod_l+0xb00>)
 8020b30:	2200      	movs	r2, #0
 8020b32:	f7df fd61 	bl	80005f8 <__aeabi_dmul>
 8020b36:	4606      	mov	r6, r0
 8020b38:	460f      	mov	r7, r1
 8020b3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020b3e:	9606      	str	r6, [sp, #24]
 8020b40:	9307      	str	r3, [sp, #28]
 8020b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020b46:	4d57      	ldr	r5, [pc, #348]	@ (8020ca4 <_strtod_l+0xaf4>)
 8020b48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b4e:	401d      	ands	r5, r3
 8020b50:	4b58      	ldr	r3, [pc, #352]	@ (8020cb4 <_strtod_l+0xb04>)
 8020b52:	429d      	cmp	r5, r3
 8020b54:	f040 80b2 	bne.w	8020cbc <_strtod_l+0xb0c>
 8020b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020b5e:	ec4b ab10 	vmov	d0, sl, fp
 8020b62:	f7ff f9bf 	bl	801fee4 <__ulp>
 8020b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020b6a:	ec51 0b10 	vmov	r0, r1, d0
 8020b6e:	f7df fd43 	bl	80005f8 <__aeabi_dmul>
 8020b72:	4652      	mov	r2, sl
 8020b74:	465b      	mov	r3, fp
 8020b76:	f7df fb89 	bl	800028c <__adddf3>
 8020b7a:	460b      	mov	r3, r1
 8020b7c:	4949      	ldr	r1, [pc, #292]	@ (8020ca4 <_strtod_l+0xaf4>)
 8020b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8020cb8 <_strtod_l+0xb08>)
 8020b80:	4019      	ands	r1, r3
 8020b82:	4291      	cmp	r1, r2
 8020b84:	4682      	mov	sl, r0
 8020b86:	d942      	bls.n	8020c0e <_strtod_l+0xa5e>
 8020b88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b8a:	4b47      	ldr	r3, [pc, #284]	@ (8020ca8 <_strtod_l+0xaf8>)
 8020b8c:	429a      	cmp	r2, r3
 8020b8e:	d103      	bne.n	8020b98 <_strtod_l+0x9e8>
 8020b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b92:	3301      	adds	r3, #1
 8020b94:	f43f ad2b 	beq.w	80205ee <_strtod_l+0x43e>
 8020b98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020ca8 <_strtod_l+0xaf8>
 8020b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8020ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ba2:	9805      	ldr	r0, [sp, #20]
 8020ba4:	f7fe fe6a 	bl	801f87c <_Bfree>
 8020ba8:	9805      	ldr	r0, [sp, #20]
 8020baa:	4649      	mov	r1, r9
 8020bac:	f7fe fe66 	bl	801f87c <_Bfree>
 8020bb0:	9805      	ldr	r0, [sp, #20]
 8020bb2:	4641      	mov	r1, r8
 8020bb4:	f7fe fe62 	bl	801f87c <_Bfree>
 8020bb8:	9805      	ldr	r0, [sp, #20]
 8020bba:	4621      	mov	r1, r4
 8020bbc:	f7fe fe5e 	bl	801f87c <_Bfree>
 8020bc0:	e618      	b.n	80207f4 <_strtod_l+0x644>
 8020bc2:	f1ba 0f01 	cmp.w	sl, #1
 8020bc6:	d103      	bne.n	8020bd0 <_strtod_l+0xa20>
 8020bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	f43f ada5 	beq.w	802071a <_strtod_l+0x56a>
 8020bd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020c80 <_strtod_l+0xad0>
 8020bd4:	4f35      	ldr	r7, [pc, #212]	@ (8020cac <_strtod_l+0xafc>)
 8020bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020bda:	2600      	movs	r6, #0
 8020bdc:	e7b1      	b.n	8020b42 <_strtod_l+0x992>
 8020bde:	4f34      	ldr	r7, [pc, #208]	@ (8020cb0 <_strtod_l+0xb00>)
 8020be0:	2600      	movs	r6, #0
 8020be2:	e7aa      	b.n	8020b3a <_strtod_l+0x98a>
 8020be4:	4b32      	ldr	r3, [pc, #200]	@ (8020cb0 <_strtod_l+0xb00>)
 8020be6:	4630      	mov	r0, r6
 8020be8:	4639      	mov	r1, r7
 8020bea:	2200      	movs	r2, #0
 8020bec:	f7df fd04 	bl	80005f8 <__aeabi_dmul>
 8020bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bf2:	4606      	mov	r6, r0
 8020bf4:	460f      	mov	r7, r1
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d09f      	beq.n	8020b3a <_strtod_l+0x98a>
 8020bfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8020bfe:	e7a0      	b.n	8020b42 <_strtod_l+0x992>
 8020c00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020c88 <_strtod_l+0xad8>
 8020c04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020c08:	ec57 6b17 	vmov	r6, r7, d7
 8020c0c:	e799      	b.n	8020b42 <_strtod_l+0x992>
 8020c0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8020c12:	9b08      	ldr	r3, [sp, #32]
 8020c14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d1c1      	bne.n	8020ba0 <_strtod_l+0x9f0>
 8020c1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020c20:	0d1b      	lsrs	r3, r3, #20
 8020c22:	051b      	lsls	r3, r3, #20
 8020c24:	429d      	cmp	r5, r3
 8020c26:	d1bb      	bne.n	8020ba0 <_strtod_l+0x9f0>
 8020c28:	4630      	mov	r0, r6
 8020c2a:	4639      	mov	r1, r7
 8020c2c:	f7e0 f844 	bl	8000cb8 <__aeabi_d2lz>
 8020c30:	f7df fcb4 	bl	800059c <__aeabi_l2d>
 8020c34:	4602      	mov	r2, r0
 8020c36:	460b      	mov	r3, r1
 8020c38:	4630      	mov	r0, r6
 8020c3a:	4639      	mov	r1, r7
 8020c3c:	f7df fb24 	bl	8000288 <__aeabi_dsub>
 8020c40:	460b      	mov	r3, r1
 8020c42:	4602      	mov	r2, r0
 8020c44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020c48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c4e:	ea46 060a 	orr.w	r6, r6, sl
 8020c52:	431e      	orrs	r6, r3
 8020c54:	d06f      	beq.n	8020d36 <_strtod_l+0xb86>
 8020c56:	a30e      	add	r3, pc, #56	@ (adr r3, 8020c90 <_strtod_l+0xae0>)
 8020c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c5c:	f7df ff3e 	bl	8000adc <__aeabi_dcmplt>
 8020c60:	2800      	cmp	r0, #0
 8020c62:	f47f accf 	bne.w	8020604 <_strtod_l+0x454>
 8020c66:	a30c      	add	r3, pc, #48	@ (adr r3, 8020c98 <_strtod_l+0xae8>)
 8020c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020c70:	f7df ff52 	bl	8000b18 <__aeabi_dcmpgt>
 8020c74:	2800      	cmp	r0, #0
 8020c76:	d093      	beq.n	8020ba0 <_strtod_l+0x9f0>
 8020c78:	e4c4      	b.n	8020604 <_strtod_l+0x454>
 8020c7a:	bf00      	nop
 8020c7c:	f3af 8000 	nop.w
 8020c80:	00000000 	.word	0x00000000
 8020c84:	bff00000 	.word	0xbff00000
 8020c88:	00000000 	.word	0x00000000
 8020c8c:	3ff00000 	.word	0x3ff00000
 8020c90:	94a03595 	.word	0x94a03595
 8020c94:	3fdfffff 	.word	0x3fdfffff
 8020c98:	35afe535 	.word	0x35afe535
 8020c9c:	3fe00000 	.word	0x3fe00000
 8020ca0:	000fffff 	.word	0x000fffff
 8020ca4:	7ff00000 	.word	0x7ff00000
 8020ca8:	7fefffff 	.word	0x7fefffff
 8020cac:	3ff00000 	.word	0x3ff00000
 8020cb0:	3fe00000 	.word	0x3fe00000
 8020cb4:	7fe00000 	.word	0x7fe00000
 8020cb8:	7c9fffff 	.word	0x7c9fffff
 8020cbc:	9b08      	ldr	r3, [sp, #32]
 8020cbe:	b323      	cbz	r3, 8020d0a <_strtod_l+0xb5a>
 8020cc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8020cc4:	d821      	bhi.n	8020d0a <_strtod_l+0xb5a>
 8020cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8020d68 <_strtod_l+0xbb8>)
 8020cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ccc:	4630      	mov	r0, r6
 8020cce:	4639      	mov	r1, r7
 8020cd0:	f7df ff0e 	bl	8000af0 <__aeabi_dcmple>
 8020cd4:	b1a0      	cbz	r0, 8020d00 <_strtod_l+0xb50>
 8020cd6:	4639      	mov	r1, r7
 8020cd8:	4630      	mov	r0, r6
 8020cda:	f7df ff65 	bl	8000ba8 <__aeabi_d2uiz>
 8020cde:	2801      	cmp	r0, #1
 8020ce0:	bf38      	it	cc
 8020ce2:	2001      	movcc	r0, #1
 8020ce4:	f7df fc0e 	bl	8000504 <__aeabi_ui2d>
 8020ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cea:	4606      	mov	r6, r0
 8020cec:	460f      	mov	r7, r1
 8020cee:	b9fb      	cbnz	r3, 8020d30 <_strtod_l+0xb80>
 8020cf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020cf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8020cf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8020cf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020d06:	1b5b      	subs	r3, r3, r5
 8020d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8020d0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020d0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020d12:	f7ff f8e7 	bl	801fee4 <__ulp>
 8020d16:	4650      	mov	r0, sl
 8020d18:	ec53 2b10 	vmov	r2, r3, d0
 8020d1c:	4659      	mov	r1, fp
 8020d1e:	f7df fc6b 	bl	80005f8 <__aeabi_dmul>
 8020d22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020d26:	f7df fab1 	bl	800028c <__adddf3>
 8020d2a:	4682      	mov	sl, r0
 8020d2c:	468b      	mov	fp, r1
 8020d2e:	e770      	b.n	8020c12 <_strtod_l+0xa62>
 8020d30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020d34:	e7e0      	b.n	8020cf8 <_strtod_l+0xb48>
 8020d36:	a30e      	add	r3, pc, #56	@ (adr r3, 8020d70 <_strtod_l+0xbc0>)
 8020d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d3c:	f7df fece 	bl	8000adc <__aeabi_dcmplt>
 8020d40:	e798      	b.n	8020c74 <_strtod_l+0xac4>
 8020d42:	2300      	movs	r3, #0
 8020d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020d4a:	6013      	str	r3, [r2, #0]
 8020d4c:	f7ff ba6d 	b.w	802022a <_strtod_l+0x7a>
 8020d50:	2a65      	cmp	r2, #101	@ 0x65
 8020d52:	f43f ab66 	beq.w	8020422 <_strtod_l+0x272>
 8020d56:	2a45      	cmp	r2, #69	@ 0x45
 8020d58:	f43f ab63 	beq.w	8020422 <_strtod_l+0x272>
 8020d5c:	2301      	movs	r3, #1
 8020d5e:	f7ff bb9e 	b.w	802049e <_strtod_l+0x2ee>
 8020d62:	bf00      	nop
 8020d64:	f3af 8000 	nop.w
 8020d68:	ffc00000 	.word	0xffc00000
 8020d6c:	41dfffff 	.word	0x41dfffff
 8020d70:	94a03595 	.word	0x94a03595
 8020d74:	3fcfffff 	.word	0x3fcfffff

08020d78 <_strtod_r>:
 8020d78:	4b01      	ldr	r3, [pc, #4]	@ (8020d80 <_strtod_r+0x8>)
 8020d7a:	f7ff ba19 	b.w	80201b0 <_strtod_l>
 8020d7e:	bf00      	nop
 8020d80:	200000ac 	.word	0x200000ac

08020d84 <__ssputs_r>:
 8020d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d88:	688e      	ldr	r6, [r1, #8]
 8020d8a:	461f      	mov	r7, r3
 8020d8c:	42be      	cmp	r6, r7
 8020d8e:	680b      	ldr	r3, [r1, #0]
 8020d90:	4682      	mov	sl, r0
 8020d92:	460c      	mov	r4, r1
 8020d94:	4690      	mov	r8, r2
 8020d96:	d82d      	bhi.n	8020df4 <__ssputs_r+0x70>
 8020d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020da0:	d026      	beq.n	8020df0 <__ssputs_r+0x6c>
 8020da2:	6965      	ldr	r5, [r4, #20]
 8020da4:	6909      	ldr	r1, [r1, #16]
 8020da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020daa:	eba3 0901 	sub.w	r9, r3, r1
 8020dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020db2:	1c7b      	adds	r3, r7, #1
 8020db4:	444b      	add	r3, r9
 8020db6:	106d      	asrs	r5, r5, #1
 8020db8:	429d      	cmp	r5, r3
 8020dba:	bf38      	it	cc
 8020dbc:	461d      	movcc	r5, r3
 8020dbe:	0553      	lsls	r3, r2, #21
 8020dc0:	d527      	bpl.n	8020e12 <__ssputs_r+0x8e>
 8020dc2:	4629      	mov	r1, r5
 8020dc4:	f7fc fa60 	bl	801d288 <_malloc_r>
 8020dc8:	4606      	mov	r6, r0
 8020dca:	b360      	cbz	r0, 8020e26 <__ssputs_r+0xa2>
 8020dcc:	6921      	ldr	r1, [r4, #16]
 8020dce:	464a      	mov	r2, r9
 8020dd0:	f7fd fe49 	bl	801ea66 <memcpy>
 8020dd4:	89a3      	ldrh	r3, [r4, #12]
 8020dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020dde:	81a3      	strh	r3, [r4, #12]
 8020de0:	6126      	str	r6, [r4, #16]
 8020de2:	6165      	str	r5, [r4, #20]
 8020de4:	444e      	add	r6, r9
 8020de6:	eba5 0509 	sub.w	r5, r5, r9
 8020dea:	6026      	str	r6, [r4, #0]
 8020dec:	60a5      	str	r5, [r4, #8]
 8020dee:	463e      	mov	r6, r7
 8020df0:	42be      	cmp	r6, r7
 8020df2:	d900      	bls.n	8020df6 <__ssputs_r+0x72>
 8020df4:	463e      	mov	r6, r7
 8020df6:	6820      	ldr	r0, [r4, #0]
 8020df8:	4632      	mov	r2, r6
 8020dfa:	4641      	mov	r1, r8
 8020dfc:	f7fd fcb6 	bl	801e76c <memmove>
 8020e00:	68a3      	ldr	r3, [r4, #8]
 8020e02:	1b9b      	subs	r3, r3, r6
 8020e04:	60a3      	str	r3, [r4, #8]
 8020e06:	6823      	ldr	r3, [r4, #0]
 8020e08:	4433      	add	r3, r6
 8020e0a:	6023      	str	r3, [r4, #0]
 8020e0c:	2000      	movs	r0, #0
 8020e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e12:	462a      	mov	r2, r5
 8020e14:	f7fc fb02 	bl	801d41c <_realloc_r>
 8020e18:	4606      	mov	r6, r0
 8020e1a:	2800      	cmp	r0, #0
 8020e1c:	d1e0      	bne.n	8020de0 <__ssputs_r+0x5c>
 8020e1e:	6921      	ldr	r1, [r4, #16]
 8020e20:	4650      	mov	r0, sl
 8020e22:	f7fe fca1 	bl	801f768 <_free_r>
 8020e26:	230c      	movs	r3, #12
 8020e28:	f8ca 3000 	str.w	r3, [sl]
 8020e2c:	89a3      	ldrh	r3, [r4, #12]
 8020e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020e32:	81a3      	strh	r3, [r4, #12]
 8020e34:	f04f 30ff 	mov.w	r0, #4294967295
 8020e38:	e7e9      	b.n	8020e0e <__ssputs_r+0x8a>
	...

08020e3c <_svfiprintf_r>:
 8020e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e40:	4698      	mov	r8, r3
 8020e42:	898b      	ldrh	r3, [r1, #12]
 8020e44:	061b      	lsls	r3, r3, #24
 8020e46:	b09d      	sub	sp, #116	@ 0x74
 8020e48:	4607      	mov	r7, r0
 8020e4a:	460d      	mov	r5, r1
 8020e4c:	4614      	mov	r4, r2
 8020e4e:	d510      	bpl.n	8020e72 <_svfiprintf_r+0x36>
 8020e50:	690b      	ldr	r3, [r1, #16]
 8020e52:	b973      	cbnz	r3, 8020e72 <_svfiprintf_r+0x36>
 8020e54:	2140      	movs	r1, #64	@ 0x40
 8020e56:	f7fc fa17 	bl	801d288 <_malloc_r>
 8020e5a:	6028      	str	r0, [r5, #0]
 8020e5c:	6128      	str	r0, [r5, #16]
 8020e5e:	b930      	cbnz	r0, 8020e6e <_svfiprintf_r+0x32>
 8020e60:	230c      	movs	r3, #12
 8020e62:	603b      	str	r3, [r7, #0]
 8020e64:	f04f 30ff 	mov.w	r0, #4294967295
 8020e68:	b01d      	add	sp, #116	@ 0x74
 8020e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e6e:	2340      	movs	r3, #64	@ 0x40
 8020e70:	616b      	str	r3, [r5, #20]
 8020e72:	2300      	movs	r3, #0
 8020e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e76:	2320      	movs	r3, #32
 8020e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020e80:	2330      	movs	r3, #48	@ 0x30
 8020e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021020 <_svfiprintf_r+0x1e4>
 8020e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020e8a:	f04f 0901 	mov.w	r9, #1
 8020e8e:	4623      	mov	r3, r4
 8020e90:	469a      	mov	sl, r3
 8020e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e96:	b10a      	cbz	r2, 8020e9c <_svfiprintf_r+0x60>
 8020e98:	2a25      	cmp	r2, #37	@ 0x25
 8020e9a:	d1f9      	bne.n	8020e90 <_svfiprintf_r+0x54>
 8020e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8020ea0:	d00b      	beq.n	8020eba <_svfiprintf_r+0x7e>
 8020ea2:	465b      	mov	r3, fp
 8020ea4:	4622      	mov	r2, r4
 8020ea6:	4629      	mov	r1, r5
 8020ea8:	4638      	mov	r0, r7
 8020eaa:	f7ff ff6b 	bl	8020d84 <__ssputs_r>
 8020eae:	3001      	adds	r0, #1
 8020eb0:	f000 80a7 	beq.w	8021002 <_svfiprintf_r+0x1c6>
 8020eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020eb6:	445a      	add	r2, fp
 8020eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8020eba:	f89a 3000 	ldrb.w	r3, [sl]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	f000 809f 	beq.w	8021002 <_svfiprintf_r+0x1c6>
 8020ec4:	2300      	movs	r3, #0
 8020ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8020eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020ece:	f10a 0a01 	add.w	sl, sl, #1
 8020ed2:	9304      	str	r3, [sp, #16]
 8020ed4:	9307      	str	r3, [sp, #28]
 8020ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8020edc:	4654      	mov	r4, sl
 8020ede:	2205      	movs	r2, #5
 8020ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ee4:	484e      	ldr	r0, [pc, #312]	@ (8021020 <_svfiprintf_r+0x1e4>)
 8020ee6:	f7df f973 	bl	80001d0 <memchr>
 8020eea:	9a04      	ldr	r2, [sp, #16]
 8020eec:	b9d8      	cbnz	r0, 8020f26 <_svfiprintf_r+0xea>
 8020eee:	06d0      	lsls	r0, r2, #27
 8020ef0:	bf44      	itt	mi
 8020ef2:	2320      	movmi	r3, #32
 8020ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020ef8:	0711      	lsls	r1, r2, #28
 8020efa:	bf44      	itt	mi
 8020efc:	232b      	movmi	r3, #43	@ 0x2b
 8020efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020f02:	f89a 3000 	ldrb.w	r3, [sl]
 8020f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8020f08:	d015      	beq.n	8020f36 <_svfiprintf_r+0xfa>
 8020f0a:	9a07      	ldr	r2, [sp, #28]
 8020f0c:	4654      	mov	r4, sl
 8020f0e:	2000      	movs	r0, #0
 8020f10:	f04f 0c0a 	mov.w	ip, #10
 8020f14:	4621      	mov	r1, r4
 8020f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020f1a:	3b30      	subs	r3, #48	@ 0x30
 8020f1c:	2b09      	cmp	r3, #9
 8020f1e:	d94b      	bls.n	8020fb8 <_svfiprintf_r+0x17c>
 8020f20:	b1b0      	cbz	r0, 8020f50 <_svfiprintf_r+0x114>
 8020f22:	9207      	str	r2, [sp, #28]
 8020f24:	e014      	b.n	8020f50 <_svfiprintf_r+0x114>
 8020f26:	eba0 0308 	sub.w	r3, r0, r8
 8020f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8020f2e:	4313      	orrs	r3, r2
 8020f30:	9304      	str	r3, [sp, #16]
 8020f32:	46a2      	mov	sl, r4
 8020f34:	e7d2      	b.n	8020edc <_svfiprintf_r+0xa0>
 8020f36:	9b03      	ldr	r3, [sp, #12]
 8020f38:	1d19      	adds	r1, r3, #4
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	9103      	str	r1, [sp, #12]
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	bfbb      	ittet	lt
 8020f42:	425b      	neglt	r3, r3
 8020f44:	f042 0202 	orrlt.w	r2, r2, #2
 8020f48:	9307      	strge	r3, [sp, #28]
 8020f4a:	9307      	strlt	r3, [sp, #28]
 8020f4c:	bfb8      	it	lt
 8020f4e:	9204      	strlt	r2, [sp, #16]
 8020f50:	7823      	ldrb	r3, [r4, #0]
 8020f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8020f54:	d10a      	bne.n	8020f6c <_svfiprintf_r+0x130>
 8020f56:	7863      	ldrb	r3, [r4, #1]
 8020f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8020f5a:	d132      	bne.n	8020fc2 <_svfiprintf_r+0x186>
 8020f5c:	9b03      	ldr	r3, [sp, #12]
 8020f5e:	1d1a      	adds	r2, r3, #4
 8020f60:	681b      	ldr	r3, [r3, #0]
 8020f62:	9203      	str	r2, [sp, #12]
 8020f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020f68:	3402      	adds	r4, #2
 8020f6a:	9305      	str	r3, [sp, #20]
 8020f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021030 <_svfiprintf_r+0x1f4>
 8020f70:	7821      	ldrb	r1, [r4, #0]
 8020f72:	2203      	movs	r2, #3
 8020f74:	4650      	mov	r0, sl
 8020f76:	f7df f92b 	bl	80001d0 <memchr>
 8020f7a:	b138      	cbz	r0, 8020f8c <_svfiprintf_r+0x150>
 8020f7c:	9b04      	ldr	r3, [sp, #16]
 8020f7e:	eba0 000a 	sub.w	r0, r0, sl
 8020f82:	2240      	movs	r2, #64	@ 0x40
 8020f84:	4082      	lsls	r2, r0
 8020f86:	4313      	orrs	r3, r2
 8020f88:	3401      	adds	r4, #1
 8020f8a:	9304      	str	r3, [sp, #16]
 8020f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f90:	4824      	ldr	r0, [pc, #144]	@ (8021024 <_svfiprintf_r+0x1e8>)
 8020f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020f96:	2206      	movs	r2, #6
 8020f98:	f7df f91a 	bl	80001d0 <memchr>
 8020f9c:	2800      	cmp	r0, #0
 8020f9e:	d036      	beq.n	802100e <_svfiprintf_r+0x1d2>
 8020fa0:	4b21      	ldr	r3, [pc, #132]	@ (8021028 <_svfiprintf_r+0x1ec>)
 8020fa2:	bb1b      	cbnz	r3, 8020fec <_svfiprintf_r+0x1b0>
 8020fa4:	9b03      	ldr	r3, [sp, #12]
 8020fa6:	3307      	adds	r3, #7
 8020fa8:	f023 0307 	bic.w	r3, r3, #7
 8020fac:	3308      	adds	r3, #8
 8020fae:	9303      	str	r3, [sp, #12]
 8020fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fb2:	4433      	add	r3, r6
 8020fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fb6:	e76a      	b.n	8020e8e <_svfiprintf_r+0x52>
 8020fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8020fbc:	460c      	mov	r4, r1
 8020fbe:	2001      	movs	r0, #1
 8020fc0:	e7a8      	b.n	8020f14 <_svfiprintf_r+0xd8>
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	3401      	adds	r4, #1
 8020fc6:	9305      	str	r3, [sp, #20]
 8020fc8:	4619      	mov	r1, r3
 8020fca:	f04f 0c0a 	mov.w	ip, #10
 8020fce:	4620      	mov	r0, r4
 8020fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fd4:	3a30      	subs	r2, #48	@ 0x30
 8020fd6:	2a09      	cmp	r2, #9
 8020fd8:	d903      	bls.n	8020fe2 <_svfiprintf_r+0x1a6>
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d0c6      	beq.n	8020f6c <_svfiprintf_r+0x130>
 8020fde:	9105      	str	r1, [sp, #20]
 8020fe0:	e7c4      	b.n	8020f6c <_svfiprintf_r+0x130>
 8020fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8020fe6:	4604      	mov	r4, r0
 8020fe8:	2301      	movs	r3, #1
 8020fea:	e7f0      	b.n	8020fce <_svfiprintf_r+0x192>
 8020fec:	ab03      	add	r3, sp, #12
 8020fee:	9300      	str	r3, [sp, #0]
 8020ff0:	462a      	mov	r2, r5
 8020ff2:	4b0e      	ldr	r3, [pc, #56]	@ (802102c <_svfiprintf_r+0x1f0>)
 8020ff4:	a904      	add	r1, sp, #16
 8020ff6:	4638      	mov	r0, r7
 8020ff8:	f7fc fb64 	bl	801d6c4 <_printf_float>
 8020ffc:	1c42      	adds	r2, r0, #1
 8020ffe:	4606      	mov	r6, r0
 8021000:	d1d6      	bne.n	8020fb0 <_svfiprintf_r+0x174>
 8021002:	89ab      	ldrh	r3, [r5, #12]
 8021004:	065b      	lsls	r3, r3, #25
 8021006:	f53f af2d 	bmi.w	8020e64 <_svfiprintf_r+0x28>
 802100a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802100c:	e72c      	b.n	8020e68 <_svfiprintf_r+0x2c>
 802100e:	ab03      	add	r3, sp, #12
 8021010:	9300      	str	r3, [sp, #0]
 8021012:	462a      	mov	r2, r5
 8021014:	4b05      	ldr	r3, [pc, #20]	@ (802102c <_svfiprintf_r+0x1f0>)
 8021016:	a904      	add	r1, sp, #16
 8021018:	4638      	mov	r0, r7
 802101a:	f7fc fdeb 	bl	801dbf4 <_printf_i>
 802101e:	e7ed      	b.n	8020ffc <_svfiprintf_r+0x1c0>
 8021020:	08025640 	.word	0x08025640
 8021024:	0802564a 	.word	0x0802564a
 8021028:	0801d6c5 	.word	0x0801d6c5
 802102c:	08020d85 	.word	0x08020d85
 8021030:	08025646 	.word	0x08025646

08021034 <__sfputc_r>:
 8021034:	6893      	ldr	r3, [r2, #8]
 8021036:	3b01      	subs	r3, #1
 8021038:	2b00      	cmp	r3, #0
 802103a:	b410      	push	{r4}
 802103c:	6093      	str	r3, [r2, #8]
 802103e:	da08      	bge.n	8021052 <__sfputc_r+0x1e>
 8021040:	6994      	ldr	r4, [r2, #24]
 8021042:	42a3      	cmp	r3, r4
 8021044:	db01      	blt.n	802104a <__sfputc_r+0x16>
 8021046:	290a      	cmp	r1, #10
 8021048:	d103      	bne.n	8021052 <__sfputc_r+0x1e>
 802104a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802104e:	f7fd bae8 	b.w	801e622 <__swbuf_r>
 8021052:	6813      	ldr	r3, [r2, #0]
 8021054:	1c58      	adds	r0, r3, #1
 8021056:	6010      	str	r0, [r2, #0]
 8021058:	7019      	strb	r1, [r3, #0]
 802105a:	4608      	mov	r0, r1
 802105c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021060:	4770      	bx	lr

08021062 <__sfputs_r>:
 8021062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021064:	4606      	mov	r6, r0
 8021066:	460f      	mov	r7, r1
 8021068:	4614      	mov	r4, r2
 802106a:	18d5      	adds	r5, r2, r3
 802106c:	42ac      	cmp	r4, r5
 802106e:	d101      	bne.n	8021074 <__sfputs_r+0x12>
 8021070:	2000      	movs	r0, #0
 8021072:	e007      	b.n	8021084 <__sfputs_r+0x22>
 8021074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021078:	463a      	mov	r2, r7
 802107a:	4630      	mov	r0, r6
 802107c:	f7ff ffda 	bl	8021034 <__sfputc_r>
 8021080:	1c43      	adds	r3, r0, #1
 8021082:	d1f3      	bne.n	802106c <__sfputs_r+0xa>
 8021084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021088 <_vfiprintf_r>:
 8021088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802108c:	460d      	mov	r5, r1
 802108e:	b09d      	sub	sp, #116	@ 0x74
 8021090:	4614      	mov	r4, r2
 8021092:	4698      	mov	r8, r3
 8021094:	4606      	mov	r6, r0
 8021096:	b118      	cbz	r0, 80210a0 <_vfiprintf_r+0x18>
 8021098:	6a03      	ldr	r3, [r0, #32]
 802109a:	b90b      	cbnz	r3, 80210a0 <_vfiprintf_r+0x18>
 802109c:	f7fd fa16 	bl	801e4cc <__sinit>
 80210a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80210a2:	07d9      	lsls	r1, r3, #31
 80210a4:	d405      	bmi.n	80210b2 <_vfiprintf_r+0x2a>
 80210a6:	89ab      	ldrh	r3, [r5, #12]
 80210a8:	059a      	lsls	r2, r3, #22
 80210aa:	d402      	bmi.n	80210b2 <_vfiprintf_r+0x2a>
 80210ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80210ae:	f7fd fcd0 	bl	801ea52 <__retarget_lock_acquire_recursive>
 80210b2:	89ab      	ldrh	r3, [r5, #12]
 80210b4:	071b      	lsls	r3, r3, #28
 80210b6:	d501      	bpl.n	80210bc <_vfiprintf_r+0x34>
 80210b8:	692b      	ldr	r3, [r5, #16]
 80210ba:	b99b      	cbnz	r3, 80210e4 <_vfiprintf_r+0x5c>
 80210bc:	4629      	mov	r1, r5
 80210be:	4630      	mov	r0, r6
 80210c0:	f7fd faee 	bl	801e6a0 <__swsetup_r>
 80210c4:	b170      	cbz	r0, 80210e4 <_vfiprintf_r+0x5c>
 80210c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80210c8:	07dc      	lsls	r4, r3, #31
 80210ca:	d504      	bpl.n	80210d6 <_vfiprintf_r+0x4e>
 80210cc:	f04f 30ff 	mov.w	r0, #4294967295
 80210d0:	b01d      	add	sp, #116	@ 0x74
 80210d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210d6:	89ab      	ldrh	r3, [r5, #12]
 80210d8:	0598      	lsls	r0, r3, #22
 80210da:	d4f7      	bmi.n	80210cc <_vfiprintf_r+0x44>
 80210dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80210de:	f7fd fcb9 	bl	801ea54 <__retarget_lock_release_recursive>
 80210e2:	e7f3      	b.n	80210cc <_vfiprintf_r+0x44>
 80210e4:	2300      	movs	r3, #0
 80210e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80210e8:	2320      	movs	r3, #32
 80210ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80210ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80210f2:	2330      	movs	r3, #48	@ 0x30
 80210f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80212a4 <_vfiprintf_r+0x21c>
 80210f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80210fc:	f04f 0901 	mov.w	r9, #1
 8021100:	4623      	mov	r3, r4
 8021102:	469a      	mov	sl, r3
 8021104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021108:	b10a      	cbz	r2, 802110e <_vfiprintf_r+0x86>
 802110a:	2a25      	cmp	r2, #37	@ 0x25
 802110c:	d1f9      	bne.n	8021102 <_vfiprintf_r+0x7a>
 802110e:	ebba 0b04 	subs.w	fp, sl, r4
 8021112:	d00b      	beq.n	802112c <_vfiprintf_r+0xa4>
 8021114:	465b      	mov	r3, fp
 8021116:	4622      	mov	r2, r4
 8021118:	4629      	mov	r1, r5
 802111a:	4630      	mov	r0, r6
 802111c:	f7ff ffa1 	bl	8021062 <__sfputs_r>
 8021120:	3001      	adds	r0, #1
 8021122:	f000 80a7 	beq.w	8021274 <_vfiprintf_r+0x1ec>
 8021126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021128:	445a      	add	r2, fp
 802112a:	9209      	str	r2, [sp, #36]	@ 0x24
 802112c:	f89a 3000 	ldrb.w	r3, [sl]
 8021130:	2b00      	cmp	r3, #0
 8021132:	f000 809f 	beq.w	8021274 <_vfiprintf_r+0x1ec>
 8021136:	2300      	movs	r3, #0
 8021138:	f04f 32ff 	mov.w	r2, #4294967295
 802113c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021140:	f10a 0a01 	add.w	sl, sl, #1
 8021144:	9304      	str	r3, [sp, #16]
 8021146:	9307      	str	r3, [sp, #28]
 8021148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802114c:	931a      	str	r3, [sp, #104]	@ 0x68
 802114e:	4654      	mov	r4, sl
 8021150:	2205      	movs	r2, #5
 8021152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021156:	4853      	ldr	r0, [pc, #332]	@ (80212a4 <_vfiprintf_r+0x21c>)
 8021158:	f7df f83a 	bl	80001d0 <memchr>
 802115c:	9a04      	ldr	r2, [sp, #16]
 802115e:	b9d8      	cbnz	r0, 8021198 <_vfiprintf_r+0x110>
 8021160:	06d1      	lsls	r1, r2, #27
 8021162:	bf44      	itt	mi
 8021164:	2320      	movmi	r3, #32
 8021166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802116a:	0713      	lsls	r3, r2, #28
 802116c:	bf44      	itt	mi
 802116e:	232b      	movmi	r3, #43	@ 0x2b
 8021170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021174:	f89a 3000 	ldrb.w	r3, [sl]
 8021178:	2b2a      	cmp	r3, #42	@ 0x2a
 802117a:	d015      	beq.n	80211a8 <_vfiprintf_r+0x120>
 802117c:	9a07      	ldr	r2, [sp, #28]
 802117e:	4654      	mov	r4, sl
 8021180:	2000      	movs	r0, #0
 8021182:	f04f 0c0a 	mov.w	ip, #10
 8021186:	4621      	mov	r1, r4
 8021188:	f811 3b01 	ldrb.w	r3, [r1], #1
 802118c:	3b30      	subs	r3, #48	@ 0x30
 802118e:	2b09      	cmp	r3, #9
 8021190:	d94b      	bls.n	802122a <_vfiprintf_r+0x1a2>
 8021192:	b1b0      	cbz	r0, 80211c2 <_vfiprintf_r+0x13a>
 8021194:	9207      	str	r2, [sp, #28]
 8021196:	e014      	b.n	80211c2 <_vfiprintf_r+0x13a>
 8021198:	eba0 0308 	sub.w	r3, r0, r8
 802119c:	fa09 f303 	lsl.w	r3, r9, r3
 80211a0:	4313      	orrs	r3, r2
 80211a2:	9304      	str	r3, [sp, #16]
 80211a4:	46a2      	mov	sl, r4
 80211a6:	e7d2      	b.n	802114e <_vfiprintf_r+0xc6>
 80211a8:	9b03      	ldr	r3, [sp, #12]
 80211aa:	1d19      	adds	r1, r3, #4
 80211ac:	681b      	ldr	r3, [r3, #0]
 80211ae:	9103      	str	r1, [sp, #12]
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	bfbb      	ittet	lt
 80211b4:	425b      	neglt	r3, r3
 80211b6:	f042 0202 	orrlt.w	r2, r2, #2
 80211ba:	9307      	strge	r3, [sp, #28]
 80211bc:	9307      	strlt	r3, [sp, #28]
 80211be:	bfb8      	it	lt
 80211c0:	9204      	strlt	r2, [sp, #16]
 80211c2:	7823      	ldrb	r3, [r4, #0]
 80211c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80211c6:	d10a      	bne.n	80211de <_vfiprintf_r+0x156>
 80211c8:	7863      	ldrb	r3, [r4, #1]
 80211ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80211cc:	d132      	bne.n	8021234 <_vfiprintf_r+0x1ac>
 80211ce:	9b03      	ldr	r3, [sp, #12]
 80211d0:	1d1a      	adds	r2, r3, #4
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	9203      	str	r2, [sp, #12]
 80211d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80211da:	3402      	adds	r4, #2
 80211dc:	9305      	str	r3, [sp, #20]
 80211de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80212b4 <_vfiprintf_r+0x22c>
 80211e2:	7821      	ldrb	r1, [r4, #0]
 80211e4:	2203      	movs	r2, #3
 80211e6:	4650      	mov	r0, sl
 80211e8:	f7de fff2 	bl	80001d0 <memchr>
 80211ec:	b138      	cbz	r0, 80211fe <_vfiprintf_r+0x176>
 80211ee:	9b04      	ldr	r3, [sp, #16]
 80211f0:	eba0 000a 	sub.w	r0, r0, sl
 80211f4:	2240      	movs	r2, #64	@ 0x40
 80211f6:	4082      	lsls	r2, r0
 80211f8:	4313      	orrs	r3, r2
 80211fa:	3401      	adds	r4, #1
 80211fc:	9304      	str	r3, [sp, #16]
 80211fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021202:	4829      	ldr	r0, [pc, #164]	@ (80212a8 <_vfiprintf_r+0x220>)
 8021204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021208:	2206      	movs	r2, #6
 802120a:	f7de ffe1 	bl	80001d0 <memchr>
 802120e:	2800      	cmp	r0, #0
 8021210:	d03f      	beq.n	8021292 <_vfiprintf_r+0x20a>
 8021212:	4b26      	ldr	r3, [pc, #152]	@ (80212ac <_vfiprintf_r+0x224>)
 8021214:	bb1b      	cbnz	r3, 802125e <_vfiprintf_r+0x1d6>
 8021216:	9b03      	ldr	r3, [sp, #12]
 8021218:	3307      	adds	r3, #7
 802121a:	f023 0307 	bic.w	r3, r3, #7
 802121e:	3308      	adds	r3, #8
 8021220:	9303      	str	r3, [sp, #12]
 8021222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021224:	443b      	add	r3, r7
 8021226:	9309      	str	r3, [sp, #36]	@ 0x24
 8021228:	e76a      	b.n	8021100 <_vfiprintf_r+0x78>
 802122a:	fb0c 3202 	mla	r2, ip, r2, r3
 802122e:	460c      	mov	r4, r1
 8021230:	2001      	movs	r0, #1
 8021232:	e7a8      	b.n	8021186 <_vfiprintf_r+0xfe>
 8021234:	2300      	movs	r3, #0
 8021236:	3401      	adds	r4, #1
 8021238:	9305      	str	r3, [sp, #20]
 802123a:	4619      	mov	r1, r3
 802123c:	f04f 0c0a 	mov.w	ip, #10
 8021240:	4620      	mov	r0, r4
 8021242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021246:	3a30      	subs	r2, #48	@ 0x30
 8021248:	2a09      	cmp	r2, #9
 802124a:	d903      	bls.n	8021254 <_vfiprintf_r+0x1cc>
 802124c:	2b00      	cmp	r3, #0
 802124e:	d0c6      	beq.n	80211de <_vfiprintf_r+0x156>
 8021250:	9105      	str	r1, [sp, #20]
 8021252:	e7c4      	b.n	80211de <_vfiprintf_r+0x156>
 8021254:	fb0c 2101 	mla	r1, ip, r1, r2
 8021258:	4604      	mov	r4, r0
 802125a:	2301      	movs	r3, #1
 802125c:	e7f0      	b.n	8021240 <_vfiprintf_r+0x1b8>
 802125e:	ab03      	add	r3, sp, #12
 8021260:	9300      	str	r3, [sp, #0]
 8021262:	462a      	mov	r2, r5
 8021264:	4b12      	ldr	r3, [pc, #72]	@ (80212b0 <_vfiprintf_r+0x228>)
 8021266:	a904      	add	r1, sp, #16
 8021268:	4630      	mov	r0, r6
 802126a:	f7fc fa2b 	bl	801d6c4 <_printf_float>
 802126e:	4607      	mov	r7, r0
 8021270:	1c78      	adds	r0, r7, #1
 8021272:	d1d6      	bne.n	8021222 <_vfiprintf_r+0x19a>
 8021274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021276:	07d9      	lsls	r1, r3, #31
 8021278:	d405      	bmi.n	8021286 <_vfiprintf_r+0x1fe>
 802127a:	89ab      	ldrh	r3, [r5, #12]
 802127c:	059a      	lsls	r2, r3, #22
 802127e:	d402      	bmi.n	8021286 <_vfiprintf_r+0x1fe>
 8021280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021282:	f7fd fbe7 	bl	801ea54 <__retarget_lock_release_recursive>
 8021286:	89ab      	ldrh	r3, [r5, #12]
 8021288:	065b      	lsls	r3, r3, #25
 802128a:	f53f af1f 	bmi.w	80210cc <_vfiprintf_r+0x44>
 802128e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021290:	e71e      	b.n	80210d0 <_vfiprintf_r+0x48>
 8021292:	ab03      	add	r3, sp, #12
 8021294:	9300      	str	r3, [sp, #0]
 8021296:	462a      	mov	r2, r5
 8021298:	4b05      	ldr	r3, [pc, #20]	@ (80212b0 <_vfiprintf_r+0x228>)
 802129a:	a904      	add	r1, sp, #16
 802129c:	4630      	mov	r0, r6
 802129e:	f7fc fca9 	bl	801dbf4 <_printf_i>
 80212a2:	e7e4      	b.n	802126e <_vfiprintf_r+0x1e6>
 80212a4:	08025640 	.word	0x08025640
 80212a8:	0802564a 	.word	0x0802564a
 80212ac:	0801d6c5 	.word	0x0801d6c5
 80212b0:	08021063 	.word	0x08021063
 80212b4:	08025646 	.word	0x08025646

080212b8 <fiprintf>:
 80212b8:	b40e      	push	{r1, r2, r3}
 80212ba:	b503      	push	{r0, r1, lr}
 80212bc:	4601      	mov	r1, r0
 80212be:	ab03      	add	r3, sp, #12
 80212c0:	4805      	ldr	r0, [pc, #20]	@ (80212d8 <fiprintf+0x20>)
 80212c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80212c6:	6800      	ldr	r0, [r0, #0]
 80212c8:	9301      	str	r3, [sp, #4]
 80212ca:	f7ff fedd 	bl	8021088 <_vfiprintf_r>
 80212ce:	b002      	add	sp, #8
 80212d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80212d4:	b003      	add	sp, #12
 80212d6:	4770      	bx	lr
 80212d8:	2000005c 	.word	0x2000005c

080212dc <__swhatbuf_r>:
 80212dc:	b570      	push	{r4, r5, r6, lr}
 80212de:	460c      	mov	r4, r1
 80212e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80212e4:	2900      	cmp	r1, #0
 80212e6:	b096      	sub	sp, #88	@ 0x58
 80212e8:	4615      	mov	r5, r2
 80212ea:	461e      	mov	r6, r3
 80212ec:	da0d      	bge.n	802130a <__swhatbuf_r+0x2e>
 80212ee:	89a3      	ldrh	r3, [r4, #12]
 80212f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80212f4:	f04f 0100 	mov.w	r1, #0
 80212f8:	bf14      	ite	ne
 80212fa:	2340      	movne	r3, #64	@ 0x40
 80212fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021300:	2000      	movs	r0, #0
 8021302:	6031      	str	r1, [r6, #0]
 8021304:	602b      	str	r3, [r5, #0]
 8021306:	b016      	add	sp, #88	@ 0x58
 8021308:	bd70      	pop	{r4, r5, r6, pc}
 802130a:	466a      	mov	r2, sp
 802130c:	f000 f848 	bl	80213a0 <_fstat_r>
 8021310:	2800      	cmp	r0, #0
 8021312:	dbec      	blt.n	80212ee <__swhatbuf_r+0x12>
 8021314:	9901      	ldr	r1, [sp, #4]
 8021316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802131a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802131e:	4259      	negs	r1, r3
 8021320:	4159      	adcs	r1, r3
 8021322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021326:	e7eb      	b.n	8021300 <__swhatbuf_r+0x24>

08021328 <__smakebuf_r>:
 8021328:	898b      	ldrh	r3, [r1, #12]
 802132a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802132c:	079d      	lsls	r5, r3, #30
 802132e:	4606      	mov	r6, r0
 8021330:	460c      	mov	r4, r1
 8021332:	d507      	bpl.n	8021344 <__smakebuf_r+0x1c>
 8021334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021338:	6023      	str	r3, [r4, #0]
 802133a:	6123      	str	r3, [r4, #16]
 802133c:	2301      	movs	r3, #1
 802133e:	6163      	str	r3, [r4, #20]
 8021340:	b003      	add	sp, #12
 8021342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021344:	ab01      	add	r3, sp, #4
 8021346:	466a      	mov	r2, sp
 8021348:	f7ff ffc8 	bl	80212dc <__swhatbuf_r>
 802134c:	9f00      	ldr	r7, [sp, #0]
 802134e:	4605      	mov	r5, r0
 8021350:	4639      	mov	r1, r7
 8021352:	4630      	mov	r0, r6
 8021354:	f7fb ff98 	bl	801d288 <_malloc_r>
 8021358:	b948      	cbnz	r0, 802136e <__smakebuf_r+0x46>
 802135a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802135e:	059a      	lsls	r2, r3, #22
 8021360:	d4ee      	bmi.n	8021340 <__smakebuf_r+0x18>
 8021362:	f023 0303 	bic.w	r3, r3, #3
 8021366:	f043 0302 	orr.w	r3, r3, #2
 802136a:	81a3      	strh	r3, [r4, #12]
 802136c:	e7e2      	b.n	8021334 <__smakebuf_r+0xc>
 802136e:	89a3      	ldrh	r3, [r4, #12]
 8021370:	6020      	str	r0, [r4, #0]
 8021372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021376:	81a3      	strh	r3, [r4, #12]
 8021378:	9b01      	ldr	r3, [sp, #4]
 802137a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802137e:	b15b      	cbz	r3, 8021398 <__smakebuf_r+0x70>
 8021380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021384:	4630      	mov	r0, r6
 8021386:	f000 f81d 	bl	80213c4 <_isatty_r>
 802138a:	b128      	cbz	r0, 8021398 <__smakebuf_r+0x70>
 802138c:	89a3      	ldrh	r3, [r4, #12]
 802138e:	f023 0303 	bic.w	r3, r3, #3
 8021392:	f043 0301 	orr.w	r3, r3, #1
 8021396:	81a3      	strh	r3, [r4, #12]
 8021398:	89a3      	ldrh	r3, [r4, #12]
 802139a:	431d      	orrs	r5, r3
 802139c:	81a5      	strh	r5, [r4, #12]
 802139e:	e7cf      	b.n	8021340 <__smakebuf_r+0x18>

080213a0 <_fstat_r>:
 80213a0:	b538      	push	{r3, r4, r5, lr}
 80213a2:	4d07      	ldr	r5, [pc, #28]	@ (80213c0 <_fstat_r+0x20>)
 80213a4:	2300      	movs	r3, #0
 80213a6:	4604      	mov	r4, r0
 80213a8:	4608      	mov	r0, r1
 80213aa:	4611      	mov	r1, r2
 80213ac:	602b      	str	r3, [r5, #0]
 80213ae:	f7e0 fec3 	bl	8002138 <_fstat>
 80213b2:	1c43      	adds	r3, r0, #1
 80213b4:	d102      	bne.n	80213bc <_fstat_r+0x1c>
 80213b6:	682b      	ldr	r3, [r5, #0]
 80213b8:	b103      	cbz	r3, 80213bc <_fstat_r+0x1c>
 80213ba:	6023      	str	r3, [r4, #0]
 80213bc:	bd38      	pop	{r3, r4, r5, pc}
 80213be:	bf00      	nop
 80213c0:	20017a3c 	.word	0x20017a3c

080213c4 <_isatty_r>:
 80213c4:	b538      	push	{r3, r4, r5, lr}
 80213c6:	4d06      	ldr	r5, [pc, #24]	@ (80213e0 <_isatty_r+0x1c>)
 80213c8:	2300      	movs	r3, #0
 80213ca:	4604      	mov	r4, r0
 80213cc:	4608      	mov	r0, r1
 80213ce:	602b      	str	r3, [r5, #0]
 80213d0:	f7e0 fec2 	bl	8002158 <_isatty>
 80213d4:	1c43      	adds	r3, r0, #1
 80213d6:	d102      	bne.n	80213de <_isatty_r+0x1a>
 80213d8:	682b      	ldr	r3, [r5, #0]
 80213da:	b103      	cbz	r3, 80213de <_isatty_r+0x1a>
 80213dc:	6023      	str	r3, [r4, #0]
 80213de:	bd38      	pop	{r3, r4, r5, pc}
 80213e0:	20017a3c 	.word	0x20017a3c
 80213e4:	00000000 	.word	0x00000000

080213e8 <nan>:
 80213e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80213f0 <nan+0x8>
 80213ec:	4770      	bx	lr
 80213ee:	bf00      	nop
 80213f0:	00000000 	.word	0x00000000
 80213f4:	7ff80000 	.word	0x7ff80000

080213f8 <_calloc_r>:
 80213f8:	b570      	push	{r4, r5, r6, lr}
 80213fa:	fba1 5402 	umull	r5, r4, r1, r2
 80213fe:	b93c      	cbnz	r4, 8021410 <_calloc_r+0x18>
 8021400:	4629      	mov	r1, r5
 8021402:	f7fb ff41 	bl	801d288 <_malloc_r>
 8021406:	4606      	mov	r6, r0
 8021408:	b928      	cbnz	r0, 8021416 <_calloc_r+0x1e>
 802140a:	2600      	movs	r6, #0
 802140c:	4630      	mov	r0, r6
 802140e:	bd70      	pop	{r4, r5, r6, pc}
 8021410:	220c      	movs	r2, #12
 8021412:	6002      	str	r2, [r0, #0]
 8021414:	e7f9      	b.n	802140a <_calloc_r+0x12>
 8021416:	462a      	mov	r2, r5
 8021418:	4621      	mov	r1, r4
 802141a:	f7fd f9c1 	bl	801e7a0 <memset>
 802141e:	e7f5      	b.n	802140c <_calloc_r+0x14>

08021420 <rshift>:
 8021420:	6903      	ldr	r3, [r0, #16]
 8021422:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802142a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802142e:	f100 0414 	add.w	r4, r0, #20
 8021432:	dd45      	ble.n	80214c0 <rshift+0xa0>
 8021434:	f011 011f 	ands.w	r1, r1, #31
 8021438:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802143c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021440:	d10c      	bne.n	802145c <rshift+0x3c>
 8021442:	f100 0710 	add.w	r7, r0, #16
 8021446:	4629      	mov	r1, r5
 8021448:	42b1      	cmp	r1, r6
 802144a:	d334      	bcc.n	80214b6 <rshift+0x96>
 802144c:	1a9b      	subs	r3, r3, r2
 802144e:	009b      	lsls	r3, r3, #2
 8021450:	1eea      	subs	r2, r5, #3
 8021452:	4296      	cmp	r6, r2
 8021454:	bf38      	it	cc
 8021456:	2300      	movcc	r3, #0
 8021458:	4423      	add	r3, r4
 802145a:	e015      	b.n	8021488 <rshift+0x68>
 802145c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021460:	f1c1 0820 	rsb	r8, r1, #32
 8021464:	40cf      	lsrs	r7, r1
 8021466:	f105 0e04 	add.w	lr, r5, #4
 802146a:	46a1      	mov	r9, r4
 802146c:	4576      	cmp	r6, lr
 802146e:	46f4      	mov	ip, lr
 8021470:	d815      	bhi.n	802149e <rshift+0x7e>
 8021472:	1a9a      	subs	r2, r3, r2
 8021474:	0092      	lsls	r2, r2, #2
 8021476:	3a04      	subs	r2, #4
 8021478:	3501      	adds	r5, #1
 802147a:	42ae      	cmp	r6, r5
 802147c:	bf38      	it	cc
 802147e:	2200      	movcc	r2, #0
 8021480:	18a3      	adds	r3, r4, r2
 8021482:	50a7      	str	r7, [r4, r2]
 8021484:	b107      	cbz	r7, 8021488 <rshift+0x68>
 8021486:	3304      	adds	r3, #4
 8021488:	1b1a      	subs	r2, r3, r4
 802148a:	42a3      	cmp	r3, r4
 802148c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021490:	bf08      	it	eq
 8021492:	2300      	moveq	r3, #0
 8021494:	6102      	str	r2, [r0, #16]
 8021496:	bf08      	it	eq
 8021498:	6143      	streq	r3, [r0, #20]
 802149a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802149e:	f8dc c000 	ldr.w	ip, [ip]
 80214a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80214a6:	ea4c 0707 	orr.w	r7, ip, r7
 80214aa:	f849 7b04 	str.w	r7, [r9], #4
 80214ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80214b2:	40cf      	lsrs	r7, r1
 80214b4:	e7da      	b.n	802146c <rshift+0x4c>
 80214b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80214ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80214be:	e7c3      	b.n	8021448 <rshift+0x28>
 80214c0:	4623      	mov	r3, r4
 80214c2:	e7e1      	b.n	8021488 <rshift+0x68>

080214c4 <__hexdig_fun>:
 80214c4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80214c8:	2b09      	cmp	r3, #9
 80214ca:	d802      	bhi.n	80214d2 <__hexdig_fun+0xe>
 80214cc:	3820      	subs	r0, #32
 80214ce:	b2c0      	uxtb	r0, r0
 80214d0:	4770      	bx	lr
 80214d2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80214d6:	2b05      	cmp	r3, #5
 80214d8:	d801      	bhi.n	80214de <__hexdig_fun+0x1a>
 80214da:	3847      	subs	r0, #71	@ 0x47
 80214dc:	e7f7      	b.n	80214ce <__hexdig_fun+0xa>
 80214de:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80214e2:	2b05      	cmp	r3, #5
 80214e4:	d801      	bhi.n	80214ea <__hexdig_fun+0x26>
 80214e6:	3827      	subs	r0, #39	@ 0x27
 80214e8:	e7f1      	b.n	80214ce <__hexdig_fun+0xa>
 80214ea:	2000      	movs	r0, #0
 80214ec:	4770      	bx	lr
	...

080214f0 <__gethex>:
 80214f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f4:	b085      	sub	sp, #20
 80214f6:	468a      	mov	sl, r1
 80214f8:	9302      	str	r3, [sp, #8]
 80214fa:	680b      	ldr	r3, [r1, #0]
 80214fc:	9001      	str	r0, [sp, #4]
 80214fe:	4690      	mov	r8, r2
 8021500:	1c9c      	adds	r4, r3, #2
 8021502:	46a1      	mov	r9, r4
 8021504:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021508:	2830      	cmp	r0, #48	@ 0x30
 802150a:	d0fa      	beq.n	8021502 <__gethex+0x12>
 802150c:	eba9 0303 	sub.w	r3, r9, r3
 8021510:	f1a3 0b02 	sub.w	fp, r3, #2
 8021514:	f7ff ffd6 	bl	80214c4 <__hexdig_fun>
 8021518:	4605      	mov	r5, r0
 802151a:	2800      	cmp	r0, #0
 802151c:	d168      	bne.n	80215f0 <__gethex+0x100>
 802151e:	49a0      	ldr	r1, [pc, #640]	@ (80217a0 <__gethex+0x2b0>)
 8021520:	2201      	movs	r2, #1
 8021522:	4648      	mov	r0, r9
 8021524:	f7fd f951 	bl	801e7ca <strncmp>
 8021528:	4607      	mov	r7, r0
 802152a:	2800      	cmp	r0, #0
 802152c:	d167      	bne.n	80215fe <__gethex+0x10e>
 802152e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021532:	4626      	mov	r6, r4
 8021534:	f7ff ffc6 	bl	80214c4 <__hexdig_fun>
 8021538:	2800      	cmp	r0, #0
 802153a:	d062      	beq.n	8021602 <__gethex+0x112>
 802153c:	4623      	mov	r3, r4
 802153e:	7818      	ldrb	r0, [r3, #0]
 8021540:	2830      	cmp	r0, #48	@ 0x30
 8021542:	4699      	mov	r9, r3
 8021544:	f103 0301 	add.w	r3, r3, #1
 8021548:	d0f9      	beq.n	802153e <__gethex+0x4e>
 802154a:	f7ff ffbb 	bl	80214c4 <__hexdig_fun>
 802154e:	fab0 f580 	clz	r5, r0
 8021552:	096d      	lsrs	r5, r5, #5
 8021554:	f04f 0b01 	mov.w	fp, #1
 8021558:	464a      	mov	r2, r9
 802155a:	4616      	mov	r6, r2
 802155c:	3201      	adds	r2, #1
 802155e:	7830      	ldrb	r0, [r6, #0]
 8021560:	f7ff ffb0 	bl	80214c4 <__hexdig_fun>
 8021564:	2800      	cmp	r0, #0
 8021566:	d1f8      	bne.n	802155a <__gethex+0x6a>
 8021568:	498d      	ldr	r1, [pc, #564]	@ (80217a0 <__gethex+0x2b0>)
 802156a:	2201      	movs	r2, #1
 802156c:	4630      	mov	r0, r6
 802156e:	f7fd f92c 	bl	801e7ca <strncmp>
 8021572:	2800      	cmp	r0, #0
 8021574:	d13f      	bne.n	80215f6 <__gethex+0x106>
 8021576:	b944      	cbnz	r4, 802158a <__gethex+0x9a>
 8021578:	1c74      	adds	r4, r6, #1
 802157a:	4622      	mov	r2, r4
 802157c:	4616      	mov	r6, r2
 802157e:	3201      	adds	r2, #1
 8021580:	7830      	ldrb	r0, [r6, #0]
 8021582:	f7ff ff9f 	bl	80214c4 <__hexdig_fun>
 8021586:	2800      	cmp	r0, #0
 8021588:	d1f8      	bne.n	802157c <__gethex+0x8c>
 802158a:	1ba4      	subs	r4, r4, r6
 802158c:	00a7      	lsls	r7, r4, #2
 802158e:	7833      	ldrb	r3, [r6, #0]
 8021590:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021594:	2b50      	cmp	r3, #80	@ 0x50
 8021596:	d13e      	bne.n	8021616 <__gethex+0x126>
 8021598:	7873      	ldrb	r3, [r6, #1]
 802159a:	2b2b      	cmp	r3, #43	@ 0x2b
 802159c:	d033      	beq.n	8021606 <__gethex+0x116>
 802159e:	2b2d      	cmp	r3, #45	@ 0x2d
 80215a0:	d034      	beq.n	802160c <__gethex+0x11c>
 80215a2:	1c71      	adds	r1, r6, #1
 80215a4:	2400      	movs	r4, #0
 80215a6:	7808      	ldrb	r0, [r1, #0]
 80215a8:	f7ff ff8c 	bl	80214c4 <__hexdig_fun>
 80215ac:	1e43      	subs	r3, r0, #1
 80215ae:	b2db      	uxtb	r3, r3
 80215b0:	2b18      	cmp	r3, #24
 80215b2:	d830      	bhi.n	8021616 <__gethex+0x126>
 80215b4:	f1a0 0210 	sub.w	r2, r0, #16
 80215b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80215bc:	f7ff ff82 	bl	80214c4 <__hexdig_fun>
 80215c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80215c4:	fa5f fc8c 	uxtb.w	ip, ip
 80215c8:	f1bc 0f18 	cmp.w	ip, #24
 80215cc:	f04f 030a 	mov.w	r3, #10
 80215d0:	d91e      	bls.n	8021610 <__gethex+0x120>
 80215d2:	b104      	cbz	r4, 80215d6 <__gethex+0xe6>
 80215d4:	4252      	negs	r2, r2
 80215d6:	4417      	add	r7, r2
 80215d8:	f8ca 1000 	str.w	r1, [sl]
 80215dc:	b1ed      	cbz	r5, 802161a <__gethex+0x12a>
 80215de:	f1bb 0f00 	cmp.w	fp, #0
 80215e2:	bf0c      	ite	eq
 80215e4:	2506      	moveq	r5, #6
 80215e6:	2500      	movne	r5, #0
 80215e8:	4628      	mov	r0, r5
 80215ea:	b005      	add	sp, #20
 80215ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215f0:	2500      	movs	r5, #0
 80215f2:	462c      	mov	r4, r5
 80215f4:	e7b0      	b.n	8021558 <__gethex+0x68>
 80215f6:	2c00      	cmp	r4, #0
 80215f8:	d1c7      	bne.n	802158a <__gethex+0x9a>
 80215fa:	4627      	mov	r7, r4
 80215fc:	e7c7      	b.n	802158e <__gethex+0x9e>
 80215fe:	464e      	mov	r6, r9
 8021600:	462f      	mov	r7, r5
 8021602:	2501      	movs	r5, #1
 8021604:	e7c3      	b.n	802158e <__gethex+0x9e>
 8021606:	2400      	movs	r4, #0
 8021608:	1cb1      	adds	r1, r6, #2
 802160a:	e7cc      	b.n	80215a6 <__gethex+0xb6>
 802160c:	2401      	movs	r4, #1
 802160e:	e7fb      	b.n	8021608 <__gethex+0x118>
 8021610:	fb03 0002 	mla	r0, r3, r2, r0
 8021614:	e7ce      	b.n	80215b4 <__gethex+0xc4>
 8021616:	4631      	mov	r1, r6
 8021618:	e7de      	b.n	80215d8 <__gethex+0xe8>
 802161a:	eba6 0309 	sub.w	r3, r6, r9
 802161e:	3b01      	subs	r3, #1
 8021620:	4629      	mov	r1, r5
 8021622:	2b07      	cmp	r3, #7
 8021624:	dc0a      	bgt.n	802163c <__gethex+0x14c>
 8021626:	9801      	ldr	r0, [sp, #4]
 8021628:	f7fe f8e8 	bl	801f7fc <_Balloc>
 802162c:	4604      	mov	r4, r0
 802162e:	b940      	cbnz	r0, 8021642 <__gethex+0x152>
 8021630:	4b5c      	ldr	r3, [pc, #368]	@ (80217a4 <__gethex+0x2b4>)
 8021632:	4602      	mov	r2, r0
 8021634:	21e4      	movs	r1, #228	@ 0xe4
 8021636:	485c      	ldr	r0, [pc, #368]	@ (80217a8 <__gethex+0x2b8>)
 8021638:	f7fd fa2a 	bl	801ea90 <__assert_func>
 802163c:	3101      	adds	r1, #1
 802163e:	105b      	asrs	r3, r3, #1
 8021640:	e7ef      	b.n	8021622 <__gethex+0x132>
 8021642:	f100 0a14 	add.w	sl, r0, #20
 8021646:	2300      	movs	r3, #0
 8021648:	4655      	mov	r5, sl
 802164a:	469b      	mov	fp, r3
 802164c:	45b1      	cmp	r9, r6
 802164e:	d337      	bcc.n	80216c0 <__gethex+0x1d0>
 8021650:	f845 bb04 	str.w	fp, [r5], #4
 8021654:	eba5 050a 	sub.w	r5, r5, sl
 8021658:	10ad      	asrs	r5, r5, #2
 802165a:	6125      	str	r5, [r4, #16]
 802165c:	4658      	mov	r0, fp
 802165e:	f7fe f9bf 	bl	801f9e0 <__hi0bits>
 8021662:	016d      	lsls	r5, r5, #5
 8021664:	f8d8 6000 	ldr.w	r6, [r8]
 8021668:	1a2d      	subs	r5, r5, r0
 802166a:	42b5      	cmp	r5, r6
 802166c:	dd54      	ble.n	8021718 <__gethex+0x228>
 802166e:	1bad      	subs	r5, r5, r6
 8021670:	4629      	mov	r1, r5
 8021672:	4620      	mov	r0, r4
 8021674:	f7fe fd53 	bl	802011e <__any_on>
 8021678:	4681      	mov	r9, r0
 802167a:	b178      	cbz	r0, 802169c <__gethex+0x1ac>
 802167c:	1e6b      	subs	r3, r5, #1
 802167e:	1159      	asrs	r1, r3, #5
 8021680:	f003 021f 	and.w	r2, r3, #31
 8021684:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021688:	f04f 0901 	mov.w	r9, #1
 802168c:	fa09 f202 	lsl.w	r2, r9, r2
 8021690:	420a      	tst	r2, r1
 8021692:	d003      	beq.n	802169c <__gethex+0x1ac>
 8021694:	454b      	cmp	r3, r9
 8021696:	dc36      	bgt.n	8021706 <__gethex+0x216>
 8021698:	f04f 0902 	mov.w	r9, #2
 802169c:	4629      	mov	r1, r5
 802169e:	4620      	mov	r0, r4
 80216a0:	f7ff febe 	bl	8021420 <rshift>
 80216a4:	442f      	add	r7, r5
 80216a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80216aa:	42bb      	cmp	r3, r7
 80216ac:	da42      	bge.n	8021734 <__gethex+0x244>
 80216ae:	9801      	ldr	r0, [sp, #4]
 80216b0:	4621      	mov	r1, r4
 80216b2:	f7fe f8e3 	bl	801f87c <_Bfree>
 80216b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80216b8:	2300      	movs	r3, #0
 80216ba:	6013      	str	r3, [r2, #0]
 80216bc:	25a3      	movs	r5, #163	@ 0xa3
 80216be:	e793      	b.n	80215e8 <__gethex+0xf8>
 80216c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80216c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80216c6:	d012      	beq.n	80216ee <__gethex+0x1fe>
 80216c8:	2b20      	cmp	r3, #32
 80216ca:	d104      	bne.n	80216d6 <__gethex+0x1e6>
 80216cc:	f845 bb04 	str.w	fp, [r5], #4
 80216d0:	f04f 0b00 	mov.w	fp, #0
 80216d4:	465b      	mov	r3, fp
 80216d6:	7830      	ldrb	r0, [r6, #0]
 80216d8:	9303      	str	r3, [sp, #12]
 80216da:	f7ff fef3 	bl	80214c4 <__hexdig_fun>
 80216de:	9b03      	ldr	r3, [sp, #12]
 80216e0:	f000 000f 	and.w	r0, r0, #15
 80216e4:	4098      	lsls	r0, r3
 80216e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80216ea:	3304      	adds	r3, #4
 80216ec:	e7ae      	b.n	802164c <__gethex+0x15c>
 80216ee:	45b1      	cmp	r9, r6
 80216f0:	d8ea      	bhi.n	80216c8 <__gethex+0x1d8>
 80216f2:	492b      	ldr	r1, [pc, #172]	@ (80217a0 <__gethex+0x2b0>)
 80216f4:	9303      	str	r3, [sp, #12]
 80216f6:	2201      	movs	r2, #1
 80216f8:	4630      	mov	r0, r6
 80216fa:	f7fd f866 	bl	801e7ca <strncmp>
 80216fe:	9b03      	ldr	r3, [sp, #12]
 8021700:	2800      	cmp	r0, #0
 8021702:	d1e1      	bne.n	80216c8 <__gethex+0x1d8>
 8021704:	e7a2      	b.n	802164c <__gethex+0x15c>
 8021706:	1ea9      	subs	r1, r5, #2
 8021708:	4620      	mov	r0, r4
 802170a:	f7fe fd08 	bl	802011e <__any_on>
 802170e:	2800      	cmp	r0, #0
 8021710:	d0c2      	beq.n	8021698 <__gethex+0x1a8>
 8021712:	f04f 0903 	mov.w	r9, #3
 8021716:	e7c1      	b.n	802169c <__gethex+0x1ac>
 8021718:	da09      	bge.n	802172e <__gethex+0x23e>
 802171a:	1b75      	subs	r5, r6, r5
 802171c:	4621      	mov	r1, r4
 802171e:	9801      	ldr	r0, [sp, #4]
 8021720:	462a      	mov	r2, r5
 8021722:	f7fe fac3 	bl	801fcac <__lshift>
 8021726:	1b7f      	subs	r7, r7, r5
 8021728:	4604      	mov	r4, r0
 802172a:	f100 0a14 	add.w	sl, r0, #20
 802172e:	f04f 0900 	mov.w	r9, #0
 8021732:	e7b8      	b.n	80216a6 <__gethex+0x1b6>
 8021734:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021738:	42bd      	cmp	r5, r7
 802173a:	dd6f      	ble.n	802181c <__gethex+0x32c>
 802173c:	1bed      	subs	r5, r5, r7
 802173e:	42ae      	cmp	r6, r5
 8021740:	dc34      	bgt.n	80217ac <__gethex+0x2bc>
 8021742:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021746:	2b02      	cmp	r3, #2
 8021748:	d022      	beq.n	8021790 <__gethex+0x2a0>
 802174a:	2b03      	cmp	r3, #3
 802174c:	d024      	beq.n	8021798 <__gethex+0x2a8>
 802174e:	2b01      	cmp	r3, #1
 8021750:	d115      	bne.n	802177e <__gethex+0x28e>
 8021752:	42ae      	cmp	r6, r5
 8021754:	d113      	bne.n	802177e <__gethex+0x28e>
 8021756:	2e01      	cmp	r6, #1
 8021758:	d10b      	bne.n	8021772 <__gethex+0x282>
 802175a:	9a02      	ldr	r2, [sp, #8]
 802175c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021760:	6013      	str	r3, [r2, #0]
 8021762:	2301      	movs	r3, #1
 8021764:	6123      	str	r3, [r4, #16]
 8021766:	f8ca 3000 	str.w	r3, [sl]
 802176a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802176c:	2562      	movs	r5, #98	@ 0x62
 802176e:	601c      	str	r4, [r3, #0]
 8021770:	e73a      	b.n	80215e8 <__gethex+0xf8>
 8021772:	1e71      	subs	r1, r6, #1
 8021774:	4620      	mov	r0, r4
 8021776:	f7fe fcd2 	bl	802011e <__any_on>
 802177a:	2800      	cmp	r0, #0
 802177c:	d1ed      	bne.n	802175a <__gethex+0x26a>
 802177e:	9801      	ldr	r0, [sp, #4]
 8021780:	4621      	mov	r1, r4
 8021782:	f7fe f87b 	bl	801f87c <_Bfree>
 8021786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021788:	2300      	movs	r3, #0
 802178a:	6013      	str	r3, [r2, #0]
 802178c:	2550      	movs	r5, #80	@ 0x50
 802178e:	e72b      	b.n	80215e8 <__gethex+0xf8>
 8021790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021792:	2b00      	cmp	r3, #0
 8021794:	d1f3      	bne.n	802177e <__gethex+0x28e>
 8021796:	e7e0      	b.n	802175a <__gethex+0x26a>
 8021798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802179a:	2b00      	cmp	r3, #0
 802179c:	d1dd      	bne.n	802175a <__gethex+0x26a>
 802179e:	e7ee      	b.n	802177e <__gethex+0x28e>
 80217a0:	080255e8 	.word	0x080255e8
 80217a4:	0802547c 	.word	0x0802547c
 80217a8:	08025659 	.word	0x08025659
 80217ac:	1e6f      	subs	r7, r5, #1
 80217ae:	f1b9 0f00 	cmp.w	r9, #0
 80217b2:	d130      	bne.n	8021816 <__gethex+0x326>
 80217b4:	b127      	cbz	r7, 80217c0 <__gethex+0x2d0>
 80217b6:	4639      	mov	r1, r7
 80217b8:	4620      	mov	r0, r4
 80217ba:	f7fe fcb0 	bl	802011e <__any_on>
 80217be:	4681      	mov	r9, r0
 80217c0:	117a      	asrs	r2, r7, #5
 80217c2:	2301      	movs	r3, #1
 80217c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80217c8:	f007 071f 	and.w	r7, r7, #31
 80217cc:	40bb      	lsls	r3, r7
 80217ce:	4213      	tst	r3, r2
 80217d0:	4629      	mov	r1, r5
 80217d2:	4620      	mov	r0, r4
 80217d4:	bf18      	it	ne
 80217d6:	f049 0902 	orrne.w	r9, r9, #2
 80217da:	f7ff fe21 	bl	8021420 <rshift>
 80217de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80217e2:	1b76      	subs	r6, r6, r5
 80217e4:	2502      	movs	r5, #2
 80217e6:	f1b9 0f00 	cmp.w	r9, #0
 80217ea:	d047      	beq.n	802187c <__gethex+0x38c>
 80217ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80217f0:	2b02      	cmp	r3, #2
 80217f2:	d015      	beq.n	8021820 <__gethex+0x330>
 80217f4:	2b03      	cmp	r3, #3
 80217f6:	d017      	beq.n	8021828 <__gethex+0x338>
 80217f8:	2b01      	cmp	r3, #1
 80217fa:	d109      	bne.n	8021810 <__gethex+0x320>
 80217fc:	f019 0f02 	tst.w	r9, #2
 8021800:	d006      	beq.n	8021810 <__gethex+0x320>
 8021802:	f8da 3000 	ldr.w	r3, [sl]
 8021806:	ea49 0903 	orr.w	r9, r9, r3
 802180a:	f019 0f01 	tst.w	r9, #1
 802180e:	d10e      	bne.n	802182e <__gethex+0x33e>
 8021810:	f045 0510 	orr.w	r5, r5, #16
 8021814:	e032      	b.n	802187c <__gethex+0x38c>
 8021816:	f04f 0901 	mov.w	r9, #1
 802181a:	e7d1      	b.n	80217c0 <__gethex+0x2d0>
 802181c:	2501      	movs	r5, #1
 802181e:	e7e2      	b.n	80217e6 <__gethex+0x2f6>
 8021820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021822:	f1c3 0301 	rsb	r3, r3, #1
 8021826:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802182a:	2b00      	cmp	r3, #0
 802182c:	d0f0      	beq.n	8021810 <__gethex+0x320>
 802182e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021832:	f104 0314 	add.w	r3, r4, #20
 8021836:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802183a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802183e:	f04f 0c00 	mov.w	ip, #0
 8021842:	4618      	mov	r0, r3
 8021844:	f853 2b04 	ldr.w	r2, [r3], #4
 8021848:	f1b2 3fff 	cmp.w	r2, #4294967295
 802184c:	d01b      	beq.n	8021886 <__gethex+0x396>
 802184e:	3201      	adds	r2, #1
 8021850:	6002      	str	r2, [r0, #0]
 8021852:	2d02      	cmp	r5, #2
 8021854:	f104 0314 	add.w	r3, r4, #20
 8021858:	d13c      	bne.n	80218d4 <__gethex+0x3e4>
 802185a:	f8d8 2000 	ldr.w	r2, [r8]
 802185e:	3a01      	subs	r2, #1
 8021860:	42b2      	cmp	r2, r6
 8021862:	d109      	bne.n	8021878 <__gethex+0x388>
 8021864:	1171      	asrs	r1, r6, #5
 8021866:	2201      	movs	r2, #1
 8021868:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802186c:	f006 061f 	and.w	r6, r6, #31
 8021870:	fa02 f606 	lsl.w	r6, r2, r6
 8021874:	421e      	tst	r6, r3
 8021876:	d13a      	bne.n	80218ee <__gethex+0x3fe>
 8021878:	f045 0520 	orr.w	r5, r5, #32
 802187c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802187e:	601c      	str	r4, [r3, #0]
 8021880:	9b02      	ldr	r3, [sp, #8]
 8021882:	601f      	str	r7, [r3, #0]
 8021884:	e6b0      	b.n	80215e8 <__gethex+0xf8>
 8021886:	4299      	cmp	r1, r3
 8021888:	f843 cc04 	str.w	ip, [r3, #-4]
 802188c:	d8d9      	bhi.n	8021842 <__gethex+0x352>
 802188e:	68a3      	ldr	r3, [r4, #8]
 8021890:	459b      	cmp	fp, r3
 8021892:	db17      	blt.n	80218c4 <__gethex+0x3d4>
 8021894:	6861      	ldr	r1, [r4, #4]
 8021896:	9801      	ldr	r0, [sp, #4]
 8021898:	3101      	adds	r1, #1
 802189a:	f7fd ffaf 	bl	801f7fc <_Balloc>
 802189e:	4681      	mov	r9, r0
 80218a0:	b918      	cbnz	r0, 80218aa <__gethex+0x3ba>
 80218a2:	4b1a      	ldr	r3, [pc, #104]	@ (802190c <__gethex+0x41c>)
 80218a4:	4602      	mov	r2, r0
 80218a6:	2184      	movs	r1, #132	@ 0x84
 80218a8:	e6c5      	b.n	8021636 <__gethex+0x146>
 80218aa:	6922      	ldr	r2, [r4, #16]
 80218ac:	3202      	adds	r2, #2
 80218ae:	f104 010c 	add.w	r1, r4, #12
 80218b2:	0092      	lsls	r2, r2, #2
 80218b4:	300c      	adds	r0, #12
 80218b6:	f7fd f8d6 	bl	801ea66 <memcpy>
 80218ba:	4621      	mov	r1, r4
 80218bc:	9801      	ldr	r0, [sp, #4]
 80218be:	f7fd ffdd 	bl	801f87c <_Bfree>
 80218c2:	464c      	mov	r4, r9
 80218c4:	6923      	ldr	r3, [r4, #16]
 80218c6:	1c5a      	adds	r2, r3, #1
 80218c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80218cc:	6122      	str	r2, [r4, #16]
 80218ce:	2201      	movs	r2, #1
 80218d0:	615a      	str	r2, [r3, #20]
 80218d2:	e7be      	b.n	8021852 <__gethex+0x362>
 80218d4:	6922      	ldr	r2, [r4, #16]
 80218d6:	455a      	cmp	r2, fp
 80218d8:	dd0b      	ble.n	80218f2 <__gethex+0x402>
 80218da:	2101      	movs	r1, #1
 80218dc:	4620      	mov	r0, r4
 80218de:	f7ff fd9f 	bl	8021420 <rshift>
 80218e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80218e6:	3701      	adds	r7, #1
 80218e8:	42bb      	cmp	r3, r7
 80218ea:	f6ff aee0 	blt.w	80216ae <__gethex+0x1be>
 80218ee:	2501      	movs	r5, #1
 80218f0:	e7c2      	b.n	8021878 <__gethex+0x388>
 80218f2:	f016 061f 	ands.w	r6, r6, #31
 80218f6:	d0fa      	beq.n	80218ee <__gethex+0x3fe>
 80218f8:	4453      	add	r3, sl
 80218fa:	f1c6 0620 	rsb	r6, r6, #32
 80218fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021902:	f7fe f86d 	bl	801f9e0 <__hi0bits>
 8021906:	42b0      	cmp	r0, r6
 8021908:	dbe7      	blt.n	80218da <__gethex+0x3ea>
 802190a:	e7f0      	b.n	80218ee <__gethex+0x3fe>
 802190c:	0802547c 	.word	0x0802547c

08021910 <L_shift>:
 8021910:	f1c2 0208 	rsb	r2, r2, #8
 8021914:	0092      	lsls	r2, r2, #2
 8021916:	b570      	push	{r4, r5, r6, lr}
 8021918:	f1c2 0620 	rsb	r6, r2, #32
 802191c:	6843      	ldr	r3, [r0, #4]
 802191e:	6804      	ldr	r4, [r0, #0]
 8021920:	fa03 f506 	lsl.w	r5, r3, r6
 8021924:	432c      	orrs	r4, r5
 8021926:	40d3      	lsrs	r3, r2
 8021928:	6004      	str	r4, [r0, #0]
 802192a:	f840 3f04 	str.w	r3, [r0, #4]!
 802192e:	4288      	cmp	r0, r1
 8021930:	d3f4      	bcc.n	802191c <L_shift+0xc>
 8021932:	bd70      	pop	{r4, r5, r6, pc}

08021934 <__match>:
 8021934:	b530      	push	{r4, r5, lr}
 8021936:	6803      	ldr	r3, [r0, #0]
 8021938:	3301      	adds	r3, #1
 802193a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802193e:	b914      	cbnz	r4, 8021946 <__match+0x12>
 8021940:	6003      	str	r3, [r0, #0]
 8021942:	2001      	movs	r0, #1
 8021944:	bd30      	pop	{r4, r5, pc}
 8021946:	f813 2b01 	ldrb.w	r2, [r3], #1
 802194a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802194e:	2d19      	cmp	r5, #25
 8021950:	bf98      	it	ls
 8021952:	3220      	addls	r2, #32
 8021954:	42a2      	cmp	r2, r4
 8021956:	d0f0      	beq.n	802193a <__match+0x6>
 8021958:	2000      	movs	r0, #0
 802195a:	e7f3      	b.n	8021944 <__match+0x10>

0802195c <__hexnan>:
 802195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021960:	680b      	ldr	r3, [r1, #0]
 8021962:	6801      	ldr	r1, [r0, #0]
 8021964:	115e      	asrs	r6, r3, #5
 8021966:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802196a:	f013 031f 	ands.w	r3, r3, #31
 802196e:	b087      	sub	sp, #28
 8021970:	bf18      	it	ne
 8021972:	3604      	addne	r6, #4
 8021974:	2500      	movs	r5, #0
 8021976:	1f37      	subs	r7, r6, #4
 8021978:	4682      	mov	sl, r0
 802197a:	4690      	mov	r8, r2
 802197c:	9301      	str	r3, [sp, #4]
 802197e:	f846 5c04 	str.w	r5, [r6, #-4]
 8021982:	46b9      	mov	r9, r7
 8021984:	463c      	mov	r4, r7
 8021986:	9502      	str	r5, [sp, #8]
 8021988:	46ab      	mov	fp, r5
 802198a:	784a      	ldrb	r2, [r1, #1]
 802198c:	1c4b      	adds	r3, r1, #1
 802198e:	9303      	str	r3, [sp, #12]
 8021990:	b342      	cbz	r2, 80219e4 <__hexnan+0x88>
 8021992:	4610      	mov	r0, r2
 8021994:	9105      	str	r1, [sp, #20]
 8021996:	9204      	str	r2, [sp, #16]
 8021998:	f7ff fd94 	bl	80214c4 <__hexdig_fun>
 802199c:	2800      	cmp	r0, #0
 802199e:	d151      	bne.n	8021a44 <__hexnan+0xe8>
 80219a0:	9a04      	ldr	r2, [sp, #16]
 80219a2:	9905      	ldr	r1, [sp, #20]
 80219a4:	2a20      	cmp	r2, #32
 80219a6:	d818      	bhi.n	80219da <__hexnan+0x7e>
 80219a8:	9b02      	ldr	r3, [sp, #8]
 80219aa:	459b      	cmp	fp, r3
 80219ac:	dd13      	ble.n	80219d6 <__hexnan+0x7a>
 80219ae:	454c      	cmp	r4, r9
 80219b0:	d206      	bcs.n	80219c0 <__hexnan+0x64>
 80219b2:	2d07      	cmp	r5, #7
 80219b4:	dc04      	bgt.n	80219c0 <__hexnan+0x64>
 80219b6:	462a      	mov	r2, r5
 80219b8:	4649      	mov	r1, r9
 80219ba:	4620      	mov	r0, r4
 80219bc:	f7ff ffa8 	bl	8021910 <L_shift>
 80219c0:	4544      	cmp	r4, r8
 80219c2:	d952      	bls.n	8021a6a <__hexnan+0x10e>
 80219c4:	2300      	movs	r3, #0
 80219c6:	f1a4 0904 	sub.w	r9, r4, #4
 80219ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80219ce:	f8cd b008 	str.w	fp, [sp, #8]
 80219d2:	464c      	mov	r4, r9
 80219d4:	461d      	mov	r5, r3
 80219d6:	9903      	ldr	r1, [sp, #12]
 80219d8:	e7d7      	b.n	802198a <__hexnan+0x2e>
 80219da:	2a29      	cmp	r2, #41	@ 0x29
 80219dc:	d157      	bne.n	8021a8e <__hexnan+0x132>
 80219de:	3102      	adds	r1, #2
 80219e0:	f8ca 1000 	str.w	r1, [sl]
 80219e4:	f1bb 0f00 	cmp.w	fp, #0
 80219e8:	d051      	beq.n	8021a8e <__hexnan+0x132>
 80219ea:	454c      	cmp	r4, r9
 80219ec:	d206      	bcs.n	80219fc <__hexnan+0xa0>
 80219ee:	2d07      	cmp	r5, #7
 80219f0:	dc04      	bgt.n	80219fc <__hexnan+0xa0>
 80219f2:	462a      	mov	r2, r5
 80219f4:	4649      	mov	r1, r9
 80219f6:	4620      	mov	r0, r4
 80219f8:	f7ff ff8a 	bl	8021910 <L_shift>
 80219fc:	4544      	cmp	r4, r8
 80219fe:	d936      	bls.n	8021a6e <__hexnan+0x112>
 8021a00:	f1a8 0204 	sub.w	r2, r8, #4
 8021a04:	4623      	mov	r3, r4
 8021a06:	f853 1b04 	ldr.w	r1, [r3], #4
 8021a0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8021a0e:	429f      	cmp	r7, r3
 8021a10:	d2f9      	bcs.n	8021a06 <__hexnan+0xaa>
 8021a12:	1b3b      	subs	r3, r7, r4
 8021a14:	f023 0303 	bic.w	r3, r3, #3
 8021a18:	3304      	adds	r3, #4
 8021a1a:	3401      	adds	r4, #1
 8021a1c:	3e03      	subs	r6, #3
 8021a1e:	42b4      	cmp	r4, r6
 8021a20:	bf88      	it	hi
 8021a22:	2304      	movhi	r3, #4
 8021a24:	4443      	add	r3, r8
 8021a26:	2200      	movs	r2, #0
 8021a28:	f843 2b04 	str.w	r2, [r3], #4
 8021a2c:	429f      	cmp	r7, r3
 8021a2e:	d2fb      	bcs.n	8021a28 <__hexnan+0xcc>
 8021a30:	683b      	ldr	r3, [r7, #0]
 8021a32:	b91b      	cbnz	r3, 8021a3c <__hexnan+0xe0>
 8021a34:	4547      	cmp	r7, r8
 8021a36:	d128      	bne.n	8021a8a <__hexnan+0x12e>
 8021a38:	2301      	movs	r3, #1
 8021a3a:	603b      	str	r3, [r7, #0]
 8021a3c:	2005      	movs	r0, #5
 8021a3e:	b007      	add	sp, #28
 8021a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a44:	3501      	adds	r5, #1
 8021a46:	2d08      	cmp	r5, #8
 8021a48:	f10b 0b01 	add.w	fp, fp, #1
 8021a4c:	dd06      	ble.n	8021a5c <__hexnan+0x100>
 8021a4e:	4544      	cmp	r4, r8
 8021a50:	d9c1      	bls.n	80219d6 <__hexnan+0x7a>
 8021a52:	2300      	movs	r3, #0
 8021a54:	f844 3c04 	str.w	r3, [r4, #-4]
 8021a58:	2501      	movs	r5, #1
 8021a5a:	3c04      	subs	r4, #4
 8021a5c:	6822      	ldr	r2, [r4, #0]
 8021a5e:	f000 000f 	and.w	r0, r0, #15
 8021a62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8021a66:	6020      	str	r0, [r4, #0]
 8021a68:	e7b5      	b.n	80219d6 <__hexnan+0x7a>
 8021a6a:	2508      	movs	r5, #8
 8021a6c:	e7b3      	b.n	80219d6 <__hexnan+0x7a>
 8021a6e:	9b01      	ldr	r3, [sp, #4]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d0dd      	beq.n	8021a30 <__hexnan+0xd4>
 8021a74:	f1c3 0320 	rsb	r3, r3, #32
 8021a78:	f04f 32ff 	mov.w	r2, #4294967295
 8021a7c:	40da      	lsrs	r2, r3
 8021a7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8021a82:	4013      	ands	r3, r2
 8021a84:	f846 3c04 	str.w	r3, [r6, #-4]
 8021a88:	e7d2      	b.n	8021a30 <__hexnan+0xd4>
 8021a8a:	3f04      	subs	r7, #4
 8021a8c:	e7d0      	b.n	8021a30 <__hexnan+0xd4>
 8021a8e:	2004      	movs	r0, #4
 8021a90:	e7d5      	b.n	8021a3e <__hexnan+0xe2>

08021a92 <__ascii_mbtowc>:
 8021a92:	b082      	sub	sp, #8
 8021a94:	b901      	cbnz	r1, 8021a98 <__ascii_mbtowc+0x6>
 8021a96:	a901      	add	r1, sp, #4
 8021a98:	b142      	cbz	r2, 8021aac <__ascii_mbtowc+0x1a>
 8021a9a:	b14b      	cbz	r3, 8021ab0 <__ascii_mbtowc+0x1e>
 8021a9c:	7813      	ldrb	r3, [r2, #0]
 8021a9e:	600b      	str	r3, [r1, #0]
 8021aa0:	7812      	ldrb	r2, [r2, #0]
 8021aa2:	1e10      	subs	r0, r2, #0
 8021aa4:	bf18      	it	ne
 8021aa6:	2001      	movne	r0, #1
 8021aa8:	b002      	add	sp, #8
 8021aaa:	4770      	bx	lr
 8021aac:	4610      	mov	r0, r2
 8021aae:	e7fb      	b.n	8021aa8 <__ascii_mbtowc+0x16>
 8021ab0:	f06f 0001 	mvn.w	r0, #1
 8021ab4:	e7f8      	b.n	8021aa8 <__ascii_mbtowc+0x16>

08021ab6 <__ascii_wctomb>:
 8021ab6:	4603      	mov	r3, r0
 8021ab8:	4608      	mov	r0, r1
 8021aba:	b141      	cbz	r1, 8021ace <__ascii_wctomb+0x18>
 8021abc:	2aff      	cmp	r2, #255	@ 0xff
 8021abe:	d904      	bls.n	8021aca <__ascii_wctomb+0x14>
 8021ac0:	228a      	movs	r2, #138	@ 0x8a
 8021ac2:	601a      	str	r2, [r3, #0]
 8021ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ac8:	4770      	bx	lr
 8021aca:	700a      	strb	r2, [r1, #0]
 8021acc:	2001      	movs	r0, #1
 8021ace:	4770      	bx	lr

08021ad0 <_init>:
 8021ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ad2:	bf00      	nop
 8021ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ad6:	bc08      	pop	{r3}
 8021ad8:	469e      	mov	lr, r3
 8021ada:	4770      	bx	lr

08021adc <_fini>:
 8021adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ade:	bf00      	nop
 8021ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ae2:	bc08      	pop	{r3}
 8021ae4:	469e      	mov	lr, r3
 8021ae6:	4770      	bx	lr
