
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800e650  0800e650  0000f650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed88  0800ed88  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed88  0800ed88  0000fd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed90  0800ed90  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed90  0800ed90  0000fd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ed94  0800ed94  0000fd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ed98  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101ec  2**0
                  CONTENTS
 10 .bss          00006bec  200001ec  200001ec  000101ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20006dd8  20006dd8  000101ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024e20  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005832  00000000  00000000  0003503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e8  00000000  00000000  0003c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c92  00000000  00000000  0003dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002527c  00000000  00000000  000669d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e453c  00000000  00000000  0008bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017018a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009180  00000000  00000000  001701d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00179350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e634 	.word	0x0800e634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800e634 	.word	0x0800e634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f008 fcbc 	bl	800998c <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f009 ffbb 	bl	800b002 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f009 ff91 	bl	800b026 <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f009 ff74 	bl	800b026 <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000208 	.word	0x20000208
 8001150:	20000000 	.word	0x20000000
 8001154:	0800e688 	.word	0x0800e688
 8001158:	0800e6e0 	.word	0x0800e6e0

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f008 fa77 	bl	8009748 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f008 fa9a 	bl	80097ac <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f009 febb 	bl	800b026 <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000020c 	.word	0x2000020c
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f003 ff6a 	bl	8005240 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000db0 	.word	0x20000db0

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f009 fe2a 	bl	800aff2 <memset>
    printf("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f009 fdb2 	bl	800af08 <iprintf>
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800e738 	.word	0x0800e738

080013b4 <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    /* Toggle the LED */
    //ToggleLED();


    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <cmd_toggle_led+0x30>)
 80013c2:	f107 0410 	add.w	r4, r7, #16
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	c407      	stmia	r4!, {r0, r1, r2}
 80013ca:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f009 ff07 	bl	800b1e6 <strcpy>

    return pdFALSE;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0800e744 	.word	0x0800e744

080013e8 <cmd_add>:
//*****************************************************************************
BaseType_t cmd_add(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	@ 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    const char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	461a      	mov	r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fead 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001402:	6378      	str	r0, [r7, #52]	@ 0x34
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	461a      	mov	r2, r3
 800140a:	2102      	movs	r1, #2
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fea5 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001412:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
                          &xParameter2StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8001414:	220a      	movs	r2, #10
 8001416:	2100      	movs	r1, #0
 8001418:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800141a:	f008 fd3b 	bl	8009e94 <strtol>
 800141e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t xValue2 = strtol(pcParameter2, NULL, 10);
 8001420:	220a      	movs	r2, #10
 8001422:	2100      	movs	r1, #0
 8001424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001426:	f008 fd35 	bl	8009e94 <strtol>
 800142a:	62b8      	str	r0, [r7, #40]	@ 0x28
    // add the two numbers
    int32_t xResultValue = xValue1 + xValue2;
 800142c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001430:	4413      	add	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert the result to a string
    char cResultString[10];
    itoa(xResultValue, cResultString, 10);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	220a      	movs	r2, #10
 800143a:	4619      	mov	r1, r3
 800143c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800143e:	f008 fcab 	bl	8009d98 <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f009 fecc 	bl	800b1e6 <strcpy>

    return pdFALSE;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e009      	b.n	8001478 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <vRegisterCLICommands+0x38>)
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fdb9 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <vRegisterCLICommands+0x38>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <vRegisterCLICommands+0xc>
    }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800e860 	.word	0x0800e860

08001494 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <cliWrite+0x24>)
 80014a0:	f009 fd32 	bl	800af08 <iprintf>
   // flush stdout
   fflush(stdout);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <cliWrite+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f009 fc56 	bl	800ad5c <fflush>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800e7d8 	.word	0x0800e7d8
 80014bc:	20000030 	.word	0x20000030

080014c0 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 80014cc:	4810      	ldr	r0, [pc, #64]	@ (8001510 <handleNewline+0x50>)
 80014ce:	f7ff ffe1 	bl	8001494 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fdb9 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 80014de:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f7ff ffd7 	bl	8001494 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <handleNewline+0x12>

    cliWrite(cli_prompt);
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <handleNewline+0x54>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffcf 	bl	8001494 <cliWrite>
    *cInputIndex = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80014fc:	2232      	movs	r2, #50	@ 0x32
 80014fe:	2100      	movs	r1, #0
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f009 fd76 	bl	800aff2 <memset>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800e7dc 	.word	0x0800e7dc
 8001514:	2000000c 	.word	0x2000000c

08001518 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <handleBackspace+0x4c>)
 8001546:	f7ff ffa5 	bl	8001494 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 800154a:	e006      	b.n	800155a <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <handleBackspace+0x50>)
 800154e:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff9d 	bl	8001494 <cliWrite>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000010 	.word	0x20000010
 8001568:	00435b1b 	.word	0x00435b1b

0800156c <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <handleCharacterInput+0x64>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	d023      	beq.n	80015c8 <handleCharacterInput+0x5c>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <handleCharacterInput+0x64>)
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d004      	beq.n	8001594 <handleCharacterInput+0x28>
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <handleCharacterInput+0x64>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	2b7f      	cmp	r3, #127	@ 0x7f
 8001592:	d104      	bne.n	800159e <handleCharacterInput+0x32>
    {
        handleBackspace(cInputIndex, pcInputString);
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffbe 	bl	8001518 <handleBackspace>
 800159c:	e015      	b.n	80015ca <handleCharacterInput+0x5e>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b31      	cmp	r3, #49	@ 0x31
 80015a4:	d811      	bhi.n	80015ca <handleCharacterInput+0x5e>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <handleCharacterInput+0x64>)
 80015a8:	f993 2000 	ldrsb.w	r2, [r3]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	440b      	add	r3, r1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e000      	b.n	80015ca <handleCharacterInput+0x5e>
        return;
 80015c8:	bf00      	nop
        }
    }
}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000a42 	.word	0x20000a42

080015d4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_ETH_Init+0x84>)
 80015da:	4a20      	ldr	r2, [pc, #128]	@ (800165c <MX_ETH_Init+0x88>)
 80015dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015ec:	22e1      	movs	r2, #225	@ 0xe1
 80015ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_ETH_Init+0x8c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_ETH_Init+0x84>)
 8001604:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <MX_ETH_Init+0x8c>)
 8001606:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_ETH_Init+0x84>)
 800160a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800160e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_ETH_Init+0x84>)
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <MX_ETH_Init+0x90>)
 8001614:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_ETH_Init+0x84>)
 8001618:	4a13      	ldr	r2, [pc, #76]	@ (8001668 <MX_ETH_Init+0x94>)
 800161a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_ETH_Init+0x84>)
 800161e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001622:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <MX_ETH_Init+0x84>)
 8001626:	f000 ffc1 	bl	80025ac <HAL_ETH_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001630:	f000 fa4e 	bl	8001ad0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001634:	2238      	movs	r2, #56	@ 0x38
 8001636:	2100      	movs	r1, #0
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <MX_ETH_Init+0x98>)
 800163a:	f009 fcda 	bl	800aff2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_ETH_Init+0x98>)
 8001640:	2221      	movs	r2, #33	@ 0x21
 8001642:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_ETH_Init+0x98>)
 8001646:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800164a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <MX_ETH_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000bbc 	.word	0x20000bbc
 800165c:	40028000 	.word	0x40028000
 8001660:	20000c6c 	.word	0x20000c6c
 8001664:	20000ae4 	.word	0x20000ae4
 8001668:	20000a44 	.word	0x20000a44
 800166c:	20000b84 	.word	0x20000b84

08001670 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4e      	ldr	r2, [pc, #312]	@ (80017c8 <HAL_ETH_MspInit+0x158>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 8095 	bne.w	80017be <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 800169e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a4:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	4a44      	ldr	r2, [pc, #272]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016be:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c0:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	4b3e      	ldr	r3, [pc, #248]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	4a3d      	ldr	r2, [pc, #244]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016da:	6313      	str	r3, [r2, #48]	@ 0x30
 80016dc:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a36      	ldr	r2, [pc, #216]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	4a2f      	ldr	r2, [pc, #188]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6313      	str	r3, [r2, #48]	@ 0x30
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <HAL_ETH_MspInit+0x15c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800173c:	2332      	movs	r3, #50	@ 0x32
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174c:	230b      	movs	r3, #11
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	481e      	ldr	r0, [pc, #120]	@ (80017d0 <HAL_ETH_MspInit+0x160>)
 8001758:	f001 fb5c 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800175c:	2386      	movs	r3, #134	@ 0x86
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176c:	230b      	movs	r3, #11
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4817      	ldr	r0, [pc, #92]	@ (80017d4 <HAL_ETH_MspInit+0x164>)
 8001778:	f001 fb4c 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800177c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178e:	230b      	movs	r3, #11
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <HAL_ETH_MspInit+0x168>)
 800179a:	f001 fb3b 	bl	8002e14 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	203d      	movs	r0, #61	@ 0x3d
 80017a4:	f000 fe46 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80017a8:	203d      	movs	r0, #61	@ 0x3d
 80017aa:	f000 fe5f 	bl	800246c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	203e      	movs	r0, #62	@ 0x3e
 80017b4:	f000 fe3e 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80017b8:	203e      	movs	r0, #62	@ 0x3e
 80017ba:	f000 fe57 	bl	800246c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3738      	adds	r7, #56	@ 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40028000 	.word	0x40028000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400

080017dc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);
 8001800:	4a10      	ldr	r2, [pc, #64]	@ (8001844 <MX_FREERTOS_Init+0x48>)
 8001802:	2100      	movs	r1, #0
 8001804:	2001      	movs	r0, #1
 8001806:	f005 fa32 	bl	8006c6e <osSemaphoreNew>
 800180a:	4603      	mov	r3, r0
 800180c:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <MX_FREERTOS_Init+0x4c>)
 800180e:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <MX_FREERTOS_Init+0x50>)
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f005 fa2a 	bl	8006c6e <osSemaphoreNew>
 800181a:	4603      	mov	r3, r0
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <MX_FREERTOS_Init+0x54>)
 800181e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(StartInitTask, NULL, &vInitTask_attributes);
 8001820:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <MX_FREERTOS_Init+0x58>)
 8001822:	2100      	movs	r1, #0
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_FREERTOS_Init+0x5c>)
 8001826:	f005 f974 	bl	8006b12 <osThreadNew>
 800182a:	4603      	mov	r3, r0
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <MX_FREERTOS_Init+0x60>)
 800182e:	6013      	str	r3, [r2, #0]

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <MX_FREERTOS_Init+0x64>)
 8001832:	2100      	movs	r1, #0
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <MX_FREERTOS_Init+0x68>)
 8001836:	f005 f96c 	bl	8006b12 <osThreadNew>
 800183a:	4603      	mov	r3, r0
 800183c:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <MX_FREERTOS_Init+0x6c>)
 800183e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800e8e8 	.word	0x0800e8e8
 8001848:	20000c7c 	.word	0x20000c7c
 800184c:	0800e8f8 	.word	0x0800e8f8
 8001850:	20000c80 	.word	0x20000c80
 8001854:	0800e8a0 	.word	0x0800e8a0
 8001858:	0800186d 	.word	0x0800186d
 800185c:	20000c74 	.word	0x20000c74
 8001860:	0800e8c4 	.word	0x0800e8c4
 8001864:	0800187d 	.word	0x0800187d
 8001868:	20000c78 	.word	0x20000c78

0800186c <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
//  HAL_Delay(5000);
//  while (gnetif.ip_addr.addr == 0){};
  /* Infinite loop */
  for(;;)
  {
      osDelay(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f005 f9df 	bl	8006c38 <osDelay>
 800187a:	e7fb      	b.n	8001874 <StartInitTask+0x8>

0800187c <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
    uint32_t receivedValue; // used to store the received value from the notification
    vRegisterCLICommands();
 8001888:	f7ff fde6 	bl	8001458 <vRegisterCLICommands>

    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 800188c:	f107 0208 	add.w	r2, r7, #8
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	2100      	movs	r1, #0
 8001896:	2000      	movs	r0, #0
 8001898:	f007 fa16 	bl	8008cc8 <xTaskNotifyWait>
                                  0,  // Clear all bits on exit
                                  &receivedValue, // Receives the notification value
                                  portMAX_DELAY); // Wait indefinitely
        //echo recevied char
        cRxedChar = receivedValue & 0xFF;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <vStartCmdTask+0x60>)
 80018a2:	701a      	strb	r2, [r3, #0]
        cliWrite((char *)&cRxedChar);
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <vStartCmdTask+0x60>)
 80018a6:	f7ff fdf5 	bl	8001494 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <vStartCmdTask+0x60>)
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	2b0d      	cmp	r3, #13
 80018b2:	d004      	beq.n	80018be <vStartCmdTask+0x42>
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <vStartCmdTask+0x60>)
 80018b6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d107      	bne.n	80018ce <vStartCmdTask+0x52>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 80018be:	f107 030f 	add.w	r3, r7, #15
 80018c2:	461a      	mov	r2, r3
 80018c4:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <vStartCmdTask+0x64>)
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <vStartCmdTask+0x68>)
 80018c8:	f7ff fdfa 	bl	80014c0 <handleNewline>
 80018cc:	e005      	b.n	80018da <vStartCmdTask+0x5e>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 80018ce:	f107 030f 	add.w	r3, r7, #15
 80018d2:	4904      	ldr	r1, [pc, #16]	@ (80018e4 <vStartCmdTask+0x68>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe49 	bl	800156c <handleCharacterInput>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 80018da:	e7d7      	b.n	800188c <vStartCmdTask+0x10>
 80018dc:	20000a42 	.word	0x20000a42
 80018e0:	20000210 	.word	0x20000210
 80018e4:	20000a10 	.word	0x20000a10

080018e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MX_GPIO_Init+0xa0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a24      	ldr	r2, [pc, #144]	@ (8001988 <MX_GPIO_Init+0xa0>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_GPIO_Init+0xa0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_GPIO_Init+0xa0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a0f      	ldr	r2, [pc, #60]	@ (8001988 <MX_GPIO_Init+0xa0>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_GPIO_Init+0xa0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f000 fc32 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f820 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f7ff ffa6 	bl	80018e8 <MX_GPIO_Init>
  MX_TIM5_Init();
 800199c:	f000 fb1a 	bl	8001fd4 <MX_TIM5_Init>
  MX_SDIO_SD_Init();
 80019a0:	f000 f8d8 	bl	8001b54 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80019a4:	f004 fd7a 	bl	800649c <MX_FATFS_Init>
  MX_RNG_Init();
 80019a8:	f000 f898 	bl	8001adc <MX_RNG_Init>
  MX_USART3_UART_Init();
 80019ac:	f000 fb88 	bl	80020c0 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80019b0:	f7ff fe10 	bl	80015d4 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, &dataByte, 1);
 80019b4:	2201      	movs	r2, #1
 80019b6:	4906      	ldr	r1, [pc, #24]	@ (80019d0 <main+0x44>)
 80019b8:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <main+0x48>)
 80019ba:	f003 fccc 	bl	8005356 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019be:	f005 f827 	bl	8006a10 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019c2:	f7ff ff1b 	bl	80017fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019c6:	f005 f869 	bl	8006a9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <main+0x3e>
 80019ce:	bf00      	nop
 80019d0:	20000dac 	.word	0x20000dac
 80019d4:	20000db0 	.word	0x20000db0

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b094      	sub	sp, #80	@ 0x50
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	2230      	movs	r2, #48	@ 0x30
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f009 fb03 	bl	800aff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <SystemClock_Config+0xcc>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <SystemClock_Config+0xcc>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <SystemClock_Config+0xcc>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <SystemClock_Config+0xd0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <SystemClock_Config+0xd0>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <SystemClock_Config+0xd0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a34:	2302      	movs	r3, #2
 8001a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a40:	2302      	movs	r3, #2
 8001a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a4c:	23a8      	movs	r3, #168	@ 0xa8
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a50:	2302      	movs	r3, #2
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a54:	2307      	movs	r3, #7
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fb75 	bl	800314c <HAL_RCC_OscConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a68:	f000 f832 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a70:	2302      	movs	r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fdd6 	bl	800363c <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a96:	f000 f81b 	bl	8001ad0 <Error_Handler>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	@ 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000

08001aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001abe:	f000 fbbd 	bl	800223c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <Error_Handler+0x8>

08001adc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_RNG_Init+0x20>)
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <MX_RNG_Init+0x24>)
 8001ae4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_RNG_Init+0x20>)
 8001ae8:	f001 ffba 	bl	8003a60 <HAL_RNG_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001af2:	f7ff ffed 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000c84 	.word	0x20000c84
 8001b00:	50060800 	.word	0x50060800

08001b04 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_RNG_MspInit+0x48>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d115      	bne.n	8001b42 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_RNG_MspInit+0x4c>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_RNG_MspInit+0x4c>)
 8001b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b24:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_RNG_MspInit+0x4c>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	2050      	movs	r0, #80	@ 0x50
 8001b38:	f000 fc7c 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001b3c:	2050      	movs	r0, #80	@ 0x50
 8001b3e:	f000 fc95 	bl	800246c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	50060800 	.word	0x50060800
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <MX_SDIO_SD_Init+0x3c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <MX_SDIO_SD_Init+0x38>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000c94 	.word	0x20000c94
 8001b90:	40012c00 	.word	0x40012c00

08001b94 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a28      	ldr	r2, [pc, #160]	@ (8001c54 <HAL_SD_MspInit+0xc0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d14a      	bne.n	8001c4c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <HAL_SD_MspInit+0xc4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001c0a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <HAL_SD_MspInit+0xc8>)
 8001c28:	f001 f8f4 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <HAL_SD_MspInit+0xcc>)
 8001c48:	f001 f8e4 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	@ 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	4a15      	ldr	r2, [pc, #84]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <HAL_MspInit+0x64>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	f06f 0001 	mvn.w	r0, #1
 8001caa:	f000 fbc3 	bl	8002434 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2005      	movs	r0, #5
 8001cb4:	f000 fbbe 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cb8:	2005      	movs	r0, #5
 8001cba:	f000 fbd7 	bl	800246c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	@ 0x30
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <HAL_InitTick+0xd4>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8001da0 <HAL_InitTick+0xd4>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_InitTick+0xd4>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cf8:	f107 020c 	add.w	r2, r7, #12
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fe7a 	bl	80039fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d08:	f001 fe64 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <HAL_InitTick+0xd8>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d22:	4a22      	ldr	r2, [pc, #136]	@ (8001dac <HAL_InitTick+0xe0>)
 8001d24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d46:	4818      	ldr	r0, [pc, #96]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d48:	f002 fdb4 	bl	80048b4 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11b      	bne.n	8001d92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d5a:	4813      	ldr	r0, [pc, #76]	@ (8001da8 <HAL_InitTick+0xdc>)
 8001d5c:	f002 fdfa 	bl	8004954 <HAL_TIM_Base_Start_IT>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d111      	bne.n	8001d92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f000 fb7c 	bl	800246c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d808      	bhi.n	8001d8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	2019      	movs	r0, #25
 8001d80:	f000 fb58 	bl	8002434 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_InitTick+0xe4>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e002      	b.n	8001d92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	@ 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	20000d18 	.word	0x20000d18
 8001dac:	40010000 	.word	0x40010000
 8001db0:	20000018 	.word	0x20000018

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <NMI_Handler+0x4>

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dfe:	f002 fe19 	bl	8004a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000d18 	.word	0x20000d18

08001e0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM5_IRQHandler+0x10>)
 8001e12:	f002 fe0f 	bl	8004a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000d64 	.word	0x20000d64

08001e20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <ETH_IRQHandler+0x10>)
 8001e26:	f000 fc5d 	bl	80026e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000bbc 	.word	0x20000bbc

08001e34 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <ETH_WKUP_IRQHandler+0x10>)
 8001e3a:	f000 fc53 	bl	80026e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000bbc 	.word	0x20000bbc

08001e48 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <HASH_RNG_IRQHandler+0x10>)
 8001e4e:	f001 fe31 	bl	8003ab4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000c84 	.word	0x20000c84

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e76:	f009 f989 	bl	800b18c <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f04:	605a      	str	r2, [r3, #4]
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f009 f90a 	bl	800b18c <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20020000 	.word	0x20020000
 8001fa4:	00000800 	.word	0x00000800
 8001fa8:	20000d60 	.word	0x20000d60
 8001fac:	20006dd8 	.word	0x20006dd8

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <MX_TIM5_Init+0x94>)
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <MX_TIM5_Init+0x98>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_TIM5_Init+0x94>)
 8001ff8:	f240 2257 	movw	r2, #599	@ 0x257
 8001ffc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <MX_TIM5_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <MX_TIM5_Init+0x94>)
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
 800200a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <MX_TIM5_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <MX_TIM5_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002018:	4813      	ldr	r0, [pc, #76]	@ (8002068 <MX_TIM5_Init+0x94>)
 800201a:	f002 fc4b 	bl	80048b4 <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002024:	f7ff fd54 	bl	8001ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800202c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <MX_TIM5_Init+0x94>)
 8002036:	f002 fded 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002040:	f7ff fd46 	bl	8001ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_TIM5_Init+0x94>)
 8002052:	f003 f815 	bl	8005080 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800205c:	f7ff fd38 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000d64 	.word	0x20000d64
 800206c:	40000c00 	.word	0x40000c00

08002070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	@ (80020b8 <HAL_TIM_Base_MspInit+0x48>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d115      	bne.n	80020ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_TIM_Base_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <HAL_TIM_Base_MspInit+0x4c>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_TIM_Base_MspInit+0x4c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2105      	movs	r1, #5
 80020a2:	2032      	movs	r0, #50	@ 0x32
 80020a4:	f000 f9c6 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020a8:	2032      	movs	r0, #50	@ 0x32
 80020aa:	f000 f9df 	bl	800246c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40023800 	.word	0x40023800

080020c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <MX_USART3_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f8:	f003 f852 	bl	80051a0 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f7ff fce5 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000db0 	.word	0x20000db0
 8002110:	40004800 	.word	0x40004800

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_UART_MspInit+0x84>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d12c      	bne.n	8002190 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_UART_MspInit+0x88>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_UART_MspInit+0x88>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_UART_MspInit+0x88>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_UART_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a10      	ldr	r2, [pc, #64]	@ (800219c <HAL_UART_MspInit+0x88>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_UART_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800216e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002180:	2307      	movs	r3, #7
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <HAL_UART_MspInit+0x8c>)
 800218c:	f000 fe42 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	@ 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40004800 	.word	0x40004800
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020c00 	.word	0x40020c00

080021a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021a8:	f7ff ff02 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f008 ffe1 	bl	800b198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d6:	f7ff fbd9 	bl	800198c <main>
  bx  lr    
 80021da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021e8:	0800ed98 	.word	0x0800ed98
  ldr r2, =_sbss
 80021ec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021f0:	20006dd8 	.word	0x20006dd8

080021f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_Init+0x40>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <HAL_Init+0x40>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_Init+0x40>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 f8fc 	bl	800241e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002226:	200f      	movs	r0, #15
 8002228:	f7ff fd50 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222c:	f7ff fd1a 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000001c 	.word	0x2000001c
 8002260:	20000df8 	.word	0x20000df8

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000df8 	.word	0x20000df8

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000001c 	.word	0x2000001c

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff4c 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002446:	f7ff ff61 	bl	800230c <__NVIC_GetPriorityGrouping>
 800244a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f7ff ffb1 	bl	80023b8 <NVIC_EncodePriority>
 8002456:	4602      	mov	r2, r0
 8002458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff80 	bl	8002364 <__NVIC_SetPriority>
}
 8002464:	bf00      	nop
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff54 	bl	8002328 <__NVIC_EnableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Start_IT+0x26>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e040      	b.n	8002530 <HAL_DMA_Start_IT+0xa8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d12f      	bne.n	8002522 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f83a 	bl	8002550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	223f      	movs	r2, #63	@ 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0216 	orr.w	r2, r2, #22
 80024f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e005      	b.n	800252e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800256c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b40      	cmp	r3, #64	@ 0x40
 800257c:	d108      	bne.n	8002590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800258e:	e007      	b.n	80025a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e08a      	b.n	80026d4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2223      	movs	r2, #35	@ 0x23
 80025cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff f84d 	bl	8001670 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_ETH_Init+0x130>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	4a3f      	ldr	r2, [pc, #252]	@ (80026dc <HAL_ETH_Init+0x130>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e6:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_ETH_Init+0x130>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_ETH_Init+0x134>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a3a      	ldr	r2, [pc, #232]	@ (80026e0 <HAL_ETH_Init+0x134>)
 80025f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_ETH_Init+0x134>)
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_ETH_Init+0x134>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800260c:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <HAL_ETH_Init+0x134>)
 800260e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002628:	f7ff fe1c 	bl	8002264 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800262e:	e011      	b.n	8002654 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002630:	f7ff fe18 	bl	8002264 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800263e:	d909      	bls.n	8002654 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	22e0      	movs	r2, #224	@ 0xe0
 800264c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e03f      	b.n	80026d4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e4      	bne.n	8002630 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa5e 	bl	8002b28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fb09 	bl	8002c84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fb5f 	bl	8002d36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	461a      	mov	r2, r3
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fac7 	bl	8002c14 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002694:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80026be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2210      	movs	r2, #16
 80026ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40013800 	.word	0x40013800

080026e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800270c:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <HAL_ETH_IRQHandler+0x158>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <HAL_ETH_IRQHandler+0x56>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272e:	461a      	mov	r2, r3
 8002730:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_ETH_IRQHandler+0x15c>)
 8002732:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f891 	bl	800285c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00f      	beq.n	8002764 <HAL_ETH_IRQHandler+0x80>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002756:	461a      	mov	r2, r3
 8002758:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800275c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f872 	bl	8002848 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d042      	beq.n	80027f4 <HAL_ETH_IRQHandler+0x110>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d03d      	beq.n	80027f4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f043 0208 	orr.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01a      	beq.n	80027c8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <HAL_ETH_IRQHandler+0x160>)
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80027b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027bc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	22e0      	movs	r2, #224	@ 0xe0
 80027c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80027c6:	e012      	b.n	80027ee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e6:	461a      	mov	r2, r3
 80027e8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80027ec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f83e 	bl	8002870 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f838 	bl	8002884 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_ETH_IRQHandler+0x158>)
 8002828:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800282c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f832 	bl	8002898 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40013c00 	.word	0x40013c00
 8002840:	00010040 	.word	0x00010040
 8002844:	007e2000 	.word	0x007e2000

08002848 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <ETH_SetMACConfig+0x164>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	7b9b      	ldrb	r3, [r3, #14]
 80028ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	7c12      	ldrb	r2, [r2, #16]
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	d102      	bne.n	80028da <ETH_SetMACConfig+0x2e>
 80028d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028d8:	e000      	b.n	80028dc <ETH_SetMACConfig+0x30>
 80028da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	7c52      	ldrb	r2, [r2, #17]
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	d102      	bne.n	80028ec <ETH_SetMACConfig+0x40>
 80028e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80028ea:	e000      	b.n	80028ee <ETH_SetMACConfig+0x42>
 80028ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7fdb      	ldrb	r3, [r3, #31]
 80028fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80028fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	7f92      	ldrb	r2, [r2, #30]
 8002908:	2a00      	cmp	r2, #0
 800290a:	d102      	bne.n	8002912 <ETH_SetMACConfig+0x66>
 800290c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0x68>
 8002912:	2200      	movs	r2, #0
                        macconf->Speed |
 8002914:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7f1b      	ldrb	r3, [r3, #28]
 800291a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800291c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002922:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800292a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002932:	2a00      	cmp	r2, #0
 8002934:	d102      	bne.n	800293c <ETH_SetMACConfig+0x90>
 8002936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293a:	e000      	b.n	800293e <ETH_SetMACConfig+0x92>
 800293c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800293e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	7bdb      	ldrb	r3, [r3, #15]
 8002944:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002946:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800294c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002954:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002956:	4313      	orrs	r3, r2
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fc84 	bl	800227c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002992:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800299a:	2a00      	cmp	r2, #0
 800299c:	d101      	bne.n	80029a2 <ETH_SetMACConfig+0xf6>
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	e000      	b.n	80029a4 <ETH_SetMACConfig+0xf8>
 80029a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80029b2:	2a01      	cmp	r2, #1
 80029b4:	d101      	bne.n	80029ba <ETH_SetMACConfig+0x10e>
 80029b6:	2208      	movs	r2, #8
 80029b8:	e000      	b.n	80029bc <ETH_SetMACConfig+0x110>
 80029ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80029c4:	2a01      	cmp	r2, #1
 80029c6:	d101      	bne.n	80029cc <ETH_SetMACConfig+0x120>
 80029c8:	2204      	movs	r2, #4
 80029ca:	e000      	b.n	80029ce <ETH_SetMACConfig+0x122>
 80029cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80029d6:	2a01      	cmp	r2, #1
 80029d8:	d101      	bne.n	80029de <ETH_SetMACConfig+0x132>
 80029da:	2202      	movs	r2, #2
 80029dc:	e000      	b.n	80029e0 <ETH_SetMACConfig+0x134>
 80029de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029e0:	4313      	orrs	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff fc3f 	bl	800227c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	fd20810f 	.word	0xfd20810f

08002a14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <ETH_SetDMAConfig+0x110>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7b1b      	ldrb	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <ETH_SetDMAConfig+0x2c>
 8002a3a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a3e:	e000      	b.n	8002a42 <ETH_SetDMAConfig+0x2e>
 8002a40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	7b5b      	ldrb	r3, [r3, #13]
 8002a46:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a48:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	7f52      	ldrb	r2, [r2, #29]
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	d102      	bne.n	8002a58 <ETH_SetDMAConfig+0x44>
 8002a52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a56:	e000      	b.n	8002a5a <ETH_SetDMAConfig+0x46>
 8002a58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	7b9b      	ldrb	r3, [r3, #14]
 8002a60:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a62:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7f1b      	ldrb	r3, [r3, #28]
 8002a6e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7f9b      	ldrb	r3, [r3, #30]
 8002a76:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a78:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a86:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fbe6 	bl	800227c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ac8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ace:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ad4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002adc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ade:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ae6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002aec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002afa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff fbb7 	bl	800227c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	f8de3f23 	.word	0xf8de3f23

08002b28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0a6      	sub	sp, #152	@ 0x98
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ba2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fe7f 	bl	80028ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002be4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002be8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff05 	bl	8002a14 <ETH_SetDMAConfig>
}
 8002c0a:	bf00      	nop
 8002c0c:	3798      	adds	r7, #152	@ 0x98
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3305      	adds	r3, #5
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	3204      	adds	r2, #4
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <ETH_MACAddressConfig+0x68>)
 8002c36:	4413      	add	r3, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3303      	adds	r3, #3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	061a      	lsls	r2, r3, #24
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3301      	adds	r3, #1
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <ETH_MACAddressConfig+0x6c>)
 8002c66:	4413      	add	r3, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6013      	str	r3, [r2, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40028040 	.word	0x40028040
 8002c80:	40028044 	.word	0x40028044

08002c84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e03e      	b.n	8002d10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	3206      	adds	r2, #6
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d80c      	bhi.n	8002cf4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68d9      	ldr	r1, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	e004      	b.n	8002cfe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d9bd      	bls.n	8002c92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d28:	611a      	str	r2, [r3, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e048      	b.n	8002dd6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	3212      	adds	r2, #18
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d80c      	bhi.n	8002dc6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e004      	b.n	8002dd0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d9b3      	bls.n	8002d44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e16b      	b.n	8003108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 815a 	bne.w	8003102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80b4 	beq.w	8003102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b60      	ldr	r3, [pc, #384]	@ (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8003120 <HAL_GPIO_Init+0x30c>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002faa:	4b5d      	ldr	r3, [pc, #372]	@ (8003120 <HAL_GPIO_Init+0x30c>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003124 <HAL_GPIO_Init+0x310>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_GPIO_Init+0x314>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	@ (800312c <HAL_GPIO_Init+0x318>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d025      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a50      	ldr	r2, [pc, #320]	@ (8003130 <HAL_GPIO_Init+0x31c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01f      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8003134 <HAL_GPIO_Init+0x320>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x21a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8003138 <HAL_GPIO_Init+0x324>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x216>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4d      	ldr	r2, [pc, #308]	@ (800313c <HAL_GPIO_Init+0x328>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x212>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4c      	ldr	r2, [pc, #304]	@ (8003140 <HAL_GPIO_Init+0x32c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4b      	ldr	r2, [pc, #300]	@ (8003144 <HAL_GPIO_Init+0x330>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x20a>
 800301a:	2307      	movs	r3, #7
 800301c:	e00e      	b.n	800303c <HAL_GPIO_Init+0x228>
 800301e:	2308      	movs	r3, #8
 8003020:	e00c      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003022:	2306      	movs	r3, #6
 8003024:	e00a      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003026:	2305      	movs	r3, #5
 8003028:	e008      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302a:	2304      	movs	r3, #4
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x228>
 800302e:	2303      	movs	r3, #3
 8003030:	e004      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003032:	2302      	movs	r3, #2
 8003034:	e002      	b.n	800303c <HAL_GPIO_Init+0x228>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_GPIO_Init+0x228>
 800303a:	2300      	movs	r3, #0
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f002 0203 	and.w	r2, r2, #3
 8003042:	0092      	lsls	r2, r2, #2
 8003044:	4093      	lsls	r3, r2
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304c:	4935      	ldr	r1, [pc, #212]	@ (8003124 <HAL_GPIO_Init+0x310>)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305a:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_GPIO_Init+0x334>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307e:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <HAL_GPIO_Init+0x334>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003084:	4b30      	ldr	r3, [pc, #192]	@ (8003148 <HAL_GPIO_Init+0x334>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a8:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <HAL_GPIO_Init+0x334>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <HAL_GPIO_Init+0x334>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_GPIO_Init+0x334>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_GPIO_Init+0x334>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030fc:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <HAL_GPIO_Init+0x334>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3301      	adds	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	f67f ae90 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	@ 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	40013800 	.word	0x40013800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40021400 	.word	0x40021400
 8003140:	40021800 	.word	0x40021800
 8003144:	40021c00 	.word	0x40021c00
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e267      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d075      	beq.n	8003256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800316a:	4b88      	ldr	r3, [pc, #544]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00c      	beq.n	8003190 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003176:	4b85      	ldr	r3, [pc, #532]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800317e:	2b08      	cmp	r3, #8
 8003180:	d112      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003182:	4b82      	ldr	r3, [pc, #520]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b7e      	ldr	r3, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05b      	beq.n	8003254 <HAL_RCC_OscConfig+0x108>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d157      	bne.n	8003254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e242      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x74>
 80031b2:	4b76      	ldr	r3, [pc, #472]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e01d      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x98>
 80031ca:	4b70      	ldr	r3, [pc, #448]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6f      	ldr	r2, [pc, #444]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b6d      	ldr	r3, [pc, #436]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6c      	ldr	r2, [pc, #432]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031e4:	4b69      	ldr	r3, [pc, #420]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a68      	ldr	r2, [pc, #416]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b66      	ldr	r3, [pc, #408]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a65      	ldr	r2, [pc, #404]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f82e 	bl	8002264 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7ff f82a 	bl	8002264 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e207      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b5b      	ldr	r3, [pc, #364]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0xc0>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7ff f81a 	bl	8002264 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7ff f816 	bl	8002264 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1f3      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	4b51      	ldr	r3, [pc, #324]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0xe8>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d063      	beq.n	800332a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003262:	4b4a      	ldr	r3, [pc, #296]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b47      	ldr	r3, [pc, #284]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003276:	2b08      	cmp	r3, #8
 8003278:	d11c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b44      	ldr	r3, [pc, #272]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d116      	bne.n	80032b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	4b41      	ldr	r3, [pc, #260]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x152>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e1c7      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4937      	ldr	r1, [pc, #220]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	e03a      	b.n	800332a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032bc:	4b34      	ldr	r3, [pc, #208]	@ (8003390 <HAL_RCC_OscConfig+0x244>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe ffcf 	bl	8002264 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ca:	f7fe ffcb 	bl	8002264 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1a8      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	4b2b      	ldr	r3, [pc, #172]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4925      	ldr	r1, [pc, #148]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
 80032fc:	e015      	b.n	800332a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCC_OscConfig+0x244>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe ffae 	bl	8002264 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe ffaa 	bl	8002264 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e187      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d036      	beq.n	80033a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <HAL_RCC_OscConfig+0x248>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe ff8e 	bl	8002264 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334c:	f7fe ff8a 	bl	8002264 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e167      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_RCC_OscConfig+0x240>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x200>
 800336a:	e01b      	b.n	80033a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336c:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <HAL_RCC_OscConfig+0x248>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fe ff77 	bl	8002264 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	e00e      	b.n	8003398 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7fe ff73 	bl	8002264 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d907      	bls.n	8003398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e150      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
 8003394:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	4b88      	ldr	r3, [pc, #544]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800339a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ea      	bne.n	800337a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8097 	beq.w	80034e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b81      	ldr	r3, [pc, #516]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b7d      	ldr	r3, [pc, #500]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	4a7c      	ldr	r2, [pc, #496]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d2:	4b7a      	ldr	r3, [pc, #488]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b77      	ldr	r3, [pc, #476]	@ (80035c0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4b74      	ldr	r3, [pc, #464]	@ (80035c0 <HAL_RCC_OscConfig+0x474>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a73      	ldr	r2, [pc, #460]	@ (80035c0 <HAL_RCC_OscConfig+0x474>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fe ff33 	bl	8002264 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fe ff2f 	bl	8002264 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e10c      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_OscConfig+0x474>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x2ea>
 8003428:	4b64      	ldr	r3, [pc, #400]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	4a63      	ldr	r2, [pc, #396]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	@ 0x70
 8003434:	e01c      	b.n	8003470 <HAL_RCC_OscConfig+0x324>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b05      	cmp	r3, #5
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x30c>
 800343e:	4b5f      	ldr	r3, [pc, #380]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a5e      	ldr	r2, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
 800344a:	4b5c      	ldr	r3, [pc, #368]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a5b      	ldr	r2, [pc, #364]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6713      	str	r3, [r2, #112]	@ 0x70
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0x324>
 8003458:	4b58      	ldr	r3, [pc, #352]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a57      	ldr	r2, [pc, #348]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
 8003464:	4b55      	ldr	r3, [pc, #340]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003468:	4a54      	ldr	r2, [pc, #336]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 0304 	bic.w	r3, r3, #4
 800346e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fef4 	bl	8002264 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fef0 	bl	8002264 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0cb      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	4b49      	ldr	r3, [pc, #292]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ee      	beq.n	8003480 <HAL_RCC_OscConfig+0x334>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fe fede 	bl	8002264 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe feda 	bl	8002264 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0b5      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c2:	4b3e      	ldr	r3, [pc, #248]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ee      	bne.n	80034ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b39      	ldr	r3, [pc, #228]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4a38      	ldr	r2, [pc, #224]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80a1 	beq.w	800362c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ea:	4b34      	ldr	r3, [pc, #208]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d05c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d141      	bne.n	8003582 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <HAL_RCC_OscConfig+0x478>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe feae 	bl	8002264 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe feaa 	bl	8002264 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e087      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b27      	ldr	r3, [pc, #156]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	491b      	ldr	r1, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x478>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe fe83 	bl	8002264 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fe7f 	bl	8002264 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e05c      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x416>
 8003580:	e054      	b.n	800362c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_OscConfig+0x478>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fe6c 	bl	8002264 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fe68 	bl	8002264 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e045      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x470>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x444>
 80035ae:	e03d      	b.n	800362c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e038      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x4ec>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d028      	beq.n	8003628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d121      	bne.n	8003628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d11a      	bne.n	8003628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0cc      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4b68      	ldr	r3, [pc, #416]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d90c      	bls.n	8003678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b65      	ldr	r3, [pc, #404]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b63      	ldr	r3, [pc, #396]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a58      	ldr	r2, [pc, #352]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800369a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a8:	4b53      	ldr	r3, [pc, #332]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a52      	ldr	r2, [pc, #328]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b50      	ldr	r3, [pc, #320]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	494d      	ldr	r1, [pc, #308]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d044      	beq.n	800375c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b47      	ldr	r3, [pc, #284]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d119      	bne.n	800371a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	4b3f      	ldr	r3, [pc, #252]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370a:	4b3b      	ldr	r3, [pc, #236]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e067      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371a:	4b37      	ldr	r3, [pc, #220]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f023 0203 	bic.w	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4934      	ldr	r1, [pc, #208]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800372c:	f7fe fd9a 	bl	8002264 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	e00a      	b.n	800374a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003734:	f7fe fd96 	bl	8002264 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e04f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 020c 	and.w	r2, r3, #12
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	429a      	cmp	r2, r3
 800375a:	d1eb      	bne.n	8003734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d20c      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e032      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4916      	ldr	r1, [pc, #88]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ae:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490e      	ldr	r1, [pc, #56]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c2:	f000 f821 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490a      	ldr	r1, [pc, #40]	@ (80037fc <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a09      	ldr	r2, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037de:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fa72 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00
 80037f8:	40023800 	.word	0x40023800
 80037fc:	0800e908 	.word	0x0800e908
 8003800:	20000014 	.word	0x20000014
 8003804:	20000018 	.word	0x20000018

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b090      	sub	sp, #64	@ 0x40
 800380e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003820:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d00d      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x40>
 800382c:	2b08      	cmp	r3, #8
 800382e:	f200 80a1 	bhi.w	8003974 <HAL_RCC_GetSysClockFreq+0x16c>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x34>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d003      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x3a>
 800383a:	e09b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b53      	ldr	r3, [pc, #332]	@ (800398c <HAL_RCC_GetSysClockFreq+0x184>)
 800383e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003840:	e09b      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003842:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003846:	e098      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003848:	4b4f      	ldr	r3, [pc, #316]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003850:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003852:	4b4d      	ldr	r3, [pc, #308]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	2200      	movs	r2, #0
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	627a      	str	r2, [r7, #36]	@ 0x24
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003870:	2100      	movs	r1, #0
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003874:	fb03 f201 	mul.w	r2, r3, r1
 8003878:	2300      	movs	r3, #0
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	4413      	add	r3, r2
 8003880:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x188>)
 8003882:	fba0 1202 	umull	r1, r2, r0, r2
 8003886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003888:	460a      	mov	r2, r1
 800388a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800388c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800388e:	4413      	add	r3, r2
 8003890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	2200      	movs	r2, #0
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	61fa      	str	r2, [r7, #28]
 800389a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800389e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038a2:	f7fd f9f1 	bl	8000c88 <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4613      	mov	r3, r2
 80038ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ae:	e053      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b0:	4b35      	ldr	r3, [pc, #212]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	2200      	movs	r2, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	617a      	str	r2, [r7, #20]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038c2:	f04f 0b00 	mov.w	fp, #0
 80038c6:	4652      	mov	r2, sl
 80038c8:	465b      	mov	r3, fp
 80038ca:	f04f 0000 	mov.w	r0, #0
 80038ce:	f04f 0100 	mov.w	r1, #0
 80038d2:	0159      	lsls	r1, r3, #5
 80038d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d8:	0150      	lsls	r0, r2, #5
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	ebb2 080a 	subs.w	r8, r2, sl
 80038e2:	eb63 090b 	sbc.w	r9, r3, fp
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038fa:	ebb2 0408 	subs.w	r4, r2, r8
 80038fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	00eb      	lsls	r3, r5, #3
 800390c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003910:	00e2      	lsls	r2, r4, #3
 8003912:	4614      	mov	r4, r2
 8003914:	461d      	mov	r5, r3
 8003916:	eb14 030a 	adds.w	r3, r4, sl
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	eb45 030b 	adc.w	r3, r5, fp
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392e:	4629      	mov	r1, r5
 8003930:	028b      	lsls	r3, r1, #10
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003938:	4621      	mov	r1, r4
 800393a:	028a      	lsls	r2, r1, #10
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	2200      	movs	r2, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	60fa      	str	r2, [r7, #12]
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	f7fd f99c 	bl	8000c88 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x180>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003968:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetSysClockFreq+0x184>)
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800397c:	4618      	mov	r0, r3
 800397e:	3740      	adds	r7, #64	@ 0x40
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	017d7840 	.word	0x017d7840

08003994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000014 	.word	0x20000014

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a9b      	lsrs	r3, r3, #10
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	0800e918 	.word	0x0800e918

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffdc 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	0800e918 	.word	0x0800e918

080039fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	220f      	movs	r2, #15
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a18:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <HAL_RCC_GetClockConfig+0x60>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40023c00 	.word	0x40023c00

08003a60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e01c      	b.n	8003aac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	795b      	ldrb	r3, [r3, #5]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe f83e 	bl	8001b04 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0204 	orr.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e009      	b.n	8003af2 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2208      	movs	r2, #8
 8003aec:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003aee:	2301      	movs	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10b      	bne.n	8003b10 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2204      	movs	r2, #4
 8003afc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f837 	bl	8003b72 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8003b0c:	605a      	str	r2, [r3, #4]

    return;
 8003b0e:	e022      	b.n	8003b56 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0208 	bic.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	795b      	ldrb	r3, [r3, #5]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f803 	bl	8003b5c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e022      	b.n	8003bde <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fff2 	bl	8001b94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f815 	bl	8003be8 <HAL_SD_InitCard>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e00a      	b.n	8003bde <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	b08e      	sub	sp, #56	@ 0x38
 8003bec:	af04      	add	r7, sp, #16
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c04:	2376      	movs	r3, #118	@ 0x76
 8003c06:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681d      	ldr	r5, [r3, #0]
 8003c0c:	466c      	mov	r4, sp
 8003c0e:	f107 0314 	add.w	r3, r7, #20
 8003c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c1a:	f107 0308 	add.w	r3, r7, #8
 8003c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c20:	4628      	mov	r0, r5
 8003c22:	f001 ff27 	bl	8005a74 <SDIO_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e04f      	b.n	8003cd8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c38:	4b29      	ldr	r3, [pc, #164]	@ (8003ce0 <HAL_SD_InitCard+0xf8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 ff41 	bl	8005aca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c48:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_SD_InitCard+0xf8>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003c4e:	2002      	movs	r0, #2
 8003c50:	f7fe fb14 	bl	800227c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fd77 	bl	8004748 <SD_PowerON>
 8003c5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e02e      	b.n	8003cd8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fc96 	bl	80045ac <SD_InitCard>
 8003c80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01b      	b.n	8003cd8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 ffa0 	bl	8005bee <SDMMC_CmdBlockLength>
 8003cae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00f      	beq.n	8003cd6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <HAL_SD_InitCard+0xfc>)
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3728      	adds	r7, #40	@ 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce0:	422580a0 	.word	0x422580a0
 8003ce4:	004005ff 	.word	0x004005ff

08003ce8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	@ 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0c0      	b.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 80b9 	bne.w	8003e90 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d907      	bls.n	8003d42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0a7      	b.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e9c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003d74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3380      	adds	r3, #128	@ 0x80
 8003dac:	4619      	mov	r1, r3
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	f7fe fb67 	bl	8002488 <HAL_DMA_Start_IT>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	@ (8003ea4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e050      	b.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003df0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d002      	beq.n	8003e04 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	025b      	lsls	r3, r3, #9
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	025b      	lsls	r3, r3, #9
 8003e0e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003e10:	2390      	movs	r3, #144	@ 0x90
 8003e12:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e14:	2302      	movs	r3, #2
 8003e16:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f107 0210 	add.w	r2, r7, #16
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 feb3 	bl	8005b96 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d90a      	bls.n	8003e4c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2282      	movs	r2, #130	@ 0x82
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 ff17 	bl	8005c76 <SDMMC_CmdReadMultiBlock>
 8003e48:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e4a:	e009      	b.n	8003e60 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2281      	movs	r2, #129	@ 0x81
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 feea 	bl	8005c32 <SDMMC_CmdReadSingleBlock>
 8003e5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e002      	b.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3730      	adds	r7, #48	@ 0x30
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	08004497 	.word	0x08004497
 8003ea0:	08004509 	.word	0x08004509
 8003ea4:	004005ff 	.word	0x004005ff
 8003ea8:	4225858c 	.word	0x4225858c

08003eac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	@ 0x30
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0c5      	b.n	8004060 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 80be 	bne.w	800405e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	441a      	add	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d907      	bls.n	8003f06 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0ac      	b.n	8004060 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004068 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	4a4d      	ldr	r2, [pc, #308]	@ (800406c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003f38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	2200      	movs	r2, #0
 8003f40:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d002      	beq.n	8003f50 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	025b      	lsls	r3, r3, #9
 8003f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d90a      	bls.n	8003f6c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22a0      	movs	r2, #160	@ 0xa0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fecb 	bl	8005cfe <SDMMC_CmdWriteMultiBlock>
 8003f68:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f6a:	e009      	b.n	8003f80 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2290      	movs	r2, #144	@ 0x90
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fe9e 	bl	8005cba <SDMMC_CmdWriteSingleBlock>
 8003f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d012      	beq.n	8003fac <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a39      	ldr	r2, [pc, #228]	@ (8004070 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e059      	b.n	8004060 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003fac:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	2240      	movs	r2, #64	@ 0x40
 8003fb8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3380      	adds	r3, #128	@ 0x80
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	f7fe fa4d 	bl	8002488 <HAL_DMA_Start_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01c      	beq.n	800402e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004002:	f023 0302 	bic.w	r3, r3, #2
 8004006:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e018      	b.n	8004060 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800403a:	2390      	movs	r3, #144	@ 0x90
 800403c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004042:	2300      	movs	r3, #0
 8004044:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f107 0210 	add.w	r2, r7, #16
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fd9e 	bl	8005b96 <SDIO_ConfigData>

      return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3730      	adds	r7, #48	@ 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	0800446d 	.word	0x0800446d
 800406c:	08004509 	.word	0x08004509
 8004070:	004005ff 	.word	0x004005ff
 8004074:	4225858c 	.word	0x4225858c

08004078 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800409a:	0f9b      	lsrs	r3, r3, #30
 800409c:	b2da      	uxtb	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a6:	0e9b      	lsrs	r3, r3, #26
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ec:	0d1b      	lsrs	r3, r3, #20
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	b2da      	uxtb	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800410a:	0bdb      	lsrs	r3, r3, #15
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	0b9b      	lsrs	r3, r3, #14
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800412e:	0b5b      	lsrs	r3, r3, #13
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004140:	0b1b      	lsrs	r3, r3, #12
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	2b00      	cmp	r3, #0
 800415a:	d163      	bne.n	8004224 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800416c:	0f92      	lsrs	r2, r2, #30
 800416e:	431a      	orrs	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004178:	0edb      	lsrs	r3, r3, #27
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	b2da      	uxtb	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800418a:	0e1b      	lsrs	r3, r3, #24
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	b2da      	uxtb	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419c:	0d5b      	lsrs	r3, r3, #21
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ae:	0c9b      	lsrs	r3, r3, #18
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c0:	0bdb      	lsrs	r3, r3, #15
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	7e1b      	ldrb	r3, [r3, #24]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	3302      	adds	r3, #2
 80041e4:	2201      	movs	r2, #1
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80041ee:	fb03 f202 	mul.w	r2, r3, r2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	7a1b      	ldrb	r3, [r3, #8]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004210:	0a52      	lsrs	r2, r2, #9
 8004212:	fb03 f202 	mul.w	r2, r3, r2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004220:	661a      	str	r2, [r3, #96]	@ 0x60
 8004222:	e031      	b.n	8004288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	2b01      	cmp	r3, #1
 800422a:	d11d      	bne.n	8004268 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	3301      	adds	r3, #1
 8004248:	029a      	lsls	r2, r3, #10
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800425c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	661a      	str	r2, [r3, #96]	@ 0x60
 8004266:	e00f      	b.n	8004288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a58      	ldr	r2, [pc, #352]	@ (80043d0 <HAL_SD_GetCardCSD+0x344>)
 800426e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e09d      	b.n	80043c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428c:	0b9b      	lsrs	r3, r3, #14
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429e:	09db      	lsrs	r3, r3, #7
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c0:	0fdb      	lsrs	r3, r3, #31
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	0f5b      	lsrs	r3, r3, #29
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	0d9b      	lsrs	r3, r3, #22
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	0d5b      	lsrs	r3, r3, #21
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	0bdb      	lsrs	r3, r3, #15
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	0b9b      	lsrs	r3, r3, #14
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	b2da      	uxtb	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	0b1b      	lsrs	r3, r3, #12
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	0a9b      	lsrs	r3, r3, #10
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	b2da      	uxtb	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	004005ff 	.word	0x004005ff

080043d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa10 	bl	8004864 <SD_SendStatus>
 8004444:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	0a5b      	lsrs	r3, r3, #9
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004462:	693b      	ldr	r3, [r7, #16]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004488:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	2b82      	cmp	r3, #130	@ 0x82
 80044aa:	d111      	bne.n	80044d0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 fc47 	bl	8005d44 <SDMMC_CmdStopTransfer>
 80044b6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fdd4 	bl	8004078 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0208 	bic.w	r2, r2, #8
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f002 f84b 	bl	8006594 <HAL_SD_RxCpltCallback>
#endif
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe f80e 	bl	8002538 <HAL_DMA_GetError>
 800451c:	4603      	mov	r3, r0
 800451e:	2b02      	cmp	r3, #2
 8004520:	d03e      	beq.n	80045a0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d002      	beq.n	800453e <SD_DMAError+0x36>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d12d      	bne.n	800459a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a19      	ldr	r2, [pc, #100]	@ (80045a8 <SD_DMAError+0xa0>)
 8004544:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004554:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f7ff ff62 	bl	800442c <HAL_SD_GetCardState>
 8004568:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d002      	beq.n	8004576 <SD_DMAError+0x6e>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b05      	cmp	r3, #5
 8004574:	d10a      	bne.n	800458c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fbe2 	bl	8005d44 <SDMMC_CmdStopTransfer>
 8004580:	4602      	mov	r2, r0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	431a      	orrs	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7ff fd6c 	bl	8004078 <HAL_SD_ErrorCallback>
#endif
  }
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	004005ff 	.word	0x004005ff

080045ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b094      	sub	sp, #80	@ 0x50
 80045b0:	af04      	add	r7, sp, #16
 80045b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fa92 	bl	8005ae6 <SDIO_GetPowerState>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80045cc:	e0b8      	b.n	8004740 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d02f      	beq.n	8004636 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 fc79 	bl	8005ed2 <SDMMC_CmdSendCID>
 80045e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <SD_InitCard+0x40>
    {
      return errorstate;
 80045e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ea:	e0a9      	b.n	8004740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fabc 	bl	8005b70 <SDIO_GetResponse>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2104      	movs	r1, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fab3 	bl	8005b70 <SDIO_GetResponse>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2108      	movs	r1, #8
 8004616:	4618      	mov	r0, r3
 8004618:	f001 faaa 	bl	8005b70 <SDIO_GetResponse>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	210c      	movs	r1, #12
 8004628:	4618      	mov	r0, r3
 800462a:	f001 faa1 	bl	8005b70 <SDIO_GetResponse>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	2b03      	cmp	r3, #3
 800463c:	d00d      	beq.n	800465a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f107 020e 	add.w	r2, r7, #14
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fc7f 	bl	8005f4c <SDMMC_CmdSetRelAdd>
 800464e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <SD_InitCard+0xae>
    {
      return errorstate;
 8004656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004658:	e072      	b.n	8004740 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	2b03      	cmp	r3, #3
 8004660:	d036      	beq.n	80046d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	461a      	mov	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f001 fc49 	bl	8005f0e <SDMMC_CmdSendCSD>
 800467c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800467e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004686:	e05b      	b.n	8004740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fa6e 	bl	8005b70 <SDIO_GetResponse>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2104      	movs	r1, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fa65 	bl	8005b70 <SDIO_GetResponse>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2108      	movs	r1, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 fa5c 	bl	8005b70 <SDIO_GetResponse>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	210c      	movs	r1, #12
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fa53 	bl	8005b70 <SDIO_GetResponse>
 80046ca:	4602      	mov	r2, r0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2104      	movs	r1, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fa4a 	bl	8005b70 <SDIO_GetResponse>
 80046dc:	4603      	mov	r3, r0
 80046de:	0d1a      	lsrs	r2, r3, #20
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80046e4:	f107 0310 	add.w	r3, r7, #16
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fcce 	bl	800408c <HAL_SD_GetCardCSD>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80046fa:	e021      	b.n	8004740 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	2200      	movs	r2, #0
 8004708:	461c      	mov	r4, r3
 800470a:	4615      	mov	r5, r2
 800470c:	4622      	mov	r2, r4
 800470e:	462b      	mov	r3, r5
 8004710:	4608      	mov	r0, r1
 8004712:	f001 fb39 	bl	8005d88 <SDMMC_CmdSelDesel>
 8004716:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <SD_InitCard+0x176>
  {
    return errorstate;
 800471e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004720:	e00e      	b.n	8004740 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	466c      	mov	r4, sp
 800472a:	f103 0210 	add.w	r2, r3, #16
 800472e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004734:	3304      	adds	r3, #4
 8004736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004738:	4628      	mov	r0, r5
 800473a:	f001 f99b 	bl	8005a74 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3740      	adds	r7, #64	@ 0x40
 8004744:	46bd      	mov	sp, r7
 8004746:	bdb0      	pop	{r4, r5, r7, pc}

08004748 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fb34 	bl	8005dce <SDMMC_CmdGoIdleState>
 8004766:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <SD_PowerON+0x2a>
  {
    return errorstate;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	e072      	b.n	8004858 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fb47 	bl	8005e0a <SDMMC_CmdOperCond>
 800477c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fb1d 	bl	8005dce <SDMMC_CmdGoIdleState>
 8004794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	e05b      	b.n	8004858 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d137      	bne.n	800481e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 fb47 	bl	8005e48 <SDMMC_CmdAppCommand>
 80047ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02d      	beq.n	800481e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80047c6:	e047      	b.n	8004858 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fb3a 	bl	8005e48 <SDMMC_CmdAppCommand>
 80047d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e03b      	b.n	8004858 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	491e      	ldr	r1, [pc, #120]	@ (8004860 <SD_PowerON+0x118>)
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 fb50 	bl	8005e8c <SDMMC_CmdAppOperCommand>
 80047ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80047f8:	e02e      	b.n	8004858 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f001 f9b5 	bl	8005b70 <SDIO_GetResponse>
 8004806:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0fdb      	lsrs	r3, r3, #31
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <SD_PowerON+0xcc>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <SD_PowerON+0xce>
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

    count++;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3301      	adds	r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004824:	4293      	cmp	r3, r2
 8004826:	d802      	bhi.n	800482e <SD_PowerON+0xe6>
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0cc      	beq.n	80047c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004834:	4293      	cmp	r3, r2
 8004836:	d902      	bls.n	800483e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800483c:	e00c      	b.n	8004858 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
 800484e:	e002      	b.n	8004856 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	c1100000 	.word	0xc1100000

08004864 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004878:	e018      	b.n	80048ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f001 fb81 	bl	8005f8e <SDMMC_CmdSendStatus>
 800488c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e009      	b.n	80048ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 f966 	bl	8005b70 <SDIO_GetResponse>
 80048a4:	4602      	mov	r2, r0
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e041      	b.n	800494a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fbc8 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f000 fa7e 	bl	8004df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e04e      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d022      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004996:	d01d      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d018      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00e      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a19      	ldr	r2, [pc, #100]	@ (8004a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a18      	ldr	r2, [pc, #96]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d111      	bne.n	80049f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d010      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	e007      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800

08004a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d020      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0202 	mvn.w	r2, #2
 8004a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f999 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f98b 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f99c 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d020      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0204 	mvn.w	r2, #4
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f973 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f965 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f976 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0208 	mvn.w	r2, #8
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f94d 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f93f 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f950 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f927 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f919 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f92a 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0201 	mvn.w	r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc ff86 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fae4 	bl	800518c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8fb 	bl	8004dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0220 	mvn.w	r2, #32
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fab6 	bl	8005178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0b4      	b.n	8004d9a <HAL_TIM_ConfigClockSource+0x186>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c68:	d03e      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6e:	f200 8087 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c76:	f000 8086 	beq.w	8004d86 <HAL_TIM_ConfigClockSource+0x172>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7e:	d87f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b70      	cmp	r3, #112	@ 0x70
 8004c82:	d01a      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0xa6>
 8004c84:	2b70      	cmp	r3, #112	@ 0x70
 8004c86:	d87b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b60      	cmp	r3, #96	@ 0x60
 8004c8a:	d050      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x11a>
 8004c8c:	2b60      	cmp	r3, #96	@ 0x60
 8004c8e:	d877      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b50      	cmp	r3, #80	@ 0x50
 8004c92:	d03c      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0xfa>
 8004c94:	2b50      	cmp	r3, #80	@ 0x50
 8004c96:	d873      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d058      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x13a>
 8004c9c:	2b40      	cmp	r3, #64	@ 0x40
 8004c9e:	d86f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b30      	cmp	r3, #48	@ 0x30
 8004ca2:	d064      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b30      	cmp	r3, #48	@ 0x30
 8004ca6:	d86b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d060      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d867      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05c      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d05a      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	e062      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	f000 f9b9 	bl	8005040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
      break;
 8004ce6:	e04f      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf8:	f000 f9a2 	bl	8005040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d0a:	609a      	str	r2, [r3, #8]
      break;
 8004d0c:	e03c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 f916 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2150      	movs	r1, #80	@ 0x50
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f96f 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e02c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 f935 	bl	8004faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2160      	movs	r1, #96	@ 0x60
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f95f 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e01c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 f8f6 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2140      	movs	r1, #64	@ 0x40
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f94f 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e00c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 f946 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e003      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e000      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a46      	ldr	r2, [pc, #280]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a43      	ldr	r2, [pc, #268]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a41      	ldr	r2, [pc, #260]	@ (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a40      	ldr	r2, [pc, #256]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a35      	ldr	r2, [pc, #212]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d02b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d027      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a32      	ldr	r2, [pc, #200]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d023      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a31      	ldr	r2, [pc, #196]	@ (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a30      	ldr	r2, [pc, #192]	@ (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d017      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <TIM_Base_SetConfig+0x140>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2d      	ldr	r2, [pc, #180]	@ (8004f38 <TIM_Base_SetConfig+0x144>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00f      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	@ (8004f3c <TIM_Base_SetConfig+0x148>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	@ (8004f40 <TIM_Base_SetConfig+0x14c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	@ (8004f44 <TIM_Base_SetConfig+0x150>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	@ (8004f48 <TIM_Base_SetConfig+0x154>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a12      	ldr	r2, [pc, #72]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
  }
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800
 8004f40:	40001800 	.word	0x40001800
 8004f44:	40001c00 	.word	0x40001c00
 8004f48:	40002000 	.word	0x40002000

08004f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 030a 	bic.w	r3, r3, #10
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f023 0210 	bic.w	r2, r3, #16
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	031b      	lsls	r3, r3, #12
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	f043 0307 	orr.w	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	431a      	orrs	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005094:	2302      	movs	r3, #2
 8005096:	e05a      	b.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	@ (800515c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e4:	d01d      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d018      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a18      	ldr	r2, [pc, #96]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10c      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4313      	orrs	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40010400 	.word	0x40010400
 8005170:	40014000 	.word	0x40014000
 8005174:	40001800 	.word	0x40001800

08005178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e042      	b.n	8005238 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc ffa4 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2224      	movs	r2, #36	@ 0x24
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f9d1 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b20      	cmp	r3, #32
 800525e:	d175      	bne.n	800534c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Transmit+0x2c>
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e06e      	b.n	800534e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2221      	movs	r2, #33	@ 0x21
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800527e:	f7fc fff1 	bl	8002264 <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005298:	d108      	bne.n	80052ac <HAL_UART_Transmit+0x6c>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	e003      	b.n	80052b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052b4:	e02e      	b.n	8005314 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	2180      	movs	r1, #128	@ 0x80
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f86d 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e03a      	b.n	800534e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3302      	adds	r3, #2
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e007      	b.n	8005306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3301      	adds	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1cb      	bne.n	80052b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2200      	movs	r2, #0
 8005326:	2140      	movs	r1, #64	@ 0x40
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f839 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	4613      	mov	r3, r2
 8005362:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	d112      	bne.n	8005396 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_UART_Receive_IT+0x26>
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e00b      	b.n	8005398 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	461a      	mov	r2, r3
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f860 	bl	8005452 <UART_Start_Receive_IT>
 8005392:	4603      	mov	r3, r0
 8005394:	e000      	b.n	8005398 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b0:	e03b      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d037      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fc ff53 	bl	8002264 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e03a      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d023      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b80      	cmp	r3, #128	@ 0x80
 80053e6:	d020      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d01d      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d116      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f857 	bl	80054c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2208      	movs	r2, #8
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e00f      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d0b4      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2222      	movs	r2, #34	@ 0x22
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005496:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0220 	orr.w	r2, r2, #32
 80054b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b095      	sub	sp, #84	@ 0x54
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3314      	adds	r3, #20
 8005508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	61fb      	str	r3, [r7, #28]
   return(result);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3314      	adds	r3, #20
 8005520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e5      	bne.n	8005502 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	2b01      	cmp	r3, #1
 800553c:	d119      	bne.n	8005572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	60bb      	str	r3, [r7, #8]
   return(result);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f023 0310 	bic.w	r3, r3, #16
 8005554:	647b      	str	r3, [r7, #68]	@ 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800555e:	61ba      	str	r2, [r7, #24]
 8005560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005580:	bf00      	nop
 8005582:	3754      	adds	r7, #84	@ 0x54
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b0c0      	sub	sp, #256	@ 0x100
 8005592:	af00      	add	r7, sp, #0
 8005594:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	68d9      	ldr	r1, [r3, #12]
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	ea40 0301 	orr.w	r3, r0, r1
 80055b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055e4:	f021 010c 	bic.w	r1, r1, #12
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055f2:	430b      	orrs	r3, r1
 80055f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	6999      	ldr	r1, [r3, #24]
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	ea40 0301 	orr.w	r3, r0, r1
 8005612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b8f      	ldr	r3, [pc, #572]	@ (8005858 <UART_SetConfig+0x2cc>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d005      	beq.n	800562c <UART_SetConfig+0xa0>
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b8d      	ldr	r3, [pc, #564]	@ (800585c <UART_SetConfig+0x2d0>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d104      	bne.n	8005636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fe f9d2 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8005630:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005634:	e003      	b.n	800563e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7fe f9b9 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 800563a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005648:	f040 810c 	bne.w	8005864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005650:	2200      	movs	r2, #0
 8005652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005656:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800565a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005666:	415b      	adcs	r3, r3
 8005668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800566e:	4621      	mov	r1, r4
 8005670:	eb12 0801 	adds.w	r8, r2, r1
 8005674:	4629      	mov	r1, r5
 8005676:	eb43 0901 	adc.w	r9, r3, r1
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	4623      	mov	r3, r4
 8005694:	eb18 0303 	adds.w	r3, r8, r3
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800569c:	462b      	mov	r3, r5
 800569e:	eb49 0303 	adc.w	r3, r9, r3
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ba:	460b      	mov	r3, r1
 80056bc:	18db      	adds	r3, r3, r3
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c0:	4613      	mov	r3, r2
 80056c2:	eb42 0303 	adc.w	r3, r2, r3
 80056c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056d0:	f7fb fada 	bl	8000c88 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b61      	ldr	r3, [pc, #388]	@ (8005860 <UART_SetConfig+0x2d4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056fc:	415b      	adcs	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005704:	4641      	mov	r1, r8
 8005706:	eb12 0a01 	adds.w	sl, r2, r1
 800570a:	4649      	mov	r1, r9
 800570c:	eb43 0b01 	adc.w	fp, r3, r1
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800571c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005724:	4692      	mov	sl, r2
 8005726:	469b      	mov	fp, r3
 8005728:	4643      	mov	r3, r8
 800572a:	eb1a 0303 	adds.w	r3, sl, r3
 800572e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005732:	464b      	mov	r3, r9
 8005734:	eb4b 0303 	adc.w	r3, fp, r3
 8005738:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005748:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800574c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005750:	460b      	mov	r3, r1
 8005752:	18db      	adds	r3, r3, r3
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
 8005756:	4613      	mov	r3, r2
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	647b      	str	r3, [r7, #68]	@ 0x44
 800575e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005766:	f7fb fa8f 	bl	8000c88 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005786:	4b36      	ldr	r3, [pc, #216]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005788:	fba3 2302 	umull	r2, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005794:	441c      	add	r4, r3
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057b0:	415b      	adcs	r3, r3
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005804:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800580c:	460b      	mov	r3, r1
 800580e:	18db      	adds	r3, r3, r3
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005812:	4613      	mov	r3, r2
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800581e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005822:	f7fb fa31 	bl	8000c88 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <UART_SetConfig+0x2d4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	@ 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3332      	adds	r3, #50	@ 0x32
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0207 	and.w	r2, r3, #7
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4422      	add	r2, r4
 8005852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005854:	e106      	b.n	8005a64 <UART_SetConfig+0x4d8>
 8005856:	bf00      	nop
 8005858:	40011000 	.word	0x40011000
 800585c:	40011400 	.word	0x40011400
 8005860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800586e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	1891      	adds	r1, r2, r2
 800587c:	6239      	str	r1, [r7, #32]
 800587e:	415b      	adcs	r3, r3
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
 8005882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005886:	4641      	mov	r1, r8
 8005888:	1854      	adds	r4, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb43 0501 	adc.w	r5, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	00eb      	lsls	r3, r5, #3
 800589a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800589e:	00e2      	lsls	r2, r4, #3
 80058a0:	4614      	mov	r4, r2
 80058a2:	461d      	mov	r5, r3
 80058a4:	4643      	mov	r3, r8
 80058a6:	18e3      	adds	r3, r4, r3
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058ac:	464b      	mov	r3, r9
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058d2:	4629      	mov	r1, r5
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	4621      	mov	r1, r4
 80058d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058dc:	4621      	mov	r1, r4
 80058de:	008a      	lsls	r2, r1, #2
 80058e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058e4:	f7fb f9d0 	bl	8000c88 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011c      	lsls	r4, r3, #4
 80058f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	1891      	adds	r1, r2, r2
 800590e:	61b9      	str	r1, [r7, #24]
 8005910:	415b      	adcs	r3, r3
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005918:	4641      	mov	r1, r8
 800591a:	1851      	adds	r1, r2, r1
 800591c:	6139      	str	r1, [r7, #16]
 800591e:	4649      	mov	r1, r9
 8005920:	414b      	adcs	r3, r1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005930:	4659      	mov	r1, fp
 8005932:	00cb      	lsls	r3, r1, #3
 8005934:	4651      	mov	r1, sl
 8005936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593a:	4651      	mov	r1, sl
 800593c:	00ca      	lsls	r2, r1, #3
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	4603      	mov	r3, r0
 8005944:	4642      	mov	r2, r8
 8005946:	189b      	adds	r3, r3, r2
 8005948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800594c:	464b      	mov	r3, r9
 800594e:	460a      	mov	r2, r1
 8005950:	eb42 0303 	adc.w	r3, r2, r3
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005962:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005982:	f7fb f981 	bl	8000c88 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4611      	mov	r1, r2
 800598c:	4b38      	ldr	r3, [pc, #224]	@ (8005a70 <UART_SetConfig+0x4e4>)
 800598e:	fba3 2301 	umull	r2, r3, r3, r1
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2264      	movs	r2, #100	@ 0x64
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	1acb      	subs	r3, r1, r3
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	3332      	adds	r3, #50	@ 0x32
 80059a0:	4a33      	ldr	r2, [pc, #204]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059ac:	441c      	add	r4, r3
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	2200      	movs	r2, #0
 80059b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	415b      	adcs	r3, r3
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059cc:	4641      	mov	r1, r8
 80059ce:	1851      	adds	r1, r2, r1
 80059d0:	6039      	str	r1, [r7, #0]
 80059d2:	4649      	mov	r1, r9
 80059d4:	414b      	adcs	r3, r1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e4:	4659      	mov	r1, fp
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4651      	mov	r1, sl
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4642      	mov	r2, r8
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	464b      	mov	r3, r9
 8005a00:	460a      	mov	r2, r1
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a12:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a20:	4649      	mov	r1, r9
 8005a22:	008b      	lsls	r3, r1, #2
 8005a24:	4641      	mov	r1, r8
 8005a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	008a      	lsls	r2, r1, #2
 8005a2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a32:	f7fb f929 	bl	8000c88 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	@ 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	3332      	adds	r3, #50	@ 0x32
 8005a4e:	4a08      	ldr	r2, [pc, #32]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4422      	add	r2, r4
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a70:	51eb851f 	.word	0x51eb851f

08005a74 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005a74:	b084      	sub	sp, #16
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	f107 001c 	add.w	r0, r7, #28
 8005a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005a8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005a8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005a92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005a96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005a9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005a9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005aae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	b004      	add	sp, #16
 8005ac8:	4770      	bx	lr

08005aca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0303 	and.w	r3, r3, #3
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b20:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b26:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b3c:	f023 030f 	bic.w	r3, r3, #15
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	b2db      	uxtb	r3, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	461a      	mov	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4413      	add	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
}  
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bbc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005bc2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005bc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0

}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c00:	2340      	movs	r3, #64	@ 0x40
 8005c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff74 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1e:	2110      	movs	r1, #16
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9d7 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c28:	69fb      	ldr	r3, [r7, #28]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b088      	sub	sp, #32
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005c40:	2311      	movs	r3, #17
 8005c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c44:	2340      	movs	r3, #64	@ 0x40
 8005c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c52:	f107 0308 	add.w	r3, r7, #8
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff52 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	2111      	movs	r1, #17
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9b5 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c84:	2312      	movs	r3, #18
 8005c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c96:	f107 0308 	add.w	r3, r7, #8
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff30 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca6:	2112      	movs	r1, #18
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f993 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b088      	sub	sp, #32
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005cc8:	2318      	movs	r3, #24
 8005cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ccc:	2340      	movs	r3, #64	@ 0x40
 8005cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ff0e 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cea:	2118      	movs	r1, #24
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f971 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005d0c:	2319      	movs	r3, #25
 8005d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d10:	2340      	movs	r3, #64	@ 0x40
 8005d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff feec 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d2e:	2119      	movs	r1, #25
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f94f 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d38:	69fb      	ldr	r3, [r7, #28]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005d50:	230c      	movs	r3, #12
 8005d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff feca 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005d6e:	4a05      	ldr	r2, [pc, #20]	@ (8005d84 <SDMMC_CmdStopTransfer+0x40>)
 8005d70:	210c      	movs	r1, #12
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f92e 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	05f5e100 	.word	0x05f5e100

08005d88 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d98:	2307      	movs	r3, #7
 8005d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d9c:	2340      	movs	r3, #64	@ 0x40
 8005d9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005da8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005daa:	f107 0310 	add.w	r3, r7, #16
 8005dae:	4619      	mov	r1, r3
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fea6 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dba:	2107      	movs	r1, #7
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f909 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005dc2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3728      	adds	r7, #40	@ 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dec:	f107 0308 	add.w	r3, r7, #8
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff fe85 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb23 	bl	8006444 <SDMMC_GetCmdError>
 8005dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e00:	69fb      	ldr	r3, [r7, #28]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b088      	sub	sp, #32
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005e12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e18:	2308      	movs	r3, #8
 8005e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e1c:	2340      	movs	r3, #64	@ 0x40
 8005e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fe66 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fab6 	bl	80063a8 <SDMMC_GetCmdResp7>
 8005e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e56:	2337      	movs	r3, #55	@ 0x37
 8005e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e5a:	2340      	movs	r3, #64	@ 0x40
 8005e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e68:	f107 0308 	add.w	r3, r7, #8
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe47 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e78:	2137      	movs	r1, #55	@ 0x37
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8aa 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e82:	69fb      	ldr	r3, [r7, #28]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ea2:	2329      	movs	r3, #41	@ 0x29
 8005ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ea6:	2340      	movs	r3, #64	@ 0x40
 8005ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fe21 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f9bd 	bl	8006240 <SDMMC_GetCmdResp3>
 8005ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b088      	sub	sp, #32
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005ee2:	23c0      	movs	r3, #192	@ 0xc0
 8005ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fe03 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f957 	bl	80061b0 <SDMMC_GetCmdResp2>
 8005f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f04:	69fb      	ldr	r3, [r7, #28]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f1c:	2309      	movs	r3, #9
 8005f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f20:	23c0      	movs	r3, #192	@ 0xc0
 8005f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fde4 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f938 	bl	80061b0 <SDMMC_GetCmdResp2>
 8005f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f42:	69fb      	ldr	r3, [r7, #28]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f5e:	2340      	movs	r3, #64	@ 0x40
 8005f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fdc5 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	2103      	movs	r1, #3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f99d 	bl	80062bc <SDMMC_GetCmdResp6>
 8005f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f84:	69fb      	ldr	r3, [r7, #28]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005f9c:	230d      	movs	r3, #13
 8005f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa0:	2340      	movs	r3, #64	@ 0x40
 8005fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fda4 	bl	8005b02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	210d      	movs	r1, #13
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f807 	bl	8005fd4 <SDMMC_GetCmdResp1>
 8005fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005fe2:	4b70      	ldr	r3, [pc, #448]	@ (80061a4 <SDMMC_GetCmdResp1+0x1d0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a70      	ldr	r2, [pc, #448]	@ (80061a8 <SDMMC_GetCmdResp1+0x1d4>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	0a5a      	lsrs	r2, r3, #9
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006004:	e0c9      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ef      	beq.n	8005ff6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ea      	bne.n	8005ff6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2204      	movs	r2, #4
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006032:	2304      	movs	r3, #4
 8006034:	e0b1      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d004      	beq.n	800604c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006048:	2301      	movs	r3, #1
 800604a:	e0a6      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	22c5      	movs	r2, #197	@ 0xc5
 8006050:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fd7f 	bl	8005b56 <SDIO_GetCommandResponse>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	4293      	cmp	r3, r2
 8006060:	d001      	beq.n	8006066 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006062:	2301      	movs	r3, #1
 8006064:	e099      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006066:	2100      	movs	r1, #0
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff fd81 	bl	8005b70 <SDIO_GetResponse>
 800606e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4b4e      	ldr	r3, [pc, #312]	@ (80061ac <SDMMC_GetCmdResp1+0x1d8>)
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800607a:	2300      	movs	r3, #0
 800607c:	e08d      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da02      	bge.n	800608a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006088:	e087      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006094:	2340      	movs	r3, #64	@ 0x40
 8006096:	e080      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060a2:	2380      	movs	r3, #128	@ 0x80
 80060a4:	e079      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060b4:	e071      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060c4:	e069      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80060d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060d4:	e061      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80060e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060e4:	e059      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060f4:	e051      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006104:	e049      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006110:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006114:	e041      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006124:	e039      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006130:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006134:	e031      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006140:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006144:	e029      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006150:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006154:	e021      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006160:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006164:	e019      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006170:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006174:	e011      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006180:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006184:	e009      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006190:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006194:	e001      	b.n	800619a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000014 	.word	0x20000014
 80061a8:	10624dd3 	.word	0x10624dd3
 80061ac:	fdffe008 	.word	0xfdffe008

080061b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006238 <SDMMC_GetCmdResp2+0x88>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <SDMMC_GetCmdResp2+0x8c>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	0a5b      	lsrs	r3, r3, #9
 80061c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1e5a      	subs	r2, r3, #1
 80061d2:	60fa      	str	r2, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061dc:	e026      	b.n	800622c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0ef      	beq.n	80061ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ea      	bne.n	80061ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800620a:	2304      	movs	r3, #4
 800620c:	e00e      	b.n	800622c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006220:	2301      	movs	r3, #1
 8006222:	e003      	b.n	800622c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	22c5      	movs	r2, #197	@ 0xc5
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000014 	.word	0x20000014
 800623c:	10624dd3 	.word	0x10624dd3

08006240 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006248:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <SDMMC_GetCmdResp3+0x74>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1a      	ldr	r2, [pc, #104]	@ (80062b8 <SDMMC_GetCmdResp3+0x78>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	0a5b      	lsrs	r3, r3, #9
 8006254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800626c:	e01b      	b.n	80062a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006272:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ef      	beq.n	800625e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1ea      	bne.n	800625e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2204      	movs	r2, #4
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800629a:	2304      	movs	r3, #4
 800629c:	e003      	b.n	80062a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	22c5      	movs	r2, #197	@ 0xc5
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000014 	.word	0x20000014
 80062b8:	10624dd3 	.word	0x10624dd3

080062bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	460b      	mov	r3, r1
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062ca:	4b35      	ldr	r3, [pc, #212]	@ (80063a0 <SDMMC_GetCmdResp6+0xe4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a35      	ldr	r2, [pc, #212]	@ (80063a4 <SDMMC_GetCmdResp6+0xe8>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	0a5b      	lsrs	r3, r3, #9
 80062d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	61fa      	str	r2, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062ee:	e052      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0ef      	beq.n	80062e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1ea      	bne.n	80062e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2204      	movs	r2, #4
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800631c:	2304      	movs	r3, #4
 800631e:	e03a      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006332:	2301      	movs	r3, #1
 8006334:	e02f      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fc0d 	bl	8005b56 <SDIO_GetCommandResponse>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	4293      	cmp	r3, r2
 8006344:	d001      	beq.n	800634a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006346:	2301      	movs	r3, #1
 8006348:	e025      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	22c5      	movs	r2, #197	@ 0xc5
 800634e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006350:	2100      	movs	r1, #0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fc0c 	bl	8005b70 <SDIO_GetResponse>
 8006358:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0c1b      	lsrs	r3, r3, #16
 8006368:	b29a      	uxth	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800636e:	2300      	movs	r3, #0
 8006370:	e011      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800637c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006380:	e009      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800638c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006390:	e001      	b.n	8006396 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000014 	.word	0x20000014
 80063a4:	10624dd3 	.word	0x10624dd3

080063a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063b0:	4b22      	ldr	r3, [pc, #136]	@ (800643c <SDMMC_GetCmdResp7+0x94>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a22      	ldr	r2, [pc, #136]	@ (8006440 <SDMMC_GetCmdResp7+0x98>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	0a5b      	lsrs	r3, r3, #9
 80063bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
 80063c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1e5a      	subs	r2, r3, #1
 80063ca:	60fa      	str	r2, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063d4:	e02c      	b.n	8006430 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ef      	beq.n	80063c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ea      	bne.n	80063c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006402:	2304      	movs	r3, #4
 8006404:	e014      	b.n	8006430 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006418:	2301      	movs	r3, #1
 800641a:	e009      	b.n	8006430 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2240      	movs	r2, #64	@ 0x40
 800642c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800642e:	2300      	movs	r3, #0
  
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000014 	.word	0x20000014
 8006440:	10624dd3 	.word	0x10624dd3

08006444 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800644c:	4b11      	ldr	r3, [pc, #68]	@ (8006494 <SDMMC_GetCmdError+0x50>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a11      	ldr	r2, [pc, #68]	@ (8006498 <SDMMC_GetCmdError+0x54>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	0a5b      	lsrs	r3, r3, #9
 8006458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1e5a      	subs	r2, r3, #1
 8006466:	60fa      	str	r2, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800646c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006470:	e009      	b.n	8006486 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f1      	beq.n	8006462 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	22c5      	movs	r2, #197	@ 0xc5
 8006482:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000014 	.word	0x20000014
 8006498:	10624dd3 	.word	0x10624dd3

0800649c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80064a0:	4904      	ldr	r1, [pc, #16]	@ (80064b4 <MX_FATFS_Init+0x18>)
 80064a2:	4805      	ldr	r0, [pc, #20]	@ (80064b8 <MX_FATFS_Init+0x1c>)
 80064a4:	f000 fa60 	bl	8006968 <FATFS_LinkDriver>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b03      	ldr	r3, [pc, #12]	@ (80064bc <MX_FATFS_Init+0x20>)
 80064ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000e00 	.word	0x20000e00
 80064b8:	0800e920 	.word	0x0800e920
 80064bc:	20000dfc 	.word	0x20000dfc

080064c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80064ca:	f000 f86d 	bl	80065a8 <BSP_SD_IsDetected>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d001      	beq.n	80064d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e005      	b.n	80064e4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80064d8:	4804      	ldr	r0, [pc, #16]	@ (80064ec <BSP_SD_Init+0x2c>)
 80064da:	f7fd fb54 	bl	8003b86 <HAL_SD_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80064e2:	79fb      	ldrb	r3, [r7, #7]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000c94 	.word	0x20000c94

080064f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	68f9      	ldr	r1, [r7, #12]
 8006506:	4806      	ldr	r0, [pc, #24]	@ (8006520 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006508:	f7fd fbee 	bl	8003ce8 <HAL_SD_ReadBlocks_DMA>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000c94 	.word	0x20000c94

08006524 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	4806      	ldr	r0, [pc, #24]	@ (8006554 <BSP_SD_WriteBlocks_DMA+0x30>)
 800653c:	f7fd fcb6 	bl	8003eac <HAL_SD_WriteBlocks_DMA>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000c94 	.word	0x20000c94

08006558 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800655c:	4805      	ldr	r0, [pc, #20]	@ (8006574 <BSP_SD_GetCardState+0x1c>)
 800655e:	f7fd ff65 	bl	800442c <HAL_SD_GetCardState>
 8006562:	4603      	mov	r3, r0
 8006564:	2b04      	cmp	r3, #4
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
}
 800656e:	4618      	mov	r0, r3
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000c94 	.word	0x20000c94

08006578 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4803      	ldr	r0, [pc, #12]	@ (8006590 <BSP_SD_GetCardInfo+0x18>)
 8006584:	f7fd ff26 	bl	80043d4 <HAL_SD_GetCardInfo>
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000c94 	.word	0x20000c94

08006594 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800659c:	f000 f986 	bl	80068ac <BSP_SD_ReadCpltCallback>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80065ae:	2301      	movs	r3, #1
 80065b0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	b2db      	uxtb	r3, r3
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80065ca:	f000 fa8d 	bl	8006ae8 <osKernelGetTickCount>
 80065ce:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80065d0:	e006      	b.n	80065e0 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065d2:	f7ff ffc1 	bl	8006558 <BSP_SD_GetCardState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	e009      	b.n	80065f4 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80065e0:	f000 fa82 	bl	8006ae8 <osKernelGetTickCount>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d8f0      	bhi.n	80065d2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006606:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <SD_CheckStatus+0x38>)
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800660c:	f7ff ffa4 	bl	8006558 <BSP_SD_GetCardState>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006616:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <SD_CheckStatus+0x38>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	4b04      	ldr	r3, [pc, #16]	@ (8006634 <SD_CheckStatus+0x38>)
 8006624:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006626:	4b03      	ldr	r3, [pc, #12]	@ (8006634 <SD_CheckStatus+0x38>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	b2db      	uxtb	r3, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000001d 	.word	0x2000001d

08006638 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006642:	4b1c      	ldr	r3, [pc, #112]	@ (80066b4 <SD_initialize+0x7c>)
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006648:	f000 fa06 	bl	8006a58 <osKernelGetState>
 800664c:	4603      	mov	r3, r0
 800664e:	2b02      	cmp	r3, #2
 8006650:	d129      	bne.n	80066a6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006652:	f7ff ff35 	bl	80064c0 <BSP_SD_Init>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d107      	bne.n	800666c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff ffcc 	bl	80065fc <SD_CheckStatus>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <SD_initialize+0x7c>)
 800666a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800666c:	4b11      	ldr	r3, [pc, #68]	@ (80066b4 <SD_initialize+0x7c>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d017      	beq.n	80066a6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <SD_initialize+0x80>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d107      	bne.n	800668e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800667e:	2200      	movs	r2, #0
 8006680:	2102      	movs	r1, #2
 8006682:	200a      	movs	r0, #10
 8006684:	f000 fb7c 	bl	8006d80 <osMessageQueueNew>
 8006688:	4603      	mov	r3, r0
 800668a:	4a0b      	ldr	r2, [pc, #44]	@ (80066b8 <SD_initialize+0x80>)
 800668c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <SD_initialize+0x80>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d107      	bne.n	80066a6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <SD_initialize+0x7c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <SD_initialize+0x7c>)
 80066a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80066a6:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <SD_initialize+0x7c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	2000001d 	.word	0x2000001d
 80066b8:	20000e04 	.word	0x20000e04

080066bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff97 	bl	80065fc <SD_CheckStatus>
 80066ce:	4603      	mov	r3, r0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80066ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066f0:	f7ff ff67 	bl	80065c2 <SD_CheckStatusWithTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da01      	bge.n	80066fe <SD_read+0x26>
  {
    return res;
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	e02f      	b.n	800675e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	68b8      	ldr	r0, [r7, #8]
 8006704:	f7ff fef4 	bl	80064f0 <BSP_SD_ReadBlocks_DMA>
 8006708:	4603      	mov	r3, r0
 800670a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800670c:	7fbb      	ldrb	r3, [r7, #30]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d124      	bne.n	800675c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006712:	4b15      	ldr	r3, [pc, #84]	@ (8006768 <SD_read+0x90>)
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	f107 0112 	add.w	r1, r7, #18
 800671a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800671e:	2200      	movs	r2, #0
 8006720:	f000 fc02 	bl	8006f28 <osMessageQueueGet>
 8006724:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d117      	bne.n	800675c <SD_read+0x84>
 800672c:	8a7b      	ldrh	r3, [r7, #18]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d114      	bne.n	800675c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006732:	f000 f9d9 	bl	8006ae8 <osKernelGetTickCount>
 8006736:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006738:	e007      	b.n	800674a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800673a:	f7ff ff0d 	bl	8006558 <BSP_SD_GetCardState>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <SD_read+0x72>
              {
                res = RES_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006748:	e008      	b.n	800675c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800674a:	f000 f9cd 	bl	8006ae8 <osKernelGetTickCount>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006758:	4293      	cmp	r3, r2
 800675a:	d9ee      	bls.n	800673a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800675c:	7ffb      	ldrb	r3, [r7, #31]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000e04 	.word	0x20000e04

0800676c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006780:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006784:	f7ff ff1d 	bl	80065c2 <SD_CheckStatusWithTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	da01      	bge.n	8006792 <SD_write+0x26>
  {
    return res;
 800678e:	7ffb      	ldrb	r3, [r7, #31]
 8006790:	e02d      	b.n	80067ee <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f7ff fec4 	bl	8006524 <BSP_SD_WriteBlocks_DMA>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d124      	bne.n	80067ec <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80067a2:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <SD_write+0x8c>)
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	f107 0112 	add.w	r1, r7, #18
 80067aa:	f247 5330 	movw	r3, #30000	@ 0x7530
 80067ae:	2200      	movs	r2, #0
 80067b0:	f000 fbba 	bl	8006f28 <osMessageQueueGet>
 80067b4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d117      	bne.n	80067ec <SD_write+0x80>
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d114      	bne.n	80067ec <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80067c2:	f000 f991 	bl	8006ae8 <osKernelGetTickCount>
 80067c6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80067c8:	e007      	b.n	80067da <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80067ca:	f7ff fec5 	bl	8006558 <BSP_SD_GetCardState>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <SD_write+0x6e>
          {
            res = RES_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	77fb      	strb	r3, [r7, #31]
            break;
 80067d8:	e008      	b.n	80067ec <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80067da:	f000 f985 	bl	8006ae8 <osKernelGetTickCount>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d9ee      	bls.n	80067ca <SD_write+0x5e>
    }

  }
#endif

  return res;
 80067ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000e04 	.word	0x20000e04

080067fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	@ 0x30
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	603a      	str	r2, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
 8006808:	460b      	mov	r3, r1
 800680a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006812:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <SD_ioctl+0xac>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <SD_ioctl+0x28>
 8006820:	2303      	movs	r3, #3
 8006822:	e03c      	b.n	800689e <SD_ioctl+0xa2>

  switch (cmd)
 8006824:	79bb      	ldrb	r3, [r7, #6]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d834      	bhi.n	8006894 <SD_ioctl+0x98>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <SD_ioctl+0x34>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006841 	.word	0x08006841
 8006834:	08006849 	.word	0x08006849
 8006838:	08006861 	.word	0x08006861
 800683c:	0800687b 	.word	0x0800687b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006846:	e028      	b.n	800689a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fe93 	bl	8006578 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800685e:	e01c      	b.n	800689a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fe87 	bl	8006578 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	b29a      	uxth	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006878:	e00f      	b.n	800689a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800687a:	f107 030c 	add.w	r3, r7, #12
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fe7a 	bl	8006578 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	0a5a      	lsrs	r2, r3, #9
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006892:	e002      	b.n	800689a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006894:	2304      	movs	r3, #4
 8006896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800689a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3730      	adds	r7, #48	@ 0x30
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	2000001d 	.word	0x2000001d

080068ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80068b2:	2301      	movs	r3, #1
 80068b4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <BSP_SD_ReadCpltCallback+0x20>)
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	1db9      	adds	r1, r7, #6
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	f000 fad2 	bl	8006e68 <osMessageQueuePut>
#endif
}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000e04 	.word	0x20000e04

080068d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068de:	2301      	movs	r3, #1
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 80068e8:	7a5b      	ldrb	r3, [r3, #9]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d131      	bne.n	8006954 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 80068f2:	7a5b      	ldrb	r3, [r3, #9]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068fe:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 8006900:	7a5b      	ldrb	r3, [r3, #9]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	4a17      	ldr	r2, [pc, #92]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 8006910:	7a5b      	ldrb	r3, [r3, #9]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	4b13      	ldr	r3, [pc, #76]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 8006918:	4413      	add	r3, r2
 800691a:	79fa      	ldrb	r2, [r7, #7]
 800691c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800691e:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 8006920:	7a5b      	ldrb	r3, [r3, #9]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	b2d1      	uxtb	r1, r2
 8006928:	4a0e      	ldr	r2, [pc, #56]	@ (8006964 <FATFS_LinkDriverEx+0x94>)
 800692a:	7251      	strb	r1, [r2, #9]
 800692c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800692e:	7dbb      	ldrb	r3, [r7, #22]
 8006930:	3330      	adds	r3, #48	@ 0x30
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3301      	adds	r3, #1
 800693c:	223a      	movs	r2, #58	@ 0x3a
 800693e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3302      	adds	r3, #2
 8006944:	222f      	movs	r2, #47	@ 0x2f
 8006946:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3303      	adds	r3, #3
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
}
 8006956:	4618      	mov	r0, r3
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000e08 	.word	0x20000e08

08006968 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006972:	2200      	movs	r2, #0
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff ffaa 	bl	80068d0 <FATFS_LinkDriverEx>
 800697c:	4603      	mov	r3, r0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <__NVIC_SetPriority>:
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db0a      	blt.n	80069b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	490c      	ldr	r1, [pc, #48]	@ (80069d4 <__NVIC_SetPriority+0x4c>)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	440b      	add	r3, r1
 80069ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069b0:	e00a      	b.n	80069c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4908      	ldr	r1, [pc, #32]	@ (80069d8 <__NVIC_SetPriority+0x50>)
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	3b04      	subs	r3, #4
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	440b      	add	r3, r1
 80069c6:	761a      	strb	r2, [r3, #24]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000e100 	.word	0xe000e100
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069e0:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <SysTick_Handler+0x1c>)
 80069e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069e4:	f002 f8e2 	bl	8008bac <xTaskGetSchedulerState>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d001      	beq.n	80069f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069ee:	f002 ff3b 	bl	8009868 <xPortSysTickHandler>
  }
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	e000e010 	.word	0xe000e010

080069fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a00:	2100      	movs	r1, #0
 8006a02:	f06f 0004 	mvn.w	r0, #4
 8006a06:	f7ff ffbf 	bl	8006988 <__NVIC_SetPriority>
#endif
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a16:	f3ef 8305 	mrs	r3, IPSR
 8006a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a22:	f06f 0305 	mvn.w	r3, #5
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e00c      	b.n	8006a44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a54 <osKernelInitialize+0x44>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a32:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <osKernelInitialize+0x44>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	e002      	b.n	8006a44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a44:	687b      	ldr	r3, [r7, #4]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000e14 	.word	0x20000e14

08006a58 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8006a5e:	f002 f8a5 	bl	8008bac <xTaskGetSchedulerState>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <osKernelGetState+0x1a>
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d105      	bne.n	8006a78 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	607b      	str	r3, [r7, #4]
      break;
 8006a70:	e00c      	b.n	8006a8c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8006a72:	2303      	movs	r3, #3
 8006a74:	607b      	str	r3, [r7, #4]
      break;
 8006a76:	e009      	b.n	8006a8c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8006a78:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <osKernelGetState+0x40>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d102      	bne.n	8006a86 <osKernelGetState+0x2e>
        state = osKernelReady;
 8006a80:	2301      	movs	r3, #1
 8006a82:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8006a84:	e001      	b.n	8006a8a <osKernelGetState+0x32>
        state = osKernelInactive;
 8006a86:	2300      	movs	r3, #0
 8006a88:	607b      	str	r3, [r7, #4]
      break;
 8006a8a:	bf00      	nop
  }

  return (state);
 8006a8c:	687b      	ldr	r3, [r7, #4]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000e14 	.word	0x20000e14

08006a9c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
 8006aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8006aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006aae:	f06f 0305 	mvn.w	r3, #5
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	e010      	b.n	8006ad8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <osKernelStart+0x48>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d109      	bne.n	8006ad2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006abe:	f7ff ff9d 	bl	80069fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ac2:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <osKernelStart+0x48>)
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ac8:	f001 fbde 	bl	8008288 <vTaskStartScheduler>
      stat = osOK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	e002      	b.n	8006ad8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ad8:	687b      	ldr	r3, [r7, #4]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000e14 	.word	0x20000e14

08006ae8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aee:	f3ef 8305 	mrs	r3, IPSR
 8006af2:	603b      	str	r3, [r7, #0]
  return(result);
 8006af4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006afa:	f001 fcf3 	bl	80084e4 <xTaskGetTickCountFromISR>
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	e002      	b.n	8006b08 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006b02:	f001 fcdf 	bl	80084c4 <xTaskGetTickCount>
 8006b06:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006b08:	687b      	ldr	r3, [r7, #4]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b08e      	sub	sp, #56	@ 0x38
 8006b16:	af04      	add	r7, sp, #16
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b22:	f3ef 8305 	mrs	r3, IPSR
 8006b26:	617b      	str	r3, [r7, #20]
  return(result);
 8006b28:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d17f      	bne.n	8006c2e <osThreadNew+0x11c>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d07c      	beq.n	8006c2e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b3a:	2318      	movs	r3, #24
 8006b3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b42:	f04f 33ff 	mov.w	r3, #4294967295
 8006b46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d045      	beq.n	8006bda <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <osThreadNew+0x4a>
        name = attr->name;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <osThreadNew+0x70>
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b38      	cmp	r3, #56	@ 0x38
 8006b74:	d805      	bhi.n	8006b82 <osThreadNew+0x70>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <osThreadNew+0x74>
        return (NULL);
 8006b82:	2300      	movs	r3, #0
 8006b84:	e054      	b.n	8006c30 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	089b      	lsrs	r3, r3, #2
 8006b94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00e      	beq.n	8006bbc <osThreadNew+0xaa>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2bab      	cmp	r3, #171	@ 0xab
 8006ba4:	d90a      	bls.n	8006bbc <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d006      	beq.n	8006bbc <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <osThreadNew+0xaa>
        mem = 1;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e010      	b.n	8006bde <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10c      	bne.n	8006bde <osThreadNew+0xcc>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d108      	bne.n	8006bde <osThreadNew+0xcc>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <osThreadNew+0xcc>
          mem = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e001      	b.n	8006bde <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d110      	bne.n	8006c06 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6a3a      	ldr	r2, [r7, #32]
 8006bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f001 f94e 	bl	8007e9c <xTaskCreateStatic>
 8006c00:	4603      	mov	r3, r0
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	e013      	b.n	8006c2e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d110      	bne.n	8006c2e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f107 0310 	add.w	r3, r7, #16
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 f99c 	bl	8007f5c <xTaskCreate>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d001      	beq.n	8006c2e <osThreadNew+0x11c>
            hTask = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c2e:	693b      	ldr	r3, [r7, #16]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3728      	adds	r7, #40	@ 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c40:	f3ef 8305 	mrs	r3, IPSR
 8006c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <osDelay+0x1c>
    stat = osErrorISR;
 8006c4c:	f06f 0305 	mvn.w	r3, #5
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e007      	b.n	8006c64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fadc 	bl	800821c <vTaskDelay>
    }
  }

  return (stat);
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b08a      	sub	sp, #40	@ 0x28
 8006c72:	af02      	add	r7, sp, #8
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
 8006c82:	613b      	str	r3, [r7, #16]
  return(result);
 8006c84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d175      	bne.n	8006d76 <osSemaphoreNew+0x108>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d072      	beq.n	8006d76 <osSemaphoreNew+0x108>
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d86e      	bhi.n	8006d76 <osSemaphoreNew+0x108>
    mem = -1;
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d006      	beq.n	8006cba <osSemaphoreNew+0x4c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b4f      	cmp	r3, #79	@ 0x4f
 8006cb2:	d902      	bls.n	8006cba <osSemaphoreNew+0x4c>
        mem = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e00c      	b.n	8006cd4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d108      	bne.n	8006cd4 <osSemaphoreNew+0x66>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <osSemaphoreNew+0x66>
          mem = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	e001      	b.n	8006cd4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d04c      	beq.n	8006d76 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d128      	bne.n	8006d34 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10a      	bne.n	8006cfe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2203      	movs	r2, #3
 8006cee:	9200      	str	r2, [sp, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f000 fac7 	bl	8007288 <xQueueGenericCreateStatic>
 8006cfa:	61f8      	str	r0, [r7, #28]
 8006cfc:	e005      	b.n	8006d0a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006cfe:	2203      	movs	r2, #3
 8006d00:	2100      	movs	r1, #0
 8006d02:	2001      	movs	r0, #1
 8006d04:	f000 fb3d 	bl	8007382 <xQueueGenericCreate>
 8006d08:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d022      	beq.n	8006d56 <osSemaphoreNew+0xe8>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01f      	beq.n	8006d56 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d16:	2300      	movs	r3, #0
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	69f8      	ldr	r0, [r7, #28]
 8006d1e:	f000 fbfd 	bl	800751c <xQueueGenericSend>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d016      	beq.n	8006d56 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d28:	69f8      	ldr	r0, [r7, #28]
 8006d2a:	f000 fefb 	bl	8007b24 <vQueueDelete>
            hSemaphore = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	e010      	b.n	8006d56 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb7b 	bl	800743e <xQueueCreateCountingSemaphoreStatic>
 8006d48:	61f8      	str	r0, [r7, #28]
 8006d4a:	e004      	b.n	8006d56 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fbae 	bl	80074b0 <xQueueCreateCountingSemaphore>
 8006d54:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e001      	b.n	8006d6e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	69f8      	ldr	r0, [r7, #28]
 8006d72:	f001 f80b 	bl	8007d8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006d76:	69fb      	ldr	r3, [r7, #28]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	@ 0x28
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d90:	f3ef 8305 	mrs	r3, IPSR
 8006d94:	613b      	str	r3, [r7, #16]
  return(result);
 8006d96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d15f      	bne.n	8006e5c <osMessageQueueNew+0xdc>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d05c      	beq.n	8006e5c <osMessageQueueNew+0xdc>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d059      	beq.n	8006e5c <osMessageQueueNew+0xdc>
    mem = -1;
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d029      	beq.n	8006e08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <osMessageQueueNew+0x62>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b4f      	cmp	r3, #79	@ 0x4f
 8006dc2:	d90e      	bls.n	8006de2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <osMessageQueueNew+0x62>
        mem = 1;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e014      	b.n	8006e0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d110      	bne.n	8006e0c <osMessageQueueNew+0x8c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d108      	bne.n	8006e0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <osMessageQueueNew+0x8c>
          mem = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e001      	b.n	8006e0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d10b      	bne.n	8006e2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	9100      	str	r1, [sp, #0]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fa31 	bl	8007288 <xQueueGenericCreateStatic>
 8006e26:	61f8      	str	r0, [r7, #28]
 8006e28:	e008      	b.n	8006e3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e30:	2200      	movs	r2, #0
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 faa4 	bl	8007382 <xQueueGenericCreate>
 8006e3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e001      	b.n	8006e54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	69f8      	ldr	r0, [r7, #28]
 8006e58:	f000 ff98 	bl	8007d8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e80:	f3ef 8305 	mrs	r3, IPSR
 8006e84:	617b      	str	r3, [r7, #20]
  return(result);
 8006e86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d028      	beq.n	8006ede <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <osMessageQueuePut+0x36>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <osMessageQueuePut+0x36>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006e9e:	f06f 0303 	mvn.w	r3, #3
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e038      	b.n	8006f18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006eaa:	f107 0210 	add.w	r2, r7, #16
 8006eae:	2300      	movs	r3, #0
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	69b8      	ldr	r0, [r7, #24]
 8006eb4:	f000 fc34 	bl	8007720 <xQueueGenericSendFromISR>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d003      	beq.n	8006ec6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006ebe:	f06f 0302 	mvn.w	r3, #2
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	e028      	b.n	8006f18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d025      	beq.n	8006f18 <osMessageQueuePut+0xb0>
 8006ecc:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <osMessageQueuePut+0xbc>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e01c      	b.n	8006f18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <osMessageQueuePut+0x82>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006eea:	f06f 0303 	mvn.w	r3, #3
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e012      	b.n	8006f18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	69b8      	ldr	r0, [r7, #24]
 8006efa:	f000 fb0f 	bl	800751c <xQueueGenericSend>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d009      	beq.n	8006f18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f0a:	f06f 0301 	mvn.w	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	e002      	b.n	8006f18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f12:	f06f 0302 	mvn.w	r3, #2
 8006f16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f18:	69fb      	ldr	r3, [r7, #28]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	617b      	str	r3, [r7, #20]
  return(result);
 8006f44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d028      	beq.n	8006f9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <osMessageQueueGet+0x34>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <osMessageQueueGet+0x34>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006f5c:	f06f 0303 	mvn.w	r3, #3
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	e037      	b.n	8006fd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f68:	f107 0310 	add.w	r3, r7, #16
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	69b8      	ldr	r0, [r7, #24]
 8006f72:	f000 fd55 	bl	8007a20 <xQueueReceiveFromISR>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d003      	beq.n	8006f84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f7c:	f06f 0302 	mvn.w	r3, #2
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	e027      	b.n	8006fd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d024      	beq.n	8006fd4 <osMessageQueueGet+0xac>
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <osMessageQueueGet+0xb8>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	e01b      	b.n	8006fd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <osMessageQueueGet+0x80>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006fa8:	f06f 0303 	mvn.w	r3, #3
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e011      	b.n	8006fd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	69b8      	ldr	r0, [r7, #24]
 8006fb6:	f000 fc51 	bl	800785c <xQueueReceive>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d009      	beq.n	8006fd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006fc6:	f06f 0301 	mvn.w	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e002      	b.n	8006fd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006fce:	f06f 0302 	mvn.w	r3, #2
 8006fd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a07      	ldr	r2, [pc, #28]	@ (8007010 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a06      	ldr	r2, [pc, #24]	@ (8007014 <vApplicationGetIdleTaskMemory+0x30>)
 8006ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000e18 	.word	0x20000e18
 8007014:	20000ec4 	.word	0x20000ec4

08007018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a07      	ldr	r2, [pc, #28]	@ (8007044 <vApplicationGetTimerTaskMemory+0x2c>)
 8007028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a06      	ldr	r2, [pc, #24]	@ (8007048 <vApplicationGetTimerTaskMemory+0x30>)
 800702e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007036:	601a      	str	r2, [r3, #0]
}
 8007038:	bf00      	nop
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	200016c4 	.word	0x200016c4
 8007048:	20001770 	.word	0x20001770

0800704c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f103 0208 	add.w	r2, r3, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f103 0208 	add.w	r2, r3, #8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0208 	add.w	r2, r3, #8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d103      	bne.n	800710e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e00c      	b.n	8007128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3308      	adds	r3, #8
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e002      	b.n	800711c <vListInsert+0x2e>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	d2f6      	bcs.n	8007116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6892      	ldr	r2, [r2, #8]
 8007176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6852      	ldr	r2, [r2, #4]
 8007180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d103      	bne.n	8007194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60bb      	str	r3, [r7, #8]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071e0:	f002 fab2 	bl	8009748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	441a      	add	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	3b01      	subs	r3, #1
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	441a      	add	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	22ff      	movs	r2, #255	@ 0xff
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	22ff      	movs	r2, #255	@ 0xff
 800722c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d114      	bne.n	8007260 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01a      	beq.n	8007274 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3310      	adds	r3, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f001 faec 	bl	8008820 <xTaskRemoveFromEventList>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d012      	beq.n	8007274 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <xQueueGenericReset+0xd0>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	e009      	b.n	8007274 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3310      	adds	r3, #16
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fef1 	bl	800704c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3324      	adds	r3, #36	@ 0x24
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff feec 	bl	800704c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007274:	f002 fa9a 	bl	80097ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007278:	2301      	movs	r3, #1
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	@ 0x38
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10b      	bne.n	80072b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	e7fd      	b.n	80072ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <xQueueGenericCreateStatic+0x56>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <xQueueGenericCreateStatic+0x5a>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <xQueueGenericCreateStatic+0x5c>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	623b      	str	r3, [r7, #32]
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <xQueueGenericCreateStatic+0x84>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <xQueueGenericCreateStatic+0x88>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <xQueueGenericCreateStatic+0x8a>
 8007310:	2300      	movs	r3, #0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	61fb      	str	r3, [r7, #28]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800732e:	2350      	movs	r3, #80	@ 0x50
 8007330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b50      	cmp	r3, #80	@ 0x50
 8007336:	d00b      	beq.n	8007350 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	bf00      	nop
 800734e:	e7fd      	b.n	800734c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007350:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007364:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4613      	mov	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f840 	bl	80073f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800737a:	4618      	mov	r0, r3
 800737c:	3730      	adds	r7, #48	@ 0x30
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08a      	sub	sp, #40	@ 0x28
 8007386:	af02      	add	r7, sp, #8
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	4613      	mov	r3, r2
 800738e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	613b      	str	r3, [r7, #16]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3350      	adds	r3, #80	@ 0x50
 80073bc:	4618      	mov	r0, r3
 80073be:	f002 fae5 	bl	800998c <pvPortMalloc>
 80073c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d011      	beq.n	80073ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	3350      	adds	r3, #80	@ 0x50
 80073d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073dc:	79fa      	ldrb	r2, [r7, #7]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f805 	bl	80073f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ee:	69bb      	ldr	r3, [r7, #24]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3720      	adds	r7, #32
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e002      	b.n	800741a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007426:	2101      	movs	r1, #1
 8007428:	69b8      	ldr	r0, [r7, #24]
 800742a:	f7ff fec3 	bl	80071b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800743e:	b580      	push	{r7, lr}
 8007440:	b08a      	sub	sp, #40	@ 0x28
 8007442:	af02      	add	r7, sp, #8
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	61bb      	str	r3, [r7, #24]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d90b      	bls.n	8007488 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	617b      	str	r3, [r7, #20]
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	e7fd      	b.n	8007484 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007488:	2302      	movs	r3, #2
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	2100      	movs	r1, #0
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff fef8 	bl	8007288 <xQueueGenericCreateStatic>
 8007498:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074a6:	69fb      	ldr	r3, [r7, #28]
	}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d90b      	bls.n	80074f8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074f8:	2202      	movs	r2, #2
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ff40 	bl	8007382 <xQueueGenericCreate>
 8007502:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007510:	697b      	ldr	r3, [r7, #20]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08e      	sub	sp, #56	@ 0x38
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <xQueueGenericSend+0x34>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x42>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <xQueueGenericSend+0x46>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueGenericSend+0x48>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <xQueueGenericSend+0x64>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	e7fd      	b.n	800757c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x72>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <xQueueGenericSend+0x76>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <xQueueGenericSend+0x78>
 8007592:	2300      	movs	r3, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <xQueueGenericSend+0x94>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	623b      	str	r3, [r7, #32]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b0:	f001 fafc 	bl	8008bac <xTaskGetSchedulerState>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <xQueueGenericSend+0xa4>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <xQueueGenericSend+0xa8>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <xQueueGenericSend+0xaa>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	61fb      	str	r3, [r7, #28]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e2:	f002 f8b1 	bl	8009748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <xQueueGenericSend+0xdc>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d129      	bne.n	800764c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075fe:	f000 fab5 	bl	8007b6c <prvCopyDataToQueue>
 8007602:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d010      	beq.n	800762e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	3324      	adds	r3, #36	@ 0x24
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f905 	bl	8008820 <xTaskRemoveFromEventList>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d013      	beq.n	8007644 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800761c:	4b3f      	ldr	r3, [pc, #252]	@ (800771c <xQueueGenericSend+0x200>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	e00a      	b.n	8007644 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007634:	4b39      	ldr	r3, [pc, #228]	@ (800771c <xQueueGenericSend+0x200>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007644:	f002 f8b2 	bl	80097ac <vPortExitCritical>
				return pdPASS;
 8007648:	2301      	movs	r3, #1
 800764a:	e063      	b.n	8007714 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007652:	f002 f8ab 	bl	80097ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007656:	2300      	movs	r3, #0
 8007658:	e05c      	b.n	8007714 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800765a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007660:	f107 0314 	add.w	r3, r7, #20
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f93f 	bl	80088e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800766e:	f002 f89d 	bl	80097ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007672:	f000 fe7b 	bl	800836c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007676:	f002 f867 	bl	8009748 <vPortEnterCritical>
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007680:	b25b      	sxtb	r3, r3
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d103      	bne.n	8007690 <xQueueGenericSend+0x174>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007696:	b25b      	sxtb	r3, r3
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d103      	bne.n	80076a6 <xQueueGenericSend+0x18a>
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a6:	f002 f881 	bl	80097ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076aa:	1d3a      	adds	r2, r7, #4
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 f92e 	bl	8008914 <xTaskCheckForTimeOut>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d124      	bne.n	8007708 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076c0:	f000 fb4c 	bl	8007d5c <prvIsQueueFull>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d018      	beq.n	80076fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	3310      	adds	r3, #16
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f852 	bl	800877c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076da:	f000 fad7 	bl	8007c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076de:	f000 fe53 	bl	8008388 <xTaskResumeAll>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f af7c 	bne.w	80075e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076ea:	4b0c      	ldr	r3, [pc, #48]	@ (800771c <xQueueGenericSend+0x200>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	e772      	b.n	80075e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076fe:	f000 fac5 	bl	8007c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007702:	f000 fe41 	bl	8008388 <xTaskResumeAll>
 8007706:	e76c      	b.n	80075e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800770a:	f000 fabf 	bl	8007c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800770e:	f000 fe3b 	bl	8008388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007714:	4618      	mov	r0, r3
 8007716:	3738      	adds	r7, #56	@ 0x38
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	e000ed04 	.word	0xe000ed04

08007720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b090      	sub	sp, #64	@ 0x40
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <xQueueGenericSendFromISR+0x3e>
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueGenericSendFromISR+0x42>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSendFromISR+0x44>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <xQueueGenericSendFromISR+0x6e>
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <xQueueGenericSendFromISR+0x72>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSendFromISR+0x74>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10b      	bne.n	80077b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077b0:	f002 f8aa 	bl	8009908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077b4:	f3ef 8211 	mrs	r2, BASEPRI
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61fa      	str	r2, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d302      	bcc.n	80077e2 <xQueueGenericSendFromISR+0xc2>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d12f      	bne.n	8007842 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077f8:	f000 f9b8 	bl	8007b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d112      	bne.n	800782c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	3324      	adds	r3, #36	@ 0x24
 8007812:	4618      	mov	r0, r3
 8007814:	f001 f804 	bl	8008820 <xTaskRemoveFromEventList>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e007      	b.n	800783c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800782c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007830:	3301      	adds	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	b25a      	sxtb	r2, r3
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007840:	e001      	b.n	8007846 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007842:	2300      	movs	r3, #0
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007848:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007854:	4618      	mov	r0, r3
 8007856:	3740      	adds	r7, #64	@ 0x40
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08c      	sub	sp, #48	@ 0x30
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <xQueueReceive+0x32>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	623b      	str	r3, [r7, #32]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d103      	bne.n	800789c <xQueueReceive+0x40>
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <xQueueReceive+0x44>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <xQueueReceive+0x46>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <xQueueReceive+0x62>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	61fb      	str	r3, [r7, #28]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078be:	f001 f975 	bl	8008bac <xTaskGetSchedulerState>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <xQueueReceive+0x72>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <xQueueReceive+0x76>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <xQueueReceive+0x78>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <xQueueReceive+0x94>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	61bb      	str	r3, [r7, #24]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078f0:	f001 ff2a 	bl	8009748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01f      	beq.n	8007940 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007904:	f000 f99c 	bl	8007c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00f      	beq.n	8007938 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	3310      	adds	r3, #16
 800791c:	4618      	mov	r0, r3
 800791e:	f000 ff7f 	bl	8008820 <xTaskRemoveFromEventList>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b3c      	ldr	r3, [pc, #240]	@ (8007a1c <xQueueReceive+0x1c0>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007938:	f001 ff38 	bl	80097ac <vPortExitCritical>
				return pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	e069      	b.n	8007a14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007946:	f001 ff31 	bl	80097ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800794a:	2300      	movs	r3, #0
 800794c:	e062      	b.n	8007a14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	4618      	mov	r0, r3
 800795a:	f000 ffc5 	bl	80088e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007962:	f001 ff23 	bl	80097ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007966:	f000 fd01 	bl	800836c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796a:	f001 feed 	bl	8009748 <vPortEnterCritical>
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007974:	b25b      	sxtb	r3, r3
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d103      	bne.n	8007984 <xQueueReceive+0x128>
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <xQueueReceive+0x13e>
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800799a:	f001 ff07 	bl	80097ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800799e:	1d3a      	adds	r2, r7, #4
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 ffb4 	bl	8008914 <xTaskCheckForTimeOut>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d123      	bne.n	80079fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b4:	f000 f9bc 	bl	8007d30 <prvIsQueueEmpty>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d017      	beq.n	80079ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c0:	3324      	adds	r3, #36	@ 0x24
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fed8 	bl	800877c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079ce:	f000 f95d 	bl	8007c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079d2:	f000 fcd9 	bl	8008388 <xTaskResumeAll>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d189      	bne.n	80078f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80079dc:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <xQueueReceive+0x1c0>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	e780      	b.n	80078f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079f0:	f000 f94c 	bl	8007c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f4:	f000 fcc8 	bl	8008388 <xTaskResumeAll>
 80079f8:	e77a      	b.n	80078f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079fc:	f000 f946 	bl	8007c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a00:	f000 fcc2 	bl	8008388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a06:	f000 f993 	bl	8007d30 <prvIsQueueEmpty>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f43f af6f 	beq.w	80078f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3730      	adds	r7, #48	@ 0x30
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08e      	sub	sp, #56	@ 0x38
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	623b      	str	r3, [r7, #32]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <xQueueReceiveFromISR+0x3c>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <xQueueReceiveFromISR+0x40>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <xQueueReceiveFromISR+0x42>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61fb      	str	r3, [r7, #28]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a7e:	f001 ff43 	bl	8009908 <vPortValidateInterruptPriority>
	__asm volatile
 8007a82:	f3ef 8211 	mrs	r2, BASEPRI
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	61ba      	str	r2, [r7, #24]
 8007a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d02f      	beq.n	8007b0a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ab8:	f000 f8c2 	bl	8007c40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abe:	1e5a      	subs	r2, r3, #1
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d112      	bne.n	8007af4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	3310      	adds	r3, #16
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fea0 	bl	8008820 <xTaskRemoveFromEventList>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00e      	beq.n	8007b04 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e007      	b.n	8007b04 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007af8:	3301      	adds	r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	b25a      	sxtb	r2, r3
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b04:	2301      	movs	r3, #1
 8007b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b08:	e001      	b.n	8007b0e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f383 8811 	msr	BASEPRI, r3
}
 8007b18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3738      	adds	r7, #56	@ 0x38
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <vQueueDelete+0x2a>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60bb      	str	r3, [r7, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f946 	bl	8007de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 ffe2 	bl	8009b28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b64:	bf00      	nop
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10d      	bne.n	8007ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d14d      	bne.n	8007c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f826 	bl	8008be8 <xTaskPriorityDisinherit>
 8007b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	e043      	b.n	8007c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d119      	bne.n	8007be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6858      	ldr	r0, [r3, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	f003 fb1d 	bl	800b1f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d32b      	bcc.n	8007c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	e026      	b.n	8007c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68d8      	ldr	r0, [r3, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be8:	461a      	mov	r2, r3
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	f003 fb03 	bl	800b1f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d207      	bcs.n	8007c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	425b      	negs	r3, r3
 8007c16:	441a      	add	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d105      	bne.n	8007c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c36:	697b      	ldr	r3, [r7, #20]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d018      	beq.n	8007c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	441a      	add	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d303      	bcc.n	8007c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68d9      	ldr	r1, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6838      	ldr	r0, [r7, #0]
 8007c80:	f003 fab9 	bl	800b1f6 <memcpy>
	}
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c94:	f001 fd58 	bl	8009748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ca0:	e011      	b.n	8007cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d012      	beq.n	8007cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3324      	adds	r3, #36	@ 0x24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fdb6 	bl	8008820 <xTaskRemoveFromEventList>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cba:	f000 fe8f 	bl	80089dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dce9      	bgt.n	8007ca2 <prvUnlockQueue+0x16>
 8007cce:	e000      	b.n	8007cd2 <prvUnlockQueue+0x46>
					break;
 8007cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	22ff      	movs	r2, #255	@ 0xff
 8007cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007cda:	f001 fd67 	bl	80097ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cde:	f001 fd33 	bl	8009748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cea:	e011      	b.n	8007d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d012      	beq.n	8007d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fd91 	bl	8008820 <xTaskRemoveFromEventList>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d04:	f000 fe6a 	bl	80089dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dce9      	bgt.n	8007cec <prvUnlockQueue+0x60>
 8007d18:	e000      	b.n	8007d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d24:	f001 fd42 	bl	80097ac <vPortExitCritical>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d38:	f001 fd06 	bl	8009748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e001      	b.n	8007d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d4e:	f001 fd2d 	bl	80097ac <vPortExitCritical>

	return xReturn;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d64:	f001 fcf0 	bl	8009748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d102      	bne.n	8007d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e001      	b.n	8007d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d7e:	f001 fd15 	bl	80097ac <vPortExitCritical>

	return xReturn;
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e014      	b.n	8007dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10b      	bne.n	8007dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007da8:	490c      	ldr	r1, [pc, #48]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007db2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <vQueueAddToRegistry+0x50>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	4413      	add	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dbe:	e006      	b.n	8007dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b07      	cmp	r3, #7
 8007dca:	d9e7      	bls.n	8007d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20002770 	.word	0x20002770

08007de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e016      	b.n	8007e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007dee:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4413      	add	r3, r2
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d10b      	bne.n	8007e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2100      	movs	r1, #0
 8007e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e08:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <vQueueUnregisterQueue+0x50>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]
				break;
 8007e14:	e006      	b.n	8007e24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d9e5      	bls.n	8007dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20002770 	.word	0x20002770

08007e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e44:	f001 fc80 	bl	8009748 <vPortEnterCritical>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d103      	bne.n	8007e5e <vQueueWaitForMessageRestricted+0x2a>
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d103      	bne.n	8007e74 <vQueueWaitForMessageRestricted+0x40>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e74:	f001 fc9a 	bl	80097ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	3324      	adds	r3, #36	@ 0x24
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fc9d 	bl	80087c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e8e:	6978      	ldr	r0, [r7, #20]
 8007e90:	f7ff fefc 	bl	8007c8c <prvUnlockQueue>
	}
 8007e94:	bf00      	nop
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	@ 0x38
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61fb      	str	r3, [r7, #28]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ee6:	23ac      	movs	r3, #172	@ 0xac
 8007ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2bac      	cmp	r3, #172	@ 0xac
 8007eee:	d00b      	beq.n	8007f08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	61bb      	str	r3, [r7, #24]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01b      	beq.n	8007f4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f851 	bl	8007fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f48:	f000 f8f8 	bl	800813c <prvAddNewTaskToReadyList>
 8007f4c:	e001      	b.n	8007f52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f52:	697b      	ldr	r3, [r7, #20]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	@ 0x30
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fd0b 	bl	800998c <pvPortMalloc>
 8007f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f7e:	20ac      	movs	r0, #172	@ 0xac
 8007f80:	f001 fd04 	bl	800998c <pvPortMalloc>
 8007f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f92:	e005      	b.n	8007fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f94:	6978      	ldr	r0, [r7, #20]
 8007f96:	f001 fdc7 	bl	8009b28 <vPortFree>
 8007f9a:	e001      	b.n	8007fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f80f 	bl	8007fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fca:	69f8      	ldr	r0, [r7, #28]
 8007fcc:	f000 f8b6 	bl	800813c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e002      	b.n	8007fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	461a      	mov	r2, r3
 8008000:	21a5      	movs	r1, #165	@ 0xa5
 8008002:	f002 fff6 	bl	800aff2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008010:	3b01      	subs	r3, #1
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00b      	beq.n	8008042 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	617b      	str	r3, [r7, #20]
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	e7fd      	b.n	800803e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01f      	beq.n	8008088 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008048:	2300      	movs	r3, #0
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e012      	b.n	8008074 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	4413      	add	r3, r2
 8008054:	7819      	ldrb	r1, [r3, #0]
 8008056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	3334      	adds	r3, #52	@ 0x34
 800805e:	460a      	mov	r2, r1
 8008060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d006      	beq.n	800807c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	3301      	adds	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d9e9      	bls.n	800804e <prvInitialiseNewTask+0x66>
 800807a:	e000      	b.n	800807e <prvInitialiseNewTask+0x96>
			{
				break;
 800807c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008086:	e003      	b.n	8008090 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	2b37      	cmp	r3, #55	@ 0x37
 8008094:	d901      	bls.n	800809a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008096:	2337      	movs	r3, #55	@ 0x37
 8008098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2200      	movs	r2, #0
 80080aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe ffeb 	bl	800708c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	3318      	adds	r3, #24
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe ffe6 	bl	800708c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	3358      	adds	r3, #88	@ 0x58
 80080f0:	224c      	movs	r2, #76	@ 0x4c
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 ff7c 	bl	800aff2 <memset>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008130 <prvInitialiseNewTask+0x148>)
 80080fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	4a0c      	ldr	r2, [pc, #48]	@ (8008134 <prvInitialiseNewTask+0x14c>)
 8008104:	661a      	str	r2, [r3, #96]	@ 0x60
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	4a0b      	ldr	r2, [pc, #44]	@ (8008138 <prvInitialiseNewTask+0x150>)
 800810a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	68f9      	ldr	r1, [r7, #12]
 8008110:	69b8      	ldr	r0, [r7, #24]
 8008112:	f001 f9e7 	bl	80094e4 <pxPortInitialiseStack>
 8008116:	4602      	mov	r2, r0
 8008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008128:	bf00      	nop
 800812a:	3720      	adds	r7, #32
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20006c8c 	.word	0x20006c8c
 8008134:	20006cf4 	.word	0x20006cf4
 8008138:	20006d5c 	.word	0x20006d5c

0800813c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008144:	f001 fb00 	bl	8009748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008148:	4b2d      	ldr	r3, [pc, #180]	@ (8008200 <prvAddNewTaskToReadyList+0xc4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3301      	adds	r3, #1
 800814e:	4a2c      	ldr	r2, [pc, #176]	@ (8008200 <prvAddNewTaskToReadyList+0xc4>)
 8008150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008152:	4b2c      	ldr	r3, [pc, #176]	@ (8008204 <prvAddNewTaskToReadyList+0xc8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800815a:	4a2a      	ldr	r2, [pc, #168]	@ (8008204 <prvAddNewTaskToReadyList+0xc8>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008160:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <prvAddNewTaskToReadyList+0xc4>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d110      	bne.n	800818a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008168:	f000 fc5c 	bl	8008a24 <prvInitialiseTaskLists>
 800816c:	e00d      	b.n	800818a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800816e:	4b26      	ldr	r3, [pc, #152]	@ (8008208 <prvAddNewTaskToReadyList+0xcc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008176:	4b23      	ldr	r3, [pc, #140]	@ (8008204 <prvAddNewTaskToReadyList+0xc8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	429a      	cmp	r2, r3
 8008182:	d802      	bhi.n	800818a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008184:	4a1f      	ldr	r2, [pc, #124]	@ (8008204 <prvAddNewTaskToReadyList+0xc8>)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800818a:	4b20      	ldr	r3, [pc, #128]	@ (800820c <prvAddNewTaskToReadyList+0xd0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	4a1e      	ldr	r2, [pc, #120]	@ (800820c <prvAddNewTaskToReadyList+0xd0>)
 8008192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008194:	4b1d      	ldr	r3, [pc, #116]	@ (800820c <prvAddNewTaskToReadyList+0xd0>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008210 <prvAddNewTaskToReadyList+0xd4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <prvAddNewTaskToReadyList+0x74>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <prvAddNewTaskToReadyList+0xd4>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <prvAddNewTaskToReadyList+0xd8>)
 80081be:	441a      	add	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe ff6d 	bl	80070a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081cc:	f001 faee 	bl	80097ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008208 <prvAddNewTaskToReadyList+0xcc>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00e      	beq.n	80081f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <prvAddNewTaskToReadyList+0xc8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d207      	bcs.n	80081f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008218 <prvAddNewTaskToReadyList+0xdc>)
 80081e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20002c84 	.word	0x20002c84
 8008204:	200027b0 	.word	0x200027b0
 8008208:	20002c90 	.word	0x20002c90
 800820c:	20002ca0 	.word	0x20002ca0
 8008210:	20002c8c 	.word	0x20002c8c
 8008214:	200027b4 	.word	0x200027b4
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d018      	beq.n	8008260 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800822e:	4b14      	ldr	r3, [pc, #80]	@ (8008280 <vTaskDelay+0x64>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <vTaskDelay+0x32>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	60bb      	str	r3, [r7, #8]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800824e:	f000 f88d 	bl	800836c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008252:	2100      	movs	r1, #0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fd97 	bl	8008d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800825a:	f000 f895 	bl	8008388 <xTaskResumeAll>
 800825e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d107      	bne.n	8008276 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <vTaskDelay+0x68>)
 8008268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20002cac 	.word	0x20002cac
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	@ 0x28
 800828c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008296:	463a      	mov	r2, r7
 8008298:	1d39      	adds	r1, r7, #4
 800829a:	f107 0308 	add.w	r3, r7, #8
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fea0 	bl	8006fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	9202      	str	r2, [sp, #8]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	2300      	movs	r3, #0
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	460a      	mov	r2, r1
 80082b6:	4925      	ldr	r1, [pc, #148]	@ (800834c <vTaskStartScheduler+0xc4>)
 80082b8:	4825      	ldr	r0, [pc, #148]	@ (8008350 <vTaskStartScheduler+0xc8>)
 80082ba:	f7ff fdef 	bl	8007e9c <xTaskCreateStatic>
 80082be:	4603      	mov	r3, r0
 80082c0:	4a24      	ldr	r2, [pc, #144]	@ (8008354 <vTaskStartScheduler+0xcc>)
 80082c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082c4:	4b23      	ldr	r3, [pc, #140]	@ (8008354 <vTaskStartScheduler+0xcc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e001      	b.n	80082d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d102      	bne.n	80082e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082dc:	f000 fda8 	bl	8008e30 <xTimerCreateTimerTask>
 80082e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d11d      	bne.n	8008324 <vTaskStartScheduler+0x9c>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	613b      	str	r3, [r7, #16]
}
 80082fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082fc:	4b16      	ldr	r3, [pc, #88]	@ (8008358 <vTaskStartScheduler+0xd0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3358      	adds	r3, #88	@ 0x58
 8008302:	4a16      	ldr	r2, [pc, #88]	@ (800835c <vTaskStartScheduler+0xd4>)
 8008304:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008306:	4b16      	ldr	r3, [pc, #88]	@ (8008360 <vTaskStartScheduler+0xd8>)
 8008308:	f04f 32ff 	mov.w	r2, #4294967295
 800830c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800830e:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <vTaskStartScheduler+0xdc>)
 8008310:	2201      	movs	r2, #1
 8008312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008314:	4b14      	ldr	r3, [pc, #80]	@ (8008368 <vTaskStartScheduler+0xe0>)
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800831a:	f7f9 fa5f 	bl	80017dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800831e:	f001 f96f 	bl	8009600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008322:	e00f      	b.n	8008344 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d10b      	bne.n	8008344 <vTaskStartScheduler+0xbc>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <vTaskStartScheduler+0xb8>
}
 8008344:	bf00      	nop
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	0800e810 	.word	0x0800e810
 8008350:	080089f5 	.word	0x080089f5
 8008354:	20002ca8 	.word	0x20002ca8
 8008358:	200027b0 	.word	0x200027b0
 800835c:	20000030 	.word	0x20000030
 8008360:	20002ca4 	.word	0x20002ca4
 8008364:	20002c90 	.word	0x20002c90
 8008368:	20002c88 	.word	0x20002c88

0800836c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008370:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <vTaskSuspendAll+0x18>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	4a03      	ldr	r2, [pc, #12]	@ (8008384 <vTaskSuspendAll+0x18>)
 8008378:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	20002cac 	.word	0x20002cac

08008388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008396:	4b42      	ldr	r3, [pc, #264]	@ (80084a0 <xTaskResumeAll+0x118>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083b6:	f001 f9c7 	bl	8009748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083ba:	4b39      	ldr	r3, [pc, #228]	@ (80084a0 <xTaskResumeAll+0x118>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	4a37      	ldr	r2, [pc, #220]	@ (80084a0 <xTaskResumeAll+0x118>)
 80083c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c4:	4b36      	ldr	r3, [pc, #216]	@ (80084a0 <xTaskResumeAll+0x118>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d162      	bne.n	8008492 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083cc:	4b35      	ldr	r3, [pc, #212]	@ (80084a4 <xTaskResumeAll+0x11c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d05e      	beq.n	8008492 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083d4:	e02f      	b.n	8008436 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d6:	4b34      	ldr	r3, [pc, #208]	@ (80084a8 <xTaskResumeAll+0x120>)
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3318      	adds	r3, #24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe febc 	bl	8007160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe feb7 	bl	8007160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f6:	4b2d      	ldr	r3, [pc, #180]	@ (80084ac <xTaskResumeAll+0x124>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d903      	bls.n	8008406 <xTaskResumeAll+0x7e>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008402:	4a2a      	ldr	r2, [pc, #168]	@ (80084ac <xTaskResumeAll+0x124>)
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4a27      	ldr	r2, [pc, #156]	@ (80084b0 <xTaskResumeAll+0x128>)
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3304      	adds	r3, #4
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f7fe fe42 	bl	80070a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008426:	4b23      	ldr	r3, [pc, #140]	@ (80084b4 <xTaskResumeAll+0x12c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	429a      	cmp	r2, r3
 800842e:	d302      	bcc.n	8008436 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008430:	4b21      	ldr	r3, [pc, #132]	@ (80084b8 <xTaskResumeAll+0x130>)
 8008432:	2201      	movs	r2, #1
 8008434:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008436:	4b1c      	ldr	r3, [pc, #112]	@ (80084a8 <xTaskResumeAll+0x120>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1cb      	bne.n	80083d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008444:	f000 fb92 	bl	8008b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008448:	4b1c      	ldr	r3, [pc, #112]	@ (80084bc <xTaskResumeAll+0x134>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d010      	beq.n	8008476 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008454:	f000 f858 	bl	8008508 <xTaskIncrementTick>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800845e:	4b16      	ldr	r3, [pc, #88]	@ (80084b8 <xTaskResumeAll+0x130>)
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3b01      	subs	r3, #1
 8008468:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1f1      	bne.n	8008454 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008470:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <xTaskResumeAll+0x134>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008476:	4b10      	ldr	r3, [pc, #64]	@ (80084b8 <xTaskResumeAll+0x130>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008482:	4b0f      	ldr	r3, [pc, #60]	@ (80084c0 <xTaskResumeAll+0x138>)
 8008484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008492:	f001 f98b 	bl	80097ac <vPortExitCritical>

	return xAlreadyYielded;
 8008496:	68bb      	ldr	r3, [r7, #8]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20002cac 	.word	0x20002cac
 80084a4:	20002c84 	.word	0x20002c84
 80084a8:	20002c44 	.word	0x20002c44
 80084ac:	20002c8c 	.word	0x20002c8c
 80084b0:	200027b4 	.word	0x200027b4
 80084b4:	200027b0 	.word	0x200027b0
 80084b8:	20002c98 	.word	0x20002c98
 80084bc:	20002c94 	.word	0x20002c94
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084ca:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <xTaskGetTickCount+0x1c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084d0:	687b      	ldr	r3, [r7, #4]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20002c88 	.word	0x20002c88

080084e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ea:	f001 fa0d 	bl	8009908 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80084f2:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <xTaskGetTickCountFromISR+0x20>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f8:	683b      	ldr	r3, [r7, #0]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20002c88 	.word	0x20002c88

08008508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008512:	4b4f      	ldr	r3, [pc, #316]	@ (8008650 <xTaskIncrementTick+0x148>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8090 	bne.w	800863c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800851c:	4b4d      	ldr	r3, [pc, #308]	@ (8008654 <xTaskIncrementTick+0x14c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3301      	adds	r3, #1
 8008522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008524:	4a4b      	ldr	r2, [pc, #300]	@ (8008654 <xTaskIncrementTick+0x14c>)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d121      	bne.n	8008574 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008530:	4b49      	ldr	r3, [pc, #292]	@ (8008658 <xTaskIncrementTick+0x150>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <xTaskIncrementTick+0x4a>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	603b      	str	r3, [r7, #0]
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <xTaskIncrementTick+0x46>
 8008552:	4b41      	ldr	r3, [pc, #260]	@ (8008658 <xTaskIncrementTick+0x150>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	4b40      	ldr	r3, [pc, #256]	@ (800865c <xTaskIncrementTick+0x154>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3e      	ldr	r2, [pc, #248]	@ (8008658 <xTaskIncrementTick+0x150>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4a3e      	ldr	r2, [pc, #248]	@ (800865c <xTaskIncrementTick+0x154>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	4b3e      	ldr	r3, [pc, #248]	@ (8008660 <xTaskIncrementTick+0x158>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	4a3c      	ldr	r2, [pc, #240]	@ (8008660 <xTaskIncrementTick+0x158>)
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	f000 fafc 	bl	8008b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008574:	4b3b      	ldr	r3, [pc, #236]	@ (8008664 <xTaskIncrementTick+0x15c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	429a      	cmp	r2, r3
 800857c:	d349      	bcc.n	8008612 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800857e:	4b36      	ldr	r3, [pc, #216]	@ (8008658 <xTaskIncrementTick+0x150>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008588:	4b36      	ldr	r3, [pc, #216]	@ (8008664 <xTaskIncrementTick+0x15c>)
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	601a      	str	r2, [r3, #0]
					break;
 8008590:	e03f      	b.n	8008612 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008592:	4b31      	ldr	r3, [pc, #196]	@ (8008658 <xTaskIncrementTick+0x150>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d203      	bcs.n	80085b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008664 <xTaskIncrementTick+0x15c>)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085b0:	e02f      	b.n	8008612 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fdd2 	bl	8007160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3318      	adds	r3, #24
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fdc9 	bl	8007160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d2:	4b25      	ldr	r3, [pc, #148]	@ (8008668 <xTaskIncrementTick+0x160>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d903      	bls.n	80085e2 <xTaskIncrementTick+0xda>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	4a22      	ldr	r2, [pc, #136]	@ (8008668 <xTaskIncrementTick+0x160>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <xTaskIncrementTick+0x164>)
 80085f0:	441a      	add	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7fe fd54 	bl	80070a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008602:	4b1b      	ldr	r3, [pc, #108]	@ (8008670 <xTaskIncrementTick+0x168>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	429a      	cmp	r2, r3
 800860a:	d3b8      	bcc.n	800857e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008610:	e7b5      	b.n	800857e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008612:	4b17      	ldr	r3, [pc, #92]	@ (8008670 <xTaskIncrementTick+0x168>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008618:	4914      	ldr	r1, [pc, #80]	@ (800866c <xTaskIncrementTick+0x164>)
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	440b      	add	r3, r1
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d901      	bls.n	800862e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800862a:	2301      	movs	r3, #1
 800862c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800862e:	4b11      	ldr	r3, [pc, #68]	@ (8008674 <xTaskIncrementTick+0x16c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d007      	beq.n	8008646 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e004      	b.n	8008646 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800863c:	4b0e      	ldr	r3, [pc, #56]	@ (8008678 <xTaskIncrementTick+0x170>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	4a0d      	ldr	r2, [pc, #52]	@ (8008678 <xTaskIncrementTick+0x170>)
 8008644:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008646:	697b      	ldr	r3, [r7, #20]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20002cac 	.word	0x20002cac
 8008654:	20002c88 	.word	0x20002c88
 8008658:	20002c3c 	.word	0x20002c3c
 800865c:	20002c40 	.word	0x20002c40
 8008660:	20002c9c 	.word	0x20002c9c
 8008664:	20002ca4 	.word	0x20002ca4
 8008668:	20002c8c 	.word	0x20002c8c
 800866c:	200027b4 	.word	0x200027b4
 8008670:	200027b0 	.word	0x200027b0
 8008674:	20002c98 	.word	0x20002c98
 8008678:	20002c94 	.word	0x20002c94

0800867c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008682:	4b36      	ldr	r3, [pc, #216]	@ (800875c <vTaskSwitchContext+0xe0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800868a:	4b35      	ldr	r3, [pc, #212]	@ (8008760 <vTaskSwitchContext+0xe4>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008690:	e060      	b.n	8008754 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8008692:	4b33      	ldr	r3, [pc, #204]	@ (8008760 <vTaskSwitchContext+0xe4>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008698:	f7f9 f8a7 	bl	80017ea <getRunTimeCounterValue>
 800869c:	4603      	mov	r3, r0
 800869e:	4a31      	ldr	r2, [pc, #196]	@ (8008764 <vTaskSwitchContext+0xe8>)
 80086a0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80086a2:	4b30      	ldr	r3, [pc, #192]	@ (8008764 <vTaskSwitchContext+0xe8>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b30      	ldr	r3, [pc, #192]	@ (8008768 <vTaskSwitchContext+0xec>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d909      	bls.n	80086c2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80086ae:	4b2f      	ldr	r3, [pc, #188]	@ (800876c <vTaskSwitchContext+0xf0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086b4:	4a2b      	ldr	r2, [pc, #172]	@ (8008764 <vTaskSwitchContext+0xe8>)
 80086b6:	6810      	ldr	r0, [r2, #0]
 80086b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008768 <vTaskSwitchContext+0xec>)
 80086ba:	6812      	ldr	r2, [r2, #0]
 80086bc:	1a82      	subs	r2, r0, r2
 80086be:	440a      	add	r2, r1
 80086c0:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80086c2:	4b28      	ldr	r3, [pc, #160]	@ (8008764 <vTaskSwitchContext+0xe8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a28      	ldr	r2, [pc, #160]	@ (8008768 <vTaskSwitchContext+0xec>)
 80086c8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b29      	ldr	r3, [pc, #164]	@ (8008770 <vTaskSwitchContext+0xf4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e011      	b.n	80086f6 <vTaskSwitchContext+0x7a>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10b      	bne.n	80086f0 <vTaskSwitchContext+0x74>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	607b      	str	r3, [r7, #4]
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <vTaskSwitchContext+0x70>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	491f      	ldr	r1, [pc, #124]	@ (8008774 <vTaskSwitchContext+0xf8>)
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0e3      	beq.n	80086d2 <vTaskSwitchContext+0x56>
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4a17      	ldr	r2, [pc, #92]	@ (8008774 <vTaskSwitchContext+0xf8>)
 8008716:	4413      	add	r3, r2
 8008718:	60bb      	str	r3, [r7, #8]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	605a      	str	r2, [r3, #4]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3308      	adds	r3, #8
 800872c:	429a      	cmp	r2, r3
 800872e:	d104      	bne.n	800873a <vTaskSwitchContext+0xbe>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4a0a      	ldr	r2, [pc, #40]	@ (800876c <vTaskSwitchContext+0xf0>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	4a0a      	ldr	r2, [pc, #40]	@ (8008770 <vTaskSwitchContext+0xf4>)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800874a:	4b08      	ldr	r3, [pc, #32]	@ (800876c <vTaskSwitchContext+0xf0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3358      	adds	r3, #88	@ 0x58
 8008750:	4a09      	ldr	r2, [pc, #36]	@ (8008778 <vTaskSwitchContext+0xfc>)
 8008752:	6013      	str	r3, [r2, #0]
}
 8008754:	bf00      	nop
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20002cac 	.word	0x20002cac
 8008760:	20002c98 	.word	0x20002c98
 8008764:	20002cb4 	.word	0x20002cb4
 8008768:	20002cb0 	.word	0x20002cb0
 800876c:	200027b0 	.word	0x200027b0
 8008770:	20002c8c 	.word	0x20002c8c
 8008774:	200027b4 	.word	0x200027b4
 8008778:	20000030 	.word	0x20000030

0800877c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a4:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <vTaskPlaceOnEventList+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3318      	adds	r3, #24
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7fe fc9e 	bl	80070ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087b2:	2101      	movs	r1, #1
 80087b4:	6838      	ldr	r0, [r7, #0]
 80087b6:	f000 fae7 	bl	8008d88 <prvAddCurrentTaskToDelayedList>
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200027b0 	.word	0x200027b0

080087c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f2:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <vTaskPlaceOnEventListRestricted+0x54>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3318      	adds	r3, #24
 80087f8:	4619      	mov	r1, r3
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7fe fc53 	bl	80070a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f000 faba 	bl	8008d88 <prvAddCurrentTaskToDelayedList>
	}
 8008814:	bf00      	nop
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	200027b0 	.word	0x200027b0

08008820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3318      	adds	r3, #24
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fc84 	bl	8007160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008858:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <xTaskRemoveFromEventList+0xb0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d11d      	bne.n	800889c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fc7b 	bl	8007160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886e:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <xTaskRemoveFromEventList+0xb4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d903      	bls.n	800887e <xTaskRemoveFromEventList+0x5e>
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <xTaskRemoveFromEventList+0xb4>)
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a13      	ldr	r2, [pc, #76]	@ (80088d8 <xTaskRemoveFromEventList+0xb8>)
 800888c:	441a      	add	r2, r3
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7fe fc06 	bl	80070a6 <vListInsertEnd>
 800889a:	e005      	b.n	80088a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3318      	adds	r3, #24
 80088a0:	4619      	mov	r1, r3
 80088a2:	480e      	ldr	r0, [pc, #56]	@ (80088dc <xTaskRemoveFromEventList+0xbc>)
 80088a4:	f7fe fbff 	bl	80070a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ac:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <xTaskRemoveFromEventList+0xc0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d905      	bls.n	80088c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088ba:	4b0a      	ldr	r3, [pc, #40]	@ (80088e4 <xTaskRemoveFromEventList+0xc4>)
 80088bc:	2201      	movs	r2, #1
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	e001      	b.n	80088c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20002cac 	.word	0x20002cac
 80088d4:	20002c8c 	.word	0x20002c8c
 80088d8:	200027b4 	.word	0x200027b4
 80088dc:	20002c44 	.word	0x20002c44
 80088e0:	200027b0 	.word	0x200027b0
 80088e4:	20002c98 	.word	0x20002c98

080088e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <vTaskInternalSetTimeOutState+0x24>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <vTaskInternalSetTimeOutState+0x28>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	605a      	str	r2, [r3, #4]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20002c9c 	.word	0x20002c9c
 8008910:	20002c88 	.word	0x20002c88

08008914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	613b      	str	r3, [r7, #16]
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60fb      	str	r3, [r7, #12]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800895a:	f000 fef5 	bl	8009748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800895e:	4b1d      	ldr	r3, [pc, #116]	@ (80089d4 <xTaskCheckForTimeOut+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d102      	bne.n	800897e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e023      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <xTaskCheckForTimeOut+0xc4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d007      	beq.n	800899a <xTaskCheckForTimeOut+0x86>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d302      	bcc.n	800899a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	e015      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d20b      	bcs.n	80089bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	1ad2      	subs	r2, r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff99 	bl	80088e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
 80089ba:	e004      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089c6:	f000 fef1 	bl	80097ac <vPortExitCritical>

	return xReturn;
 80089ca:	69fb      	ldr	r3, [r7, #28]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20002c88 	.word	0x20002c88
 80089d8:	20002c9c 	.word	0x20002c9c

080089dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e0:	4b03      	ldr	r3, [pc, #12]	@ (80089f0 <vTaskMissedYield+0x14>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
}
 80089e6:	bf00      	nop
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20002c98 	.word	0x20002c98

080089f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089fc:	f000 f852 	bl	8008aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a00:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <prvIdleTask+0x28>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d9f9      	bls.n	80089fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a08:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <prvIdleTask+0x2c>)
 8008a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a18:	e7f0      	b.n	80089fc <prvIdleTask+0x8>
 8008a1a:	bf00      	nop
 8008a1c:	200027b4 	.word	0x200027b4
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e00c      	b.n	8008a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4a12      	ldr	r2, [pc, #72]	@ (8008a84 <prvInitialiseTaskLists+0x60>)
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe fb04 	bl	800704c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b37      	cmp	r3, #55	@ 0x37
 8008a4e:	d9ef      	bls.n	8008a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a50:	480d      	ldr	r0, [pc, #52]	@ (8008a88 <prvInitialiseTaskLists+0x64>)
 8008a52:	f7fe fafb 	bl	800704c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a56:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <prvInitialiseTaskLists+0x68>)
 8008a58:	f7fe faf8 	bl	800704c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a5c:	480c      	ldr	r0, [pc, #48]	@ (8008a90 <prvInitialiseTaskLists+0x6c>)
 8008a5e:	f7fe faf5 	bl	800704c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a62:	480c      	ldr	r0, [pc, #48]	@ (8008a94 <prvInitialiseTaskLists+0x70>)
 8008a64:	f7fe faf2 	bl	800704c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a68:	480b      	ldr	r0, [pc, #44]	@ (8008a98 <prvInitialiseTaskLists+0x74>)
 8008a6a:	f7fe faef 	bl	800704c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <prvInitialiseTaskLists+0x78>)
 8008a70:	4a05      	ldr	r2, [pc, #20]	@ (8008a88 <prvInitialiseTaskLists+0x64>)
 8008a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a74:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa0 <prvInitialiseTaskLists+0x7c>)
 8008a76:	4a05      	ldr	r2, [pc, #20]	@ (8008a8c <prvInitialiseTaskLists+0x68>)
 8008a78:	601a      	str	r2, [r3, #0]
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200027b4 	.word	0x200027b4
 8008a88:	20002c14 	.word	0x20002c14
 8008a8c:	20002c28 	.word	0x20002c28
 8008a90:	20002c44 	.word	0x20002c44
 8008a94:	20002c58 	.word	0x20002c58
 8008a98:	20002c70 	.word	0x20002c70
 8008a9c:	20002c3c 	.word	0x20002c3c
 8008aa0:	20002c40 	.word	0x20002c40

08008aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aaa:	e019      	b.n	8008ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008aac:	f000 fe4c 	bl	8009748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	4b10      	ldr	r3, [pc, #64]	@ (8008af4 <prvCheckTasksWaitingTermination+0x50>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fb4f 	bl	8007160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <prvCheckTasksWaitingTermination+0x54>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8008af8 <prvCheckTasksWaitingTermination+0x54>)
 8008aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008acc:	4b0b      	ldr	r3, [pc, #44]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ad6:	f000 fe69 	bl	80097ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f810 	bl	8008b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae0:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e1      	bne.n	8008aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20002c58 	.word	0x20002c58
 8008af8:	20002c84 	.word	0x20002c84
 8008afc:	20002c6c 	.word	0x20002c6c

08008b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3358      	adds	r3, #88	@ 0x58
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f002 fab1 	bl	800b074 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d108      	bne.n	8008b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 f801 	bl	8009b28 <vPortFree>
				vPortFree( pxTCB );
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fffe 	bl	8009b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b2c:	e019      	b.n	8008b62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d103      	bne.n	8008b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fff5 	bl	8009b28 <vPortFree>
	}
 8008b3e:	e010      	b.n	8008b62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d00b      	beq.n	8008b62 <prvDeleteTCB+0x62>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	60fb      	str	r3, [r7, #12]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <prvDeleteTCB+0x5e>
	}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x38>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b84:	e008      	b.n	8008b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b86:	4b07      	ldr	r3, [pc, #28]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x38>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a04      	ldr	r2, [pc, #16]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b96:	6013      	str	r3, [r2, #0]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	20002c3c 	.word	0x20002c3c
 8008ba8:	20002ca4 	.word	0x20002ca4

08008bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <xTaskGetSchedulerState+0x34>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	e008      	b.n	8008bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc0:	4b08      	ldr	r3, [pc, #32]	@ (8008be4 <xTaskGetSchedulerState+0x38>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	607b      	str	r3, [r7, #4]
 8008bcc:	e001      	b.n	8008bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd2:	687b      	ldr	r3, [r7, #4]
	}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20002c90 	.word	0x20002c90
 8008be4:	20002cac 	.word	0x20002cac

08008be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d058      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8008cbc <xTaskPriorityDisinherit+0xd4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d00b      	beq.n	8008c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	60fb      	str	r3, [r7, #12]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60bb      	str	r3, [r7, #8]
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	e7fd      	b.n	8008c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d02c      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d128      	bne.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fa7c 	bl	8007160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c80:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <xTaskPriorityDisinherit+0xd8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d903      	bls.n	8008c90 <xTaskPriorityDisinherit+0xa8>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc0 <xTaskPriorityDisinherit+0xd8>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a09      	ldr	r2, [pc, #36]	@ (8008cc4 <xTaskPriorityDisinherit+0xdc>)
 8008c9e:	441a      	add	r2, r3
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fe f9fd 	bl	80070a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200027b0 	.word	0x200027b0
 8008cc0:	20002c8c 	.word	0x20002c8c
 8008cc4:	200027b4 	.word	0x200027b4

08008cc8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008cd6:	f000 fd37 	bl	8009748 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008cda:	4b29      	ldr	r3, [pc, #164]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d01c      	beq.n	8008d22 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008ce8:	4b25      	ldr	r3, [pc, #148]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	43d2      	mvns	r2, r2
 8008cf4:	400a      	ands	r2, r1
 8008cf6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008cfa:	4b21      	ldr	r3, [pc, #132]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	6838      	ldr	r0, [r7, #0]
 8008d0e:	f000 f83b 	bl	8008d88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008d12:	4b1c      	ldr	r3, [pc, #112]	@ (8008d84 <xTaskNotifyWait+0xbc>)
 8008d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008d22:	f000 fd43 	bl	80097ac <vPortExitCritical>

		taskENTER_CRITICAL();
 8008d26:	f000 fd0f 	bl	8009748 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008d30:	4b13      	ldr	r3, [pc, #76]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008d3c:	4b10      	ldr	r3, [pc, #64]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d002      	beq.n	8008d50 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e00a      	b.n	8008d66 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	43d2      	mvns	r2, r2
 8008d5c:	400a      	ands	r2, r1
 8008d5e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d66:	4b06      	ldr	r3, [pc, #24]	@ (8008d80 <xTaskNotifyWait+0xb8>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8008d70:	f000 fd1c 	bl	80097ac <vPortExitCritical>

		return xReturn;
 8008d74:	697b      	ldr	r3, [r7, #20]
	}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	200027b0 	.word	0x200027b0
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d92:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d98:	4b20      	ldr	r3, [pc, #128]	@ (8008e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe f9de 	bl	8007160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008daa:	d10a      	bne.n	8008dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d007      	beq.n	8008dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4819      	ldr	r0, [pc, #100]	@ (8008e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8008dbc:	f7fe f973 	bl	80070a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dc0:	e026      	b.n	8008e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dca:	4b14      	ldr	r3, [pc, #80]	@ (8008e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d209      	bcs.n	8008dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dda:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4b0f      	ldr	r3, [pc, #60]	@ (8008e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe f981 	bl	80070ee <vListInsert>
}
 8008dec:	e010      	b.n	8008e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dee:	4b0e      	ldr	r3, [pc, #56]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7fe f977 	bl	80070ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e00:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d202      	bcs.n	8008e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e0a:	4a08      	ldr	r2, [pc, #32]	@ (8008e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	6013      	str	r3, [r2, #0]
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20002c88 	.word	0x20002c88
 8008e1c:	200027b0 	.word	0x200027b0
 8008e20:	20002c70 	.word	0x20002c70
 8008e24:	20002c40 	.word	0x20002c40
 8008e28:	20002c3c 	.word	0x20002c3c
 8008e2c:	20002ca4 	.word	0x20002ca4

08008e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	@ 0x28
 8008e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e3a:	f000 fb13 	bl	8009464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb4 <xTimerCreateTimerTask+0x84>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d021      	beq.n	8008e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e4e:	1d3a      	adds	r2, r7, #4
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe f8dd 	bl	8007018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	9202      	str	r2, [sp, #8]
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	2302      	movs	r3, #2
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	460a      	mov	r2, r1
 8008e70:	4911      	ldr	r1, [pc, #68]	@ (8008eb8 <xTimerCreateTimerTask+0x88>)
 8008e72:	4812      	ldr	r0, [pc, #72]	@ (8008ebc <xTimerCreateTimerTask+0x8c>)
 8008e74:	f7ff f812 	bl	8007e9c <xTaskCreateStatic>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4a11      	ldr	r2, [pc, #68]	@ (8008ec0 <xTimerCreateTimerTask+0x90>)
 8008e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e7e:	4b10      	ldr	r3, [pc, #64]	@ (8008ec0 <xTimerCreateTimerTask+0x90>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e86:	2301      	movs	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	613b      	str	r3, [r7, #16]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ea8:	697b      	ldr	r3, [r7, #20]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20002ce8 	.word	0x20002ce8
 8008eb8:	0800e840 	.word	0x0800e840
 8008ebc:	08008ffd 	.word	0x08008ffd
 8008ec0:	20002cec 	.word	0x20002cec

08008ec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	@ 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10b      	bne.n	8008ef4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	623b      	str	r3, [r7, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ef4:	4b19      	ldr	r3, [pc, #100]	@ (8008f5c <xTimerGenericCommand+0x98>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d02a      	beq.n	8008f52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	dc18      	bgt.n	8008f40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f0e:	f7ff fe4d 	bl	8008bac <xTaskGetSchedulerState>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d109      	bne.n	8008f2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f18:	4b10      	ldr	r3, [pc, #64]	@ (8008f5c <xTimerGenericCommand+0x98>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	f107 0110 	add.w	r1, r7, #16
 8008f20:	2300      	movs	r3, #0
 8008f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f24:	f7fe fafa 	bl	800751c <xQueueGenericSend>
 8008f28:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f2a:	e012      	b.n	8008f52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f5c <xTimerGenericCommand+0x98>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	f107 0110 	add.w	r1, r7, #16
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	f7fe faf0 	bl	800751c <xQueueGenericSend>
 8008f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f3e:	e008      	b.n	8008f52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f40:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <xTimerGenericCommand+0x98>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	f107 0110 	add.w	r1, r7, #16
 8008f48:	2300      	movs	r3, #0
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	f7fe fbe8 	bl	8007720 <xQueueGenericSendFromISR>
 8008f50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	@ 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20002ce8 	.word	0x20002ce8

08008f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <prvProcessExpiredTimer+0x98>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe f8f1 	bl	8007160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d023      	beq.n	8008fd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	699a      	ldr	r2, [r3, #24]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	18d1      	adds	r1, r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	6978      	ldr	r0, [r7, #20]
 8008f9a:	f000 f8d5 	bl	8009148 <prvInsertTimerInActiveList>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d020      	beq.n	8008fe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	2100      	movs	r1, #0
 8008fae:	6978      	ldr	r0, [r7, #20]
 8008fb0:	f7ff ff88 	bl	8008ec4 <xTimerGenericCommand>
 8008fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d114      	bne.n	8008fe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	60fb      	str	r3, [r7, #12]
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	6978      	ldr	r0, [r7, #20]
 8008fec:	4798      	blx	r3
}
 8008fee:	bf00      	nop
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20002ce0 	.word	0x20002ce0

08008ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f859 	bl	80090c0 <prvGetNextExpireTime>
 800900e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4619      	mov	r1, r3
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f805 	bl	8009024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800901a:	f000 f8d7 	bl	80091cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800901e:	bf00      	nop
 8009020:	e7f0      	b.n	8009004 <prvTimerTask+0x8>
	...

08009024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800902e:	f7ff f99d 	bl	800836c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f866 	bl	8009108 <prvSampleTimeNow>
 800903c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d130      	bne.n	80090a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <prvProcessTimerOrBlockTask+0x3c>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	429a      	cmp	r2, r3
 8009050:	d806      	bhi.n	8009060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009052:	f7ff f999 	bl	8008388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff ff81 	bl	8008f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800905e:	e024      	b.n	80090aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <prvProcessTimerOrBlockTask+0x90>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <prvProcessTimerOrBlockTask+0x50>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <prvProcessTimerOrBlockTask+0x52>
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009078:	4b0f      	ldr	r3, [pc, #60]	@ (80090b8 <prvProcessTimerOrBlockTask+0x94>)
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	f7fe fed5 	bl	8007e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800908a:	f7ff f97d 	bl	8008388 <xTaskResumeAll>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009094:	4b09      	ldr	r3, [pc, #36]	@ (80090bc <prvProcessTimerOrBlockTask+0x98>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
}
 80090a4:	e001      	b.n	80090aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090a6:	f7ff f96f 	bl	8008388 <xTaskResumeAll>
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20002ce4 	.word	0x20002ce4
 80090b8:	20002ce8 	.word	0x20002ce8
 80090bc:	e000ed04 	.word	0xe000ed04

080090c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <prvGetNextExpireTime+0x44>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <prvGetNextExpireTime+0x16>
 80090d2:	2201      	movs	r2, #1
 80090d4:	e000      	b.n	80090d8 <prvGetNextExpireTime+0x18>
 80090d6:	2200      	movs	r2, #0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090e4:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <prvGetNextExpireTime+0x44>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e001      	b.n	80090f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090f4:	68fb      	ldr	r3, [r7, #12]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20002ce0 	.word	0x20002ce0

08009108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009110:	f7ff f9d8 	bl	80084c4 <xTaskGetTickCount>
 8009114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009116:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <prvSampleTimeNow+0x3c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d205      	bcs.n	800912c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009120:	f000 f93a 	bl	8009398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e002      	b.n	8009132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009132:	4a04      	ldr	r2, [pc, #16]	@ (8009144 <prvSampleTimeNow+0x3c>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20002cf0 	.word	0x20002cf0

08009148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d812      	bhi.n	8009194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	1ad2      	subs	r2, r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	429a      	cmp	r2, r3
 800917a:	d302      	bcc.n	8009182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e01b      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009182:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <prvInsertTimerInActiveList+0x7c>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f7fd ffae 	bl	80070ee <vListInsert>
 8009192:	e012      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d206      	bcs.n	80091aa <prvInsertTimerInActiveList+0x62>
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d302      	bcc.n	80091aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e007      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <prvInsertTimerInActiveList+0x80>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fd ff9a 	bl	80070ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091ba:	697b      	ldr	r3, [r7, #20]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20002ce4 	.word	0x20002ce4
 80091c8:	20002ce0 	.word	0x20002ce0

080091cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08e      	sub	sp, #56	@ 0x38
 80091d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091d2:	e0ce      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da19      	bge.n	800920e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	3304      	adds	r3, #4
 80091de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61fb      	str	r3, [r7, #28]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009204:	6850      	ldr	r0, [r2, #4]
 8009206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009208:	6892      	ldr	r2, [r2, #8]
 800920a:	4611      	mov	r1, r2
 800920c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f2c0 80ae 	blt.w	8009372 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	3304      	adds	r3, #4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd ff9a 	bl	8007160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800922c:	463b      	mov	r3, r7
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff ff6a 	bl	8009108 <prvSampleTimeNow>
 8009234:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b09      	cmp	r3, #9
 800923a:	f200 8097 	bhi.w	800936c <prvProcessReceivedCommands+0x1a0>
 800923e:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <prvProcessReceivedCommands+0x78>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	0800926d 	.word	0x0800926d
 8009248:	0800926d 	.word	0x0800926d
 800924c:	0800926d 	.word	0x0800926d
 8009250:	080092e3 	.word	0x080092e3
 8009254:	080092f7 	.word	0x080092f7
 8009258:	08009343 	.word	0x08009343
 800925c:	0800926d 	.word	0x0800926d
 8009260:	0800926d 	.word	0x0800926d
 8009264:	080092e3 	.word	0x080092e3
 8009268:	080092f7 	.word	0x080092f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	b2da      	uxtb	r2, r3
 8009278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	18d1      	adds	r1, r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800928c:	f7ff ff5c 	bl	8009148 <prvInsertTimerInActiveList>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d06c      	beq.n	8009370 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800929c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d061      	beq.n	8009370 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	441a      	add	r2, r3
 80092b4:	2300      	movs	r3, #0
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	2300      	movs	r3, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092be:	f7ff fe01 	bl	8008ec4 <xTimerGenericCommand>
 80092c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d152      	bne.n	8009370 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	61bb      	str	r3, [r7, #24]
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092f4:	e03d      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092fc:	f043 0301 	orr.w	r3, r3, #1
 8009300:	b2da      	uxtb	r2, r3
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	617b      	str	r3, [r7, #20]
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	e7fd      	b.n	800932a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	18d1      	adds	r1, r2, r3
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800933a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800933c:	f7ff ff04 	bl	8009148 <prvInsertTimerInActiveList>
					break;
 8009340:	e017      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009352:	f000 fbe9 	bl	8009b28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009356:	e00c      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800935e:	f023 0301 	bic.w	r3, r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800936a:	e002      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800936c:	bf00      	nop
 800936e:	e000      	b.n	8009372 <prvProcessReceivedCommands+0x1a6>
					break;
 8009370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009372:	4b08      	ldr	r3, [pc, #32]	@ (8009394 <prvProcessReceivedCommands+0x1c8>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	1d39      	adds	r1, r7, #4
 8009378:	2200      	movs	r2, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fa6e 	bl	800785c <xQueueReceive>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f af26 	bne.w	80091d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	3730      	adds	r7, #48	@ 0x30
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20002ce8 	.word	0x20002ce8

08009398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800939e:	e049      	b.n	8009434 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093a0:	4b2e      	ldr	r3, [pc, #184]	@ (800945c <prvSwitchTimerLists+0xc4>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093aa:	4b2c      	ldr	r3, [pc, #176]	@ (800945c <prvSwitchTimerLists+0xc4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fd fed1 	bl	8007160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d02f      	beq.n	8009434 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d90e      	bls.n	8009404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093f2:	4b1a      	ldr	r3, [pc, #104]	@ (800945c <prvSwitchTimerLists+0xc4>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fd fe76 	bl	80070ee <vListInsert>
 8009402:	e017      	b.n	8009434 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009404:	2300      	movs	r3, #0
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2100      	movs	r1, #0
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fd58 	bl	8008ec4 <xTimerGenericCommand>
 8009414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	603b      	str	r3, [r7, #0]
}
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009434:	4b09      	ldr	r3, [pc, #36]	@ (800945c <prvSwitchTimerLists+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1b0      	bne.n	80093a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800943e:	4b07      	ldr	r3, [pc, #28]	@ (800945c <prvSwitchTimerLists+0xc4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009444:	4b06      	ldr	r3, [pc, #24]	@ (8009460 <prvSwitchTimerLists+0xc8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a04      	ldr	r2, [pc, #16]	@ (800945c <prvSwitchTimerLists+0xc4>)
 800944a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800944c:	4a04      	ldr	r2, [pc, #16]	@ (8009460 <prvSwitchTimerLists+0xc8>)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	6013      	str	r3, [r2, #0]
}
 8009452:	bf00      	nop
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20002ce0 	.word	0x20002ce0
 8009460:	20002ce4 	.word	0x20002ce4

08009464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800946a:	f000 f96d 	bl	8009748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800946e:	4b15      	ldr	r3, [pc, #84]	@ (80094c4 <prvCheckForValidListAndQueue+0x60>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d120      	bne.n	80094b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009476:	4814      	ldr	r0, [pc, #80]	@ (80094c8 <prvCheckForValidListAndQueue+0x64>)
 8009478:	f7fd fde8 	bl	800704c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800947c:	4813      	ldr	r0, [pc, #76]	@ (80094cc <prvCheckForValidListAndQueue+0x68>)
 800947e:	f7fd fde5 	bl	800704c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009482:	4b13      	ldr	r3, [pc, #76]	@ (80094d0 <prvCheckForValidListAndQueue+0x6c>)
 8009484:	4a10      	ldr	r2, [pc, #64]	@ (80094c8 <prvCheckForValidListAndQueue+0x64>)
 8009486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009488:	4b12      	ldr	r3, [pc, #72]	@ (80094d4 <prvCheckForValidListAndQueue+0x70>)
 800948a:	4a10      	ldr	r2, [pc, #64]	@ (80094cc <prvCheckForValidListAndQueue+0x68>)
 800948c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800948e:	2300      	movs	r3, #0
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	4b11      	ldr	r3, [pc, #68]	@ (80094d8 <prvCheckForValidListAndQueue+0x74>)
 8009494:	4a11      	ldr	r2, [pc, #68]	@ (80094dc <prvCheckForValidListAndQueue+0x78>)
 8009496:	2110      	movs	r1, #16
 8009498:	200a      	movs	r0, #10
 800949a:	f7fd fef5 	bl	8007288 <xQueueGenericCreateStatic>
 800949e:	4603      	mov	r3, r0
 80094a0:	4a08      	ldr	r2, [pc, #32]	@ (80094c4 <prvCheckForValidListAndQueue+0x60>)
 80094a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094a4:	4b07      	ldr	r3, [pc, #28]	@ (80094c4 <prvCheckForValidListAndQueue+0x60>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094ac:	4b05      	ldr	r3, [pc, #20]	@ (80094c4 <prvCheckForValidListAndQueue+0x60>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	490b      	ldr	r1, [pc, #44]	@ (80094e0 <prvCheckForValidListAndQueue+0x7c>)
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fc6a 	bl	8007d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094b8:	f000 f978 	bl	80097ac <vPortExitCritical>
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20002ce8 	.word	0x20002ce8
 80094c8:	20002cb8 	.word	0x20002cb8
 80094cc:	20002ccc 	.word	0x20002ccc
 80094d0:	20002ce0 	.word	0x20002ce0
 80094d4:	20002ce4 	.word	0x20002ce4
 80094d8:	20002d94 	.word	0x20002d94
 80094dc:	20002cf4 	.word	0x20002cf4
 80094e0:	0800e848 	.word	0x0800e848

080094e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3b04      	subs	r3, #4
 80094f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80094fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3b04      	subs	r3, #4
 8009502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f023 0201 	bic.w	r2, r3, #1
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3b04      	subs	r3, #4
 8009512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009514:	4a0c      	ldr	r2, [pc, #48]	@ (8009548 <pxPortInitialiseStack+0x64>)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b14      	subs	r3, #20
 800951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3b04      	subs	r3, #4
 800952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f06f 0202 	mvn.w	r2, #2
 8009532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3b20      	subs	r3, #32
 8009538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	0800954d 	.word	0x0800954d

0800954c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009556:	4b13      	ldr	r3, [pc, #76]	@ (80095a4 <prvTaskExitError+0x58>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955e:	d00b      	beq.n	8009578 <prvTaskExitError+0x2c>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <prvTaskExitError+0x28>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60bb      	str	r3, [r7, #8]
}
 800958a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800958c:	bf00      	nop
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d0fc      	beq.n	800958e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000020 	.word	0x20000020
	...

080095b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095b0:	4b07      	ldr	r3, [pc, #28]	@ (80095d0 <pxCurrentTCBConst2>)
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	6808      	ldr	r0, [r1, #0]
 80095b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	f380 8809 	msr	PSP, r0
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f380 8811 	msr	BASEPRI, r0
 80095ca:	4770      	bx	lr
 80095cc:	f3af 8000 	nop.w

080095d0 <pxCurrentTCBConst2>:
 80095d0:	200027b0 	.word	0x200027b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095d8:	4808      	ldr	r0, [pc, #32]	@ (80095fc <prvPortStartFirstTask+0x24>)
 80095da:	6800      	ldr	r0, [r0, #0]
 80095dc:	6800      	ldr	r0, [r0, #0]
 80095de:	f380 8808 	msr	MSP, r0
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f380 8814 	msr	CONTROL, r0
 80095ea:	b662      	cpsie	i
 80095ec:	b661      	cpsie	f
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	df00      	svc	0
 80095f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095fa:	bf00      	nop
 80095fc:	e000ed08 	.word	0xe000ed08

08009600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009606:	4b47      	ldr	r3, [pc, #284]	@ (8009724 <xPortStartScheduler+0x124>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a47      	ldr	r2, [pc, #284]	@ (8009728 <xPortStartScheduler+0x128>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d10b      	bne.n	8009628 <xPortStartScheduler+0x28>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	613b      	str	r3, [r7, #16]
}
 8009622:	bf00      	nop
 8009624:	bf00      	nop
 8009626:	e7fd      	b.n	8009624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009628:	4b3e      	ldr	r3, [pc, #248]	@ (8009724 <xPortStartScheduler+0x124>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a3f      	ldr	r2, [pc, #252]	@ (800972c <xPortStartScheduler+0x12c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d10b      	bne.n	800964a <xPortStartScheduler+0x4a>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60fb      	str	r3, [r7, #12]
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800964a:	4b39      	ldr	r3, [pc, #228]	@ (8009730 <xPortStartScheduler+0x130>)
 800964c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	22ff      	movs	r2, #255	@ 0xff
 800965a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800966c:	b2da      	uxtb	r2, r3
 800966e:	4b31      	ldr	r3, [pc, #196]	@ (8009734 <xPortStartScheduler+0x134>)
 8009670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009672:	4b31      	ldr	r3, [pc, #196]	@ (8009738 <xPortStartScheduler+0x138>)
 8009674:	2207      	movs	r2, #7
 8009676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009678:	e009      	b.n	800968e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800967a:	4b2f      	ldr	r3, [pc, #188]	@ (8009738 <xPortStartScheduler+0x138>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3b01      	subs	r3, #1
 8009680:	4a2d      	ldr	r2, [pc, #180]	@ (8009738 <xPortStartScheduler+0x138>)
 8009682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	b2db      	uxtb	r3, r3
 800968c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009696:	2b80      	cmp	r3, #128	@ 0x80
 8009698:	d0ef      	beq.n	800967a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800969a:	4b27      	ldr	r3, [pc, #156]	@ (8009738 <xPortStartScheduler+0x138>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f1c3 0307 	rsb	r3, r3, #7
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d00b      	beq.n	80096be <xPortStartScheduler+0xbe>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60bb      	str	r3, [r7, #8]
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096be:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <xPortStartScheduler+0x138>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009738 <xPortStartScheduler+0x138>)
 80096c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009738 <xPortStartScheduler+0x138>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096d0:	4a19      	ldr	r2, [pc, #100]	@ (8009738 <xPortStartScheduler+0x138>)
 80096d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096dc:	4b17      	ldr	r3, [pc, #92]	@ (800973c <xPortStartScheduler+0x13c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a16      	ldr	r2, [pc, #88]	@ (800973c <xPortStartScheduler+0x13c>)
 80096e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80096e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096e8:	4b14      	ldr	r3, [pc, #80]	@ (800973c <xPortStartScheduler+0x13c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a13      	ldr	r2, [pc, #76]	@ (800973c <xPortStartScheduler+0x13c>)
 80096ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80096f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096f4:	f000 f8da 	bl	80098ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096f8:	4b11      	ldr	r3, [pc, #68]	@ (8009740 <xPortStartScheduler+0x140>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096fe:	f000 f8f9 	bl	80098f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009702:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <xPortStartScheduler+0x144>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a0f      	ldr	r2, [pc, #60]	@ (8009744 <xPortStartScheduler+0x144>)
 8009708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800970c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800970e:	f7ff ff63 	bl	80095d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009712:	f7fe ffb3 	bl	800867c <vTaskSwitchContext>
	prvTaskExitError();
 8009716:	f7ff ff19 	bl	800954c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	e000ed00 	.word	0xe000ed00
 8009728:	410fc271 	.word	0x410fc271
 800972c:	410fc270 	.word	0x410fc270
 8009730:	e000e400 	.word	0xe000e400
 8009734:	20002de4 	.word	0x20002de4
 8009738:	20002de8 	.word	0x20002de8
 800973c:	e000ed20 	.word	0xe000ed20
 8009740:	20000020 	.word	0x20000020
 8009744:	e000ef34 	.word	0xe000ef34

08009748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	607b      	str	r3, [r7, #4]
}
 8009760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009762:	4b10      	ldr	r3, [pc, #64]	@ (80097a4 <vPortEnterCritical+0x5c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	4a0e      	ldr	r2, [pc, #56]	@ (80097a4 <vPortEnterCritical+0x5c>)
 800976a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800976c:	4b0d      	ldr	r3, [pc, #52]	@ (80097a4 <vPortEnterCritical+0x5c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d110      	bne.n	8009796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009774:	4b0c      	ldr	r3, [pc, #48]	@ (80097a8 <vPortEnterCritical+0x60>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <vPortEnterCritical+0x4e>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	603b      	str	r3, [r7, #0]
}
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	e7fd      	b.n	8009792 <vPortEnterCritical+0x4a>
	}
}
 8009796:	bf00      	nop
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000020 	.word	0x20000020
 80097a8:	e000ed04 	.word	0xe000ed04

080097ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097b2:	4b12      	ldr	r3, [pc, #72]	@ (80097fc <vPortExitCritical+0x50>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <vPortExitCritical+0x26>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	607b      	str	r3, [r7, #4]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097d2:	4b0a      	ldr	r3, [pc, #40]	@ (80097fc <vPortExitCritical+0x50>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4a08      	ldr	r2, [pc, #32]	@ (80097fc <vPortExitCritical+0x50>)
 80097da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097dc:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <vPortExitCritical+0x50>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d105      	bne.n	80097f0 <vPortExitCritical+0x44>
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f383 8811 	msr	BASEPRI, r3
}
 80097ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000020 	.word	0x20000020

08009800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009800:	f3ef 8009 	mrs	r0, PSP
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	4b15      	ldr	r3, [pc, #84]	@ (8009860 <pxCurrentTCBConst>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	f01e 0f10 	tst.w	lr, #16
 8009810:	bf08      	it	eq
 8009812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	6010      	str	r0, [r2, #0]
 800981c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009824:	f380 8811 	msr	BASEPRI, r0
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f7fe ff24 	bl	800867c <vTaskSwitchContext>
 8009834:	f04f 0000 	mov.w	r0, #0
 8009838:	f380 8811 	msr	BASEPRI, r0
 800983c:	bc09      	pop	{r0, r3}
 800983e:	6819      	ldr	r1, [r3, #0]
 8009840:	6808      	ldr	r0, [r1, #0]
 8009842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009846:	f01e 0f10 	tst.w	lr, #16
 800984a:	bf08      	it	eq
 800984c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009850:	f380 8809 	msr	PSP, r0
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst>:
 8009860:	200027b0 	.word	0x200027b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009882:	f7fe fe41 	bl	8008508 <xTaskIncrementTick>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800988c:	4b06      	ldr	r3, [pc, #24]	@ (80098a8 <xPortSysTickHandler+0x40>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	2300      	movs	r3, #0
 8009896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f383 8811 	msr	BASEPRI, r3
}
 800989e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098b0:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <vPortSetupTimerInterrupt+0x34>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098b6:	4b0b      	ldr	r3, [pc, #44]	@ (80098e4 <vPortSetupTimerInterrupt+0x38>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098bc:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <vPortSetupTimerInterrupt+0x3c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0a      	ldr	r2, [pc, #40]	@ (80098ec <vPortSetupTimerInterrupt+0x40>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	099b      	lsrs	r3, r3, #6
 80098c8:	4a09      	ldr	r2, [pc, #36]	@ (80098f0 <vPortSetupTimerInterrupt+0x44>)
 80098ca:	3b01      	subs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098ce:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <vPortSetupTimerInterrupt+0x34>)
 80098d0:	2207      	movs	r2, #7
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	e000e010 	.word	0xe000e010
 80098e4:	e000e018 	.word	0xe000e018
 80098e8:	20000014 	.word	0x20000014
 80098ec:	10624dd3 	.word	0x10624dd3
 80098f0:	e000e014 	.word	0xe000e014

080098f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009904 <vPortEnableVFP+0x10>
 80098f8:	6801      	ldr	r1, [r0, #0]
 80098fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80098fe:	6001      	str	r1, [r0, #0]
 8009900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009902:	bf00      	nop
 8009904:	e000ed88 	.word	0xe000ed88

08009908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800990e:	f3ef 8305 	mrs	r3, IPSR
 8009912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b0f      	cmp	r3, #15
 8009918:	d915      	bls.n	8009946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800991a:	4a18      	ldr	r2, [pc, #96]	@ (800997c <vPortValidateInterruptPriority+0x74>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009924:	4b16      	ldr	r3, [pc, #88]	@ (8009980 <vPortValidateInterruptPriority+0x78>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	7afa      	ldrb	r2, [r7, #11]
 800992a:	429a      	cmp	r2, r3
 800992c:	d20b      	bcs.n	8009946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009946:	4b0f      	ldr	r3, [pc, #60]	@ (8009984 <vPortValidateInterruptPriority+0x7c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800994e:	4b0e      	ldr	r3, [pc, #56]	@ (8009988 <vPortValidateInterruptPriority+0x80>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d90b      	bls.n	800996e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	603b      	str	r3, [r7, #0]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <vPortValidateInterruptPriority+0x62>
	}
 800996e:	bf00      	nop
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	e000e3f0 	.word	0xe000e3f0
 8009980:	20002de4 	.word	0x20002de4
 8009984:	e000ed0c 	.word	0xe000ed0c
 8009988:	20002de8 	.word	0x20002de8

0800998c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009994:	2300      	movs	r3, #0
 8009996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009998:	f7fe fce8 	bl	800836c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800999c:	4b5c      	ldr	r3, [pc, #368]	@ (8009b10 <pvPortMalloc+0x184>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099a4:	f000 f924 	bl	8009bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b14 <pvPortMalloc+0x188>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4013      	ands	r3, r2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 8095 	bne.w	8009ae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01e      	beq.n	80099fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80099bc:	2208      	movs	r2, #8
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4413      	add	r3, r2
 80099c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f003 0307 	and.w	r3, r3, #7
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d015      	beq.n	80099fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f023 0307 	bic.w	r3, r3, #7
 80099d4:	3308      	adds	r3, #8
 80099d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <pvPortMalloc+0x6e>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	617b      	str	r3, [r7, #20]
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	e7fd      	b.n	80099f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d06f      	beq.n	8009ae0 <pvPortMalloc+0x154>
 8009a00:	4b45      	ldr	r3, [pc, #276]	@ (8009b18 <pvPortMalloc+0x18c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d86a      	bhi.n	8009ae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a0a:	4b44      	ldr	r3, [pc, #272]	@ (8009b1c <pvPortMalloc+0x190>)
 8009a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a0e:	4b43      	ldr	r3, [pc, #268]	@ (8009b1c <pvPortMalloc+0x190>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a14:	e004      	b.n	8009a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d903      	bls.n	8009a32 <pvPortMalloc+0xa6>
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1f1      	bne.n	8009a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a32:	4b37      	ldr	r3, [pc, #220]	@ (8009b10 <pvPortMalloc+0x184>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d051      	beq.n	8009ae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2208      	movs	r2, #8
 8009a42:	4413      	add	r3, r2
 8009a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	1ad2      	subs	r2, r2, r3
 8009a56:	2308      	movs	r3, #8
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d920      	bls.n	8009aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4413      	add	r3, r2
 8009a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <pvPortMalloc+0xfc>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	613b      	str	r3, [r7, #16]
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	e7fd      	b.n	8009a84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a9a:	69b8      	ldr	r0, [r7, #24]
 8009a9c:	f000 f90a 	bl	8009cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b18 <pvPortMalloc+0x18c>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8009b18 <pvPortMalloc+0x18c>)
 8009aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aae:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <pvPortMalloc+0x18c>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b20 <pvPortMalloc+0x194>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d203      	bcs.n	8009ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009aba:	4b17      	ldr	r3, [pc, #92]	@ (8009b18 <pvPortMalloc+0x18c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a18      	ldr	r2, [pc, #96]	@ (8009b20 <pvPortMalloc+0x194>)
 8009ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	4b13      	ldr	r3, [pc, #76]	@ (8009b14 <pvPortMalloc+0x188>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ad6:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <pvPortMalloc+0x198>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	4a11      	ldr	r2, [pc, #68]	@ (8009b24 <pvPortMalloc+0x198>)
 8009ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ae0:	f7fe fc52 	bl	8008388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <pvPortMalloc+0x17a>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60fb      	str	r3, [r7, #12]
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <pvPortMalloc+0x176>
	return pvReturn;
 8009b06:	69fb      	ldr	r3, [r7, #28]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3728      	adds	r7, #40	@ 0x28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20006c74 	.word	0x20006c74
 8009b14:	20006c88 	.word	0x20006c88
 8009b18:	20006c78 	.word	0x20006c78
 8009b1c:	20006c6c 	.word	0x20006c6c
 8009b20:	20006c7c 	.word	0x20006c7c
 8009b24:	20006c80 	.word	0x20006c80

08009b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d04f      	beq.n	8009bda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b3a:	2308      	movs	r3, #8
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	4413      	add	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	4b25      	ldr	r3, [pc, #148]	@ (8009be4 <vPortFree+0xbc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4013      	ands	r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <vPortFree+0x46>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60fb      	str	r3, [r7, #12]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <vPortFree+0x66>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	60bb      	str	r3, [r7, #8]
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	e7fd      	b.n	8009b8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <vPortFree+0xbc>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4013      	ands	r3, r2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01e      	beq.n	8009bda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11a      	bne.n	8009bda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8009be4 <vPortFree+0xbc>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	43db      	mvns	r3, r3
 8009bae:	401a      	ands	r2, r3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bb4:	f7fe fbda 	bl	800836c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009be8 <vPortFree+0xc0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	4a09      	ldr	r2, [pc, #36]	@ (8009be8 <vPortFree+0xc0>)
 8009bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bc6:	6938      	ldr	r0, [r7, #16]
 8009bc8:	f000 f874 	bl	8009cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bcc:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <vPortFree+0xc4>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	4a06      	ldr	r2, [pc, #24]	@ (8009bec <vPortFree+0xc4>)
 8009bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bd6:	f7fe fbd7 	bl	8008388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bda:	bf00      	nop
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20006c88 	.word	0x20006c88
 8009be8:	20006c78 	.word	0x20006c78
 8009bec:	20006c84 	.word	0x20006c84

08009bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bf6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8009bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bfc:	4b27      	ldr	r3, [pc, #156]	@ (8009c9c <prvHeapInit+0xac>)
 8009bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3307      	adds	r3, #7
 8009c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0307 	bic.w	r3, r3, #7
 8009c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c9c <prvHeapInit+0xac>)
 8009c20:	4413      	add	r3, r2
 8009c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca0 <prvHeapInit+0xb0>)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca0 <prvHeapInit+0xb0>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	4413      	add	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c3c:	2208      	movs	r2, #8
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1a9b      	subs	r3, r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0307 	bic.w	r3, r3, #7
 8009c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4a15      	ldr	r2, [pc, #84]	@ (8009ca4 <prvHeapInit+0xb4>)
 8009c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c52:	4b14      	ldr	r3, [pc, #80]	@ (8009ca4 <prvHeapInit+0xb4>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2200      	movs	r2, #0
 8009c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ca4 <prvHeapInit+0xb4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <prvHeapInit+0xb4>)
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca8 <prvHeapInit+0xb8>)
 8009c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4a09      	ldr	r2, [pc, #36]	@ (8009cac <prvHeapInit+0xbc>)
 8009c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c88:	4b09      	ldr	r3, [pc, #36]	@ (8009cb0 <prvHeapInit+0xc0>)
 8009c8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c8e:	601a      	str	r2, [r3, #0]
}
 8009c90:	bf00      	nop
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20002dec 	.word	0x20002dec
 8009ca0:	20006c6c 	.word	0x20006c6c
 8009ca4:	20006c74 	.word	0x20006c74
 8009ca8:	20006c7c 	.word	0x20006c7c
 8009cac:	20006c78 	.word	0x20006c78
 8009cb0:	20006c88 	.word	0x20006c88

08009cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cbc:	4b28      	ldr	r3, [pc, #160]	@ (8009d60 <prvInsertBlockIntoFreeList+0xac>)
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e002      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x14>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d8f7      	bhi.n	8009cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d108      	bne.n	8009cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	441a      	add	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	441a      	add	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d118      	bne.n	8009d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b15      	ldr	r3, [pc, #84]	@ (8009d64 <prvInsertBlockIntoFreeList+0xb0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d00d      	beq.n	8009d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	441a      	add	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e008      	b.n	8009d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d32:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <prvInsertBlockIntoFreeList+0xb0>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	e003      	b.n	8009d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d002      	beq.n	8009d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20006c6c 	.word	0x20006c6c
 8009d64:	20006c74 	.word	0x20006c74

08009d68 <__itoa>:
 8009d68:	1e93      	subs	r3, r2, #2
 8009d6a:	2b22      	cmp	r3, #34	@ 0x22
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	460c      	mov	r4, r1
 8009d70:	d904      	bls.n	8009d7c <__itoa+0x14>
 8009d72:	2300      	movs	r3, #0
 8009d74:	700b      	strb	r3, [r1, #0]
 8009d76:	461c      	mov	r4, r3
 8009d78:	4620      	mov	r0, r4
 8009d7a:	bd10      	pop	{r4, pc}
 8009d7c:	2a0a      	cmp	r2, #10
 8009d7e:	d109      	bne.n	8009d94 <__itoa+0x2c>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	da07      	bge.n	8009d94 <__itoa+0x2c>
 8009d84:	232d      	movs	r3, #45	@ 0x2d
 8009d86:	700b      	strb	r3, [r1, #0]
 8009d88:	4240      	negs	r0, r0
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4421      	add	r1, r4
 8009d8e:	f000 f88b 	bl	8009ea8 <__utoa>
 8009d92:	e7f1      	b.n	8009d78 <__itoa+0x10>
 8009d94:	2100      	movs	r1, #0
 8009d96:	e7f9      	b.n	8009d8c <__itoa+0x24>

08009d98 <itoa>:
 8009d98:	f7ff bfe6 	b.w	8009d68 <__itoa>

08009d9c <_strtol_l.constprop.0>:
 8009d9c:	2b24      	cmp	r3, #36	@ 0x24
 8009d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da2:	4686      	mov	lr, r0
 8009da4:	4690      	mov	r8, r2
 8009da6:	d801      	bhi.n	8009dac <_strtol_l.constprop.0+0x10>
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d106      	bne.n	8009dba <_strtol_l.constprop.0+0x1e>
 8009dac:	f001 f9ee 	bl	800b18c <__errno>
 8009db0:	2316      	movs	r3, #22
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	2000      	movs	r0, #0
 8009db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dba:	4834      	ldr	r0, [pc, #208]	@ (8009e8c <_strtol_l.constprop.0+0xf0>)
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dc4:	5d06      	ldrb	r6, [r0, r4]
 8009dc6:	f016 0608 	ands.w	r6, r6, #8
 8009dca:	d1f8      	bne.n	8009dbe <_strtol_l.constprop.0+0x22>
 8009dcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dce:	d12d      	bne.n	8009e2c <_strtol_l.constprop.0+0x90>
 8009dd0:	782c      	ldrb	r4, [r5, #0]
 8009dd2:	2601      	movs	r6, #1
 8009dd4:	1c95      	adds	r5, r2, #2
 8009dd6:	f033 0210 	bics.w	r2, r3, #16
 8009dda:	d109      	bne.n	8009df0 <_strtol_l.constprop.0+0x54>
 8009ddc:	2c30      	cmp	r4, #48	@ 0x30
 8009dde:	d12a      	bne.n	8009e36 <_strtol_l.constprop.0+0x9a>
 8009de0:	782a      	ldrb	r2, [r5, #0]
 8009de2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009de6:	2a58      	cmp	r2, #88	@ 0x58
 8009de8:	d125      	bne.n	8009e36 <_strtol_l.constprop.0+0x9a>
 8009dea:	786c      	ldrb	r4, [r5, #1]
 8009dec:	2310      	movs	r3, #16
 8009dee:	3502      	adds	r5, #2
 8009df0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009df4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009df8:	2200      	movs	r2, #0
 8009dfa:	fbbc f9f3 	udiv	r9, ip, r3
 8009dfe:	4610      	mov	r0, r2
 8009e00:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e08:	2f09      	cmp	r7, #9
 8009e0a:	d81b      	bhi.n	8009e44 <_strtol_l.constprop.0+0xa8>
 8009e0c:	463c      	mov	r4, r7
 8009e0e:	42a3      	cmp	r3, r4
 8009e10:	dd27      	ble.n	8009e62 <_strtol_l.constprop.0+0xc6>
 8009e12:	1c57      	adds	r7, r2, #1
 8009e14:	d007      	beq.n	8009e26 <_strtol_l.constprop.0+0x8a>
 8009e16:	4581      	cmp	r9, r0
 8009e18:	d320      	bcc.n	8009e5c <_strtol_l.constprop.0+0xc0>
 8009e1a:	d101      	bne.n	8009e20 <_strtol_l.constprop.0+0x84>
 8009e1c:	45a2      	cmp	sl, r4
 8009e1e:	db1d      	blt.n	8009e5c <_strtol_l.constprop.0+0xc0>
 8009e20:	fb00 4003 	mla	r0, r0, r3, r4
 8009e24:	2201      	movs	r2, #1
 8009e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e2a:	e7eb      	b.n	8009e04 <_strtol_l.constprop.0+0x68>
 8009e2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e2e:	bf04      	itt	eq
 8009e30:	782c      	ldrbeq	r4, [r5, #0]
 8009e32:	1c95      	addeq	r5, r2, #2
 8009e34:	e7cf      	b.n	8009dd6 <_strtol_l.constprop.0+0x3a>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1da      	bne.n	8009df0 <_strtol_l.constprop.0+0x54>
 8009e3a:	2c30      	cmp	r4, #48	@ 0x30
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2308      	moveq	r3, #8
 8009e40:	230a      	movne	r3, #10
 8009e42:	e7d5      	b.n	8009df0 <_strtol_l.constprop.0+0x54>
 8009e44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e48:	2f19      	cmp	r7, #25
 8009e4a:	d801      	bhi.n	8009e50 <_strtol_l.constprop.0+0xb4>
 8009e4c:	3c37      	subs	r4, #55	@ 0x37
 8009e4e:	e7de      	b.n	8009e0e <_strtol_l.constprop.0+0x72>
 8009e50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e54:	2f19      	cmp	r7, #25
 8009e56:	d804      	bhi.n	8009e62 <_strtol_l.constprop.0+0xc6>
 8009e58:	3c57      	subs	r4, #87	@ 0x57
 8009e5a:	e7d8      	b.n	8009e0e <_strtol_l.constprop.0+0x72>
 8009e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e60:	e7e1      	b.n	8009e26 <_strtol_l.constprop.0+0x8a>
 8009e62:	1c53      	adds	r3, r2, #1
 8009e64:	d108      	bne.n	8009e78 <_strtol_l.constprop.0+0xdc>
 8009e66:	2322      	movs	r3, #34	@ 0x22
 8009e68:	f8ce 3000 	str.w	r3, [lr]
 8009e6c:	4660      	mov	r0, ip
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	d0a0      	beq.n	8009db6 <_strtol_l.constprop.0+0x1a>
 8009e74:	1e69      	subs	r1, r5, #1
 8009e76:	e006      	b.n	8009e86 <_strtol_l.constprop.0+0xea>
 8009e78:	b106      	cbz	r6, 8009e7c <_strtol_l.constprop.0+0xe0>
 8009e7a:	4240      	negs	r0, r0
 8009e7c:	f1b8 0f00 	cmp.w	r8, #0
 8009e80:	d099      	beq.n	8009db6 <_strtol_l.constprop.0+0x1a>
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	d1f6      	bne.n	8009e74 <_strtol_l.constprop.0+0xd8>
 8009e86:	f8c8 1000 	str.w	r1, [r8]
 8009e8a:	e794      	b.n	8009db6 <_strtol_l.constprop.0+0x1a>
 8009e8c:	0800e95a 	.word	0x0800e95a

08009e90 <_strtol_r>:
 8009e90:	f7ff bf84 	b.w	8009d9c <_strtol_l.constprop.0>

08009e94 <strtol>:
 8009e94:	4613      	mov	r3, r2
 8009e96:	460a      	mov	r2, r1
 8009e98:	4601      	mov	r1, r0
 8009e9a:	4802      	ldr	r0, [pc, #8]	@ (8009ea4 <strtol+0x10>)
 8009e9c:	6800      	ldr	r0, [r0, #0]
 8009e9e:	f7ff bf7d 	b.w	8009d9c <_strtol_l.constprop.0>
 8009ea2:	bf00      	nop
 8009ea4:	20000030 	.word	0x20000030

08009ea8 <__utoa>:
 8009ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eaa:	4c1f      	ldr	r4, [pc, #124]	@ (8009f28 <__utoa+0x80>)
 8009eac:	b08b      	sub	sp, #44	@ 0x2c
 8009eae:	4605      	mov	r5, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	466e      	mov	r6, sp
 8009eb4:	f104 0c20 	add.w	ip, r4, #32
 8009eb8:	6820      	ldr	r0, [r4, #0]
 8009eba:	6861      	ldr	r1, [r4, #4]
 8009ebc:	4637      	mov	r7, r6
 8009ebe:	c703      	stmia	r7!, {r0, r1}
 8009ec0:	3408      	adds	r4, #8
 8009ec2:	4564      	cmp	r4, ip
 8009ec4:	463e      	mov	r6, r7
 8009ec6:	d1f7      	bne.n	8009eb8 <__utoa+0x10>
 8009ec8:	7921      	ldrb	r1, [r4, #4]
 8009eca:	7139      	strb	r1, [r7, #4]
 8009ecc:	1e91      	subs	r1, r2, #2
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	6038      	str	r0, [r7, #0]
 8009ed2:	2922      	cmp	r1, #34	@ 0x22
 8009ed4:	f04f 0100 	mov.w	r1, #0
 8009ed8:	d904      	bls.n	8009ee4 <__utoa+0x3c>
 8009eda:	7019      	strb	r1, [r3, #0]
 8009edc:	460b      	mov	r3, r1
 8009ede:	4618      	mov	r0, r3
 8009ee0:	b00b      	add	sp, #44	@ 0x2c
 8009ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee4:	1e58      	subs	r0, r3, #1
 8009ee6:	4684      	mov	ip, r0
 8009ee8:	fbb5 f7f2 	udiv	r7, r5, r2
 8009eec:	fb02 5617 	mls	r6, r2, r7, r5
 8009ef0:	3628      	adds	r6, #40	@ 0x28
 8009ef2:	446e      	add	r6, sp
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009efa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009efe:	462e      	mov	r6, r5
 8009f00:	42b2      	cmp	r2, r6
 8009f02:	f101 0101 	add.w	r1, r1, #1
 8009f06:	463d      	mov	r5, r7
 8009f08:	d9ee      	bls.n	8009ee8 <__utoa+0x40>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	545a      	strb	r2, [r3, r1]
 8009f0e:	1919      	adds	r1, r3, r4
 8009f10:	1aa5      	subs	r5, r4, r2
 8009f12:	42aa      	cmp	r2, r5
 8009f14:	dae3      	bge.n	8009ede <__utoa+0x36>
 8009f16:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009f1a:	780e      	ldrb	r6, [r1, #0]
 8009f1c:	7006      	strb	r6, [r0, #0]
 8009f1e:	3201      	adds	r2, #1
 8009f20:	f801 5901 	strb.w	r5, [r1], #-1
 8009f24:	e7f4      	b.n	8009f10 <__utoa+0x68>
 8009f26:	bf00      	nop
 8009f28:	0800e934 	.word	0x0800e934

08009f2c <__cvt>:
 8009f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	ec57 6b10 	vmov	r6, r7, d0
 8009f34:	2f00      	cmp	r7, #0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4619      	mov	r1, r3
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	bfbb      	ittet	lt
 8009f3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f42:	461f      	movlt	r7, r3
 8009f44:	2300      	movge	r3, #0
 8009f46:	232d      	movlt	r3, #45	@ 0x2d
 8009f48:	700b      	strb	r3, [r1, #0]
 8009f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f50:	4691      	mov	r9, r2
 8009f52:	f023 0820 	bic.w	r8, r3, #32
 8009f56:	bfbc      	itt	lt
 8009f58:	4632      	movlt	r2, r6
 8009f5a:	4616      	movlt	r6, r2
 8009f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f60:	d005      	beq.n	8009f6e <__cvt+0x42>
 8009f62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f66:	d100      	bne.n	8009f6a <__cvt+0x3e>
 8009f68:	3401      	adds	r4, #1
 8009f6a:	2102      	movs	r1, #2
 8009f6c:	e000      	b.n	8009f70 <__cvt+0x44>
 8009f6e:	2103      	movs	r1, #3
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	ab02      	add	r3, sp, #8
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	ec47 6b10 	vmov	d0, r6, r7
 8009f7c:	4653      	mov	r3, sl
 8009f7e:	4622      	mov	r2, r4
 8009f80:	f001 f9d6 	bl	800b330 <_dtoa_r>
 8009f84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f88:	4605      	mov	r5, r0
 8009f8a:	d119      	bne.n	8009fc0 <__cvt+0x94>
 8009f8c:	f019 0f01 	tst.w	r9, #1
 8009f90:	d00e      	beq.n	8009fb0 <__cvt+0x84>
 8009f92:	eb00 0904 	add.w	r9, r0, r4
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	b108      	cbz	r0, 8009fa8 <__cvt+0x7c>
 8009fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fa8:	2230      	movs	r2, #48	@ 0x30
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	454b      	cmp	r3, r9
 8009fae:	d31e      	bcc.n	8009fee <__cvt+0xc2>
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fb4:	1b5b      	subs	r3, r3, r5
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	b004      	add	sp, #16
 8009fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fc4:	eb00 0904 	add.w	r9, r0, r4
 8009fc8:	d1e5      	bne.n	8009f96 <__cvt+0x6a>
 8009fca:	7803      	ldrb	r3, [r0, #0]
 8009fcc:	2b30      	cmp	r3, #48	@ 0x30
 8009fce:	d10a      	bne.n	8009fe6 <__cvt+0xba>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fdc:	b918      	cbnz	r0, 8009fe6 <__cvt+0xba>
 8009fde:	f1c4 0401 	rsb	r4, r4, #1
 8009fe2:	f8ca 4000 	str.w	r4, [sl]
 8009fe6:	f8da 3000 	ldr.w	r3, [sl]
 8009fea:	4499      	add	r9, r3
 8009fec:	e7d3      	b.n	8009f96 <__cvt+0x6a>
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	9103      	str	r1, [sp, #12]
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	e7d9      	b.n	8009faa <__cvt+0x7e>

08009ff6 <__exponent>:
 8009ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	bfba      	itte	lt
 8009ffc:	4249      	neglt	r1, r1
 8009ffe:	232d      	movlt	r3, #45	@ 0x2d
 800a000:	232b      	movge	r3, #43	@ 0x2b
 800a002:	2909      	cmp	r1, #9
 800a004:	7002      	strb	r2, [r0, #0]
 800a006:	7043      	strb	r3, [r0, #1]
 800a008:	dd29      	ble.n	800a05e <__exponent+0x68>
 800a00a:	f10d 0307 	add.w	r3, sp, #7
 800a00e:	461d      	mov	r5, r3
 800a010:	270a      	movs	r7, #10
 800a012:	461a      	mov	r2, r3
 800a014:	fbb1 f6f7 	udiv	r6, r1, r7
 800a018:	fb07 1416 	mls	r4, r7, r6, r1
 800a01c:	3430      	adds	r4, #48	@ 0x30
 800a01e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a022:	460c      	mov	r4, r1
 800a024:	2c63      	cmp	r4, #99	@ 0x63
 800a026:	f103 33ff 	add.w	r3, r3, #4294967295
 800a02a:	4631      	mov	r1, r6
 800a02c:	dcf1      	bgt.n	800a012 <__exponent+0x1c>
 800a02e:	3130      	adds	r1, #48	@ 0x30
 800a030:	1e94      	subs	r4, r2, #2
 800a032:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a036:	1c41      	adds	r1, r0, #1
 800a038:	4623      	mov	r3, r4
 800a03a:	42ab      	cmp	r3, r5
 800a03c:	d30a      	bcc.n	800a054 <__exponent+0x5e>
 800a03e:	f10d 0309 	add.w	r3, sp, #9
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	42ac      	cmp	r4, r5
 800a046:	bf88      	it	hi
 800a048:	2300      	movhi	r3, #0
 800a04a:	3302      	adds	r3, #2
 800a04c:	4403      	add	r3, r0
 800a04e:	1a18      	subs	r0, r3, r0
 800a050:	b003      	add	sp, #12
 800a052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a054:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a058:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a05c:	e7ed      	b.n	800a03a <__exponent+0x44>
 800a05e:	2330      	movs	r3, #48	@ 0x30
 800a060:	3130      	adds	r1, #48	@ 0x30
 800a062:	7083      	strb	r3, [r0, #2]
 800a064:	70c1      	strb	r1, [r0, #3]
 800a066:	1d03      	adds	r3, r0, #4
 800a068:	e7f1      	b.n	800a04e <__exponent+0x58>
	...

0800a06c <_printf_float>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	b08d      	sub	sp, #52	@ 0x34
 800a072:	460c      	mov	r4, r1
 800a074:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a078:	4616      	mov	r6, r2
 800a07a:	461f      	mov	r7, r3
 800a07c:	4605      	mov	r5, r0
 800a07e:	f000 ffe5 	bl	800b04c <_localeconv_r>
 800a082:	6803      	ldr	r3, [r0, #0]
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	4618      	mov	r0, r3
 800a088:	f7f6 f8f2 	bl	8000270 <strlen>
 800a08c:	2300      	movs	r3, #0
 800a08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a090:	f8d8 3000 	ldr.w	r3, [r8]
 800a094:	9005      	str	r0, [sp, #20]
 800a096:	3307      	adds	r3, #7
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	f103 0208 	add.w	r2, r3, #8
 800a0a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0a4:	f8d4 b000 	ldr.w	fp, [r4]
 800a0a8:	f8c8 2000 	str.w	r2, [r8]
 800a0ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c2:	4b9c      	ldr	r3, [pc, #624]	@ (800a334 <_printf_float+0x2c8>)
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	f7f6 fd30 	bl	8000b2c <__aeabi_dcmpun>
 800a0cc:	bb70      	cbnz	r0, 800a12c <_printf_float+0xc0>
 800a0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0d2:	4b98      	ldr	r3, [pc, #608]	@ (800a334 <_printf_float+0x2c8>)
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d8:	f7f6 fd0a 	bl	8000af0 <__aeabi_dcmple>
 800a0dc:	bb30      	cbnz	r0, 800a12c <_printf_float+0xc0>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 fcf9 	bl	8000adc <__aeabi_dcmplt>
 800a0ea:	b110      	cbz	r0, 800a0f2 <_printf_float+0x86>
 800a0ec:	232d      	movs	r3, #45	@ 0x2d
 800a0ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f2:	4a91      	ldr	r2, [pc, #580]	@ (800a338 <_printf_float+0x2cc>)
 800a0f4:	4b91      	ldr	r3, [pc, #580]	@ (800a33c <_printf_float+0x2d0>)
 800a0f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0fa:	bf94      	ite	ls
 800a0fc:	4690      	movls	r8, r2
 800a0fe:	4698      	movhi	r8, r3
 800a100:	2303      	movs	r3, #3
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	f02b 0304 	bic.w	r3, fp, #4
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	9700      	str	r7, [sp, #0]
 800a110:	4633      	mov	r3, r6
 800a112:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a114:	4621      	mov	r1, r4
 800a116:	4628      	mov	r0, r5
 800a118:	f000 f9d2 	bl	800a4c0 <_printf_common>
 800a11c:	3001      	adds	r0, #1
 800a11e:	f040 808d 	bne.w	800a23c <_printf_float+0x1d0>
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	b00d      	add	sp, #52	@ 0x34
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	4642      	mov	r2, r8
 800a12e:	464b      	mov	r3, r9
 800a130:	4640      	mov	r0, r8
 800a132:	4649      	mov	r1, r9
 800a134:	f7f6 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 800a138:	b140      	cbz	r0, 800a14c <_printf_float+0xe0>
 800a13a:	464b      	mov	r3, r9
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfbc      	itt	lt
 800a140:	232d      	movlt	r3, #45	@ 0x2d
 800a142:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a146:	4a7e      	ldr	r2, [pc, #504]	@ (800a340 <_printf_float+0x2d4>)
 800a148:	4b7e      	ldr	r3, [pc, #504]	@ (800a344 <_printf_float+0x2d8>)
 800a14a:	e7d4      	b.n	800a0f6 <_printf_float+0x8a>
 800a14c:	6863      	ldr	r3, [r4, #4]
 800a14e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a152:	9206      	str	r2, [sp, #24]
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	d13b      	bne.n	800a1d0 <_printf_float+0x164>
 800a158:	2306      	movs	r3, #6
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a160:	2300      	movs	r3, #0
 800a162:	6022      	str	r2, [r4, #0]
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	ab0a      	add	r3, sp, #40	@ 0x28
 800a168:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a16c:	ab09      	add	r3, sp, #36	@ 0x24
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	6861      	ldr	r1, [r4, #4]
 800a172:	ec49 8b10 	vmov	d0, r8, r9
 800a176:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a17a:	4628      	mov	r0, r5
 800a17c:	f7ff fed6 	bl	8009f2c <__cvt>
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a184:	2b47      	cmp	r3, #71	@ 0x47
 800a186:	4680      	mov	r8, r0
 800a188:	d129      	bne.n	800a1de <_printf_float+0x172>
 800a18a:	1cc8      	adds	r0, r1, #3
 800a18c:	db02      	blt.n	800a194 <_printf_float+0x128>
 800a18e:	6863      	ldr	r3, [r4, #4]
 800a190:	4299      	cmp	r1, r3
 800a192:	dd41      	ble.n	800a218 <_printf_float+0x1ac>
 800a194:	f1aa 0a02 	sub.w	sl, sl, #2
 800a198:	fa5f fa8a 	uxtb.w	sl, sl
 800a19c:	3901      	subs	r1, #1
 800a19e:	4652      	mov	r2, sl
 800a1a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1a6:	f7ff ff26 	bl	8009ff6 <__exponent>
 800a1aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1ac:	1813      	adds	r3, r2, r0
 800a1ae:	2a01      	cmp	r2, #1
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	6123      	str	r3, [r4, #16]
 800a1b4:	dc02      	bgt.n	800a1bc <_printf_float+0x150>
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	07d2      	lsls	r2, r2, #31
 800a1ba:	d501      	bpl.n	800a1c0 <_printf_float+0x154>
 800a1bc:	3301      	adds	r3, #1
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0a2      	beq.n	800a10e <_printf_float+0xa2>
 800a1c8:	232d      	movs	r3, #45	@ 0x2d
 800a1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ce:	e79e      	b.n	800a10e <_printf_float+0xa2>
 800a1d0:	9a06      	ldr	r2, [sp, #24]
 800a1d2:	2a47      	cmp	r2, #71	@ 0x47
 800a1d4:	d1c2      	bne.n	800a15c <_printf_float+0xf0>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1c0      	bne.n	800a15c <_printf_float+0xf0>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e7bd      	b.n	800a15a <_printf_float+0xee>
 800a1de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1e2:	d9db      	bls.n	800a19c <_printf_float+0x130>
 800a1e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1e8:	d118      	bne.n	800a21c <_printf_float+0x1b0>
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	dd0b      	ble.n	800a208 <_printf_float+0x19c>
 800a1f0:	6121      	str	r1, [r4, #16]
 800a1f2:	b913      	cbnz	r3, 800a1fa <_printf_float+0x18e>
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	07d0      	lsls	r0, r2, #31
 800a1f8:	d502      	bpl.n	800a200 <_printf_float+0x194>
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	440b      	add	r3, r1
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a202:	f04f 0900 	mov.w	r9, #0
 800a206:	e7db      	b.n	800a1c0 <_printf_float+0x154>
 800a208:	b913      	cbnz	r3, 800a210 <_printf_float+0x1a4>
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	07d2      	lsls	r2, r2, #31
 800a20e:	d501      	bpl.n	800a214 <_printf_float+0x1a8>
 800a210:	3302      	adds	r3, #2
 800a212:	e7f4      	b.n	800a1fe <_printf_float+0x192>
 800a214:	2301      	movs	r3, #1
 800a216:	e7f2      	b.n	800a1fe <_printf_float+0x192>
 800a218:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21e:	4299      	cmp	r1, r3
 800a220:	db05      	blt.n	800a22e <_printf_float+0x1c2>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	6121      	str	r1, [r4, #16]
 800a226:	07d8      	lsls	r0, r3, #31
 800a228:	d5ea      	bpl.n	800a200 <_printf_float+0x194>
 800a22a:	1c4b      	adds	r3, r1, #1
 800a22c:	e7e7      	b.n	800a1fe <_printf_float+0x192>
 800a22e:	2900      	cmp	r1, #0
 800a230:	bfd4      	ite	le
 800a232:	f1c1 0202 	rsble	r2, r1, #2
 800a236:	2201      	movgt	r2, #1
 800a238:	4413      	add	r3, r2
 800a23a:	e7e0      	b.n	800a1fe <_printf_float+0x192>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	055a      	lsls	r2, r3, #21
 800a240:	d407      	bmi.n	800a252 <_printf_float+0x1e6>
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	4642      	mov	r2, r8
 800a246:	4631      	mov	r1, r6
 800a248:	4628      	mov	r0, r5
 800a24a:	47b8      	blx	r7
 800a24c:	3001      	adds	r0, #1
 800a24e:	d12b      	bne.n	800a2a8 <_printf_float+0x23c>
 800a250:	e767      	b.n	800a122 <_printf_float+0xb6>
 800a252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a256:	f240 80dd 	bls.w	800a414 <_printf_float+0x3a8>
 800a25a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a25e:	2200      	movs	r2, #0
 800a260:	2300      	movs	r3, #0
 800a262:	f7f6 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800a266:	2800      	cmp	r0, #0
 800a268:	d033      	beq.n	800a2d2 <_printf_float+0x266>
 800a26a:	4a37      	ldr	r2, [pc, #220]	@ (800a348 <_printf_float+0x2dc>)
 800a26c:	2301      	movs	r3, #1
 800a26e:	4631      	mov	r1, r6
 800a270:	4628      	mov	r0, r5
 800a272:	47b8      	blx	r7
 800a274:	3001      	adds	r0, #1
 800a276:	f43f af54 	beq.w	800a122 <_printf_float+0xb6>
 800a27a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a27e:	4543      	cmp	r3, r8
 800a280:	db02      	blt.n	800a288 <_printf_float+0x21c>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	07d8      	lsls	r0, r3, #31
 800a286:	d50f      	bpl.n	800a2a8 <_printf_float+0x23c>
 800a288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f af45 	beq.w	800a122 <_printf_float+0xb6>
 800a298:	f04f 0900 	mov.w	r9, #0
 800a29c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2a0:	f104 0a1a 	add.w	sl, r4, #26
 800a2a4:	45c8      	cmp	r8, r9
 800a2a6:	dc09      	bgt.n	800a2bc <_printf_float+0x250>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	079b      	lsls	r3, r3, #30
 800a2ac:	f100 8103 	bmi.w	800a4b6 <_printf_float+0x44a>
 800a2b0:	68e0      	ldr	r0, [r4, #12]
 800a2b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2b4:	4298      	cmp	r0, r3
 800a2b6:	bfb8      	it	lt
 800a2b8:	4618      	movlt	r0, r3
 800a2ba:	e734      	b.n	800a126 <_printf_float+0xba>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4652      	mov	r2, sl
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af2b 	beq.w	800a122 <_printf_float+0xb6>
 800a2cc:	f109 0901 	add.w	r9, r9, #1
 800a2d0:	e7e8      	b.n	800a2a4 <_printf_float+0x238>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc39      	bgt.n	800a34c <_printf_float+0x2e0>
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a348 <_printf_float+0x2dc>)
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af1d 	beq.w	800a122 <_printf_float+0xb6>
 800a2e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2ec:	ea59 0303 	orrs.w	r3, r9, r3
 800a2f0:	d102      	bne.n	800a2f8 <_printf_float+0x28c>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	07d9      	lsls	r1, r3, #31
 800a2f6:	d5d7      	bpl.n	800a2a8 <_printf_float+0x23c>
 800a2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af0d 	beq.w	800a122 <_printf_float+0xb6>
 800a308:	f04f 0a00 	mov.w	sl, #0
 800a30c:	f104 0b1a 	add.w	fp, r4, #26
 800a310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a312:	425b      	negs	r3, r3
 800a314:	4553      	cmp	r3, sl
 800a316:	dc01      	bgt.n	800a31c <_printf_float+0x2b0>
 800a318:	464b      	mov	r3, r9
 800a31a:	e793      	b.n	800a244 <_printf_float+0x1d8>
 800a31c:	2301      	movs	r3, #1
 800a31e:	465a      	mov	r2, fp
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aefb 	beq.w	800a122 <_printf_float+0xb6>
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	e7ee      	b.n	800a310 <_printf_float+0x2a4>
 800a332:	bf00      	nop
 800a334:	7fefffff 	.word	0x7fefffff
 800a338:	0800ea5a 	.word	0x0800ea5a
 800a33c:	0800ea5e 	.word	0x0800ea5e
 800a340:	0800ea62 	.word	0x0800ea62
 800a344:	0800ea66 	.word	0x0800ea66
 800a348:	0800ea6a 	.word	0x0800ea6a
 800a34c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a34e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a352:	4553      	cmp	r3, sl
 800a354:	bfa8      	it	ge
 800a356:	4653      	movge	r3, sl
 800a358:	2b00      	cmp	r3, #0
 800a35a:	4699      	mov	r9, r3
 800a35c:	dc36      	bgt.n	800a3cc <_printf_float+0x360>
 800a35e:	f04f 0b00 	mov.w	fp, #0
 800a362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a366:	f104 021a 	add.w	r2, r4, #26
 800a36a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a36c:	9306      	str	r3, [sp, #24]
 800a36e:	eba3 0309 	sub.w	r3, r3, r9
 800a372:	455b      	cmp	r3, fp
 800a374:	dc31      	bgt.n	800a3da <_printf_float+0x36e>
 800a376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a378:	459a      	cmp	sl, r3
 800a37a:	dc3a      	bgt.n	800a3f2 <_printf_float+0x386>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07da      	lsls	r2, r3, #31
 800a380:	d437      	bmi.n	800a3f2 <_printf_float+0x386>
 800a382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a384:	ebaa 0903 	sub.w	r9, sl, r3
 800a388:	9b06      	ldr	r3, [sp, #24]
 800a38a:	ebaa 0303 	sub.w	r3, sl, r3
 800a38e:	4599      	cmp	r9, r3
 800a390:	bfa8      	it	ge
 800a392:	4699      	movge	r9, r3
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	dc33      	bgt.n	800a402 <_printf_float+0x396>
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3a2:	f104 0b1a 	add.w	fp, r4, #26
 800a3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a3ac:	eba3 0309 	sub.w	r3, r3, r9
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	f77f af79 	ble.w	800a2a8 <_printf_float+0x23c>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	465a      	mov	r2, fp
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f aeae 	beq.w	800a122 <_printf_float+0xb6>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	e7ec      	b.n	800a3a6 <_printf_float+0x33a>
 800a3cc:	4642      	mov	r2, r8
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d1c2      	bne.n	800a35e <_printf_float+0x2f2>
 800a3d8:	e6a3      	b.n	800a122 <_printf_float+0xb6>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4628      	mov	r0, r5
 800a3e0:	9206      	str	r2, [sp, #24]
 800a3e2:	47b8      	blx	r7
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	f43f ae9c 	beq.w	800a122 <_printf_float+0xb6>
 800a3ea:	9a06      	ldr	r2, [sp, #24]
 800a3ec:	f10b 0b01 	add.w	fp, fp, #1
 800a3f0:	e7bb      	b.n	800a36a <_printf_float+0x2fe>
 800a3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d1c0      	bne.n	800a382 <_printf_float+0x316>
 800a400:	e68f      	b.n	800a122 <_printf_float+0xb6>
 800a402:	9a06      	ldr	r2, [sp, #24]
 800a404:	464b      	mov	r3, r9
 800a406:	4442      	add	r2, r8
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b8      	blx	r7
 800a40e:	3001      	adds	r0, #1
 800a410:	d1c3      	bne.n	800a39a <_printf_float+0x32e>
 800a412:	e686      	b.n	800a122 <_printf_float+0xb6>
 800a414:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a418:	f1ba 0f01 	cmp.w	sl, #1
 800a41c:	dc01      	bgt.n	800a422 <_printf_float+0x3b6>
 800a41e:	07db      	lsls	r3, r3, #31
 800a420:	d536      	bpl.n	800a490 <_printf_float+0x424>
 800a422:	2301      	movs	r3, #1
 800a424:	4642      	mov	r2, r8
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae78 	beq.w	800a122 <_printf_float+0xb6>
 800a432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a436:	4631      	mov	r1, r6
 800a438:	4628      	mov	r0, r5
 800a43a:	47b8      	blx	r7
 800a43c:	3001      	adds	r0, #1
 800a43e:	f43f ae70 	beq.w	800a122 <_printf_float+0xb6>
 800a442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a446:	2200      	movs	r2, #0
 800a448:	2300      	movs	r3, #0
 800a44a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a44e:	f7f6 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a452:	b9c0      	cbnz	r0, 800a486 <_printf_float+0x41a>
 800a454:	4653      	mov	r3, sl
 800a456:	f108 0201 	add.w	r2, r8, #1
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	d10c      	bne.n	800a47e <_printf_float+0x412>
 800a464:	e65d      	b.n	800a122 <_printf_float+0xb6>
 800a466:	2301      	movs	r3, #1
 800a468:	465a      	mov	r2, fp
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	47b8      	blx	r7
 800a470:	3001      	adds	r0, #1
 800a472:	f43f ae56 	beq.w	800a122 <_printf_float+0xb6>
 800a476:	f108 0801 	add.w	r8, r8, #1
 800a47a:	45d0      	cmp	r8, sl
 800a47c:	dbf3      	blt.n	800a466 <_printf_float+0x3fa>
 800a47e:	464b      	mov	r3, r9
 800a480:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a484:	e6df      	b.n	800a246 <_printf_float+0x1da>
 800a486:	f04f 0800 	mov.w	r8, #0
 800a48a:	f104 0b1a 	add.w	fp, r4, #26
 800a48e:	e7f4      	b.n	800a47a <_printf_float+0x40e>
 800a490:	2301      	movs	r3, #1
 800a492:	4642      	mov	r2, r8
 800a494:	e7e1      	b.n	800a45a <_printf_float+0x3ee>
 800a496:	2301      	movs	r3, #1
 800a498:	464a      	mov	r2, r9
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f43f ae3e 	beq.w	800a122 <_printf_float+0xb6>
 800a4a6:	f108 0801 	add.w	r8, r8, #1
 800a4aa:	68e3      	ldr	r3, [r4, #12]
 800a4ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4ae:	1a5b      	subs	r3, r3, r1
 800a4b0:	4543      	cmp	r3, r8
 800a4b2:	dcf0      	bgt.n	800a496 <_printf_float+0x42a>
 800a4b4:	e6fc      	b.n	800a2b0 <_printf_float+0x244>
 800a4b6:	f04f 0800 	mov.w	r8, #0
 800a4ba:	f104 0919 	add.w	r9, r4, #25
 800a4be:	e7f4      	b.n	800a4aa <_printf_float+0x43e>

0800a4c0 <_printf_common>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	4698      	mov	r8, r3
 800a4c8:	688a      	ldr	r2, [r1, #8]
 800a4ca:	690b      	ldr	r3, [r1, #16]
 800a4cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	bfb8      	it	lt
 800a4d4:	4613      	movlt	r3, r2
 800a4d6:	6033      	str	r3, [r6, #0]
 800a4d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4dc:	4607      	mov	r7, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	b10a      	cbz	r2, 800a4e6 <_printf_common+0x26>
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	6033      	str	r3, [r6, #0]
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	0699      	lsls	r1, r3, #26
 800a4ea:	bf42      	ittt	mi
 800a4ec:	6833      	ldrmi	r3, [r6, #0]
 800a4ee:	3302      	addmi	r3, #2
 800a4f0:	6033      	strmi	r3, [r6, #0]
 800a4f2:	6825      	ldr	r5, [r4, #0]
 800a4f4:	f015 0506 	ands.w	r5, r5, #6
 800a4f8:	d106      	bne.n	800a508 <_printf_common+0x48>
 800a4fa:	f104 0a19 	add.w	sl, r4, #25
 800a4fe:	68e3      	ldr	r3, [r4, #12]
 800a500:	6832      	ldr	r2, [r6, #0]
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	42ab      	cmp	r3, r5
 800a506:	dc26      	bgt.n	800a556 <_printf_common+0x96>
 800a508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	3b00      	subs	r3, #0
 800a510:	bf18      	it	ne
 800a512:	2301      	movne	r3, #1
 800a514:	0692      	lsls	r2, r2, #26
 800a516:	d42b      	bmi.n	800a570 <_printf_common+0xb0>
 800a518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a51c:	4641      	mov	r1, r8
 800a51e:	4638      	mov	r0, r7
 800a520:	47c8      	blx	r9
 800a522:	3001      	adds	r0, #1
 800a524:	d01e      	beq.n	800a564 <_printf_common+0xa4>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	f003 0306 	and.w	r3, r3, #6
 800a52e:	2b04      	cmp	r3, #4
 800a530:	bf02      	ittt	eq
 800a532:	68e5      	ldreq	r5, [r4, #12]
 800a534:	6833      	ldreq	r3, [r6, #0]
 800a536:	1aed      	subeq	r5, r5, r3
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	bf0c      	ite	eq
 800a53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a540:	2500      	movne	r5, #0
 800a542:	4293      	cmp	r3, r2
 800a544:	bfc4      	itt	gt
 800a546:	1a9b      	subgt	r3, r3, r2
 800a548:	18ed      	addgt	r5, r5, r3
 800a54a:	2600      	movs	r6, #0
 800a54c:	341a      	adds	r4, #26
 800a54e:	42b5      	cmp	r5, r6
 800a550:	d11a      	bne.n	800a588 <_printf_common+0xc8>
 800a552:	2000      	movs	r0, #0
 800a554:	e008      	b.n	800a568 <_printf_common+0xa8>
 800a556:	2301      	movs	r3, #1
 800a558:	4652      	mov	r2, sl
 800a55a:	4641      	mov	r1, r8
 800a55c:	4638      	mov	r0, r7
 800a55e:	47c8      	blx	r9
 800a560:	3001      	adds	r0, #1
 800a562:	d103      	bne.n	800a56c <_printf_common+0xac>
 800a564:	f04f 30ff 	mov.w	r0, #4294967295
 800a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56c:	3501      	adds	r5, #1
 800a56e:	e7c6      	b.n	800a4fe <_printf_common+0x3e>
 800a570:	18e1      	adds	r1, r4, r3
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	2030      	movs	r0, #48	@ 0x30
 800a576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a57a:	4422      	add	r2, r4
 800a57c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a584:	3302      	adds	r3, #2
 800a586:	e7c7      	b.n	800a518 <_printf_common+0x58>
 800a588:	2301      	movs	r3, #1
 800a58a:	4622      	mov	r2, r4
 800a58c:	4641      	mov	r1, r8
 800a58e:	4638      	mov	r0, r7
 800a590:	47c8      	blx	r9
 800a592:	3001      	adds	r0, #1
 800a594:	d0e6      	beq.n	800a564 <_printf_common+0xa4>
 800a596:	3601      	adds	r6, #1
 800a598:	e7d9      	b.n	800a54e <_printf_common+0x8e>
	...

0800a59c <_printf_i>:
 800a59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a0:	7e0f      	ldrb	r7, [r1, #24]
 800a5a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5a4:	2f78      	cmp	r7, #120	@ 0x78
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	4680      	mov	r8, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	469a      	mov	sl, r3
 800a5ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5b2:	d807      	bhi.n	800a5c4 <_printf_i+0x28>
 800a5b4:	2f62      	cmp	r7, #98	@ 0x62
 800a5b6:	d80a      	bhi.n	800a5ce <_printf_i+0x32>
 800a5b8:	2f00      	cmp	r7, #0
 800a5ba:	f000 80d2 	beq.w	800a762 <_printf_i+0x1c6>
 800a5be:	2f58      	cmp	r7, #88	@ 0x58
 800a5c0:	f000 80b9 	beq.w	800a736 <_printf_i+0x19a>
 800a5c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5cc:	e03a      	b.n	800a644 <_printf_i+0xa8>
 800a5ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5d2:	2b15      	cmp	r3, #21
 800a5d4:	d8f6      	bhi.n	800a5c4 <_printf_i+0x28>
 800a5d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5dc <_printf_i+0x40>)
 800a5d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5dc:	0800a635 	.word	0x0800a635
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a5c5 	.word	0x0800a5c5
 800a5e8:	0800a5c5 	.word	0x0800a5c5
 800a5ec:	0800a5c5 	.word	0x0800a5c5
 800a5f0:	0800a5c5 	.word	0x0800a5c5
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a5c5 	.word	0x0800a5c5
 800a5fc:	0800a5c5 	.word	0x0800a5c5
 800a600:	0800a5c5 	.word	0x0800a5c5
 800a604:	0800a5c5 	.word	0x0800a5c5
 800a608:	0800a749 	.word	0x0800a749
 800a60c:	0800a673 	.word	0x0800a673
 800a610:	0800a703 	.word	0x0800a703
 800a614:	0800a5c5 	.word	0x0800a5c5
 800a618:	0800a5c5 	.word	0x0800a5c5
 800a61c:	0800a76b 	.word	0x0800a76b
 800a620:	0800a5c5 	.word	0x0800a5c5
 800a624:	0800a673 	.word	0x0800a673
 800a628:	0800a5c5 	.word	0x0800a5c5
 800a62c:	0800a5c5 	.word	0x0800a5c5
 800a630:	0800a70b 	.word	0x0800a70b
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	1d1a      	adds	r2, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6032      	str	r2, [r6, #0]
 800a63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a644:	2301      	movs	r3, #1
 800a646:	e09d      	b.n	800a784 <_printf_i+0x1e8>
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1d19      	adds	r1, r3, #4
 800a64e:	6031      	str	r1, [r6, #0]
 800a650:	0606      	lsls	r6, r0, #24
 800a652:	d501      	bpl.n	800a658 <_printf_i+0xbc>
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	e003      	b.n	800a660 <_printf_i+0xc4>
 800a658:	0645      	lsls	r5, r0, #25
 800a65a:	d5fb      	bpl.n	800a654 <_printf_i+0xb8>
 800a65c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a660:	2d00      	cmp	r5, #0
 800a662:	da03      	bge.n	800a66c <_printf_i+0xd0>
 800a664:	232d      	movs	r3, #45	@ 0x2d
 800a666:	426d      	negs	r5, r5
 800a668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a66c:	4859      	ldr	r0, [pc, #356]	@ (800a7d4 <_printf_i+0x238>)
 800a66e:	230a      	movs	r3, #10
 800a670:	e011      	b.n	800a696 <_printf_i+0xfa>
 800a672:	6821      	ldr	r1, [r4, #0]
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	0608      	lsls	r0, r1, #24
 800a678:	f853 5b04 	ldr.w	r5, [r3], #4
 800a67c:	d402      	bmi.n	800a684 <_printf_i+0xe8>
 800a67e:	0649      	lsls	r1, r1, #25
 800a680:	bf48      	it	mi
 800a682:	b2ad      	uxthmi	r5, r5
 800a684:	2f6f      	cmp	r7, #111	@ 0x6f
 800a686:	4853      	ldr	r0, [pc, #332]	@ (800a7d4 <_printf_i+0x238>)
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	bf14      	ite	ne
 800a68c:	230a      	movne	r3, #10
 800a68e:	2308      	moveq	r3, #8
 800a690:	2100      	movs	r1, #0
 800a692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a696:	6866      	ldr	r6, [r4, #4]
 800a698:	60a6      	str	r6, [r4, #8]
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	bfa2      	ittt	ge
 800a69e:	6821      	ldrge	r1, [r4, #0]
 800a6a0:	f021 0104 	bicge.w	r1, r1, #4
 800a6a4:	6021      	strge	r1, [r4, #0]
 800a6a6:	b90d      	cbnz	r5, 800a6ac <_printf_i+0x110>
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	d04b      	beq.n	800a744 <_printf_i+0x1a8>
 800a6ac:	4616      	mov	r6, r2
 800a6ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a6b6:	5dc7      	ldrb	r7, [r0, r7]
 800a6b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6bc:	462f      	mov	r7, r5
 800a6be:	42bb      	cmp	r3, r7
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	d9f4      	bls.n	800a6ae <_printf_i+0x112>
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d10b      	bne.n	800a6e0 <_printf_i+0x144>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	07df      	lsls	r7, r3, #31
 800a6cc:	d508      	bpl.n	800a6e0 <_printf_i+0x144>
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	6861      	ldr	r1, [r4, #4]
 800a6d2:	4299      	cmp	r1, r3
 800a6d4:	bfde      	ittt	le
 800a6d6:	2330      	movle	r3, #48	@ 0x30
 800a6d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6e0:	1b92      	subs	r2, r2, r6
 800a6e2:	6122      	str	r2, [r4, #16]
 800a6e4:	f8cd a000 	str.w	sl, [sp]
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	aa03      	add	r2, sp, #12
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7ff fee6 	bl	800a4c0 <_printf_common>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d14a      	bne.n	800a78e <_printf_i+0x1f2>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	b004      	add	sp, #16
 800a6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f043 0320 	orr.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	4833      	ldr	r0, [pc, #204]	@ (800a7d8 <_printf_i+0x23c>)
 800a70c:	2778      	movs	r7, #120	@ 0x78
 800a70e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	6831      	ldr	r1, [r6, #0]
 800a716:	061f      	lsls	r7, r3, #24
 800a718:	f851 5b04 	ldr.w	r5, [r1], #4
 800a71c:	d402      	bmi.n	800a724 <_printf_i+0x188>
 800a71e:	065f      	lsls	r7, r3, #25
 800a720:	bf48      	it	mi
 800a722:	b2ad      	uxthmi	r5, r5
 800a724:	6031      	str	r1, [r6, #0]
 800a726:	07d9      	lsls	r1, r3, #31
 800a728:	bf44      	itt	mi
 800a72a:	f043 0320 	orrmi.w	r3, r3, #32
 800a72e:	6023      	strmi	r3, [r4, #0]
 800a730:	b11d      	cbz	r5, 800a73a <_printf_i+0x19e>
 800a732:	2310      	movs	r3, #16
 800a734:	e7ac      	b.n	800a690 <_printf_i+0xf4>
 800a736:	4827      	ldr	r0, [pc, #156]	@ (800a7d4 <_printf_i+0x238>)
 800a738:	e7e9      	b.n	800a70e <_printf_i+0x172>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f023 0320 	bic.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	e7f6      	b.n	800a732 <_printf_i+0x196>
 800a744:	4616      	mov	r6, r2
 800a746:	e7bd      	b.n	800a6c4 <_printf_i+0x128>
 800a748:	6833      	ldr	r3, [r6, #0]
 800a74a:	6825      	ldr	r5, [r4, #0]
 800a74c:	6961      	ldr	r1, [r4, #20]
 800a74e:	1d18      	adds	r0, r3, #4
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	062e      	lsls	r6, r5, #24
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	d501      	bpl.n	800a75c <_printf_i+0x1c0>
 800a758:	6019      	str	r1, [r3, #0]
 800a75a:	e002      	b.n	800a762 <_printf_i+0x1c6>
 800a75c:	0668      	lsls	r0, r5, #25
 800a75e:	d5fb      	bpl.n	800a758 <_printf_i+0x1bc>
 800a760:	8019      	strh	r1, [r3, #0]
 800a762:	2300      	movs	r3, #0
 800a764:	6123      	str	r3, [r4, #16]
 800a766:	4616      	mov	r6, r2
 800a768:	e7bc      	b.n	800a6e4 <_printf_i+0x148>
 800a76a:	6833      	ldr	r3, [r6, #0]
 800a76c:	1d1a      	adds	r2, r3, #4
 800a76e:	6032      	str	r2, [r6, #0]
 800a770:	681e      	ldr	r6, [r3, #0]
 800a772:	6862      	ldr	r2, [r4, #4]
 800a774:	2100      	movs	r1, #0
 800a776:	4630      	mov	r0, r6
 800a778:	f7f5 fd2a 	bl	80001d0 <memchr>
 800a77c:	b108      	cbz	r0, 800a782 <_printf_i+0x1e6>
 800a77e:	1b80      	subs	r0, r0, r6
 800a780:	6060      	str	r0, [r4, #4]
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	6123      	str	r3, [r4, #16]
 800a786:	2300      	movs	r3, #0
 800a788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a78c:	e7aa      	b.n	800a6e4 <_printf_i+0x148>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	4632      	mov	r2, r6
 800a792:	4649      	mov	r1, r9
 800a794:	4640      	mov	r0, r8
 800a796:	47d0      	blx	sl
 800a798:	3001      	adds	r0, #1
 800a79a:	d0ad      	beq.n	800a6f8 <_printf_i+0x15c>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	079b      	lsls	r3, r3, #30
 800a7a0:	d413      	bmi.n	800a7ca <_printf_i+0x22e>
 800a7a2:	68e0      	ldr	r0, [r4, #12]
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	4298      	cmp	r0, r3
 800a7a8:	bfb8      	it	lt
 800a7aa:	4618      	movlt	r0, r3
 800a7ac:	e7a6      	b.n	800a6fc <_printf_i+0x160>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	47d0      	blx	sl
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d09d      	beq.n	800a6f8 <_printf_i+0x15c>
 800a7bc:	3501      	adds	r5, #1
 800a7be:	68e3      	ldr	r3, [r4, #12]
 800a7c0:	9903      	ldr	r1, [sp, #12]
 800a7c2:	1a5b      	subs	r3, r3, r1
 800a7c4:	42ab      	cmp	r3, r5
 800a7c6:	dcf2      	bgt.n	800a7ae <_printf_i+0x212>
 800a7c8:	e7eb      	b.n	800a7a2 <_printf_i+0x206>
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	f104 0619 	add.w	r6, r4, #25
 800a7d0:	e7f5      	b.n	800a7be <_printf_i+0x222>
 800a7d2:	bf00      	nop
 800a7d4:	0800ea6c 	.word	0x0800ea6c
 800a7d8:	0800ea7d 	.word	0x0800ea7d

0800a7dc <_scanf_float>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	b087      	sub	sp, #28
 800a7e2:	4617      	mov	r7, r2
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	688b      	ldr	r3, [r1, #8]
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7ee:	bf81      	itttt	hi
 800a7f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7fc:	608b      	strhi	r3, [r1, #8]
 800a7fe:	680b      	ldr	r3, [r1, #0]
 800a800:	460a      	mov	r2, r1
 800a802:	f04f 0500 	mov.w	r5, #0
 800a806:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a80a:	f842 3b1c 	str.w	r3, [r2], #28
 800a80e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a812:	4680      	mov	r8, r0
 800a814:	460c      	mov	r4, r1
 800a816:	bf98      	it	ls
 800a818:	f04f 0b00 	movls.w	fp, #0
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	4616      	mov	r6, r2
 800a820:	46aa      	mov	sl, r5
 800a822:	46a9      	mov	r9, r5
 800a824:	9502      	str	r5, [sp, #8]
 800a826:	68a2      	ldr	r2, [r4, #8]
 800a828:	b152      	cbz	r2, 800a840 <_scanf_float+0x64>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a830:	d864      	bhi.n	800a8fc <_scanf_float+0x120>
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	d83c      	bhi.n	800a8b0 <_scanf_float+0xd4>
 800a836:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a83a:	b2c8      	uxtb	r0, r1
 800a83c:	280e      	cmp	r0, #14
 800a83e:	d93a      	bls.n	800a8b6 <_scanf_float+0xda>
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	d003      	beq.n	800a84e <_scanf_float+0x72>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a852:	f1ba 0f01 	cmp.w	sl, #1
 800a856:	f200 8117 	bhi.w	800aa88 <_scanf_float+0x2ac>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	429e      	cmp	r6, r3
 800a85e:	f200 8108 	bhi.w	800aa72 <_scanf_float+0x296>
 800a862:	2001      	movs	r0, #1
 800a864:	b007      	add	sp, #28
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a86e:	2a0d      	cmp	r2, #13
 800a870:	d8e6      	bhi.n	800a840 <_scanf_float+0x64>
 800a872:	a101      	add	r1, pc, #4	@ (adr r1, 800a878 <_scanf_float+0x9c>)
 800a874:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a878:	0800a9bf 	.word	0x0800a9bf
 800a87c:	0800a841 	.word	0x0800a841
 800a880:	0800a841 	.word	0x0800a841
 800a884:	0800a841 	.word	0x0800a841
 800a888:	0800aa1f 	.word	0x0800aa1f
 800a88c:	0800a9f7 	.word	0x0800a9f7
 800a890:	0800a841 	.word	0x0800a841
 800a894:	0800a841 	.word	0x0800a841
 800a898:	0800a9cd 	.word	0x0800a9cd
 800a89c:	0800a841 	.word	0x0800a841
 800a8a0:	0800a841 	.word	0x0800a841
 800a8a4:	0800a841 	.word	0x0800a841
 800a8a8:	0800a841 	.word	0x0800a841
 800a8ac:	0800a985 	.word	0x0800a985
 800a8b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8b4:	e7db      	b.n	800a86e <_scanf_float+0x92>
 800a8b6:	290e      	cmp	r1, #14
 800a8b8:	d8c2      	bhi.n	800a840 <_scanf_float+0x64>
 800a8ba:	a001      	add	r0, pc, #4	@ (adr r0, 800a8c0 <_scanf_float+0xe4>)
 800a8bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8c0:	0800a975 	.word	0x0800a975
 800a8c4:	0800a841 	.word	0x0800a841
 800a8c8:	0800a975 	.word	0x0800a975
 800a8cc:	0800aa0b 	.word	0x0800aa0b
 800a8d0:	0800a841 	.word	0x0800a841
 800a8d4:	0800a91d 	.word	0x0800a91d
 800a8d8:	0800a95b 	.word	0x0800a95b
 800a8dc:	0800a95b 	.word	0x0800a95b
 800a8e0:	0800a95b 	.word	0x0800a95b
 800a8e4:	0800a95b 	.word	0x0800a95b
 800a8e8:	0800a95b 	.word	0x0800a95b
 800a8ec:	0800a95b 	.word	0x0800a95b
 800a8f0:	0800a95b 	.word	0x0800a95b
 800a8f4:	0800a95b 	.word	0x0800a95b
 800a8f8:	0800a95b 	.word	0x0800a95b
 800a8fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8fe:	d809      	bhi.n	800a914 <_scanf_float+0x138>
 800a900:	2b60      	cmp	r3, #96	@ 0x60
 800a902:	d8b2      	bhi.n	800a86a <_scanf_float+0x8e>
 800a904:	2b54      	cmp	r3, #84	@ 0x54
 800a906:	d07b      	beq.n	800aa00 <_scanf_float+0x224>
 800a908:	2b59      	cmp	r3, #89	@ 0x59
 800a90a:	d199      	bne.n	800a840 <_scanf_float+0x64>
 800a90c:	2d07      	cmp	r5, #7
 800a90e:	d197      	bne.n	800a840 <_scanf_float+0x64>
 800a910:	2508      	movs	r5, #8
 800a912:	e02c      	b.n	800a96e <_scanf_float+0x192>
 800a914:	2b74      	cmp	r3, #116	@ 0x74
 800a916:	d073      	beq.n	800aa00 <_scanf_float+0x224>
 800a918:	2b79      	cmp	r3, #121	@ 0x79
 800a91a:	e7f6      	b.n	800a90a <_scanf_float+0x12e>
 800a91c:	6821      	ldr	r1, [r4, #0]
 800a91e:	05c8      	lsls	r0, r1, #23
 800a920:	d51b      	bpl.n	800a95a <_scanf_float+0x17e>
 800a922:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a926:	6021      	str	r1, [r4, #0]
 800a928:	f109 0901 	add.w	r9, r9, #1
 800a92c:	f1bb 0f00 	cmp.w	fp, #0
 800a930:	d003      	beq.n	800a93a <_scanf_float+0x15e>
 800a932:	3201      	adds	r2, #1
 800a934:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a938:	60a2      	str	r2, [r4, #8]
 800a93a:	68a3      	ldr	r3, [r4, #8]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	60a3      	str	r3, [r4, #8]
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	3301      	adds	r3, #1
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3b01      	subs	r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
 800a94e:	f340 8087 	ble.w	800aa60 <_scanf_float+0x284>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	3301      	adds	r3, #1
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	e765      	b.n	800a826 <_scanf_float+0x4a>
 800a95a:	eb1a 0105 	adds.w	r1, sl, r5
 800a95e:	f47f af6f 	bne.w	800a840 <_scanf_float+0x64>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	460d      	mov	r5, r1
 800a96c:	468a      	mov	sl, r1
 800a96e:	f806 3b01 	strb.w	r3, [r6], #1
 800a972:	e7e2      	b.n	800a93a <_scanf_float+0x15e>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	0610      	lsls	r0, r2, #24
 800a978:	f57f af62 	bpl.w	800a840 <_scanf_float+0x64>
 800a97c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a980:	6022      	str	r2, [r4, #0]
 800a982:	e7f4      	b.n	800a96e <_scanf_float+0x192>
 800a984:	f1ba 0f00 	cmp.w	sl, #0
 800a988:	d10e      	bne.n	800a9a8 <_scanf_float+0x1cc>
 800a98a:	f1b9 0f00 	cmp.w	r9, #0
 800a98e:	d10e      	bne.n	800a9ae <_scanf_float+0x1d2>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a996:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a99a:	d108      	bne.n	800a9ae <_scanf_float+0x1d2>
 800a99c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	f04f 0a01 	mov.w	sl, #1
 800a9a6:	e7e2      	b.n	800a96e <_scanf_float+0x192>
 800a9a8:	f1ba 0f02 	cmp.w	sl, #2
 800a9ac:	d055      	beq.n	800aa5a <_scanf_float+0x27e>
 800a9ae:	2d01      	cmp	r5, #1
 800a9b0:	d002      	beq.n	800a9b8 <_scanf_float+0x1dc>
 800a9b2:	2d04      	cmp	r5, #4
 800a9b4:	f47f af44 	bne.w	800a840 <_scanf_float+0x64>
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	b2ed      	uxtb	r5, r5
 800a9bc:	e7d7      	b.n	800a96e <_scanf_float+0x192>
 800a9be:	f1ba 0f01 	cmp.w	sl, #1
 800a9c2:	f47f af3d 	bne.w	800a840 <_scanf_float+0x64>
 800a9c6:	f04f 0a02 	mov.w	sl, #2
 800a9ca:	e7d0      	b.n	800a96e <_scanf_float+0x192>
 800a9cc:	b97d      	cbnz	r5, 800a9ee <_scanf_float+0x212>
 800a9ce:	f1b9 0f00 	cmp.w	r9, #0
 800a9d2:	f47f af38 	bne.w	800a846 <_scanf_float+0x6a>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9e0:	f040 8108 	bne.w	800abf4 <_scanf_float+0x418>
 800a9e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9e8:	6022      	str	r2, [r4, #0]
 800a9ea:	2501      	movs	r5, #1
 800a9ec:	e7bf      	b.n	800a96e <_scanf_float+0x192>
 800a9ee:	2d03      	cmp	r5, #3
 800a9f0:	d0e2      	beq.n	800a9b8 <_scanf_float+0x1dc>
 800a9f2:	2d05      	cmp	r5, #5
 800a9f4:	e7de      	b.n	800a9b4 <_scanf_float+0x1d8>
 800a9f6:	2d02      	cmp	r5, #2
 800a9f8:	f47f af22 	bne.w	800a840 <_scanf_float+0x64>
 800a9fc:	2503      	movs	r5, #3
 800a9fe:	e7b6      	b.n	800a96e <_scanf_float+0x192>
 800aa00:	2d06      	cmp	r5, #6
 800aa02:	f47f af1d 	bne.w	800a840 <_scanf_float+0x64>
 800aa06:	2507      	movs	r5, #7
 800aa08:	e7b1      	b.n	800a96e <_scanf_float+0x192>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	0591      	lsls	r1, r2, #22
 800aa0e:	f57f af17 	bpl.w	800a840 <_scanf_float+0x64>
 800aa12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa1c:	e7a7      	b.n	800a96e <_scanf_float+0x192>
 800aa1e:	6822      	ldr	r2, [r4, #0]
 800aa20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa28:	d006      	beq.n	800aa38 <_scanf_float+0x25c>
 800aa2a:	0550      	lsls	r0, r2, #21
 800aa2c:	f57f af08 	bpl.w	800a840 <_scanf_float+0x64>
 800aa30:	f1b9 0f00 	cmp.w	r9, #0
 800aa34:	f000 80de 	beq.w	800abf4 <_scanf_float+0x418>
 800aa38:	0591      	lsls	r1, r2, #22
 800aa3a:	bf58      	it	pl
 800aa3c:	9902      	ldrpl	r1, [sp, #8]
 800aa3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa42:	bf58      	it	pl
 800aa44:	eba9 0101 	subpl.w	r1, r9, r1
 800aa48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa4c:	bf58      	it	pl
 800aa4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa52:	6022      	str	r2, [r4, #0]
 800aa54:	f04f 0900 	mov.w	r9, #0
 800aa58:	e789      	b.n	800a96e <_scanf_float+0x192>
 800aa5a:	f04f 0a03 	mov.w	sl, #3
 800aa5e:	e786      	b.n	800a96e <_scanf_float+0x192>
 800aa60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa64:	4639      	mov	r1, r7
 800aa66:	4640      	mov	r0, r8
 800aa68:	4798      	blx	r3
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f43f aedb 	beq.w	800a826 <_scanf_float+0x4a>
 800aa70:	e6e6      	b.n	800a840 <_scanf_float+0x64>
 800aa72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa7a:	463a      	mov	r2, r7
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	4798      	blx	r3
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	e6e8      	b.n	800a85a <_scanf_float+0x7e>
 800aa88:	1e6b      	subs	r3, r5, #1
 800aa8a:	2b06      	cmp	r3, #6
 800aa8c:	d824      	bhi.n	800aad8 <_scanf_float+0x2fc>
 800aa8e:	2d02      	cmp	r5, #2
 800aa90:	d836      	bhi.n	800ab00 <_scanf_float+0x324>
 800aa92:	9b01      	ldr	r3, [sp, #4]
 800aa94:	429e      	cmp	r6, r3
 800aa96:	f67f aee4 	bls.w	800a862 <_scanf_float+0x86>
 800aa9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaa2:	463a      	mov	r2, r7
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4798      	blx	r3
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	e7f0      	b.n	800aa92 <_scanf_float+0x2b6>
 800aab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aab4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aab8:	463a      	mov	r2, r7
 800aaba:	4640      	mov	r0, r8
 800aabc:	4798      	blx	r3
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aac8:	fa5f fa8a 	uxtb.w	sl, sl
 800aacc:	f1ba 0f02 	cmp.w	sl, #2
 800aad0:	d1ee      	bne.n	800aab0 <_scanf_float+0x2d4>
 800aad2:	3d03      	subs	r5, #3
 800aad4:	b2ed      	uxtb	r5, r5
 800aad6:	1b76      	subs	r6, r6, r5
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	05da      	lsls	r2, r3, #23
 800aadc:	d530      	bpl.n	800ab40 <_scanf_float+0x364>
 800aade:	055b      	lsls	r3, r3, #21
 800aae0:	d511      	bpl.n	800ab06 <_scanf_float+0x32a>
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	429e      	cmp	r6, r3
 800aae6:	f67f aebc 	bls.w	800a862 <_scanf_float+0x86>
 800aaea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaf2:	463a      	mov	r2, r7
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4798      	blx	r3
 800aaf8:	6923      	ldr	r3, [r4, #16]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	e7f0      	b.n	800aae2 <_scanf_float+0x306>
 800ab00:	46aa      	mov	sl, r5
 800ab02:	46b3      	mov	fp, r6
 800ab04:	e7de      	b.n	800aac4 <_scanf_float+0x2e8>
 800ab06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	2965      	cmp	r1, #101	@ 0x65
 800ab0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab12:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	d00c      	beq.n	800ab34 <_scanf_float+0x358>
 800ab1a:	2945      	cmp	r1, #69	@ 0x45
 800ab1c:	d00a      	beq.n	800ab34 <_scanf_float+0x358>
 800ab1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab22:	463a      	mov	r2, r7
 800ab24:	4640      	mov	r0, r8
 800ab26:	4798      	blx	r3
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	1eb5      	subs	r5, r6, #2
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab38:	463a      	mov	r2, r7
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4798      	blx	r3
 800ab3e:	462e      	mov	r6, r5
 800ab40:	6822      	ldr	r2, [r4, #0]
 800ab42:	f012 0210 	ands.w	r2, r2, #16
 800ab46:	d001      	beq.n	800ab4c <_scanf_float+0x370>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e68b      	b.n	800a864 <_scanf_float+0x88>
 800ab4c:	7032      	strb	r2, [r6, #0]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab58:	d11c      	bne.n	800ab94 <_scanf_float+0x3b8>
 800ab5a:	9b02      	ldr	r3, [sp, #8]
 800ab5c:	454b      	cmp	r3, r9
 800ab5e:	eba3 0209 	sub.w	r2, r3, r9
 800ab62:	d123      	bne.n	800abac <_scanf_float+0x3d0>
 800ab64:	9901      	ldr	r1, [sp, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	4640      	mov	r0, r8
 800ab6a:	f002 fd59 	bl	800d620 <_strtod_r>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	6821      	ldr	r1, [r4, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f011 0f02 	tst.w	r1, #2
 800ab78:	ec57 6b10 	vmov	r6, r7, d0
 800ab7c:	f103 0204 	add.w	r2, r3, #4
 800ab80:	d01f      	beq.n	800abc2 <_scanf_float+0x3e6>
 800ab82:	9903      	ldr	r1, [sp, #12]
 800ab84:	600a      	str	r2, [r1, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	e9c3 6700 	strd	r6, r7, [r3]
 800ab8c:	68e3      	ldr	r3, [r4, #12]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60e3      	str	r3, [r4, #12]
 800ab92:	e7d9      	b.n	800ab48 <_scanf_float+0x36c>
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0e4      	beq.n	800ab64 <_scanf_float+0x388>
 800ab9a:	9905      	ldr	r1, [sp, #20]
 800ab9c:	230a      	movs	r3, #10
 800ab9e:	3101      	adds	r1, #1
 800aba0:	4640      	mov	r0, r8
 800aba2:	f7ff f975 	bl	8009e90 <_strtol_r>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	9e05      	ldr	r6, [sp, #20]
 800abaa:	1ac2      	subs	r2, r0, r3
 800abac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800abb0:	429e      	cmp	r6, r3
 800abb2:	bf28      	it	cs
 800abb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800abb8:	4910      	ldr	r1, [pc, #64]	@ (800abfc <_scanf_float+0x420>)
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 f9b6 	bl	800af2c <siprintf>
 800abc0:	e7d0      	b.n	800ab64 <_scanf_float+0x388>
 800abc2:	f011 0f04 	tst.w	r1, #4
 800abc6:	9903      	ldr	r1, [sp, #12]
 800abc8:	600a      	str	r2, [r1, #0]
 800abca:	d1dc      	bne.n	800ab86 <_scanf_float+0x3aa>
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	4632      	mov	r2, r6
 800abd0:	463b      	mov	r3, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 ffa9 	bl	8000b2c <__aeabi_dcmpun>
 800abda:	b128      	cbz	r0, 800abe8 <_scanf_float+0x40c>
 800abdc:	4808      	ldr	r0, [pc, #32]	@ (800ac00 <_scanf_float+0x424>)
 800abde:	f000 fb19 	bl	800b214 <nanf>
 800abe2:	ed85 0a00 	vstr	s0, [r5]
 800abe6:	e7d1      	b.n	800ab8c <_scanf_float+0x3b0>
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 fffc 	bl	8000be8 <__aeabi_d2f>
 800abf0:	6028      	str	r0, [r5, #0]
 800abf2:	e7cb      	b.n	800ab8c <_scanf_float+0x3b0>
 800abf4:	f04f 0900 	mov.w	r9, #0
 800abf8:	e629      	b.n	800a84e <_scanf_float+0x72>
 800abfa:	bf00      	nop
 800abfc:	0800ea8e 	.word	0x0800ea8e
 800ac00:	0800ed24 	.word	0x0800ed24

0800ac04 <__sflush_r>:
 800ac04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0c:	0716      	lsls	r6, r2, #28
 800ac0e:	4605      	mov	r5, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	d454      	bmi.n	800acbe <__sflush_r+0xba>
 800ac14:	684b      	ldr	r3, [r1, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dc02      	bgt.n	800ac20 <__sflush_r+0x1c>
 800ac1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd48      	ble.n	800acb2 <__sflush_r+0xae>
 800ac20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	d045      	beq.n	800acb2 <__sflush_r+0xae>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac2c:	682f      	ldr	r7, [r5, #0]
 800ac2e:	6a21      	ldr	r1, [r4, #32]
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	d030      	beq.n	800ac96 <__sflush_r+0x92>
 800ac34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	0759      	lsls	r1, r3, #29
 800ac3a:	d505      	bpl.n	800ac48 <__sflush_r+0x44>
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac42:	b10b      	cbz	r3, 800ac48 <__sflush_r+0x44>
 800ac44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	2300      	movs	r3, #0
 800ac4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac4c:	6a21      	ldr	r1, [r4, #32]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b0      	blx	r6
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	d106      	bne.n	800ac66 <__sflush_r+0x62>
 800ac58:	6829      	ldr	r1, [r5, #0]
 800ac5a:	291d      	cmp	r1, #29
 800ac5c:	d82b      	bhi.n	800acb6 <__sflush_r+0xb2>
 800ac5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ad08 <__sflush_r+0x104>)
 800ac60:	410a      	asrs	r2, r1
 800ac62:	07d6      	lsls	r6, r2, #31
 800ac64:	d427      	bmi.n	800acb6 <__sflush_r+0xb2>
 800ac66:	2200      	movs	r2, #0
 800ac68:	6062      	str	r2, [r4, #4]
 800ac6a:	04d9      	lsls	r1, r3, #19
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	6022      	str	r2, [r4, #0]
 800ac70:	d504      	bpl.n	800ac7c <__sflush_r+0x78>
 800ac72:	1c42      	adds	r2, r0, #1
 800ac74:	d101      	bne.n	800ac7a <__sflush_r+0x76>
 800ac76:	682b      	ldr	r3, [r5, #0]
 800ac78:	b903      	cbnz	r3, 800ac7c <__sflush_r+0x78>
 800ac7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	b1b9      	cbz	r1, 800acb2 <__sflush_r+0xae>
 800ac82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac86:	4299      	cmp	r1, r3
 800ac88:	d002      	beq.n	800ac90 <__sflush_r+0x8c>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f001 f914 	bl	800beb8 <_free_r>
 800ac90:	2300      	movs	r3, #0
 800ac92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac94:	e00d      	b.n	800acb2 <__sflush_r+0xae>
 800ac96:	2301      	movs	r3, #1
 800ac98:	4628      	mov	r0, r5
 800ac9a:	47b0      	blx	r6
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	1c50      	adds	r0, r2, #1
 800aca0:	d1c9      	bne.n	800ac36 <__sflush_r+0x32>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0c6      	beq.n	800ac36 <__sflush_r+0x32>
 800aca8:	2b1d      	cmp	r3, #29
 800acaa:	d001      	beq.n	800acb0 <__sflush_r+0xac>
 800acac:	2b16      	cmp	r3, #22
 800acae:	d11e      	bne.n	800acee <__sflush_r+0xea>
 800acb0:	602f      	str	r7, [r5, #0]
 800acb2:	2000      	movs	r0, #0
 800acb4:	e022      	b.n	800acfc <__sflush_r+0xf8>
 800acb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acba:	b21b      	sxth	r3, r3
 800acbc:	e01b      	b.n	800acf6 <__sflush_r+0xf2>
 800acbe:	690f      	ldr	r7, [r1, #16]
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	d0f6      	beq.n	800acb2 <__sflush_r+0xae>
 800acc4:	0793      	lsls	r3, r2, #30
 800acc6:	680e      	ldr	r6, [r1, #0]
 800acc8:	bf08      	it	eq
 800acca:	694b      	ldreq	r3, [r1, #20]
 800accc:	600f      	str	r7, [r1, #0]
 800acce:	bf18      	it	ne
 800acd0:	2300      	movne	r3, #0
 800acd2:	eba6 0807 	sub.w	r8, r6, r7
 800acd6:	608b      	str	r3, [r1, #8]
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	dde9      	ble.n	800acb2 <__sflush_r+0xae>
 800acde:	6a21      	ldr	r1, [r4, #32]
 800ace0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ace2:	4643      	mov	r3, r8
 800ace4:	463a      	mov	r2, r7
 800ace6:	4628      	mov	r0, r5
 800ace8:	47b0      	blx	r6
 800acea:	2800      	cmp	r0, #0
 800acec:	dc08      	bgt.n	800ad00 <__sflush_r+0xfc>
 800acee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	4407      	add	r7, r0
 800ad02:	eba8 0800 	sub.w	r8, r8, r0
 800ad06:	e7e7      	b.n	800acd8 <__sflush_r+0xd4>
 800ad08:	dfbffffe 	.word	0xdfbffffe

0800ad0c <_fflush_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	690b      	ldr	r3, [r1, #16]
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b913      	cbnz	r3, 800ad1c <_fflush_r+0x10>
 800ad16:	2500      	movs	r5, #0
 800ad18:	4628      	mov	r0, r5
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	b118      	cbz	r0, 800ad26 <_fflush_r+0x1a>
 800ad1e:	6a03      	ldr	r3, [r0, #32]
 800ad20:	b90b      	cbnz	r3, 800ad26 <_fflush_r+0x1a>
 800ad22:	f000 f8bb 	bl	800ae9c <__sinit>
 800ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0f3      	beq.n	800ad16 <_fflush_r+0xa>
 800ad2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad30:	07d0      	lsls	r0, r2, #31
 800ad32:	d404      	bmi.n	800ad3e <_fflush_r+0x32>
 800ad34:	0599      	lsls	r1, r3, #22
 800ad36:	d402      	bmi.n	800ad3e <_fflush_r+0x32>
 800ad38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad3a:	f000 fa52 	bl	800b1e2 <__retarget_lock_acquire_recursive>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	4621      	mov	r1, r4
 800ad42:	f7ff ff5f 	bl	800ac04 <__sflush_r>
 800ad46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad48:	07da      	lsls	r2, r3, #31
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	d4e4      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	059b      	lsls	r3, r3, #22
 800ad52:	d4e1      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad56:	f000 fa45 	bl	800b1e4 <__retarget_lock_release_recursive>
 800ad5a:	e7dd      	b.n	800ad18 <_fflush_r+0xc>

0800ad5c <fflush>:
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	b920      	cbnz	r0, 800ad6a <fflush+0xe>
 800ad60:	4a04      	ldr	r2, [pc, #16]	@ (800ad74 <fflush+0x18>)
 800ad62:	4905      	ldr	r1, [pc, #20]	@ (800ad78 <fflush+0x1c>)
 800ad64:	4805      	ldr	r0, [pc, #20]	@ (800ad7c <fflush+0x20>)
 800ad66:	f000 b8b1 	b.w	800aecc <_fwalk_sglue>
 800ad6a:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <fflush+0x24>)
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	f7ff bfcd 	b.w	800ad0c <_fflush_r>
 800ad72:	bf00      	nop
 800ad74:	20000024 	.word	0x20000024
 800ad78:	0800ad0d 	.word	0x0800ad0d
 800ad7c:	20000034 	.word	0x20000034
 800ad80:	20000030 	.word	0x20000030

0800ad84 <std>:
 800ad84:	2300      	movs	r3, #0
 800ad86:	b510      	push	{r4, lr}
 800ad88:	4604      	mov	r4, r0
 800ad8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad92:	6083      	str	r3, [r0, #8]
 800ad94:	8181      	strh	r1, [r0, #12]
 800ad96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad98:	81c2      	strh	r2, [r0, #14]
 800ad9a:	6183      	str	r3, [r0, #24]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	2208      	movs	r2, #8
 800ada0:	305c      	adds	r0, #92	@ 0x5c
 800ada2:	f000 f926 	bl	800aff2 <memset>
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x58>)
 800ada8:	6263      	str	r3, [r4, #36]	@ 0x24
 800adaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <std+0x5c>)
 800adac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800adae:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <std+0x60>)
 800adb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800adb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <std+0x64>)
 800adb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800adb6:	4b0d      	ldr	r3, [pc, #52]	@ (800adec <std+0x68>)
 800adb8:	6224      	str	r4, [r4, #32]
 800adba:	429c      	cmp	r4, r3
 800adbc:	d006      	beq.n	800adcc <std+0x48>
 800adbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adc2:	4294      	cmp	r4, r2
 800adc4:	d002      	beq.n	800adcc <std+0x48>
 800adc6:	33d0      	adds	r3, #208	@ 0xd0
 800adc8:	429c      	cmp	r4, r3
 800adca:	d105      	bne.n	800add8 <std+0x54>
 800adcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add4:	f000 ba04 	b.w	800b1e0 <__retarget_lock_init_recursive>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	bf00      	nop
 800addc:	0800af6d 	.word	0x0800af6d
 800ade0:	0800af8f 	.word	0x0800af8f
 800ade4:	0800afc7 	.word	0x0800afc7
 800ade8:	0800afeb 	.word	0x0800afeb
 800adec:	20006c8c 	.word	0x20006c8c

0800adf0 <stdio_exit_handler>:
 800adf0:	4a02      	ldr	r2, [pc, #8]	@ (800adfc <stdio_exit_handler+0xc>)
 800adf2:	4903      	ldr	r1, [pc, #12]	@ (800ae00 <stdio_exit_handler+0x10>)
 800adf4:	4803      	ldr	r0, [pc, #12]	@ (800ae04 <stdio_exit_handler+0x14>)
 800adf6:	f000 b869 	b.w	800aecc <_fwalk_sglue>
 800adfa:	bf00      	nop
 800adfc:	20000024 	.word	0x20000024
 800ae00:	0800ad0d 	.word	0x0800ad0d
 800ae04:	20000034 	.word	0x20000034

0800ae08 <cleanup_stdio>:
 800ae08:	6841      	ldr	r1, [r0, #4]
 800ae0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae3c <cleanup_stdio+0x34>)
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	4604      	mov	r4, r0
 800ae12:	d001      	beq.n	800ae18 <cleanup_stdio+0x10>
 800ae14:	f7ff ff7a 	bl	800ad0c <_fflush_r>
 800ae18:	68a1      	ldr	r1, [r4, #8]
 800ae1a:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <cleanup_stdio+0x38>)
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	d002      	beq.n	800ae26 <cleanup_stdio+0x1e>
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7ff ff73 	bl	800ad0c <_fflush_r>
 800ae26:	68e1      	ldr	r1, [r4, #12]
 800ae28:	4b06      	ldr	r3, [pc, #24]	@ (800ae44 <cleanup_stdio+0x3c>)
 800ae2a:	4299      	cmp	r1, r3
 800ae2c:	d004      	beq.n	800ae38 <cleanup_stdio+0x30>
 800ae2e:	4620      	mov	r0, r4
 800ae30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae34:	f7ff bf6a 	b.w	800ad0c <_fflush_r>
 800ae38:	bd10      	pop	{r4, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20006c8c 	.word	0x20006c8c
 800ae40:	20006cf4 	.word	0x20006cf4
 800ae44:	20006d5c 	.word	0x20006d5c

0800ae48 <global_stdio_init.part.0>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <global_stdio_init.part.0+0x30>)
 800ae4c:	4c0b      	ldr	r4, [pc, #44]	@ (800ae7c <global_stdio_init.part.0+0x34>)
 800ae4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae80 <global_stdio_init.part.0+0x38>)
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	4620      	mov	r0, r4
 800ae54:	2200      	movs	r2, #0
 800ae56:	2104      	movs	r1, #4
 800ae58:	f7ff ff94 	bl	800ad84 <std>
 800ae5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae60:	2201      	movs	r2, #1
 800ae62:	2109      	movs	r1, #9
 800ae64:	f7ff ff8e 	bl	800ad84 <std>
 800ae68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae72:	2112      	movs	r1, #18
 800ae74:	f7ff bf86 	b.w	800ad84 <std>
 800ae78:	20006dc4 	.word	0x20006dc4
 800ae7c:	20006c8c 	.word	0x20006c8c
 800ae80:	0800adf1 	.word	0x0800adf1

0800ae84 <__sfp_lock_acquire>:
 800ae84:	4801      	ldr	r0, [pc, #4]	@ (800ae8c <__sfp_lock_acquire+0x8>)
 800ae86:	f000 b9ac 	b.w	800b1e2 <__retarget_lock_acquire_recursive>
 800ae8a:	bf00      	nop
 800ae8c:	20006dcd 	.word	0x20006dcd

0800ae90 <__sfp_lock_release>:
 800ae90:	4801      	ldr	r0, [pc, #4]	@ (800ae98 <__sfp_lock_release+0x8>)
 800ae92:	f000 b9a7 	b.w	800b1e4 <__retarget_lock_release_recursive>
 800ae96:	bf00      	nop
 800ae98:	20006dcd 	.word	0x20006dcd

0800ae9c <__sinit>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	f7ff fff0 	bl	800ae84 <__sfp_lock_acquire>
 800aea4:	6a23      	ldr	r3, [r4, #32]
 800aea6:	b11b      	cbz	r3, 800aeb0 <__sinit+0x14>
 800aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeac:	f7ff bff0 	b.w	800ae90 <__sfp_lock_release>
 800aeb0:	4b04      	ldr	r3, [pc, #16]	@ (800aec4 <__sinit+0x28>)
 800aeb2:	6223      	str	r3, [r4, #32]
 800aeb4:	4b04      	ldr	r3, [pc, #16]	@ (800aec8 <__sinit+0x2c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1f5      	bne.n	800aea8 <__sinit+0xc>
 800aebc:	f7ff ffc4 	bl	800ae48 <global_stdio_init.part.0>
 800aec0:	e7f2      	b.n	800aea8 <__sinit+0xc>
 800aec2:	bf00      	nop
 800aec4:	0800ae09 	.word	0x0800ae09
 800aec8:	20006dc4 	.word	0x20006dc4

0800aecc <_fwalk_sglue>:
 800aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4607      	mov	r7, r0
 800aed2:	4688      	mov	r8, r1
 800aed4:	4614      	mov	r4, r2
 800aed6:	2600      	movs	r6, #0
 800aed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aedc:	f1b9 0901 	subs.w	r9, r9, #1
 800aee0:	d505      	bpl.n	800aeee <_fwalk_sglue+0x22>
 800aee2:	6824      	ldr	r4, [r4, #0]
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d1f7      	bne.n	800aed8 <_fwalk_sglue+0xc>
 800aee8:	4630      	mov	r0, r6
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	89ab      	ldrh	r3, [r5, #12]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d907      	bls.n	800af04 <_fwalk_sglue+0x38>
 800aef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aef8:	3301      	adds	r3, #1
 800aefa:	d003      	beq.n	800af04 <_fwalk_sglue+0x38>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4638      	mov	r0, r7
 800af00:	47c0      	blx	r8
 800af02:	4306      	orrs	r6, r0
 800af04:	3568      	adds	r5, #104	@ 0x68
 800af06:	e7e9      	b.n	800aedc <_fwalk_sglue+0x10>

0800af08 <iprintf>:
 800af08:	b40f      	push	{r0, r1, r2, r3}
 800af0a:	b507      	push	{r0, r1, r2, lr}
 800af0c:	4906      	ldr	r1, [pc, #24]	@ (800af28 <iprintf+0x20>)
 800af0e:	ab04      	add	r3, sp, #16
 800af10:	6808      	ldr	r0, [r1, #0]
 800af12:	f853 2b04 	ldr.w	r2, [r3], #4
 800af16:	6881      	ldr	r1, [r0, #8]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	f002 fd09 	bl	800d930 <_vfiprintf_r>
 800af1e:	b003      	add	sp, #12
 800af20:	f85d eb04 	ldr.w	lr, [sp], #4
 800af24:	b004      	add	sp, #16
 800af26:	4770      	bx	lr
 800af28:	20000030 	.word	0x20000030

0800af2c <siprintf>:
 800af2c:	b40e      	push	{r1, r2, r3}
 800af2e:	b500      	push	{lr}
 800af30:	b09c      	sub	sp, #112	@ 0x70
 800af32:	ab1d      	add	r3, sp, #116	@ 0x74
 800af34:	9002      	str	r0, [sp, #8]
 800af36:	9006      	str	r0, [sp, #24]
 800af38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af3c:	4809      	ldr	r0, [pc, #36]	@ (800af64 <siprintf+0x38>)
 800af3e:	9107      	str	r1, [sp, #28]
 800af40:	9104      	str	r1, [sp, #16]
 800af42:	4909      	ldr	r1, [pc, #36]	@ (800af68 <siprintf+0x3c>)
 800af44:	f853 2b04 	ldr.w	r2, [r3], #4
 800af48:	9105      	str	r1, [sp, #20]
 800af4a:	6800      	ldr	r0, [r0, #0]
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	a902      	add	r1, sp, #8
 800af50:	f002 fbc8 	bl	800d6e4 <_svfiprintf_r>
 800af54:	9b02      	ldr	r3, [sp, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	b01c      	add	sp, #112	@ 0x70
 800af5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af60:	b003      	add	sp, #12
 800af62:	4770      	bx	lr
 800af64:	20000030 	.word	0x20000030
 800af68:	ffff0208 	.word	0xffff0208

0800af6c <__sread>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	460c      	mov	r4, r1
 800af70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af74:	f000 f8e6 	bl	800b144 <_read_r>
 800af78:	2800      	cmp	r0, #0
 800af7a:	bfab      	itete	ge
 800af7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af7e:	89a3      	ldrhlt	r3, [r4, #12]
 800af80:	181b      	addge	r3, r3, r0
 800af82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af86:	bfac      	ite	ge
 800af88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af8a:	81a3      	strhlt	r3, [r4, #12]
 800af8c:	bd10      	pop	{r4, pc}

0800af8e <__swrite>:
 800af8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	461f      	mov	r7, r3
 800af94:	898b      	ldrh	r3, [r1, #12]
 800af96:	05db      	lsls	r3, r3, #23
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	4616      	mov	r6, r2
 800af9e:	d505      	bpl.n	800afac <__swrite+0x1e>
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2302      	movs	r3, #2
 800afa6:	2200      	movs	r2, #0
 800afa8:	f000 f8ba 	bl	800b120 <_lseek_r>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	4628      	mov	r0, r5
 800afbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	f000 b8d1 	b.w	800b168 <_write_r>

0800afc6 <__sseek>:
 800afc6:	b510      	push	{r4, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afce:	f000 f8a7 	bl	800b120 <_lseek_r>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	bf15      	itete	ne
 800afd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afe2:	81a3      	strheq	r3, [r4, #12]
 800afe4:	bf18      	it	ne
 800afe6:	81a3      	strhne	r3, [r4, #12]
 800afe8:	bd10      	pop	{r4, pc}

0800afea <__sclose>:
 800afea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afee:	f000 b831 	b.w	800b054 <_close_r>

0800aff2 <memset>:
 800aff2:	4402      	add	r2, r0
 800aff4:	4603      	mov	r3, r0
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d100      	bne.n	800affc <memset+0xa>
 800affa:	4770      	bx	lr
 800affc:	f803 1b01 	strb.w	r1, [r3], #1
 800b000:	e7f9      	b.n	800aff6 <memset+0x4>

0800b002 <strncmp>:
 800b002:	b510      	push	{r4, lr}
 800b004:	b16a      	cbz	r2, 800b022 <strncmp+0x20>
 800b006:	3901      	subs	r1, #1
 800b008:	1884      	adds	r4, r0, r2
 800b00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b012:	429a      	cmp	r2, r3
 800b014:	d103      	bne.n	800b01e <strncmp+0x1c>
 800b016:	42a0      	cmp	r0, r4
 800b018:	d001      	beq.n	800b01e <strncmp+0x1c>
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	d1f5      	bne.n	800b00a <strncmp+0x8>
 800b01e:	1ad0      	subs	r0, r2, r3
 800b020:	bd10      	pop	{r4, pc}
 800b022:	4610      	mov	r0, r2
 800b024:	e7fc      	b.n	800b020 <strncmp+0x1e>

0800b026 <strncpy>:
 800b026:	b510      	push	{r4, lr}
 800b028:	3901      	subs	r1, #1
 800b02a:	4603      	mov	r3, r0
 800b02c:	b132      	cbz	r2, 800b03c <strncpy+0x16>
 800b02e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b032:	f803 4b01 	strb.w	r4, [r3], #1
 800b036:	3a01      	subs	r2, #1
 800b038:	2c00      	cmp	r4, #0
 800b03a:	d1f7      	bne.n	800b02c <strncpy+0x6>
 800b03c:	441a      	add	r2, r3
 800b03e:	2100      	movs	r1, #0
 800b040:	4293      	cmp	r3, r2
 800b042:	d100      	bne.n	800b046 <strncpy+0x20>
 800b044:	bd10      	pop	{r4, pc}
 800b046:	f803 1b01 	strb.w	r1, [r3], #1
 800b04a:	e7f9      	b.n	800b040 <strncpy+0x1a>

0800b04c <_localeconv_r>:
 800b04c:	4800      	ldr	r0, [pc, #0]	@ (800b050 <_localeconv_r+0x4>)
 800b04e:	4770      	bx	lr
 800b050:	20000170 	.word	0x20000170

0800b054 <_close_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_close_r+0x1c>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f7f6 ff3c 	bl	8001edc <_close>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_close_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_close_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20006dc8 	.word	0x20006dc8

0800b074 <_reclaim_reent>:
 800b074:	4b29      	ldr	r3, [pc, #164]	@ (800b11c <_reclaim_reent+0xa8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4283      	cmp	r3, r0
 800b07a:	b570      	push	{r4, r5, r6, lr}
 800b07c:	4604      	mov	r4, r0
 800b07e:	d04b      	beq.n	800b118 <_reclaim_reent+0xa4>
 800b080:	69c3      	ldr	r3, [r0, #28]
 800b082:	b1ab      	cbz	r3, 800b0b0 <_reclaim_reent+0x3c>
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	b16b      	cbz	r3, 800b0a4 <_reclaim_reent+0x30>
 800b088:	2500      	movs	r5, #0
 800b08a:	69e3      	ldr	r3, [r4, #28]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	5959      	ldr	r1, [r3, r5]
 800b090:	2900      	cmp	r1, #0
 800b092:	d13b      	bne.n	800b10c <_reclaim_reent+0x98>
 800b094:	3504      	adds	r5, #4
 800b096:	2d80      	cmp	r5, #128	@ 0x80
 800b098:	d1f7      	bne.n	800b08a <_reclaim_reent+0x16>
 800b09a:	69e3      	ldr	r3, [r4, #28]
 800b09c:	4620      	mov	r0, r4
 800b09e:	68d9      	ldr	r1, [r3, #12]
 800b0a0:	f000 ff0a 	bl	800beb8 <_free_r>
 800b0a4:	69e3      	ldr	r3, [r4, #28]
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	b111      	cbz	r1, 800b0b0 <_reclaim_reent+0x3c>
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 ff04 	bl	800beb8 <_free_r>
 800b0b0:	6961      	ldr	r1, [r4, #20]
 800b0b2:	b111      	cbz	r1, 800b0ba <_reclaim_reent+0x46>
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f000 feff 	bl	800beb8 <_free_r>
 800b0ba:	69e1      	ldr	r1, [r4, #28]
 800b0bc:	b111      	cbz	r1, 800b0c4 <_reclaim_reent+0x50>
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fefa 	bl	800beb8 <_free_r>
 800b0c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b0c6:	b111      	cbz	r1, 800b0ce <_reclaim_reent+0x5a>
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fef5 	bl	800beb8 <_free_r>
 800b0ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0d0:	b111      	cbz	r1, 800b0d8 <_reclaim_reent+0x64>
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fef0 	bl	800beb8 <_free_r>
 800b0d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b0da:	b111      	cbz	r1, 800b0e2 <_reclaim_reent+0x6e>
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 feeb 	bl	800beb8 <_free_r>
 800b0e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b0e4:	b111      	cbz	r1, 800b0ec <_reclaim_reent+0x78>
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 fee6 	bl	800beb8 <_free_r>
 800b0ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b0ee:	b111      	cbz	r1, 800b0f6 <_reclaim_reent+0x82>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fee1 	bl	800beb8 <_free_r>
 800b0f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b0f8:	b111      	cbz	r1, 800b100 <_reclaim_reent+0x8c>
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fedc 	bl	800beb8 <_free_r>
 800b100:	6a23      	ldr	r3, [r4, #32]
 800b102:	b14b      	cbz	r3, 800b118 <_reclaim_reent+0xa4>
 800b104:	4620      	mov	r0, r4
 800b106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b10a:	4718      	bx	r3
 800b10c:	680e      	ldr	r6, [r1, #0]
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 fed2 	bl	800beb8 <_free_r>
 800b114:	4631      	mov	r1, r6
 800b116:	e7bb      	b.n	800b090 <_reclaim_reent+0x1c>
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	bf00      	nop
 800b11c:	20000030 	.word	0x20000030

0800b120 <_lseek_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	@ (800b140 <_lseek_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f6 fefb 	bl	8001f2a <_lseek>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_lseek_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_lseek_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20006dc8 	.word	0x20006dc8

0800b144 <_read_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d07      	ldr	r5, [pc, #28]	@ (800b164 <_read_r+0x20>)
 800b148:	4604      	mov	r4, r0
 800b14a:	4608      	mov	r0, r1
 800b14c:	4611      	mov	r1, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	602a      	str	r2, [r5, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	f7f6 fea5 	bl	8001ea2 <_read>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_read_r+0x1e>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_read_r+0x1e>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	20006dc8 	.word	0x20006dc8

0800b168 <_write_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	@ (800b188 <_write_r+0x20>)
 800b16c:	4604      	mov	r4, r0
 800b16e:	4608      	mov	r0, r1
 800b170:	4611      	mov	r1, r2
 800b172:	2200      	movs	r2, #0
 800b174:	602a      	str	r2, [r5, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	f7f6 f8e6 	bl	8001348 <_write>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_write_r+0x1e>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_write_r+0x1e>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	20006dc8 	.word	0x20006dc8

0800b18c <__errno>:
 800b18c:	4b01      	ldr	r3, [pc, #4]	@ (800b194 <__errno+0x8>)
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20000030 	.word	0x20000030

0800b198 <__libc_init_array>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4d0d      	ldr	r5, [pc, #52]	@ (800b1d0 <__libc_init_array+0x38>)
 800b19c:	4c0d      	ldr	r4, [pc, #52]	@ (800b1d4 <__libc_init_array+0x3c>)
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	42a6      	cmp	r6, r4
 800b1a6:	d109      	bne.n	800b1bc <__libc_init_array+0x24>
 800b1a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b1d8 <__libc_init_array+0x40>)
 800b1aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b1dc <__libc_init_array+0x44>)
 800b1ac:	f003 fa42 	bl	800e634 <_init>
 800b1b0:	1b64      	subs	r4, r4, r5
 800b1b2:	10a4      	asrs	r4, r4, #2
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	42a6      	cmp	r6, r4
 800b1b8:	d105      	bne.n	800b1c6 <__libc_init_array+0x2e>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c0:	4798      	blx	r3
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	e7ee      	b.n	800b1a4 <__libc_init_array+0xc>
 800b1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ca:	4798      	blx	r3
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	e7f2      	b.n	800b1b6 <__libc_init_array+0x1e>
 800b1d0:	0800ed90 	.word	0x0800ed90
 800b1d4:	0800ed90 	.word	0x0800ed90
 800b1d8:	0800ed90 	.word	0x0800ed90
 800b1dc:	0800ed94 	.word	0x0800ed94

0800b1e0 <__retarget_lock_init_recursive>:
 800b1e0:	4770      	bx	lr

0800b1e2 <__retarget_lock_acquire_recursive>:
 800b1e2:	4770      	bx	lr

0800b1e4 <__retarget_lock_release_recursive>:
 800b1e4:	4770      	bx	lr

0800b1e6 <strcpy>:
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ec:	f803 2b01 	strb.w	r2, [r3], #1
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	d1f9      	bne.n	800b1e8 <strcpy+0x2>
 800b1f4:	4770      	bx	lr

0800b1f6 <memcpy>:
 800b1f6:	440a      	add	r2, r1
 800b1f8:	4291      	cmp	r1, r2
 800b1fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1fe:	d100      	bne.n	800b202 <memcpy+0xc>
 800b200:	4770      	bx	lr
 800b202:	b510      	push	{r4, lr}
 800b204:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20c:	4291      	cmp	r1, r2
 800b20e:	d1f9      	bne.n	800b204 <memcpy+0xe>
 800b210:	bd10      	pop	{r4, pc}
	...

0800b214 <nanf>:
 800b214:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b21c <nanf+0x8>
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	7fc00000 	.word	0x7fc00000

0800b220 <quorem>:
 800b220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	6903      	ldr	r3, [r0, #16]
 800b226:	690c      	ldr	r4, [r1, #16]
 800b228:	42a3      	cmp	r3, r4
 800b22a:	4607      	mov	r7, r0
 800b22c:	db7e      	blt.n	800b32c <quorem+0x10c>
 800b22e:	3c01      	subs	r4, #1
 800b230:	f101 0814 	add.w	r8, r1, #20
 800b234:	00a3      	lsls	r3, r4, #2
 800b236:	f100 0514 	add.w	r5, r0, #20
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b24a:	3301      	adds	r3, #1
 800b24c:	429a      	cmp	r2, r3
 800b24e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b252:	fbb2 f6f3 	udiv	r6, r2, r3
 800b256:	d32e      	bcc.n	800b2b6 <quorem+0x96>
 800b258:	f04f 0a00 	mov.w	sl, #0
 800b25c:	46c4      	mov	ip, r8
 800b25e:	46ae      	mov	lr, r5
 800b260:	46d3      	mov	fp, sl
 800b262:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b266:	b298      	uxth	r0, r3
 800b268:	fb06 a000 	mla	r0, r6, r0, sl
 800b26c:	0c02      	lsrs	r2, r0, #16
 800b26e:	0c1b      	lsrs	r3, r3, #16
 800b270:	fb06 2303 	mla	r3, r6, r3, r2
 800b274:	f8de 2000 	ldr.w	r2, [lr]
 800b278:	b280      	uxth	r0, r0
 800b27a:	b292      	uxth	r2, r2
 800b27c:	1a12      	subs	r2, r2, r0
 800b27e:	445a      	add	r2, fp
 800b280:	f8de 0000 	ldr.w	r0, [lr]
 800b284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b288:	b29b      	uxth	r3, r3
 800b28a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b28e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b292:	b292      	uxth	r2, r2
 800b294:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b298:	45e1      	cmp	r9, ip
 800b29a:	f84e 2b04 	str.w	r2, [lr], #4
 800b29e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2a2:	d2de      	bcs.n	800b262 <quorem+0x42>
 800b2a4:	9b00      	ldr	r3, [sp, #0]
 800b2a6:	58eb      	ldr	r3, [r5, r3]
 800b2a8:	b92b      	cbnz	r3, 800b2b6 <quorem+0x96>
 800b2aa:	9b01      	ldr	r3, [sp, #4]
 800b2ac:	3b04      	subs	r3, #4
 800b2ae:	429d      	cmp	r5, r3
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	d32f      	bcc.n	800b314 <quorem+0xf4>
 800b2b4:	613c      	str	r4, [r7, #16]
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f001 f9c2 	bl	800c640 <__mcmp>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	db25      	blt.n	800b30c <quorem+0xec>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2c8:	f8d1 c000 	ldr.w	ip, [r1]
 800b2cc:	fa1f fe82 	uxth.w	lr, r2
 800b2d0:	fa1f f38c 	uxth.w	r3, ip
 800b2d4:	eba3 030e 	sub.w	r3, r3, lr
 800b2d8:	4403      	add	r3, r0
 800b2da:	0c12      	lsrs	r2, r2, #16
 800b2dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b2e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2ea:	45c1      	cmp	r9, r8
 800b2ec:	f841 3b04 	str.w	r3, [r1], #4
 800b2f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2f4:	d2e6      	bcs.n	800b2c4 <quorem+0xa4>
 800b2f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fe:	b922      	cbnz	r2, 800b30a <quorem+0xea>
 800b300:	3b04      	subs	r3, #4
 800b302:	429d      	cmp	r5, r3
 800b304:	461a      	mov	r2, r3
 800b306:	d30b      	bcc.n	800b320 <quorem+0x100>
 800b308:	613c      	str	r4, [r7, #16]
 800b30a:	3601      	adds	r6, #1
 800b30c:	4630      	mov	r0, r6
 800b30e:	b003      	add	sp, #12
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	3b04      	subs	r3, #4
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d1cb      	bne.n	800b2b4 <quorem+0x94>
 800b31c:	3c01      	subs	r4, #1
 800b31e:	e7c6      	b.n	800b2ae <quorem+0x8e>
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	3b04      	subs	r3, #4
 800b324:	2a00      	cmp	r2, #0
 800b326:	d1ef      	bne.n	800b308 <quorem+0xe8>
 800b328:	3c01      	subs	r4, #1
 800b32a:	e7ea      	b.n	800b302 <quorem+0xe2>
 800b32c:	2000      	movs	r0, #0
 800b32e:	e7ee      	b.n	800b30e <quorem+0xee>

0800b330 <_dtoa_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	69c7      	ldr	r7, [r0, #28]
 800b336:	b099      	sub	sp, #100	@ 0x64
 800b338:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b33c:	ec55 4b10 	vmov	r4, r5, d0
 800b340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b342:	9109      	str	r1, [sp, #36]	@ 0x24
 800b344:	4683      	mov	fp, r0
 800b346:	920e      	str	r2, [sp, #56]	@ 0x38
 800b348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b34a:	b97f      	cbnz	r7, 800b36c <_dtoa_r+0x3c>
 800b34c:	2010      	movs	r0, #16
 800b34e:	f000 fdfd 	bl	800bf4c <malloc>
 800b352:	4602      	mov	r2, r0
 800b354:	f8cb 001c 	str.w	r0, [fp, #28]
 800b358:	b920      	cbnz	r0, 800b364 <_dtoa_r+0x34>
 800b35a:	4ba7      	ldr	r3, [pc, #668]	@ (800b5f8 <_dtoa_r+0x2c8>)
 800b35c:	21ef      	movs	r1, #239	@ 0xef
 800b35e:	48a7      	ldr	r0, [pc, #668]	@ (800b5fc <_dtoa_r+0x2cc>)
 800b360:	f002 fcc6 	bl	800dcf0 <__assert_func>
 800b364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b368:	6007      	str	r7, [r0, #0]
 800b36a:	60c7      	str	r7, [r0, #12]
 800b36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	b159      	cbz	r1, 800b38c <_dtoa_r+0x5c>
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	604a      	str	r2, [r1, #4]
 800b378:	2301      	movs	r3, #1
 800b37a:	4093      	lsls	r3, r2
 800b37c:	608b      	str	r3, [r1, #8]
 800b37e:	4658      	mov	r0, fp
 800b380:	f000 feda 	bl	800c138 <_Bfree>
 800b384:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	1e2b      	subs	r3, r5, #0
 800b38e:	bfb9      	ittee	lt
 800b390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b394:	9303      	strlt	r3, [sp, #12]
 800b396:	2300      	movge	r3, #0
 800b398:	6033      	strge	r3, [r6, #0]
 800b39a:	9f03      	ldr	r7, [sp, #12]
 800b39c:	4b98      	ldr	r3, [pc, #608]	@ (800b600 <_dtoa_r+0x2d0>)
 800b39e:	bfbc      	itt	lt
 800b3a0:	2201      	movlt	r2, #1
 800b3a2:	6032      	strlt	r2, [r6, #0]
 800b3a4:	43bb      	bics	r3, r7
 800b3a6:	d112      	bne.n	800b3ce <_dtoa_r+0x9e>
 800b3a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3b4:	4323      	orrs	r3, r4
 800b3b6:	f000 854d 	beq.w	800be54 <_dtoa_r+0xb24>
 800b3ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b614 <_dtoa_r+0x2e4>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 854f 	beq.w	800be64 <_dtoa_r+0xb34>
 800b3c6:	f10a 0303 	add.w	r3, sl, #3
 800b3ca:	f000 bd49 	b.w	800be60 <_dtoa_r+0xb30>
 800b3ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	ec51 0b17 	vmov	r0, r1, d7
 800b3d8:	2300      	movs	r3, #0
 800b3da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b3de:	f7f5 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	b158      	cbz	r0, 800b3fe <_dtoa_r+0xce>
 800b3e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3ee:	b113      	cbz	r3, 800b3f6 <_dtoa_r+0xc6>
 800b3f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3f2:	4b84      	ldr	r3, [pc, #528]	@ (800b604 <_dtoa_r+0x2d4>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b618 <_dtoa_r+0x2e8>
 800b3fa:	f000 bd33 	b.w	800be64 <_dtoa_r+0xb34>
 800b3fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b402:	aa16      	add	r2, sp, #88	@ 0x58
 800b404:	a917      	add	r1, sp, #92	@ 0x5c
 800b406:	4658      	mov	r0, fp
 800b408:	f001 fa3a 	bl	800c880 <__d2b>
 800b40c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b410:	4681      	mov	r9, r0
 800b412:	2e00      	cmp	r6, #0
 800b414:	d077      	beq.n	800b506 <_dtoa_r+0x1d6>
 800b416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b42c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b430:	4619      	mov	r1, r3
 800b432:	2200      	movs	r2, #0
 800b434:	4b74      	ldr	r3, [pc, #464]	@ (800b608 <_dtoa_r+0x2d8>)
 800b436:	f7f4 ff27 	bl	8000288 <__aeabi_dsub>
 800b43a:	a369      	add	r3, pc, #420	@ (adr r3, 800b5e0 <_dtoa_r+0x2b0>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f5 f8da 	bl	80005f8 <__aeabi_dmul>
 800b444:	a368      	add	r3, pc, #416	@ (adr r3, 800b5e8 <_dtoa_r+0x2b8>)
 800b446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44a:	f7f4 ff1f 	bl	800028c <__adddf3>
 800b44e:	4604      	mov	r4, r0
 800b450:	4630      	mov	r0, r6
 800b452:	460d      	mov	r5, r1
 800b454:	f7f5 f866 	bl	8000524 <__aeabi_i2d>
 800b458:	a365      	add	r3, pc, #404	@ (adr r3, 800b5f0 <_dtoa_r+0x2c0>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f5 f8cb 	bl	80005f8 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f4 ff0f 	bl	800028c <__adddf3>
 800b46e:	4604      	mov	r4, r0
 800b470:	460d      	mov	r5, r1
 800b472:	f7f5 fb71 	bl	8000b58 <__aeabi_d2iz>
 800b476:	2200      	movs	r2, #0
 800b478:	4607      	mov	r7, r0
 800b47a:	2300      	movs	r3, #0
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800b484:	b140      	cbz	r0, 800b498 <_dtoa_r+0x168>
 800b486:	4638      	mov	r0, r7
 800b488:	f7f5 f84c 	bl	8000524 <__aeabi_i2d>
 800b48c:	4622      	mov	r2, r4
 800b48e:	462b      	mov	r3, r5
 800b490:	f7f5 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b494:	b900      	cbnz	r0, 800b498 <_dtoa_r+0x168>
 800b496:	3f01      	subs	r7, #1
 800b498:	2f16      	cmp	r7, #22
 800b49a:	d851      	bhi.n	800b540 <_dtoa_r+0x210>
 800b49c:	4b5b      	ldr	r3, [pc, #364]	@ (800b60c <_dtoa_r+0x2dc>)
 800b49e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4aa:	f7f5 fb17 	bl	8000adc <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d048      	beq.n	800b544 <_dtoa_r+0x214>
 800b4b2:	3f01      	subs	r7, #1
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4ba:	1b9b      	subs	r3, r3, r6
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	bf44      	itt	mi
 800b4c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b4c4:	2300      	movmi	r3, #0
 800b4c6:	9208      	str	r2, [sp, #32]
 800b4c8:	bf54      	ite	pl
 800b4ca:	f04f 0800 	movpl.w	r8, #0
 800b4ce:	9308      	strmi	r3, [sp, #32]
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	db39      	blt.n	800b548 <_dtoa_r+0x218>
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b4d8:	443b      	add	r3, r7
 800b4da:	9308      	str	r3, [sp, #32]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	d864      	bhi.n	800b5b0 <_dtoa_r+0x280>
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	bfc4      	itt	gt
 800b4ea:	3b04      	subgt	r3, #4
 800b4ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	f1a3 0302 	sub.w	r3, r3, #2
 800b4f4:	bfcc      	ite	gt
 800b4f6:	2400      	movgt	r4, #0
 800b4f8:	2401      	movle	r4, #1
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d863      	bhi.n	800b5c6 <_dtoa_r+0x296>
 800b4fe:	e8df f003 	tbb	[pc, r3]
 800b502:	372a      	.short	0x372a
 800b504:	5535      	.short	0x5535
 800b506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b50a:	441e      	add	r6, r3
 800b50c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b510:	2b20      	cmp	r3, #32
 800b512:	bfc1      	itttt	gt
 800b514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b518:	409f      	lslgt	r7, r3
 800b51a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b51e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b522:	bfd6      	itet	le
 800b524:	f1c3 0320 	rsble	r3, r3, #32
 800b528:	ea47 0003 	orrgt.w	r0, r7, r3
 800b52c:	fa04 f003 	lslle.w	r0, r4, r3
 800b530:	f7f4 ffe8 	bl	8000504 <__aeabi_ui2d>
 800b534:	2201      	movs	r2, #1
 800b536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b53a:	3e01      	subs	r6, #1
 800b53c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b53e:	e777      	b.n	800b430 <_dtoa_r+0x100>
 800b540:	2301      	movs	r3, #1
 800b542:	e7b8      	b.n	800b4b6 <_dtoa_r+0x186>
 800b544:	9012      	str	r0, [sp, #72]	@ 0x48
 800b546:	e7b7      	b.n	800b4b8 <_dtoa_r+0x188>
 800b548:	427b      	negs	r3, r7
 800b54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b54c:	2300      	movs	r3, #0
 800b54e:	eba8 0807 	sub.w	r8, r8, r7
 800b552:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b554:	e7c4      	b.n	800b4e0 <_dtoa_r+0x1b0>
 800b556:	2300      	movs	r3, #0
 800b558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc35      	bgt.n	800b5cc <_dtoa_r+0x29c>
 800b560:	2301      	movs	r3, #1
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	9307      	str	r3, [sp, #28]
 800b566:	461a      	mov	r2, r3
 800b568:	920e      	str	r2, [sp, #56]	@ 0x38
 800b56a:	e00b      	b.n	800b584 <_dtoa_r+0x254>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e7f3      	b.n	800b558 <_dtoa_r+0x228>
 800b570:	2300      	movs	r3, #0
 800b572:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b576:	18fb      	adds	r3, r7, r3
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	3301      	adds	r3, #1
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	9307      	str	r3, [sp, #28]
 800b580:	bfb8      	it	lt
 800b582:	2301      	movlt	r3, #1
 800b584:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b588:	2100      	movs	r1, #0
 800b58a:	2204      	movs	r2, #4
 800b58c:	f102 0514 	add.w	r5, r2, #20
 800b590:	429d      	cmp	r5, r3
 800b592:	d91f      	bls.n	800b5d4 <_dtoa_r+0x2a4>
 800b594:	6041      	str	r1, [r0, #4]
 800b596:	4658      	mov	r0, fp
 800b598:	f000 fd8e 	bl	800c0b8 <_Balloc>
 800b59c:	4682      	mov	sl, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d13c      	bne.n	800b61c <_dtoa_r+0x2ec>
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b610 <_dtoa_r+0x2e0>)
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5aa:	e6d8      	b.n	800b35e <_dtoa_r+0x2e>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e7e0      	b.n	800b572 <_dtoa_r+0x242>
 800b5b0:	2401      	movs	r4, #1
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2312      	movs	r3, #18
 800b5c4:	e7d0      	b.n	800b568 <_dtoa_r+0x238>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ca:	e7f5      	b.n	800b5b8 <_dtoa_r+0x288>
 800b5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	e7d7      	b.n	800b584 <_dtoa_r+0x254>
 800b5d4:	3101      	adds	r1, #1
 800b5d6:	0052      	lsls	r2, r2, #1
 800b5d8:	e7d8      	b.n	800b58c <_dtoa_r+0x25c>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	636f4361 	.word	0x636f4361
 800b5e4:	3fd287a7 	.word	0x3fd287a7
 800b5e8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ec:	3fc68a28 	.word	0x3fc68a28
 800b5f0:	509f79fb 	.word	0x509f79fb
 800b5f4:	3fd34413 	.word	0x3fd34413
 800b5f8:	0800eaa0 	.word	0x0800eaa0
 800b5fc:	0800eab7 	.word	0x0800eab7
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	0800ea6b 	.word	0x0800ea6b
 800b608:	3ff80000 	.word	0x3ff80000
 800b60c:	0800ebb0 	.word	0x0800ebb0
 800b610:	0800eb0f 	.word	0x0800eb0f
 800b614:	0800ea9c 	.word	0x0800ea9c
 800b618:	0800ea6a 	.word	0x0800ea6a
 800b61c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b620:	6018      	str	r0, [r3, #0]
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	2b0e      	cmp	r3, #14
 800b626:	f200 80a4 	bhi.w	800b772 <_dtoa_r+0x442>
 800b62a:	2c00      	cmp	r4, #0
 800b62c:	f000 80a1 	beq.w	800b772 <_dtoa_r+0x442>
 800b630:	2f00      	cmp	r7, #0
 800b632:	dd33      	ble.n	800b69c <_dtoa_r+0x36c>
 800b634:	4bad      	ldr	r3, [pc, #692]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b636:	f007 020f 	and.w	r2, r7, #15
 800b63a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63e:	ed93 7b00 	vldr	d7, [r3]
 800b642:	05f8      	lsls	r0, r7, #23
 800b644:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b64c:	d516      	bpl.n	800b67c <_dtoa_r+0x34c>
 800b64e:	4ba8      	ldr	r3, [pc, #672]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b658:	f7f5 f8f8 	bl	800084c <__aeabi_ddiv>
 800b65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b660:	f004 040f 	and.w	r4, r4, #15
 800b664:	2603      	movs	r6, #3
 800b666:	4da2      	ldr	r5, [pc, #648]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b668:	b954      	cbnz	r4, 800b680 <_dtoa_r+0x350>
 800b66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b672:	f7f5 f8eb 	bl	800084c <__aeabi_ddiv>
 800b676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67a:	e028      	b.n	800b6ce <_dtoa_r+0x39e>
 800b67c:	2602      	movs	r6, #2
 800b67e:	e7f2      	b.n	800b666 <_dtoa_r+0x336>
 800b680:	07e1      	lsls	r1, r4, #31
 800b682:	d508      	bpl.n	800b696 <_dtoa_r+0x366>
 800b684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b68c:	f7f4 ffb4 	bl	80005f8 <__aeabi_dmul>
 800b690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b694:	3601      	adds	r6, #1
 800b696:	1064      	asrs	r4, r4, #1
 800b698:	3508      	adds	r5, #8
 800b69a:	e7e5      	b.n	800b668 <_dtoa_r+0x338>
 800b69c:	f000 80d2 	beq.w	800b844 <_dtoa_r+0x514>
 800b6a0:	427c      	negs	r4, r7
 800b6a2:	4b92      	ldr	r3, [pc, #584]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b6a4:	4d92      	ldr	r5, [pc, #584]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b6a6:	f004 020f 	and.w	r2, r4, #15
 800b6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6be:	1124      	asrs	r4, r4, #4
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2602      	movs	r6, #2
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	f040 80b2 	bne.w	800b82e <_dtoa_r+0x4fe>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1d3      	bne.n	800b676 <_dtoa_r+0x346>
 800b6ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b6d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80b7 	beq.w	800b848 <_dtoa_r+0x518>
 800b6da:	4b86      	ldr	r3, [pc, #536]	@ (800b8f4 <_dtoa_r+0x5c4>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f5 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f000 80ae 	beq.w	800b848 <_dtoa_r+0x518>
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80aa 	beq.w	800b848 <_dtoa_r+0x518>
 800b6f4:	9b00      	ldr	r3, [sp, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dd37      	ble.n	800b76a <_dtoa_r+0x43a>
 800b6fa:	1e7b      	subs	r3, r7, #1
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	4620      	mov	r0, r4
 800b700:	4b7d      	ldr	r3, [pc, #500]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b702:	2200      	movs	r2, #0
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 ff77 	bl	80005f8 <__aeabi_dmul>
 800b70a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b70e:	9c00      	ldr	r4, [sp, #0]
 800b710:	3601      	adds	r6, #1
 800b712:	4630      	mov	r0, r6
 800b714:	f7f4 ff06 	bl	8000524 <__aeabi_i2d>
 800b718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	4b76      	ldr	r3, [pc, #472]	@ (800b8fc <_dtoa_r+0x5cc>)
 800b722:	2200      	movs	r2, #0
 800b724:	f7f4 fdb2 	bl	800028c <__adddf3>
 800b728:	4605      	mov	r5, r0
 800b72a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b72e:	2c00      	cmp	r4, #0
 800b730:	f040 808d 	bne.w	800b84e <_dtoa_r+0x51e>
 800b734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b738:	4b71      	ldr	r3, [pc, #452]	@ (800b900 <_dtoa_r+0x5d0>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	f7f4 fda4 	bl	8000288 <__aeabi_dsub>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b748:	462a      	mov	r2, r5
 800b74a:	4633      	mov	r3, r6
 800b74c:	f7f5 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800b750:	2800      	cmp	r0, #0
 800b752:	f040 828b 	bne.w	800bc6c <_dtoa_r+0x93c>
 800b756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75a:	462a      	mov	r2, r5
 800b75c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b760:	f7f5 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800b764:	2800      	cmp	r0, #0
 800b766:	f040 8128 	bne.w	800b9ba <_dtoa_r+0x68a>
 800b76a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b76e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b774:	2b00      	cmp	r3, #0
 800b776:	f2c0 815a 	blt.w	800ba2e <_dtoa_r+0x6fe>
 800b77a:	2f0e      	cmp	r7, #14
 800b77c:	f300 8157 	bgt.w	800ba2e <_dtoa_r+0x6fe>
 800b780:	4b5a      	ldr	r3, [pc, #360]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b786:	ed93 7b00 	vldr	d7, [r3]
 800b78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	ed8d 7b00 	vstr	d7, [sp]
 800b792:	da03      	bge.n	800b79c <_dtoa_r+0x46c>
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	2b00      	cmp	r3, #0
 800b798:	f340 8101 	ble.w	800b99e <_dtoa_r+0x66e>
 800b79c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7a0:	4656      	mov	r6, sl
 800b7a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f84f 	bl	800084c <__aeabi_ddiv>
 800b7ae:	f7f5 f9d3 	bl	8000b58 <__aeabi_d2iz>
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	f7f4 feb6 	bl	8000524 <__aeabi_i2d>
 800b7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b7cc:	f7f4 fd5c 	bl	8000288 <__aeabi_dsub>
 800b7d0:	f806 4b01 	strb.w	r4, [r6], #1
 800b7d4:	9d07      	ldr	r5, [sp, #28]
 800b7d6:	eba6 040a 	sub.w	r4, r6, sl
 800b7da:	42a5      	cmp	r5, r4
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	f040 8117 	bne.w	800ba12 <_dtoa_r+0x6e2>
 800b7e4:	f7f4 fd52 	bl	800028c <__adddf3>
 800b7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	f7f5 f992 	bl	8000b18 <__aeabi_dcmpgt>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f040 80f9 	bne.w	800b9ec <_dtoa_r+0x6bc>
 800b7fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f5 f961 	bl	8000ac8 <__aeabi_dcmpeq>
 800b806:	b118      	cbz	r0, 800b810 <_dtoa_r+0x4e0>
 800b808:	f018 0f01 	tst.w	r8, #1
 800b80c:	f040 80ee 	bne.w	800b9ec <_dtoa_r+0x6bc>
 800b810:	4649      	mov	r1, r9
 800b812:	4658      	mov	r0, fp
 800b814:	f000 fc90 	bl	800c138 <_Bfree>
 800b818:	2300      	movs	r3, #0
 800b81a:	7033      	strb	r3, [r6, #0]
 800b81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b81e:	3701      	adds	r7, #1
 800b820:	601f      	str	r7, [r3, #0]
 800b822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 831d 	beq.w	800be64 <_dtoa_r+0xb34>
 800b82a:	601e      	str	r6, [r3, #0]
 800b82c:	e31a      	b.n	800be64 <_dtoa_r+0xb34>
 800b82e:	07e2      	lsls	r2, r4, #31
 800b830:	d505      	bpl.n	800b83e <_dtoa_r+0x50e>
 800b832:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	3601      	adds	r6, #1
 800b83c:	2301      	movs	r3, #1
 800b83e:	1064      	asrs	r4, r4, #1
 800b840:	3508      	adds	r5, #8
 800b842:	e73f      	b.n	800b6c4 <_dtoa_r+0x394>
 800b844:	2602      	movs	r6, #2
 800b846:	e742      	b.n	800b6ce <_dtoa_r+0x39e>
 800b848:	9c07      	ldr	r4, [sp, #28]
 800b84a:	9704      	str	r7, [sp, #16]
 800b84c:	e761      	b.n	800b712 <_dtoa_r+0x3e2>
 800b84e:	4b27      	ldr	r3, [pc, #156]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b85a:	4454      	add	r4, sl
 800b85c:	2900      	cmp	r1, #0
 800b85e:	d053      	beq.n	800b908 <_dtoa_r+0x5d8>
 800b860:	4928      	ldr	r1, [pc, #160]	@ (800b904 <_dtoa_r+0x5d4>)
 800b862:	2000      	movs	r0, #0
 800b864:	f7f4 fff2 	bl	800084c <__aeabi_ddiv>
 800b868:	4633      	mov	r3, r6
 800b86a:	462a      	mov	r2, r5
 800b86c:	f7f4 fd0c 	bl	8000288 <__aeabi_dsub>
 800b870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b874:	4656      	mov	r6, sl
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f5 f96d 	bl	8000b58 <__aeabi_d2iz>
 800b87e:	4605      	mov	r5, r0
 800b880:	f7f4 fe50 	bl	8000524 <__aeabi_i2d>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88c:	f7f4 fcfc 	bl	8000288 <__aeabi_dsub>
 800b890:	3530      	adds	r5, #48	@ 0x30
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b89a:	f806 5b01 	strb.w	r5, [r6], #1
 800b89e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8a2:	f7f5 f91b 	bl	8000adc <__aeabi_dcmplt>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d171      	bne.n	800b98e <_dtoa_r+0x65e>
 800b8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ae:	4911      	ldr	r1, [pc, #68]	@ (800b8f4 <_dtoa_r+0x5c4>)
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f7f4 fce9 	bl	8000288 <__aeabi_dsub>
 800b8b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8ba:	f7f5 f90f 	bl	8000adc <__aeabi_dcmplt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f040 8095 	bne.w	800b9ee <_dtoa_r+0x6be>
 800b8c4:	42a6      	cmp	r6, r4
 800b8c6:	f43f af50 	beq.w	800b76a <_dtoa_r+0x43a>
 800b8ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f7f4 fe91 	bl	80005f8 <__aeabi_dmul>
 800b8d6:	4b08      	ldr	r3, [pc, #32]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b8d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8dc:	2200      	movs	r2, #0
 800b8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e2:	f7f4 fe89 	bl	80005f8 <__aeabi_dmul>
 800b8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ea:	e7c4      	b.n	800b876 <_dtoa_r+0x546>
 800b8ec:	0800ebb0 	.word	0x0800ebb0
 800b8f0:	0800eb88 	.word	0x0800eb88
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	40240000 	.word	0x40240000
 800b8fc:	401c0000 	.word	0x401c0000
 800b900:	40140000 	.word	0x40140000
 800b904:	3fe00000 	.word	0x3fe00000
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	f7f4 fe74 	bl	80005f8 <__aeabi_dmul>
 800b910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b914:	9415      	str	r4, [sp, #84]	@ 0x54
 800b916:	4656      	mov	r6, sl
 800b918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91c:	f7f5 f91c 	bl	8000b58 <__aeabi_d2iz>
 800b920:	4605      	mov	r5, r0
 800b922:	f7f4 fdff 	bl	8000524 <__aeabi_i2d>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b92e:	f7f4 fcab 	bl	8000288 <__aeabi_dsub>
 800b932:	3530      	adds	r5, #48	@ 0x30
 800b934:	f806 5b01 	strb.w	r5, [r6], #1
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	42a6      	cmp	r6, r4
 800b93e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b942:	f04f 0200 	mov.w	r2, #0
 800b946:	d124      	bne.n	800b992 <_dtoa_r+0x662>
 800b948:	4bac      	ldr	r3, [pc, #688]	@ (800bbfc <_dtoa_r+0x8cc>)
 800b94a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b94e:	f7f4 fc9d 	bl	800028c <__adddf3>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95a:	f7f5 f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d145      	bne.n	800b9ee <_dtoa_r+0x6be>
 800b962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b966:	49a5      	ldr	r1, [pc, #660]	@ (800bbfc <_dtoa_r+0x8cc>)
 800b968:	2000      	movs	r0, #0
 800b96a:	f7f4 fc8d 	bl	8000288 <__aeabi_dsub>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b976:	f7f5 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f aef5 	beq.w	800b76a <_dtoa_r+0x43a>
 800b980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b982:	1e73      	subs	r3, r6, #1
 800b984:	9315      	str	r3, [sp, #84]	@ 0x54
 800b986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b98a:	2b30      	cmp	r3, #48	@ 0x30
 800b98c:	d0f8      	beq.n	800b980 <_dtoa_r+0x650>
 800b98e:	9f04      	ldr	r7, [sp, #16]
 800b990:	e73e      	b.n	800b810 <_dtoa_r+0x4e0>
 800b992:	4b9b      	ldr	r3, [pc, #620]	@ (800bc00 <_dtoa_r+0x8d0>)
 800b994:	f7f4 fe30 	bl	80005f8 <__aeabi_dmul>
 800b998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b99c:	e7bc      	b.n	800b918 <_dtoa_r+0x5e8>
 800b99e:	d10c      	bne.n	800b9ba <_dtoa_r+0x68a>
 800b9a0:	4b98      	ldr	r3, [pc, #608]	@ (800bc04 <_dtoa_r+0x8d4>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a8:	f7f4 fe26 	bl	80005f8 <__aeabi_dmul>
 800b9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b0:	f7f5 f8a8 	bl	8000b04 <__aeabi_dcmpge>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f000 8157 	beq.w	800bc68 <_dtoa_r+0x938>
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	4625      	mov	r5, r4
 800b9be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	4656      	mov	r6, sl
 800b9c6:	2700      	movs	r7, #0
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f000 fbb4 	bl	800c138 <_Bfree>
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	d0dc      	beq.n	800b98e <_dtoa_r+0x65e>
 800b9d4:	b12f      	cbz	r7, 800b9e2 <_dtoa_r+0x6b2>
 800b9d6:	42af      	cmp	r7, r5
 800b9d8:	d003      	beq.n	800b9e2 <_dtoa_r+0x6b2>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4658      	mov	r0, fp
 800b9de:	f000 fbab 	bl	800c138 <_Bfree>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4658      	mov	r0, fp
 800b9e6:	f000 fba7 	bl	800c138 <_Bfree>
 800b9ea:	e7d0      	b.n	800b98e <_dtoa_r+0x65e>
 800b9ec:	9704      	str	r7, [sp, #16]
 800b9ee:	4633      	mov	r3, r6
 800b9f0:	461e      	mov	r6, r3
 800b9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9f6:	2a39      	cmp	r2, #57	@ 0x39
 800b9f8:	d107      	bne.n	800ba0a <_dtoa_r+0x6da>
 800b9fa:	459a      	cmp	sl, r3
 800b9fc:	d1f8      	bne.n	800b9f0 <_dtoa_r+0x6c0>
 800b9fe:	9a04      	ldr	r2, [sp, #16]
 800ba00:	3201      	adds	r2, #1
 800ba02:	9204      	str	r2, [sp, #16]
 800ba04:	2230      	movs	r2, #48	@ 0x30
 800ba06:	f88a 2000 	strb.w	r2, [sl]
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e7bd      	b.n	800b98e <_dtoa_r+0x65e>
 800ba12:	4b7b      	ldr	r3, [pc, #492]	@ (800bc00 <_dtoa_r+0x8d0>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	f7f4 fdef 	bl	80005f8 <__aeabi_dmul>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	f7f5 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f43f aebb 	beq.w	800b7a2 <_dtoa_r+0x472>
 800ba2c:	e6f0      	b.n	800b810 <_dtoa_r+0x4e0>
 800ba2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	f000 80db 	beq.w	800bbec <_dtoa_r+0x8bc>
 800ba36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba38:	2a01      	cmp	r2, #1
 800ba3a:	f300 80bf 	bgt.w	800bbbc <_dtoa_r+0x88c>
 800ba3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	f000 80b7 	beq.w	800bbb4 <_dtoa_r+0x884>
 800ba46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba4c:	4646      	mov	r6, r8
 800ba4e:	9a08      	ldr	r2, [sp, #32]
 800ba50:	2101      	movs	r1, #1
 800ba52:	441a      	add	r2, r3
 800ba54:	4658      	mov	r0, fp
 800ba56:	4498      	add	r8, r3
 800ba58:	9208      	str	r2, [sp, #32]
 800ba5a:	f000 fc6b 	bl	800c334 <__i2b>
 800ba5e:	4605      	mov	r5, r0
 800ba60:	b15e      	cbz	r6, 800ba7a <_dtoa_r+0x74a>
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	dd08      	ble.n	800ba7a <_dtoa_r+0x74a>
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	9a08      	ldr	r2, [sp, #32]
 800ba6c:	bfa8      	it	ge
 800ba6e:	4633      	movge	r3, r6
 800ba70:	eba8 0803 	sub.w	r8, r8, r3
 800ba74:	1af6      	subs	r6, r6, r3
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	9308      	str	r3, [sp, #32]
 800ba7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7c:	b1f3      	cbz	r3, 800babc <_dtoa_r+0x78c>
 800ba7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80b7 	beq.w	800bbf4 <_dtoa_r+0x8c4>
 800ba86:	b18c      	cbz	r4, 800baac <_dtoa_r+0x77c>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	4658      	mov	r0, fp
 800ba8e:	f000 fd11 	bl	800c4b4 <__pow5mult>
 800ba92:	464a      	mov	r2, r9
 800ba94:	4601      	mov	r1, r0
 800ba96:	4605      	mov	r5, r0
 800ba98:	4658      	mov	r0, fp
 800ba9a:	f000 fc61 	bl	800c360 <__multiply>
 800ba9e:	4649      	mov	r1, r9
 800baa0:	9004      	str	r0, [sp, #16]
 800baa2:	4658      	mov	r0, fp
 800baa4:	f000 fb48 	bl	800c138 <_Bfree>
 800baa8:	9b04      	ldr	r3, [sp, #16]
 800baaa:	4699      	mov	r9, r3
 800baac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baae:	1b1a      	subs	r2, r3, r4
 800bab0:	d004      	beq.n	800babc <_dtoa_r+0x78c>
 800bab2:	4649      	mov	r1, r9
 800bab4:	4658      	mov	r0, fp
 800bab6:	f000 fcfd 	bl	800c4b4 <__pow5mult>
 800baba:	4681      	mov	r9, r0
 800babc:	2101      	movs	r1, #1
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 fc38 	bl	800c334 <__i2b>
 800bac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac6:	4604      	mov	r4, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 81cf 	beq.w	800be6c <_dtoa_r+0xb3c>
 800bace:	461a      	mov	r2, r3
 800bad0:	4601      	mov	r1, r0
 800bad2:	4658      	mov	r0, fp
 800bad4:	f000 fcee 	bl	800c4b4 <__pow5mult>
 800bad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bada:	2b01      	cmp	r3, #1
 800badc:	4604      	mov	r4, r0
 800bade:	f300 8095 	bgt.w	800bc0c <_dtoa_r+0x8dc>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f040 8087 	bne.w	800bbf8 <_dtoa_r+0x8c8>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 8089 	bne.w	800bc08 <_dtoa_r+0x8d8>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bafc:	0d1b      	lsrs	r3, r3, #20
 800bafe:	051b      	lsls	r3, r3, #20
 800bb00:	b12b      	cbz	r3, 800bb0e <_dtoa_r+0x7de>
 800bb02:	9b08      	ldr	r3, [sp, #32]
 800bb04:	3301      	adds	r3, #1
 800bb06:	9308      	str	r3, [sp, #32]
 800bb08:	f108 0801 	add.w	r8, r8, #1
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 81b0 	beq.w	800be78 <_dtoa_r+0xb48>
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb1e:	6918      	ldr	r0, [r3, #16]
 800bb20:	f000 fbbc 	bl	800c29c <__hi0bits>
 800bb24:	f1c0 0020 	rsb	r0, r0, #32
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	4418      	add	r0, r3
 800bb2c:	f010 001f 	ands.w	r0, r0, #31
 800bb30:	d077      	beq.n	800bc22 <_dtoa_r+0x8f2>
 800bb32:	f1c0 0320 	rsb	r3, r0, #32
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	dd6b      	ble.n	800bc12 <_dtoa_r+0x8e2>
 800bb3a:	9b08      	ldr	r3, [sp, #32]
 800bb3c:	f1c0 001c 	rsb	r0, r0, #28
 800bb40:	4403      	add	r3, r0
 800bb42:	4480      	add	r8, r0
 800bb44:	4406      	add	r6, r0
 800bb46:	9308      	str	r3, [sp, #32]
 800bb48:	f1b8 0f00 	cmp.w	r8, #0
 800bb4c:	dd05      	ble.n	800bb5a <_dtoa_r+0x82a>
 800bb4e:	4649      	mov	r1, r9
 800bb50:	4642      	mov	r2, r8
 800bb52:	4658      	mov	r0, fp
 800bb54:	f000 fd08 	bl	800c568 <__lshift>
 800bb58:	4681      	mov	r9, r0
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dd05      	ble.n	800bb6c <_dtoa_r+0x83c>
 800bb60:	4621      	mov	r1, r4
 800bb62:	461a      	mov	r2, r3
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fcff 	bl	800c568 <__lshift>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d059      	beq.n	800bc26 <_dtoa_r+0x8f6>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4648      	mov	r0, r9
 800bb76:	f000 fd63 	bl	800c640 <__mcmp>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	da53      	bge.n	800bc26 <_dtoa_r+0x8f6>
 800bb7e:	1e7b      	subs	r3, r7, #1
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	4649      	mov	r1, r9
 800bb84:	2300      	movs	r3, #0
 800bb86:	220a      	movs	r2, #10
 800bb88:	4658      	mov	r0, fp
 800bb8a:	f000 faf7 	bl	800c17c <__multadd>
 800bb8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb90:	4681      	mov	r9, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 8172 	beq.w	800be7c <_dtoa_r+0xb4c>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4658      	mov	r0, fp
 800bba0:	f000 faec 	bl	800c17c <__multadd>
 800bba4:	9b00      	ldr	r3, [sp, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	4605      	mov	r5, r0
 800bbaa:	dc67      	bgt.n	800bc7c <_dtoa_r+0x94c>
 800bbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	dc41      	bgt.n	800bc36 <_dtoa_r+0x906>
 800bbb2:	e063      	b.n	800bc7c <_dtoa_r+0x94c>
 800bbb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bbba:	e746      	b.n	800ba4a <_dtoa_r+0x71a>
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	1e5c      	subs	r4, r3, #1
 800bbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	bfbf      	itttt	lt
 800bbc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bbc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bbca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bbcc:	1ae3      	sublt	r3, r4, r3
 800bbce:	bfb4      	ite	lt
 800bbd0:	18d2      	addlt	r2, r2, r3
 800bbd2:	1b1c      	subge	r4, r3, r4
 800bbd4:	9b07      	ldr	r3, [sp, #28]
 800bbd6:	bfbc      	itt	lt
 800bbd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bbda:	2400      	movlt	r4, #0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfb5      	itete	lt
 800bbe0:	eba8 0603 	sublt.w	r6, r8, r3
 800bbe4:	9b07      	ldrge	r3, [sp, #28]
 800bbe6:	2300      	movlt	r3, #0
 800bbe8:	4646      	movge	r6, r8
 800bbea:	e730      	b.n	800ba4e <_dtoa_r+0x71e>
 800bbec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bbf0:	4646      	mov	r6, r8
 800bbf2:	e735      	b.n	800ba60 <_dtoa_r+0x730>
 800bbf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbf6:	e75c      	b.n	800bab2 <_dtoa_r+0x782>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e788      	b.n	800bb0e <_dtoa_r+0x7de>
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	40240000 	.word	0x40240000
 800bc04:	40140000 	.word	0x40140000
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	e780      	b.n	800bb0e <_dtoa_r+0x7de>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc10:	e782      	b.n	800bb18 <_dtoa_r+0x7e8>
 800bc12:	d099      	beq.n	800bb48 <_dtoa_r+0x818>
 800bc14:	9a08      	ldr	r2, [sp, #32]
 800bc16:	331c      	adds	r3, #28
 800bc18:	441a      	add	r2, r3
 800bc1a:	4498      	add	r8, r3
 800bc1c:	441e      	add	r6, r3
 800bc1e:	9208      	str	r2, [sp, #32]
 800bc20:	e792      	b.n	800bb48 <_dtoa_r+0x818>
 800bc22:	4603      	mov	r3, r0
 800bc24:	e7f6      	b.n	800bc14 <_dtoa_r+0x8e4>
 800bc26:	9b07      	ldr	r3, [sp, #28]
 800bc28:	9704      	str	r7, [sp, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dc20      	bgt.n	800bc70 <_dtoa_r+0x940>
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	dd1e      	ble.n	800bc74 <_dtoa_r+0x944>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f aec0 	bne.w	800b9be <_dtoa_r+0x68e>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	2205      	movs	r2, #5
 800bc42:	4658      	mov	r0, fp
 800bc44:	f000 fa9a 	bl	800c17c <__multadd>
 800bc48:	4601      	mov	r1, r0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f000 fcf7 	bl	800c640 <__mcmp>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f77f aeb3 	ble.w	800b9be <_dtoa_r+0x68e>
 800bc58:	4656      	mov	r6, sl
 800bc5a:	2331      	movs	r3, #49	@ 0x31
 800bc5c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc60:	9b04      	ldr	r3, [sp, #16]
 800bc62:	3301      	adds	r3, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	e6ae      	b.n	800b9c6 <_dtoa_r+0x696>
 800bc68:	9c07      	ldr	r4, [sp, #28]
 800bc6a:	9704      	str	r7, [sp, #16]
 800bc6c:	4625      	mov	r5, r4
 800bc6e:	e7f3      	b.n	800bc58 <_dtoa_r+0x928>
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8104 	beq.w	800be84 <_dtoa_r+0xb54>
 800bc7c:	2e00      	cmp	r6, #0
 800bc7e:	dd05      	ble.n	800bc8c <_dtoa_r+0x95c>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4632      	mov	r2, r6
 800bc84:	4658      	mov	r0, fp
 800bc86:	f000 fc6f 	bl	800c568 <__lshift>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d05a      	beq.n	800bd48 <_dtoa_r+0xa18>
 800bc92:	6869      	ldr	r1, [r5, #4]
 800bc94:	4658      	mov	r0, fp
 800bc96:	f000 fa0f 	bl	800c0b8 <_Balloc>
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <_dtoa_r+0x97a>
 800bc9e:	4b84      	ldr	r3, [pc, #528]	@ (800beb0 <_dtoa_r+0xb80>)
 800bca0:	4602      	mov	r2, r0
 800bca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bca6:	f7ff bb5a 	b.w	800b35e <_dtoa_r+0x2e>
 800bcaa:	692a      	ldr	r2, [r5, #16]
 800bcac:	3202      	adds	r2, #2
 800bcae:	0092      	lsls	r2, r2, #2
 800bcb0:	f105 010c 	add.w	r1, r5, #12
 800bcb4:	300c      	adds	r0, #12
 800bcb6:	f7ff fa9e 	bl	800b1f6 <memcpy>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4658      	mov	r0, fp
 800bcc0:	f000 fc52 	bl	800c568 <__lshift>
 800bcc4:	f10a 0301 	add.w	r3, sl, #1
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	9b00      	ldr	r3, [sp, #0]
 800bccc:	4453      	add	r3, sl
 800bcce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcd0:	9b02      	ldr	r3, [sp, #8]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	462f      	mov	r7, r5
 800bcd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcda:	4605      	mov	r5, r0
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	4621      	mov	r1, r4
 800bce0:	3b01      	subs	r3, #1
 800bce2:	4648      	mov	r0, r9
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	f7ff fa9b 	bl	800b220 <quorem>
 800bcea:	4639      	mov	r1, r7
 800bcec:	9002      	str	r0, [sp, #8]
 800bcee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcf2:	4648      	mov	r0, r9
 800bcf4:	f000 fca4 	bl	800c640 <__mcmp>
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	9008      	str	r0, [sp, #32]
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 fcba 	bl	800c678 <__mdiff>
 800bd04:	68c2      	ldr	r2, [r0, #12]
 800bd06:	4606      	mov	r6, r0
 800bd08:	bb02      	cbnz	r2, 800bd4c <_dtoa_r+0xa1c>
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	f000 fc97 	bl	800c640 <__mcmp>
 800bd12:	4602      	mov	r2, r0
 800bd14:	4631      	mov	r1, r6
 800bd16:	4658      	mov	r0, fp
 800bd18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd1a:	f000 fa0d 	bl	800c138 <_Bfree>
 800bd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd22:	9e07      	ldr	r6, [sp, #28]
 800bd24:	ea43 0102 	orr.w	r1, r3, r2
 800bd28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2a:	4319      	orrs	r1, r3
 800bd2c:	d110      	bne.n	800bd50 <_dtoa_r+0xa20>
 800bd2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd32:	d029      	beq.n	800bd88 <_dtoa_r+0xa58>
 800bd34:	9b08      	ldr	r3, [sp, #32]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	dd02      	ble.n	800bd40 <_dtoa_r+0xa10>
 800bd3a:	9b02      	ldr	r3, [sp, #8]
 800bd3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	f883 8000 	strb.w	r8, [r3]
 800bd46:	e63f      	b.n	800b9c8 <_dtoa_r+0x698>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	e7bb      	b.n	800bcc4 <_dtoa_r+0x994>
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	e7e1      	b.n	800bd14 <_dtoa_r+0x9e4>
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	db04      	blt.n	800bd60 <_dtoa_r+0xa30>
 800bd56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	d120      	bne.n	800bda2 <_dtoa_r+0xa72>
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	dded      	ble.n	800bd40 <_dtoa_r+0xa10>
 800bd64:	4649      	mov	r1, r9
 800bd66:	2201      	movs	r2, #1
 800bd68:	4658      	mov	r0, fp
 800bd6a:	f000 fbfd 	bl	800c568 <__lshift>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4681      	mov	r9, r0
 800bd72:	f000 fc65 	bl	800c640 <__mcmp>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	dc03      	bgt.n	800bd82 <_dtoa_r+0xa52>
 800bd7a:	d1e1      	bne.n	800bd40 <_dtoa_r+0xa10>
 800bd7c:	f018 0f01 	tst.w	r8, #1
 800bd80:	d0de      	beq.n	800bd40 <_dtoa_r+0xa10>
 800bd82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd86:	d1d8      	bne.n	800bd3a <_dtoa_r+0xa0a>
 800bd88:	9a00      	ldr	r2, [sp, #0]
 800bd8a:	2339      	movs	r3, #57	@ 0x39
 800bd8c:	7013      	strb	r3, [r2, #0]
 800bd8e:	4633      	mov	r3, r6
 800bd90:	461e      	mov	r6, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd98:	2a39      	cmp	r2, #57	@ 0x39
 800bd9a:	d052      	beq.n	800be42 <_dtoa_r+0xb12>
 800bd9c:	3201      	adds	r2, #1
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	e612      	b.n	800b9c8 <_dtoa_r+0x698>
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	dd07      	ble.n	800bdb6 <_dtoa_r+0xa86>
 800bda6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdaa:	d0ed      	beq.n	800bd88 <_dtoa_r+0xa58>
 800bdac:	9a00      	ldr	r2, [sp, #0]
 800bdae:	f108 0301 	add.w	r3, r8, #1
 800bdb2:	7013      	strb	r3, [r2, #0]
 800bdb4:	e608      	b.n	800b9c8 <_dtoa_r+0x698>
 800bdb6:	9b07      	ldr	r3, [sp, #28]
 800bdb8:	9a07      	ldr	r2, [sp, #28]
 800bdba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bdbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d028      	beq.n	800be16 <_dtoa_r+0xae6>
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	220a      	movs	r2, #10
 800bdca:	4658      	mov	r0, fp
 800bdcc:	f000 f9d6 	bl	800c17c <__multadd>
 800bdd0:	42af      	cmp	r7, r5
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	f04f 0300 	mov.w	r3, #0
 800bdd8:	f04f 020a 	mov.w	r2, #10
 800bddc:	4639      	mov	r1, r7
 800bdde:	4658      	mov	r0, fp
 800bde0:	d107      	bne.n	800bdf2 <_dtoa_r+0xac2>
 800bde2:	f000 f9cb 	bl	800c17c <__multadd>
 800bde6:	4607      	mov	r7, r0
 800bde8:	4605      	mov	r5, r0
 800bdea:	9b07      	ldr	r3, [sp, #28]
 800bdec:	3301      	adds	r3, #1
 800bdee:	9307      	str	r3, [sp, #28]
 800bdf0:	e774      	b.n	800bcdc <_dtoa_r+0x9ac>
 800bdf2:	f000 f9c3 	bl	800c17c <__multadd>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	4658      	mov	r0, fp
 800be00:	f000 f9bc 	bl	800c17c <__multadd>
 800be04:	4605      	mov	r5, r0
 800be06:	e7f0      	b.n	800bdea <_dtoa_r+0xaba>
 800be08:	9b00      	ldr	r3, [sp, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bfcc      	ite	gt
 800be0e:	461e      	movgt	r6, r3
 800be10:	2601      	movle	r6, #1
 800be12:	4456      	add	r6, sl
 800be14:	2700      	movs	r7, #0
 800be16:	4649      	mov	r1, r9
 800be18:	2201      	movs	r2, #1
 800be1a:	4658      	mov	r0, fp
 800be1c:	f000 fba4 	bl	800c568 <__lshift>
 800be20:	4621      	mov	r1, r4
 800be22:	4681      	mov	r9, r0
 800be24:	f000 fc0c 	bl	800c640 <__mcmp>
 800be28:	2800      	cmp	r0, #0
 800be2a:	dcb0      	bgt.n	800bd8e <_dtoa_r+0xa5e>
 800be2c:	d102      	bne.n	800be34 <_dtoa_r+0xb04>
 800be2e:	f018 0f01 	tst.w	r8, #1
 800be32:	d1ac      	bne.n	800bd8e <_dtoa_r+0xa5e>
 800be34:	4633      	mov	r3, r6
 800be36:	461e      	mov	r6, r3
 800be38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be3c:	2a30      	cmp	r2, #48	@ 0x30
 800be3e:	d0fa      	beq.n	800be36 <_dtoa_r+0xb06>
 800be40:	e5c2      	b.n	800b9c8 <_dtoa_r+0x698>
 800be42:	459a      	cmp	sl, r3
 800be44:	d1a4      	bne.n	800bd90 <_dtoa_r+0xa60>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	3301      	adds	r3, #1
 800be4a:	9304      	str	r3, [sp, #16]
 800be4c:	2331      	movs	r3, #49	@ 0x31
 800be4e:	f88a 3000 	strb.w	r3, [sl]
 800be52:	e5b9      	b.n	800b9c8 <_dtoa_r+0x698>
 800be54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800beb4 <_dtoa_r+0xb84>
 800be5a:	b11b      	cbz	r3, 800be64 <_dtoa_r+0xb34>
 800be5c:	f10a 0308 	add.w	r3, sl, #8
 800be60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	4650      	mov	r0, sl
 800be66:	b019      	add	sp, #100	@ 0x64
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6e:	2b01      	cmp	r3, #1
 800be70:	f77f ae37 	ble.w	800bae2 <_dtoa_r+0x7b2>
 800be74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be76:	930a      	str	r3, [sp, #40]	@ 0x28
 800be78:	2001      	movs	r0, #1
 800be7a:	e655      	b.n	800bb28 <_dtoa_r+0x7f8>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f77f aed6 	ble.w	800bc30 <_dtoa_r+0x900>
 800be84:	4656      	mov	r6, sl
 800be86:	4621      	mov	r1, r4
 800be88:	4648      	mov	r0, r9
 800be8a:	f7ff f9c9 	bl	800b220 <quorem>
 800be8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be92:	f806 8b01 	strb.w	r8, [r6], #1
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	eba6 020a 	sub.w	r2, r6, sl
 800be9c:	4293      	cmp	r3, r2
 800be9e:	ddb3      	ble.n	800be08 <_dtoa_r+0xad8>
 800bea0:	4649      	mov	r1, r9
 800bea2:	2300      	movs	r3, #0
 800bea4:	220a      	movs	r2, #10
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 f968 	bl	800c17c <__multadd>
 800beac:	4681      	mov	r9, r0
 800beae:	e7ea      	b.n	800be86 <_dtoa_r+0xb56>
 800beb0:	0800eb0f 	.word	0x0800eb0f
 800beb4:	0800ea93 	.word	0x0800ea93

0800beb8 <_free_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4605      	mov	r5, r0
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d041      	beq.n	800bf44 <_free_r+0x8c>
 800bec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec4:	1f0c      	subs	r4, r1, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfb8      	it	lt
 800beca:	18e4      	addlt	r4, r4, r3
 800becc:	f000 f8e8 	bl	800c0a0 <__malloc_lock>
 800bed0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf48 <_free_r+0x90>)
 800bed2:	6813      	ldr	r3, [r2, #0]
 800bed4:	b933      	cbnz	r3, 800bee4 <_free_r+0x2c>
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	6014      	str	r4, [r2, #0]
 800beda:	4628      	mov	r0, r5
 800bedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee0:	f000 b8e4 	b.w	800c0ac <__malloc_unlock>
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	d908      	bls.n	800befa <_free_r+0x42>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	1821      	adds	r1, r4, r0
 800beec:	428b      	cmp	r3, r1
 800beee:	bf01      	itttt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	1809      	addeq	r1, r1, r0
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	e7ed      	b.n	800bed6 <_free_r+0x1e>
 800befa:	461a      	mov	r2, r3
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	b10b      	cbz	r3, 800bf04 <_free_r+0x4c>
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d9fa      	bls.n	800befa <_free_r+0x42>
 800bf04:	6811      	ldr	r1, [r2, #0]
 800bf06:	1850      	adds	r0, r2, r1
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d10b      	bne.n	800bf24 <_free_r+0x6c>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	4401      	add	r1, r0
 800bf10:	1850      	adds	r0, r2, r1
 800bf12:	4283      	cmp	r3, r0
 800bf14:	6011      	str	r1, [r2, #0]
 800bf16:	d1e0      	bne.n	800beda <_free_r+0x22>
 800bf18:	6818      	ldr	r0, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	6053      	str	r3, [r2, #4]
 800bf1e:	4408      	add	r0, r1
 800bf20:	6010      	str	r0, [r2, #0]
 800bf22:	e7da      	b.n	800beda <_free_r+0x22>
 800bf24:	d902      	bls.n	800bf2c <_free_r+0x74>
 800bf26:	230c      	movs	r3, #12
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	e7d6      	b.n	800beda <_free_r+0x22>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	1821      	adds	r1, r4, r0
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf04      	itt	eq
 800bf34:	6819      	ldreq	r1, [r3, #0]
 800bf36:	685b      	ldreq	r3, [r3, #4]
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	bf04      	itt	eq
 800bf3c:	1809      	addeq	r1, r1, r0
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	6054      	str	r4, [r2, #4]
 800bf42:	e7ca      	b.n	800beda <_free_r+0x22>
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	20006dd4 	.word	0x20006dd4

0800bf4c <malloc>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <malloc+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f000 b825 	b.w	800bfa0 <_malloc_r>
 800bf56:	bf00      	nop
 800bf58:	20000030 	.word	0x20000030

0800bf5c <sbrk_aligned>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4e0f      	ldr	r6, [pc, #60]	@ (800bf9c <sbrk_aligned+0x40>)
 800bf60:	460c      	mov	r4, r1
 800bf62:	6831      	ldr	r1, [r6, #0]
 800bf64:	4605      	mov	r5, r0
 800bf66:	b911      	cbnz	r1, 800bf6e <sbrk_aligned+0x12>
 800bf68:	f001 fea8 	bl	800dcbc <_sbrk_r>
 800bf6c:	6030      	str	r0, [r6, #0]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f001 fea3 	bl	800dcbc <_sbrk_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d103      	bne.n	800bf82 <sbrk_aligned+0x26>
 800bf7a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf7e:	4620      	mov	r0, r4
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d0f8      	beq.n	800bf7e <sbrk_aligned+0x22>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f001 fe94 	bl	800dcbc <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d1f2      	bne.n	800bf7e <sbrk_aligned+0x22>
 800bf98:	e7ef      	b.n	800bf7a <sbrk_aligned+0x1e>
 800bf9a:	bf00      	nop
 800bf9c:	20006dd0 	.word	0x20006dd0

0800bfa0 <_malloc_r>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	1ccd      	adds	r5, r1, #3
 800bfa6:	f025 0503 	bic.w	r5, r5, #3
 800bfaa:	3508      	adds	r5, #8
 800bfac:	2d0c      	cmp	r5, #12
 800bfae:	bf38      	it	cc
 800bfb0:	250c      	movcc	r5, #12
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	db01      	blt.n	800bfbc <_malloc_r+0x1c>
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d904      	bls.n	800bfc6 <_malloc_r+0x26>
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c09c <_malloc_r+0xfc>
 800bfca:	f000 f869 	bl	800c0a0 <__malloc_lock>
 800bfce:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	bb44      	cbnz	r4, 800c028 <_malloc_r+0x88>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff ffbf 	bl	800bf5c <sbrk_aligned>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	d158      	bne.n	800c096 <_malloc_r+0xf6>
 800bfe4:	f8d8 4000 	ldr.w	r4, [r8]
 800bfe8:	4627      	mov	r7, r4
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	d143      	bne.n	800c076 <_malloc_r+0xd6>
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	d04b      	beq.n	800c08a <_malloc_r+0xea>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	4639      	mov	r1, r7
 800bff6:	4630      	mov	r0, r6
 800bff8:	eb04 0903 	add.w	r9, r4, r3
 800bffc:	f001 fe5e 	bl	800dcbc <_sbrk_r>
 800c000:	4581      	cmp	r9, r0
 800c002:	d142      	bne.n	800c08a <_malloc_r+0xea>
 800c004:	6821      	ldr	r1, [r4, #0]
 800c006:	1a6d      	subs	r5, r5, r1
 800c008:	4629      	mov	r1, r5
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ffa6 	bl	800bf5c <sbrk_aligned>
 800c010:	3001      	adds	r0, #1
 800c012:	d03a      	beq.n	800c08a <_malloc_r+0xea>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	442b      	add	r3, r5
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	f8d8 3000 	ldr.w	r3, [r8]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	bb62      	cbnz	r2, 800c07c <_malloc_r+0xdc>
 800c022:	f8c8 7000 	str.w	r7, [r8]
 800c026:	e00f      	b.n	800c048 <_malloc_r+0xa8>
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	1b52      	subs	r2, r2, r5
 800c02c:	d420      	bmi.n	800c070 <_malloc_r+0xd0>
 800c02e:	2a0b      	cmp	r2, #11
 800c030:	d917      	bls.n	800c062 <_malloc_r+0xc2>
 800c032:	1961      	adds	r1, r4, r5
 800c034:	42a3      	cmp	r3, r4
 800c036:	6025      	str	r5, [r4, #0]
 800c038:	bf18      	it	ne
 800c03a:	6059      	strne	r1, [r3, #4]
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	bf08      	it	eq
 800c040:	f8c8 1000 	streq.w	r1, [r8]
 800c044:	5162      	str	r2, [r4, r5]
 800c046:	604b      	str	r3, [r1, #4]
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f82f 	bl	800c0ac <__malloc_unlock>
 800c04e:	f104 000b 	add.w	r0, r4, #11
 800c052:	1d23      	adds	r3, r4, #4
 800c054:	f020 0007 	bic.w	r0, r0, #7
 800c058:	1ac2      	subs	r2, r0, r3
 800c05a:	bf1c      	itt	ne
 800c05c:	1a1b      	subne	r3, r3, r0
 800c05e:	50a3      	strne	r3, [r4, r2]
 800c060:	e7af      	b.n	800bfc2 <_malloc_r+0x22>
 800c062:	6862      	ldr	r2, [r4, #4]
 800c064:	42a3      	cmp	r3, r4
 800c066:	bf0c      	ite	eq
 800c068:	f8c8 2000 	streq.w	r2, [r8]
 800c06c:	605a      	strne	r2, [r3, #4]
 800c06e:	e7eb      	b.n	800c048 <_malloc_r+0xa8>
 800c070:	4623      	mov	r3, r4
 800c072:	6864      	ldr	r4, [r4, #4]
 800c074:	e7ae      	b.n	800bfd4 <_malloc_r+0x34>
 800c076:	463c      	mov	r4, r7
 800c078:	687f      	ldr	r7, [r7, #4]
 800c07a:	e7b6      	b.n	800bfea <_malloc_r+0x4a>
 800c07c:	461a      	mov	r2, r3
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	42a3      	cmp	r3, r4
 800c082:	d1fb      	bne.n	800c07c <_malloc_r+0xdc>
 800c084:	2300      	movs	r3, #0
 800c086:	6053      	str	r3, [r2, #4]
 800c088:	e7de      	b.n	800c048 <_malloc_r+0xa8>
 800c08a:	230c      	movs	r3, #12
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	4630      	mov	r0, r6
 800c090:	f000 f80c 	bl	800c0ac <__malloc_unlock>
 800c094:	e794      	b.n	800bfc0 <_malloc_r+0x20>
 800c096:	6005      	str	r5, [r0, #0]
 800c098:	e7d6      	b.n	800c048 <_malloc_r+0xa8>
 800c09a:	bf00      	nop
 800c09c:	20006dd4 	.word	0x20006dd4

0800c0a0 <__malloc_lock>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	@ (800c0a8 <__malloc_lock+0x8>)
 800c0a2:	f7ff b89e 	b.w	800b1e2 <__retarget_lock_acquire_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	20006dcc 	.word	0x20006dcc

0800c0ac <__malloc_unlock>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	@ (800c0b4 <__malloc_unlock+0x8>)
 800c0ae:	f7ff b899 	b.w	800b1e4 <__retarget_lock_release_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	20006dcc 	.word	0x20006dcc

0800c0b8 <_Balloc>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	69c6      	ldr	r6, [r0, #28]
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	b976      	cbnz	r6, 800c0e0 <_Balloc+0x28>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ff42 	bl	800bf4c <malloc>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	61e0      	str	r0, [r4, #28]
 800c0cc:	b920      	cbnz	r0, 800c0d8 <_Balloc+0x20>
 800c0ce:	4b18      	ldr	r3, [pc, #96]	@ (800c130 <_Balloc+0x78>)
 800c0d0:	4818      	ldr	r0, [pc, #96]	@ (800c134 <_Balloc+0x7c>)
 800c0d2:	216b      	movs	r1, #107	@ 0x6b
 800c0d4:	f001 fe0c 	bl	800dcf0 <__assert_func>
 800c0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0dc:	6006      	str	r6, [r0, #0]
 800c0de:	60c6      	str	r6, [r0, #12]
 800c0e0:	69e6      	ldr	r6, [r4, #28]
 800c0e2:	68f3      	ldr	r3, [r6, #12]
 800c0e4:	b183      	cbz	r3, 800c108 <_Balloc+0x50>
 800c0e6:	69e3      	ldr	r3, [r4, #28]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ee:	b9b8      	cbnz	r0, 800c120 <_Balloc+0x68>
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c0f6:	1d72      	adds	r2, r6, #5
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f001 fe16 	bl	800dd2c <_calloc_r>
 800c100:	b160      	cbz	r0, 800c11c <_Balloc+0x64>
 800c102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c106:	e00e      	b.n	800c126 <_Balloc+0x6e>
 800c108:	2221      	movs	r2, #33	@ 0x21
 800c10a:	2104      	movs	r1, #4
 800c10c:	4620      	mov	r0, r4
 800c10e:	f001 fe0d 	bl	800dd2c <_calloc_r>
 800c112:	69e3      	ldr	r3, [r4, #28]
 800c114:	60f0      	str	r0, [r6, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e4      	bne.n	800c0e6 <_Balloc+0x2e>
 800c11c:	2000      	movs	r0, #0
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	6802      	ldr	r2, [r0, #0]
 800c122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c126:	2300      	movs	r3, #0
 800c128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c12c:	e7f7      	b.n	800c11e <_Balloc+0x66>
 800c12e:	bf00      	nop
 800c130:	0800eaa0 	.word	0x0800eaa0
 800c134:	0800eb20 	.word	0x0800eb20

0800c138 <_Bfree>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	69c6      	ldr	r6, [r0, #28]
 800c13c:	4605      	mov	r5, r0
 800c13e:	460c      	mov	r4, r1
 800c140:	b976      	cbnz	r6, 800c160 <_Bfree+0x28>
 800c142:	2010      	movs	r0, #16
 800c144:	f7ff ff02 	bl	800bf4c <malloc>
 800c148:	4602      	mov	r2, r0
 800c14a:	61e8      	str	r0, [r5, #28]
 800c14c:	b920      	cbnz	r0, 800c158 <_Bfree+0x20>
 800c14e:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <_Bfree+0x3c>)
 800c150:	4809      	ldr	r0, [pc, #36]	@ (800c178 <_Bfree+0x40>)
 800c152:	218f      	movs	r1, #143	@ 0x8f
 800c154:	f001 fdcc 	bl	800dcf0 <__assert_func>
 800c158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c15c:	6006      	str	r6, [r0, #0]
 800c15e:	60c6      	str	r6, [r0, #12]
 800c160:	b13c      	cbz	r4, 800c172 <_Bfree+0x3a>
 800c162:	69eb      	ldr	r3, [r5, #28]
 800c164:	6862      	ldr	r2, [r4, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c16c:	6021      	str	r1, [r4, #0]
 800c16e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	0800eaa0 	.word	0x0800eaa0
 800c178:	0800eb20 	.word	0x0800eb20

0800c17c <__multadd>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	690d      	ldr	r5, [r1, #16]
 800c182:	4607      	mov	r7, r0
 800c184:	460c      	mov	r4, r1
 800c186:	461e      	mov	r6, r3
 800c188:	f101 0c14 	add.w	ip, r1, #20
 800c18c:	2000      	movs	r0, #0
 800c18e:	f8dc 3000 	ldr.w	r3, [ip]
 800c192:	b299      	uxth	r1, r3
 800c194:	fb02 6101 	mla	r1, r2, r1, r6
 800c198:	0c1e      	lsrs	r6, r3, #16
 800c19a:	0c0b      	lsrs	r3, r1, #16
 800c19c:	fb02 3306 	mla	r3, r2, r6, r3
 800c1a0:	b289      	uxth	r1, r1
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1a8:	4285      	cmp	r5, r0
 800c1aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1b2:	dcec      	bgt.n	800c18e <__multadd+0x12>
 800c1b4:	b30e      	cbz	r6, 800c1fa <__multadd+0x7e>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dc19      	bgt.n	800c1f0 <__multadd+0x74>
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4638      	mov	r0, r7
 800c1c0:	3101      	adds	r1, #1
 800c1c2:	f7ff ff79 	bl	800c0b8 <_Balloc>
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__multadd+0x5a>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c200 <__multadd+0x84>)
 800c1ce:	480d      	ldr	r0, [pc, #52]	@ (800c204 <__multadd+0x88>)
 800c1d0:	21ba      	movs	r1, #186	@ 0xba
 800c1d2:	f001 fd8d 	bl	800dcf0 <__assert_func>
 800c1d6:	6922      	ldr	r2, [r4, #16]
 800c1d8:	3202      	adds	r2, #2
 800c1da:	f104 010c 	add.w	r1, r4, #12
 800c1de:	0092      	lsls	r2, r2, #2
 800c1e0:	300c      	adds	r0, #12
 800c1e2:	f7ff f808 	bl	800b1f6 <memcpy>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ffa5 	bl	800c138 <_Bfree>
 800c1ee:	4644      	mov	r4, r8
 800c1f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1f4:	3501      	adds	r5, #1
 800c1f6:	615e      	str	r6, [r3, #20]
 800c1f8:	6125      	str	r5, [r4, #16]
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	0800eb0f 	.word	0x0800eb0f
 800c204:	0800eb20 	.word	0x0800eb20

0800c208 <__s2b>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	460c      	mov	r4, r1
 800c20e:	4615      	mov	r5, r2
 800c210:	461f      	mov	r7, r3
 800c212:	2209      	movs	r2, #9
 800c214:	3308      	adds	r3, #8
 800c216:	4606      	mov	r6, r0
 800c218:	fb93 f3f2 	sdiv	r3, r3, r2
 800c21c:	2100      	movs	r1, #0
 800c21e:	2201      	movs	r2, #1
 800c220:	429a      	cmp	r2, r3
 800c222:	db09      	blt.n	800c238 <__s2b+0x30>
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff ff47 	bl	800c0b8 <_Balloc>
 800c22a:	b940      	cbnz	r0, 800c23e <__s2b+0x36>
 800c22c:	4602      	mov	r2, r0
 800c22e:	4b19      	ldr	r3, [pc, #100]	@ (800c294 <__s2b+0x8c>)
 800c230:	4819      	ldr	r0, [pc, #100]	@ (800c298 <__s2b+0x90>)
 800c232:	21d3      	movs	r1, #211	@ 0xd3
 800c234:	f001 fd5c 	bl	800dcf0 <__assert_func>
 800c238:	0052      	lsls	r2, r2, #1
 800c23a:	3101      	adds	r1, #1
 800c23c:	e7f0      	b.n	800c220 <__s2b+0x18>
 800c23e:	9b08      	ldr	r3, [sp, #32]
 800c240:	6143      	str	r3, [r0, #20]
 800c242:	2d09      	cmp	r5, #9
 800c244:	f04f 0301 	mov.w	r3, #1
 800c248:	6103      	str	r3, [r0, #16]
 800c24a:	dd16      	ble.n	800c27a <__s2b+0x72>
 800c24c:	f104 0909 	add.w	r9, r4, #9
 800c250:	46c8      	mov	r8, r9
 800c252:	442c      	add	r4, r5
 800c254:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c258:	4601      	mov	r1, r0
 800c25a:	3b30      	subs	r3, #48	@ 0x30
 800c25c:	220a      	movs	r2, #10
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff ff8c 	bl	800c17c <__multadd>
 800c264:	45a0      	cmp	r8, r4
 800c266:	d1f5      	bne.n	800c254 <__s2b+0x4c>
 800c268:	f1a5 0408 	sub.w	r4, r5, #8
 800c26c:	444c      	add	r4, r9
 800c26e:	1b2d      	subs	r5, r5, r4
 800c270:	1963      	adds	r3, r4, r5
 800c272:	42bb      	cmp	r3, r7
 800c274:	db04      	blt.n	800c280 <__s2b+0x78>
 800c276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27a:	340a      	adds	r4, #10
 800c27c:	2509      	movs	r5, #9
 800c27e:	e7f6      	b.n	800c26e <__s2b+0x66>
 800c280:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c284:	4601      	mov	r1, r0
 800c286:	3b30      	subs	r3, #48	@ 0x30
 800c288:	220a      	movs	r2, #10
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7ff ff76 	bl	800c17c <__multadd>
 800c290:	e7ee      	b.n	800c270 <__s2b+0x68>
 800c292:	bf00      	nop
 800c294:	0800eb0f 	.word	0x0800eb0f
 800c298:	0800eb20 	.word	0x0800eb20

0800c29c <__hi0bits>:
 800c29c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	bf36      	itet	cc
 800c2a4:	0403      	lslcc	r3, r0, #16
 800c2a6:	2000      	movcs	r0, #0
 800c2a8:	2010      	movcc	r0, #16
 800c2aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2ae:	bf3c      	itt	cc
 800c2b0:	021b      	lslcc	r3, r3, #8
 800c2b2:	3008      	addcc	r0, #8
 800c2b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2b8:	bf3c      	itt	cc
 800c2ba:	011b      	lslcc	r3, r3, #4
 800c2bc:	3004      	addcc	r0, #4
 800c2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2c2:	bf3c      	itt	cc
 800c2c4:	009b      	lslcc	r3, r3, #2
 800c2c6:	3002      	addcc	r0, #2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	db05      	blt.n	800c2d8 <__hi0bits+0x3c>
 800c2cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2d0:	f100 0001 	add.w	r0, r0, #1
 800c2d4:	bf08      	it	eq
 800c2d6:	2020      	moveq	r0, #32
 800c2d8:	4770      	bx	lr

0800c2da <__lo0bits>:
 800c2da:	6803      	ldr	r3, [r0, #0]
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f013 0007 	ands.w	r0, r3, #7
 800c2e2:	d00b      	beq.n	800c2fc <__lo0bits+0x22>
 800c2e4:	07d9      	lsls	r1, r3, #31
 800c2e6:	d421      	bmi.n	800c32c <__lo0bits+0x52>
 800c2e8:	0798      	lsls	r0, r3, #30
 800c2ea:	bf49      	itett	mi
 800c2ec:	085b      	lsrmi	r3, r3, #1
 800c2ee:	089b      	lsrpl	r3, r3, #2
 800c2f0:	2001      	movmi	r0, #1
 800c2f2:	6013      	strmi	r3, [r2, #0]
 800c2f4:	bf5c      	itt	pl
 800c2f6:	6013      	strpl	r3, [r2, #0]
 800c2f8:	2002      	movpl	r0, #2
 800c2fa:	4770      	bx	lr
 800c2fc:	b299      	uxth	r1, r3
 800c2fe:	b909      	cbnz	r1, 800c304 <__lo0bits+0x2a>
 800c300:	0c1b      	lsrs	r3, r3, #16
 800c302:	2010      	movs	r0, #16
 800c304:	b2d9      	uxtb	r1, r3
 800c306:	b909      	cbnz	r1, 800c30c <__lo0bits+0x32>
 800c308:	3008      	adds	r0, #8
 800c30a:	0a1b      	lsrs	r3, r3, #8
 800c30c:	0719      	lsls	r1, r3, #28
 800c30e:	bf04      	itt	eq
 800c310:	091b      	lsreq	r3, r3, #4
 800c312:	3004      	addeq	r0, #4
 800c314:	0799      	lsls	r1, r3, #30
 800c316:	bf04      	itt	eq
 800c318:	089b      	lsreq	r3, r3, #2
 800c31a:	3002      	addeq	r0, #2
 800c31c:	07d9      	lsls	r1, r3, #31
 800c31e:	d403      	bmi.n	800c328 <__lo0bits+0x4e>
 800c320:	085b      	lsrs	r3, r3, #1
 800c322:	f100 0001 	add.w	r0, r0, #1
 800c326:	d003      	beq.n	800c330 <__lo0bits+0x56>
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	4770      	bx	lr
 800c32c:	2000      	movs	r0, #0
 800c32e:	4770      	bx	lr
 800c330:	2020      	movs	r0, #32
 800c332:	4770      	bx	lr

0800c334 <__i2b>:
 800c334:	b510      	push	{r4, lr}
 800c336:	460c      	mov	r4, r1
 800c338:	2101      	movs	r1, #1
 800c33a:	f7ff febd 	bl	800c0b8 <_Balloc>
 800c33e:	4602      	mov	r2, r0
 800c340:	b928      	cbnz	r0, 800c34e <__i2b+0x1a>
 800c342:	4b05      	ldr	r3, [pc, #20]	@ (800c358 <__i2b+0x24>)
 800c344:	4805      	ldr	r0, [pc, #20]	@ (800c35c <__i2b+0x28>)
 800c346:	f240 1145 	movw	r1, #325	@ 0x145
 800c34a:	f001 fcd1 	bl	800dcf0 <__assert_func>
 800c34e:	2301      	movs	r3, #1
 800c350:	6144      	str	r4, [r0, #20]
 800c352:	6103      	str	r3, [r0, #16]
 800c354:	bd10      	pop	{r4, pc}
 800c356:	bf00      	nop
 800c358:	0800eb0f 	.word	0x0800eb0f
 800c35c:	0800eb20 	.word	0x0800eb20

0800c360 <__multiply>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	4614      	mov	r4, r2
 800c366:	690a      	ldr	r2, [r1, #16]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	bfa8      	it	ge
 800c36e:	4623      	movge	r3, r4
 800c370:	460f      	mov	r7, r1
 800c372:	bfa4      	itt	ge
 800c374:	460c      	movge	r4, r1
 800c376:	461f      	movge	r7, r3
 800c378:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c37c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	6861      	ldr	r1, [r4, #4]
 800c384:	eb0a 0609 	add.w	r6, sl, r9
 800c388:	42b3      	cmp	r3, r6
 800c38a:	b085      	sub	sp, #20
 800c38c:	bfb8      	it	lt
 800c38e:	3101      	addlt	r1, #1
 800c390:	f7ff fe92 	bl	800c0b8 <_Balloc>
 800c394:	b930      	cbnz	r0, 800c3a4 <__multiply+0x44>
 800c396:	4602      	mov	r2, r0
 800c398:	4b44      	ldr	r3, [pc, #272]	@ (800c4ac <__multiply+0x14c>)
 800c39a:	4845      	ldr	r0, [pc, #276]	@ (800c4b0 <__multiply+0x150>)
 800c39c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3a0:	f001 fca6 	bl	800dcf0 <__assert_func>
 800c3a4:	f100 0514 	add.w	r5, r0, #20
 800c3a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d321      	bcc.n	800c3f8 <__multiply+0x98>
 800c3b4:	f107 0114 	add.w	r1, r7, #20
 800c3b8:	f104 0214 	add.w	r2, r4, #20
 800c3bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	1b13      	subs	r3, r2, r4
 800c3c8:	3b15      	subs	r3, #21
 800c3ca:	f023 0303 	bic.w	r3, r3, #3
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	f104 0715 	add.w	r7, r4, #21
 800c3d4:	42ba      	cmp	r2, r7
 800c3d6:	bf38      	it	cc
 800c3d8:	2304      	movcc	r3, #4
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	9b02      	ldr	r3, [sp, #8]
 800c3de:	9103      	str	r1, [sp, #12]
 800c3e0:	428b      	cmp	r3, r1
 800c3e2:	d80c      	bhi.n	800c3fe <__multiply+0x9e>
 800c3e4:	2e00      	cmp	r6, #0
 800c3e6:	dd03      	ble.n	800c3f0 <__multiply+0x90>
 800c3e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d05b      	beq.n	800c4a8 <__multiply+0x148>
 800c3f0:	6106      	str	r6, [r0, #16]
 800c3f2:	b005      	add	sp, #20
 800c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f8:	f843 2b04 	str.w	r2, [r3], #4
 800c3fc:	e7d8      	b.n	800c3b0 <__multiply+0x50>
 800c3fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800c402:	f1ba 0f00 	cmp.w	sl, #0
 800c406:	d024      	beq.n	800c452 <__multiply+0xf2>
 800c408:	f104 0e14 	add.w	lr, r4, #20
 800c40c:	46a9      	mov	r9, r5
 800c40e:	f04f 0c00 	mov.w	ip, #0
 800c412:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c416:	f8d9 3000 	ldr.w	r3, [r9]
 800c41a:	fa1f fb87 	uxth.w	fp, r7
 800c41e:	b29b      	uxth	r3, r3
 800c420:	fb0a 330b 	mla	r3, sl, fp, r3
 800c424:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c428:	f8d9 7000 	ldr.w	r7, [r9]
 800c42c:	4463      	add	r3, ip
 800c42e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c432:	fb0a c70b 	mla	r7, sl, fp, ip
 800c436:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c440:	4572      	cmp	r2, lr
 800c442:	f849 3b04 	str.w	r3, [r9], #4
 800c446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c44a:	d8e2      	bhi.n	800c412 <__multiply+0xb2>
 800c44c:	9b01      	ldr	r3, [sp, #4]
 800c44e:	f845 c003 	str.w	ip, [r5, r3]
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c458:	3104      	adds	r1, #4
 800c45a:	f1b9 0f00 	cmp.w	r9, #0
 800c45e:	d021      	beq.n	800c4a4 <__multiply+0x144>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	f104 0c14 	add.w	ip, r4, #20
 800c466:	46ae      	mov	lr, r5
 800c468:	f04f 0a00 	mov.w	sl, #0
 800c46c:	f8bc b000 	ldrh.w	fp, [ip]
 800c470:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c474:	fb09 770b 	mla	r7, r9, fp, r7
 800c478:	4457      	add	r7, sl
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c480:	f84e 3b04 	str.w	r3, [lr], #4
 800c484:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c48c:	f8be 3000 	ldrh.w	r3, [lr]
 800c490:	fb09 330a 	mla	r3, r9, sl, r3
 800c494:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c498:	4562      	cmp	r2, ip
 800c49a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c49e:	d8e5      	bhi.n	800c46c <__multiply+0x10c>
 800c4a0:	9f01      	ldr	r7, [sp, #4]
 800c4a2:	51eb      	str	r3, [r5, r7]
 800c4a4:	3504      	adds	r5, #4
 800c4a6:	e799      	b.n	800c3dc <__multiply+0x7c>
 800c4a8:	3e01      	subs	r6, #1
 800c4aa:	e79b      	b.n	800c3e4 <__multiply+0x84>
 800c4ac:	0800eb0f 	.word	0x0800eb0f
 800c4b0:	0800eb20 	.word	0x0800eb20

0800c4b4 <__pow5mult>:
 800c4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	4615      	mov	r5, r2
 800c4ba:	f012 0203 	ands.w	r2, r2, #3
 800c4be:	4607      	mov	r7, r0
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	d007      	beq.n	800c4d4 <__pow5mult+0x20>
 800c4c4:	4c25      	ldr	r4, [pc, #148]	@ (800c55c <__pow5mult+0xa8>)
 800c4c6:	3a01      	subs	r2, #1
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ce:	f7ff fe55 	bl	800c17c <__multadd>
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	10ad      	asrs	r5, r5, #2
 800c4d6:	d03d      	beq.n	800c554 <__pow5mult+0xa0>
 800c4d8:	69fc      	ldr	r4, [r7, #28]
 800c4da:	b97c      	cbnz	r4, 800c4fc <__pow5mult+0x48>
 800c4dc:	2010      	movs	r0, #16
 800c4de:	f7ff fd35 	bl	800bf4c <malloc>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	61f8      	str	r0, [r7, #28]
 800c4e6:	b928      	cbnz	r0, 800c4f4 <__pow5mult+0x40>
 800c4e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c560 <__pow5mult+0xac>)
 800c4ea:	481e      	ldr	r0, [pc, #120]	@ (800c564 <__pow5mult+0xb0>)
 800c4ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4f0:	f001 fbfe 	bl	800dcf0 <__assert_func>
 800c4f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4f8:	6004      	str	r4, [r0, #0]
 800c4fa:	60c4      	str	r4, [r0, #12]
 800c4fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c504:	b94c      	cbnz	r4, 800c51a <__pow5mult+0x66>
 800c506:	f240 2171 	movw	r1, #625	@ 0x271
 800c50a:	4638      	mov	r0, r7
 800c50c:	f7ff ff12 	bl	800c334 <__i2b>
 800c510:	2300      	movs	r3, #0
 800c512:	f8c8 0008 	str.w	r0, [r8, #8]
 800c516:	4604      	mov	r4, r0
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	f04f 0900 	mov.w	r9, #0
 800c51e:	07eb      	lsls	r3, r5, #31
 800c520:	d50a      	bpl.n	800c538 <__pow5mult+0x84>
 800c522:	4631      	mov	r1, r6
 800c524:	4622      	mov	r2, r4
 800c526:	4638      	mov	r0, r7
 800c528:	f7ff ff1a 	bl	800c360 <__multiply>
 800c52c:	4631      	mov	r1, r6
 800c52e:	4680      	mov	r8, r0
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff fe01 	bl	800c138 <_Bfree>
 800c536:	4646      	mov	r6, r8
 800c538:	106d      	asrs	r5, r5, #1
 800c53a:	d00b      	beq.n	800c554 <__pow5mult+0xa0>
 800c53c:	6820      	ldr	r0, [r4, #0]
 800c53e:	b938      	cbnz	r0, 800c550 <__pow5mult+0x9c>
 800c540:	4622      	mov	r2, r4
 800c542:	4621      	mov	r1, r4
 800c544:	4638      	mov	r0, r7
 800c546:	f7ff ff0b 	bl	800c360 <__multiply>
 800c54a:	6020      	str	r0, [r4, #0]
 800c54c:	f8c0 9000 	str.w	r9, [r0]
 800c550:	4604      	mov	r4, r0
 800c552:	e7e4      	b.n	800c51e <__pow5mult+0x6a>
 800c554:	4630      	mov	r0, r6
 800c556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55a:	bf00      	nop
 800c55c:	0800eb7c 	.word	0x0800eb7c
 800c560:	0800eaa0 	.word	0x0800eaa0
 800c564:	0800eb20 	.word	0x0800eb20

0800c568 <__lshift>:
 800c568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56c:	460c      	mov	r4, r1
 800c56e:	6849      	ldr	r1, [r1, #4]
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	4607      	mov	r7, r0
 800c57a:	4691      	mov	r9, r2
 800c57c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c580:	f108 0601 	add.w	r6, r8, #1
 800c584:	42b3      	cmp	r3, r6
 800c586:	db0b      	blt.n	800c5a0 <__lshift+0x38>
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff fd95 	bl	800c0b8 <_Balloc>
 800c58e:	4605      	mov	r5, r0
 800c590:	b948      	cbnz	r0, 800c5a6 <__lshift+0x3e>
 800c592:	4602      	mov	r2, r0
 800c594:	4b28      	ldr	r3, [pc, #160]	@ (800c638 <__lshift+0xd0>)
 800c596:	4829      	ldr	r0, [pc, #164]	@ (800c63c <__lshift+0xd4>)
 800c598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c59c:	f001 fba8 	bl	800dcf0 <__assert_func>
 800c5a0:	3101      	adds	r1, #1
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	e7ee      	b.n	800c584 <__lshift+0x1c>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f100 0114 	add.w	r1, r0, #20
 800c5ac:	f100 0210 	add.w	r2, r0, #16
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	4553      	cmp	r3, sl
 800c5b4:	db33      	blt.n	800c61e <__lshift+0xb6>
 800c5b6:	6920      	ldr	r0, [r4, #16]
 800c5b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5bc:	f104 0314 	add.w	r3, r4, #20
 800c5c0:	f019 091f 	ands.w	r9, r9, #31
 800c5c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5cc:	d02b      	beq.n	800c626 <__lshift+0xbe>
 800c5ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c5d2:	468a      	mov	sl, r1
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	fa00 f009 	lsl.w	r0, r0, r9
 800c5dc:	4310      	orrs	r0, r2
 800c5de:	f84a 0b04 	str.w	r0, [sl], #4
 800c5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e6:	459c      	cmp	ip, r3
 800c5e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5ec:	d8f3      	bhi.n	800c5d6 <__lshift+0x6e>
 800c5ee:	ebac 0304 	sub.w	r3, ip, r4
 800c5f2:	3b15      	subs	r3, #21
 800c5f4:	f023 0303 	bic.w	r3, r3, #3
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	f104 0015 	add.w	r0, r4, #21
 800c5fe:	4584      	cmp	ip, r0
 800c600:	bf38      	it	cc
 800c602:	2304      	movcc	r3, #4
 800c604:	50ca      	str	r2, [r1, r3]
 800c606:	b10a      	cbz	r2, 800c60c <__lshift+0xa4>
 800c608:	f108 0602 	add.w	r6, r8, #2
 800c60c:	3e01      	subs	r6, #1
 800c60e:	4638      	mov	r0, r7
 800c610:	612e      	str	r6, [r5, #16]
 800c612:	4621      	mov	r1, r4
 800c614:	f7ff fd90 	bl	800c138 <_Bfree>
 800c618:	4628      	mov	r0, r5
 800c61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c622:	3301      	adds	r3, #1
 800c624:	e7c5      	b.n	800c5b2 <__lshift+0x4a>
 800c626:	3904      	subs	r1, #4
 800c628:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c630:	459c      	cmp	ip, r3
 800c632:	d8f9      	bhi.n	800c628 <__lshift+0xc0>
 800c634:	e7ea      	b.n	800c60c <__lshift+0xa4>
 800c636:	bf00      	nop
 800c638:	0800eb0f 	.word	0x0800eb0f
 800c63c:	0800eb20 	.word	0x0800eb20

0800c640 <__mcmp>:
 800c640:	690a      	ldr	r2, [r1, #16]
 800c642:	4603      	mov	r3, r0
 800c644:	6900      	ldr	r0, [r0, #16]
 800c646:	1a80      	subs	r0, r0, r2
 800c648:	b530      	push	{r4, r5, lr}
 800c64a:	d10e      	bne.n	800c66a <__mcmp+0x2a>
 800c64c:	3314      	adds	r3, #20
 800c64e:	3114      	adds	r1, #20
 800c650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c65c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c660:	4295      	cmp	r5, r2
 800c662:	d003      	beq.n	800c66c <__mcmp+0x2c>
 800c664:	d205      	bcs.n	800c672 <__mcmp+0x32>
 800c666:	f04f 30ff 	mov.w	r0, #4294967295
 800c66a:	bd30      	pop	{r4, r5, pc}
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d3f3      	bcc.n	800c658 <__mcmp+0x18>
 800c670:	e7fb      	b.n	800c66a <__mcmp+0x2a>
 800c672:	2001      	movs	r0, #1
 800c674:	e7f9      	b.n	800c66a <__mcmp+0x2a>
	...

0800c678 <__mdiff>:
 800c678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	4689      	mov	r9, r1
 800c67e:	4606      	mov	r6, r0
 800c680:	4611      	mov	r1, r2
 800c682:	4648      	mov	r0, r9
 800c684:	4614      	mov	r4, r2
 800c686:	f7ff ffdb 	bl	800c640 <__mcmp>
 800c68a:	1e05      	subs	r5, r0, #0
 800c68c:	d112      	bne.n	800c6b4 <__mdiff+0x3c>
 800c68e:	4629      	mov	r1, r5
 800c690:	4630      	mov	r0, r6
 800c692:	f7ff fd11 	bl	800c0b8 <_Balloc>
 800c696:	4602      	mov	r2, r0
 800c698:	b928      	cbnz	r0, 800c6a6 <__mdiff+0x2e>
 800c69a:	4b3f      	ldr	r3, [pc, #252]	@ (800c798 <__mdiff+0x120>)
 800c69c:	f240 2137 	movw	r1, #567	@ 0x237
 800c6a0:	483e      	ldr	r0, [pc, #248]	@ (800c79c <__mdiff+0x124>)
 800c6a2:	f001 fb25 	bl	800dcf0 <__assert_func>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	b003      	add	sp, #12
 800c6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b4:	bfbc      	itt	lt
 800c6b6:	464b      	movlt	r3, r9
 800c6b8:	46a1      	movlt	r9, r4
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6c0:	bfba      	itte	lt
 800c6c2:	461c      	movlt	r4, r3
 800c6c4:	2501      	movlt	r5, #1
 800c6c6:	2500      	movge	r5, #0
 800c6c8:	f7ff fcf6 	bl	800c0b8 <_Balloc>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	b918      	cbnz	r0, 800c6d8 <__mdiff+0x60>
 800c6d0:	4b31      	ldr	r3, [pc, #196]	@ (800c798 <__mdiff+0x120>)
 800c6d2:	f240 2145 	movw	r1, #581	@ 0x245
 800c6d6:	e7e3      	b.n	800c6a0 <__mdiff+0x28>
 800c6d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6dc:	6926      	ldr	r6, [r4, #16]
 800c6de:	60c5      	str	r5, [r0, #12]
 800c6e0:	f109 0310 	add.w	r3, r9, #16
 800c6e4:	f109 0514 	add.w	r5, r9, #20
 800c6e8:	f104 0e14 	add.w	lr, r4, #20
 800c6ec:	f100 0b14 	add.w	fp, r0, #20
 800c6f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	46d9      	mov	r9, fp
 800c6fc:	f04f 0c00 	mov.w	ip, #0
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	fa1f f38a 	uxth.w	r3, sl
 800c710:	4619      	mov	r1, r3
 800c712:	b283      	uxth	r3, r0
 800c714:	1acb      	subs	r3, r1, r3
 800c716:	0c00      	lsrs	r0, r0, #16
 800c718:	4463      	add	r3, ip
 800c71a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c71e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c722:	b29b      	uxth	r3, r3
 800c724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c728:	4576      	cmp	r6, lr
 800c72a:	f849 3b04 	str.w	r3, [r9], #4
 800c72e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c732:	d8e5      	bhi.n	800c700 <__mdiff+0x88>
 800c734:	1b33      	subs	r3, r6, r4
 800c736:	3b15      	subs	r3, #21
 800c738:	f023 0303 	bic.w	r3, r3, #3
 800c73c:	3415      	adds	r4, #21
 800c73e:	3304      	adds	r3, #4
 800c740:	42a6      	cmp	r6, r4
 800c742:	bf38      	it	cc
 800c744:	2304      	movcc	r3, #4
 800c746:	441d      	add	r5, r3
 800c748:	445b      	add	r3, fp
 800c74a:	461e      	mov	r6, r3
 800c74c:	462c      	mov	r4, r5
 800c74e:	4544      	cmp	r4, r8
 800c750:	d30e      	bcc.n	800c770 <__mdiff+0xf8>
 800c752:	f108 0103 	add.w	r1, r8, #3
 800c756:	1b49      	subs	r1, r1, r5
 800c758:	f021 0103 	bic.w	r1, r1, #3
 800c75c:	3d03      	subs	r5, #3
 800c75e:	45a8      	cmp	r8, r5
 800c760:	bf38      	it	cc
 800c762:	2100      	movcc	r1, #0
 800c764:	440b      	add	r3, r1
 800c766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c76a:	b191      	cbz	r1, 800c792 <__mdiff+0x11a>
 800c76c:	6117      	str	r7, [r2, #16]
 800c76e:	e79d      	b.n	800c6ac <__mdiff+0x34>
 800c770:	f854 1b04 	ldr.w	r1, [r4], #4
 800c774:	46e6      	mov	lr, ip
 800c776:	0c08      	lsrs	r0, r1, #16
 800c778:	fa1c fc81 	uxtah	ip, ip, r1
 800c77c:	4471      	add	r1, lr
 800c77e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c782:	b289      	uxth	r1, r1
 800c784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c788:	f846 1b04 	str.w	r1, [r6], #4
 800c78c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c790:	e7dd      	b.n	800c74e <__mdiff+0xd6>
 800c792:	3f01      	subs	r7, #1
 800c794:	e7e7      	b.n	800c766 <__mdiff+0xee>
 800c796:	bf00      	nop
 800c798:	0800eb0f 	.word	0x0800eb0f
 800c79c:	0800eb20 	.word	0x0800eb20

0800c7a0 <__ulp>:
 800c7a0:	b082      	sub	sp, #8
 800c7a2:	ed8d 0b00 	vstr	d0, [sp]
 800c7a6:	9a01      	ldr	r2, [sp, #4]
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e8 <__ulp+0x48>)
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dc08      	bgt.n	800c7c6 <__ulp+0x26>
 800c7b4:	425b      	negs	r3, r3
 800c7b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7be:	da04      	bge.n	800c7ca <__ulp+0x2a>
 800c7c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7c4:	4113      	asrs	r3, r2
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	e008      	b.n	800c7dc <__ulp+0x3c>
 800c7ca:	f1a2 0314 	sub.w	r3, r2, #20
 800c7ce:	2b1e      	cmp	r3, #30
 800c7d0:	bfda      	itte	le
 800c7d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7d6:	40da      	lsrle	r2, r3
 800c7d8:	2201      	movgt	r2, #1
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4610      	mov	r0, r2
 800c7e0:	ec41 0b10 	vmov	d0, r0, r1
 800c7e4:	b002      	add	sp, #8
 800c7e6:	4770      	bx	lr
 800c7e8:	7ff00000 	.word	0x7ff00000

0800c7ec <__b2d>:
 800c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f0:	6906      	ldr	r6, [r0, #16]
 800c7f2:	f100 0814 	add.w	r8, r0, #20
 800c7f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7fa:	1f37      	subs	r7, r6, #4
 800c7fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c800:	4610      	mov	r0, r2
 800c802:	f7ff fd4b 	bl	800c29c <__hi0bits>
 800c806:	f1c0 0320 	rsb	r3, r0, #32
 800c80a:	280a      	cmp	r0, #10
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	491b      	ldr	r1, [pc, #108]	@ (800c87c <__b2d+0x90>)
 800c810:	dc15      	bgt.n	800c83e <__b2d+0x52>
 800c812:	f1c0 0c0b 	rsb	ip, r0, #11
 800c816:	fa22 f30c 	lsr.w	r3, r2, ip
 800c81a:	45b8      	cmp	r8, r7
 800c81c:	ea43 0501 	orr.w	r5, r3, r1
 800c820:	bf34      	ite	cc
 800c822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c826:	2300      	movcs	r3, #0
 800c828:	3015      	adds	r0, #21
 800c82a:	fa02 f000 	lsl.w	r0, r2, r0
 800c82e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c832:	4303      	orrs	r3, r0
 800c834:	461c      	mov	r4, r3
 800c836:	ec45 4b10 	vmov	d0, r4, r5
 800c83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83e:	45b8      	cmp	r8, r7
 800c840:	bf3a      	itte	cc
 800c842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c846:	f1a6 0708 	subcc.w	r7, r6, #8
 800c84a:	2300      	movcs	r3, #0
 800c84c:	380b      	subs	r0, #11
 800c84e:	d012      	beq.n	800c876 <__b2d+0x8a>
 800c850:	f1c0 0120 	rsb	r1, r0, #32
 800c854:	fa23 f401 	lsr.w	r4, r3, r1
 800c858:	4082      	lsls	r2, r0
 800c85a:	4322      	orrs	r2, r4
 800c85c:	4547      	cmp	r7, r8
 800c85e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c862:	bf8c      	ite	hi
 800c864:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c868:	2200      	movls	r2, #0
 800c86a:	4083      	lsls	r3, r0
 800c86c:	40ca      	lsrs	r2, r1
 800c86e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c872:	4313      	orrs	r3, r2
 800c874:	e7de      	b.n	800c834 <__b2d+0x48>
 800c876:	ea42 0501 	orr.w	r5, r2, r1
 800c87a:	e7db      	b.n	800c834 <__b2d+0x48>
 800c87c:	3ff00000 	.word	0x3ff00000

0800c880 <__d2b>:
 800c880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c884:	460f      	mov	r7, r1
 800c886:	2101      	movs	r1, #1
 800c888:	ec59 8b10 	vmov	r8, r9, d0
 800c88c:	4616      	mov	r6, r2
 800c88e:	f7ff fc13 	bl	800c0b8 <_Balloc>
 800c892:	4604      	mov	r4, r0
 800c894:	b930      	cbnz	r0, 800c8a4 <__d2b+0x24>
 800c896:	4602      	mov	r2, r0
 800c898:	4b23      	ldr	r3, [pc, #140]	@ (800c928 <__d2b+0xa8>)
 800c89a:	4824      	ldr	r0, [pc, #144]	@ (800c92c <__d2b+0xac>)
 800c89c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8a0:	f001 fa26 	bl	800dcf0 <__assert_func>
 800c8a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8ac:	b10d      	cbz	r5, 800c8b2 <__d2b+0x32>
 800c8ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c8b8:	d023      	beq.n	800c902 <__d2b+0x82>
 800c8ba:	4668      	mov	r0, sp
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	f7ff fd0c 	bl	800c2da <__lo0bits>
 800c8c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8c6:	b1d0      	cbz	r0, 800c8fe <__d2b+0x7e>
 800c8c8:	f1c0 0320 	rsb	r3, r0, #32
 800c8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	40c2      	lsrs	r2, r0
 800c8d4:	6163      	str	r3, [r4, #20]
 800c8d6:	9201      	str	r2, [sp, #4]
 800c8d8:	9b01      	ldr	r3, [sp, #4]
 800c8da:	61a3      	str	r3, [r4, #24]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	bf0c      	ite	eq
 800c8e0:	2201      	moveq	r2, #1
 800c8e2:	2202      	movne	r2, #2
 800c8e4:	6122      	str	r2, [r4, #16]
 800c8e6:	b1a5      	cbz	r5, 800c912 <__d2b+0x92>
 800c8e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8ec:	4405      	add	r5, r0
 800c8ee:	603d      	str	r5, [r7, #0]
 800c8f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8f4:	6030      	str	r0, [r6, #0]
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	b003      	add	sp, #12
 800c8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8fe:	6161      	str	r1, [r4, #20]
 800c900:	e7ea      	b.n	800c8d8 <__d2b+0x58>
 800c902:	a801      	add	r0, sp, #4
 800c904:	f7ff fce9 	bl	800c2da <__lo0bits>
 800c908:	9b01      	ldr	r3, [sp, #4]
 800c90a:	6163      	str	r3, [r4, #20]
 800c90c:	3020      	adds	r0, #32
 800c90e:	2201      	movs	r2, #1
 800c910:	e7e8      	b.n	800c8e4 <__d2b+0x64>
 800c912:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c916:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c91a:	6038      	str	r0, [r7, #0]
 800c91c:	6918      	ldr	r0, [r3, #16]
 800c91e:	f7ff fcbd 	bl	800c29c <__hi0bits>
 800c922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c926:	e7e5      	b.n	800c8f4 <__d2b+0x74>
 800c928:	0800eb0f 	.word	0x0800eb0f
 800c92c:	0800eb20 	.word	0x0800eb20

0800c930 <__ratio>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	b085      	sub	sp, #20
 800c936:	e9cd 1000 	strd	r1, r0, [sp]
 800c93a:	a902      	add	r1, sp, #8
 800c93c:	f7ff ff56 	bl	800c7ec <__b2d>
 800c940:	9800      	ldr	r0, [sp, #0]
 800c942:	a903      	add	r1, sp, #12
 800c944:	ec55 4b10 	vmov	r4, r5, d0
 800c948:	f7ff ff50 	bl	800c7ec <__b2d>
 800c94c:	9b01      	ldr	r3, [sp, #4]
 800c94e:	6919      	ldr	r1, [r3, #16]
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	1ac9      	subs	r1, r1, r3
 800c956:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c95a:	1a9b      	subs	r3, r3, r2
 800c95c:	ec5b ab10 	vmov	sl, fp, d0
 800c960:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfce      	itee	gt
 800c968:	462a      	movgt	r2, r5
 800c96a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c96e:	465a      	movle	r2, fp
 800c970:	462f      	mov	r7, r5
 800c972:	46d9      	mov	r9, fp
 800c974:	bfcc      	ite	gt
 800c976:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c97a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c97e:	464b      	mov	r3, r9
 800c980:	4652      	mov	r2, sl
 800c982:	4620      	mov	r0, r4
 800c984:	4639      	mov	r1, r7
 800c986:	f7f3 ff61 	bl	800084c <__aeabi_ddiv>
 800c98a:	ec41 0b10 	vmov	d0, r0, r1
 800c98e:	b005      	add	sp, #20
 800c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c994 <__copybits>:
 800c994:	3901      	subs	r1, #1
 800c996:	b570      	push	{r4, r5, r6, lr}
 800c998:	1149      	asrs	r1, r1, #5
 800c99a:	6914      	ldr	r4, [r2, #16]
 800c99c:	3101      	adds	r1, #1
 800c99e:	f102 0314 	add.w	r3, r2, #20
 800c9a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9aa:	1f05      	subs	r5, r0, #4
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	d30c      	bcc.n	800c9ca <__copybits+0x36>
 800c9b0:	1aa3      	subs	r3, r4, r2
 800c9b2:	3b11      	subs	r3, #17
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	3211      	adds	r2, #17
 800c9ba:	42a2      	cmp	r2, r4
 800c9bc:	bf88      	it	hi
 800c9be:	2300      	movhi	r3, #0
 800c9c0:	4418      	add	r0, r3
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	4288      	cmp	r0, r1
 800c9c6:	d305      	bcc.n	800c9d4 <__copybits+0x40>
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9d2:	e7eb      	b.n	800c9ac <__copybits+0x18>
 800c9d4:	f840 3b04 	str.w	r3, [r0], #4
 800c9d8:	e7f4      	b.n	800c9c4 <__copybits+0x30>

0800c9da <__any_on>:
 800c9da:	f100 0214 	add.w	r2, r0, #20
 800c9de:	6900      	ldr	r0, [r0, #16]
 800c9e0:	114b      	asrs	r3, r1, #5
 800c9e2:	4298      	cmp	r0, r3
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	db11      	blt.n	800ca0c <__any_on+0x32>
 800c9e8:	dd0a      	ble.n	800ca00 <__any_on+0x26>
 800c9ea:	f011 011f 	ands.w	r1, r1, #31
 800c9ee:	d007      	beq.n	800ca00 <__any_on+0x26>
 800c9f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9f4:	fa24 f001 	lsr.w	r0, r4, r1
 800c9f8:	fa00 f101 	lsl.w	r1, r0, r1
 800c9fc:	428c      	cmp	r4, r1
 800c9fe:	d10b      	bne.n	800ca18 <__any_on+0x3e>
 800ca00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d803      	bhi.n	800ca10 <__any_on+0x36>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	e7f7      	b.n	800ca00 <__any_on+0x26>
 800ca10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d0f5      	beq.n	800ca04 <__any_on+0x2a>
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e7f6      	b.n	800ca0a <__any_on+0x30>

0800ca1c <sulp>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	ec45 4b10 	vmov	d0, r4, r5
 800ca26:	4616      	mov	r6, r2
 800ca28:	f7ff feba 	bl	800c7a0 <__ulp>
 800ca2c:	ec51 0b10 	vmov	r0, r1, d0
 800ca30:	b17e      	cbz	r6, 800ca52 <sulp+0x36>
 800ca32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dd09      	ble.n	800ca52 <sulp+0x36>
 800ca3e:	051b      	lsls	r3, r3, #20
 800ca40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca44:	2400      	movs	r4, #0
 800ca46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	f7f3 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ca52:	ec41 0b10 	vmov	d0, r0, r1
 800ca56:	bd70      	pop	{r4, r5, r6, pc}

0800ca58 <_strtod_l>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	b09f      	sub	sp, #124	@ 0x7c
 800ca5e:	460c      	mov	r4, r1
 800ca60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca62:	2200      	movs	r2, #0
 800ca64:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca66:	9005      	str	r0, [sp, #20]
 800ca68:	f04f 0a00 	mov.w	sl, #0
 800ca6c:	f04f 0b00 	mov.w	fp, #0
 800ca70:	460a      	mov	r2, r1
 800ca72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca74:	7811      	ldrb	r1, [r2, #0]
 800ca76:	292b      	cmp	r1, #43	@ 0x2b
 800ca78:	d04a      	beq.n	800cb10 <_strtod_l+0xb8>
 800ca7a:	d838      	bhi.n	800caee <_strtod_l+0x96>
 800ca7c:	290d      	cmp	r1, #13
 800ca7e:	d832      	bhi.n	800cae6 <_strtod_l+0x8e>
 800ca80:	2908      	cmp	r1, #8
 800ca82:	d832      	bhi.n	800caea <_strtod_l+0x92>
 800ca84:	2900      	cmp	r1, #0
 800ca86:	d03b      	beq.n	800cb00 <_strtod_l+0xa8>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca8e:	782a      	ldrb	r2, [r5, #0]
 800ca90:	2a30      	cmp	r2, #48	@ 0x30
 800ca92:	f040 80b3 	bne.w	800cbfc <_strtod_l+0x1a4>
 800ca96:	786a      	ldrb	r2, [r5, #1]
 800ca98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca9c:	2a58      	cmp	r2, #88	@ 0x58
 800ca9e:	d16e      	bne.n	800cb7e <_strtod_l+0x126>
 800caa0:	9302      	str	r3, [sp, #8]
 800caa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	ab1a      	add	r3, sp, #104	@ 0x68
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	4a8e      	ldr	r2, [pc, #568]	@ (800cce4 <_strtod_l+0x28c>)
 800caac:	9805      	ldr	r0, [sp, #20]
 800caae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cab0:	a919      	add	r1, sp, #100	@ 0x64
 800cab2:	f001 f9b7 	bl	800de24 <__gethex>
 800cab6:	f010 060f 	ands.w	r6, r0, #15
 800caba:	4604      	mov	r4, r0
 800cabc:	d005      	beq.n	800caca <_strtod_l+0x72>
 800cabe:	2e06      	cmp	r6, #6
 800cac0:	d128      	bne.n	800cb14 <_strtod_l+0xbc>
 800cac2:	3501      	adds	r5, #1
 800cac4:	2300      	movs	r3, #0
 800cac6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 858e 	bne.w	800d5ee <_strtod_l+0xb96>
 800cad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cad4:	b1cb      	cbz	r3, 800cb0a <_strtod_l+0xb2>
 800cad6:	4652      	mov	r2, sl
 800cad8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cadc:	ec43 2b10 	vmov	d0, r2, r3
 800cae0:	b01f      	add	sp, #124	@ 0x7c
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	2920      	cmp	r1, #32
 800cae8:	d1ce      	bne.n	800ca88 <_strtod_l+0x30>
 800caea:	3201      	adds	r2, #1
 800caec:	e7c1      	b.n	800ca72 <_strtod_l+0x1a>
 800caee:	292d      	cmp	r1, #45	@ 0x2d
 800caf0:	d1ca      	bne.n	800ca88 <_strtod_l+0x30>
 800caf2:	2101      	movs	r1, #1
 800caf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800caf6:	1c51      	adds	r1, r2, #1
 800caf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cafa:	7852      	ldrb	r2, [r2, #1]
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	d1c5      	bne.n	800ca8c <_strtod_l+0x34>
 800cb00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb02:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f040 8570 	bne.w	800d5ea <_strtod_l+0xb92>
 800cb0a:	4652      	mov	r2, sl
 800cb0c:	465b      	mov	r3, fp
 800cb0e:	e7e5      	b.n	800cadc <_strtod_l+0x84>
 800cb10:	2100      	movs	r1, #0
 800cb12:	e7ef      	b.n	800caf4 <_strtod_l+0x9c>
 800cb14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb16:	b13a      	cbz	r2, 800cb28 <_strtod_l+0xd0>
 800cb18:	2135      	movs	r1, #53	@ 0x35
 800cb1a:	a81c      	add	r0, sp, #112	@ 0x70
 800cb1c:	f7ff ff3a 	bl	800c994 <__copybits>
 800cb20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb22:	9805      	ldr	r0, [sp, #20]
 800cb24:	f7ff fb08 	bl	800c138 <_Bfree>
 800cb28:	3e01      	subs	r6, #1
 800cb2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb2c:	2e04      	cmp	r6, #4
 800cb2e:	d806      	bhi.n	800cb3e <_strtod_l+0xe6>
 800cb30:	e8df f006 	tbb	[pc, r6]
 800cb34:	201d0314 	.word	0x201d0314
 800cb38:	14          	.byte	0x14
 800cb39:	00          	.byte	0x00
 800cb3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb3e:	05e1      	lsls	r1, r4, #23
 800cb40:	bf48      	it	mi
 800cb42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb4a:	0d1b      	lsrs	r3, r3, #20
 800cb4c:	051b      	lsls	r3, r3, #20
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1bb      	bne.n	800caca <_strtod_l+0x72>
 800cb52:	f7fe fb1b 	bl	800b18c <__errno>
 800cb56:	2322      	movs	r3, #34	@ 0x22
 800cb58:	6003      	str	r3, [r0, #0]
 800cb5a:	e7b6      	b.n	800caca <_strtod_l+0x72>
 800cb5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb6c:	e7e7      	b.n	800cb3e <_strtod_l+0xe6>
 800cb6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ccec <_strtod_l+0x294>
 800cb72:	e7e4      	b.n	800cb3e <_strtod_l+0xe6>
 800cb74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb78:	f04f 3aff 	mov.w	sl, #4294967295
 800cb7c:	e7df      	b.n	800cb3e <_strtod_l+0xe6>
 800cb7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb84:	785b      	ldrb	r3, [r3, #1]
 800cb86:	2b30      	cmp	r3, #48	@ 0x30
 800cb88:	d0f9      	beq.n	800cb7e <_strtod_l+0x126>
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d09d      	beq.n	800caca <_strtod_l+0x72>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb94:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb96:	2300      	movs	r3, #0
 800cb98:	9308      	str	r3, [sp, #32]
 800cb9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb9c:	461f      	mov	r7, r3
 800cb9e:	220a      	movs	r2, #10
 800cba0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cba2:	7805      	ldrb	r5, [r0, #0]
 800cba4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cba8:	b2d9      	uxtb	r1, r3
 800cbaa:	2909      	cmp	r1, #9
 800cbac:	d928      	bls.n	800cc00 <_strtod_l+0x1a8>
 800cbae:	494e      	ldr	r1, [pc, #312]	@ (800cce8 <_strtod_l+0x290>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f7fe fa26 	bl	800b002 <strncmp>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d032      	beq.n	800cc20 <_strtod_l+0x1c8>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	4681      	mov	r9, r0
 800cbc0:	463d      	mov	r5, r7
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2a65      	cmp	r2, #101	@ 0x65
 800cbc6:	d001      	beq.n	800cbcc <_strtod_l+0x174>
 800cbc8:	2a45      	cmp	r2, #69	@ 0x45
 800cbca:	d114      	bne.n	800cbf6 <_strtod_l+0x19e>
 800cbcc:	b91d      	cbnz	r5, 800cbd6 <_strtod_l+0x17e>
 800cbce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbd0:	4302      	orrs	r2, r0
 800cbd2:	d095      	beq.n	800cb00 <_strtod_l+0xa8>
 800cbd4:	2500      	movs	r5, #0
 800cbd6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cbd8:	1c62      	adds	r2, r4, #1
 800cbda:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbdc:	7862      	ldrb	r2, [r4, #1]
 800cbde:	2a2b      	cmp	r2, #43	@ 0x2b
 800cbe0:	d077      	beq.n	800ccd2 <_strtod_l+0x27a>
 800cbe2:	2a2d      	cmp	r2, #45	@ 0x2d
 800cbe4:	d07b      	beq.n	800ccde <_strtod_l+0x286>
 800cbe6:	f04f 0c00 	mov.w	ip, #0
 800cbea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbee:	2909      	cmp	r1, #9
 800cbf0:	f240 8082 	bls.w	800ccf8 <_strtod_l+0x2a0>
 800cbf4:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbf6:	f04f 0800 	mov.w	r8, #0
 800cbfa:	e0a2      	b.n	800cd42 <_strtod_l+0x2ea>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e7c7      	b.n	800cb90 <_strtod_l+0x138>
 800cc00:	2f08      	cmp	r7, #8
 800cc02:	bfd5      	itete	le
 800cc04:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc06:	9908      	ldrgt	r1, [sp, #32]
 800cc08:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc0c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc10:	f100 0001 	add.w	r0, r0, #1
 800cc14:	bfd4      	ite	le
 800cc16:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc18:	9308      	strgt	r3, [sp, #32]
 800cc1a:	3701      	adds	r7, #1
 800cc1c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc1e:	e7bf      	b.n	800cba0 <_strtod_l+0x148>
 800cc20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc26:	785a      	ldrb	r2, [r3, #1]
 800cc28:	b37f      	cbz	r7, 800cc8a <_strtod_l+0x232>
 800cc2a:	4681      	mov	r9, r0
 800cc2c:	463d      	mov	r5, r7
 800cc2e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc32:	2b09      	cmp	r3, #9
 800cc34:	d912      	bls.n	800cc5c <_strtod_l+0x204>
 800cc36:	2301      	movs	r3, #1
 800cc38:	e7c4      	b.n	800cbc4 <_strtod_l+0x16c>
 800cc3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc40:	785a      	ldrb	r2, [r3, #1]
 800cc42:	3001      	adds	r0, #1
 800cc44:	2a30      	cmp	r2, #48	@ 0x30
 800cc46:	d0f8      	beq.n	800cc3a <_strtod_l+0x1e2>
 800cc48:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc4c:	2b08      	cmp	r3, #8
 800cc4e:	f200 84d3 	bhi.w	800d5f8 <_strtod_l+0xba0>
 800cc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc54:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc56:	4681      	mov	r9, r0
 800cc58:	2000      	movs	r0, #0
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	3a30      	subs	r2, #48	@ 0x30
 800cc5e:	f100 0301 	add.w	r3, r0, #1
 800cc62:	d02a      	beq.n	800ccba <_strtod_l+0x262>
 800cc64:	4499      	add	r9, r3
 800cc66:	eb00 0c05 	add.w	ip, r0, r5
 800cc6a:	462b      	mov	r3, r5
 800cc6c:	210a      	movs	r1, #10
 800cc6e:	4563      	cmp	r3, ip
 800cc70:	d10d      	bne.n	800cc8e <_strtod_l+0x236>
 800cc72:	1c69      	adds	r1, r5, #1
 800cc74:	4401      	add	r1, r0
 800cc76:	4428      	add	r0, r5
 800cc78:	2808      	cmp	r0, #8
 800cc7a:	dc16      	bgt.n	800ccaa <_strtod_l+0x252>
 800cc7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc7e:	230a      	movs	r3, #10
 800cc80:	fb03 2300 	mla	r3, r3, r0, r2
 800cc84:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc86:	2300      	movs	r3, #0
 800cc88:	e018      	b.n	800ccbc <_strtod_l+0x264>
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	e7da      	b.n	800cc44 <_strtod_l+0x1ec>
 800cc8e:	2b08      	cmp	r3, #8
 800cc90:	f103 0301 	add.w	r3, r3, #1
 800cc94:	dc03      	bgt.n	800cc9e <_strtod_l+0x246>
 800cc96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc98:	434e      	muls	r6, r1
 800cc9a:	960a      	str	r6, [sp, #40]	@ 0x28
 800cc9c:	e7e7      	b.n	800cc6e <_strtod_l+0x216>
 800cc9e:	2b10      	cmp	r3, #16
 800cca0:	bfde      	ittt	le
 800cca2:	9e08      	ldrle	r6, [sp, #32]
 800cca4:	434e      	mulle	r6, r1
 800cca6:	9608      	strle	r6, [sp, #32]
 800cca8:	e7e1      	b.n	800cc6e <_strtod_l+0x216>
 800ccaa:	280f      	cmp	r0, #15
 800ccac:	dceb      	bgt.n	800cc86 <_strtod_l+0x22e>
 800ccae:	9808      	ldr	r0, [sp, #32]
 800ccb0:	230a      	movs	r3, #10
 800ccb2:	fb03 2300 	mla	r3, r3, r0, r2
 800ccb6:	9308      	str	r3, [sp, #32]
 800ccb8:	e7e5      	b.n	800cc86 <_strtod_l+0x22e>
 800ccba:	4629      	mov	r1, r5
 800ccbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccbe:	1c50      	adds	r0, r2, #1
 800ccc0:	9019      	str	r0, [sp, #100]	@ 0x64
 800ccc2:	7852      	ldrb	r2, [r2, #1]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	460d      	mov	r5, r1
 800ccc8:	e7b1      	b.n	800cc2e <_strtod_l+0x1d6>
 800ccca:	f04f 0900 	mov.w	r9, #0
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e77d      	b.n	800cbce <_strtod_l+0x176>
 800ccd2:	f04f 0c00 	mov.w	ip, #0
 800ccd6:	1ca2      	adds	r2, r4, #2
 800ccd8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccda:	78a2      	ldrb	r2, [r4, #2]
 800ccdc:	e785      	b.n	800cbea <_strtod_l+0x192>
 800ccde:	f04f 0c01 	mov.w	ip, #1
 800cce2:	e7f8      	b.n	800ccd6 <_strtod_l+0x27e>
 800cce4:	0800ec90 	.word	0x0800ec90
 800cce8:	0800ec78 	.word	0x0800ec78
 800ccec:	7ff00000 	.word	0x7ff00000
 800ccf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccf2:	1c51      	adds	r1, r2, #1
 800ccf4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccf6:	7852      	ldrb	r2, [r2, #1]
 800ccf8:	2a30      	cmp	r2, #48	@ 0x30
 800ccfa:	d0f9      	beq.n	800ccf0 <_strtod_l+0x298>
 800ccfc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd00:	2908      	cmp	r1, #8
 800cd02:	f63f af78 	bhi.w	800cbf6 <_strtod_l+0x19e>
 800cd06:	3a30      	subs	r2, #48	@ 0x30
 800cd08:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd0e:	f04f 080a 	mov.w	r8, #10
 800cd12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd14:	1c56      	adds	r6, r2, #1
 800cd16:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd18:	7852      	ldrb	r2, [r2, #1]
 800cd1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd1e:	f1be 0f09 	cmp.w	lr, #9
 800cd22:	d939      	bls.n	800cd98 <_strtod_l+0x340>
 800cd24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd26:	1a76      	subs	r6, r6, r1
 800cd28:	2e08      	cmp	r6, #8
 800cd2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd2e:	dc03      	bgt.n	800cd38 <_strtod_l+0x2e0>
 800cd30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd32:	4588      	cmp	r8, r1
 800cd34:	bfa8      	it	ge
 800cd36:	4688      	movge	r8, r1
 800cd38:	f1bc 0f00 	cmp.w	ip, #0
 800cd3c:	d001      	beq.n	800cd42 <_strtod_l+0x2ea>
 800cd3e:	f1c8 0800 	rsb	r8, r8, #0
 800cd42:	2d00      	cmp	r5, #0
 800cd44:	d14e      	bne.n	800cde4 <_strtod_l+0x38c>
 800cd46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd48:	4308      	orrs	r0, r1
 800cd4a:	f47f aebe 	bne.w	800caca <_strtod_l+0x72>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f47f aed6 	bne.w	800cb00 <_strtod_l+0xa8>
 800cd54:	2a69      	cmp	r2, #105	@ 0x69
 800cd56:	d028      	beq.n	800cdaa <_strtod_l+0x352>
 800cd58:	dc25      	bgt.n	800cda6 <_strtod_l+0x34e>
 800cd5a:	2a49      	cmp	r2, #73	@ 0x49
 800cd5c:	d025      	beq.n	800cdaa <_strtod_l+0x352>
 800cd5e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd60:	f47f aece 	bne.w	800cb00 <_strtod_l+0xa8>
 800cd64:	499b      	ldr	r1, [pc, #620]	@ (800cfd4 <_strtod_l+0x57c>)
 800cd66:	a819      	add	r0, sp, #100	@ 0x64
 800cd68:	f001 fa7e 	bl	800e268 <__match>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f43f aec7 	beq.w	800cb00 <_strtod_l+0xa8>
 800cd72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b28      	cmp	r3, #40	@ 0x28
 800cd78:	d12e      	bne.n	800cdd8 <_strtod_l+0x380>
 800cd7a:	4997      	ldr	r1, [pc, #604]	@ (800cfd8 <_strtod_l+0x580>)
 800cd7c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd7e:	a819      	add	r0, sp, #100	@ 0x64
 800cd80:	f001 fa86 	bl	800e290 <__hexnan>
 800cd84:	2805      	cmp	r0, #5
 800cd86:	d127      	bne.n	800cdd8 <_strtod_l+0x380>
 800cd88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd96:	e698      	b.n	800caca <_strtod_l+0x72>
 800cd98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd9a:	fb08 2101 	mla	r1, r8, r1, r2
 800cd9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cda2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cda4:	e7b5      	b.n	800cd12 <_strtod_l+0x2ba>
 800cda6:	2a6e      	cmp	r2, #110	@ 0x6e
 800cda8:	e7da      	b.n	800cd60 <_strtod_l+0x308>
 800cdaa:	498c      	ldr	r1, [pc, #560]	@ (800cfdc <_strtod_l+0x584>)
 800cdac:	a819      	add	r0, sp, #100	@ 0x64
 800cdae:	f001 fa5b 	bl	800e268 <__match>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	f43f aea4 	beq.w	800cb00 <_strtod_l+0xa8>
 800cdb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdba:	4989      	ldr	r1, [pc, #548]	@ (800cfe0 <_strtod_l+0x588>)
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	a819      	add	r0, sp, #100	@ 0x64
 800cdc0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdc2:	f001 fa51 	bl	800e268 <__match>
 800cdc6:	b910      	cbnz	r0, 800cdce <_strtod_l+0x376>
 800cdc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9319      	str	r3, [sp, #100]	@ 0x64
 800cdce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cff0 <_strtod_l+0x598>
 800cdd2:	f04f 0a00 	mov.w	sl, #0
 800cdd6:	e678      	b.n	800caca <_strtod_l+0x72>
 800cdd8:	4882      	ldr	r0, [pc, #520]	@ (800cfe4 <_strtod_l+0x58c>)
 800cdda:	f000 ff81 	bl	800dce0 <nan>
 800cdde:	ec5b ab10 	vmov	sl, fp, d0
 800cde2:	e672      	b.n	800caca <_strtod_l+0x72>
 800cde4:	eba8 0309 	sub.w	r3, r8, r9
 800cde8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdec:	2f00      	cmp	r7, #0
 800cdee:	bf08      	it	eq
 800cdf0:	462f      	moveq	r7, r5
 800cdf2:	2d10      	cmp	r5, #16
 800cdf4:	462c      	mov	r4, r5
 800cdf6:	bfa8      	it	ge
 800cdf8:	2410      	movge	r4, #16
 800cdfa:	f7f3 fb83 	bl	8000504 <__aeabi_ui2d>
 800cdfe:	2d09      	cmp	r5, #9
 800ce00:	4682      	mov	sl, r0
 800ce02:	468b      	mov	fp, r1
 800ce04:	dc13      	bgt.n	800ce2e <_strtod_l+0x3d6>
 800ce06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f43f ae5e 	beq.w	800caca <_strtod_l+0x72>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce10:	dd78      	ble.n	800cf04 <_strtod_l+0x4ac>
 800ce12:	2b16      	cmp	r3, #22
 800ce14:	dc5f      	bgt.n	800ced6 <_strtod_l+0x47e>
 800ce16:	4974      	ldr	r1, [pc, #464]	@ (800cfe8 <_strtod_l+0x590>)
 800ce18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce20:	4652      	mov	r2, sl
 800ce22:	465b      	mov	r3, fp
 800ce24:	f7f3 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ce28:	4682      	mov	sl, r0
 800ce2a:	468b      	mov	fp, r1
 800ce2c:	e64d      	b.n	800caca <_strtod_l+0x72>
 800ce2e:	4b6e      	ldr	r3, [pc, #440]	@ (800cfe8 <_strtod_l+0x590>)
 800ce30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce38:	f7f3 fbde 	bl	80005f8 <__aeabi_dmul>
 800ce3c:	4682      	mov	sl, r0
 800ce3e:	9808      	ldr	r0, [sp, #32]
 800ce40:	468b      	mov	fp, r1
 800ce42:	f7f3 fb5f 	bl	8000504 <__aeabi_ui2d>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4650      	mov	r0, sl
 800ce4c:	4659      	mov	r1, fp
 800ce4e:	f7f3 fa1d 	bl	800028c <__adddf3>
 800ce52:	2d0f      	cmp	r5, #15
 800ce54:	4682      	mov	sl, r0
 800ce56:	468b      	mov	fp, r1
 800ce58:	ddd5      	ble.n	800ce06 <_strtod_l+0x3ae>
 800ce5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce5c:	1b2c      	subs	r4, r5, r4
 800ce5e:	441c      	add	r4, r3
 800ce60:	2c00      	cmp	r4, #0
 800ce62:	f340 8096 	ble.w	800cf92 <_strtod_l+0x53a>
 800ce66:	f014 030f 	ands.w	r3, r4, #15
 800ce6a:	d00a      	beq.n	800ce82 <_strtod_l+0x42a>
 800ce6c:	495e      	ldr	r1, [pc, #376]	@ (800cfe8 <_strtod_l+0x590>)
 800ce6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce72:	4652      	mov	r2, sl
 800ce74:	465b      	mov	r3, fp
 800ce76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7a:	f7f3 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ce7e:	4682      	mov	sl, r0
 800ce80:	468b      	mov	fp, r1
 800ce82:	f034 040f 	bics.w	r4, r4, #15
 800ce86:	d073      	beq.n	800cf70 <_strtod_l+0x518>
 800ce88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce8c:	dd48      	ble.n	800cf20 <_strtod_l+0x4c8>
 800ce8e:	2400      	movs	r4, #0
 800ce90:	46a0      	mov	r8, r4
 800ce92:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce94:	46a1      	mov	r9, r4
 800ce96:	9a05      	ldr	r2, [sp, #20]
 800ce98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cff0 <_strtod_l+0x598>
 800ce9c:	2322      	movs	r3, #34	@ 0x22
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	f04f 0a00 	mov.w	sl, #0
 800cea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f43f ae0f 	beq.w	800caca <_strtod_l+0x72>
 800ceac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceae:	9805      	ldr	r0, [sp, #20]
 800ceb0:	f7ff f942 	bl	800c138 <_Bfree>
 800ceb4:	9805      	ldr	r0, [sp, #20]
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7ff f93e 	bl	800c138 <_Bfree>
 800cebc:	9805      	ldr	r0, [sp, #20]
 800cebe:	4641      	mov	r1, r8
 800cec0:	f7ff f93a 	bl	800c138 <_Bfree>
 800cec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cec6:	9805      	ldr	r0, [sp, #20]
 800cec8:	f7ff f936 	bl	800c138 <_Bfree>
 800cecc:	9805      	ldr	r0, [sp, #20]
 800cece:	4621      	mov	r1, r4
 800ced0:	f7ff f932 	bl	800c138 <_Bfree>
 800ced4:	e5f9      	b.n	800caca <_strtod_l+0x72>
 800ced6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ced8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cedc:	4293      	cmp	r3, r2
 800cede:	dbbc      	blt.n	800ce5a <_strtod_l+0x402>
 800cee0:	4c41      	ldr	r4, [pc, #260]	@ (800cfe8 <_strtod_l+0x590>)
 800cee2:	f1c5 050f 	rsb	r5, r5, #15
 800cee6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceea:	4652      	mov	r2, sl
 800ceec:	465b      	mov	r3, fp
 800ceee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef2:	f7f3 fb81 	bl	80005f8 <__aeabi_dmul>
 800cef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef8:	1b5d      	subs	r5, r3, r5
 800cefa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cefe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf02:	e78f      	b.n	800ce24 <_strtod_l+0x3cc>
 800cf04:	3316      	adds	r3, #22
 800cf06:	dba8      	blt.n	800ce5a <_strtod_l+0x402>
 800cf08:	4b37      	ldr	r3, [pc, #220]	@ (800cfe8 <_strtod_l+0x590>)
 800cf0a:	eba9 0808 	sub.w	r8, r9, r8
 800cf0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf12:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf16:	4650      	mov	r0, sl
 800cf18:	4659      	mov	r1, fp
 800cf1a:	f7f3 fc97 	bl	800084c <__aeabi_ddiv>
 800cf1e:	e783      	b.n	800ce28 <_strtod_l+0x3d0>
 800cf20:	4b32      	ldr	r3, [pc, #200]	@ (800cfec <_strtod_l+0x594>)
 800cf22:	9308      	str	r3, [sp, #32]
 800cf24:	2300      	movs	r3, #0
 800cf26:	1124      	asrs	r4, r4, #4
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	461e      	mov	r6, r3
 800cf2e:	2c01      	cmp	r4, #1
 800cf30:	dc21      	bgt.n	800cf76 <_strtod_l+0x51e>
 800cf32:	b10b      	cbz	r3, 800cf38 <_strtod_l+0x4e0>
 800cf34:	4682      	mov	sl, r0
 800cf36:	468b      	mov	fp, r1
 800cf38:	492c      	ldr	r1, [pc, #176]	@ (800cfec <_strtod_l+0x594>)
 800cf3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf42:	4652      	mov	r2, sl
 800cf44:	465b      	mov	r3, fp
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	4b28      	ldr	r3, [pc, #160]	@ (800cff0 <_strtod_l+0x598>)
 800cf50:	460a      	mov	r2, r1
 800cf52:	400b      	ands	r3, r1
 800cf54:	4927      	ldr	r1, [pc, #156]	@ (800cff4 <_strtod_l+0x59c>)
 800cf56:	428b      	cmp	r3, r1
 800cf58:	4682      	mov	sl, r0
 800cf5a:	d898      	bhi.n	800ce8e <_strtod_l+0x436>
 800cf5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf60:	428b      	cmp	r3, r1
 800cf62:	bf86      	itte	hi
 800cf64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cff8 <_strtod_l+0x5a0>
 800cf68:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf70:	2300      	movs	r3, #0
 800cf72:	9308      	str	r3, [sp, #32]
 800cf74:	e07a      	b.n	800d06c <_strtod_l+0x614>
 800cf76:	07e2      	lsls	r2, r4, #31
 800cf78:	d505      	bpl.n	800cf86 <_strtod_l+0x52e>
 800cf7a:	9b08      	ldr	r3, [sp, #32]
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 fb3a 	bl	80005f8 <__aeabi_dmul>
 800cf84:	2301      	movs	r3, #1
 800cf86:	9a08      	ldr	r2, [sp, #32]
 800cf88:	3208      	adds	r2, #8
 800cf8a:	3601      	adds	r6, #1
 800cf8c:	1064      	asrs	r4, r4, #1
 800cf8e:	9208      	str	r2, [sp, #32]
 800cf90:	e7cd      	b.n	800cf2e <_strtod_l+0x4d6>
 800cf92:	d0ed      	beq.n	800cf70 <_strtod_l+0x518>
 800cf94:	4264      	negs	r4, r4
 800cf96:	f014 020f 	ands.w	r2, r4, #15
 800cf9a:	d00a      	beq.n	800cfb2 <_strtod_l+0x55a>
 800cf9c:	4b12      	ldr	r3, [pc, #72]	@ (800cfe8 <_strtod_l+0x590>)
 800cf9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	4659      	mov	r1, fp
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f7f3 fc4f 	bl	800084c <__aeabi_ddiv>
 800cfae:	4682      	mov	sl, r0
 800cfb0:	468b      	mov	fp, r1
 800cfb2:	1124      	asrs	r4, r4, #4
 800cfb4:	d0dc      	beq.n	800cf70 <_strtod_l+0x518>
 800cfb6:	2c1f      	cmp	r4, #31
 800cfb8:	dd20      	ble.n	800cffc <_strtod_l+0x5a4>
 800cfba:	2400      	movs	r4, #0
 800cfbc:	46a0      	mov	r8, r4
 800cfbe:	940a      	str	r4, [sp, #40]	@ 0x28
 800cfc0:	46a1      	mov	r9, r4
 800cfc2:	9a05      	ldr	r2, [sp, #20]
 800cfc4:	2322      	movs	r3, #34	@ 0x22
 800cfc6:	f04f 0a00 	mov.w	sl, #0
 800cfca:	f04f 0b00 	mov.w	fp, #0
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	e768      	b.n	800cea4 <_strtod_l+0x44c>
 800cfd2:	bf00      	nop
 800cfd4:	0800ea67 	.word	0x0800ea67
 800cfd8:	0800ec7c 	.word	0x0800ec7c
 800cfdc:	0800ea5f 	.word	0x0800ea5f
 800cfe0:	0800ea96 	.word	0x0800ea96
 800cfe4:	0800ed24 	.word	0x0800ed24
 800cfe8:	0800ebb0 	.word	0x0800ebb0
 800cfec:	0800eb88 	.word	0x0800eb88
 800cff0:	7ff00000 	.word	0x7ff00000
 800cff4:	7ca00000 	.word	0x7ca00000
 800cff8:	7fefffff 	.word	0x7fefffff
 800cffc:	f014 0310 	ands.w	r3, r4, #16
 800d000:	bf18      	it	ne
 800d002:	236a      	movne	r3, #106	@ 0x6a
 800d004:	4ea9      	ldr	r6, [pc, #676]	@ (800d2ac <_strtod_l+0x854>)
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	4650      	mov	r0, sl
 800d00a:	4659      	mov	r1, fp
 800d00c:	2300      	movs	r3, #0
 800d00e:	07e2      	lsls	r2, r4, #31
 800d010:	d504      	bpl.n	800d01c <_strtod_l+0x5c4>
 800d012:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d016:	f7f3 faef 	bl	80005f8 <__aeabi_dmul>
 800d01a:	2301      	movs	r3, #1
 800d01c:	1064      	asrs	r4, r4, #1
 800d01e:	f106 0608 	add.w	r6, r6, #8
 800d022:	d1f4      	bne.n	800d00e <_strtod_l+0x5b6>
 800d024:	b10b      	cbz	r3, 800d02a <_strtod_l+0x5d2>
 800d026:	4682      	mov	sl, r0
 800d028:	468b      	mov	fp, r1
 800d02a:	9b08      	ldr	r3, [sp, #32]
 800d02c:	b1b3      	cbz	r3, 800d05c <_strtod_l+0x604>
 800d02e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d032:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d036:	2b00      	cmp	r3, #0
 800d038:	4659      	mov	r1, fp
 800d03a:	dd0f      	ble.n	800d05c <_strtod_l+0x604>
 800d03c:	2b1f      	cmp	r3, #31
 800d03e:	dd55      	ble.n	800d0ec <_strtod_l+0x694>
 800d040:	2b34      	cmp	r3, #52	@ 0x34
 800d042:	bfde      	ittt	le
 800d044:	f04f 33ff 	movle.w	r3, #4294967295
 800d048:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d04c:	4093      	lslle	r3, r2
 800d04e:	f04f 0a00 	mov.w	sl, #0
 800d052:	bfcc      	ite	gt
 800d054:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d058:	ea03 0b01 	andle.w	fp, r3, r1
 800d05c:	2200      	movs	r2, #0
 800d05e:	2300      	movs	r3, #0
 800d060:	4650      	mov	r0, sl
 800d062:	4659      	mov	r1, fp
 800d064:	f7f3 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d1a6      	bne.n	800cfba <_strtod_l+0x562>
 800d06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d072:	9805      	ldr	r0, [sp, #20]
 800d074:	462b      	mov	r3, r5
 800d076:	463a      	mov	r2, r7
 800d078:	f7ff f8c6 	bl	800c208 <__s2b>
 800d07c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d07e:	2800      	cmp	r0, #0
 800d080:	f43f af05 	beq.w	800ce8e <_strtod_l+0x436>
 800d084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d086:	2a00      	cmp	r2, #0
 800d088:	eba9 0308 	sub.w	r3, r9, r8
 800d08c:	bfa8      	it	ge
 800d08e:	2300      	movge	r3, #0
 800d090:	9312      	str	r3, [sp, #72]	@ 0x48
 800d092:	2400      	movs	r4, #0
 800d094:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d098:	9316      	str	r3, [sp, #88]	@ 0x58
 800d09a:	46a0      	mov	r8, r4
 800d09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d09e:	9805      	ldr	r0, [sp, #20]
 800d0a0:	6859      	ldr	r1, [r3, #4]
 800d0a2:	f7ff f809 	bl	800c0b8 <_Balloc>
 800d0a6:	4681      	mov	r9, r0
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	f43f aef4 	beq.w	800ce96 <_strtod_l+0x43e>
 800d0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0b0:	691a      	ldr	r2, [r3, #16]
 800d0b2:	3202      	adds	r2, #2
 800d0b4:	f103 010c 	add.w	r1, r3, #12
 800d0b8:	0092      	lsls	r2, r2, #2
 800d0ba:	300c      	adds	r0, #12
 800d0bc:	f7fe f89b 	bl	800b1f6 <memcpy>
 800d0c0:	ec4b ab10 	vmov	d0, sl, fp
 800d0c4:	9805      	ldr	r0, [sp, #20]
 800d0c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d0c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d0ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d0ce:	f7ff fbd7 	bl	800c880 <__d2b>
 800d0d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f43f aede 	beq.w	800ce96 <_strtod_l+0x43e>
 800d0da:	9805      	ldr	r0, [sp, #20]
 800d0dc:	2101      	movs	r1, #1
 800d0de:	f7ff f929 	bl	800c334 <__i2b>
 800d0e2:	4680      	mov	r8, r0
 800d0e4:	b948      	cbnz	r0, 800d0fa <_strtod_l+0x6a2>
 800d0e6:	f04f 0800 	mov.w	r8, #0
 800d0ea:	e6d4      	b.n	800ce96 <_strtod_l+0x43e>
 800d0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f4:	ea03 0a0a 	and.w	sl, r3, sl
 800d0f8:	e7b0      	b.n	800d05c <_strtod_l+0x604>
 800d0fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0fe:	2d00      	cmp	r5, #0
 800d100:	bfab      	itete	ge
 800d102:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d104:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d106:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d108:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d10a:	bfac      	ite	ge
 800d10c:	18ef      	addge	r7, r5, r3
 800d10e:	1b5e      	sublt	r6, r3, r5
 800d110:	9b08      	ldr	r3, [sp, #32]
 800d112:	1aed      	subs	r5, r5, r3
 800d114:	4415      	add	r5, r2
 800d116:	4b66      	ldr	r3, [pc, #408]	@ (800d2b0 <_strtod_l+0x858>)
 800d118:	3d01      	subs	r5, #1
 800d11a:	429d      	cmp	r5, r3
 800d11c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d120:	da50      	bge.n	800d1c4 <_strtod_l+0x76c>
 800d122:	1b5b      	subs	r3, r3, r5
 800d124:	2b1f      	cmp	r3, #31
 800d126:	eba2 0203 	sub.w	r2, r2, r3
 800d12a:	f04f 0101 	mov.w	r1, #1
 800d12e:	dc3d      	bgt.n	800d1ac <_strtod_l+0x754>
 800d130:	fa01 f303 	lsl.w	r3, r1, r3
 800d134:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d136:	2300      	movs	r3, #0
 800d138:	9310      	str	r3, [sp, #64]	@ 0x40
 800d13a:	18bd      	adds	r5, r7, r2
 800d13c:	9b08      	ldr	r3, [sp, #32]
 800d13e:	42af      	cmp	r7, r5
 800d140:	4416      	add	r6, r2
 800d142:	441e      	add	r6, r3
 800d144:	463b      	mov	r3, r7
 800d146:	bfa8      	it	ge
 800d148:	462b      	movge	r3, r5
 800d14a:	42b3      	cmp	r3, r6
 800d14c:	bfa8      	it	ge
 800d14e:	4633      	movge	r3, r6
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfc2      	ittt	gt
 800d154:	1aed      	subgt	r5, r5, r3
 800d156:	1af6      	subgt	r6, r6, r3
 800d158:	1aff      	subgt	r7, r7, r3
 800d15a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	dd16      	ble.n	800d18e <_strtod_l+0x736>
 800d160:	4641      	mov	r1, r8
 800d162:	9805      	ldr	r0, [sp, #20]
 800d164:	461a      	mov	r2, r3
 800d166:	f7ff f9a5 	bl	800c4b4 <__pow5mult>
 800d16a:	4680      	mov	r8, r0
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0ba      	beq.n	800d0e6 <_strtod_l+0x68e>
 800d170:	4601      	mov	r1, r0
 800d172:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d174:	9805      	ldr	r0, [sp, #20]
 800d176:	f7ff f8f3 	bl	800c360 <__multiply>
 800d17a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f43f ae8a 	beq.w	800ce96 <_strtod_l+0x43e>
 800d182:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d184:	9805      	ldr	r0, [sp, #20]
 800d186:	f7fe ffd7 	bl	800c138 <_Bfree>
 800d18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d18c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d18e:	2d00      	cmp	r5, #0
 800d190:	dc1d      	bgt.n	800d1ce <_strtod_l+0x776>
 800d192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	dd23      	ble.n	800d1e0 <_strtod_l+0x788>
 800d198:	4649      	mov	r1, r9
 800d19a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d19c:	9805      	ldr	r0, [sp, #20]
 800d19e:	f7ff f989 	bl	800c4b4 <__pow5mult>
 800d1a2:	4681      	mov	r9, r0
 800d1a4:	b9e0      	cbnz	r0, 800d1e0 <_strtod_l+0x788>
 800d1a6:	f04f 0900 	mov.w	r9, #0
 800d1aa:	e674      	b.n	800ce96 <_strtod_l+0x43e>
 800d1ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d1b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d1b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d1b8:	35e2      	adds	r5, #226	@ 0xe2
 800d1ba:	fa01 f305 	lsl.w	r3, r1, r5
 800d1be:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1c2:	e7ba      	b.n	800d13a <_strtod_l+0x6e2>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1cc:	e7b5      	b.n	800d13a <_strtod_l+0x6e2>
 800d1ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d0:	9805      	ldr	r0, [sp, #20]
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	f7ff f9c8 	bl	800c568 <__lshift>
 800d1d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d1d9      	bne.n	800d192 <_strtod_l+0x73a>
 800d1de:	e65a      	b.n	800ce96 <_strtod_l+0x43e>
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	dd07      	ble.n	800d1f4 <_strtod_l+0x79c>
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	9805      	ldr	r0, [sp, #20]
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	f7ff f9bd 	bl	800c568 <__lshift>
 800d1ee:	4681      	mov	r9, r0
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d0d8      	beq.n	800d1a6 <_strtod_l+0x74e>
 800d1f4:	2f00      	cmp	r7, #0
 800d1f6:	dd08      	ble.n	800d20a <_strtod_l+0x7b2>
 800d1f8:	4641      	mov	r1, r8
 800d1fa:	9805      	ldr	r0, [sp, #20]
 800d1fc:	463a      	mov	r2, r7
 800d1fe:	f7ff f9b3 	bl	800c568 <__lshift>
 800d202:	4680      	mov	r8, r0
 800d204:	2800      	cmp	r0, #0
 800d206:	f43f ae46 	beq.w	800ce96 <_strtod_l+0x43e>
 800d20a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d20c:	9805      	ldr	r0, [sp, #20]
 800d20e:	464a      	mov	r2, r9
 800d210:	f7ff fa32 	bl	800c678 <__mdiff>
 800d214:	4604      	mov	r4, r0
 800d216:	2800      	cmp	r0, #0
 800d218:	f43f ae3d 	beq.w	800ce96 <_strtod_l+0x43e>
 800d21c:	68c3      	ldr	r3, [r0, #12]
 800d21e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d220:	2300      	movs	r3, #0
 800d222:	60c3      	str	r3, [r0, #12]
 800d224:	4641      	mov	r1, r8
 800d226:	f7ff fa0b 	bl	800c640 <__mcmp>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	da46      	bge.n	800d2bc <_strtod_l+0x864>
 800d22e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d230:	ea53 030a 	orrs.w	r3, r3, sl
 800d234:	d16c      	bne.n	800d310 <_strtod_l+0x8b8>
 800d236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d168      	bne.n	800d310 <_strtod_l+0x8b8>
 800d23e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d242:	0d1b      	lsrs	r3, r3, #20
 800d244:	051b      	lsls	r3, r3, #20
 800d246:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d24a:	d961      	bls.n	800d310 <_strtod_l+0x8b8>
 800d24c:	6963      	ldr	r3, [r4, #20]
 800d24e:	b913      	cbnz	r3, 800d256 <_strtod_l+0x7fe>
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	2b01      	cmp	r3, #1
 800d254:	dd5c      	ble.n	800d310 <_strtod_l+0x8b8>
 800d256:	4621      	mov	r1, r4
 800d258:	2201      	movs	r2, #1
 800d25a:	9805      	ldr	r0, [sp, #20]
 800d25c:	f7ff f984 	bl	800c568 <__lshift>
 800d260:	4641      	mov	r1, r8
 800d262:	4604      	mov	r4, r0
 800d264:	f7ff f9ec 	bl	800c640 <__mcmp>
 800d268:	2800      	cmp	r0, #0
 800d26a:	dd51      	ble.n	800d310 <_strtod_l+0x8b8>
 800d26c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d270:	9a08      	ldr	r2, [sp, #32]
 800d272:	0d1b      	lsrs	r3, r3, #20
 800d274:	051b      	lsls	r3, r3, #20
 800d276:	2a00      	cmp	r2, #0
 800d278:	d06b      	beq.n	800d352 <_strtod_l+0x8fa>
 800d27a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d27e:	d868      	bhi.n	800d352 <_strtod_l+0x8fa>
 800d280:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d284:	f67f ae9d 	bls.w	800cfc2 <_strtod_l+0x56a>
 800d288:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b4 <_strtod_l+0x85c>)
 800d28a:	4650      	mov	r0, sl
 800d28c:	4659      	mov	r1, fp
 800d28e:	2200      	movs	r2, #0
 800d290:	f7f3 f9b2 	bl	80005f8 <__aeabi_dmul>
 800d294:	4b08      	ldr	r3, [pc, #32]	@ (800d2b8 <_strtod_l+0x860>)
 800d296:	400b      	ands	r3, r1
 800d298:	4682      	mov	sl, r0
 800d29a:	468b      	mov	fp, r1
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f47f ae05 	bne.w	800ceac <_strtod_l+0x454>
 800d2a2:	9a05      	ldr	r2, [sp, #20]
 800d2a4:	2322      	movs	r3, #34	@ 0x22
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	e600      	b.n	800ceac <_strtod_l+0x454>
 800d2aa:	bf00      	nop
 800d2ac:	0800eca8 	.word	0x0800eca8
 800d2b0:	fffffc02 	.word	0xfffffc02
 800d2b4:	39500000 	.word	0x39500000
 800d2b8:	7ff00000 	.word	0x7ff00000
 800d2bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2c0:	d165      	bne.n	800d38e <_strtod_l+0x936>
 800d2c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2c8:	b35a      	cbz	r2, 800d322 <_strtod_l+0x8ca>
 800d2ca:	4a9f      	ldr	r2, [pc, #636]	@ (800d548 <_strtod_l+0xaf0>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d12b      	bne.n	800d328 <_strtod_l+0x8d0>
 800d2d0:	9b08      	ldr	r3, [sp, #32]
 800d2d2:	4651      	mov	r1, sl
 800d2d4:	b303      	cbz	r3, 800d318 <_strtod_l+0x8c0>
 800d2d6:	4b9d      	ldr	r3, [pc, #628]	@ (800d54c <_strtod_l+0xaf4>)
 800d2d8:	465a      	mov	r2, fp
 800d2da:	4013      	ands	r3, r2
 800d2dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e4:	d81b      	bhi.n	800d31e <_strtod_l+0x8c6>
 800d2e6:	0d1b      	lsrs	r3, r3, #20
 800d2e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d2f0:	4299      	cmp	r1, r3
 800d2f2:	d119      	bne.n	800d328 <_strtod_l+0x8d0>
 800d2f4:	4b96      	ldr	r3, [pc, #600]	@ (800d550 <_strtod_l+0xaf8>)
 800d2f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d102      	bne.n	800d302 <_strtod_l+0x8aa>
 800d2fc:	3101      	adds	r1, #1
 800d2fe:	f43f adca 	beq.w	800ce96 <_strtod_l+0x43e>
 800d302:	4b92      	ldr	r3, [pc, #584]	@ (800d54c <_strtod_l+0xaf4>)
 800d304:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d306:	401a      	ands	r2, r3
 800d308:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d30c:	f04f 0a00 	mov.w	sl, #0
 800d310:	9b08      	ldr	r3, [sp, #32]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1b8      	bne.n	800d288 <_strtod_l+0x830>
 800d316:	e5c9      	b.n	800ceac <_strtod_l+0x454>
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	e7e8      	b.n	800d2f0 <_strtod_l+0x898>
 800d31e:	4613      	mov	r3, r2
 800d320:	e7e6      	b.n	800d2f0 <_strtod_l+0x898>
 800d322:	ea53 030a 	orrs.w	r3, r3, sl
 800d326:	d0a1      	beq.n	800d26c <_strtod_l+0x814>
 800d328:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d32a:	b1db      	cbz	r3, 800d364 <_strtod_l+0x90c>
 800d32c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d32e:	4213      	tst	r3, r2
 800d330:	d0ee      	beq.n	800d310 <_strtod_l+0x8b8>
 800d332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d334:	9a08      	ldr	r2, [sp, #32]
 800d336:	4650      	mov	r0, sl
 800d338:	4659      	mov	r1, fp
 800d33a:	b1bb      	cbz	r3, 800d36c <_strtod_l+0x914>
 800d33c:	f7ff fb6e 	bl	800ca1c <sulp>
 800d340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d344:	ec53 2b10 	vmov	r2, r3, d0
 800d348:	f7f2 ffa0 	bl	800028c <__adddf3>
 800d34c:	4682      	mov	sl, r0
 800d34e:	468b      	mov	fp, r1
 800d350:	e7de      	b.n	800d310 <_strtod_l+0x8b8>
 800d352:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d356:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d35a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d35e:	f04f 3aff 	mov.w	sl, #4294967295
 800d362:	e7d5      	b.n	800d310 <_strtod_l+0x8b8>
 800d364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d366:	ea13 0f0a 	tst.w	r3, sl
 800d36a:	e7e1      	b.n	800d330 <_strtod_l+0x8d8>
 800d36c:	f7ff fb56 	bl	800ca1c <sulp>
 800d370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d374:	ec53 2b10 	vmov	r2, r3, d0
 800d378:	f7f2 ff86 	bl	8000288 <__aeabi_dsub>
 800d37c:	2200      	movs	r2, #0
 800d37e:	2300      	movs	r3, #0
 800d380:	4682      	mov	sl, r0
 800d382:	468b      	mov	fp, r1
 800d384:	f7f3 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d388:	2800      	cmp	r0, #0
 800d38a:	d0c1      	beq.n	800d310 <_strtod_l+0x8b8>
 800d38c:	e619      	b.n	800cfc2 <_strtod_l+0x56a>
 800d38e:	4641      	mov	r1, r8
 800d390:	4620      	mov	r0, r4
 800d392:	f7ff facd 	bl	800c930 <__ratio>
 800d396:	ec57 6b10 	vmov	r6, r7, d0
 800d39a:	2200      	movs	r2, #0
 800d39c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f3 fba4 	bl	8000af0 <__aeabi_dcmple>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d06f      	beq.n	800d48c <_strtod_l+0xa34>
 800d3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d17a      	bne.n	800d4a8 <_strtod_l+0xa50>
 800d3b2:	f1ba 0f00 	cmp.w	sl, #0
 800d3b6:	d158      	bne.n	800d46a <_strtod_l+0xa12>
 800d3b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d15a      	bne.n	800d478 <_strtod_l+0xa20>
 800d3c2:	4b64      	ldr	r3, [pc, #400]	@ (800d554 <_strtod_l+0xafc>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	f7f3 fb87 	bl	8000adc <__aeabi_dcmplt>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d159      	bne.n	800d486 <_strtod_l+0xa2e>
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	4639      	mov	r1, r7
 800d3d6:	4b60      	ldr	r3, [pc, #384]	@ (800d558 <_strtod_l+0xb00>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f7f3 f90d 	bl	80005f8 <__aeabi_dmul>
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3e6:	9606      	str	r6, [sp, #24]
 800d3e8:	9307      	str	r3, [sp, #28]
 800d3ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3ee:	4d57      	ldr	r5, [pc, #348]	@ (800d54c <_strtod_l+0xaf4>)
 800d3f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3f6:	401d      	ands	r5, r3
 800d3f8:	4b58      	ldr	r3, [pc, #352]	@ (800d55c <_strtod_l+0xb04>)
 800d3fa:	429d      	cmp	r5, r3
 800d3fc:	f040 80b2 	bne.w	800d564 <_strtod_l+0xb0c>
 800d400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d402:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d406:	ec4b ab10 	vmov	d0, sl, fp
 800d40a:	f7ff f9c9 	bl	800c7a0 <__ulp>
 800d40e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d412:	ec51 0b10 	vmov	r0, r1, d0
 800d416:	f7f3 f8ef 	bl	80005f8 <__aeabi_dmul>
 800d41a:	4652      	mov	r2, sl
 800d41c:	465b      	mov	r3, fp
 800d41e:	f7f2 ff35 	bl	800028c <__adddf3>
 800d422:	460b      	mov	r3, r1
 800d424:	4949      	ldr	r1, [pc, #292]	@ (800d54c <_strtod_l+0xaf4>)
 800d426:	4a4e      	ldr	r2, [pc, #312]	@ (800d560 <_strtod_l+0xb08>)
 800d428:	4019      	ands	r1, r3
 800d42a:	4291      	cmp	r1, r2
 800d42c:	4682      	mov	sl, r0
 800d42e:	d942      	bls.n	800d4b6 <_strtod_l+0xa5e>
 800d430:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d432:	4b47      	ldr	r3, [pc, #284]	@ (800d550 <_strtod_l+0xaf8>)
 800d434:	429a      	cmp	r2, r3
 800d436:	d103      	bne.n	800d440 <_strtod_l+0x9e8>
 800d438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d43a:	3301      	adds	r3, #1
 800d43c:	f43f ad2b 	beq.w	800ce96 <_strtod_l+0x43e>
 800d440:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d550 <_strtod_l+0xaf8>
 800d444:	f04f 3aff 	mov.w	sl, #4294967295
 800d448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d44a:	9805      	ldr	r0, [sp, #20]
 800d44c:	f7fe fe74 	bl	800c138 <_Bfree>
 800d450:	9805      	ldr	r0, [sp, #20]
 800d452:	4649      	mov	r1, r9
 800d454:	f7fe fe70 	bl	800c138 <_Bfree>
 800d458:	9805      	ldr	r0, [sp, #20]
 800d45a:	4641      	mov	r1, r8
 800d45c:	f7fe fe6c 	bl	800c138 <_Bfree>
 800d460:	9805      	ldr	r0, [sp, #20]
 800d462:	4621      	mov	r1, r4
 800d464:	f7fe fe68 	bl	800c138 <_Bfree>
 800d468:	e618      	b.n	800d09c <_strtod_l+0x644>
 800d46a:	f1ba 0f01 	cmp.w	sl, #1
 800d46e:	d103      	bne.n	800d478 <_strtod_l+0xa20>
 800d470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d472:	2b00      	cmp	r3, #0
 800d474:	f43f ada5 	beq.w	800cfc2 <_strtod_l+0x56a>
 800d478:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d528 <_strtod_l+0xad0>
 800d47c:	4f35      	ldr	r7, [pc, #212]	@ (800d554 <_strtod_l+0xafc>)
 800d47e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d482:	2600      	movs	r6, #0
 800d484:	e7b1      	b.n	800d3ea <_strtod_l+0x992>
 800d486:	4f34      	ldr	r7, [pc, #208]	@ (800d558 <_strtod_l+0xb00>)
 800d488:	2600      	movs	r6, #0
 800d48a:	e7aa      	b.n	800d3e2 <_strtod_l+0x98a>
 800d48c:	4b32      	ldr	r3, [pc, #200]	@ (800d558 <_strtod_l+0xb00>)
 800d48e:	4630      	mov	r0, r6
 800d490:	4639      	mov	r1, r7
 800d492:	2200      	movs	r2, #0
 800d494:	f7f3 f8b0 	bl	80005f8 <__aeabi_dmul>
 800d498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d49a:	4606      	mov	r6, r0
 800d49c:	460f      	mov	r7, r1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d09f      	beq.n	800d3e2 <_strtod_l+0x98a>
 800d4a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4a6:	e7a0      	b.n	800d3ea <_strtod_l+0x992>
 800d4a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d530 <_strtod_l+0xad8>
 800d4ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4b0:	ec57 6b17 	vmov	r6, r7, d7
 800d4b4:	e799      	b.n	800d3ea <_strtod_l+0x992>
 800d4b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d4ba:	9b08      	ldr	r3, [sp, #32]
 800d4bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1c1      	bne.n	800d448 <_strtod_l+0x9f0>
 800d4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4c8:	0d1b      	lsrs	r3, r3, #20
 800d4ca:	051b      	lsls	r3, r3, #20
 800d4cc:	429d      	cmp	r5, r3
 800d4ce:	d1bb      	bne.n	800d448 <_strtod_l+0x9f0>
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f3 fbf0 	bl	8000cb8 <__aeabi_d2lz>
 800d4d8:	f7f3 f860 	bl	800059c <__aeabi_l2d>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	f7f2 fed0 	bl	8000288 <__aeabi_dsub>
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4f6:	ea46 060a 	orr.w	r6, r6, sl
 800d4fa:	431e      	orrs	r6, r3
 800d4fc:	d06f      	beq.n	800d5de <_strtod_l+0xb86>
 800d4fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800d538 <_strtod_l+0xae0>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f3 faea 	bl	8000adc <__aeabi_dcmplt>
 800d508:	2800      	cmp	r0, #0
 800d50a:	f47f accf 	bne.w	800ceac <_strtod_l+0x454>
 800d50e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d540 <_strtod_l+0xae8>)
 800d510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d518:	f7f3 fafe 	bl	8000b18 <__aeabi_dcmpgt>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d093      	beq.n	800d448 <_strtod_l+0x9f0>
 800d520:	e4c4      	b.n	800ceac <_strtod_l+0x454>
 800d522:	bf00      	nop
 800d524:	f3af 8000 	nop.w
 800d528:	00000000 	.word	0x00000000
 800d52c:	bff00000 	.word	0xbff00000
 800d530:	00000000 	.word	0x00000000
 800d534:	3ff00000 	.word	0x3ff00000
 800d538:	94a03595 	.word	0x94a03595
 800d53c:	3fdfffff 	.word	0x3fdfffff
 800d540:	35afe535 	.word	0x35afe535
 800d544:	3fe00000 	.word	0x3fe00000
 800d548:	000fffff 	.word	0x000fffff
 800d54c:	7ff00000 	.word	0x7ff00000
 800d550:	7fefffff 	.word	0x7fefffff
 800d554:	3ff00000 	.word	0x3ff00000
 800d558:	3fe00000 	.word	0x3fe00000
 800d55c:	7fe00000 	.word	0x7fe00000
 800d560:	7c9fffff 	.word	0x7c9fffff
 800d564:	9b08      	ldr	r3, [sp, #32]
 800d566:	b323      	cbz	r3, 800d5b2 <_strtod_l+0xb5a>
 800d568:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d56c:	d821      	bhi.n	800d5b2 <_strtod_l+0xb5a>
 800d56e:	a328      	add	r3, pc, #160	@ (adr r3, 800d610 <_strtod_l+0xbb8>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4630      	mov	r0, r6
 800d576:	4639      	mov	r1, r7
 800d578:	f7f3 faba 	bl	8000af0 <__aeabi_dcmple>
 800d57c:	b1a0      	cbz	r0, 800d5a8 <_strtod_l+0xb50>
 800d57e:	4639      	mov	r1, r7
 800d580:	4630      	mov	r0, r6
 800d582:	f7f3 fb11 	bl	8000ba8 <__aeabi_d2uiz>
 800d586:	2801      	cmp	r0, #1
 800d588:	bf38      	it	cc
 800d58a:	2001      	movcc	r0, #1
 800d58c:	f7f2 ffba 	bl	8000504 <__aeabi_ui2d>
 800d590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d592:	4606      	mov	r6, r0
 800d594:	460f      	mov	r7, r1
 800d596:	b9fb      	cbnz	r3, 800d5d8 <_strtod_l+0xb80>
 800d598:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d59c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d59e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d5ae:	1b5b      	subs	r3, r3, r5
 800d5b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d5b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d5ba:	f7ff f8f1 	bl	800c7a0 <__ulp>
 800d5be:	4650      	mov	r0, sl
 800d5c0:	ec53 2b10 	vmov	r2, r3, d0
 800d5c4:	4659      	mov	r1, fp
 800d5c6:	f7f3 f817 	bl	80005f8 <__aeabi_dmul>
 800d5ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d5ce:	f7f2 fe5d 	bl	800028c <__adddf3>
 800d5d2:	4682      	mov	sl, r0
 800d5d4:	468b      	mov	fp, r1
 800d5d6:	e770      	b.n	800d4ba <_strtod_l+0xa62>
 800d5d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d5dc:	e7e0      	b.n	800d5a0 <_strtod_l+0xb48>
 800d5de:	a30e      	add	r3, pc, #56	@ (adr r3, 800d618 <_strtod_l+0xbc0>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f3 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800d5e8:	e798      	b.n	800d51c <_strtod_l+0xac4>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	f7ff ba6d 	b.w	800cad2 <_strtod_l+0x7a>
 800d5f8:	2a65      	cmp	r2, #101	@ 0x65
 800d5fa:	f43f ab66 	beq.w	800ccca <_strtod_l+0x272>
 800d5fe:	2a45      	cmp	r2, #69	@ 0x45
 800d600:	f43f ab63 	beq.w	800ccca <_strtod_l+0x272>
 800d604:	2301      	movs	r3, #1
 800d606:	f7ff bb9e 	b.w	800cd46 <_strtod_l+0x2ee>
 800d60a:	bf00      	nop
 800d60c:	f3af 8000 	nop.w
 800d610:	ffc00000 	.word	0xffc00000
 800d614:	41dfffff 	.word	0x41dfffff
 800d618:	94a03595 	.word	0x94a03595
 800d61c:	3fcfffff 	.word	0x3fcfffff

0800d620 <_strtod_r>:
 800d620:	4b01      	ldr	r3, [pc, #4]	@ (800d628 <_strtod_r+0x8>)
 800d622:	f7ff ba19 	b.w	800ca58 <_strtod_l>
 800d626:	bf00      	nop
 800d628:	20000080 	.word	0x20000080

0800d62c <__ssputs_r>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	688e      	ldr	r6, [r1, #8]
 800d632:	461f      	mov	r7, r3
 800d634:	42be      	cmp	r6, r7
 800d636:	680b      	ldr	r3, [r1, #0]
 800d638:	4682      	mov	sl, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	4690      	mov	r8, r2
 800d63e:	d82d      	bhi.n	800d69c <__ssputs_r+0x70>
 800d640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d648:	d026      	beq.n	800d698 <__ssputs_r+0x6c>
 800d64a:	6965      	ldr	r5, [r4, #20]
 800d64c:	6909      	ldr	r1, [r1, #16]
 800d64e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d652:	eba3 0901 	sub.w	r9, r3, r1
 800d656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d65a:	1c7b      	adds	r3, r7, #1
 800d65c:	444b      	add	r3, r9
 800d65e:	106d      	asrs	r5, r5, #1
 800d660:	429d      	cmp	r5, r3
 800d662:	bf38      	it	cc
 800d664:	461d      	movcc	r5, r3
 800d666:	0553      	lsls	r3, r2, #21
 800d668:	d527      	bpl.n	800d6ba <__ssputs_r+0x8e>
 800d66a:	4629      	mov	r1, r5
 800d66c:	f7fe fc98 	bl	800bfa0 <_malloc_r>
 800d670:	4606      	mov	r6, r0
 800d672:	b360      	cbz	r0, 800d6ce <__ssputs_r+0xa2>
 800d674:	6921      	ldr	r1, [r4, #16]
 800d676:	464a      	mov	r2, r9
 800d678:	f7fd fdbd 	bl	800b1f6 <memcpy>
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d686:	81a3      	strh	r3, [r4, #12]
 800d688:	6126      	str	r6, [r4, #16]
 800d68a:	6165      	str	r5, [r4, #20]
 800d68c:	444e      	add	r6, r9
 800d68e:	eba5 0509 	sub.w	r5, r5, r9
 800d692:	6026      	str	r6, [r4, #0]
 800d694:	60a5      	str	r5, [r4, #8]
 800d696:	463e      	mov	r6, r7
 800d698:	42be      	cmp	r6, r7
 800d69a:	d900      	bls.n	800d69e <__ssputs_r+0x72>
 800d69c:	463e      	mov	r6, r7
 800d69e:	6820      	ldr	r0, [r4, #0]
 800d6a0:	4632      	mov	r2, r6
 800d6a2:	4641      	mov	r1, r8
 800d6a4:	f000 faf0 	bl	800dc88 <memmove>
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	1b9b      	subs	r3, r3, r6
 800d6ac:	60a3      	str	r3, [r4, #8]
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	4433      	add	r3, r6
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ba:	462a      	mov	r2, r5
 800d6bc:	f000 fe95 	bl	800e3ea <_realloc_r>
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d1e0      	bne.n	800d688 <__ssputs_r+0x5c>
 800d6c6:	6921      	ldr	r1, [r4, #16]
 800d6c8:	4650      	mov	r0, sl
 800d6ca:	f7fe fbf5 	bl	800beb8 <_free_r>
 800d6ce:	230c      	movs	r3, #12
 800d6d0:	f8ca 3000 	str.w	r3, [sl]
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e0:	e7e9      	b.n	800d6b6 <__ssputs_r+0x8a>
	...

0800d6e4 <_svfiprintf_r>:
 800d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e8:	4698      	mov	r8, r3
 800d6ea:	898b      	ldrh	r3, [r1, #12]
 800d6ec:	061b      	lsls	r3, r3, #24
 800d6ee:	b09d      	sub	sp, #116	@ 0x74
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	4614      	mov	r4, r2
 800d6f6:	d510      	bpl.n	800d71a <_svfiprintf_r+0x36>
 800d6f8:	690b      	ldr	r3, [r1, #16]
 800d6fa:	b973      	cbnz	r3, 800d71a <_svfiprintf_r+0x36>
 800d6fc:	2140      	movs	r1, #64	@ 0x40
 800d6fe:	f7fe fc4f 	bl	800bfa0 <_malloc_r>
 800d702:	6028      	str	r0, [r5, #0]
 800d704:	6128      	str	r0, [r5, #16]
 800d706:	b930      	cbnz	r0, 800d716 <_svfiprintf_r+0x32>
 800d708:	230c      	movs	r3, #12
 800d70a:	603b      	str	r3, [r7, #0]
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	b01d      	add	sp, #116	@ 0x74
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	2340      	movs	r3, #64	@ 0x40
 800d718:	616b      	str	r3, [r5, #20]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d71e:	2320      	movs	r3, #32
 800d720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d724:	f8cd 800c 	str.w	r8, [sp, #12]
 800d728:	2330      	movs	r3, #48	@ 0x30
 800d72a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d8c8 <_svfiprintf_r+0x1e4>
 800d72e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d732:	f04f 0901 	mov.w	r9, #1
 800d736:	4623      	mov	r3, r4
 800d738:	469a      	mov	sl, r3
 800d73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d73e:	b10a      	cbz	r2, 800d744 <_svfiprintf_r+0x60>
 800d740:	2a25      	cmp	r2, #37	@ 0x25
 800d742:	d1f9      	bne.n	800d738 <_svfiprintf_r+0x54>
 800d744:	ebba 0b04 	subs.w	fp, sl, r4
 800d748:	d00b      	beq.n	800d762 <_svfiprintf_r+0x7e>
 800d74a:	465b      	mov	r3, fp
 800d74c:	4622      	mov	r2, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	4638      	mov	r0, r7
 800d752:	f7ff ff6b 	bl	800d62c <__ssputs_r>
 800d756:	3001      	adds	r0, #1
 800d758:	f000 80a7 	beq.w	800d8aa <_svfiprintf_r+0x1c6>
 800d75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d75e:	445a      	add	r2, fp
 800d760:	9209      	str	r2, [sp, #36]	@ 0x24
 800d762:	f89a 3000 	ldrb.w	r3, [sl]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 809f 	beq.w	800d8aa <_svfiprintf_r+0x1c6>
 800d76c:	2300      	movs	r3, #0
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d776:	f10a 0a01 	add.w	sl, sl, #1
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	9307      	str	r3, [sp, #28]
 800d77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d782:	931a      	str	r3, [sp, #104]	@ 0x68
 800d784:	4654      	mov	r4, sl
 800d786:	2205      	movs	r2, #5
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	484e      	ldr	r0, [pc, #312]	@ (800d8c8 <_svfiprintf_r+0x1e4>)
 800d78e:	f7f2 fd1f 	bl	80001d0 <memchr>
 800d792:	9a04      	ldr	r2, [sp, #16]
 800d794:	b9d8      	cbnz	r0, 800d7ce <_svfiprintf_r+0xea>
 800d796:	06d0      	lsls	r0, r2, #27
 800d798:	bf44      	itt	mi
 800d79a:	2320      	movmi	r3, #32
 800d79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7a0:	0711      	lsls	r1, r2, #28
 800d7a2:	bf44      	itt	mi
 800d7a4:	232b      	movmi	r3, #43	@ 0x2b
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b0:	d015      	beq.n	800d7de <_svfiprintf_r+0xfa>
 800d7b2:	9a07      	ldr	r2, [sp, #28]
 800d7b4:	4654      	mov	r4, sl
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	f04f 0c0a 	mov.w	ip, #10
 800d7bc:	4621      	mov	r1, r4
 800d7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c2:	3b30      	subs	r3, #48	@ 0x30
 800d7c4:	2b09      	cmp	r3, #9
 800d7c6:	d94b      	bls.n	800d860 <_svfiprintf_r+0x17c>
 800d7c8:	b1b0      	cbz	r0, 800d7f8 <_svfiprintf_r+0x114>
 800d7ca:	9207      	str	r2, [sp, #28]
 800d7cc:	e014      	b.n	800d7f8 <_svfiprintf_r+0x114>
 800d7ce:	eba0 0308 	sub.w	r3, r0, r8
 800d7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	46a2      	mov	sl, r4
 800d7dc:	e7d2      	b.n	800d784 <_svfiprintf_r+0xa0>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	1d19      	adds	r1, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	9103      	str	r1, [sp, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bfbb      	ittet	lt
 800d7ea:	425b      	neglt	r3, r3
 800d7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d7f0:	9307      	strge	r3, [sp, #28]
 800d7f2:	9307      	strlt	r3, [sp, #28]
 800d7f4:	bfb8      	it	lt
 800d7f6:	9204      	strlt	r2, [sp, #16]
 800d7f8:	7823      	ldrb	r3, [r4, #0]
 800d7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7fc:	d10a      	bne.n	800d814 <_svfiprintf_r+0x130>
 800d7fe:	7863      	ldrb	r3, [r4, #1]
 800d800:	2b2a      	cmp	r3, #42	@ 0x2a
 800d802:	d132      	bne.n	800d86a <_svfiprintf_r+0x186>
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	1d1a      	adds	r2, r3, #4
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	9203      	str	r2, [sp, #12]
 800d80c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d810:	3402      	adds	r4, #2
 800d812:	9305      	str	r3, [sp, #20]
 800d814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d8d8 <_svfiprintf_r+0x1f4>
 800d818:	7821      	ldrb	r1, [r4, #0]
 800d81a:	2203      	movs	r2, #3
 800d81c:	4650      	mov	r0, sl
 800d81e:	f7f2 fcd7 	bl	80001d0 <memchr>
 800d822:	b138      	cbz	r0, 800d834 <_svfiprintf_r+0x150>
 800d824:	9b04      	ldr	r3, [sp, #16]
 800d826:	eba0 000a 	sub.w	r0, r0, sl
 800d82a:	2240      	movs	r2, #64	@ 0x40
 800d82c:	4082      	lsls	r2, r0
 800d82e:	4313      	orrs	r3, r2
 800d830:	3401      	adds	r4, #1
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d838:	4824      	ldr	r0, [pc, #144]	@ (800d8cc <_svfiprintf_r+0x1e8>)
 800d83a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d83e:	2206      	movs	r2, #6
 800d840:	f7f2 fcc6 	bl	80001d0 <memchr>
 800d844:	2800      	cmp	r0, #0
 800d846:	d036      	beq.n	800d8b6 <_svfiprintf_r+0x1d2>
 800d848:	4b21      	ldr	r3, [pc, #132]	@ (800d8d0 <_svfiprintf_r+0x1ec>)
 800d84a:	bb1b      	cbnz	r3, 800d894 <_svfiprintf_r+0x1b0>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	3307      	adds	r3, #7
 800d850:	f023 0307 	bic.w	r3, r3, #7
 800d854:	3308      	adds	r3, #8
 800d856:	9303      	str	r3, [sp, #12]
 800d858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d85a:	4433      	add	r3, r6
 800d85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d85e:	e76a      	b.n	800d736 <_svfiprintf_r+0x52>
 800d860:	fb0c 3202 	mla	r2, ip, r2, r3
 800d864:	460c      	mov	r4, r1
 800d866:	2001      	movs	r0, #1
 800d868:	e7a8      	b.n	800d7bc <_svfiprintf_r+0xd8>
 800d86a:	2300      	movs	r3, #0
 800d86c:	3401      	adds	r4, #1
 800d86e:	9305      	str	r3, [sp, #20]
 800d870:	4619      	mov	r1, r3
 800d872:	f04f 0c0a 	mov.w	ip, #10
 800d876:	4620      	mov	r0, r4
 800d878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d87c:	3a30      	subs	r2, #48	@ 0x30
 800d87e:	2a09      	cmp	r2, #9
 800d880:	d903      	bls.n	800d88a <_svfiprintf_r+0x1a6>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d0c6      	beq.n	800d814 <_svfiprintf_r+0x130>
 800d886:	9105      	str	r1, [sp, #20]
 800d888:	e7c4      	b.n	800d814 <_svfiprintf_r+0x130>
 800d88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d88e:	4604      	mov	r4, r0
 800d890:	2301      	movs	r3, #1
 800d892:	e7f0      	b.n	800d876 <_svfiprintf_r+0x192>
 800d894:	ab03      	add	r3, sp, #12
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	462a      	mov	r2, r5
 800d89a:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d4 <_svfiprintf_r+0x1f0>)
 800d89c:	a904      	add	r1, sp, #16
 800d89e:	4638      	mov	r0, r7
 800d8a0:	f7fc fbe4 	bl	800a06c <_printf_float>
 800d8a4:	1c42      	adds	r2, r0, #1
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	d1d6      	bne.n	800d858 <_svfiprintf_r+0x174>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	065b      	lsls	r3, r3, #25
 800d8ae:	f53f af2d 	bmi.w	800d70c <_svfiprintf_r+0x28>
 800d8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8b4:	e72c      	b.n	800d710 <_svfiprintf_r+0x2c>
 800d8b6:	ab03      	add	r3, sp, #12
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	4b05      	ldr	r3, [pc, #20]	@ (800d8d4 <_svfiprintf_r+0x1f0>)
 800d8be:	a904      	add	r1, sp, #16
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7fc fe6b 	bl	800a59c <_printf_i>
 800d8c6:	e7ed      	b.n	800d8a4 <_svfiprintf_r+0x1c0>
 800d8c8:	0800ecd0 	.word	0x0800ecd0
 800d8cc:	0800ecda 	.word	0x0800ecda
 800d8d0:	0800a06d 	.word	0x0800a06d
 800d8d4:	0800d62d 	.word	0x0800d62d
 800d8d8:	0800ecd6 	.word	0x0800ecd6

0800d8dc <__sfputc_r>:
 800d8dc:	6893      	ldr	r3, [r2, #8]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	b410      	push	{r4}
 800d8e4:	6093      	str	r3, [r2, #8]
 800d8e6:	da08      	bge.n	800d8fa <__sfputc_r+0x1e>
 800d8e8:	6994      	ldr	r4, [r2, #24]
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	db01      	blt.n	800d8f2 <__sfputc_r+0x16>
 800d8ee:	290a      	cmp	r1, #10
 800d8f0:	d103      	bne.n	800d8fa <__sfputc_r+0x1e>
 800d8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f6:	f000 b933 	b.w	800db60 <__swbuf_r>
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	1c58      	adds	r0, r3, #1
 800d8fe:	6010      	str	r0, [r2, #0]
 800d900:	7019      	strb	r1, [r3, #0]
 800d902:	4608      	mov	r0, r1
 800d904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <__sfputs_r>:
 800d90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	4614      	mov	r4, r2
 800d912:	18d5      	adds	r5, r2, r3
 800d914:	42ac      	cmp	r4, r5
 800d916:	d101      	bne.n	800d91c <__sfputs_r+0x12>
 800d918:	2000      	movs	r0, #0
 800d91a:	e007      	b.n	800d92c <__sfputs_r+0x22>
 800d91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d920:	463a      	mov	r2, r7
 800d922:	4630      	mov	r0, r6
 800d924:	f7ff ffda 	bl	800d8dc <__sfputc_r>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d1f3      	bne.n	800d914 <__sfputs_r+0xa>
 800d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d930 <_vfiprintf_r>:
 800d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	460d      	mov	r5, r1
 800d936:	b09d      	sub	sp, #116	@ 0x74
 800d938:	4614      	mov	r4, r2
 800d93a:	4698      	mov	r8, r3
 800d93c:	4606      	mov	r6, r0
 800d93e:	b118      	cbz	r0, 800d948 <_vfiprintf_r+0x18>
 800d940:	6a03      	ldr	r3, [r0, #32]
 800d942:	b90b      	cbnz	r3, 800d948 <_vfiprintf_r+0x18>
 800d944:	f7fd faaa 	bl	800ae9c <__sinit>
 800d948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	d405      	bmi.n	800d95a <_vfiprintf_r+0x2a>
 800d94e:	89ab      	ldrh	r3, [r5, #12]
 800d950:	059a      	lsls	r2, r3, #22
 800d952:	d402      	bmi.n	800d95a <_vfiprintf_r+0x2a>
 800d954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d956:	f7fd fc44 	bl	800b1e2 <__retarget_lock_acquire_recursive>
 800d95a:	89ab      	ldrh	r3, [r5, #12]
 800d95c:	071b      	lsls	r3, r3, #28
 800d95e:	d501      	bpl.n	800d964 <_vfiprintf_r+0x34>
 800d960:	692b      	ldr	r3, [r5, #16]
 800d962:	b99b      	cbnz	r3, 800d98c <_vfiprintf_r+0x5c>
 800d964:	4629      	mov	r1, r5
 800d966:	4630      	mov	r0, r6
 800d968:	f000 f938 	bl	800dbdc <__swsetup_r>
 800d96c:	b170      	cbz	r0, 800d98c <_vfiprintf_r+0x5c>
 800d96e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d970:	07dc      	lsls	r4, r3, #31
 800d972:	d504      	bpl.n	800d97e <_vfiprintf_r+0x4e>
 800d974:	f04f 30ff 	mov.w	r0, #4294967295
 800d978:	b01d      	add	sp, #116	@ 0x74
 800d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97e:	89ab      	ldrh	r3, [r5, #12]
 800d980:	0598      	lsls	r0, r3, #22
 800d982:	d4f7      	bmi.n	800d974 <_vfiprintf_r+0x44>
 800d984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d986:	f7fd fc2d 	bl	800b1e4 <__retarget_lock_release_recursive>
 800d98a:	e7f3      	b.n	800d974 <_vfiprintf_r+0x44>
 800d98c:	2300      	movs	r3, #0
 800d98e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d990:	2320      	movs	r3, #32
 800d992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d996:	f8cd 800c 	str.w	r8, [sp, #12]
 800d99a:	2330      	movs	r3, #48	@ 0x30
 800d99c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db4c <_vfiprintf_r+0x21c>
 800d9a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9a4:	f04f 0901 	mov.w	r9, #1
 800d9a8:	4623      	mov	r3, r4
 800d9aa:	469a      	mov	sl, r3
 800d9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9b0:	b10a      	cbz	r2, 800d9b6 <_vfiprintf_r+0x86>
 800d9b2:	2a25      	cmp	r2, #37	@ 0x25
 800d9b4:	d1f9      	bne.n	800d9aa <_vfiprintf_r+0x7a>
 800d9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ba:	d00b      	beq.n	800d9d4 <_vfiprintf_r+0xa4>
 800d9bc:	465b      	mov	r3, fp
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f7ff ffa1 	bl	800d90a <__sfputs_r>
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f000 80a7 	beq.w	800db1c <_vfiprintf_r+0x1ec>
 800d9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9d0:	445a      	add	r2, fp
 800d9d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 809f 	beq.w	800db1c <_vfiprintf_r+0x1ec>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9e8:	f10a 0a01 	add.w	sl, sl, #1
 800d9ec:	9304      	str	r3, [sp, #16]
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9f6:	4654      	mov	r4, sl
 800d9f8:	2205      	movs	r2, #5
 800d9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fe:	4853      	ldr	r0, [pc, #332]	@ (800db4c <_vfiprintf_r+0x21c>)
 800da00:	f7f2 fbe6 	bl	80001d0 <memchr>
 800da04:	9a04      	ldr	r2, [sp, #16]
 800da06:	b9d8      	cbnz	r0, 800da40 <_vfiprintf_r+0x110>
 800da08:	06d1      	lsls	r1, r2, #27
 800da0a:	bf44      	itt	mi
 800da0c:	2320      	movmi	r3, #32
 800da0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da12:	0713      	lsls	r3, r2, #28
 800da14:	bf44      	itt	mi
 800da16:	232b      	movmi	r3, #43	@ 0x2b
 800da18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da1c:	f89a 3000 	ldrb.w	r3, [sl]
 800da20:	2b2a      	cmp	r3, #42	@ 0x2a
 800da22:	d015      	beq.n	800da50 <_vfiprintf_r+0x120>
 800da24:	9a07      	ldr	r2, [sp, #28]
 800da26:	4654      	mov	r4, sl
 800da28:	2000      	movs	r0, #0
 800da2a:	f04f 0c0a 	mov.w	ip, #10
 800da2e:	4621      	mov	r1, r4
 800da30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da34:	3b30      	subs	r3, #48	@ 0x30
 800da36:	2b09      	cmp	r3, #9
 800da38:	d94b      	bls.n	800dad2 <_vfiprintf_r+0x1a2>
 800da3a:	b1b0      	cbz	r0, 800da6a <_vfiprintf_r+0x13a>
 800da3c:	9207      	str	r2, [sp, #28]
 800da3e:	e014      	b.n	800da6a <_vfiprintf_r+0x13a>
 800da40:	eba0 0308 	sub.w	r3, r0, r8
 800da44:	fa09 f303 	lsl.w	r3, r9, r3
 800da48:	4313      	orrs	r3, r2
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	46a2      	mov	sl, r4
 800da4e:	e7d2      	b.n	800d9f6 <_vfiprintf_r+0xc6>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	1d19      	adds	r1, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9103      	str	r1, [sp, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfbb      	ittet	lt
 800da5c:	425b      	neglt	r3, r3
 800da5e:	f042 0202 	orrlt.w	r2, r2, #2
 800da62:	9307      	strge	r3, [sp, #28]
 800da64:	9307      	strlt	r3, [sp, #28]
 800da66:	bfb8      	it	lt
 800da68:	9204      	strlt	r2, [sp, #16]
 800da6a:	7823      	ldrb	r3, [r4, #0]
 800da6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800da6e:	d10a      	bne.n	800da86 <_vfiprintf_r+0x156>
 800da70:	7863      	ldrb	r3, [r4, #1]
 800da72:	2b2a      	cmp	r3, #42	@ 0x2a
 800da74:	d132      	bne.n	800dadc <_vfiprintf_r+0x1ac>
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	1d1a      	adds	r2, r3, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	9203      	str	r2, [sp, #12]
 800da7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da82:	3402      	adds	r4, #2
 800da84:	9305      	str	r3, [sp, #20]
 800da86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db5c <_vfiprintf_r+0x22c>
 800da8a:	7821      	ldrb	r1, [r4, #0]
 800da8c:	2203      	movs	r2, #3
 800da8e:	4650      	mov	r0, sl
 800da90:	f7f2 fb9e 	bl	80001d0 <memchr>
 800da94:	b138      	cbz	r0, 800daa6 <_vfiprintf_r+0x176>
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	eba0 000a 	sub.w	r0, r0, sl
 800da9c:	2240      	movs	r2, #64	@ 0x40
 800da9e:	4082      	lsls	r2, r0
 800daa0:	4313      	orrs	r3, r2
 800daa2:	3401      	adds	r4, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daaa:	4829      	ldr	r0, [pc, #164]	@ (800db50 <_vfiprintf_r+0x220>)
 800daac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dab0:	2206      	movs	r2, #6
 800dab2:	f7f2 fb8d 	bl	80001d0 <memchr>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d03f      	beq.n	800db3a <_vfiprintf_r+0x20a>
 800daba:	4b26      	ldr	r3, [pc, #152]	@ (800db54 <_vfiprintf_r+0x224>)
 800dabc:	bb1b      	cbnz	r3, 800db06 <_vfiprintf_r+0x1d6>
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	3307      	adds	r3, #7
 800dac2:	f023 0307 	bic.w	r3, r3, #7
 800dac6:	3308      	adds	r3, #8
 800dac8:	9303      	str	r3, [sp, #12]
 800daca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dacc:	443b      	add	r3, r7
 800dace:	9309      	str	r3, [sp, #36]	@ 0x24
 800dad0:	e76a      	b.n	800d9a8 <_vfiprintf_r+0x78>
 800dad2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dad6:	460c      	mov	r4, r1
 800dad8:	2001      	movs	r0, #1
 800dada:	e7a8      	b.n	800da2e <_vfiprintf_r+0xfe>
 800dadc:	2300      	movs	r3, #0
 800dade:	3401      	adds	r4, #1
 800dae0:	9305      	str	r3, [sp, #20]
 800dae2:	4619      	mov	r1, r3
 800dae4:	f04f 0c0a 	mov.w	ip, #10
 800dae8:	4620      	mov	r0, r4
 800daea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daee:	3a30      	subs	r2, #48	@ 0x30
 800daf0:	2a09      	cmp	r2, #9
 800daf2:	d903      	bls.n	800dafc <_vfiprintf_r+0x1cc>
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0c6      	beq.n	800da86 <_vfiprintf_r+0x156>
 800daf8:	9105      	str	r1, [sp, #20]
 800dafa:	e7c4      	b.n	800da86 <_vfiprintf_r+0x156>
 800dafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800db00:	4604      	mov	r4, r0
 800db02:	2301      	movs	r3, #1
 800db04:	e7f0      	b.n	800dae8 <_vfiprintf_r+0x1b8>
 800db06:	ab03      	add	r3, sp, #12
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	462a      	mov	r2, r5
 800db0c:	4b12      	ldr	r3, [pc, #72]	@ (800db58 <_vfiprintf_r+0x228>)
 800db0e:	a904      	add	r1, sp, #16
 800db10:	4630      	mov	r0, r6
 800db12:	f7fc faab 	bl	800a06c <_printf_float>
 800db16:	4607      	mov	r7, r0
 800db18:	1c78      	adds	r0, r7, #1
 800db1a:	d1d6      	bne.n	800daca <_vfiprintf_r+0x19a>
 800db1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db1e:	07d9      	lsls	r1, r3, #31
 800db20:	d405      	bmi.n	800db2e <_vfiprintf_r+0x1fe>
 800db22:	89ab      	ldrh	r3, [r5, #12]
 800db24:	059a      	lsls	r2, r3, #22
 800db26:	d402      	bmi.n	800db2e <_vfiprintf_r+0x1fe>
 800db28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db2a:	f7fd fb5b 	bl	800b1e4 <__retarget_lock_release_recursive>
 800db2e:	89ab      	ldrh	r3, [r5, #12]
 800db30:	065b      	lsls	r3, r3, #25
 800db32:	f53f af1f 	bmi.w	800d974 <_vfiprintf_r+0x44>
 800db36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db38:	e71e      	b.n	800d978 <_vfiprintf_r+0x48>
 800db3a:	ab03      	add	r3, sp, #12
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	462a      	mov	r2, r5
 800db40:	4b05      	ldr	r3, [pc, #20]	@ (800db58 <_vfiprintf_r+0x228>)
 800db42:	a904      	add	r1, sp, #16
 800db44:	4630      	mov	r0, r6
 800db46:	f7fc fd29 	bl	800a59c <_printf_i>
 800db4a:	e7e4      	b.n	800db16 <_vfiprintf_r+0x1e6>
 800db4c:	0800ecd0 	.word	0x0800ecd0
 800db50:	0800ecda 	.word	0x0800ecda
 800db54:	0800a06d 	.word	0x0800a06d
 800db58:	0800d90b 	.word	0x0800d90b
 800db5c:	0800ecd6 	.word	0x0800ecd6

0800db60 <__swbuf_r>:
 800db60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db62:	460e      	mov	r6, r1
 800db64:	4614      	mov	r4, r2
 800db66:	4605      	mov	r5, r0
 800db68:	b118      	cbz	r0, 800db72 <__swbuf_r+0x12>
 800db6a:	6a03      	ldr	r3, [r0, #32]
 800db6c:	b90b      	cbnz	r3, 800db72 <__swbuf_r+0x12>
 800db6e:	f7fd f995 	bl	800ae9c <__sinit>
 800db72:	69a3      	ldr	r3, [r4, #24]
 800db74:	60a3      	str	r3, [r4, #8]
 800db76:	89a3      	ldrh	r3, [r4, #12]
 800db78:	071a      	lsls	r2, r3, #28
 800db7a:	d501      	bpl.n	800db80 <__swbuf_r+0x20>
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	b943      	cbnz	r3, 800db92 <__swbuf_r+0x32>
 800db80:	4621      	mov	r1, r4
 800db82:	4628      	mov	r0, r5
 800db84:	f000 f82a 	bl	800dbdc <__swsetup_r>
 800db88:	b118      	cbz	r0, 800db92 <__swbuf_r+0x32>
 800db8a:	f04f 37ff 	mov.w	r7, #4294967295
 800db8e:	4638      	mov	r0, r7
 800db90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	6922      	ldr	r2, [r4, #16]
 800db96:	1a98      	subs	r0, r3, r2
 800db98:	6963      	ldr	r3, [r4, #20]
 800db9a:	b2f6      	uxtb	r6, r6
 800db9c:	4283      	cmp	r3, r0
 800db9e:	4637      	mov	r7, r6
 800dba0:	dc05      	bgt.n	800dbae <__swbuf_r+0x4e>
 800dba2:	4621      	mov	r1, r4
 800dba4:	4628      	mov	r0, r5
 800dba6:	f7fd f8b1 	bl	800ad0c <_fflush_r>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d1ed      	bne.n	800db8a <__swbuf_r+0x2a>
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	60a3      	str	r3, [r4, #8]
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	701e      	strb	r6, [r3, #0]
 800dbbc:	6962      	ldr	r2, [r4, #20]
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d004      	beq.n	800dbce <__swbuf_r+0x6e>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	d5e1      	bpl.n	800db8e <__swbuf_r+0x2e>
 800dbca:	2e0a      	cmp	r6, #10
 800dbcc:	d1df      	bne.n	800db8e <__swbuf_r+0x2e>
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f7fd f89b 	bl	800ad0c <_fflush_r>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d0d9      	beq.n	800db8e <__swbuf_r+0x2e>
 800dbda:	e7d6      	b.n	800db8a <__swbuf_r+0x2a>

0800dbdc <__swsetup_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4b29      	ldr	r3, [pc, #164]	@ (800dc84 <__swsetup_r+0xa8>)
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	6818      	ldr	r0, [r3, #0]
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	b118      	cbz	r0, 800dbf0 <__swsetup_r+0x14>
 800dbe8:	6a03      	ldr	r3, [r0, #32]
 800dbea:	b90b      	cbnz	r3, 800dbf0 <__swsetup_r+0x14>
 800dbec:	f7fd f956 	bl	800ae9c <__sinit>
 800dbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf4:	0719      	lsls	r1, r3, #28
 800dbf6:	d422      	bmi.n	800dc3e <__swsetup_r+0x62>
 800dbf8:	06da      	lsls	r2, r3, #27
 800dbfa:	d407      	bmi.n	800dc0c <__swsetup_r+0x30>
 800dbfc:	2209      	movs	r2, #9
 800dbfe:	602a      	str	r2, [r5, #0]
 800dc00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0a:	e033      	b.n	800dc74 <__swsetup_r+0x98>
 800dc0c:	0758      	lsls	r0, r3, #29
 800dc0e:	d512      	bpl.n	800dc36 <__swsetup_r+0x5a>
 800dc10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc12:	b141      	cbz	r1, 800dc26 <__swsetup_r+0x4a>
 800dc14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc18:	4299      	cmp	r1, r3
 800dc1a:	d002      	beq.n	800dc22 <__swsetup_r+0x46>
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f7fe f94b 	bl	800beb8 <_free_r>
 800dc22:	2300      	movs	r3, #0
 800dc24:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6063      	str	r3, [r4, #4]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	f043 0308 	orr.w	r3, r3, #8
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	b94b      	cbnz	r3, 800dc56 <__swsetup_r+0x7a>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc4c:	d003      	beq.n	800dc56 <__swsetup_r+0x7a>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4628      	mov	r0, r5
 800dc52:	f000 fc3d 	bl	800e4d0 <__smakebuf_r>
 800dc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5a:	f013 0201 	ands.w	r2, r3, #1
 800dc5e:	d00a      	beq.n	800dc76 <__swsetup_r+0x9a>
 800dc60:	2200      	movs	r2, #0
 800dc62:	60a2      	str	r2, [r4, #8]
 800dc64:	6962      	ldr	r2, [r4, #20]
 800dc66:	4252      	negs	r2, r2
 800dc68:	61a2      	str	r2, [r4, #24]
 800dc6a:	6922      	ldr	r2, [r4, #16]
 800dc6c:	b942      	cbnz	r2, 800dc80 <__swsetup_r+0xa4>
 800dc6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc72:	d1c5      	bne.n	800dc00 <__swsetup_r+0x24>
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	0799      	lsls	r1, r3, #30
 800dc78:	bf58      	it	pl
 800dc7a:	6962      	ldrpl	r2, [r4, #20]
 800dc7c:	60a2      	str	r2, [r4, #8]
 800dc7e:	e7f4      	b.n	800dc6a <__swsetup_r+0x8e>
 800dc80:	2000      	movs	r0, #0
 800dc82:	e7f7      	b.n	800dc74 <__swsetup_r+0x98>
 800dc84:	20000030 	.word	0x20000030

0800dc88 <memmove>:
 800dc88:	4288      	cmp	r0, r1
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	eb01 0402 	add.w	r4, r1, r2
 800dc90:	d902      	bls.n	800dc98 <memmove+0x10>
 800dc92:	4284      	cmp	r4, r0
 800dc94:	4623      	mov	r3, r4
 800dc96:	d807      	bhi.n	800dca8 <memmove+0x20>
 800dc98:	1e43      	subs	r3, r0, #1
 800dc9a:	42a1      	cmp	r1, r4
 800dc9c:	d008      	beq.n	800dcb0 <memmove+0x28>
 800dc9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dca6:	e7f8      	b.n	800dc9a <memmove+0x12>
 800dca8:	4402      	add	r2, r0
 800dcaa:	4601      	mov	r1, r0
 800dcac:	428a      	cmp	r2, r1
 800dcae:	d100      	bne.n	800dcb2 <memmove+0x2a>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcba:	e7f7      	b.n	800dcac <memmove+0x24>

0800dcbc <_sbrk_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	@ (800dcd8 <_sbrk_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f4 f93c 	bl	8001f44 <_sbrk>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_sbrk_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_sbrk_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	20006dc8 	.word	0x20006dc8
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <nan>:
 800dce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dce8 <nan+0x8>
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	00000000 	.word	0x00000000
 800dcec:	7ff80000 	.word	0x7ff80000

0800dcf0 <__assert_func>:
 800dcf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcf2:	4614      	mov	r4, r2
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <__assert_func+0x2c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	68d8      	ldr	r0, [r3, #12]
 800dcfe:	b954      	cbnz	r4, 800dd16 <__assert_func+0x26>
 800dd00:	4b07      	ldr	r3, [pc, #28]	@ (800dd20 <__assert_func+0x30>)
 800dd02:	461c      	mov	r4, r3
 800dd04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd08:	9100      	str	r1, [sp, #0]
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	4905      	ldr	r1, [pc, #20]	@ (800dd24 <__assert_func+0x34>)
 800dd0e:	f000 fba7 	bl	800e460 <fiprintf>
 800dd12:	f000 fc3b 	bl	800e58c <abort>
 800dd16:	4b04      	ldr	r3, [pc, #16]	@ (800dd28 <__assert_func+0x38>)
 800dd18:	e7f4      	b.n	800dd04 <__assert_func+0x14>
 800dd1a:	bf00      	nop
 800dd1c:	20000030 	.word	0x20000030
 800dd20:	0800ed24 	.word	0x0800ed24
 800dd24:	0800ecf6 	.word	0x0800ecf6
 800dd28:	0800ece9 	.word	0x0800ece9

0800dd2c <_calloc_r>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	fba1 5402 	umull	r5, r4, r1, r2
 800dd32:	b93c      	cbnz	r4, 800dd44 <_calloc_r+0x18>
 800dd34:	4629      	mov	r1, r5
 800dd36:	f7fe f933 	bl	800bfa0 <_malloc_r>
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	b928      	cbnz	r0, 800dd4a <_calloc_r+0x1e>
 800dd3e:	2600      	movs	r6, #0
 800dd40:	4630      	mov	r0, r6
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	220c      	movs	r2, #12
 800dd46:	6002      	str	r2, [r0, #0]
 800dd48:	e7f9      	b.n	800dd3e <_calloc_r+0x12>
 800dd4a:	462a      	mov	r2, r5
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f7fd f950 	bl	800aff2 <memset>
 800dd52:	e7f5      	b.n	800dd40 <_calloc_r+0x14>

0800dd54 <rshift>:
 800dd54:	6903      	ldr	r3, [r0, #16]
 800dd56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd62:	f100 0414 	add.w	r4, r0, #20
 800dd66:	dd45      	ble.n	800ddf4 <rshift+0xa0>
 800dd68:	f011 011f 	ands.w	r1, r1, #31
 800dd6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd74:	d10c      	bne.n	800dd90 <rshift+0x3c>
 800dd76:	f100 0710 	add.w	r7, r0, #16
 800dd7a:	4629      	mov	r1, r5
 800dd7c:	42b1      	cmp	r1, r6
 800dd7e:	d334      	bcc.n	800ddea <rshift+0x96>
 800dd80:	1a9b      	subs	r3, r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	1eea      	subs	r2, r5, #3
 800dd86:	4296      	cmp	r6, r2
 800dd88:	bf38      	it	cc
 800dd8a:	2300      	movcc	r3, #0
 800dd8c:	4423      	add	r3, r4
 800dd8e:	e015      	b.n	800ddbc <rshift+0x68>
 800dd90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd94:	f1c1 0820 	rsb	r8, r1, #32
 800dd98:	40cf      	lsrs	r7, r1
 800dd9a:	f105 0e04 	add.w	lr, r5, #4
 800dd9e:	46a1      	mov	r9, r4
 800dda0:	4576      	cmp	r6, lr
 800dda2:	46f4      	mov	ip, lr
 800dda4:	d815      	bhi.n	800ddd2 <rshift+0x7e>
 800dda6:	1a9a      	subs	r2, r3, r2
 800dda8:	0092      	lsls	r2, r2, #2
 800ddaa:	3a04      	subs	r2, #4
 800ddac:	3501      	adds	r5, #1
 800ddae:	42ae      	cmp	r6, r5
 800ddb0:	bf38      	it	cc
 800ddb2:	2200      	movcc	r2, #0
 800ddb4:	18a3      	adds	r3, r4, r2
 800ddb6:	50a7      	str	r7, [r4, r2]
 800ddb8:	b107      	cbz	r7, 800ddbc <rshift+0x68>
 800ddba:	3304      	adds	r3, #4
 800ddbc:	1b1a      	subs	r2, r3, r4
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddc4:	bf08      	it	eq
 800ddc6:	2300      	moveq	r3, #0
 800ddc8:	6102      	str	r2, [r0, #16]
 800ddca:	bf08      	it	eq
 800ddcc:	6143      	streq	r3, [r0, #20]
 800ddce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd2:	f8dc c000 	ldr.w	ip, [ip]
 800ddd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddda:	ea4c 0707 	orr.w	r7, ip, r7
 800ddde:	f849 7b04 	str.w	r7, [r9], #4
 800dde2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dde6:	40cf      	lsrs	r7, r1
 800dde8:	e7da      	b.n	800dda0 <rshift+0x4c>
 800ddea:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddee:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddf2:	e7c3      	b.n	800dd7c <rshift+0x28>
 800ddf4:	4623      	mov	r3, r4
 800ddf6:	e7e1      	b.n	800ddbc <rshift+0x68>

0800ddf8 <__hexdig_fun>:
 800ddf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ddfc:	2b09      	cmp	r3, #9
 800ddfe:	d802      	bhi.n	800de06 <__hexdig_fun+0xe>
 800de00:	3820      	subs	r0, #32
 800de02:	b2c0      	uxtb	r0, r0
 800de04:	4770      	bx	lr
 800de06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de0a:	2b05      	cmp	r3, #5
 800de0c:	d801      	bhi.n	800de12 <__hexdig_fun+0x1a>
 800de0e:	3847      	subs	r0, #71	@ 0x47
 800de10:	e7f7      	b.n	800de02 <__hexdig_fun+0xa>
 800de12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de16:	2b05      	cmp	r3, #5
 800de18:	d801      	bhi.n	800de1e <__hexdig_fun+0x26>
 800de1a:	3827      	subs	r0, #39	@ 0x27
 800de1c:	e7f1      	b.n	800de02 <__hexdig_fun+0xa>
 800de1e:	2000      	movs	r0, #0
 800de20:	4770      	bx	lr
	...

0800de24 <__gethex>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	b085      	sub	sp, #20
 800de2a:	468a      	mov	sl, r1
 800de2c:	9302      	str	r3, [sp, #8]
 800de2e:	680b      	ldr	r3, [r1, #0]
 800de30:	9001      	str	r0, [sp, #4]
 800de32:	4690      	mov	r8, r2
 800de34:	1c9c      	adds	r4, r3, #2
 800de36:	46a1      	mov	r9, r4
 800de38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de3c:	2830      	cmp	r0, #48	@ 0x30
 800de3e:	d0fa      	beq.n	800de36 <__gethex+0x12>
 800de40:	eba9 0303 	sub.w	r3, r9, r3
 800de44:	f1a3 0b02 	sub.w	fp, r3, #2
 800de48:	f7ff ffd6 	bl	800ddf8 <__hexdig_fun>
 800de4c:	4605      	mov	r5, r0
 800de4e:	2800      	cmp	r0, #0
 800de50:	d168      	bne.n	800df24 <__gethex+0x100>
 800de52:	49a0      	ldr	r1, [pc, #640]	@ (800e0d4 <__gethex+0x2b0>)
 800de54:	2201      	movs	r2, #1
 800de56:	4648      	mov	r0, r9
 800de58:	f7fd f8d3 	bl	800b002 <strncmp>
 800de5c:	4607      	mov	r7, r0
 800de5e:	2800      	cmp	r0, #0
 800de60:	d167      	bne.n	800df32 <__gethex+0x10e>
 800de62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de66:	4626      	mov	r6, r4
 800de68:	f7ff ffc6 	bl	800ddf8 <__hexdig_fun>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d062      	beq.n	800df36 <__gethex+0x112>
 800de70:	4623      	mov	r3, r4
 800de72:	7818      	ldrb	r0, [r3, #0]
 800de74:	2830      	cmp	r0, #48	@ 0x30
 800de76:	4699      	mov	r9, r3
 800de78:	f103 0301 	add.w	r3, r3, #1
 800de7c:	d0f9      	beq.n	800de72 <__gethex+0x4e>
 800de7e:	f7ff ffbb 	bl	800ddf8 <__hexdig_fun>
 800de82:	fab0 f580 	clz	r5, r0
 800de86:	096d      	lsrs	r5, r5, #5
 800de88:	f04f 0b01 	mov.w	fp, #1
 800de8c:	464a      	mov	r2, r9
 800de8e:	4616      	mov	r6, r2
 800de90:	3201      	adds	r2, #1
 800de92:	7830      	ldrb	r0, [r6, #0]
 800de94:	f7ff ffb0 	bl	800ddf8 <__hexdig_fun>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d1f8      	bne.n	800de8e <__gethex+0x6a>
 800de9c:	498d      	ldr	r1, [pc, #564]	@ (800e0d4 <__gethex+0x2b0>)
 800de9e:	2201      	movs	r2, #1
 800dea0:	4630      	mov	r0, r6
 800dea2:	f7fd f8ae 	bl	800b002 <strncmp>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d13f      	bne.n	800df2a <__gethex+0x106>
 800deaa:	b944      	cbnz	r4, 800debe <__gethex+0x9a>
 800deac:	1c74      	adds	r4, r6, #1
 800deae:	4622      	mov	r2, r4
 800deb0:	4616      	mov	r6, r2
 800deb2:	3201      	adds	r2, #1
 800deb4:	7830      	ldrb	r0, [r6, #0]
 800deb6:	f7ff ff9f 	bl	800ddf8 <__hexdig_fun>
 800deba:	2800      	cmp	r0, #0
 800debc:	d1f8      	bne.n	800deb0 <__gethex+0x8c>
 800debe:	1ba4      	subs	r4, r4, r6
 800dec0:	00a7      	lsls	r7, r4, #2
 800dec2:	7833      	ldrb	r3, [r6, #0]
 800dec4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dec8:	2b50      	cmp	r3, #80	@ 0x50
 800deca:	d13e      	bne.n	800df4a <__gethex+0x126>
 800decc:	7873      	ldrb	r3, [r6, #1]
 800dece:	2b2b      	cmp	r3, #43	@ 0x2b
 800ded0:	d033      	beq.n	800df3a <__gethex+0x116>
 800ded2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ded4:	d034      	beq.n	800df40 <__gethex+0x11c>
 800ded6:	1c71      	adds	r1, r6, #1
 800ded8:	2400      	movs	r4, #0
 800deda:	7808      	ldrb	r0, [r1, #0]
 800dedc:	f7ff ff8c 	bl	800ddf8 <__hexdig_fun>
 800dee0:	1e43      	subs	r3, r0, #1
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b18      	cmp	r3, #24
 800dee6:	d830      	bhi.n	800df4a <__gethex+0x126>
 800dee8:	f1a0 0210 	sub.w	r2, r0, #16
 800deec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800def0:	f7ff ff82 	bl	800ddf8 <__hexdig_fun>
 800def4:	f100 3cff 	add.w	ip, r0, #4294967295
 800def8:	fa5f fc8c 	uxtb.w	ip, ip
 800defc:	f1bc 0f18 	cmp.w	ip, #24
 800df00:	f04f 030a 	mov.w	r3, #10
 800df04:	d91e      	bls.n	800df44 <__gethex+0x120>
 800df06:	b104      	cbz	r4, 800df0a <__gethex+0xe6>
 800df08:	4252      	negs	r2, r2
 800df0a:	4417      	add	r7, r2
 800df0c:	f8ca 1000 	str.w	r1, [sl]
 800df10:	b1ed      	cbz	r5, 800df4e <__gethex+0x12a>
 800df12:	f1bb 0f00 	cmp.w	fp, #0
 800df16:	bf0c      	ite	eq
 800df18:	2506      	moveq	r5, #6
 800df1a:	2500      	movne	r5, #0
 800df1c:	4628      	mov	r0, r5
 800df1e:	b005      	add	sp, #20
 800df20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df24:	2500      	movs	r5, #0
 800df26:	462c      	mov	r4, r5
 800df28:	e7b0      	b.n	800de8c <__gethex+0x68>
 800df2a:	2c00      	cmp	r4, #0
 800df2c:	d1c7      	bne.n	800debe <__gethex+0x9a>
 800df2e:	4627      	mov	r7, r4
 800df30:	e7c7      	b.n	800dec2 <__gethex+0x9e>
 800df32:	464e      	mov	r6, r9
 800df34:	462f      	mov	r7, r5
 800df36:	2501      	movs	r5, #1
 800df38:	e7c3      	b.n	800dec2 <__gethex+0x9e>
 800df3a:	2400      	movs	r4, #0
 800df3c:	1cb1      	adds	r1, r6, #2
 800df3e:	e7cc      	b.n	800deda <__gethex+0xb6>
 800df40:	2401      	movs	r4, #1
 800df42:	e7fb      	b.n	800df3c <__gethex+0x118>
 800df44:	fb03 0002 	mla	r0, r3, r2, r0
 800df48:	e7ce      	b.n	800dee8 <__gethex+0xc4>
 800df4a:	4631      	mov	r1, r6
 800df4c:	e7de      	b.n	800df0c <__gethex+0xe8>
 800df4e:	eba6 0309 	sub.w	r3, r6, r9
 800df52:	3b01      	subs	r3, #1
 800df54:	4629      	mov	r1, r5
 800df56:	2b07      	cmp	r3, #7
 800df58:	dc0a      	bgt.n	800df70 <__gethex+0x14c>
 800df5a:	9801      	ldr	r0, [sp, #4]
 800df5c:	f7fe f8ac 	bl	800c0b8 <_Balloc>
 800df60:	4604      	mov	r4, r0
 800df62:	b940      	cbnz	r0, 800df76 <__gethex+0x152>
 800df64:	4b5c      	ldr	r3, [pc, #368]	@ (800e0d8 <__gethex+0x2b4>)
 800df66:	4602      	mov	r2, r0
 800df68:	21e4      	movs	r1, #228	@ 0xe4
 800df6a:	485c      	ldr	r0, [pc, #368]	@ (800e0dc <__gethex+0x2b8>)
 800df6c:	f7ff fec0 	bl	800dcf0 <__assert_func>
 800df70:	3101      	adds	r1, #1
 800df72:	105b      	asrs	r3, r3, #1
 800df74:	e7ef      	b.n	800df56 <__gethex+0x132>
 800df76:	f100 0a14 	add.w	sl, r0, #20
 800df7a:	2300      	movs	r3, #0
 800df7c:	4655      	mov	r5, sl
 800df7e:	469b      	mov	fp, r3
 800df80:	45b1      	cmp	r9, r6
 800df82:	d337      	bcc.n	800dff4 <__gethex+0x1d0>
 800df84:	f845 bb04 	str.w	fp, [r5], #4
 800df88:	eba5 050a 	sub.w	r5, r5, sl
 800df8c:	10ad      	asrs	r5, r5, #2
 800df8e:	6125      	str	r5, [r4, #16]
 800df90:	4658      	mov	r0, fp
 800df92:	f7fe f983 	bl	800c29c <__hi0bits>
 800df96:	016d      	lsls	r5, r5, #5
 800df98:	f8d8 6000 	ldr.w	r6, [r8]
 800df9c:	1a2d      	subs	r5, r5, r0
 800df9e:	42b5      	cmp	r5, r6
 800dfa0:	dd54      	ble.n	800e04c <__gethex+0x228>
 800dfa2:	1bad      	subs	r5, r5, r6
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7fe fd17 	bl	800c9da <__any_on>
 800dfac:	4681      	mov	r9, r0
 800dfae:	b178      	cbz	r0, 800dfd0 <__gethex+0x1ac>
 800dfb0:	1e6b      	subs	r3, r5, #1
 800dfb2:	1159      	asrs	r1, r3, #5
 800dfb4:	f003 021f 	and.w	r2, r3, #31
 800dfb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfbc:	f04f 0901 	mov.w	r9, #1
 800dfc0:	fa09 f202 	lsl.w	r2, r9, r2
 800dfc4:	420a      	tst	r2, r1
 800dfc6:	d003      	beq.n	800dfd0 <__gethex+0x1ac>
 800dfc8:	454b      	cmp	r3, r9
 800dfca:	dc36      	bgt.n	800e03a <__gethex+0x216>
 800dfcc:	f04f 0902 	mov.w	r9, #2
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff febe 	bl	800dd54 <rshift>
 800dfd8:	442f      	add	r7, r5
 800dfda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfde:	42bb      	cmp	r3, r7
 800dfe0:	da42      	bge.n	800e068 <__gethex+0x244>
 800dfe2:	9801      	ldr	r0, [sp, #4]
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	f7fe f8a7 	bl	800c138 <_Bfree>
 800dfea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfec:	2300      	movs	r3, #0
 800dfee:	6013      	str	r3, [r2, #0]
 800dff0:	25a3      	movs	r5, #163	@ 0xa3
 800dff2:	e793      	b.n	800df1c <__gethex+0xf8>
 800dff4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dff8:	2a2e      	cmp	r2, #46	@ 0x2e
 800dffa:	d012      	beq.n	800e022 <__gethex+0x1fe>
 800dffc:	2b20      	cmp	r3, #32
 800dffe:	d104      	bne.n	800e00a <__gethex+0x1e6>
 800e000:	f845 bb04 	str.w	fp, [r5], #4
 800e004:	f04f 0b00 	mov.w	fp, #0
 800e008:	465b      	mov	r3, fp
 800e00a:	7830      	ldrb	r0, [r6, #0]
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	f7ff fef3 	bl	800ddf8 <__hexdig_fun>
 800e012:	9b03      	ldr	r3, [sp, #12]
 800e014:	f000 000f 	and.w	r0, r0, #15
 800e018:	4098      	lsls	r0, r3
 800e01a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e01e:	3304      	adds	r3, #4
 800e020:	e7ae      	b.n	800df80 <__gethex+0x15c>
 800e022:	45b1      	cmp	r9, r6
 800e024:	d8ea      	bhi.n	800dffc <__gethex+0x1d8>
 800e026:	492b      	ldr	r1, [pc, #172]	@ (800e0d4 <__gethex+0x2b0>)
 800e028:	9303      	str	r3, [sp, #12]
 800e02a:	2201      	movs	r2, #1
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7fc ffe8 	bl	800b002 <strncmp>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	2800      	cmp	r0, #0
 800e036:	d1e1      	bne.n	800dffc <__gethex+0x1d8>
 800e038:	e7a2      	b.n	800df80 <__gethex+0x15c>
 800e03a:	1ea9      	subs	r1, r5, #2
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7fe fccc 	bl	800c9da <__any_on>
 800e042:	2800      	cmp	r0, #0
 800e044:	d0c2      	beq.n	800dfcc <__gethex+0x1a8>
 800e046:	f04f 0903 	mov.w	r9, #3
 800e04a:	e7c1      	b.n	800dfd0 <__gethex+0x1ac>
 800e04c:	da09      	bge.n	800e062 <__gethex+0x23e>
 800e04e:	1b75      	subs	r5, r6, r5
 800e050:	4621      	mov	r1, r4
 800e052:	9801      	ldr	r0, [sp, #4]
 800e054:	462a      	mov	r2, r5
 800e056:	f7fe fa87 	bl	800c568 <__lshift>
 800e05a:	1b7f      	subs	r7, r7, r5
 800e05c:	4604      	mov	r4, r0
 800e05e:	f100 0a14 	add.w	sl, r0, #20
 800e062:	f04f 0900 	mov.w	r9, #0
 800e066:	e7b8      	b.n	800dfda <__gethex+0x1b6>
 800e068:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e06c:	42bd      	cmp	r5, r7
 800e06e:	dd6f      	ble.n	800e150 <__gethex+0x32c>
 800e070:	1bed      	subs	r5, r5, r7
 800e072:	42ae      	cmp	r6, r5
 800e074:	dc34      	bgt.n	800e0e0 <__gethex+0x2bc>
 800e076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d022      	beq.n	800e0c4 <__gethex+0x2a0>
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d024      	beq.n	800e0cc <__gethex+0x2a8>
 800e082:	2b01      	cmp	r3, #1
 800e084:	d115      	bne.n	800e0b2 <__gethex+0x28e>
 800e086:	42ae      	cmp	r6, r5
 800e088:	d113      	bne.n	800e0b2 <__gethex+0x28e>
 800e08a:	2e01      	cmp	r6, #1
 800e08c:	d10b      	bne.n	800e0a6 <__gethex+0x282>
 800e08e:	9a02      	ldr	r2, [sp, #8]
 800e090:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	2301      	movs	r3, #1
 800e098:	6123      	str	r3, [r4, #16]
 800e09a:	f8ca 3000 	str.w	r3, [sl]
 800e09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0a0:	2562      	movs	r5, #98	@ 0x62
 800e0a2:	601c      	str	r4, [r3, #0]
 800e0a4:	e73a      	b.n	800df1c <__gethex+0xf8>
 800e0a6:	1e71      	subs	r1, r6, #1
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7fe fc96 	bl	800c9da <__any_on>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d1ed      	bne.n	800e08e <__gethex+0x26a>
 800e0b2:	9801      	ldr	r0, [sp, #4]
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	f7fe f83f 	bl	800c138 <_Bfree>
 800e0ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0bc:	2300      	movs	r3, #0
 800e0be:	6013      	str	r3, [r2, #0]
 800e0c0:	2550      	movs	r5, #80	@ 0x50
 800e0c2:	e72b      	b.n	800df1c <__gethex+0xf8>
 800e0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1f3      	bne.n	800e0b2 <__gethex+0x28e>
 800e0ca:	e7e0      	b.n	800e08e <__gethex+0x26a>
 800e0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1dd      	bne.n	800e08e <__gethex+0x26a>
 800e0d2:	e7ee      	b.n	800e0b2 <__gethex+0x28e>
 800e0d4:	0800ec78 	.word	0x0800ec78
 800e0d8:	0800eb0f 	.word	0x0800eb0f
 800e0dc:	0800ed25 	.word	0x0800ed25
 800e0e0:	1e6f      	subs	r7, r5, #1
 800e0e2:	f1b9 0f00 	cmp.w	r9, #0
 800e0e6:	d130      	bne.n	800e14a <__gethex+0x326>
 800e0e8:	b127      	cbz	r7, 800e0f4 <__gethex+0x2d0>
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7fe fc74 	bl	800c9da <__any_on>
 800e0f2:	4681      	mov	r9, r0
 800e0f4:	117a      	asrs	r2, r7, #5
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e0fc:	f007 071f 	and.w	r7, r7, #31
 800e100:	40bb      	lsls	r3, r7
 800e102:	4213      	tst	r3, r2
 800e104:	4629      	mov	r1, r5
 800e106:	4620      	mov	r0, r4
 800e108:	bf18      	it	ne
 800e10a:	f049 0902 	orrne.w	r9, r9, #2
 800e10e:	f7ff fe21 	bl	800dd54 <rshift>
 800e112:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e116:	1b76      	subs	r6, r6, r5
 800e118:	2502      	movs	r5, #2
 800e11a:	f1b9 0f00 	cmp.w	r9, #0
 800e11e:	d047      	beq.n	800e1b0 <__gethex+0x38c>
 800e120:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d015      	beq.n	800e154 <__gethex+0x330>
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d017      	beq.n	800e15c <__gethex+0x338>
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d109      	bne.n	800e144 <__gethex+0x320>
 800e130:	f019 0f02 	tst.w	r9, #2
 800e134:	d006      	beq.n	800e144 <__gethex+0x320>
 800e136:	f8da 3000 	ldr.w	r3, [sl]
 800e13a:	ea49 0903 	orr.w	r9, r9, r3
 800e13e:	f019 0f01 	tst.w	r9, #1
 800e142:	d10e      	bne.n	800e162 <__gethex+0x33e>
 800e144:	f045 0510 	orr.w	r5, r5, #16
 800e148:	e032      	b.n	800e1b0 <__gethex+0x38c>
 800e14a:	f04f 0901 	mov.w	r9, #1
 800e14e:	e7d1      	b.n	800e0f4 <__gethex+0x2d0>
 800e150:	2501      	movs	r5, #1
 800e152:	e7e2      	b.n	800e11a <__gethex+0x2f6>
 800e154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e156:	f1c3 0301 	rsb	r3, r3, #1
 800e15a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0f0      	beq.n	800e144 <__gethex+0x320>
 800e162:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e166:	f104 0314 	add.w	r3, r4, #20
 800e16a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e16e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e172:	f04f 0c00 	mov.w	ip, #0
 800e176:	4618      	mov	r0, r3
 800e178:	f853 2b04 	ldr.w	r2, [r3], #4
 800e17c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e180:	d01b      	beq.n	800e1ba <__gethex+0x396>
 800e182:	3201      	adds	r2, #1
 800e184:	6002      	str	r2, [r0, #0]
 800e186:	2d02      	cmp	r5, #2
 800e188:	f104 0314 	add.w	r3, r4, #20
 800e18c:	d13c      	bne.n	800e208 <__gethex+0x3e4>
 800e18e:	f8d8 2000 	ldr.w	r2, [r8]
 800e192:	3a01      	subs	r2, #1
 800e194:	42b2      	cmp	r2, r6
 800e196:	d109      	bne.n	800e1ac <__gethex+0x388>
 800e198:	1171      	asrs	r1, r6, #5
 800e19a:	2201      	movs	r2, #1
 800e19c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1a0:	f006 061f 	and.w	r6, r6, #31
 800e1a4:	fa02 f606 	lsl.w	r6, r2, r6
 800e1a8:	421e      	tst	r6, r3
 800e1aa:	d13a      	bne.n	800e222 <__gethex+0x3fe>
 800e1ac:	f045 0520 	orr.w	r5, r5, #32
 800e1b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b2:	601c      	str	r4, [r3, #0]
 800e1b4:	9b02      	ldr	r3, [sp, #8]
 800e1b6:	601f      	str	r7, [r3, #0]
 800e1b8:	e6b0      	b.n	800df1c <__gethex+0xf8>
 800e1ba:	4299      	cmp	r1, r3
 800e1bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1c0:	d8d9      	bhi.n	800e176 <__gethex+0x352>
 800e1c2:	68a3      	ldr	r3, [r4, #8]
 800e1c4:	459b      	cmp	fp, r3
 800e1c6:	db17      	blt.n	800e1f8 <__gethex+0x3d4>
 800e1c8:	6861      	ldr	r1, [r4, #4]
 800e1ca:	9801      	ldr	r0, [sp, #4]
 800e1cc:	3101      	adds	r1, #1
 800e1ce:	f7fd ff73 	bl	800c0b8 <_Balloc>
 800e1d2:	4681      	mov	r9, r0
 800e1d4:	b918      	cbnz	r0, 800e1de <__gethex+0x3ba>
 800e1d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e240 <__gethex+0x41c>)
 800e1d8:	4602      	mov	r2, r0
 800e1da:	2184      	movs	r1, #132	@ 0x84
 800e1dc:	e6c5      	b.n	800df6a <__gethex+0x146>
 800e1de:	6922      	ldr	r2, [r4, #16]
 800e1e0:	3202      	adds	r2, #2
 800e1e2:	f104 010c 	add.w	r1, r4, #12
 800e1e6:	0092      	lsls	r2, r2, #2
 800e1e8:	300c      	adds	r0, #12
 800e1ea:	f7fd f804 	bl	800b1f6 <memcpy>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	9801      	ldr	r0, [sp, #4]
 800e1f2:	f7fd ffa1 	bl	800c138 <_Bfree>
 800e1f6:	464c      	mov	r4, r9
 800e1f8:	6923      	ldr	r3, [r4, #16]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e200:	6122      	str	r2, [r4, #16]
 800e202:	2201      	movs	r2, #1
 800e204:	615a      	str	r2, [r3, #20]
 800e206:	e7be      	b.n	800e186 <__gethex+0x362>
 800e208:	6922      	ldr	r2, [r4, #16]
 800e20a:	455a      	cmp	r2, fp
 800e20c:	dd0b      	ble.n	800e226 <__gethex+0x402>
 800e20e:	2101      	movs	r1, #1
 800e210:	4620      	mov	r0, r4
 800e212:	f7ff fd9f 	bl	800dd54 <rshift>
 800e216:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e21a:	3701      	adds	r7, #1
 800e21c:	42bb      	cmp	r3, r7
 800e21e:	f6ff aee0 	blt.w	800dfe2 <__gethex+0x1be>
 800e222:	2501      	movs	r5, #1
 800e224:	e7c2      	b.n	800e1ac <__gethex+0x388>
 800e226:	f016 061f 	ands.w	r6, r6, #31
 800e22a:	d0fa      	beq.n	800e222 <__gethex+0x3fe>
 800e22c:	4453      	add	r3, sl
 800e22e:	f1c6 0620 	rsb	r6, r6, #32
 800e232:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e236:	f7fe f831 	bl	800c29c <__hi0bits>
 800e23a:	42b0      	cmp	r0, r6
 800e23c:	dbe7      	blt.n	800e20e <__gethex+0x3ea>
 800e23e:	e7f0      	b.n	800e222 <__gethex+0x3fe>
 800e240:	0800eb0f 	.word	0x0800eb0f

0800e244 <L_shift>:
 800e244:	f1c2 0208 	rsb	r2, r2, #8
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	b570      	push	{r4, r5, r6, lr}
 800e24c:	f1c2 0620 	rsb	r6, r2, #32
 800e250:	6843      	ldr	r3, [r0, #4]
 800e252:	6804      	ldr	r4, [r0, #0]
 800e254:	fa03 f506 	lsl.w	r5, r3, r6
 800e258:	432c      	orrs	r4, r5
 800e25a:	40d3      	lsrs	r3, r2
 800e25c:	6004      	str	r4, [r0, #0]
 800e25e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e262:	4288      	cmp	r0, r1
 800e264:	d3f4      	bcc.n	800e250 <L_shift+0xc>
 800e266:	bd70      	pop	{r4, r5, r6, pc}

0800e268 <__match>:
 800e268:	b530      	push	{r4, r5, lr}
 800e26a:	6803      	ldr	r3, [r0, #0]
 800e26c:	3301      	adds	r3, #1
 800e26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e272:	b914      	cbnz	r4, 800e27a <__match+0x12>
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	2001      	movs	r0, #1
 800e278:	bd30      	pop	{r4, r5, pc}
 800e27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e27e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e282:	2d19      	cmp	r5, #25
 800e284:	bf98      	it	ls
 800e286:	3220      	addls	r2, #32
 800e288:	42a2      	cmp	r2, r4
 800e28a:	d0f0      	beq.n	800e26e <__match+0x6>
 800e28c:	2000      	movs	r0, #0
 800e28e:	e7f3      	b.n	800e278 <__match+0x10>

0800e290 <__hexnan>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	680b      	ldr	r3, [r1, #0]
 800e296:	6801      	ldr	r1, [r0, #0]
 800e298:	115e      	asrs	r6, r3, #5
 800e29a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e29e:	f013 031f 	ands.w	r3, r3, #31
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	bf18      	it	ne
 800e2a6:	3604      	addne	r6, #4
 800e2a8:	2500      	movs	r5, #0
 800e2aa:	1f37      	subs	r7, r6, #4
 800e2ac:	4682      	mov	sl, r0
 800e2ae:	4690      	mov	r8, r2
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2b6:	46b9      	mov	r9, r7
 800e2b8:	463c      	mov	r4, r7
 800e2ba:	9502      	str	r5, [sp, #8]
 800e2bc:	46ab      	mov	fp, r5
 800e2be:	784a      	ldrb	r2, [r1, #1]
 800e2c0:	1c4b      	adds	r3, r1, #1
 800e2c2:	9303      	str	r3, [sp, #12]
 800e2c4:	b342      	cbz	r2, 800e318 <__hexnan+0x88>
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	9105      	str	r1, [sp, #20]
 800e2ca:	9204      	str	r2, [sp, #16]
 800e2cc:	f7ff fd94 	bl	800ddf8 <__hexdig_fun>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d151      	bne.n	800e378 <__hexnan+0xe8>
 800e2d4:	9a04      	ldr	r2, [sp, #16]
 800e2d6:	9905      	ldr	r1, [sp, #20]
 800e2d8:	2a20      	cmp	r2, #32
 800e2da:	d818      	bhi.n	800e30e <__hexnan+0x7e>
 800e2dc:	9b02      	ldr	r3, [sp, #8]
 800e2de:	459b      	cmp	fp, r3
 800e2e0:	dd13      	ble.n	800e30a <__hexnan+0x7a>
 800e2e2:	454c      	cmp	r4, r9
 800e2e4:	d206      	bcs.n	800e2f4 <__hexnan+0x64>
 800e2e6:	2d07      	cmp	r5, #7
 800e2e8:	dc04      	bgt.n	800e2f4 <__hexnan+0x64>
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7ff ffa8 	bl	800e244 <L_shift>
 800e2f4:	4544      	cmp	r4, r8
 800e2f6:	d952      	bls.n	800e39e <__hexnan+0x10e>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e2fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800e302:	f8cd b008 	str.w	fp, [sp, #8]
 800e306:	464c      	mov	r4, r9
 800e308:	461d      	mov	r5, r3
 800e30a:	9903      	ldr	r1, [sp, #12]
 800e30c:	e7d7      	b.n	800e2be <__hexnan+0x2e>
 800e30e:	2a29      	cmp	r2, #41	@ 0x29
 800e310:	d157      	bne.n	800e3c2 <__hexnan+0x132>
 800e312:	3102      	adds	r1, #2
 800e314:	f8ca 1000 	str.w	r1, [sl]
 800e318:	f1bb 0f00 	cmp.w	fp, #0
 800e31c:	d051      	beq.n	800e3c2 <__hexnan+0x132>
 800e31e:	454c      	cmp	r4, r9
 800e320:	d206      	bcs.n	800e330 <__hexnan+0xa0>
 800e322:	2d07      	cmp	r5, #7
 800e324:	dc04      	bgt.n	800e330 <__hexnan+0xa0>
 800e326:	462a      	mov	r2, r5
 800e328:	4649      	mov	r1, r9
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7ff ff8a 	bl	800e244 <L_shift>
 800e330:	4544      	cmp	r4, r8
 800e332:	d936      	bls.n	800e3a2 <__hexnan+0x112>
 800e334:	f1a8 0204 	sub.w	r2, r8, #4
 800e338:	4623      	mov	r3, r4
 800e33a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e33e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e342:	429f      	cmp	r7, r3
 800e344:	d2f9      	bcs.n	800e33a <__hexnan+0xaa>
 800e346:	1b3b      	subs	r3, r7, r4
 800e348:	f023 0303 	bic.w	r3, r3, #3
 800e34c:	3304      	adds	r3, #4
 800e34e:	3401      	adds	r4, #1
 800e350:	3e03      	subs	r6, #3
 800e352:	42b4      	cmp	r4, r6
 800e354:	bf88      	it	hi
 800e356:	2304      	movhi	r3, #4
 800e358:	4443      	add	r3, r8
 800e35a:	2200      	movs	r2, #0
 800e35c:	f843 2b04 	str.w	r2, [r3], #4
 800e360:	429f      	cmp	r7, r3
 800e362:	d2fb      	bcs.n	800e35c <__hexnan+0xcc>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	b91b      	cbnz	r3, 800e370 <__hexnan+0xe0>
 800e368:	4547      	cmp	r7, r8
 800e36a:	d128      	bne.n	800e3be <__hexnan+0x12e>
 800e36c:	2301      	movs	r3, #1
 800e36e:	603b      	str	r3, [r7, #0]
 800e370:	2005      	movs	r0, #5
 800e372:	b007      	add	sp, #28
 800e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e378:	3501      	adds	r5, #1
 800e37a:	2d08      	cmp	r5, #8
 800e37c:	f10b 0b01 	add.w	fp, fp, #1
 800e380:	dd06      	ble.n	800e390 <__hexnan+0x100>
 800e382:	4544      	cmp	r4, r8
 800e384:	d9c1      	bls.n	800e30a <__hexnan+0x7a>
 800e386:	2300      	movs	r3, #0
 800e388:	f844 3c04 	str.w	r3, [r4, #-4]
 800e38c:	2501      	movs	r5, #1
 800e38e:	3c04      	subs	r4, #4
 800e390:	6822      	ldr	r2, [r4, #0]
 800e392:	f000 000f 	and.w	r0, r0, #15
 800e396:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e39a:	6020      	str	r0, [r4, #0]
 800e39c:	e7b5      	b.n	800e30a <__hexnan+0x7a>
 800e39e:	2508      	movs	r5, #8
 800e3a0:	e7b3      	b.n	800e30a <__hexnan+0x7a>
 800e3a2:	9b01      	ldr	r3, [sp, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d0dd      	beq.n	800e364 <__hexnan+0xd4>
 800e3a8:	f1c3 0320 	rsb	r3, r3, #32
 800e3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b0:	40da      	lsrs	r2, r3
 800e3b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3bc:	e7d2      	b.n	800e364 <__hexnan+0xd4>
 800e3be:	3f04      	subs	r7, #4
 800e3c0:	e7d0      	b.n	800e364 <__hexnan+0xd4>
 800e3c2:	2004      	movs	r0, #4
 800e3c4:	e7d5      	b.n	800e372 <__hexnan+0xe2>

0800e3c6 <__ascii_mbtowc>:
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	b901      	cbnz	r1, 800e3cc <__ascii_mbtowc+0x6>
 800e3ca:	a901      	add	r1, sp, #4
 800e3cc:	b142      	cbz	r2, 800e3e0 <__ascii_mbtowc+0x1a>
 800e3ce:	b14b      	cbz	r3, 800e3e4 <__ascii_mbtowc+0x1e>
 800e3d0:	7813      	ldrb	r3, [r2, #0]
 800e3d2:	600b      	str	r3, [r1, #0]
 800e3d4:	7812      	ldrb	r2, [r2, #0]
 800e3d6:	1e10      	subs	r0, r2, #0
 800e3d8:	bf18      	it	ne
 800e3da:	2001      	movne	r0, #1
 800e3dc:	b002      	add	sp, #8
 800e3de:	4770      	bx	lr
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	e7fb      	b.n	800e3dc <__ascii_mbtowc+0x16>
 800e3e4:	f06f 0001 	mvn.w	r0, #1
 800e3e8:	e7f8      	b.n	800e3dc <__ascii_mbtowc+0x16>

0800e3ea <_realloc_r>:
 800e3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ee:	4680      	mov	r8, r0
 800e3f0:	4615      	mov	r5, r2
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	b921      	cbnz	r1, 800e400 <_realloc_r+0x16>
 800e3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	f7fd bdd0 	b.w	800bfa0 <_malloc_r>
 800e400:	b92a      	cbnz	r2, 800e40e <_realloc_r+0x24>
 800e402:	f7fd fd59 	bl	800beb8 <_free_r>
 800e406:	2400      	movs	r4, #0
 800e408:	4620      	mov	r0, r4
 800e40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40e:	f000 f8c4 	bl	800e59a <_malloc_usable_size_r>
 800e412:	4285      	cmp	r5, r0
 800e414:	4606      	mov	r6, r0
 800e416:	d802      	bhi.n	800e41e <_realloc_r+0x34>
 800e418:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e41c:	d8f4      	bhi.n	800e408 <_realloc_r+0x1e>
 800e41e:	4629      	mov	r1, r5
 800e420:	4640      	mov	r0, r8
 800e422:	f7fd fdbd 	bl	800bfa0 <_malloc_r>
 800e426:	4607      	mov	r7, r0
 800e428:	2800      	cmp	r0, #0
 800e42a:	d0ec      	beq.n	800e406 <_realloc_r+0x1c>
 800e42c:	42b5      	cmp	r5, r6
 800e42e:	462a      	mov	r2, r5
 800e430:	4621      	mov	r1, r4
 800e432:	bf28      	it	cs
 800e434:	4632      	movcs	r2, r6
 800e436:	f7fc fede 	bl	800b1f6 <memcpy>
 800e43a:	4621      	mov	r1, r4
 800e43c:	4640      	mov	r0, r8
 800e43e:	f7fd fd3b 	bl	800beb8 <_free_r>
 800e442:	463c      	mov	r4, r7
 800e444:	e7e0      	b.n	800e408 <_realloc_r+0x1e>

0800e446 <__ascii_wctomb>:
 800e446:	4603      	mov	r3, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	b141      	cbz	r1, 800e45e <__ascii_wctomb+0x18>
 800e44c:	2aff      	cmp	r2, #255	@ 0xff
 800e44e:	d904      	bls.n	800e45a <__ascii_wctomb+0x14>
 800e450:	228a      	movs	r2, #138	@ 0x8a
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	4770      	bx	lr
 800e45a:	700a      	strb	r2, [r1, #0]
 800e45c:	2001      	movs	r0, #1
 800e45e:	4770      	bx	lr

0800e460 <fiprintf>:
 800e460:	b40e      	push	{r1, r2, r3}
 800e462:	b503      	push	{r0, r1, lr}
 800e464:	4601      	mov	r1, r0
 800e466:	ab03      	add	r3, sp, #12
 800e468:	4805      	ldr	r0, [pc, #20]	@ (800e480 <fiprintf+0x20>)
 800e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	f7ff fa5d 	bl	800d930 <_vfiprintf_r>
 800e476:	b002      	add	sp, #8
 800e478:	f85d eb04 	ldr.w	lr, [sp], #4
 800e47c:	b003      	add	sp, #12
 800e47e:	4770      	bx	lr
 800e480:	20000030 	.word	0x20000030

0800e484 <__swhatbuf_r>:
 800e484:	b570      	push	{r4, r5, r6, lr}
 800e486:	460c      	mov	r4, r1
 800e488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e48c:	2900      	cmp	r1, #0
 800e48e:	b096      	sub	sp, #88	@ 0x58
 800e490:	4615      	mov	r5, r2
 800e492:	461e      	mov	r6, r3
 800e494:	da0d      	bge.n	800e4b2 <__swhatbuf_r+0x2e>
 800e496:	89a3      	ldrh	r3, [r4, #12]
 800e498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e49c:	f04f 0100 	mov.w	r1, #0
 800e4a0:	bf14      	ite	ne
 800e4a2:	2340      	movne	r3, #64	@ 0x40
 800e4a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	6031      	str	r1, [r6, #0]
 800e4ac:	602b      	str	r3, [r5, #0]
 800e4ae:	b016      	add	sp, #88	@ 0x58
 800e4b0:	bd70      	pop	{r4, r5, r6, pc}
 800e4b2:	466a      	mov	r2, sp
 800e4b4:	f000 f848 	bl	800e548 <_fstat_r>
 800e4b8:	2800      	cmp	r0, #0
 800e4ba:	dbec      	blt.n	800e496 <__swhatbuf_r+0x12>
 800e4bc:	9901      	ldr	r1, [sp, #4]
 800e4be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4c6:	4259      	negs	r1, r3
 800e4c8:	4159      	adcs	r1, r3
 800e4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4ce:	e7eb      	b.n	800e4a8 <__swhatbuf_r+0x24>

0800e4d0 <__smakebuf_r>:
 800e4d0:	898b      	ldrh	r3, [r1, #12]
 800e4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4d4:	079d      	lsls	r5, r3, #30
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	460c      	mov	r4, r1
 800e4da:	d507      	bpl.n	800e4ec <__smakebuf_r+0x1c>
 800e4dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4e0:	6023      	str	r3, [r4, #0]
 800e4e2:	6123      	str	r3, [r4, #16]
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	6163      	str	r3, [r4, #20]
 800e4e8:	b003      	add	sp, #12
 800e4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ec:	ab01      	add	r3, sp, #4
 800e4ee:	466a      	mov	r2, sp
 800e4f0:	f7ff ffc8 	bl	800e484 <__swhatbuf_r>
 800e4f4:	9f00      	ldr	r7, [sp, #0]
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f7fd fd50 	bl	800bfa0 <_malloc_r>
 800e500:	b948      	cbnz	r0, 800e516 <__smakebuf_r+0x46>
 800e502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e506:	059a      	lsls	r2, r3, #22
 800e508:	d4ee      	bmi.n	800e4e8 <__smakebuf_r+0x18>
 800e50a:	f023 0303 	bic.w	r3, r3, #3
 800e50e:	f043 0302 	orr.w	r3, r3, #2
 800e512:	81a3      	strh	r3, [r4, #12]
 800e514:	e7e2      	b.n	800e4dc <__smakebuf_r+0xc>
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	6020      	str	r0, [r4, #0]
 800e51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	9b01      	ldr	r3, [sp, #4]
 800e522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e526:	b15b      	cbz	r3, 800e540 <__smakebuf_r+0x70>
 800e528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e52c:	4630      	mov	r0, r6
 800e52e:	f000 f81d 	bl	800e56c <_isatty_r>
 800e532:	b128      	cbz	r0, 800e540 <__smakebuf_r+0x70>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f023 0303 	bic.w	r3, r3, #3
 800e53a:	f043 0301 	orr.w	r3, r3, #1
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	431d      	orrs	r5, r3
 800e544:	81a5      	strh	r5, [r4, #12]
 800e546:	e7cf      	b.n	800e4e8 <__smakebuf_r+0x18>

0800e548 <_fstat_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4d07      	ldr	r5, [pc, #28]	@ (800e568 <_fstat_r+0x20>)
 800e54c:	2300      	movs	r3, #0
 800e54e:	4604      	mov	r4, r0
 800e550:	4608      	mov	r0, r1
 800e552:	4611      	mov	r1, r2
 800e554:	602b      	str	r3, [r5, #0]
 800e556:	f7f3 fccd 	bl	8001ef4 <_fstat>
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	d102      	bne.n	800e564 <_fstat_r+0x1c>
 800e55e:	682b      	ldr	r3, [r5, #0]
 800e560:	b103      	cbz	r3, 800e564 <_fstat_r+0x1c>
 800e562:	6023      	str	r3, [r4, #0]
 800e564:	bd38      	pop	{r3, r4, r5, pc}
 800e566:	bf00      	nop
 800e568:	20006dc8 	.word	0x20006dc8

0800e56c <_isatty_r>:
 800e56c:	b538      	push	{r3, r4, r5, lr}
 800e56e:	4d06      	ldr	r5, [pc, #24]	@ (800e588 <_isatty_r+0x1c>)
 800e570:	2300      	movs	r3, #0
 800e572:	4604      	mov	r4, r0
 800e574:	4608      	mov	r0, r1
 800e576:	602b      	str	r3, [r5, #0]
 800e578:	f7f3 fccc 	bl	8001f14 <_isatty>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_isatty_r+0x1a>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_isatty_r+0x1a>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	20006dc8 	.word	0x20006dc8

0800e58c <abort>:
 800e58c:	b508      	push	{r3, lr}
 800e58e:	2006      	movs	r0, #6
 800e590:	f000 f834 	bl	800e5fc <raise>
 800e594:	2001      	movs	r0, #1
 800e596:	f7f3 fc79 	bl	8001e8c <_exit>

0800e59a <_malloc_usable_size_r>:
 800e59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e59e:	1f18      	subs	r0, r3, #4
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	bfbc      	itt	lt
 800e5a4:	580b      	ldrlt	r3, [r1, r0]
 800e5a6:	18c0      	addlt	r0, r0, r3
 800e5a8:	4770      	bx	lr

0800e5aa <_raise_r>:
 800e5aa:	291f      	cmp	r1, #31
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	460c      	mov	r4, r1
 800e5b2:	d904      	bls.n	800e5be <_raise_r+0x14>
 800e5b4:	2316      	movs	r3, #22
 800e5b6:	6003      	str	r3, [r0, #0]
 800e5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5bc:	bd38      	pop	{r3, r4, r5, pc}
 800e5be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e5c0:	b112      	cbz	r2, 800e5c8 <_raise_r+0x1e>
 800e5c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5c6:	b94b      	cbnz	r3, 800e5dc <_raise_r+0x32>
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	f000 f831 	bl	800e630 <_getpid_r>
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5d8:	f000 b818 	b.w	800e60c <_kill_r>
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d00a      	beq.n	800e5f6 <_raise_r+0x4c>
 800e5e0:	1c59      	adds	r1, r3, #1
 800e5e2:	d103      	bne.n	800e5ec <_raise_r+0x42>
 800e5e4:	2316      	movs	r3, #22
 800e5e6:	6003      	str	r3, [r0, #0]
 800e5e8:	2001      	movs	r0, #1
 800e5ea:	e7e7      	b.n	800e5bc <_raise_r+0x12>
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4798      	blx	r3
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	e7e0      	b.n	800e5bc <_raise_r+0x12>
	...

0800e5fc <raise>:
 800e5fc:	4b02      	ldr	r3, [pc, #8]	@ (800e608 <raise+0xc>)
 800e5fe:	4601      	mov	r1, r0
 800e600:	6818      	ldr	r0, [r3, #0]
 800e602:	f7ff bfd2 	b.w	800e5aa <_raise_r>
 800e606:	bf00      	nop
 800e608:	20000030 	.word	0x20000030

0800e60c <_kill_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d07      	ldr	r5, [pc, #28]	@ (800e62c <_kill_r+0x20>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	4611      	mov	r1, r2
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	f7f3 fc27 	bl	8001e6c <_kill>
 800e61e:	1c43      	adds	r3, r0, #1
 800e620:	d102      	bne.n	800e628 <_kill_r+0x1c>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	b103      	cbz	r3, 800e628 <_kill_r+0x1c>
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	bd38      	pop	{r3, r4, r5, pc}
 800e62a:	bf00      	nop
 800e62c:	20006dc8 	.word	0x20006dc8

0800e630 <_getpid_r>:
 800e630:	f7f3 bc14 	b.w	8001e5c <_getpid>

0800e634 <_init>:
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e636:	bf00      	nop
 800e638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63a:	bc08      	pop	{r3}
 800e63c:	469e      	mov	lr, r3
 800e63e:	4770      	bx	lr

0800e640 <_fini>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	bf00      	nop
 800e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e646:	bc08      	pop	{r3}
 800e648:	469e      	mov	lr, r3
 800e64a:	4770      	bx	lr
