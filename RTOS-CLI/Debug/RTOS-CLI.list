
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021988  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047c4  08021b18  08021b18  00022b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080262dc  080262dc  00028210  2**0
                  CONTENTS
  4 .ARM          00000008  080262dc  080262dc  000272dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080262e4  080262e4  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080262e4  080262e4  000272e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080262e8  080262e8  000272e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080262ec  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00028210  2**0
                  CONTENTS
 10 .bss          00012748  20000210  20000210  00028210  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20012958  20012958  00028210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042ce8  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a521  00000000  00000000  0006af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003038  00000000  00000000  00075450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002633  00000000  00000000  00078488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003934b  00000000  00000000  0007aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c491  00000000  00000000  000b3e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc62a  00000000  00000000  00100297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001fc8c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000db70  00000000  00000000  001fc904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0020a474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021b00 	.word	0x08021b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08021b00 	.word	0x08021b00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00b fbc4 	bl	800c79c <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f01d fa3d 	bl	801e506 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f01d fa13 	bl	801e52a <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f01d f9f6 	bl	801e52a <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000022c 	.word	0x2000022c
 8001150:	20000000 	.word	0x20000000
 8001154:	08021b50 	.word	0x08021b50
 8001158:	08021ba8 	.word	0x08021ba8

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00b f97f 	bl	800c558 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00b f9a2 	bl	800c5bc <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f01d f93d 	bl	801e52a <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000230 	.word	0x20000230
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f004 feec 	bl	8006144 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20003db0 	.word	0x20003db0

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f01d f8ac 	bl	801e4f6 <memset>
    printf("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f01d f80a 	bl	801e3b8 <iprintf>
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08021c00 	.word	0x08021c00

080013b4 <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    /* Toggle the LED */
    //ToggleLED();


    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <cmd_toggle_led+0x30>)
 80013c2:	f107 0410 	add.w	r4, r7, #16
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	c407      	stmia	r4!, {r0, r1, r2}
 80013ca:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f01d f989 	bl	801e6ea <strcpy>

    return pdFALSE;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08021c0c 	.word	0x08021c0c

080013e8 <cmd_add>:
//*****************************************************************************
BaseType_t cmd_add(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	@ 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    const char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	461a      	mov	r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fead 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001402:	6378      	str	r0, [r7, #52]	@ 0x34
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	461a      	mov	r2, r3
 800140a:	2102      	movs	r1, #2
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fea5 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001412:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
                          &xParameter2StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8001414:	220a      	movs	r2, #10
 8001416:	2100      	movs	r1, #0
 8001418:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800141a:	f01b ff93 	bl	801d344 <strtol>
 800141e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t xValue2 = strtol(pcParameter2, NULL, 10);
 8001420:	220a      	movs	r2, #10
 8001422:	2100      	movs	r1, #0
 8001424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001426:	f01b ff8d 	bl	801d344 <strtol>
 800142a:	62b8      	str	r0, [r7, #40]	@ 0x28
    // add the two numbers
    int32_t xResultValue = xValue1 + xValue2;
 800142c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001430:	4413      	add	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert the result to a string
    char cResultString[10];
    itoa(xResultValue, cResultString, 10);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	220a      	movs	r2, #10
 800143a:	4619      	mov	r1, r3
 800143c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800143e:	f01b fec5 	bl	801d1cc <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f01d f94e 	bl	801e6ea <strcpy>

    return pdFALSE;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e009      	b.n	8001478 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <vRegisterCLICommands+0x38>)
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fdb9 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <vRegisterCLICommands+0x38>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <vRegisterCLICommands+0xc>
    }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	08025b98 	.word	0x08025b98

08001494 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <cliWrite+0x24>)
 80014a0:	f01c ff8a 	bl	801e3b8 <iprintf>
   // flush stdout
   fflush(stdout);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <cliWrite+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f01c feae 	bl	801e20c <fflush>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08021ca0 	.word	0x08021ca0
 80014bc:	20000054 	.word	0x20000054

080014c0 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 80014cc:	4810      	ldr	r0, [pc, #64]	@ (8001510 <handleNewline+0x50>)
 80014ce:	f7ff ffe1 	bl	8001494 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fdb9 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 80014de:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f7ff ffd7 	bl	8001494 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <handleNewline+0x12>

    cliWrite(cli_prompt);
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <handleNewline+0x54>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffcf 	bl	8001494 <cliWrite>
    *cInputIndex = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80014fc:	2232      	movs	r2, #50	@ 0x32
 80014fe:	2100      	movs	r1, #0
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f01c fff8 	bl	801e4f6 <memset>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08021ca4 	.word	0x08021ca4
 8001514:	2000000c 	.word	0x2000000c

08001518 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <handleBackspace+0x4c>)
 8001546:	f7ff ffa5 	bl	8001494 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 800154a:	e006      	b.n	800155a <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <handleBackspace+0x50>)
 800154e:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff9d 	bl	8001494 <cliWrite>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000010 	.word	0x20000010
 8001568:	00435b1b 	.word	0x00435b1b

0800156c <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <handleCharacterInput+0x64>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	d023      	beq.n	80015c8 <handleCharacterInput+0x5c>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <handleCharacterInput+0x64>)
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d004      	beq.n	8001594 <handleCharacterInput+0x28>
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <handleCharacterInput+0x64>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	2b7f      	cmp	r3, #127	@ 0x7f
 8001592:	d104      	bne.n	800159e <handleCharacterInput+0x32>
    {
        handleBackspace(cInputIndex, pcInputString);
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffbe 	bl	8001518 <handleBackspace>
 800159c:	e015      	b.n	80015ca <handleCharacterInput+0x5e>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b31      	cmp	r3, #49	@ 0x31
 80015a4:	d811      	bhi.n	80015ca <handleCharacterInput+0x5e>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <handleCharacterInput+0x64>)
 80015a8:	f993 2000 	ldrsb.w	r2, [r3]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	440b      	add	r3, r1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e000      	b.n	80015ca <handleCharacterInput+0x5e>
        return;
 80015c8:	bf00      	nop
        }
    }
}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000a66 	.word	0x20000a66

080015d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);
 80015f8:	4a14      	ldr	r2, [pc, #80]	@ (800164c <MX_FREERTOS_Init+0x58>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	2001      	movs	r0, #1
 80015fe:	f007 fcde 	bl	8008fbe <osSemaphoreNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_FREERTOS_Init+0x5c>)
 8001606:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <MX_FREERTOS_Init+0x60>)
 800160a:	2100      	movs	r1, #0
 800160c:	2001      	movs	r0, #1
 800160e:	f007 fcd6 	bl	8008fbe <osSemaphoreNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <MX_FREERTOS_Init+0x64>)
 8001616:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(StartInitTask, NULL, &vInitTask_attributes);
 8001618:	4a10      	ldr	r2, [pc, #64]	@ (800165c <MX_FREERTOS_Init+0x68>)
 800161a:	2100      	movs	r1, #0
 800161c:	4810      	ldr	r0, [pc, #64]	@ (8001660 <MX_FREERTOS_Init+0x6c>)
 800161e:	f007 fb12 	bl	8008c46 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <MX_FREERTOS_Init+0x70>)
 8001626:	6013      	str	r3, [r2, #0]

  /* creation of vClientTask */
  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <MX_FREERTOS_Init+0x74>)
 800162a:	2100      	movs	r1, #0
 800162c:	480f      	ldr	r0, [pc, #60]	@ (800166c <MX_FREERTOS_Init+0x78>)
 800162e:	f007 fb0a 	bl	8008c46 <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <MX_FREERTOS_Init+0x7c>)
 8001636:	6013      	str	r3, [r2, #0]

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001638:	4a0e      	ldr	r2, [pc, #56]	@ (8001674 <MX_FREERTOS_Init+0x80>)
 800163a:	2100      	movs	r1, #0
 800163c:	480e      	ldr	r0, [pc, #56]	@ (8001678 <MX_FREERTOS_Init+0x84>)
 800163e:	f007 fb02 	bl	8008c46 <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <MX_FREERTOS_Init+0x88>)
 8001646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08025c44 	.word	0x08025c44
 8001650:	20003c78 	.word	0x20003c78
 8001654:	08025c54 	.word	0x08025c54
 8001658:	20003c7c 	.word	0x20003c7c
 800165c:	08025bd8 	.word	0x08025bd8
 8001660:	08001681 	.word	0x08001681
 8001664:	20000a68 	.word	0x20000a68
 8001668:	08025bfc 	.word	0x08025bfc
 800166c:	080016e1 	.word	0x080016e1
 8001670:	20002b18 	.word	0x20002b18
 8001674:	08025c20 	.word	0x08025c20
 8001678:	0800173d 	.word	0x0800173d
 800167c:	200033c8 	.word	0x200033c8

08001680 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001688:	f006 fc90 	bl	8007fac <MX_LWIP_Init>
  /* USER CODE BEGIN StartInitTask */
  vTaskSuspend((TaskHandle_t)vClientTaskHandle);
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <StartInitTask+0x54>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f009 fb4d 	bl	800ad30 <vTaskSuspend>
  vTaskSuspend((TaskHandle_t)vCmdTaskHandle);
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <StartInitTask+0x58>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f009 fb48 	bl	800ad30 <vTaskSuspend>
  HAL_Delay(10000);
 80016a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016a4:	f000 fe96 	bl	80023d4 <HAL_Delay>
//  while (gnetif.ip_addr.addr == 0){};
  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <StartInitTask+0x5c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <StartInitTask+0x4a>
	  {
//		  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
//		  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);

		  vTaskResume((TaskHandle_t)vClientTaskHandle);
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <StartInitTask+0x54>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f009 fbe3 	bl	800ae80 <vTaskResume>
		  vTaskResume((TaskHandle_t)vCmdTaskHandle);
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <StartInitTask+0x58>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f009 fbde 	bl	800ae80 <vTaskResume>
		  vTaskSuspend(NULL);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f009 fb33 	bl	800ad30 <vTaskSuspend>

	  }
      osDelay(10000);
 80016ca:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016ce:	f007 fb4d 	bl	8008d6c <osDelay>
	  if (gnetif.ip_addr.addr != 0)
 80016d2:	e7e9      	b.n	80016a8 <StartInitTask+0x28>
 80016d4:	20002b18 	.word	0x20002b18
 80016d8:	200033c8 	.word	0x200033c8
 80016dc:	20003e08 	.word	0x20003e08

080016e0 <StartClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClientTask */
void StartClientTask(void *argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClientTask */
	  struct sockaddr_in remout_host;
	  int s;

	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 80016e8:	2206      	movs	r2, #6
 80016ea:	2101      	movs	r1, #1
 80016ec:	2002      	movs	r0, #2
 80016ee:	f00d fadb 	bl	800eca8 <lwip_socket>
 80016f2:	61f8      	str	r0, [r7, #28]
	  remout_host.sin_family = AF_INET;
 80016f4:	2302      	movs	r3, #2
 80016f6:	737b      	strb	r3, [r7, #13]
	  remout_host.sin_port = htons(23);
 80016f8:	2017      	movs	r0, #23
 80016fa:	f00d fe89 	bl	800f410 <lwip_htons>
 80016fe:	4603      	mov	r3, r0
 8001700:	81fb      	strh	r3, [r7, #14]
	  ip4addr_aton("192.168.0.10",(ip4_addr_t*)&remout_host.sin_addr);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	3304      	adds	r3, #4
 8001708:	4619      	mov	r1, r3
 800170a:	480a      	ldr	r0, [pc, #40]	@ (8001734 <StartClientTask+0x54>)
 800170c:	f01a fb52 	bl	801bdb4 <ip4addr_aton>
	  lwip_connect(s, (struct sockaddr *)&remout_host, sizeof(struct sockaddr_in));
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2210      	movs	r2, #16
 8001716:	4619      	mov	r1, r3
 8001718:	69f8      	ldr	r0, [r7, #28]
 800171a:	f00d f935 	bl	800e988 <lwip_connect>
	  lwip_write(s, "Hello\n\r", sizeof("Hello\n\r"));
 800171e:	2208      	movs	r2, #8
 8001720:	4905      	ldr	r1, [pc, #20]	@ (8001738 <StartClientTask+0x58>)
 8001722:	69f8      	ldr	r0, [r7, #28]
 8001724:	f00d fb1e 	bl	800ed64 <lwip_write>
	  for(;;)
	  {
//		lwip_recv(s, buf, 30, 0);
//		HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xffff);
//		memset(buf, (uint32_t)'\0', sizeof(buf));
	    osDelay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172c:	f007 fb1e 	bl	8008d6c <osDelay>
 8001730:	e7fa      	b.n	8001728 <StartClientTask+0x48>
 8001732:	bf00      	nop
 8001734:	08021ce4 	.word	0x08021ce4
 8001738:	08021cf4 	.word	0x08021cf4

0800173c <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
    uint32_t receivedValue; // used to store the received value from the notification
    pDataByte = (uint8_t*)&cRxedChar;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <vStartCmdTask+0x78>)
 800174a:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <vStartCmdTask+0x7c>)
 800174c:	601a      	str	r2, [r3, #0]
    vRegisterCLICommands();
 800174e:	f7ff fe83 	bl	8001458 <vRegisterCLICommands>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Start cmd\r\n", sizeof("Start cmd\r\n"), 0xffff);
 8001752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001756:	220c      	movs	r2, #12
 8001758:	4918      	ldr	r1, [pc, #96]	@ (80017bc <vStartCmdTask+0x80>)
 800175a:	4819      	ldr	r0, [pc, #100]	@ (80017c0 <vStartCmdTask+0x84>)
 800175c:	f004 fcf2 	bl	8006144 <HAL_UART_Transmit>

    for (;;)
    {
  	  if (xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY))
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <vStartCmdTask+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fd47 	bl	800a1fc <xQueueSemaphoreTake>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01a      	beq.n	80017aa <vStartCmdTask+0x6e>
  	  {
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar);
 8001774:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <vStartCmdTask+0x7c>)
 8001776:	f7ff fe8d 	bl	8001494 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <vStartCmdTask+0x7c>)
 800177c:	f993 3000 	ldrsb.w	r3, [r3]
 8001780:	2b0d      	cmp	r3, #13
 8001782:	d004      	beq.n	800178e <vStartCmdTask+0x52>
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <vStartCmdTask+0x7c>)
 8001786:	f993 3000 	ldrsb.w	r3, [r3]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d107      	bne.n	800179e <vStartCmdTask+0x62>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 800178e:	f107 030f 	add.w	r3, r7, #15
 8001792:	461a      	mov	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <vStartCmdTask+0x8c>)
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <vStartCmdTask+0x90>)
 8001798:	f7ff fe92 	bl	80014c0 <handleNewline>
 800179c:	e005      	b.n	80017aa <vStartCmdTask+0x6e>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 800179e:	f107 030f 	add.w	r3, r7, #15
 80017a2:	490a      	ldr	r1, [pc, #40]	@ (80017cc <vStartCmdTask+0x90>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fee1 	bl	800156c <handleCharacterInput>
        }
  	  }
        osDelay(100);
 80017aa:	2064      	movs	r0, #100	@ 0x64
 80017ac:	f007 fade 	bl	8008d6c <osDelay>
  	  if (xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY))
 80017b0:	e7d6      	b.n	8001760 <vStartCmdTask+0x24>
 80017b2:	bf00      	nop
 80017b4:	20003da8 	.word	0x20003da8
 80017b8:	20000a66 	.word	0x20000a66
 80017bc:	08021cfc 	.word	0x08021cfc
 80017c0:	20003db0 	.word	0x20003db0
 80017c4:	20003c7c 	.word	0x20003c7c
 80017c8:	20000234 	.word	0x20000234
 80017cc:	20000a34 	.word	0x20000a34

080017d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <MX_GPIO_Init+0xa0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <MX_GPIO_Init+0xa0>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_GPIO_Init+0xa0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_GPIO_Init+0xa0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <MX_GPIO_Init+0xa0>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a0f      	ldr	r2, [pc, #60]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MX_GPIO_Init+0xa0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_GPIO_Init+0xa0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a08      	ldr	r2, [pc, #32]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_GPIO_Init+0xa0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001878:	f000 fd6a 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187c:	f000 f81e 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001880:	f7ff ffa6 	bl	80017d0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001884:	f000 fb26 	bl	8001ed4 <MX_TIM5_Init>
  MX_SDIO_SD_Init();
 8001888:	f000 f8d6 	bl	8001a38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800188c:	f006 f974 	bl	8007b78 <MX_FATFS_Init>
  MX_RNG_Init();
 8001890:	f000 f896 	bl	80019c0 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001894:	f000 fb94 	bl	8001fc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, &dataByte, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <main+0x40>)
 800189c:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <main+0x44>)
 800189e:	f004 fcdc 	bl	800625a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018a2:	f007 f94f 	bl	8008b44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80018a6:	f7ff fea5 	bl	80015f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018aa:	f007 f991 	bl	8008bd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018ae:	bf00      	nop
 80018b0:	e7fd      	b.n	80018ae <main+0x3a>
 80018b2:	bf00      	nop
 80018b4:	20003dac 	.word	0x20003dac
 80018b8:	20003db0 	.word	0x20003db0

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	@ 0x50
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	2230      	movs	r2, #48	@ 0x30
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f01c fe13 	bl	801e4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <SystemClock_Config+0xcc>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	4a27      	ldr	r2, [pc, #156]	@ (8001988 <SystemClock_Config+0xcc>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <SystemClock_Config+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a21      	ldr	r2, [pc, #132]	@ (800198c <SystemClock_Config+0xd0>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	2310      	movs	r3, #16
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001924:	2302      	movs	r3, #2
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001928:	2300      	movs	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800192c:	2308      	movs	r3, #8
 800192e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001930:	23a8      	movs	r3, #168	@ 0xa8
 8001932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001938:	2307      	movs	r3, #7
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fb85 	bl	8004050 <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800194c:	f000 f832 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001950:	230f      	movs	r3, #15
 8001952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800195c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2105      	movs	r1, #5
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fde6 	bl	8004540 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800197a:	f000 f81b 	bl	80019b4 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	@ 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a2:	f000 fcf7 	bl	8002394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40010000 	.word	0x40010000

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <Error_Handler+0x8>

080019c0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_RNG_Init+0x20>)
 80019c6:	4a07      	ldr	r2, [pc, #28]	@ (80019e4 <MX_RNG_Init+0x24>)
 80019c8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_RNG_Init+0x20>)
 80019cc:	f002 ffca 	bl	8004964 <HAL_RNG_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80019d6:	f7ff ffed 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20003c80 	.word	0x20003c80
 80019e4:	50060800 	.word	0x50060800

080019e8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_RNG_MspInit+0x48>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_RNG_MspInit+0x4c>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a02:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <HAL_RNG_MspInit+0x4c>)
 8001a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a08:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_RNG_MspInit+0x4c>)
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	2050      	movs	r0, #80	@ 0x50
 8001a1c:	f000 fdb6 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001a20:	2050      	movs	r0, #80	@ 0x50
 8001a22:	f000 fdcf 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	50060800 	.word	0x50060800
 8001a34:	40023800 	.word	0x40023800

08001a38 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <MX_SDIO_SD_Init+0x3c>)
 8001a40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20003c90 	.word	0x20003c90
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <HAL_SD_MspInit+0xc0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d14a      	bne.n	8001b30 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a26      	ldr	r2, [pc, #152]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a1f      	ldr	r2, [pc, #124]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_SD_MspInit+0xc4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001aee:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b00:	230c      	movs	r3, #12
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <HAL_SD_MspInit+0xc8>)
 8001b0c:	f002 f904 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b10:	2304      	movs	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b20:	230c      	movs	r3, #12
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	@ (8001b44 <HAL_SD_MspInit+0xcc>)
 8001b2c:	f002 f8f4 	bl	8003d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	@ 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_MspInit+0x64>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a15      	ldr	r2, [pc, #84]	@ (8001bac <HAL_MspInit+0x64>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <HAL_MspInit+0x64>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_MspInit+0x64>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_MspInit+0x64>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_MspInit+0x64>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	210f      	movs	r1, #15
 8001b8a:	f06f 0001 	mvn.w	r0, #1
 8001b8e:	f000 fcfd 	bl	800258c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2105      	movs	r1, #5
 8001b96:	2005      	movs	r0, #5
 8001b98:	f000 fcf8 	bl	800258c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b9c:	2005      	movs	r0, #5
 8001b9e:	f000 fd11 	bl	80025c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	@ 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bdc:	f107 020c 	add.w	r2, r7, #12
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fe8a 	bl	8004900 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bec:	f002 fe74 	bl	80048d8 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf8:	4a23      	ldr	r2, [pc, #140]	@ (8001c88 <HAL_InitTick+0xd8>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	3b01      	subs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c04:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c06:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_InitTick+0xe0>)
 8001c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c12:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c2a:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c2c:	f003 fdc4 	bl	80057b8 <HAL_TIM_Base_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d11b      	bne.n	8001c76 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c3e:	4813      	ldr	r0, [pc, #76]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c40:	f003 fe0a 	bl	8005858 <HAL_TIM_Base_Start_IT>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d111      	bne.n	8001c76 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c52:	2019      	movs	r0, #25
 8001c54:	f000 fcb6 	bl	80025c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	d808      	bhi.n	8001c70 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	2019      	movs	r0, #25
 8001c64:	f000 fc92 	bl	800258c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_InitTick+0xe4>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e002      	b.n	8001c76 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3730      	adds	r7, #48	@ 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	20003d14 	.word	0x20003d14
 8001c90:	40010000 	.word	0x40010000
 8001c94:	20000018 	.word	0x20000018

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <NMI_Handler+0x4>

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <MemManage_Handler+0x4>

08001cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ce2:	f003 fe29 	bl	8005938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20003d14 	.word	0x20003d14

08001cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <USART3_IRQHandler+0x10>)
 8001cf6:	f004 fad5 	bl	80062a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20003db0 	.word	0x20003db0

08001d04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <TIM5_IRQHandler+0x10>)
 8001d0a:	f003 fe15 	bl	8005938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20003d60 	.word	0x20003d60

08001d18 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <ETH_IRQHandler+0x10>)
 8001d1e:	f001 f911 	bl	8002f44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20008944 	.word	0x20008944

08001d2c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <ETH_WKUP_IRQHandler+0x10>)
 8001d32:	f001 f907 	bl	8002f44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20008944 	.word	0x20008944

08001d40 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <HASH_RNG_IRQHandler+0x10>)
 8001d46:	f002 fe37 	bl	80049b8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20003c80 	.word	0x20003c80

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <_kill+0x20>)
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
  return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20012948 	.word	0x20012948

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe5 	bl	8001d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9a:	bf00      	nop
 8001d9c:	e7fd      	b.n	8001d9a <_exit+0x12>

08001d9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e00a      	b.n	8001dc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db0:	f3af 8000 	nop.w
 8001db4:	4601      	mov	r1, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	60ba      	str	r2, [r7, #8]
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbf0      	blt.n	8001db0 <_read+0x12>
  }

  return len;
 8001dce:	687b      	ldr	r3, [r7, #4]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e00:	605a      	str	r2, [r3, #4]
  return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_isatty>:

int _isatty(int file)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d205      	bcs.n	8001e7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <_sbrk+0x6c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	20020000 	.word	0x20020000
 8001ea0:	00000800 	.word	0x00000800
 8001ea4:	20003d5c 	.word	0x20003d5c
 8001ea8:	20012958 	.word	0x20012958
 8001eac:	20012948 	.word	0x20012948

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <MX_TIM5_Init+0x98>)
 8001ef4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001ef8:	f240 2257 	movw	r2, #599	@ 0x257
 8001efc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f04:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f18:	4813      	ldr	r0, [pc, #76]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f1a:	f003 fc4d 	bl	80057b8 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f24:	f7ff fd46 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f36:	f003 fdef 	bl	8005b18 <HAL_TIM_ConfigClockSource>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f40:	f7ff fd38 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_TIM5_Init+0x94>)
 8001f52:	f004 f817 	bl	8005f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f5c:	f7ff fd2a 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20003d60 	.word	0x20003d60
 8001f6c:	40000c00 	.word	0x40000c00

08001f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x48>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d115      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_Base_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2105      	movs	r1, #5
 8001fa2:	2032      	movs	r0, #50	@ 0x32
 8001fa4:	f000 faf2 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fa8:	2032      	movs	r0, #50	@ 0x32
 8001faa:	f000 fb0b 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_USART3_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_USART3_UART_Init+0x4c>)
 8001ff8:	f004 f854 	bl	80060a4 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f7ff fcd7 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20003db0 	.word	0x20003db0
 8002010:	40004800 	.word	0x40004800

08002014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <HAL_UART_MspInit+0x94>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d134      	bne.n	80020a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_UART_MspInit+0x98>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <HAL_UART_MspInit+0x98>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_UART_MspInit+0x98>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_UART_MspInit+0x98>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <HAL_UART_MspInit+0x98>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_UART_MspInit+0x98>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800206e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002080:	2307      	movs	r3, #7
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4809      	ldr	r0, [pc, #36]	@ (80020b0 <HAL_UART_MspInit+0x9c>)
 800208c:	f001 fe44 	bl	8003d18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2105      	movs	r1, #5
 8002094:	2027      	movs	r0, #39	@ 0x27
 8002096:	f000 fa79 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800209a:	2027      	movs	r0, #39	@ 0x27
 800209c:	f000 fa92 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	@ 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40004800 	.word	0x40004800
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020c00 	.word	0x40020c00

080020b4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, &cRxedChar, 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <HAL_UART_RxCpltCallback+0x30>)
 80020c4:	4808      	ldr	r0, [pc, #32]	@ (80020e8 <HAL_UART_RxCpltCallback+0x34>)
 80020c6:	f004 f8c8 	bl	800625a <HAL_UART_Receive_IT>
	xSemaphoreGiveFromISR(uartConfigSemHandle, &pxHigherPriorityTaskWoken);
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_UART_RxCpltCallback+0x38>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f107 020c 	add.w	r2, r7, #12
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f007 ff1f 	bl	8009f18 <xQueueGiveFromISR>

}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000a66 	.word	0x20000a66
 80020e8:	20003db0 	.word	0x20003db0
 80020ec:	20003c7c 	.word	0x20003c7c

080020f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020f4:	f7ff fedc 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f01c fabd 	bl	801e69c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002122:	f7ff fba7 	bl	8001874 <main>
  bx  lr    
 8002126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002134:	080262ec 	.word	0x080262ec
  ldr r2, =_sbss
 8002138:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800213c:	20012958 	.word	0x20012958

08002140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>

08002142 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <DP83848_RegisterBusIO+0x28>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <DP83848_RegisterBusIO+0x28>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <DP83848_RegisterBusIO+0x28>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e014      	b.n	800219a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d139      	bne.n	8002236 <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e01c      	b.n	8002216 <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f107 020c 	add.w	r2, r7, #12
 80021e4:	2119      	movs	r1, #25
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	4798      	blx	r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da03      	bge.n	80021f8 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 80021f0:	f06f 0304 	mvn.w	r3, #4
 80021f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021f6:	e00b      	b.n	8002210 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	d105      	bne.n	8002210 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
         break;
 800220e:	e005      	b.n	800221c <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b1f      	cmp	r3, #31
 800221a:	d9df      	bls.n	80021dc <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b1f      	cmp	r3, #31
 8002222:	d902      	bls.n	800222a <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002224:	f06f 0302 	mvn.w	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002236:	693b      	ldr	r3, [r7, #16]
 }
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6810      	ldr	r0, [r2, #0]
 8002254:	f107 020c 	add.w	r2, r7, #12
 8002258:	2101      	movs	r1, #1
 800225a:	4798      	blx	r3
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	da02      	bge.n	8002268 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8002262:	f06f 0304 	mvn.w	r3, #4
 8002266:	e06e      	b.n	8002346 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6810      	ldr	r0, [r2, #0]
 8002270:	f107 020c 	add.w	r2, r7, #12
 8002274:	2101      	movs	r1, #1
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	da02      	bge.n	8002284 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800227e:	f06f 0304 	mvn.w	r3, #4
 8002282:	e060      	b.n	8002346 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800228e:	2301      	movs	r3, #1
 8002290:	e059      	b.n	8002346 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6810      	ldr	r0, [r2, #0]
 800229a:	f107 020c 	add.w	r2, r7, #12
 800229e:	2100      	movs	r1, #0
 80022a0:	4798      	blx	r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da02      	bge.n	80022ae <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80022a8:	f06f 0304 	mvn.w	r3, #4
 80022ac:	e04b      	b.n	8002346 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11b      	bne.n	80022f0 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <DP83848_GetLinkState+0x90>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80022cc:	2302      	movs	r3, #2
 80022ce:	e03a      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80022da:	2303      	movs	r3, #3
 80022dc:	e033      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80022e8:	2304      	movs	r3, #4
 80022ea:	e02c      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80022ec:	2305      	movs	r3, #5
 80022ee:	e02a      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6810      	ldr	r0, [r2, #0]
 80022f8:	f107 020c 	add.w	r2, r7, #12
 80022fc:	2110      	movs	r1, #16
 80022fe:	4798      	blx	r3
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	da02      	bge.n	800230c <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8002306:	f06f 0304 	mvn.w	r3, #4
 800230a:	e01c      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8002316:	2306      	movs	r3, #6
 8002318:	e015      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0306 	and.w	r3, r3, #6
 8002320:	2b04      	cmp	r3, #4
 8002322:	d101      	bne.n	8002328 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002324:	2302      	movs	r3, #2
 8002326:	e00e      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0306 	and.w	r3, r3, #6
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002332:	2303      	movs	r3, #3
 8002334:	e007      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0306 	and.w	r3, r3, #6
 800233c:	2b06      	cmp	r3, #6
 800233e:	d101      	bne.n	8002344 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002340:	2304      	movs	r3, #4
 8002342:	e000      	b.n	8002346 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002344:	2305      	movs	r3, #5
    }
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_Init+0x40>)
 800235a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <HAL_Init+0x40>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_Init+0x40>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f8fc 	bl	8002576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f7ff fc16 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fbe0 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	20003df8 	.word	0x20003df8

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20003df8 	.word	0x20003df8

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000001c 	.word	0x2000001c

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	@ (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	@ 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff4c 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259e:	f7ff ff61 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f7ff ffb1 	bl	8002510 <NVIC_EncodePriority>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff80 	bl	80024bc <__NVIC_SetPriority>
}
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff54 	bl	8002480 <__NVIC_EnableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Start_IT+0x26>
 8002602:	2302      	movs	r3, #2
 8002604:	e040      	b.n	8002688 <HAL_DMA_Start_IT+0xa8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d12f      	bne.n	800267a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8cc 	bl	80027cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	223f      	movs	r2, #63	@ 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0216 	orr.w	r2, r2, #22
 800264e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0208 	orr.w	r2, r2, #8
 8002666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e005      	b.n	8002686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800269e:	f7ff fe8d 	bl	80023bc <HAL_GetTick>
 80026a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d008      	beq.n	80026c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e052      	b.n	8002768 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0216 	bic.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_DMA_Abort+0x62>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0208 	bic.w	r2, r2, #8
 8002700:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002712:	e013      	b.n	800273c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002714:	f7ff fe52 	bl	80023bc <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b05      	cmp	r3, #5
 8002720:	d90c      	bls.n	800273c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2203      	movs	r2, #3
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e015      	b.n	8002768 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1e4      	bne.n	8002714 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	223f      	movs	r2, #63	@ 0x3f
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d004      	beq.n	800278e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00c      	b.n	80027a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2205      	movs	r2, #5
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08a      	b.n	8002950 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2223      	movs	r2, #35	@ 0x23
 8002848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f005 fecb 	bl	80085e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <HAL_ETH_Init+0x130>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4a3f      	ldr	r2, [pc, #252]	@ (8002958 <HAL_ETH_Init+0x130>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002860:	6453      	str	r3, [r2, #68]	@ 0x44
 8002862:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_ETH_Init+0x130>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_ETH_Init+0x134>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a3a      	ldr	r2, [pc, #232]	@ (800295c <HAL_ETH_Init+0x134>)
 8002874:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002878:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800287a:	4b38      	ldr	r3, [pc, #224]	@ (800295c <HAL_ETH_Init+0x134>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4936      	ldr	r1, [pc, #216]	@ (800295c <HAL_ETH_Init+0x134>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002888:	4b34      	ldr	r3, [pc, #208]	@ (800295c <HAL_ETH_Init+0x134>)
 800288a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a4:	f7ff fd8a 	bl	80023bc <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028aa:	e011      	b.n	80028d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028ac:	f7ff fd86 	bl	80023bc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028ba:	d909      	bls.n	80028d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	22e0      	movs	r2, #224	@ 0xe0
 80028c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e03f      	b.n	8002950 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e4      	bne.n	80028ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 ff5a 	bl	800379c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f001 f805 	bl	80038f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f001 f85b 	bl	80039aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 ffc3 	bl	8003888 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002922:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002926:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800293a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2210      	movs	r2, #16
 800294a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800

08002960 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	2b10      	cmp	r3, #16
 8002970:	d161      	bne.n	8002a36 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2223      	movs	r2, #35	@ 0x23
 8002976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2204      	movs	r2, #4
 8002984:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f9f4 	bl	8002d74 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002994:	2001      	movs	r0, #1
 8002996:	f7ff fd1d 	bl	80023d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029b8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029d0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fd7e 	bl	80034d4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7ff fcef 	bl	80023d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0204 	orr.w	r2, r2, #4
 8002a0c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002a20:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a28:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2223      	movs	r2, #35	@ 0x23
 8002a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a4e:	2b23      	cmp	r3, #35	@ 0x23
 8002a50:	d170      	bne.n	8002b34 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2223      	movs	r2, #35	@ 0x23
 8002a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002a6c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002a70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a74:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a8c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	f023 0302 	bic.w	r3, r3, #2
 8002aa0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aa4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff fc88 	bl	80023d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fd01 	bl	80034d4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0208 	bic.w	r2, r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff fc72 	bl	80023d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e00e      	b.n	8002b1c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	3212      	adds	r2, #18
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d9ed      	bls.n	8002afe <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e045      	b.n	8002bee <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b68:	2b23      	cmp	r3, #35	@ 0x23
 8002b6a:	d13f      	bne.n	8002bec <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002b74:	2201      	movs	r2, #1
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 ff85 	bl	8003a88 <ETH_Prepare_Tx_Descriptors>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e02a      	b.n	8002bee <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b98:	f3bf 8f4f 	dsb	sy
}
 8002b9c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d904      	bls.n	8002bba <HAL_ETH_Transmit_IT+0x7c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	1f1a      	subs	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be2:	461a      	mov	r2, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0a4      	b.n	8002d6c <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c28:	2b23      	cmp	r3, #35	@ 0x23
 8002c2a:	d001      	beq.n	8002c30 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e09d      	b.n	8002d6c <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	3212      	adds	r2, #18
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c46:	f1c3 0304 	rsb	r3, r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c4c:	e066      	b.n	8002d1c <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_ETH_ReadData+0x88>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03c      	beq.n	8002cf8 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ca0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f005 fe48 	bl	800896c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d902      	bls.n	8002d0a <HAL_ETH_ReadData+0x114>
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3b04      	subs	r3, #4
 8002d08:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	3212      	adds	r2, #18
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db06      	blt.n	8002d32 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d202      	bcs.n	8002d32 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d08d      	beq.n	8002c4e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f814 	bl	8002d74 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002d80:	2301      	movs	r3, #1
 8002d82:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d88:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	3212      	adds	r2, #18
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002d9c:	e044      	b.n	8002e28 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d112      	bne.n	8002dcc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 fdae 	bl	800890c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	74fb      	strb	r3, [r7, #19]
 8002dba:	e007      	b.n	8002dcc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02a      	beq.n	8002e28 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6053      	str	r3, [r2, #4]
 8002dea:	e005      	b.n	8002df8 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d902      	bls.n	8002e16 <ETH_UpdateDescriptor+0xa2>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	3b04      	subs	r3, #4
 8002e14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	3212      	adds	r2, #18
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	617b      	str	r3, [r7, #20]
      desccount--;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <ETH_UpdateDescriptor+0xc0>
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1b4      	bne.n	8002d9e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d01a      	beq.n	8002e74 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e48:	f3bf 8f5f 	dmb	sy
}
 8002e4c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	18ca      	adds	r2, r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e66:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002e74:	bf00      	nop
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3318      	adds	r3, #24
 8002e88:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002e9a:	e047      	b.n	8002f2c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d902      	bls.n	8002ec8 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002ecc:	7bbb      	ldrb	r3, [r7, #14]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d02c      	beq.n	8002f2c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db1f      	blt.n	8002f28 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	3304      	adds	r3, #4
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fd79 	bl	80089ec <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	3304      	adds	r3, #4
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d902      	bls.n	8002f1a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3b04      	subs	r3, #4
 8002f18:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f26:	e001      	b.n	8002f2c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1b1      	bne.n	8002e9c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_ETH_IRQHandler+0x158>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <HAL_ETH_IRQHandler+0x56>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <HAL_ETH_IRQHandler+0x15c>)
 8002f92:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f005 f867 	bl	8008068 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_ETH_IRQHandler+0x80>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002fbc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f005 f862 	bl	8008088 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d042      	beq.n	8003054 <HAL_ETH_IRQHandler+0x110>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03d      	beq.n	8003054 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f043 0208 	orr.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <HAL_ETH_IRQHandler+0x160>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003018:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800301c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	22e0      	movs	r2, #224	@ 0xe0
 8003022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003026:	e012      	b.n	800304e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003046:	461a      	mov	r2, r3
 8003048:	f248 6380 	movw	r3, #34432	@ 0x8680
 800304c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f005 f82a 	bl	80080a8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f81a 	bl	80030a8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_ETH_IRQHandler+0x158>)
 8003088:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800308c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f814 	bl	80030bc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013c00 	.word	0x40013c00
 80030a0:	00010040 	.word	0x00010040
 80030a4:	007e2000 	.word	0x007e2000

080030a8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 031c 	and.w	r3, r3, #28
 80030ec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	02db      	lsls	r3, r3, #11
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0302 	bic.w	r3, r3, #2
 800310e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003120:	f7ff f94c 	bl	80023bc <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003126:	e00d      	b.n	8003144 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003128:	f7ff f948 	bl	80023bc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003136:	d301      	bcc.n	800313c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e010      	b.n	800315e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ec      	bne.n	8003128 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 031c 	and.w	r3, r3, #28
 8003182:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	02db      	lsls	r3, r3, #11
 8003188:	b29b      	uxth	r3, r3
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	019b      	lsls	r3, r3, #6
 8003194:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c0:	f7ff f8fc 	bl	80023bc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031c6:	e00d      	b.n	80031e4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80031c8:	f7ff f8f8 	bl	80023bc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d6:	d301      	bcc.n	80031dc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e009      	b.n	80031f0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ec      	bne.n	80031c8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0e6      	b.n	80033da <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b29a      	uxth	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00b      	b.n	8003412 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003400:	2b10      	cmp	r3, #16
 8003402:	d105      	bne.n	8003410 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f88a 	bl	8003520 <ETH_SetMACConfig>

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 031c 	bic.w	r3, r3, #28
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003434:	f001 fa30 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 8003438:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <HAL_ETH_SetMDIOClockRange+0x74>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d804      	bhi.n	800344c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f043 0308 	orr.w	r3, r3, #8
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e019      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d204      	bcs.n	800345e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 030c 	orr.w	r3, r3, #12
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e010      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d90c      	bls.n	8003480 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <HAL_ETH_SetMDIOClockRange+0x80>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d804      	bhi.n	8003478 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e003      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f043 0310 	orr.w	r3, r3, #16
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	611a      	str	r2, [r3, #16]
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	02160ebf 	.word	0x02160ebf
 8003494:	03938700 	.word	0x03938700
 8003498:	05f5e0ff 	.word	0x05f5e0ff
 800349c:	08f0d17f 	.word	0x08f0d17f

080034a0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003504:	2001      	movs	r0, #1
 8003506:	f7fe ff65 	bl	80023d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003514:	6193      	str	r3, [r2, #24]
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4b53      	ldr	r3, [pc, #332]	@ (8003684 <ETH_SetMACConfig+0x164>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7b9b      	ldrb	r3, [r3, #14]
 800353e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	7c12      	ldrb	r2, [r2, #16]
 8003544:	2a00      	cmp	r2, #0
 8003546:	d102      	bne.n	800354e <ETH_SetMACConfig+0x2e>
 8003548:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800354c:	e000      	b.n	8003550 <ETH_SetMACConfig+0x30>
 800354e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003550:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	7c52      	ldrb	r2, [r2, #17]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d102      	bne.n	8003560 <ETH_SetMACConfig+0x40>
 800355a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800355e:	e000      	b.n	8003562 <ETH_SetMACConfig+0x42>
 8003560:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003562:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7fdb      	ldrb	r3, [r3, #31]
 800356e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003570:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003576:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	7f92      	ldrb	r2, [r2, #30]
 800357c:	2a00      	cmp	r2, #0
 800357e:	d102      	bne.n	8003586 <ETH_SetMACConfig+0x66>
 8003580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003584:	e000      	b.n	8003588 <ETH_SetMACConfig+0x68>
 8003586:	2200      	movs	r2, #0
                        macconf->Speed |
 8003588:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	7f1b      	ldrb	r3, [r3, #28]
 800358e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003590:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003596:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800359e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	d102      	bne.n	80035b0 <ETH_SetMACConfig+0x90>
 80035aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ae:	e000      	b.n	80035b2 <ETH_SetMACConfig+0x92>
 80035b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	7bdb      	ldrb	r3, [r3, #15]
 80035b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80035ca:	4313      	orrs	r3, r2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7fe fef6 	bl	80023d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80035fe:	4013      	ands	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800360e:	2a00      	cmp	r2, #0
 8003610:	d101      	bne.n	8003616 <ETH_SetMACConfig+0xf6>
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	e000      	b.n	8003618 <ETH_SetMACConfig+0xf8>
 8003616:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003618:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800361e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003626:	2a01      	cmp	r2, #1
 8003628:	d101      	bne.n	800362e <ETH_SetMACConfig+0x10e>
 800362a:	2208      	movs	r2, #8
 800362c:	e000      	b.n	8003630 <ETH_SetMACConfig+0x110>
 800362e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003630:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003638:	2a01      	cmp	r2, #1
 800363a:	d101      	bne.n	8003640 <ETH_SetMACConfig+0x120>
 800363c:	2204      	movs	r2, #4
 800363e:	e000      	b.n	8003642 <ETH_SetMACConfig+0x122>
 8003640:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800364a:	2a01      	cmp	r2, #1
 800364c:	d101      	bne.n	8003652 <ETH_SetMACConfig+0x132>
 800364e:	2202      	movs	r2, #2
 8003650:	e000      	b.n	8003654 <ETH_SetMACConfig+0x134>
 8003652:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003654:	4313      	orrs	r3, r2
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800366c:	2001      	movs	r0, #1
 800366e:	f7fe feb1 	bl	80023d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	619a      	str	r2, [r3, #24]
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	fd20810f 	.word	0xfd20810f

08003688 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003798 <ETH_SetDMAConfig+0x110>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	7b1b      	ldrb	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <ETH_SetDMAConfig+0x2c>
 80036ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036b2:	e000      	b.n	80036b6 <ETH_SetDMAConfig+0x2e>
 80036b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	7b5b      	ldrb	r3, [r3, #13]
 80036ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	7f52      	ldrb	r2, [r2, #29]
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	d102      	bne.n	80036cc <ETH_SetDMAConfig+0x44>
 80036c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036ca:	e000      	b.n	80036ce <ETH_SetDMAConfig+0x46>
 80036cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	7b9b      	ldrb	r3, [r3, #14]
 80036d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	7f1b      	ldrb	r3, [r3, #28]
 80036e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80036e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	7f9b      	ldrb	r3, [r3, #30]
 80036ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036fc:	4313      	orrs	r3, r2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800370c:	461a      	mov	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800371e:	2001      	movs	r0, #1
 8003720:	f7fe fe58 	bl	80023d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	791b      	ldrb	r3, [r3, #4]
 8003736:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800373c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003742:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003748:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003750:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003752:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800375a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003760:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800376a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800376e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800377c:	2001      	movs	r0, #1
 800377e:	f7fe fe29 	bl	80023d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f8de3f23 	.word	0xf8de3f23

0800379c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0a6      	sub	sp, #152	@ 0x98
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037de:	2300      	movs	r3, #0
 80037e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003804:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003808:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800380a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003816:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fe7f 	bl	8003520 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003822:	2301      	movs	r3, #1
 8003824:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003826:	2301      	movs	r3, #1
 8003828:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003830:	2301      	movs	r3, #1
 8003832:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003844:	2300      	movs	r3, #0
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800384e:	2301      	movs	r3, #1
 8003850:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003856:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003858:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800385c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800385e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003862:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800386a:	2300      	movs	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff05 	bl	8003688 <ETH_SetDMAConfig>
}
 800387e:	bf00      	nop
 8003880:	3798      	adds	r7, #152	@ 0x98
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3305      	adds	r3, #5
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	3204      	adds	r2, #4
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <ETH_MACAddressConfig+0x68>)
 80038aa:	4413      	add	r3, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3303      	adds	r3, #3
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	061a      	lsls	r2, r3, #24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3302      	adds	r3, #2
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4313      	orrs	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <ETH_MACAddressConfig+0x6c>)
 80038da:	4413      	add	r3, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	6013      	str	r3, [r2, #0]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40028040 	.word	0x40028040
 80038f4:	40028044 	.word	0x40028044

080038f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e03e      	b.n	8003984 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	3206      	adds	r2, #6
 8003938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d80c      	bhi.n	8003968 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68d9      	ldr	r1, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e004      	b.n	8003972 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d9bd      	bls.n	8003906 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399c:	611a      	str	r2, [r3, #16]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e048      	b.n	8003a4a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6919      	ldr	r1, [r3, #16]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	3212      	adds	r2, #18
 8003a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d80c      	bhi.n	8003a3a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6919      	ldr	r1, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e004      	b.n	8003a44 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d9b3      	bls.n	80039b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7a:	60da      	str	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b091      	sub	sp, #68	@ 0x44
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3318      	adds	r3, #24
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aca:	d007      	beq.n	8003adc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003adc:	2302      	movs	r3, #2
 8003ade:	e115      	b.n	8003d0c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003af8:	f023 031f 	bic.w	r3, r3, #31
 8003afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003afe:	6852      	ldr	r2, [r2, #4]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b66:	e084      	b.n	8003c72 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e005      	b.n	8003b94 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b96:	3301      	adds	r3, #1
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d902      	bls.n	8003ba6 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bbc:	d007      	beq.n	8003bce <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d029      	beq.n	8003c22 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be0:	e019      	b.n	8003c16 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003be2:	f3bf 8f5f 	dmb	sy
}
 8003be6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d902      	bls.n	8003c06 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c02:	3b04      	subs	r3, #4
 8003c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	3301      	adds	r3, #1
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3e1      	bcc.n	8003be2 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e074      	b.n	8003d0c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c30:	3301      	adds	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003c4c:	f023 031f 	bic.w	r3, r3, #31
 8003c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c52:	6852      	ldr	r2, [r2, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003c60:	f3bf 8f5f 	dmb	sy
}
 8003c64:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f47f af76 	bne.w	8003b68 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e005      	b.n	8003c9c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	6a3a      	ldr	r2, [r7, #32]
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003cb2:	f3bf 8f5f 	dmb	sy
}
 8003cb6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ccc:	3304      	adds	r3, #4
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cd8:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cda:	f3ef 8310 	mrs	r3, PRIMASK
 8003cde:	613b      	str	r3, [r7, #16]
  return(result);
 8003ce0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	4413      	add	r3, r2
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3744      	adds	r7, #68	@ 0x44
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	@ 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	e16b      	b.n	800400c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f040 815a 	bne.w	8004006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d005      	beq.n	8003d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d130      	bne.n	8003dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da0:	2201      	movs	r2, #1
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 0201 	and.w	r2, r3, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d017      	beq.n	8003e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2203      	movs	r2, #3
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d123      	bne.n	8003e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3208      	adds	r2, #8
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0203 	and.w	r2, r3, #3
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80b4 	beq.w	8004006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <HAL_GPIO_Init+0x30c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8004024 <HAL_GPIO_Init+0x30c>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eae:	4b5d      	ldr	r3, [pc, #372]	@ (8004024 <HAL_GPIO_Init+0x30c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eba:	4a5b      	ldr	r2, [pc, #364]	@ (8004028 <HAL_GPIO_Init+0x310>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_GPIO_Init+0x314>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02b      	beq.n	8003f3e <HAL_GPIO_Init+0x226>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	@ (8004030 <HAL_GPIO_Init+0x318>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d025      	beq.n	8003f3a <HAL_GPIO_Init+0x222>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	@ (8004034 <HAL_GPIO_Init+0x31c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <HAL_GPIO_Init+0x21e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8004038 <HAL_GPIO_Init+0x320>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d019      	beq.n	8003f32 <HAL_GPIO_Init+0x21a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_GPIO_Init+0x324>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_GPIO_Init+0x216>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_GPIO_Init+0x328>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00d      	beq.n	8003f2a <HAL_GPIO_Init+0x212>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4c      	ldr	r2, [pc, #304]	@ (8004044 <HAL_GPIO_Init+0x32c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a4b      	ldr	r2, [pc, #300]	@ (8004048 <HAL_GPIO_Init+0x330>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_GPIO_Init+0x20a>
 8003f1e:	2307      	movs	r3, #7
 8003f20:	e00e      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f22:	2308      	movs	r3, #8
 8003f24:	e00c      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f26:	2306      	movs	r3, #6
 8003f28:	e00a      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	e008      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e004      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_GPIO_Init+0x228>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f002 0203 	and.w	r2, r2, #3
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	4093      	lsls	r3, r2
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f50:	4935      	ldr	r1, [pc, #212]	@ (8004028 <HAL_GPIO_Init+0x310>)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f82:	4a32      	ldr	r2, [pc, #200]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f88:	4b30      	ldr	r3, [pc, #192]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fac:	4a27      	ldr	r2, [pc, #156]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb2:	4b26      	ldr	r3, [pc, #152]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_GPIO_Init+0x334>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004000:	4a12      	ldr	r2, [pc, #72]	@ (800404c <HAL_GPIO_Init+0x334>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f67f ae90 	bls.w	8003d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3724      	adds	r7, #36	@ 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	40013800 	.word	0x40013800
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400
 8004034:	40020800 	.word	0x40020800
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40021400 	.word	0x40021400
 8004044:	40021800 	.word	0x40021800
 8004048:	40021c00 	.word	0x40021c00
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e267      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800406e:	4b88      	ldr	r3, [pc, #544]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b85      	ldr	r3, [pc, #532]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004082:	2b08      	cmp	r3, #8
 8004084:	d112      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b82      	ldr	r3, [pc, #520]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b7e      	ldr	r3, [pc, #504]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x108>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e242      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x74>
 80040b6:	4b76      	ldr	r3, [pc, #472]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a75      	ldr	r2, [pc, #468]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b6d      	ldr	r3, [pc, #436]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6c      	ldr	r2, [pc, #432]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040e8:	4b69      	ldr	r3, [pc, #420]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a68      	ldr	r2, [pc, #416]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b66      	ldr	r3, [pc, #408]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a65      	ldr	r2, [pc, #404]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe f958 	bl	80023bc <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe f954 	bl	80023bc <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	@ 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e207      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b5b      	ldr	r3, [pc, #364]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xc0>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe f944 	bl	80023bc <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fe f940 	bl	80023bc <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1f3      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b51      	ldr	r3, [pc, #324]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0xe8>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004166:	4b4a      	ldr	r3, [pc, #296]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800417a:	2b08      	cmp	r3, #8
 800417c:	d11c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b44      	ldr	r3, [pc, #272]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e1c7      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4937      	ldr	r1, [pc, #220]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	e03a      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c0:	4b34      	ldr	r3, [pc, #208]	@ (8004294 <HAL_RCC_OscConfig+0x244>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fe f8f9 	bl	80023bc <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fe f8f5 	bl	80023bc <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e1a8      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b28      	ldr	r3, [pc, #160]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4925      	ldr	r1, [pc, #148]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <HAL_RCC_OscConfig+0x244>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f8d8 	bl	80023bc <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004210:	f7fe f8d4 	bl	80023bc <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e187      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d036      	beq.n	80042a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <HAL_RCC_OscConfig+0x248>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fe f8b8 	bl	80023bc <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004250:	f7fe f8b4 	bl	80023bc <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e167      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
 800426e:	e01b      	b.n	80042a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_RCC_OscConfig+0x248>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fe f8a1 	bl	80023bc <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	e00e      	b.n	800429c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fe f89d 	bl	80023bc <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d907      	bls.n	800429c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e150      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 8004290:	40023800 	.word	0x40023800
 8004294:	42470000 	.word	0x42470000
 8004298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	4b88      	ldr	r3, [pc, #544]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ea      	bne.n	800427e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8097 	beq.w	80043e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ba:	4b81      	ldr	r3, [pc, #516]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	4b7d      	ldr	r3, [pc, #500]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	4a7c      	ldr	r2, [pc, #496]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d6:	4b7a      	ldr	r3, [pc, #488]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b77      	ldr	r3, [pc, #476]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b74      	ldr	r3, [pc, #464]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a73      	ldr	r2, [pc, #460]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fe f85d 	bl	80023bc <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fe f859 	bl	80023bc <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e10c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x2ea>
 800432c:	4b64      	ldr	r3, [pc, #400]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a63      	ldr	r2, [pc, #396]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x30c>
 8004342:	4b5f      	ldr	r3, [pc, #380]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	4a5e      	ldr	r2, [pc, #376]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6713      	str	r3, [r2, #112]	@ 0x70
 800434e:	4b5c      	ldr	r3, [pc, #368]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	4a5b      	ldr	r2, [pc, #364]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	@ 0x70
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800435c:	4b58      	ldr	r3, [pc, #352]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	4a57      	ldr	r2, [pc, #348]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	@ 0x70
 8004368:	4b55      	ldr	r3, [pc, #340]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436c:	4a54      	ldr	r2, [pc, #336]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 0304 	bic.w	r3, r3, #4
 8004372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe f81e 	bl	80023bc <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	e00a      	b.n	800439a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004384:	f7fe f81a 	bl	80023bc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0cb      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ee      	beq.n	8004384 <HAL_RCC_OscConfig+0x334>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fe f808 	bl	80023bc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fe f804 	bl	80023bc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0b5      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ee      	bne.n	80043b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a1 	beq.w	8004530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ee:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d05c      	beq.n	80044b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d141      	bne.n	8004486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd ffd8 	bl	80023bc <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd ffd4 	bl	80023bc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e087      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	491b      	ldr	r1, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004458:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd ffad 	bl	80023bc <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd ffa9 	bl	80023bc <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e05c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004478:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x416>
 8004484:	e054      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fd ff96 	bl	80023bc <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd ff92 	bl	80023bc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e045      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x444>
 80044b2:	e03d      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e038      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d028      	beq.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d121      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11a      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	4293      	cmp	r3, r2
 8004506:	d111      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cc      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b68      	ldr	r3, [pc, #416]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d90c      	bls.n	800457c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b65      	ldr	r3, [pc, #404]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a58      	ldr	r2, [pc, #352]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800459e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a52      	ldr	r2, [pc, #328]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d044      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d119      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b3f      	ldr	r3, [pc, #252]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3b      	ldr	r3, [pc, #236]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e067      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4934      	ldr	r1, [pc, #208]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fd fec4 	bl	80023bc <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fd fec0 	bl	80023bc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2b      	ldr	r3, [pc, #172]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b25      	ldr	r3, [pc, #148]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d20c      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b22      	ldr	r3, [pc, #136]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490a      	ldr	r1, [pc, #40]	@ (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fa62 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023c00 	.word	0x40023c00
 80046fc:	40023800 	.word	0x40023800
 8004700:	08025c64 	.word	0x08025c64
 8004704:	20000014 	.word	0x20000014
 8004708:	20000018 	.word	0x20000018

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004710:	b090      	sub	sp, #64	@ 0x40
 8004712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004724:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d00d      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x40>
 8004730:	2b08      	cmp	r3, #8
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 800473a:	2b04      	cmp	r3, #4
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x3a>
 800473e:	e09b      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004744:	e09b      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004746:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800474a:	e098      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800474c:	4b4f      	ldr	r3, [pc, #316]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004756:	4b4d      	ldr	r3, [pc, #308]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d028      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004762:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	2200      	movs	r2, #0
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	627a      	str	r2, [r7, #36]	@ 0x24
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004774:	2100      	movs	r1, #0
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004778:	fb03 f201 	mul.w	r2, r3, r1
 800477c:	2300      	movs	r3, #0
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	4413      	add	r3, r2
 8004784:	4a43      	ldr	r2, [pc, #268]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004786:	fba0 1202 	umull	r1, r2, r0, r2
 800478a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800478c:	460a      	mov	r2, r1
 800478e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004792:	4413      	add	r3, r2
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004798:	2200      	movs	r2, #0
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047a6:	f7fc fa6f 	bl	8000c88 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4613      	mov	r3, r2
 80047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b2:	e053      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b4:	4b35      	ldr	r3, [pc, #212]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	2200      	movs	r2, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	617a      	str	r2, [r7, #20]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047c6:	f04f 0b00 	mov.w	fp, #0
 80047ca:	4652      	mov	r2, sl
 80047cc:	465b      	mov	r3, fp
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	ebb2 080a 	subs.w	r8, r2, sl
 80047e6:	eb63 090b 	sbc.w	r9, r3, fp
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004802:	eb63 0509 	sbc.w	r5, r3, r9
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	00eb      	lsls	r3, r5, #3
 8004810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004814:	00e2      	lsls	r2, r4, #3
 8004816:	4614      	mov	r4, r2
 8004818:	461d      	mov	r5, r3
 800481a:	eb14 030a 	adds.w	r3, r4, sl
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	eb45 030b 	adc.w	r3, r5, fp
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004832:	4629      	mov	r1, r5
 8004834:	028b      	lsls	r3, r1, #10
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483c:	4621      	mov	r1, r4
 800483e:	028a      	lsls	r2, r1, #10
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	2200      	movs	r2, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004850:	f7fc fa1a 	bl	8000c88 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	3301      	adds	r3, #1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800486c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004876:	e002      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800487c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004880:	4618      	mov	r0, r3
 8004882:	3740      	adds	r7, #64	@ 0x40
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	00f42400 	.word	0x00f42400
 8004894:	017d7840 	.word	0x017d7840

08004898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000014 	.word	0x20000014

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	@ (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	08025c74 	.word	0x08025c74

080048d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048dc:	f7ff ffdc 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0b5b      	lsrs	r3, r3, #13
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	@ (80048fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08025c74 	.word	0x08025c74

08004900 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	220f      	movs	r2, #15
 800490e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004910:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800491c:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004928:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004934:	4b09      	ldr	r3, [pc, #36]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <HAL_RCC_GetClockConfig+0x60>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0207 	and.w	r2, r3, #7
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40023c00 	.word	0x40023c00

08004964 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e01c      	b.n	80049b0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd f82e 	bl	80019e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0204 	orr.w	r2, r2, #4
 80049a0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2210      	movs	r2, #16
 80049da:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80049dc:	2301      	movs	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e009      	b.n	80049f6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2208      	movs	r2, #8
 80049f0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80049f2:	2301      	movs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10b      	bne.n	8004a14 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f837 	bl	8004a76 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004a10:	605a      	str	r2, [r3, #4]

    return;
 8004a12:	e022      	b.n	8004a5a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	795b      	ldrb	r3, [r3, #5]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00b      	beq.n	8004a5a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f803 	bl	8004a60 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e022      	b.n	8004ae2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc ffe2 	bl	8001a78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f815 	bl	8004aec <HAL_SD_InitCard>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e00a      	b.n	8004ae2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b08e      	sub	sp, #56	@ 0x38
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004b08:	2376      	movs	r3, #118	@ 0x76
 8004b0a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681d      	ldr	r5, [r3, #0]
 8004b10:	466c      	mov	r4, sp
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b24:	4628      	mov	r0, r5
 8004b26:	f002 fb13 	bl	8007150 <SDIO_Init>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e04f      	b.n	8004bdc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b3c:	4b29      	ldr	r3, [pc, #164]	@ (8004be4 <HAL_SD_InitCard+0xf8>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f002 fb2d 	bl	80071a6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b4c:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <HAL_SD_InitCard+0xf8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fd fc3e 	bl	80023d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fd77 	bl	800564c <SD_PowerON>
 8004b5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02e      	b.n	8004bdc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fc96 	bl	80054b0 <SD_InitCard>
 8004b84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e01b      	b.n	8004bdc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 fb8c 	bl	80072ca <SDMMC_CmdBlockLength>
 8004bb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00f      	beq.n	8004bda <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <HAL_SD_InitCard+0xfc>)
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3728      	adds	r7, #40	@ 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdb0      	pop	{r4, r5, r7, pc}
 8004be4:	422580a0 	.word	0x422580a0
 8004be8:	004005ff 	.word	0x004005ff

08004bec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	@ 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d107      	bne.n	8004c14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0c0      	b.n	8004d96 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	f040 80b9 	bne.w	8004d94 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d907      	bls.n	8004c46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0a7      	b.n	8004d96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004da0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	4a4b      	ldr	r2, [pc, #300]	@ (8004da4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004c78:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3380      	adds	r3, #128	@ 0x80
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	025b      	lsls	r3, r3, #9
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f7fd fc91 	bl	80025e0 <HAL_DMA_Start_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a33      	ldr	r2, [pc, #204]	@ (8004da8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004cda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e050      	b.n	8004d96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d002      	beq.n	8004d08 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	025b      	lsls	r3, r3, #9
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d14:	2390      	movs	r3, #144	@ 0x90
 8004d16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f107 0210 	add.w	r2, r7, #16
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fa9f 	bl	8007272 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d90a      	bls.n	8004d50 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2282      	movs	r2, #130	@ 0x82
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fb03 	bl	8007352 <SDMMC_CmdReadMultiBlock>
 8004d4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004d4e:	e009      	b.n	8004d64 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2281      	movs	r2, #129	@ 0x81
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 fad6 	bl	800730e <SDMMC_CmdReadSingleBlock>
 8004d62:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d012      	beq.n	8004d90 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004da8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e002      	b.n	8004d96 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3730      	adds	r7, #48	@ 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	0800539b 	.word	0x0800539b
 8004da4:	0800540d 	.word	0x0800540d
 8004da8:	004005ff 	.word	0x004005ff
 8004dac:	4225858c 	.word	0x4225858c

08004db0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08c      	sub	sp, #48	@ 0x30
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0c5      	b.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 80be 	bne.w	8004f62 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	441a      	add	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d907      	bls.n	8004e0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0ac      	b.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004e28:	f043 0302 	orr.w	r3, r3, #2
 8004e2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004e34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8004f70 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004e3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	2200      	movs	r2, #0
 8004e44:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d002      	beq.n	8004e54 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	025b      	lsls	r3, r3, #9
 8004e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d90a      	bls.n	8004e70 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22a0      	movs	r2, #160	@ 0xa0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e66:	4618      	mov	r0, r3
 8004e68:	f002 fab7 	bl	80073da <SDMMC_CmdWriteMultiBlock>
 8004e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004e6e:	e009      	b.n	8004e84 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2290      	movs	r2, #144	@ 0x90
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f002 fa8a 	bl	8007396 <SDMMC_CmdWriteSingleBlock>
 8004e82:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a39      	ldr	r2, [pc, #228]	@ (8004f74 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e059      	b.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004eb0:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	2240      	movs	r2, #64	@ 0x40
 8004ebc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3380      	adds	r3, #128	@ 0x80
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	025b      	lsls	r3, r3, #9
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	f7fd fb77 	bl	80025e0 <HAL_DMA_Start_IT>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01c      	beq.n	8004f32 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004f06:	f023 0302 	bic.w	r3, r3, #2
 8004f0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a18      	ldr	r2, [pc, #96]	@ (8004f74 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f18:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e018      	b.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	025b      	lsls	r3, r3, #9
 8004f3c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f3e:	2390      	movs	r3, #144	@ 0x90
 8004f40:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f107 0210 	add.w	r2, r7, #16
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 f98a 	bl	8007272 <SDIO_ConfigData>

      return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3730      	adds	r7, #48	@ 0x30
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08005371 	.word	0x08005371
 8004f70:	0800540d 	.word	0x0800540d
 8004f74:	004005ff 	.word	0x004005ff
 8004f78:	4225858c 	.word	0x4225858c

08004f7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f9e:	0f9b      	lsrs	r3, r3, #30
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004faa:	0e9b      	lsrs	r3, r3, #26
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ff0:	0d1b      	lsrs	r3, r3, #20
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	b2da      	uxtb	r2, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500e:	0bdb      	lsrs	r3, r3, #15
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	b2da      	uxtb	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005020:	0b9b      	lsrs	r3, r3, #14
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005044:	0b1b      	lsrs	r3, r3, #12
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505c:	2b00      	cmp	r3, #0
 800505e:	d163      	bne.n	8005128 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005064:	009a      	lsls	r2, r3, #2
 8005066:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800506a:	4013      	ands	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005070:	0f92      	lsrs	r2, r2, #30
 8005072:	431a      	orrs	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800507c:	0edb      	lsrs	r3, r3, #27
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	b2da      	uxtb	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	b2da      	uxtb	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a0:	0d5b      	lsrs	r3, r3, #21
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c4:	0bdb      	lsrs	r3, r3, #15
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	7e1b      	ldrb	r3, [r3, #24]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	3302      	adds	r3, #2
 80050e8:	2201      	movs	r2, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80050f2:	fb03 f202 	mul.w	r2, r3, r2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	7a1b      	ldrb	r3, [r3, #8]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005114:	0a52      	lsrs	r2, r2, #9
 8005116:	fb03 f202 	mul.w	r2, r3, r2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005124:	661a      	str	r2, [r3, #96]	@ 0x60
 8005126:	e031      	b.n	800518c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11d      	bne.n	800516c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	3301      	adds	r3, #1
 800514c:	029a      	lsls	r2, r3, #10
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005160:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60
 800516a:	e00f      	b.n	800518c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a58      	ldr	r2, [pc, #352]	@ (80052d4 <HAL_SD_GetCardCSD+0x344>)
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e09d      	b.n	80052c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005190:	0b9b      	lsrs	r3, r3, #14
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a2:	09db      	lsrs	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	0fdb      	lsrs	r3, r3, #31
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d0:	0f5b      	lsrs	r3, r3, #29
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	0e9b      	lsrs	r3, r3, #26
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	0d9b      	lsrs	r3, r3, #22
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	0d5b      	lsrs	r3, r3, #21
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	0bdb      	lsrs	r3, r3, #15
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	0b9b      	lsrs	r3, r3, #14
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	0b5b      	lsrs	r3, r3, #13
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	0b1b      	lsrs	r3, r3, #12
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	0a9b      	lsrs	r3, r3, #10
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	004005ff 	.word	0x004005ff

080052d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa10 	bl	8005768 <SD_SendStatus>
 8005348:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0a5b      	lsrs	r3, r3, #9
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005366:	693b      	ldr	r3, [r7, #16]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800538c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	2b82      	cmp	r3, #130	@ 0x82
 80053ae:	d111      	bne.n	80053d4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 f833 	bl	8007420 <SDMMC_CmdStopTransfer>
 80053ba:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fdd4 	bl	8004f7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0208 	bic.w	r2, r2, #8
 80053e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80053ec:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f002 fc37 	bl	8007c70 <HAL_SD_RxCpltCallback>
#endif
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd f9ca 	bl	80027b4 <HAL_DMA_GetError>
 8005420:	4603      	mov	r3, r0
 8005422:	2b02      	cmp	r3, #2
 8005424:	d03e      	beq.n	80054a4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <SD_DMAError+0x36>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d12d      	bne.n	800549e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <SD_DMAError+0xa0>)
 8005448:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005458:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff62 	bl	8005330 <HAL_SD_GetCardState>
 800546c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d002      	beq.n	800547a <SD_DMAError+0x6e>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b05      	cmp	r3, #5
 8005478:	d10a      	bne.n	8005490 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 ffce 	bl	8007420 <SDMMC_CmdStopTransfer>
 8005484:	4602      	mov	r2, r0
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	431a      	orrs	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800549e:	6978      	ldr	r0, [r7, #20]
 80054a0:	f7ff fd6c 	bl	8004f7c <HAL_SD_ErrorCallback>
#endif
  }
}
 80054a4:	bf00      	nop
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	004005ff 	.word	0x004005ff

080054b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b094      	sub	sp, #80	@ 0x50
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054b8:	2301      	movs	r3, #1
 80054ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 fe7e 	bl	80071c2 <SDIO_GetPowerState>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80054d0:	e0b8      	b.n	8005644 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d02f      	beq.n	800553a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 f865 	bl	80075ae <SDMMC_CmdSendCID>
 80054e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80054ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ee:	e0a9      	b.n	8005644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 fea8 	bl	800724c <SDIO_GetResponse>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2104      	movs	r1, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fe9f 	bl	800724c <SDIO_GetResponse>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2108      	movs	r1, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fe96 	bl	800724c <SDIO_GetResponse>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	210c      	movs	r1, #12
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fe8d 	bl	800724c <SDIO_GetResponse>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	2b03      	cmp	r3, #3
 8005540:	d00d      	beq.n	800555e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f107 020e 	add.w	r2, r7, #14
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f002 f86b 	bl	8007628 <SDMMC_CmdSetRelAdd>
 8005552:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <SD_InitCard+0xae>
    {
      return errorstate;
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	e072      	b.n	8005644 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005562:	2b03      	cmp	r3, #3
 8005564:	d036      	beq.n	80055d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005566:	89fb      	ldrh	r3, [r7, #14]
 8005568:	461a      	mov	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f002 f835 	bl	80075ea <SDMMC_CmdSendCSD>
 8005580:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558a:	e05b      	b.n	8005644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fe5a 	bl	800724c <SDIO_GetResponse>
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2104      	movs	r1, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 fe51 	bl	800724c <SDIO_GetResponse>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2108      	movs	r1, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fe48 	bl	800724c <SDIO_GetResponse>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	210c      	movs	r1, #12
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 fe3f 	bl	800724c <SDIO_GetResponse>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2104      	movs	r1, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fe36 	bl	800724c <SDIO_GetResponse>
 80055e0:	4603      	mov	r3, r0
 80055e2:	0d1a      	lsrs	r2, r3, #20
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80055e8:	f107 0310 	add.w	r3, r7, #16
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fcce 	bl	8004f90 <HAL_SD_GetCardCSD>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055fe:	e021      	b.n	8005644 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	2200      	movs	r2, #0
 800560c:	461c      	mov	r4, r3
 800560e:	4615      	mov	r5, r2
 8005610:	4622      	mov	r2, r4
 8005612:	462b      	mov	r3, r5
 8005614:	4608      	mov	r0, r1
 8005616:	f001 ff25 	bl	8007464 <SDMMC_CmdSelDesel>
 800561a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <SD_InitCard+0x176>
  {
    return errorstate;
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	e00e      	b.n	8005644 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681d      	ldr	r5, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	466c      	mov	r4, sp
 800562e:	f103 0210 	add.w	r2, r3, #16
 8005632:	ca07      	ldmia	r2, {r0, r1, r2}
 8005634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005638:	3304      	adds	r3, #4
 800563a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563c:	4628      	mov	r0, r5
 800563e:	f001 fd87 	bl	8007150 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3740      	adds	r7, #64	@ 0x40
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}

0800564c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 ff20 	bl	80074aa <SDMMC_CmdGoIdleState>
 800566a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	e072      	b.n	800575c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f001 ff33 	bl	80074e6 <SDMMC_CmdOperCond>
 8005680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f001 ff09 	bl	80074aa <SDMMC_CmdGoIdleState>
 8005698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	e05b      	b.n	800575c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d137      	bne.n	8005722 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 ff33 	bl	8007524 <SDMMC_CmdAppCommand>
 80056be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02d      	beq.n	8005722 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80056ca:	e047      	b.n	800575c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 ff26 	bl	8007524 <SDMMC_CmdAppCommand>
 80056d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	e03b      	b.n	800575c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	491e      	ldr	r1, [pc, #120]	@ (8005764 <SD_PowerON+0x118>)
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 ff3c 	bl	8007568 <SDMMC_CmdAppOperCommand>
 80056f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80056fc:	e02e      	b.n	800575c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fda1 	bl	800724c <SDIO_GetResponse>
 800570a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0fdb      	lsrs	r3, r3, #31
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <SD_PowerON+0xcc>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <SD_PowerON+0xce>
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]

    count++;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3301      	adds	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005728:	4293      	cmp	r3, r2
 800572a:	d802      	bhi.n	8005732 <SD_PowerON+0xe6>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0cc      	beq.n	80056cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005738:	4293      	cmp	r3, r2
 800573a:	d902      	bls.n	8005742 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800573c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005740:	e00c      	b.n	800575c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
 8005752:	e002      	b.n	800575a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	c1100000 	.word	0xc1100000

08005768 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005778:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800577c:	e018      	b.n	80057b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f001 ff6d 	bl	800766a <SDMMC_CmdSendStatus>
 8005790:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	e009      	b.n	80057b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fd52 	bl	800724c <SDIO_GetResponse>
 80057a8:	4602      	mov	r2, r0
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e041      	b.n	800584e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fbc6 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 fa7e 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d001      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e04e      	b.n	800590e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a23      	ldr	r2, [pc, #140]	@ (800591c <HAL_TIM_Base_Start_IT+0xc4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589a:	d01d      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_TIM_Base_Start_IT+0xc8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <HAL_TIM_Base_Start_IT+0xcc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1b      	ldr	r2, [pc, #108]	@ (800592c <HAL_TIM_Base_Start_IT+0xd4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d111      	bne.n	80058fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d010      	beq.n	800590c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e007      	b.n	800590c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40010400 	.word	0x40010400
 8005930:	40014000 	.word	0x40014000
 8005934:	40001800 	.word	0x40001800

08005938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0202 	mvn.w	r2, #2
 800596c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f999 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f98b 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f99c 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0204 	mvn.w	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f973 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f965 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f976 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0208 	mvn.w	r2, #8
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f94d 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f93f 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f950 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0210 	mvn.w	r2, #16
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2208      	movs	r2, #8
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f927 	bl	8005cba <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f919 	bl	8005ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f92a 	bl	8005cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0201 	mvn.w	r2, #1
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb ff76 	bl	8001990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fae4 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8fb 	bl	8005ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0220 	mvn.w	r2, #32
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fab6 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_ConfigClockSource+0x1c>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e0b4      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x186>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b6c:	d03e      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0xd4>
 8005b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b72:	f200 8087 	bhi.w	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7a:	f000 8086 	beq.w	8005c8a <HAL_TIM_ConfigClockSource+0x172>
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b82:	d87f      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005b84:	2b70      	cmp	r3, #112	@ 0x70
 8005b86:	d01a      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xa6>
 8005b88:	2b70      	cmp	r3, #112	@ 0x70
 8005b8a:	d87b      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b60      	cmp	r3, #96	@ 0x60
 8005b8e:	d050      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x11a>
 8005b90:	2b60      	cmp	r3, #96	@ 0x60
 8005b92:	d877      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b50      	cmp	r3, #80	@ 0x50
 8005b96:	d03c      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0xfa>
 8005b98:	2b50      	cmp	r3, #80	@ 0x50
 8005b9a:	d873      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b40      	cmp	r3, #64	@ 0x40
 8005b9e:	d058      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d86f      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b30      	cmp	r3, #48	@ 0x30
 8005ba6:	d064      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba8:	2b30      	cmp	r3, #48	@ 0x30
 8005baa:	d86b      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d060      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d867      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d05c      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d05a      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x15a>
 8005bbc:	e062      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	f000 f9b9 	bl	8005f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	609a      	str	r2, [r3, #8]
      break;
 8005bea:	e04f      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	f000 f9a2 	bl	8005f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c0e:	609a      	str	r2, [r3, #8]
      break;
 8005c10:	e03c      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f000 f916 	bl	8005e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2150      	movs	r1, #80	@ 0x50
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f96f 	bl	8005f0e <TIM_ITRx_SetConfig>
      break;
 8005c30:	e02c      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f000 f935 	bl	8005eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2160      	movs	r1, #96	@ 0x60
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f95f 	bl	8005f0e <TIM_ITRx_SetConfig>
      break;
 8005c50:	e01c      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f000 f8f6 	bl	8005e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2140      	movs	r1, #64	@ 0x40
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f94f 	bl	8005f0e <TIM_ITRx_SetConfig>
      break;
 8005c70:	e00c      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f000 f946 	bl	8005f0e <TIM_ITRx_SetConfig>
      break;
 8005c82:	e003      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e000      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a46      	ldr	r2, [pc, #280]	@ (8005e24 <TIM_Base_SetConfig+0x12c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a43      	ldr	r2, [pc, #268]	@ (8005e28 <TIM_Base_SetConfig+0x130>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a42      	ldr	r2, [pc, #264]	@ (8005e2c <TIM_Base_SetConfig+0x134>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a41      	ldr	r2, [pc, #260]	@ (8005e30 <TIM_Base_SetConfig+0x138>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a40      	ldr	r2, [pc, #256]	@ (8005e34 <TIM_Base_SetConfig+0x13c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <TIM_Base_SetConfig+0x12c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d58:	d027      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a32      	ldr	r2, [pc, #200]	@ (8005e28 <TIM_Base_SetConfig+0x130>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d023      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a31      	ldr	r2, [pc, #196]	@ (8005e2c <TIM_Base_SetConfig+0x134>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a30      	ldr	r2, [pc, #192]	@ (8005e30 <TIM_Base_SetConfig+0x138>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	@ (8005e34 <TIM_Base_SetConfig+0x13c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <TIM_Base_SetConfig+0x140>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2d      	ldr	r2, [pc, #180]	@ (8005e3c <TIM_Base_SetConfig+0x144>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e40 <TIM_Base_SetConfig+0x148>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <TIM_Base_SetConfig+0x14c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e48 <TIM_Base_SetConfig+0x150>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a29      	ldr	r2, [pc, #164]	@ (8005e4c <TIM_Base_SetConfig+0x154>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a10      	ldr	r2, [pc, #64]	@ (8005e24 <TIM_Base_SetConfig+0x12c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a12      	ldr	r2, [pc, #72]	@ (8005e34 <TIM_Base_SetConfig+0x13c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d103      	bne.n	8005df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	611a      	str	r2, [r3, #16]
  }
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40010400 	.word	0x40010400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800
 8005e44:	40001800 	.word	0x40001800
 8005e48:	40001c00 	.word	0x40001c00
 8005e4c:	40002000 	.word	0x40002000

08005e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f023 0201 	bic.w	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f023 030a 	bic.w	r3, r3, #10
 8005e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f023 0210 	bic.w	r2, r3, #16
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	031b      	lsls	r3, r3, #12
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f043 0307 	orr.w	r3, r3, #7
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	021a      	lsls	r2, r3, #8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e05a      	b.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a21      	ldr	r2, [pc, #132]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d022      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe8:	d01d      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1d      	ldr	r2, [pc, #116]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1a      	ldr	r2, [pc, #104]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a18      	ldr	r2, [pc, #96]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a17      	ldr	r2, [pc, #92]	@ (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a15      	ldr	r2, [pc, #84]	@ (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10c      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800602c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4313      	orrs	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40010400 	.word	0x40010400
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e042      	b.n	800613c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb ffa2 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	@ 0x24
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fdbd 	bl	8006c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800611c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	@ 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	d175      	bne.n	8006250 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_UART_Transmit+0x2c>
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e06e      	b.n	8006252 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2221      	movs	r2, #33	@ 0x21
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006182:	f7fc f91b 	bl	80023bc <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619c:	d108      	bne.n	80061b0 <HAL_UART_Transmit+0x6c>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e003      	b.n	80061b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b8:	e02e      	b.n	8006218 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	@ 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fb1f 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e03a      	b.n	8006252 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	3302      	adds	r3, #2
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e007      	b.n	800620a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	3301      	adds	r3, #1
 8006208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1cb      	bne.n	80061ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2140      	movs	r1, #64	@ 0x40
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 faeb 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e006      	b.n	8006252 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	4613      	mov	r3, r2
 8006266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b20      	cmp	r3, #32
 8006272:	d112      	bne.n	800629a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Receive_IT+0x26>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e00b      	b.n	800629c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	461a      	mov	r2, r3
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fb12 	bl	80068ba <UART_Start_Receive_IT>
 8006296:	4603      	mov	r3, r0
 8006298:	e000      	b.n	800629c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b0ba      	sub	sp, #232	@ 0xe8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <HAL_UART_IRQHandler+0x66>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fbf2 	bl	8006aec <UART_Receive_IT>
      return;
 8006308:	e25b      	b.n	80067c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800630a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80de 	beq.w	80064d0 <HAL_UART_IRQHandler+0x22c>
 8006314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80d1 	beq.w	80064d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_UART_IRQHandler+0xae>
 800633a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_UART_IRQHandler+0xd2>
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f043 0202 	orr.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_UART_IRQHandler+0xf6>
 8006382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d011      	beq.n	80063ca <HAL_UART_IRQHandler+0x126>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 81f2 	beq.w	80067b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x14e>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb7d 	bl	8006aec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fc:	2b40      	cmp	r3, #64	@ 0x40
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <HAL_UART_IRQHandler+0x17a>
 8006416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04f      	beq.n	80064be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa85 	bl	800692e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d141      	bne.n	80064b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800644c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800645e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800646a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1d9      	bne.n	8006432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	4a7e      	ldr	r2, [pc, #504]	@ (8006684 <HAL_UART_IRQHandler+0x3e0>)
 800648c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	4618      	mov	r0, r3
 8006494:	f7fc f96c 	bl	8002770 <HAL_DMA_Abort_IT>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e00e      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f994 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00a      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f990 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e006      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f98c 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064ca:	e175      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	bf00      	nop
    return;
 80064ce:	e173      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	f040 814f 	bne.w	8006778 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8148 	beq.w	8006778 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8141 	beq.w	8006778 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006516:	2b40      	cmp	r3, #64	@ 0x40
 8006518:	f040 80b6 	bne.w	8006688 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8145 	beq.w	80067bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800653a:	429a      	cmp	r2, r3
 800653c:	f080 813e 	bcs.w	80067bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006546:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006552:	f000 8088 	beq.w	8006666 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800656c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006582:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800658e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800659a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1d9      	bne.n	8006556 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3314      	adds	r3, #20
 80065c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e1      	bne.n	80065a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3314      	adds	r3, #20
 80065e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006602:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006604:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006608:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e3      	bne.n	80065de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006636:	f023 0310 	bic.w	r3, r3, #16
 800663a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006648:	65ba      	str	r2, [r7, #88]	@ 0x58
 800664a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800664e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e3      	bne.n	8006624 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006660:	4618      	mov	r0, r3
 8006662:	f7fc f815 	bl	8002690 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006674:	b29b      	uxth	r3, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8b7 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006682:	e09b      	b.n	80067bc <HAL_UART_IRQHandler+0x518>
 8006684:	080069f5 	.word	0x080069f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006690:	b29b      	uxth	r3, r3
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 808e 	beq.w	80067c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8089 	beq.w	80067c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80066d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e3      	bne.n	80066ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	623b      	str	r3, [r7, #32]
   return(result);
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3314      	adds	r3, #20
 8006706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800670a:	633a      	str	r2, [r7, #48]	@ 0x30
 800670c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e3      	bne.n	80066e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	60fb      	str	r3, [r7, #12]
   return(result);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0310 	bic.w	r3, r3, #16
 8006742:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006750:	61fa      	str	r2, [r7, #28]
 8006752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	69b9      	ldr	r1, [r7, #24]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	617b      	str	r3, [r7, #20]
   return(result);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e3      	bne.n	800672c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f83d 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006776:	e023      	b.n	80067c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <HAL_UART_IRQHandler+0x4f4>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f943 	bl	8006a1c <UART_Transmit_IT>
    return;
 8006796:	e014      	b.n	80067c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <HAL_UART_IRQHandler+0x51e>
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f983 	bl	8006abc <UART_EndTransmit_IT>
    return;
 80067b6:	e004      	b.n	80067c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80067b8:	bf00      	nop
 80067ba:	e002      	b.n	80067c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067c0:	bf00      	nop
  }
}
 80067c2:	37e8      	adds	r7, #232	@ 0xe8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4613      	mov	r3, r2
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006818:	e03b      	b.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d037      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fb fdcb 	bl	80023bc <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <UART_WaitOnFlagUntilTimeout+0x30>
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e03a      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d023      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b80      	cmp	r3, #128	@ 0x80
 800684e:	d020      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b40      	cmp	r3, #64	@ 0x40
 8006854:	d01d      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b08      	cmp	r3, #8
 8006862:	d116      	bne.n	8006892 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f857 	bl	800692e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2208      	movs	r2, #8
 8006884:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00f      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d0b4      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	4613      	mov	r3, r2
 80068c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	88fa      	ldrh	r2, [r7, #6]
 80068d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2222      	movs	r2, #34	@ 0x22
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0220 	orr.w	r2, r2, #32
 800691e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800692e:	b480      	push	{r7}
 8006930:	b095      	sub	sp, #84	@ 0x54
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800694c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006956:	643a      	str	r2, [r7, #64]	@ 0x40
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800695c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	61fb      	str	r3, [r7, #28]
   return(result);
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800698a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800698c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d119      	bne.n	80069da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f023 0310 	bic.w	r3, r3, #16
 80069bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069c6:	61ba      	str	r2, [r7, #24]
 80069c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	613b      	str	r3, [r7, #16]
   return(result);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069e8:	bf00      	nop
 80069ea:	3754      	adds	r7, #84	@ 0x54
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff fee4 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b21      	cmp	r3, #33	@ 0x21
 8006a2e:	d13e      	bne.n	8006aae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a38:	d114      	bne.n	8006a64 <UART_Transmit_IT+0x48>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d110      	bne.n	8006a64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	621a      	str	r2, [r3, #32]
 8006a62:	e008      	b.n	8006a76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6211      	str	r1, [r2, #32]
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4619      	mov	r1, r3
 8006a84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fe73 	bl	80067c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	@ 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b22      	cmp	r3, #34	@ 0x22
 8006afe:	f040 80ae 	bne.w	8006c5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b0a:	d117      	bne.n	8006b3c <UART_Receive_IT+0x50>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d113      	bne.n	8006b3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b3a:	e026      	b.n	8006b8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b4e:	d007      	beq.n	8006b60 <UART_Receive_IT+0x74>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <UART_Receive_IT+0x82>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e008      	b.n	8006b80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d15d      	bne.n	8006c5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0220 	bic.w	r2, r2, #32
 8006bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d135      	bne.n	8006c50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c0a:	623a      	str	r2, [r7, #32]
 8006c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	69f9      	ldr	r1, [r7, #28]
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d10a      	bne.n	8006c42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fdd1 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
 8006c4e:	e002      	b.n	8006c56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fb fa2f 	bl	80020b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e002      	b.n	8006c60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3730      	adds	r7, #48	@ 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c6c:	b0c0      	sub	sp, #256	@ 0x100
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	68d9      	ldr	r1, [r3, #12]
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	ea40 0301 	orr.w	r3, r0, r1
 8006c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cc0:	f021 010c 	bic.w	r1, r1, #12
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce2:	6999      	ldr	r1, [r3, #24]
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	ea40 0301 	orr.w	r3, r0, r1
 8006cee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f34 <UART_SetConfig+0x2cc>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d005      	beq.n	8006d08 <UART_SetConfig+0xa0>
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b8d      	ldr	r3, [pc, #564]	@ (8006f38 <UART_SetConfig+0x2d0>)
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d104      	bne.n	8006d12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fd fde6 	bl	80048d8 <HAL_RCC_GetPCLK2Freq>
 8006d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d10:	e003      	b.n	8006d1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d12:	f7fd fdcd 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8006d16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d24:	f040 810c 	bne.w	8006f40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	1891      	adds	r1, r2, r2
 8006d40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d42:	415b      	adcs	r3, r3
 8006d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	eb12 0801 	adds.w	r8, r2, r1
 8006d50:	4629      	mov	r1, r5
 8006d52:	eb43 0901 	adc.w	r9, r3, r1
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d6a:	4690      	mov	r8, r2
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	4623      	mov	r3, r4
 8006d70:	eb18 0303 	adds.w	r3, r8, r3
 8006d74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d78:	462b      	mov	r3, r5
 8006d7a:	eb49 0303 	adc.w	r3, r9, r3
 8006d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d96:	460b      	mov	r3, r1
 8006d98:	18db      	adds	r3, r3, r3
 8006d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	eb42 0303 	adc.w	r3, r2, r3
 8006da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006da4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dac:	f7f9 ff6c 	bl	8000c88 <__aeabi_uldivmod>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4b61      	ldr	r3, [pc, #388]	@ (8006f3c <UART_SetConfig+0x2d4>)
 8006db6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	011c      	lsls	r4, r3, #4
 8006dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006dcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006de0:	4641      	mov	r1, r8
 8006de2:	eb12 0a01 	adds.w	sl, r2, r1
 8006de6:	4649      	mov	r1, r9
 8006de8:	eb43 0b01 	adc.w	fp, r3, r1
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e00:	4692      	mov	sl, r2
 8006e02:	469b      	mov	fp, r3
 8006e04:	4643      	mov	r3, r8
 8006e06:	eb1a 0303 	adds.w	r3, sl, r3
 8006e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	eb4b 0303 	adc.w	r3, fp, r3
 8006e14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	18db      	adds	r3, r3, r3
 8006e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e32:	4613      	mov	r3, r2
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e42:	f7f9 ff21 	bl	8000c88 <__aeabi_uldivmod>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f3c <UART_SetConfig+0x2d4>)
 8006e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2264      	movs	r2, #100	@ 0x64
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e62:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <UART_SetConfig+0x2d4>)
 8006e64:	fba3 2302 	umull	r2, r3, r3, r2
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e70:	441c      	add	r4, r3
 8006e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	1891      	adds	r1, r2, r2
 8006e8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e8c:	415b      	adcs	r3, r3
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e94:	4641      	mov	r1, r8
 8006e96:	1851      	adds	r1, r2, r1
 8006e98:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006eac:	4659      	mov	r1, fp
 8006eae:	00cb      	lsls	r3, r1, #3
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	00ca      	lsls	r2, r1, #3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ec8:	464b      	mov	r3, r9
 8006eca:	460a      	mov	r2, r1
 8006ecc:	eb42 0303 	adc.w	r3, r2, r3
 8006ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ee8:	460b      	mov	r3, r1
 8006eea:	18db      	adds	r3, r3, r3
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eee:	4613      	mov	r3, r2
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006efe:	f7f9 fec3 	bl	8000c88 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4b0d      	ldr	r3, [pc, #52]	@ (8006f3c <UART_SetConfig+0x2d4>)
 8006f08:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	2164      	movs	r1, #100	@ 0x64
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	3332      	adds	r3, #50	@ 0x32
 8006f1a:	4a08      	ldr	r2, [pc, #32]	@ (8006f3c <UART_SetConfig+0x2d4>)
 8006f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	f003 0207 	and.w	r2, r3, #7
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4422      	add	r2, r4
 8006f2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f30:	e106      	b.n	8007140 <UART_SetConfig+0x4d8>
 8006f32:	bf00      	nop
 8006f34:	40011000 	.word	0x40011000
 8006f38:	40011400 	.word	0x40011400
 8006f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f52:	4642      	mov	r2, r8
 8006f54:	464b      	mov	r3, r9
 8006f56:	1891      	adds	r1, r2, r2
 8006f58:	6239      	str	r1, [r7, #32]
 8006f5a:	415b      	adcs	r3, r3
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f62:	4641      	mov	r1, r8
 8006f64:	1854      	adds	r4, r2, r1
 8006f66:	4649      	mov	r1, r9
 8006f68:	eb43 0501 	adc.w	r5, r3, r1
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	00eb      	lsls	r3, r5, #3
 8006f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f7a:	00e2      	lsls	r2, r4, #3
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	4643      	mov	r3, r8
 8006f82:	18e3      	adds	r3, r4, r3
 8006f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f88:	464b      	mov	r3, r9
 8006f8a:	eb45 0303 	adc.w	r3, r5, r3
 8006f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fae:	4629      	mov	r1, r5
 8006fb0:	008b      	lsls	r3, r1, #2
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb8:	4621      	mov	r1, r4
 8006fba:	008a      	lsls	r2, r1, #2
 8006fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fc0:	f7f9 fe62 	bl	8000c88 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b60      	ldr	r3, [pc, #384]	@ (800714c <UART_SetConfig+0x4e4>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011c      	lsls	r4, r3, #4
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	61b9      	str	r1, [r7, #24]
 8006fec:	415b      	adcs	r3, r3
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6139      	str	r1, [r7, #16]
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800703e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800704c:	4649      	mov	r1, r9
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	4641      	mov	r1, r8
 8007052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007056:	4641      	mov	r1, r8
 8007058:	008a      	lsls	r2, r1, #2
 800705a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800705e:	f7f9 fe13 	bl	8000c88 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4611      	mov	r1, r2
 8007068:	4b38      	ldr	r3, [pc, #224]	@ (800714c <UART_SetConfig+0x4e4>)
 800706a:	fba3 2301 	umull	r2, r3, r3, r1
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	2264      	movs	r2, #100	@ 0x64
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	1acb      	subs	r3, r1, r3
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	3332      	adds	r3, #50	@ 0x32
 800707c:	4a33      	ldr	r2, [pc, #204]	@ (800714c <UART_SetConfig+0x4e4>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007088:	441c      	add	r4, r3
 800708a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800708e:	2200      	movs	r2, #0
 8007090:	673b      	str	r3, [r7, #112]	@ 0x70
 8007092:	677a      	str	r2, [r7, #116]	@ 0x74
 8007094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	1891      	adds	r1, r2, r2
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	415b      	adcs	r3, r3
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a8:	4641      	mov	r1, r8
 80070aa:	1851      	adds	r1, r2, r1
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	4649      	mov	r1, r9
 80070b0:	414b      	adcs	r3, r1
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070c0:	4659      	mov	r1, fp
 80070c2:	00cb      	lsls	r3, r1, #3
 80070c4:	4651      	mov	r1, sl
 80070c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ca:	4651      	mov	r1, sl
 80070cc:	00ca      	lsls	r2, r1, #3
 80070ce:	4610      	mov	r0, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	4642      	mov	r2, r8
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070da:	464b      	mov	r3, r9
 80070dc:	460a      	mov	r2, r1
 80070de:	eb42 0303 	adc.w	r3, r2, r3
 80070e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80070ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070fc:	4649      	mov	r1, r9
 80070fe:	008b      	lsls	r3, r1, #2
 8007100:	4641      	mov	r1, r8
 8007102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007106:	4641      	mov	r1, r8
 8007108:	008a      	lsls	r2, r1, #2
 800710a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800710e:	f7f9 fdbb 	bl	8000c88 <__aeabi_uldivmod>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4b0d      	ldr	r3, [pc, #52]	@ (800714c <UART_SetConfig+0x4e4>)
 8007118:	fba3 1302 	umull	r1, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	2164      	movs	r1, #100	@ 0x64
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	3332      	adds	r3, #50	@ 0x32
 800712a:	4a08      	ldr	r2, [pc, #32]	@ (800714c <UART_SetConfig+0x4e4>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4422      	add	r2, r4
 800713e:	609a      	str	r2, [r3, #8]
}
 8007140:	bf00      	nop
 8007142:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007146:	46bd      	mov	sp, r7
 8007148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714c:	51eb851f 	.word	0x51eb851f

08007150 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007150:	b084      	sub	sp, #16
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	f107 001c 	add.w	r0, r7, #28
 800715e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007166:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007168:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800716a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800716e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007172:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007176:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800717a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800718a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	b004      	add	sp, #16
 80071a4:	4770      	bx	lr

080071a6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2203      	movs	r2, #3
 80071b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0303 	and.w	r3, r3, #3
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071fc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007202:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007208:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007218:	f023 030f 	bic.w	r3, r3, #15
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	b2db      	uxtb	r3, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3314      	adds	r3, #20
 800725a:	461a      	mov	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	4413      	add	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
}  
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007298:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800729e:	431a      	orrs	r2, r3
                       Data->DPSM);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80072a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0

}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b088      	sub	sp, #32
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072d8:	2310      	movs	r3, #16
 80072da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072ea:	f107 0308 	add.w	r3, r7, #8
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff74 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80072f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fa:	2110      	movs	r1, #16
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9d7 	bl	80076b0 <SDMMC_GetCmdResp1>
 8007302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007304:	69fb      	ldr	r3, [r7, #28]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b088      	sub	sp, #32
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800731c:	2311      	movs	r3, #17
 800731e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007320:	2340      	movs	r3, #64	@ 0x40
 8007322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800732c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800732e:	f107 0308 	add.w	r3, r7, #8
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff ff52 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800733a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733e:	2111      	movs	r1, #17
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9b5 	bl	80076b0 <SDMMC_GetCmdResp1>
 8007346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007348:	69fb      	ldr	r3, [r7, #28]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b088      	sub	sp, #32
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007360:	2312      	movs	r3, #18
 8007362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007364:	2340      	movs	r3, #64	@ 0x40
 8007366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800736c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007372:	f107 0308 	add.w	r3, r7, #8
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff30 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800737e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007382:	2112      	movs	r1, #18
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f993 	bl	80076b0 <SDMMC_GetCmdResp1>
 800738a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738c:	69fb      	ldr	r3, [r7, #28]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b088      	sub	sp, #32
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80073a4:	2318      	movs	r3, #24
 80073a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073a8:	2340      	movs	r3, #64	@ 0x40
 80073aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073b6:	f107 0308 	add.w	r3, r7, #8
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff0e 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80073c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c6:	2118      	movs	r1, #24
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f971 	bl	80076b0 <SDMMC_GetCmdResp1>
 80073ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073d0:	69fb      	ldr	r3, [r7, #28]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b088      	sub	sp, #32
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80073e8:	2319      	movs	r3, #25
 80073ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073ec:	2340      	movs	r3, #64	@ 0x40
 80073ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073fa:	f107 0308 	add.w	r3, r7, #8
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff feec 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740a:	2119      	movs	r1, #25
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f94f 	bl	80076b0 <SDMMC_GetCmdResp1>
 8007412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007414:	69fb      	ldr	r3, [r7, #28]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800742c:	230c      	movs	r3, #12
 800742e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007430:	2340      	movs	r3, #64	@ 0x40
 8007432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800743c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800743e:	f107 0308 	add.w	r3, r7, #8
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff feca 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800744a:	4a05      	ldr	r2, [pc, #20]	@ (8007460 <SDMMC_CmdStopTransfer+0x40>)
 800744c:	210c      	movs	r1, #12
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f92e 	bl	80076b0 <SDMMC_GetCmdResp1>
 8007454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007456:	69fb      	ldr	r3, [r7, #28]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	05f5e100 	.word	0x05f5e100

08007464 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	@ 0x28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007474:	2307      	movs	r3, #7
 8007476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007478:	2340      	movs	r3, #64	@ 0x40
 800747a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800747c:	2300      	movs	r3, #0
 800747e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007484:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff fea6 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007496:	2107      	movs	r1, #7
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f909 	bl	80076b0 <SDMMC_GetCmdResp1>
 800749e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3728      	adds	r7, #40	@ 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b088      	sub	sp, #32
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fe85 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb23 	bl	8007b20 <SDMMC_GetCmdError>
 80074da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074dc:	69fb      	ldr	r3, [r7, #28]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80074ee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80074f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80074f4:	2308      	movs	r3, #8
 80074f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074f8:	2340      	movs	r3, #64	@ 0x40
 80074fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007504:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fe66 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fab6 	bl	8007a84 <SDMMC_GetCmdResp7>
 8007518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800751a:	69fb      	ldr	r3, [r7, #28]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007532:	2337      	movs	r3, #55	@ 0x37
 8007534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007536:	2340      	movs	r3, #64	@ 0x40
 8007538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800753e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007542:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007544:	f107 0308 	add.w	r3, r7, #8
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fe47 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007554:	2137      	movs	r1, #55	@ 0x37
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8aa 	bl	80076b0 <SDMMC_GetCmdResp1>
 800755c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755e:	69fb      	ldr	r3, [r7, #28]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007578:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800757c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800757e:	2329      	movs	r3, #41	@ 0x29
 8007580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007582:	2340      	movs	r3, #64	@ 0x40
 8007584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800758a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800758e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007590:	f107 0308 	add.w	r3, r7, #8
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fe21 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9bd 	bl	800791c <SDMMC_GetCmdResp3>
 80075a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075a4:	69fb      	ldr	r3, [r7, #28]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3720      	adds	r7, #32
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075ba:	2302      	movs	r3, #2
 80075bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075be:	23c0      	movs	r3, #192	@ 0xc0
 80075c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fe03 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f957 	bl	800788c <SDMMC_GetCmdResp2>
 80075de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075e0:	69fb      	ldr	r3, [r7, #28]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075f8:	2309      	movs	r3, #9
 80075fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075fc:	23c0      	movs	r3, #192	@ 0xc0
 80075fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007608:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fde4 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f938 	bl	800788c <SDMMC_GetCmdResp2>
 800761c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761e:	69fb      	ldr	r3, [r7, #28]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007636:	2303      	movs	r3, #3
 8007638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800763a:	2340      	movs	r3, #64	@ 0x40
 800763c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007646:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fdc5 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	2103      	movs	r1, #3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f99d 	bl	8007998 <SDMMC_GetCmdResp6>
 800765e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007660:	69fb      	ldr	r3, [r7, #28]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b088      	sub	sp, #32
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007678:	230d      	movs	r3, #13
 800767a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800767c:	2340      	movs	r3, #64	@ 0x40
 800767e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fda4 	bl	80071de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769a:	210d      	movs	r1, #13
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f807 	bl	80076b0 <SDMMC_GetCmdResp1>
 80076a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076a4:	69fb      	ldr	r3, [r7, #28]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	460b      	mov	r3, r1
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076be:	4b70      	ldr	r3, [pc, #448]	@ (8007880 <SDMMC_GetCmdResp1+0x1d0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a70      	ldr	r2, [pc, #448]	@ (8007884 <SDMMC_GetCmdResp1+0x1d4>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	0a5a      	lsrs	r2, r3, #9
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	61fa      	str	r2, [r7, #28]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076e0:	e0c9      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0ef      	beq.n	80076d2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1ea      	bne.n	80076d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2204      	movs	r2, #4
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800770e:	2304      	movs	r3, #4
 8007710:	e0b1      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007724:	2301      	movs	r3, #1
 8007726:	e0a6      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	22c5      	movs	r2, #197	@ 0xc5
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fd7f 	bl	8007232 <SDIO_GetCommandResponse>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	4293      	cmp	r3, r2
 800773c:	d001      	beq.n	8007742 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800773e:	2301      	movs	r3, #1
 8007740:	e099      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007742:	2100      	movs	r1, #0
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fd81 	bl	800724c <SDIO_GetResponse>
 800774a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4b4e      	ldr	r3, [pc, #312]	@ (8007888 <SDMMC_GetCmdResp1+0x1d8>)
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007756:	2300      	movs	r3, #0
 8007758:	e08d      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da02      	bge.n	8007766 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007764:	e087      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	e080      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800777e:	2380      	movs	r3, #128	@ 0x80
 8007780:	e079      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800778c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007790:	e071      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800779c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077a0:	e069      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80077ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077b0:	e061      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077c0:	e059      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077d0:	e051      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077e0:	e049      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80077f0:	e041      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007800:	e039      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800780c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007810:	e031      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800781c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007820:	e029      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800782c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007830:	e021      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800783c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007840:	e019      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800784c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007850:	e011      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800785c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007860:	e009      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800786c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007870:	e001      	b.n	8007876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000014 	.word	0x20000014
 8007884:	10624dd3 	.word	0x10624dd3
 8007888:	fdffe008 	.word	0xfdffe008

0800788c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007894:	4b1f      	ldr	r3, [pc, #124]	@ (8007914 <SDMMC_GetCmdResp2+0x88>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1f      	ldr	r2, [pc, #124]	@ (8007918 <SDMMC_GetCmdResp2+0x8c>)
 800789a:	fba2 2303 	umull	r2, r3, r2, r3
 800789e:	0a5b      	lsrs	r3, r3, #9
 80078a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a4:	fb02 f303 	mul.w	r3, r2, r3
 80078a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1e5a      	subs	r2, r3, #1
 80078ae:	60fa      	str	r2, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078b8:	e026      	b.n	8007908 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0ef      	beq.n	80078aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1ea      	bne.n	80078aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2204      	movs	r2, #4
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078e6:	2304      	movs	r3, #4
 80078e8:	e00e      	b.n	8007908 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e003      	b.n	8007908 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	22c5      	movs	r2, #197	@ 0xc5
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20000014 	.word	0x20000014
 8007918:	10624dd3 	.word	0x10624dd3

0800791c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007924:	4b1a      	ldr	r3, [pc, #104]	@ (8007990 <SDMMC_GetCmdResp3+0x74>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1a      	ldr	r2, [pc, #104]	@ (8007994 <SDMMC_GetCmdResp3+0x78>)
 800792a:	fba2 2303 	umull	r2, r3, r2, r3
 800792e:	0a5b      	lsrs	r3, r3, #9
 8007930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007934:	fb02 f303 	mul.w	r3, r2, r3
 8007938:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	60fa      	str	r2, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007944:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007948:	e01b      	b.n	8007982 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ef      	beq.n	800793a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1ea      	bne.n	800793a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007976:	2304      	movs	r3, #4
 8007978:	e003      	b.n	8007982 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	22c5      	movs	r2, #197	@ 0xc5
 800797e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20000014 	.word	0x20000014
 8007994:	10624dd3 	.word	0x10624dd3

08007998 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	460b      	mov	r3, r1
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a6:	4b35      	ldr	r3, [pc, #212]	@ (8007a7c <SDMMC_GetCmdResp6+0xe4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a35      	ldr	r2, [pc, #212]	@ (8007a80 <SDMMC_GetCmdResp6+0xe8>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	0a5b      	lsrs	r3, r3, #9
 80079b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	1e5a      	subs	r2, r3, #1
 80079c0:	61fa      	str	r2, [r7, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079ca:	e052      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0ef      	beq.n	80079bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1ea      	bne.n	80079bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2204      	movs	r2, #4
 80079f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079f8:	2304      	movs	r3, #4
 80079fa:	e03a      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e02f      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fc0d 	bl	8007232 <SDIO_GetCommandResponse>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d001      	beq.n	8007a26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e025      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	22c5      	movs	r2, #197	@ 0xc5
 8007a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fc0c 	bl	800724c <SDIO_GetResponse>
 8007a34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	0c1b      	lsrs	r3, r3, #16
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e011      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a5c:	e009      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a6c:	e001      	b.n	8007a72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000014 	.word	0x20000014
 8007a80:	10624dd3 	.word	0x10624dd3

08007a84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a8c:	4b22      	ldr	r3, [pc, #136]	@ (8007b18 <SDMMC_GetCmdResp7+0x94>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a22      	ldr	r2, [pc, #136]	@ (8007b1c <SDMMC_GetCmdResp7+0x98>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	0a5b      	lsrs	r3, r3, #9
 8007a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1e5a      	subs	r2, r3, #1
 8007aa6:	60fa      	str	r2, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ab0:	e02c      	b.n	8007b0c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ef      	beq.n	8007aa2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1ea      	bne.n	8007aa2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2204      	movs	r2, #4
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ade:	2304      	movs	r3, #4
 8007ae0:	e014      	b.n	8007b0c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e009      	b.n	8007b0c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2240      	movs	r2, #64	@ 0x40
 8007b08:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
  
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000014 	.word	0x20000014
 8007b1c:	10624dd3 	.word	0x10624dd3

08007b20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b28:	4b11      	ldr	r3, [pc, #68]	@ (8007b70 <SDMMC_GetCmdError+0x50>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a11      	ldr	r2, [pc, #68]	@ (8007b74 <SDMMC_GetCmdError+0x54>)
 8007b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b32:	0a5b      	lsrs	r3, r3, #9
 8007b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1e5a      	subs	r2, r3, #1
 8007b42:	60fa      	str	r2, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b4c:	e009      	b.n	8007b62 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f1      	beq.n	8007b3e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	22c5      	movs	r2, #197	@ 0xc5
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000014 	.word	0x20000014
 8007b74:	10624dd3 	.word	0x10624dd3

08007b78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b7c:	4904      	ldr	r1, [pc, #16]	@ (8007b90 <MX_FATFS_Init+0x18>)
 8007b7e:	4805      	ldr	r0, [pc, #20]	@ (8007b94 <MX_FATFS_Init+0x1c>)
 8007b80:	f000 ff8c 	bl	8008a9c <FATFS_LinkDriver>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b03      	ldr	r3, [pc, #12]	@ (8007b98 <MX_FATFS_Init+0x20>)
 8007b8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b8c:	bf00      	nop
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20003e00 	.word	0x20003e00
 8007b94:	08025c7c 	.word	0x08025c7c
 8007b98:	20003dfc 	.word	0x20003dfc

08007b9c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ba6:	f000 f86d 	bl	8007c84 <BSP_SD_IsDetected>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d001      	beq.n	8007bb4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e005      	b.n	8007bc0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007bb4:	4804      	ldr	r0, [pc, #16]	@ (8007bc8 <BSP_SD_Init+0x2c>)
 8007bb6:	f7fc ff68 	bl	8004a8a <HAL_SD_Init>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20003c90 	.word	0x20003c90

08007bcc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	4806      	ldr	r0, [pc, #24]	@ (8007bfc <BSP_SD_ReadBlocks_DMA+0x30>)
 8007be4:	f7fd f802 	bl	8004bec <HAL_SD_ReadBlocks_DMA>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20003c90 	.word	0x20003c90

08007c00 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	68f9      	ldr	r1, [r7, #12]
 8007c16:	4806      	ldr	r0, [pc, #24]	@ (8007c30 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007c18:	f7fd f8ca 	bl	8004db0 <HAL_SD_WriteBlocks_DMA>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20003c90 	.word	0x20003c90

08007c34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c38:	4805      	ldr	r0, [pc, #20]	@ (8007c50 <BSP_SD_GetCardState+0x1c>)
 8007c3a:	f7fd fb79 	bl	8005330 <HAL_SD_GetCardState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20003c90 	.word	0x20003c90

08007c54 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4803      	ldr	r0, [pc, #12]	@ (8007c6c <BSP_SD_GetCardInfo+0x18>)
 8007c60:	f7fd fb3a 	bl	80052d8 <HAL_SD_GetCardInfo>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20003c90 	.word	0x20003c90

08007c70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007c78:	f000 f986 	bl	8007f88 <BSP_SD_ReadCpltCallback>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8007ca6:	f000 ffb9 	bl	8008c1c <osKernelGetTickCount>
 8007caa:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8007cac:	e006      	b.n	8007cbc <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cae:	f7ff ffc1 	bl	8007c34 <BSP_SD_GetCardState>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e009      	b.n	8007cd0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8007cbc:	f000 ffae 	bl	8008c1c <osKernelGetTickCount>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d8f0      	bhi.n	8007cae <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d10 <SD_CheckStatus+0x38>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ce8:	f7ff ffa4 	bl	8007c34 <BSP_SD_GetCardState>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <SD_CheckStatus+0x38>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <SD_CheckStatus+0x38>)
 8007d00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007d02:	4b03      	ldr	r3, [pc, #12]	@ (8007d10 <SD_CheckStatus+0x38>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b2db      	uxtb	r3, r3
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	2000001d 	.word	0x2000001d

08007d14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8007d90 <SD_initialize+0x7c>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007d24:	f000 ff32 	bl	8008b8c <osKernelGetState>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d129      	bne.n	8007d82 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007d2e:	f7ff ff35 	bl	8007b9c <BSP_SD_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d107      	bne.n	8007d48 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff ffcc 	bl	8007cd8 <SD_CheckStatus>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	4b12      	ldr	r3, [pc, #72]	@ (8007d90 <SD_initialize+0x7c>)
 8007d46:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007d48:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <SD_initialize+0x7c>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d017      	beq.n	8007d82 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007d52:	4b10      	ldr	r3, [pc, #64]	@ (8007d94 <SD_initialize+0x80>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d107      	bne.n	8007d6a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	200a      	movs	r0, #10
 8007d60:	f001 fa70 	bl	8009244 <osMessageQueueNew>
 8007d64:	4603      	mov	r3, r0
 8007d66:	4a0b      	ldr	r2, [pc, #44]	@ (8007d94 <SD_initialize+0x80>)
 8007d68:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d94 <SD_initialize+0x80>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8007d72:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <SD_initialize+0x7c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <SD_initialize+0x7c>)
 8007d80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007d82:	4b03      	ldr	r3, [pc, #12]	@ (8007d90 <SD_initialize+0x7c>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000001d 	.word	0x2000001d
 8007d94:	20003e04 	.word	0x20003e04

08007d98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff ff97 	bl	8007cd8 <SD_CheckStatus>
 8007daa:	4603      	mov	r3, r0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007dc8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007dcc:	f7ff ff67 	bl	8007c9e <SD_CheckStatusWithTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da01      	bge.n	8007dda <SD_read+0x26>
  {
    return res;
 8007dd6:	7ffb      	ldrb	r3, [r7, #31]
 8007dd8:	e02f      	b.n	8007e3a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	68b8      	ldr	r0, [r7, #8]
 8007de0:	f7ff fef4 	bl	8007bcc <BSP_SD_ReadBlocks_DMA>
 8007de4:	4603      	mov	r3, r0
 8007de6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007de8:	7fbb      	ldrb	r3, [r7, #30]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d124      	bne.n	8007e38 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007dee:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <SD_read+0x90>)
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f107 0112 	add.w	r1, r7, #18
 8007df6:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f001 faf6 	bl	80093ec <osMessageQueueGet>
 8007e00:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d117      	bne.n	8007e38 <SD_read+0x84>
 8007e08:	8a7b      	ldrh	r3, [r7, #18]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d114      	bne.n	8007e38 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007e0e:	f000 ff05 	bl	8008c1c <osKernelGetTickCount>
 8007e12:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007e14:	e007      	b.n	8007e26 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e16:	f7ff ff0d 	bl	8007c34 <BSP_SD_GetCardState>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <SD_read+0x72>
              {
                res = RES_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007e24:	e008      	b.n	8007e38 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007e26:	f000 fef9 	bl	8008c1c <osKernelGetTickCount>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d9ee      	bls.n	8007e16 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20003e04 	.word	0x20003e04

08007e48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007e5c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007e60:	f7ff ff1d 	bl	8007c9e <SD_CheckStatusWithTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da01      	bge.n	8007e6e <SD_write+0x26>
  {
    return res;
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	e02d      	b.n	8007eca <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	68b8      	ldr	r0, [r7, #8]
 8007e74:	f7ff fec4 	bl	8007c00 <BSP_SD_WriteBlocks_DMA>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d124      	bne.n	8007ec8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007e7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <SD_write+0x8c>)
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f107 0112 	add.w	r1, r7, #18
 8007e86:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f001 faae 	bl	80093ec <osMessageQueueGet>
 8007e90:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d117      	bne.n	8007ec8 <SD_write+0x80>
 8007e98:	8a7b      	ldrh	r3, [r7, #18]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d114      	bne.n	8007ec8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8007e9e:	f000 febd 	bl	8008c1c <osKernelGetTickCount>
 8007ea2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007ea4:	e007      	b.n	8007eb6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ea6:	f7ff fec5 	bl	8007c34 <BSP_SD_GetCardState>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <SD_write+0x6e>
          {
            res = RES_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	77fb      	strb	r3, [r7, #31]
            break;
 8007eb4:	e008      	b.n	8007ec8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007eb6:	f000 feb1 	bl	8008c1c <osKernelGetTickCount>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d9ee      	bls.n	8007ea6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20003e04 	.word	0x20003e04

08007ed8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08c      	sub	sp, #48	@ 0x30
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	603a      	str	r2, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007eee:	4b25      	ldr	r3, [pc, #148]	@ (8007f84 <SD_ioctl+0xac>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <SD_ioctl+0x28>
 8007efc:	2303      	movs	r3, #3
 8007efe:	e03c      	b.n	8007f7a <SD_ioctl+0xa2>

  switch (cmd)
 8007f00:	79bb      	ldrb	r3, [r7, #6]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d834      	bhi.n	8007f70 <SD_ioctl+0x98>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <SD_ioctl+0x34>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f25 	.word	0x08007f25
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f57 	.word	0x08007f57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f22:	e028      	b.n	8007f76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fe93 	bl	8007c54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f3a:	e01c      	b.n	8007f76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fe87 	bl	8007c54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f54:	e00f      	b.n	8007f76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fe7a 	bl	8007c54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	0a5a      	lsrs	r2, r3, #9
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f6e:	e002      	b.n	8007f76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007f76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3730      	adds	r7, #48	@ 0x30
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000001d 	.word	0x2000001d

08007f88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <BSP_SD_ReadCpltCallback+0x20>)
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	1db9      	adds	r1, r7, #6
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f001 f9c6 	bl	800932c <osMessageQueuePut>
#endif
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20003e04 	.word	0x20003e04

08007fac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f007 f9e1 	bl	800f37c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007fba:	4b1c      	ldr	r3, [pc, #112]	@ (800802c <MX_LWIP_Init+0x80>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <MX_LWIP_Init+0x84>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8008034 <MX_LWIP_Init+0x88>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <MX_LWIP_Init+0x8c>)
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800803c <MX_LWIP_Init+0x90>)
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4b16      	ldr	r3, [pc, #88]	@ (8008034 <MX_LWIP_Init+0x88>)
 8007fda:	4a15      	ldr	r2, [pc, #84]	@ (8008030 <MX_LWIP_Init+0x84>)
 8007fdc:	4913      	ldr	r1, [pc, #76]	@ (800802c <MX_LWIP_Init+0x80>)
 8007fde:	4818      	ldr	r0, [pc, #96]	@ (8008040 <MX_LWIP_Init+0x94>)
 8007fe0:	f008 fa84 	bl	80104ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007fe4:	4816      	ldr	r0, [pc, #88]	@ (8008040 <MX_LWIP_Init+0x94>)
 8007fe6:	f008 fc3b 	bl	8010860 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007fea:	4815      	ldr	r0, [pc, #84]	@ (8008040 <MX_LWIP_Init+0x94>)
 8007fec:	f008 fc48 	bl	8010880 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007ff0:	4914      	ldr	r1, [pc, #80]	@ (8008044 <MX_LWIP_Init+0x98>)
 8007ff2:	4813      	ldr	r0, [pc, #76]	@ (8008040 <MX_LWIP_Init+0x94>)
 8007ff4:	f008 fd4a 	bl	8010a8c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007ff8:	2224      	movs	r2, #36	@ 0x24
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4812      	ldr	r0, [pc, #72]	@ (8008048 <MX_LWIP_Init+0x9c>)
 8007ffe:	f016 fa7a 	bl	801e4f6 <memset>
  attributes.name = "EthLink";
 8008002:	4b11      	ldr	r3, [pc, #68]	@ (8008048 <MX_LWIP_Init+0x9c>)
 8008004:	4a11      	ldr	r2, [pc, #68]	@ (800804c <MX_LWIP_Init+0xa0>)
 8008006:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008008:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <MX_LWIP_Init+0x9c>)
 800800a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800800e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8008010:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <MX_LWIP_Init+0x9c>)
 8008012:	2210      	movs	r2, #16
 8008014:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008016:	4a0c      	ldr	r2, [pc, #48]	@ (8008048 <MX_LWIP_Init+0x9c>)
 8008018:	4909      	ldr	r1, [pc, #36]	@ (8008040 <MX_LWIP_Init+0x94>)
 800801a:	480d      	ldr	r0, [pc, #52]	@ (8008050 <MX_LWIP_Init+0xa4>)
 800801c:	f000 fe13 	bl	8008c46 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008020:	4807      	ldr	r0, [pc, #28]	@ (8008040 <MX_LWIP_Init+0x94>)
 8008022:	f010 ffb3 	bl	8018f8c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008026:	bf00      	nop
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20003e40 	.word	0x20003e40
 8008030:	20003e44 	.word	0x20003e44
 8008034:	20003e48 	.word	0x20003e48
 8008038:	0800f28d 	.word	0x0800f28d
 800803c:	0800853d 	.word	0x0800853d
 8008040:	20003e08 	.word	0x20003e08
 8008044:	08008055 	.word	0x08008055
 8008048:	20003e4c 	.word	0x20003e4c
 800804c:	08021d08 	.word	0x08021d08
 8008050:	080087f1 	.word	0x080087f1

08008054 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008070:	4b04      	ldr	r3, [pc, #16]	@ (8008084 <HAL_ETH_RxCpltCallback+0x1c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f87d 	bl	8009174 <osSemaphoreRelease>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000893c 	.word	0x2000893c

08008088 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008090:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <HAL_ETH_TxCpltCallback+0x1c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f001 f86d 	bl	8009174 <osSemaphoreRelease>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20008940 	.word	0x20008940

080080a8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fb fa02 	bl	80034ba <HAL_ETH_GetDMAError>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080bc:	2b80      	cmp	r3, #128	@ 0x80
 80080be:	d104      	bne.n	80080ca <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80080c0:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <HAL_ETH_ErrorCallback+0x2c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 f855 	bl	8009174 <osSemaphoreRelease>
  }
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	2000893c 	.word	0x2000893c

080080d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b0aa      	sub	sp, #168	@ 0xa8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80080f2:	f107 0310 	add.w	r3, r7, #16
 80080f6:	2264      	movs	r2, #100	@ 0x64
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f016 f9fb 	bl	801e4f6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008100:	4b89      	ldr	r3, [pc, #548]	@ (8008328 <low_level_init+0x250>)
 8008102:	4a8a      	ldr	r2, [pc, #552]	@ (800832c <low_level_init+0x254>)
 8008104:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008106:	2300      	movs	r3, #0
 8008108:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800810a:	2380      	movs	r3, #128	@ 0x80
 800810c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800810e:	23e1      	movs	r3, #225	@ 0xe1
 8008110:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008112:	2300      	movs	r3, #0
 8008114:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008116:	2300      	movs	r3, #0
 8008118:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800811a:	2300      	movs	r3, #0
 800811c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800811e:	4a82      	ldr	r2, [pc, #520]	@ (8008328 <low_level_init+0x250>)
 8008120:	f107 0308 	add.w	r3, r7, #8
 8008124:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008126:	4b80      	ldr	r3, [pc, #512]	@ (8008328 <low_level_init+0x250>)
 8008128:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800812c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800812e:	4b7e      	ldr	r3, [pc, #504]	@ (8008328 <low_level_init+0x250>)
 8008130:	4a7f      	ldr	r2, [pc, #508]	@ (8008330 <low_level_init+0x258>)
 8008132:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008134:	4b7c      	ldr	r3, [pc, #496]	@ (8008328 <low_level_init+0x250>)
 8008136:	4a7f      	ldr	r2, [pc, #508]	@ (8008334 <low_level_init+0x25c>)
 8008138:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800813a:	4b7b      	ldr	r3, [pc, #492]	@ (8008328 <low_level_init+0x250>)
 800813c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008140:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008142:	4879      	ldr	r0, [pc, #484]	@ (8008328 <low_level_init+0x250>)
 8008144:	f7fa fb70 	bl	8002828 <HAL_ETH_Init>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800814e:	2238      	movs	r2, #56	@ 0x38
 8008150:	2100      	movs	r1, #0
 8008152:	4879      	ldr	r0, [pc, #484]	@ (8008338 <low_level_init+0x260>)
 8008154:	f016 f9cf 	bl	801e4f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008158:	4b77      	ldr	r3, [pc, #476]	@ (8008338 <low_level_init+0x260>)
 800815a:	2221      	movs	r2, #33	@ 0x21
 800815c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800815e:	4b76      	ldr	r3, [pc, #472]	@ (8008338 <low_level_init+0x260>)
 8008160:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008164:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008166:	4b74      	ldr	r3, [pc, #464]	@ (8008338 <low_level_init+0x260>)
 8008168:	2200      	movs	r2, #0
 800816a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800816c:	4873      	ldr	r0, [pc, #460]	@ (800833c <low_level_init+0x264>)
 800816e:	f008 f877 	bl	8010260 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2206      	movs	r2, #6
 8008176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800817a:	4b6b      	ldr	r3, [pc, #428]	@ (8008328 <low_level_init+0x250>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008186:	4b68      	ldr	r3, [pc, #416]	@ (8008328 <low_level_init+0x250>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	785a      	ldrb	r2, [r3, #1]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008192:	4b65      	ldr	r3, [pc, #404]	@ (8008328 <low_level_init+0x250>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	789a      	ldrb	r2, [r3, #2]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800819e:	4b62      	ldr	r3, [pc, #392]	@ (8008328 <low_level_init+0x250>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	78da      	ldrb	r2, [r3, #3]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80081aa:	4b5f      	ldr	r3, [pc, #380]	@ (8008328 <low_level_init+0x250>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	791a      	ldrb	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081b6:	4b5c      	ldr	r3, [pc, #368]	@ (8008328 <low_level_init+0x250>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	795a      	ldrb	r2, [r3, #5]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80081c8:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80081d0:	f043 030a 	orr.w	r3, r3, #10
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80081dc:	2200      	movs	r2, #0
 80081de:	2100      	movs	r1, #0
 80081e0:	2001      	movs	r0, #1
 80081e2:	f000 feec 	bl	8008fbe <osSemaphoreNew>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4a55      	ldr	r2, [pc, #340]	@ (8008340 <low_level_init+0x268>)
 80081ea:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	2001      	movs	r0, #1
 80081f2:	f000 fee4 	bl	8008fbe <osSemaphoreNew>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4a52      	ldr	r2, [pc, #328]	@ (8008344 <low_level_init+0x26c>)
 80081fa:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80081fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008200:	2224      	movs	r2, #36	@ 0x24
 8008202:	2100      	movs	r1, #0
 8008204:	4618      	mov	r0, r3
 8008206:	f016 f976 	bl	801e4f6 <memset>
  attributes.name = "EthIf";
 800820a:	4b4f      	ldr	r3, [pc, #316]	@ (8008348 <low_level_init+0x270>)
 800820c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800820e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8008212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8008216:	2330      	movs	r3, #48	@ 0x30
 8008218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800821c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008220:	461a      	mov	r2, r3
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4849      	ldr	r0, [pc, #292]	@ (800834c <low_level_init+0x274>)
 8008226:	f000 fd0e 	bl	8008c46 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800822a:	4949      	ldr	r1, [pc, #292]	@ (8008350 <low_level_init+0x278>)
 800822c:	4849      	ldr	r0, [pc, #292]	@ (8008354 <low_level_init+0x27c>)
 800822e:	f7f9 ff88 	bl	8002142 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8008232:	4848      	ldr	r0, [pc, #288]	@ (8008354 <low_level_init+0x27c>)
 8008234:	f7f9 ffb7 	bl	80021a6 <DP83848_Init>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f008 fbf4 	bl	8010a2c <netif_set_link_down>
    netif_set_down(netif);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f008 fb87 	bl	8010958 <netif_set_down>
 800824a:	e06a      	b.n	8008322 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800824c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008250:	2b00      	cmp	r3, #0
 8008252:	d164      	bne.n	800831e <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008254:	483f      	ldr	r0, [pc, #252]	@ (8008354 <low_level_init+0x27c>)
 8008256:	f7f9 fff3 	bl	8002240 <DP83848_GetLinkState>
 800825a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800825e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008262:	2b01      	cmp	r3, #1
 8008264:	dc06      	bgt.n	8008274 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f008 fbe0 	bl	8010a2c <netif_set_link_down>
      netif_set_down(netif);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f008 fb73 	bl	8010958 <netif_set_down>
 8008272:	e056      	b.n	8008322 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8008274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008278:	3b02      	subs	r3, #2
 800827a:	2b03      	cmp	r3, #3
 800827c:	d82a      	bhi.n	80082d4 <low_level_init+0x1fc>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <low_level_init+0x1ac>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	08008295 	.word	0x08008295
 8008288:	080082a7 	.word	0x080082a7
 800828c:	080082b7 	.word	0x080082b7
 8008290:	080082c7 	.word	0x080082c7
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800829c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082a4:	e01f      	b.n	80082e6 <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80082ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082b4:	e017      	b.n	80082e6 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80082b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80082ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082c4:	e00f      	b.n	80082e6 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082d2:	e008      	b.n	80082e6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80082d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80082d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80082dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082e4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4619      	mov	r1, r3
 80082ec:	480e      	ldr	r0, [pc, #56]	@ (8008328 <low_level_init+0x250>)
 80082ee:	f7fa ff83 	bl	80031f8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80082f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80082f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082fe:	f107 0310 	add.w	r3, r7, #16
 8008302:	4619      	mov	r1, r3
 8008304:	4808      	ldr	r0, [pc, #32]	@ (8008328 <low_level_init+0x250>)
 8008306:	f7fb f86e 	bl	80033e6 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800830a:	4807      	ldr	r0, [pc, #28]	@ (8008328 <low_level_init+0x250>)
 800830c:	f7fa fb28 	bl	8002960 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f008 fab5 	bl	8010880 <netif_set_up>
    netif_set_link_up(netif);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f008 fb50 	bl	80109bc <netif_set_link_up>
 800831c:	e001      	b.n	8008322 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800831e:	f7f9 fb49 	bl	80019b4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008322:	37a8      	adds	r7, #168	@ 0xa8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20008944 	.word	0x20008944
 800832c:	40028000 	.word	0x40028000
 8008330:	2000889c 	.word	0x2000889c
 8008334:	200087fc 	.word	0x200087fc
 8008338:	200089f4 	.word	0x200089f4
 800833c:	08025c90 	.word	0x08025c90
 8008340:	2000893c 	.word	0x2000893c
 8008344:	20008940 	.word	0x20008940
 8008348:	08021d10 	.word	0x08021d10
 800834c:	080084e9 	.word	0x080084e9
 8008350:	20000020 	.word	0x20000020
 8008354:	20008a2c 	.word	0x20008a2c

08008358 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b092      	sub	sp, #72	@ 0x48
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	2230      	movs	r2, #48	@ 0x30
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f016 f8bc 	bl	801e4f6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800837e:	f107 030c 	add.w	r3, r7, #12
 8008382:	2230      	movs	r2, #48	@ 0x30
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f016 f8b5 	bl	801e4f6 <memset>

  for(q = p; q != NULL; q = q->next)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008390:	e045      	b.n	800841e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008394:	2b03      	cmp	r3, #3
 8008396:	d902      	bls.n	800839e <low_level_output+0x46>
      return ERR_IF;
 8008398:	f06f 030b 	mvn.w	r3, #11
 800839c:	e07f      	b.n	800849e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800839e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a0:	6859      	ldr	r1, [r3, #4]
 80083a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a4:	4613      	mov	r3, r2
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	3348      	adds	r3, #72	@ 0x48
 80083ae:	443b      	add	r3, r7
 80083b0:	3b3c      	subs	r3, #60	@ 0x3c
 80083b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80083b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b6:	895b      	ldrh	r3, [r3, #10]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083bc:	4613      	mov	r3, r2
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	3348      	adds	r3, #72	@ 0x48
 80083c6:	443b      	add	r3, r7
 80083c8:	3b38      	subs	r3, #56	@ 0x38
 80083ca:	6019      	str	r1, [r3, #0]

    if(i>0)
 80083cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d011      	beq.n	80083f6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80083d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	f107 000c 	add.w	r0, r7, #12
 80083da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083dc:	460b      	mov	r3, r1
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	440b      	add	r3, r1
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	18c1      	adds	r1, r0, r3
 80083e6:	4613      	mov	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	3348      	adds	r3, #72	@ 0x48
 80083f0:	443b      	add	r3, r7
 80083f2:	3b34      	subs	r3, #52	@ 0x34
 80083f4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80083f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80083fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	3348      	adds	r3, #72	@ 0x48
 800840a:	443b      	add	r3, r7
 800840c:	3b34      	subs	r3, #52	@ 0x34
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008414:	3301      	adds	r3, #1
 8008416:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	643b      	str	r3, [r7, #64]	@ 0x40
 800841e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1b6      	bne.n	8008392 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	891b      	ldrh	r3, [r3, #8]
 8008428:	461a      	mov	r2, r3
 800842a:	4b1f      	ldr	r3, [pc, #124]	@ (80084a8 <low_level_output+0x150>)
 800842c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800842e:	4a1e      	ldr	r2, [pc, #120]	@ (80084a8 <low_level_output+0x150>)
 8008430:	f107 030c 	add.w	r3, r7, #12
 8008434:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008436:	4a1c      	ldr	r2, [pc, #112]	@ (80084a8 <low_level_output+0x150>)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800843c:	6838      	ldr	r0, [r7, #0]
 800843e:	f008 ff79 	bl	8011334 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8008442:	4919      	ldr	r1, [pc, #100]	@ (80084a8 <low_level_output+0x150>)
 8008444:	4819      	ldr	r0, [pc, #100]	@ (80084ac <low_level_output+0x154>)
 8008446:	f7fa fb7a 	bl	8002b3e <HAL_ETH_Transmit_IT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d103      	bne.n	8008458 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008456:	e01b      	b.n	8008490 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008458:	4814      	ldr	r0, [pc, #80]	@ (80084ac <low_level_output+0x154>)
 800845a:	f7fb f821 	bl	80034a0 <HAL_ETH_GetError>
 800845e:	4603      	mov	r3, r0
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00d      	beq.n	8008484 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008468:	4b11      	ldr	r3, [pc, #68]	@ (80084b0 <low_level_output+0x158>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fe2d 	bl	80090d0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8008476:	480d      	ldr	r0, [pc, #52]	@ (80084ac <low_level_output+0x154>)
 8008478:	f7fa fd00 	bl	8002e7c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800847c:	23fe      	movs	r3, #254	@ 0xfe
 800847e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008482:	e005      	b.n	8008490 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8008484:	6838      	ldr	r0, [r7, #0]
 8008486:	f008 feaf 	bl	80111e8 <pbuf_free>
        errval =  ERR_IF;
 800848a:	23f4      	movs	r3, #244	@ 0xf4
 800848c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8008490:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008494:	f113 0f02 	cmn.w	r3, #2
 8008498:	d0d3      	beq.n	8008442 <low_level_output+0xea>

  return errval;
 800849a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3748      	adds	r7, #72	@ 0x48
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200089f4 	.word	0x200089f4
 80084ac:	20008944 	.word	0x20008944
 80084b0:	20008940 	.word	0x20008940

080084b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80084c0:	4b07      	ldr	r3, [pc, #28]	@ (80084e0 <low_level_input+0x2c>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80084c8:	f107 030c 	add.w	r3, r7, #12
 80084cc:	4619      	mov	r1, r3
 80084ce:	4805      	ldr	r0, [pc, #20]	@ (80084e4 <low_level_input+0x30>)
 80084d0:	f7fa fb91 	bl	8002bf6 <HAL_ETH_ReadData>
  }

  return p;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200087f8 	.word	0x200087f8
 80084e4:	20008944 	.word	0x20008944

080084e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80084f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <ethernetif_input+0x50>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fde5 	bl	80090d0 <osSemaphoreAcquire>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f5      	bne.n	80084f8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800850c:	68b8      	ldr	r0, [r7, #8]
 800850e:	f7ff ffd1 	bl	80084b4 <low_level_input>
 8008512:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f008 fe5c 	bl	80111e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1ea      	bne.n	800850c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008536:	e7df      	b.n	80084f8 <ethernetif_input+0x10>
 8008538:	2000893c 	.word	0x2000893c

0800853c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <ethernetif_init+0x1c>
 800854a:	4b0e      	ldr	r3, [pc, #56]	@ (8008584 <ethernetif_init+0x48>)
 800854c:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8008550:	490d      	ldr	r1, [pc, #52]	@ (8008588 <ethernetif_init+0x4c>)
 8008552:	480e      	ldr	r0, [pc, #56]	@ (800858c <ethernetif_init+0x50>)
 8008554:	f015 ff30 	bl	801e3b8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2273      	movs	r2, #115	@ 0x73
 800855c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2274      	movs	r2, #116	@ 0x74
 8008564:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a09      	ldr	r2, [pc, #36]	@ (8008590 <ethernetif_init+0x54>)
 800856c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a08      	ldr	r2, [pc, #32]	@ (8008594 <ethernetif_init+0x58>)
 8008572:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff fdaf 	bl	80080d8 <low_level_init>

  return ERR_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	08021d18 	.word	0x08021d18
 8008588:	08021d34 	.word	0x08021d34
 800858c:	08021d44 	.word	0x08021d44
 8008590:	0801aead 	.word	0x0801aead
 8008594:	08008359 	.word	0x08008359

08008598 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80085a4:	68f9      	ldr	r1, [r7, #12]
 80085a6:	4809      	ldr	r0, [pc, #36]	@ (80085cc <pbuf_free_custom+0x34>)
 80085a8:	f007 ff4a 	bl	8010440 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80085ac:	4b08      	ldr	r3, [pc, #32]	@ (80085d0 <pbuf_free_custom+0x38>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d107      	bne.n	80085c4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <pbuf_free_custom+0x38>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80085ba:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <pbuf_free_custom+0x3c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fdd8 	bl	8009174 <osSemaphoreRelease>
  }
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	08025c90 	.word	0x08025c90
 80085d0:	200087f8 	.word	0x200087f8
 80085d4:	2000893c 	.word	0x2000893c

080085d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085dc:	f7f9 feee 	bl	80023bc <HAL_GetTick>
 80085e0:	4603      	mov	r3, r0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	@ 0x38
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a4e      	ldr	r2, [pc, #312]	@ (8008740 <HAL_ETH_MspInit+0x158>)
 8008606:	4293      	cmp	r3, r2
 8008608:	f040 8095 	bne.w	8008736 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800860c:	2300      	movs	r3, #0
 800860e:	623b      	str	r3, [r7, #32]
 8008610:	4b4c      	ldr	r3, [pc, #304]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008614:	4a4b      	ldr	r2, [pc, #300]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800861a:	6313      	str	r3, [r2, #48]	@ 0x30
 800861c:	4b49      	ldr	r3, [pc, #292]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800861e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008624:	623b      	str	r3, [r7, #32]
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	4b45      	ldr	r3, [pc, #276]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	4a44      	ldr	r2, [pc, #272]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008636:	6313      	str	r3, [r2, #48]	@ 0x30
 8008638:	4b42      	ldr	r3, [pc, #264]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2300      	movs	r3, #0
 8008646:	61bb      	str	r3, [r7, #24]
 8008648:	4b3e      	ldr	r3, [pc, #248]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	4a3d      	ldr	r2, [pc, #244]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800864e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008652:	6313      	str	r3, [r2, #48]	@ 0x30
 8008654:	4b3b      	ldr	r3, [pc, #236]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	4b37      	ldr	r3, [pc, #220]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008668:	4a36      	ldr	r2, [pc, #216]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800866a:	f043 0304 	orr.w	r3, r3, #4
 800866e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008670:	4b34      	ldr	r3, [pc, #208]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867c:	2300      	movs	r3, #0
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	4b30      	ldr	r3, [pc, #192]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008684:	4a2f      	ldr	r2, [pc, #188]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	6313      	str	r3, [r2, #48]	@ 0x30
 800868c:	4b2d      	ldr	r3, [pc, #180]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800868e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	4b29      	ldr	r3, [pc, #164]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	4a28      	ldr	r2, [pc, #160]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 80086a2:	f043 0302 	orr.w	r3, r3, #2
 80086a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80086a8:	4b26      	ldr	r3, [pc, #152]	@ (8008744 <HAL_ETH_MspInit+0x15c>)
 80086aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80086b4:	2332      	movs	r3, #50	@ 0x32
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086c0:	2303      	movs	r3, #3
 80086c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086c4:	230b      	movs	r3, #11
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086cc:	4619      	mov	r1, r3
 80086ce:	481e      	ldr	r0, [pc, #120]	@ (8008748 <HAL_ETH_MspInit+0x160>)
 80086d0:	f7fb fb22 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80086d4:	2386      	movs	r3, #134	@ 0x86
 80086d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d8:	2302      	movs	r3, #2
 80086da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e0:	2303      	movs	r3, #3
 80086e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086e4:	230b      	movs	r3, #11
 80086e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ec:	4619      	mov	r1, r3
 80086ee:	4817      	ldr	r0, [pc, #92]	@ (800874c <HAL_ETH_MspInit+0x164>)
 80086f0:	f7fb fb12 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80086f4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fa:	2302      	movs	r3, #2
 80086fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008702:	2303      	movs	r3, #3
 8008704:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008706:	230b      	movs	r3, #11
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800870a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800870e:	4619      	mov	r1, r3
 8008710:	480f      	ldr	r0, [pc, #60]	@ (8008750 <HAL_ETH_MspInit+0x168>)
 8008712:	f7fb fb01 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	2105      	movs	r1, #5
 800871a:	203d      	movs	r0, #61	@ 0x3d
 800871c:	f7f9 ff36 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008720:	203d      	movs	r0, #61	@ 0x3d
 8008722:	f7f9 ff4f 	bl	80025c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008726:	2200      	movs	r2, #0
 8008728:	2105      	movs	r1, #5
 800872a:	203e      	movs	r0, #62	@ 0x3e
 800872c:	f7f9 ff2e 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008730:	203e      	movs	r0, #62	@ 0x3e
 8008732:	f7f9 ff47 	bl	80025c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008736:	bf00      	nop
 8008738:	3738      	adds	r7, #56	@ 0x38
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	40028000 	.word	0x40028000
 8008744:	40023800 	.word	0x40023800
 8008748:	40020800 	.word	0x40020800
 800874c:	40020000 	.word	0x40020000
 8008750:	40020400 	.word	0x40020400

08008754 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008758:	4802      	ldr	r0, [pc, #8]	@ (8008764 <ETH_PHY_IO_Init+0x10>)
 800875a:	f7fa fe5f 	bl	800341c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20008944 	.word	0x20008944

08008768 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return 0;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	68f9      	ldr	r1, [r7, #12]
 800878a:	4807      	ldr	r0, [pc, #28]	@ (80087a8 <ETH_PHY_IO_ReadReg+0x30>)
 800878c:	f7fa fca0 	bl	80030d0 <HAL_ETH_ReadPHYRegister>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	e000      	b.n	800879e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20008944 	.word	0x20008944

080087ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	68f9      	ldr	r1, [r7, #12]
 80087be:	4807      	ldr	r0, [pc, #28]	@ (80087dc <ETH_PHY_IO_WriteReg+0x30>)
 80087c0:	f7fa fcd1 	bl	8003166 <HAL_ETH_WritePHYRegister>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295
 80087ce:	e000      	b.n	80087d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20008944 	.word	0x20008944

080087e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087e4:	f7f9 fdea 	bl	80023bc <HAL_GetTick>
 80087e8:	4603      	mov	r3, r0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b0a0      	sub	sp, #128	@ 0x80
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80087f8:	f107 0308 	add.w	r3, r7, #8
 80087fc:	2264      	movs	r2, #100	@ 0x64
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f015 fe78 	bl	801e4f6 <memset>
  int32_t PHYLinkState = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800880e:	2300      	movs	r3, #0
 8008810:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008812:	2300      	movs	r3, #0
 8008814:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800881a:	483a      	ldr	r0, [pc, #232]	@ (8008904 <ethernet_link_thread+0x114>)
 800881c:	f7f9 fd10 	bl	8002240 <DP83848_GetLinkState>
 8008820:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8008822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008824:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008828:	089b      	lsrs	r3, r3, #2
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00c      	beq.n	800884e <ethernet_link_thread+0x5e>
 8008834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008836:	2b01      	cmp	r3, #1
 8008838:	dc09      	bgt.n	800884e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800883a:	4833      	ldr	r0, [pc, #204]	@ (8008908 <ethernet_link_thread+0x118>)
 800883c:	f7fa f900 	bl	8002a40 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008840:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008842:	f008 f889 	bl	8010958 <netif_set_down>
    netif_set_link_down(netif);
 8008846:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008848:	f008 f8f0 	bl	8010a2c <netif_set_link_down>
 800884c:	e055      	b.n	80088fa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800884e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008850:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d14e      	bne.n	80088fa <ethernet_link_thread+0x10a>
 800885c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800885e:	2b01      	cmp	r3, #1
 8008860:	dd4b      	ble.n	80088fa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008864:	3b02      	subs	r3, #2
 8008866:	2b03      	cmp	r3, #3
 8008868:	d82a      	bhi.n	80088c0 <ethernet_link_thread+0xd0>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <ethernet_link_thread+0x80>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008881 	.word	0x08008881
 8008874:	08008893 	.word	0x08008893
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088b3 	.word	0x080088b3
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008880:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008884:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008886:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800888a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008890:	e017      	b.n	80088c2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008892:	2300      	movs	r3, #0
 8008894:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008896:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800889a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800889c:	2301      	movs	r3, #1
 800889e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80088a0:	e00f      	b.n	80088c2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80088a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088a6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80088a8:	2300      	movs	r3, #0
 80088aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80088ac:	2301      	movs	r3, #1
 80088ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80088b0:	e007      	b.n	80088c2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80088b6:	2300      	movs	r3, #0
 80088b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80088ba:	2301      	movs	r3, #1
 80088bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80088be:	e000      	b.n	80088c2 <ethernet_link_thread+0xd2>
    default:
      break;
 80088c0:	bf00      	nop
    }

    if(linkchanged)
 80088c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d018      	beq.n	80088fa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	4619      	mov	r1, r3
 80088ce:	480e      	ldr	r0, [pc, #56]	@ (8008908 <ethernet_link_thread+0x118>)
 80088d0:	f7fa fc92 	bl	80031f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80088d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088d6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80088d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088da:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	4619      	mov	r1, r3
 80088e2:	4809      	ldr	r0, [pc, #36]	@ (8008908 <ethernet_link_thread+0x118>)
 80088e4:	f7fa fd7f 	bl	80033e6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80088e8:	4807      	ldr	r0, [pc, #28]	@ (8008908 <ethernet_link_thread+0x118>)
 80088ea:	f7fa f839 	bl	8002960 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80088ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088f0:	f007 ffc6 	bl	8010880 <netif_set_up>
      netif_set_link_up(netif);
 80088f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088f6:	f008 f861 	bl	80109bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80088fa:	2064      	movs	r0, #100	@ 0x64
 80088fc:	f000 fa36 	bl	8008d6c <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008900:	e78b      	b.n	800881a <ethernet_link_thread+0x2a>
 8008902:	bf00      	nop
 8008904:	20008a2c 	.word	0x20008a2c
 8008908:	20008944 	.word	0x20008944

0800890c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af02      	add	r7, sp, #8
 8008912:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008914:	4812      	ldr	r0, [pc, #72]	@ (8008960 <HAL_ETH_RxAllocateCallback+0x54>)
 8008916:	f007 fd1f 	bl	8010358 <memp_malloc_pool>
 800891a:	60f8      	str	r0, [r7, #12]
  if (p)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d014      	beq.n	800894c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f103 0220 	add.w	r2, r3, #32
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4a0d      	ldr	r2, [pc, #52]	@ (8008964 <HAL_ETH_RxAllocateCallback+0x58>)
 8008930:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800893a:	9201      	str	r2, [sp, #4]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2241      	movs	r2, #65	@ 0x41
 8008942:	2100      	movs	r1, #0
 8008944:	2000      	movs	r0, #0
 8008946:	f008 fa95 	bl	8010e74 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800894a:	e005      	b.n	8008958 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <HAL_ETH_RxAllocateCallback+0x5c>)
 800894e:	2201      	movs	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
}
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08025c90 	.word	0x08025c90
 8008964:	08008599 	.word	0x08008599
 8008968:	200087f8 	.word	0x200087f8

0800896c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800896c:	b480      	push	{r7}
 800896e:	b089      	sub	sp, #36	@ 0x24
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3b20      	subs	r3, #32
 800898a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	2200      	movs	r2, #0
 8008996:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	887a      	ldrh	r2, [r7, #2]
 800899c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d103      	bne.n	80089ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e003      	b.n	80089b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e009      	b.n	80089d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	891a      	ldrh	r2, [r3, #8]
 80089c8:	887b      	ldrh	r3, [r7, #2]
 80089ca:	4413      	add	r3, r2
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1f2      	bne.n	80089c4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	3724      	adds	r7, #36	@ 0x24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f008 fbf7 	bl	80111e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a1c:	7a5b      	ldrb	r3, [r3, #9]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d131      	bne.n	8008a88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a24:	4b1c      	ldr	r3, [pc, #112]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a26:	7a5b      	ldrb	r3, [r3, #9]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a32:	4b19      	ldr	r3, [pc, #100]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a34:	7a5b      	ldrb	r3, [r3, #9]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4a17      	ldr	r2, [pc, #92]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a42:	4b15      	ldr	r3, [pc, #84]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a44:	7a5b      	ldrb	r3, [r3, #9]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b13      	ldr	r3, [pc, #76]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a4c:	4413      	add	r3, r2
 8008a4e:	79fa      	ldrb	r2, [r7, #7]
 8008a50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a52:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a54:	7a5b      	ldrb	r3, [r3, #9]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	b2d1      	uxtb	r1, r2
 8008a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8008a98 <FATFS_LinkDriverEx+0x94>)
 8008a5e:	7251      	strb	r1, [r2, #9]
 8008a60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a62:	7dbb      	ldrb	r3, [r7, #22]
 8008a64:	3330      	adds	r3, #48	@ 0x30
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	223a      	movs	r2, #58	@ 0x3a
 8008a72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3302      	adds	r3, #2
 8008a78:	222f      	movs	r2, #47	@ 0x2f
 8008a7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	3303      	adds	r3, #3
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20008a4c 	.word	0x20008a4c

08008a9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff ffaa 	bl	8008a04 <FATFS_LinkDriverEx>
 8008ab0:	4603      	mov	r3, r0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <__NVIC_SetPriority>:
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	db0a      	blt.n	8008ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	490c      	ldr	r1, [pc, #48]	@ (8008b08 <__NVIC_SetPriority+0x4c>)
 8008ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ada:	0112      	lsls	r2, r2, #4
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	440b      	add	r3, r1
 8008ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008ae4:	e00a      	b.n	8008afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4908      	ldr	r1, [pc, #32]	@ (8008b0c <__NVIC_SetPriority+0x50>)
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	3b04      	subs	r3, #4
 8008af4:	0112      	lsls	r2, r2, #4
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	440b      	add	r3, r1
 8008afa:	761a      	strb	r2, [r3, #24]
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	e000e100 	.word	0xe000e100
 8008b0c:	e000ed00 	.word	0xe000ed00

08008b10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b14:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <SysTick_Handler+0x1c>)
 8008b16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b18:	f002 feb4 	bl	800b884 <xTaskGetSchedulerState>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d001      	beq.n	8008b26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b22:	f003 fda9 	bl	800c678 <xPortSysTickHandler>
  }
}
 8008b26:	bf00      	nop
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	e000e010 	.word	0xe000e010

08008b30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b34:	2100      	movs	r1, #0
 8008b36:	f06f 0004 	mvn.w	r0, #4
 8008b3a:	f7ff ffbf 	bl	8008abc <__NVIC_SetPriority>
#endif
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b4a:	f3ef 8305 	mrs	r3, IPSR
 8008b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8008b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b56:	f06f 0305 	mvn.w	r3, #5
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	e00c      	b.n	8008b78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <osKernelInitialize+0x44>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b66:	4b08      	ldr	r3, [pc, #32]	@ (8008b88 <osKernelInitialize+0x44>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	607b      	str	r3, [r7, #4]
 8008b70:	e002      	b.n	8008b78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b78:	687b      	ldr	r3, [r7, #4]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20008a58 	.word	0x20008a58

08008b8c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8008b92:	f002 fe77 	bl	800b884 <xTaskGetSchedulerState>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <osKernelGetState+0x1a>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d105      	bne.n	8008bac <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	607b      	str	r3, [r7, #4]
      break;
 8008ba4:	e00c      	b.n	8008bc0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	607b      	str	r3, [r7, #4]
      break;
 8008baa:	e009      	b.n	8008bc0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008bac:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <osKernelGetState+0x40>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d102      	bne.n	8008bba <osKernelGetState+0x2e>
        state = osKernelReady;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008bb8:	e001      	b.n	8008bbe <osKernelGetState+0x32>
        state = osKernelInactive;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
      break;
 8008bbe:	bf00      	nop
  }

  return (state);
 8008bc0:	687b      	ldr	r3, [r7, #4]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20008a58 	.word	0x20008a58

08008bd0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bd6:	f3ef 8305 	mrs	r3, IPSR
 8008bda:	603b      	str	r3, [r7, #0]
  return(result);
 8008bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <osKernelStart+0x1a>
    stat = osErrorISR;
 8008be2:	f06f 0305 	mvn.w	r3, #5
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	e010      	b.n	8008c0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008bea:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <osKernelStart+0x48>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d109      	bne.n	8008c06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bf2:	f7ff ff9d 	bl	8008b30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bf6:	4b08      	ldr	r3, [pc, #32]	@ (8008c18 <osKernelStart+0x48>)
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bfc:	f002 f9a0 	bl	800af40 <vTaskStartScheduler>
      stat = osOK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	e002      	b.n	8008c0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c0c:	687b      	ldr	r3, [r7, #4]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20008a58 	.word	0x20008a58

08008c1c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c22:	f3ef 8305 	mrs	r3, IPSR
 8008c26:	603b      	str	r3, [r7, #0]
  return(result);
 8008c28:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008c2e:	f002 fab5 	bl	800b19c <xTaskGetTickCountFromISR>
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	e002      	b.n	8008c3c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008c36:	f002 faa1 	bl	800b17c <xTaskGetTickCount>
 8008c3a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008c3c:	687b      	ldr	r3, [r7, #4]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b08e      	sub	sp, #56	@ 0x38
 8008c4a:	af04      	add	r7, sp, #16
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c56:	f3ef 8305 	mrs	r3, IPSR
 8008c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c5c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d17f      	bne.n	8008d62 <osThreadNew+0x11c>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d07c      	beq.n	8008d62 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c6e:	2318      	movs	r3, #24
 8008c70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c76:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d045      	beq.n	8008d0e <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <osThreadNew+0x4a>
        name = attr->name;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <osThreadNew+0x70>
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b38      	cmp	r3, #56	@ 0x38
 8008ca8:	d805      	bhi.n	8008cb6 <osThreadNew+0x70>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <osThreadNew+0x74>
        return (NULL);
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e054      	b.n	8008d64 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00e      	beq.n	8008cf0 <osThreadNew+0xaa>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	2bab      	cmp	r3, #171	@ 0xab
 8008cd8:	d90a      	bls.n	8008cf0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d006      	beq.n	8008cf0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <osThreadNew+0xaa>
        mem = 1;
 8008cea:	2301      	movs	r3, #1
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	e010      	b.n	8008d12 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10c      	bne.n	8008d12 <osThreadNew+0xcc>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d108      	bne.n	8008d12 <osThreadNew+0xcc>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <osThreadNew+0xcc>
          mem = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	e001      	b.n	8008d12 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d110      	bne.n	8008d3a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d20:	9202      	str	r2, [sp, #8]
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6a3a      	ldr	r2, [r7, #32]
 8008d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f001 fe08 	bl	800a944 <xTaskCreateStatic>
 8008d34:	4603      	mov	r3, r0
 8008d36:	613b      	str	r3, [r7, #16]
 8008d38:	e013      	b.n	8008d62 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d110      	bne.n	8008d62 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f001 fe56 	bl	800aa04 <xTaskCreate>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d001      	beq.n	8008d62 <osThreadNew+0x11c>
            hTask = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d62:	693b      	ldr	r3, [r7, #16]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	@ 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d74:	f3ef 8305 	mrs	r3, IPSR
 8008d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <osDelay+0x1c>
    stat = osErrorISR;
 8008d80:	f06f 0305 	mvn.w	r3, #5
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	e007      	b.n	8008d98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 ff96 	bl	800acc4 <vTaskDelay>
    }
  }

  return (stat);
 8008d98:	68fb      	ldr	r3, [r7, #12]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d174      	bne.n	8008ea4 <osMutexNew+0x102>
    if (attr != NULL) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	e001      	b.n	8008dcc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <osMutexNew+0x3a>
      rmtx = 1U;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e001      	b.n	8008de0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d15c      	bne.n	8008ea4 <osMutexNew+0x102>
      mem = -1;
 8008dea:	f04f 33ff 	mov.w	r3, #4294967295
 8008dee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d015      	beq.n	8008e22 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <osMutexNew+0x6a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	2b4f      	cmp	r3, #79	@ 0x4f
 8008e04:	d902      	bls.n	8008e0c <osMutexNew+0x6a>
          mem = 1;
 8008e06:	2301      	movs	r3, #1
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	e00c      	b.n	8008e26 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d108      	bne.n	8008e26 <osMutexNew+0x84>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <osMutexNew+0x84>
            mem = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	e001      	b.n	8008e26 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d112      	bne.n	8008e52 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d007      	beq.n	8008e42 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	4619      	mov	r1, r3
 8008e38:	2004      	movs	r0, #4
 8008e3a:	f000 fdd8 	bl	80099ee <xQueueCreateMutexStatic>
 8008e3e:	61f8      	str	r0, [r7, #28]
 8008e40:	e016      	b.n	8008e70 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	4619      	mov	r1, r3
 8008e48:	2001      	movs	r0, #1
 8008e4a:	f000 fdd0 	bl	80099ee <xQueueCreateMutexStatic>
 8008e4e:	61f8      	str	r0, [r7, #28]
 8008e50:	e00e      	b.n	8008e70 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e5e:	2004      	movs	r0, #4
 8008e60:	f000 fdad 	bl	80099be <xQueueCreateMutex>
 8008e64:	61f8      	str	r0, [r7, #28]
 8008e66:	e003      	b.n	8008e70 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f000 fda8 	bl	80099be <xQueueCreateMutex>
 8008e6e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00c      	beq.n	8008e90 <osMutexNew+0xee>
        if (attr != NULL) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <osMutexNew+0xe2>
          name = attr->name;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e001      	b.n	8008e88 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e88:	68f9      	ldr	r1, [r7, #12]
 8008e8a:	69f8      	ldr	r0, [r7, #28]
 8008e8c:	f001 fcd2 	bl	800a834 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <osMutexNew+0x102>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ecc:	f3ef 8305 	mrs	r3, IPSR
 8008ed0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ed2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008ed8:	f06f 0305 	mvn.w	r3, #5
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e02c      	b.n	8008f3a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ee6:	f06f 0303 	mvn.w	r3, #3
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	e025      	b.n	8008f3a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d011      	beq.n	8008f18 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6938      	ldr	r0, [r7, #16]
 8008ef8:	f000 fdc9 	bl	8009a8e <xQueueTakeMutexRecursive>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d01b      	beq.n	8008f3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008f08:	f06f 0301 	mvn.w	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	e014      	b.n	8008f3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f10:	f06f 0302 	mvn.w	r3, #2
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	e010      	b.n	8008f3a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f001 f96e 	bl	800a1fc <xQueueSemaphoreTake>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d009      	beq.n	8008f3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008f2c:	f06f 0301 	mvn.w	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e002      	b.n	8008f3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f34:	f06f 0302 	mvn.w	r3, #2
 8008f38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008f3a:	697b      	ldr	r3, [r7, #20]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f60:	f3ef 8305 	mrs	r3, IPSR
 8008f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f66:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008f6c:	f06f 0305 	mvn.w	r3, #5
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e01f      	b.n	8008fb4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d103      	bne.n	8008f82 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008f7a:	f06f 0303 	mvn.w	r3, #3
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	e018      	b.n	8008fb4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f88:	6938      	ldr	r0, [r7, #16]
 8008f8a:	f000 fd4b 	bl	8009a24 <xQueueGiveMutexRecursive>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d00f      	beq.n	8008fb4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008f94:	f06f 0302 	mvn.w	r3, #2
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e00b      	b.n	8008fb4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6938      	ldr	r0, [r7, #16]
 8008fa4:	f000 fe18 	bl	8009bd8 <xQueueGenericSend>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d002      	beq.n	8008fb4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008fae:	f06f 0302 	mvn.w	r3, #2
 8008fb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008fb4:	697b      	ldr	r3, [r7, #20]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b08a      	sub	sp, #40	@ 0x28
 8008fc2:	af02      	add	r7, sp, #8
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8008fd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d175      	bne.n	80090c6 <osSemaphoreNew+0x108>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d072      	beq.n	80090c6 <osSemaphoreNew+0x108>
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d86e      	bhi.n	80090c6 <osSemaphoreNew+0x108>
    mem = -1;
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d015      	beq.n	8009020 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <osSemaphoreNew+0x4c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b4f      	cmp	r3, #79	@ 0x4f
 8009002:	d902      	bls.n	800900a <osSemaphoreNew+0x4c>
        mem = 1;
 8009004:	2301      	movs	r3, #1
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e00c      	b.n	8009024 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d108      	bne.n	8009024 <osSemaphoreNew+0x66>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <osSemaphoreNew+0x66>
          mem = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e001      	b.n	8009024 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902a:	d04c      	beq.n	80090c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d128      	bne.n	8009084 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d10a      	bne.n	800904e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2203      	movs	r2, #3
 800903e:	9200      	str	r2, [sp, #0]
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	2001      	movs	r0, #1
 8009046:	f000 fbc5 	bl	80097d4 <xQueueGenericCreateStatic>
 800904a:	61f8      	str	r0, [r7, #28]
 800904c:	e005      	b.n	800905a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800904e:	2203      	movs	r2, #3
 8009050:	2100      	movs	r1, #0
 8009052:	2001      	movs	r0, #1
 8009054:	f000 fc3b 	bl	80098ce <xQueueGenericCreate>
 8009058:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d022      	beq.n	80090a6 <osSemaphoreNew+0xe8>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01f      	beq.n	80090a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009066:	2300      	movs	r3, #0
 8009068:	2200      	movs	r2, #0
 800906a:	2100      	movs	r1, #0
 800906c:	69f8      	ldr	r0, [r7, #28]
 800906e:	f000 fdb3 	bl	8009bd8 <xQueueGenericSend>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d016      	beq.n	80090a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009078:	69f8      	ldr	r0, [r7, #28]
 800907a:	f001 fa8f 	bl	800a59c <vQueueDelete>
            hSemaphore = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	e010      	b.n	80090a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d108      	bne.n	800909c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	461a      	mov	r2, r3
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fd32 	bl	8009afc <xQueueCreateCountingSemaphoreStatic>
 8009098:	61f8      	str	r0, [r7, #28]
 800909a:	e004      	b.n	80090a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 fd65 	bl	8009b6e <xQueueCreateCountingSemaphore>
 80090a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e001      	b.n	80090be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	69f8      	ldr	r0, [r7, #28]
 80090c2:	f001 fbb7 	bl	800a834 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80090c6:	69fb      	ldr	r3, [r7, #28]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80090e8:	f06f 0303 	mvn.w	r3, #3
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e039      	b.n	8009164 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f0:	f3ef 8305 	mrs	r3, IPSR
 80090f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80090f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d022      	beq.n	8009142 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009102:	f06f 0303 	mvn.w	r3, #3
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e02c      	b.n	8009164 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800910e:	f107 0308 	add.w	r3, r7, #8
 8009112:	461a      	mov	r2, r3
 8009114:	2100      	movs	r1, #0
 8009116:	6938      	ldr	r0, [r7, #16]
 8009118:	f001 f980 	bl	800a41c <xQueueReceiveFromISR>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d003      	beq.n	800912a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009122:	f06f 0302 	mvn.w	r3, #2
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e01c      	b.n	8009164 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d019      	beq.n	8009164 <osSemaphoreAcquire+0x94>
 8009130:	4b0f      	ldr	r3, [pc, #60]	@ (8009170 <osSemaphoreAcquire+0xa0>)
 8009132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	e010      	b.n	8009164 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6938      	ldr	r0, [r7, #16]
 8009146:	f001 f859 	bl	800a1fc <xQueueSemaphoreTake>
 800914a:	4603      	mov	r3, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d009      	beq.n	8009164 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009156:	f06f 0301 	mvn.w	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e002      	b.n	8009164 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800915e:	f06f 0302 	mvn.w	r3, #2
 8009162:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009164:	697b      	ldr	r3, [r7, #20]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800918a:	f06f 0303 	mvn.w	r3, #3
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	e02c      	b.n	80091ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009192:	f3ef 8305 	mrs	r3, IPSR
 8009196:	60fb      	str	r3, [r7, #12]
  return(result);
 8009198:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01a      	beq.n	80091d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800919e:	2300      	movs	r3, #0
 80091a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	4619      	mov	r1, r3
 80091a8:	6938      	ldr	r0, [r7, #16]
 80091aa:	f000 feb5 	bl	8009f18 <xQueueGiveFromISR>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d003      	beq.n	80091bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80091b4:	f06f 0302 	mvn.w	r3, #2
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e017      	b.n	80091ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d014      	beq.n	80091ec <osSemaphoreRelease+0x78>
 80091c2:	4b0d      	ldr	r3, [pc, #52]	@ (80091f8 <osSemaphoreRelease+0x84>)
 80091c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	e00b      	b.n	80091ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 fcfc 	bl	8009bd8 <xQueueGenericSend>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d002      	beq.n	80091ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80091e6:	f06f 0302 	mvn.w	r3, #2
 80091ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80091ec:	697b      	ldr	r3, [r7, #20]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009208:	f3ef 8305 	mrs	r3, IPSR
 800920c:	60fb      	str	r3, [r7, #12]
  return(result);
 800920e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009214:	f06f 0305 	mvn.w	r3, #5
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	e00e      	b.n	800923a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d103      	bne.n	800922a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009222:	f06f 0303 	mvn.w	r3, #3
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e007      	b.n	800923a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800922a:	6938      	ldr	r0, [r7, #16]
 800922c:	f001 fb2c 	bl	800a888 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009234:	6938      	ldr	r0, [r7, #16]
 8009236:	f001 f9b1 	bl	800a59c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800923a:	697b      	ldr	r3, [r7, #20]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	@ 0x28
 8009248:	af02      	add	r7, sp, #8
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009254:	f3ef 8305 	mrs	r3, IPSR
 8009258:	613b      	str	r3, [r7, #16]
  return(result);
 800925a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800925c:	2b00      	cmp	r3, #0
 800925e:	d15f      	bne.n	8009320 <osMessageQueueNew+0xdc>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d05c      	beq.n	8009320 <osMessageQueueNew+0xdc>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d059      	beq.n	8009320 <osMessageQueueNew+0xdc>
    mem = -1;
 800926c:	f04f 33ff 	mov.w	r3, #4294967295
 8009270:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d029      	beq.n	80092cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <osMessageQueueNew+0x62>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	2b4f      	cmp	r3, #79	@ 0x4f
 8009286:	d90e      	bls.n	80092a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695a      	ldr	r2, [r3, #20]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	429a      	cmp	r2, r3
 800929e:	d302      	bcc.n	80092a6 <osMessageQueueNew+0x62>
        mem = 1;
 80092a0:	2301      	movs	r3, #1
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	e014      	b.n	80092d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <osMessageQueueNew+0x8c>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10c      	bne.n	80092d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d108      	bne.n	80092d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	e001      	b.n	80092d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d10b      	bne.n	80092ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	2100      	movs	r1, #0
 80092e0:	9100      	str	r1, [sp, #0]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fa75 	bl	80097d4 <xQueueGenericCreateStatic>
 80092ea:	61f8      	str	r0, [r7, #28]
 80092ec:	e008      	b.n	8009300 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80092f4:	2200      	movs	r2, #0
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fae8 	bl	80098ce <xQueueGenericCreate>
 80092fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00c      	beq.n	8009320 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <osMessageQueueNew+0xd0>
        name = attr->name;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e001      	b.n	8009318 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009318:	6979      	ldr	r1, [r7, #20]
 800931a:	69f8      	ldr	r0, [r7, #28]
 800931c:	f001 fa8a 	bl	800a834 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009320:	69fb      	ldr	r3, [r7, #28]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	4613      	mov	r3, r2
 800933a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009344:	f3ef 8305 	mrs	r3, IPSR
 8009348:	617b      	str	r3, [r7, #20]
  return(result);
 800934a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800934c:	2b00      	cmp	r3, #0
 800934e:	d028      	beq.n	80093a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <osMessageQueuePut+0x36>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <osMessageQueuePut+0x36>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009362:	f06f 0303 	mvn.w	r3, #3
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e038      	b.n	80093dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800936e:	f107 0210 	add.w	r2, r7, #16
 8009372:	2300      	movs	r3, #0
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	69b8      	ldr	r0, [r7, #24]
 8009378:	f000 fd30 	bl	8009ddc <xQueueGenericSendFromISR>
 800937c:	4603      	mov	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d003      	beq.n	800938a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009382:	f06f 0302 	mvn.w	r3, #2
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	e028      	b.n	80093dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d025      	beq.n	80093dc <osMessageQueuePut+0xb0>
 8009390:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <osMessageQueuePut+0xbc>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	e01c      	b.n	80093dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <osMessageQueuePut+0x82>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d103      	bne.n	80093b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80093ae:	f06f 0303 	mvn.w	r3, #3
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	e012      	b.n	80093dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093b6:	2300      	movs	r3, #0
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	69b8      	ldr	r0, [r7, #24]
 80093be:	f000 fc0b 	bl	8009bd8 <xQueueGenericSend>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d009      	beq.n	80093dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80093ce:	f06f 0301 	mvn.w	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
 80093d4:	e002      	b.n	80093dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80093d6:	f06f 0302 	mvn.w	r3, #2
 80093da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80093dc:	69fb      	ldr	r3, [r7, #28]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000ed04 	.word	0xe000ed04

080093ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009402:	f3ef 8305 	mrs	r3, IPSR
 8009406:	617b      	str	r3, [r7, #20]
  return(result);
 8009408:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800940a:	2b00      	cmp	r3, #0
 800940c:	d028      	beq.n	8009460 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <osMessageQueueGet+0x34>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <osMessageQueueGet+0x34>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009420:	f06f 0303 	mvn.w	r3, #3
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	e037      	b.n	8009498 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800942c:	f107 0310 	add.w	r3, r7, #16
 8009430:	461a      	mov	r2, r3
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	69b8      	ldr	r0, [r7, #24]
 8009436:	f000 fff1 	bl	800a41c <xQueueReceiveFromISR>
 800943a:	4603      	mov	r3, r0
 800943c:	2b01      	cmp	r3, #1
 800943e:	d003      	beq.n	8009448 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009440:	f06f 0302 	mvn.w	r3, #2
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	e027      	b.n	8009498 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d024      	beq.n	8009498 <osMessageQueueGet+0xac>
 800944e:	4b15      	ldr	r3, [pc, #84]	@ (80094a4 <osMessageQueueGet+0xb8>)
 8009450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	e01b      	b.n	8009498 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <osMessageQueueGet+0x80>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800946c:	f06f 0303 	mvn.w	r3, #3
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e011      	b.n	8009498 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	69b8      	ldr	r0, [r7, #24]
 800947a:	f000 fddd 	bl	800a038 <xQueueReceive>
 800947e:	4603      	mov	r3, r0
 8009480:	2b01      	cmp	r3, #1
 8009482:	d009      	beq.n	8009498 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800948a:	f06f 0301 	mvn.w	r3, #1
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e002      	b.n	8009498 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009492:	f06f 0302 	mvn.w	r3, #2
 8009496:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009498:	69fb      	ldr	r3, [r7, #28]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3720      	adds	r7, #32
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	e000ed04 	.word	0xe000ed04

080094a8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d102      	bne.n	80094c0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	e00e      	b.n	80094de <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c0:	f3ef 8305 	mrs	r3, IPSR
 80094c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80094c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80094cc:	6938      	ldr	r0, [r7, #16]
 80094ce:	f001 f846 	bl	800a55e <uxQueueMessagesWaitingFromISR>
 80094d2:	6178      	str	r0, [r7, #20]
 80094d4:	e003      	b.n	80094de <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80094d6:	6938      	ldr	r0, [r7, #16]
 80094d8:	f001 f822 	bl	800a520 <uxQueueMessagesWaiting>
 80094dc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80094de:	697b      	ldr	r3, [r7, #20]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f4:	f3ef 8305 	mrs	r3, IPSR
 80094f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8009500:	f06f 0305 	mvn.w	r3, #5
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e00e      	b.n	8009526 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800950e:	f06f 0303 	mvn.w	r3, #3
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e007      	b.n	8009526 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009516:	6938      	ldr	r0, [r7, #16]
 8009518:	f001 f9b6 	bl	800a888 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8009520:	6938      	ldr	r0, [r7, #16]
 8009522:	f001 f83b 	bl	800a59c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009526:	697b      	ldr	r3, [r7, #20]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a07      	ldr	r2, [pc, #28]	@ (800955c <vApplicationGetIdleTaskMemory+0x2c>)
 8009540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4a06      	ldr	r2, [pc, #24]	@ (8009560 <vApplicationGetIdleTaskMemory+0x30>)
 8009546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800954e:	601a      	str	r2, [r3, #0]
}
 8009550:	bf00      	nop
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20008a5c 	.word	0x20008a5c
 8009560:	20008b08 	.word	0x20008b08

08009564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a07      	ldr	r2, [pc, #28]	@ (8009590 <vApplicationGetTimerTaskMemory+0x2c>)
 8009574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4a06      	ldr	r2, [pc, #24]	@ (8009594 <vApplicationGetTimerTaskMemory+0x30>)
 800957a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20009308 	.word	0x20009308
 8009594:	200093b4 	.word	0x200093b4

08009598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f103 0208 	add.w	r2, r3, #8
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f103 0208 	add.w	r2, r3, #8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f103 0208 	add.w	r2, r3, #8
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d103      	bne.n	800965a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e00c      	b.n	8009674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3308      	adds	r3, #8
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e002      	b.n	8009668 <vListInsert+0x2e>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d2f6      	bcs.n	8009662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	601a      	str	r2, [r3, #0]
}
 80096a0:	bf00      	nop
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6892      	ldr	r2, [r2, #8]
 80096c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6852      	ldr	r2, [r2, #4]
 80096cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d103      	bne.n	80096e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10b      	bne.n	800972c <xQueueGenericReset+0x2c>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60bb      	str	r3, [r7, #8]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800972c:	f002 ff14 	bl	800c558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009738:	68f9      	ldr	r1, [r7, #12]
 800973a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800973c:	fb01 f303 	mul.w	r3, r1, r3
 8009740:	441a      	add	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975c:	3b01      	subs	r3, #1
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009762:	fb01 f303 	mul.w	r3, r1, r3
 8009766:	441a      	add	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	22ff      	movs	r2, #255	@ 0xff
 8009770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	22ff      	movs	r2, #255	@ 0xff
 8009778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d114      	bne.n	80097ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01a      	beq.n	80097c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3310      	adds	r3, #16
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fea2 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d012      	beq.n	80097c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800979a:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <xQueueGenericReset+0xd0>)
 800979c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	e009      	b.n	80097c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3310      	adds	r3, #16
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fef1 	bl	8009598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3324      	adds	r3, #36	@ 0x24
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff feec 	bl	8009598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80097c0:	f002 fefc 	bl	800c5bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097c4:	2301      	movs	r3, #1
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08e      	sub	sp, #56	@ 0x38
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10b      	bne.n	8009800 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
 80097fe:	e7fd      	b.n	80097fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10b      	bne.n	800981e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <xQueueGenericCreateStatic+0x56>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <xQueueGenericCreateStatic+0x5a>
 800982a:	2301      	movs	r3, #1
 800982c:	e000      	b.n	8009830 <xQueueGenericCreateStatic+0x5c>
 800982e:	2300      	movs	r3, #0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10b      	bne.n	800984c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	623b      	str	r3, [r7, #32]
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <xQueueGenericCreateStatic+0x84>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <xQueueGenericCreateStatic+0x88>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <xQueueGenericCreateStatic+0x8a>
 800985c:	2300      	movs	r3, #0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61fb      	str	r3, [r7, #28]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800987a:	2350      	movs	r3, #80	@ 0x50
 800987c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b50      	cmp	r3, #80	@ 0x50
 8009882:	d00b      	beq.n	800989c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	61bb      	str	r3, [r7, #24]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800989c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80098a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80098a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f840 	bl	8009944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3730      	adds	r7, #48	@ 0x30
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b08a      	sub	sp, #40	@ 0x28
 80098d2:	af02      	add	r7, sp, #8
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	4613      	mov	r3, r2
 80098da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	613b      	str	r3, [r7, #16]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	fb02 f303 	mul.w	r3, r2, r3
 8009902:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	3350      	adds	r3, #80	@ 0x50
 8009908:	4618      	mov	r0, r3
 800990a:	f002 ff47 	bl	800c79c <pvPortMalloc>
 800990e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	3350      	adds	r3, #80	@ 0x50
 800991e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009928:	79fa      	ldrb	r2, [r7, #7]
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4613      	mov	r3, r2
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f805 	bl	8009944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800993a:	69bb      	ldr	r3, [r7, #24]
	}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e002      	b.n	8009966 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009972:	2101      	movs	r1, #1
 8009974:	69b8      	ldr	r0, [r7, #24]
 8009976:	f7ff fec3 	bl	8009700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00e      	beq.n	80099b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80099aa:	2300      	movs	r3, #0
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f911 	bl	8009bd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	4603      	mov	r3, r0
 80099c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	461a      	mov	r2, r3
 80099d4:	6939      	ldr	r1, [r7, #16]
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	f7ff ff79 	bl	80098ce <xQueueGenericCreate>
 80099dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7ff ffd3 	bl	800998a <prvInitialiseMutex>

		return xNewQueue;
 80099e4:	68fb      	ldr	r3, [r7, #12]
	}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b088      	sub	sp, #32
 80099f2:	af02      	add	r7, sp, #8
 80099f4:	4603      	mov	r3, r0
 80099f6:	6039      	str	r1, [r7, #0]
 80099f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099fa:	2301      	movs	r3, #1
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	2300      	movs	r3, #0
 8009a00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	6939      	ldr	r1, [r7, #16]
 8009a0c:	6978      	ldr	r0, [r7, #20]
 8009a0e:	f7ff fee1 	bl	80097d4 <xQueueGenericCreateStatic>
 8009a12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f7ff ffb8 	bl	800998a <prvInitialiseMutex>

		return xNewQueue;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60fb      	str	r3, [r7, #12]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	689c      	ldr	r4, [r3, #8]
 8009a52:	f001 ff07 	bl	800b864 <xTaskGetCurrentTaskHandle>
 8009a56:	4603      	mov	r3, r0
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	d111      	bne.n	8009a80 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	1e5a      	subs	r2, r3, #1
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2200      	movs	r2, #0
 8009a72:	2100      	movs	r1, #0
 8009a74:	6938      	ldr	r0, [r7, #16]
 8009a76:	f000 f8af 	bl	8009bd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e001      	b.n	8009a84 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009a84:	697b      	ldr	r3, [r7, #20]
	}
 8009a86:	4618      	mov	r0, r3
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd90      	pop	{r4, r7, pc}

08009a8e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009a8e:	b590      	push	{r4, r7, lr}
 8009a90:	b087      	sub	sp, #28
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60fb      	str	r3, [r7, #12]
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	689c      	ldr	r4, [r3, #8]
 8009abe:	f001 fed1 	bl	800b864 <xTaskGetCurrentTaskHandle>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	d107      	bne.n	8009ad8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	e00c      	b.n	8009af2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f000 fb8e 	bl	800a1fc <xQueueSemaphoreTake>
 8009ae0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d004      	beq.n	8009af2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009af2:	697b      	ldr	r3, [r7, #20]
	}
 8009af4:	4618      	mov	r0, r3
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	@ 0x28
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	61bb      	str	r3, [r7, #24]
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	e7fd      	b.n	8009b22 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90b      	bls.n	8009b46 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	617b      	str	r3, [r7, #20]
}
 8009b40:	bf00      	nop
 8009b42:	bf00      	nop
 8009b44:	e7fd      	b.n	8009b42 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b46:	2302      	movs	r3, #2
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff fe3f 	bl	80097d4 <xQueueGenericCreateStatic>
 8009b56:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b64:	69fb      	ldr	r3, [r7, #28]
	}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	613b      	str	r3, [r7, #16]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d90b      	bls.n	8009bb6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	60fb      	str	r3, [r7, #12]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fe87 	bl	80098ce <xQueueGenericCreate>
 8009bc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bce:	697b      	ldr	r3, [r7, #20]
	}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08e      	sub	sp, #56	@ 0x38
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009be6:	2300      	movs	r3, #0
 8009be8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <xQueueGenericSend+0x34>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <xQueueGenericSend+0x42>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <xQueueGenericSend+0x46>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e000      	b.n	8009c20 <xQueueGenericSend+0x48>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10b      	bne.n	8009c3c <xQueueGenericSend+0x64>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d103      	bne.n	8009c4a <xQueueGenericSend+0x72>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <xQueueGenericSend+0x76>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <xQueueGenericSend+0x78>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10b      	bne.n	8009c6c <xQueueGenericSend+0x94>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	623b      	str	r3, [r7, #32]
}
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	e7fd      	b.n	8009c68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c6c:	f001 fe0a 	bl	800b884 <xTaskGetSchedulerState>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d102      	bne.n	8009c7c <xQueueGenericSend+0xa4>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <xQueueGenericSend+0xa8>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e000      	b.n	8009c82 <xQueueGenericSend+0xaa>
 8009c80:	2300      	movs	r3, #0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10b      	bne.n	8009c9e <xQueueGenericSend+0xc6>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	61fb      	str	r3, [r7, #28]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c9e:	f002 fc5b 	bl	800c558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d302      	bcc.n	8009cb4 <xQueueGenericSend+0xdc>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d129      	bne.n	8009d08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cba:	f000 fcab 	bl	800a614 <prvCopyDataToQueue>
 8009cbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d010      	beq.n	8009cea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	3324      	adds	r3, #36	@ 0x24
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fc03 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d013      	beq.n	8009d00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8009dd8 <xQueueGenericSend+0x200>)
 8009cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	e00a      	b.n	8009d00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cf0:	4b39      	ldr	r3, [pc, #228]	@ (8009dd8 <xQueueGenericSend+0x200>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d00:	f002 fc5c 	bl	800c5bc <vPortExitCritical>
				return pdPASS;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e063      	b.n	8009dd0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d103      	bne.n	8009d16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d0e:	f002 fc55 	bl	800c5bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e05c      	b.n	8009dd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d1c:	f107 0314 	add.w	r3, r7, #20
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 fc3d 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d26:	2301      	movs	r3, #1
 8009d28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d2a:	f002 fc47 	bl	800c5bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d2e:	f001 f979 	bl	800b024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d32:	f002 fc11 	bl	800c558 <vPortEnterCritical>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d3c:	b25b      	sxtb	r3, r3
 8009d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d42:	d103      	bne.n	8009d4c <xQueueGenericSend+0x174>
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d103      	bne.n	8009d62 <xQueueGenericSend+0x18a>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d62:	f002 fc2b 	bl	800c5bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d66:	1d3a      	adds	r2, r7, #4
 8009d68:	f107 0314 	add.w	r3, r7, #20
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 fc2c 	bl	800b5cc <xTaskCheckForTimeOut>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d124      	bne.n	8009dc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d7c:	f000 fd42 	bl	800a804 <prvIsQueueFull>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d018      	beq.n	8009db8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	3310      	adds	r3, #16
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 fb50 	bl	800b434 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d96:	f000 fccd 	bl	800a734 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d9a:	f001 f951 	bl	800b040 <xTaskResumeAll>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f47f af7c 	bne.w	8009c9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009da6:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd8 <xQueueGenericSend+0x200>)
 8009da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	e772      	b.n	8009c9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dba:	f000 fcbb 	bl	800a734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dbe:	f001 f93f 	bl	800b040 <xTaskResumeAll>
 8009dc2:	e76c      	b.n	8009c9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dc6:	f000 fcb5 	bl	800a734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dca:	f001 f939 	bl	800b040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3738      	adds	r7, #56	@ 0x38
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b090      	sub	sp, #64	@ 0x40
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d103      	bne.n	8009e1a <xQueueGenericSendFromISR+0x3e>
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <xQueueGenericSendFromISR+0x42>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <xQueueGenericSendFromISR+0x44>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10b      	bne.n	8009e3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
 8009e3a:	e7fd      	b.n	8009e38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d103      	bne.n	8009e4a <xQueueGenericSendFromISR+0x6e>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <xQueueGenericSendFromISR+0x72>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <xQueueGenericSendFromISR+0x74>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	623b      	str	r3, [r7, #32]
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e6c:	f002 fc54 	bl	800c718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e70:	f3ef 8211 	mrs	r2, BASEPRI
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	61fa      	str	r2, [r7, #28]
 8009e86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d302      	bcc.n	8009e9e <xQueueGenericSendFromISR+0xc2>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d12f      	bne.n	8009efe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ea4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009eb4:	f000 fbae 	bl	800a614 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009eb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec0:	d112      	bne.n	8009ee8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d016      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	3324      	adds	r3, #36	@ 0x24
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 fb02 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00e      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e007      	b.n	8009ef8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009eec:	3301      	adds	r3, #1
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	b25a      	sxtb	r2, r3
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009efc:	e001      	b.n	8009f02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3740      	adds	r7, #64	@ 0x40
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	@ 0x38
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10b      	bne.n	8009f44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	61fb      	str	r3, [r7, #28]
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	e7fd      	b.n	8009f60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d103      	bne.n	8009f74 <xQueueGiveFromISR+0x5c>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <xQueueGiveFromISR+0x60>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e000      	b.n	8009f7a <xQueueGiveFromISR+0x62>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	61bb      	str	r3, [r7, #24]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f96:	f002 fbbf 	bl	800c718 <vPortValidateInterruptPriority>
	__asm volatile
 8009f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	617a      	str	r2, [r7, #20]
 8009fb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009fb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d22b      	bcs.n	800a01e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d112      	bne.n	800a008 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d016      	beq.n	800a018 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fec:	3324      	adds	r3, #36	@ 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 fa72 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00e      	beq.n	800a018 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2201      	movs	r2, #1
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	e007      	b.n	800a018 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a00c:	3301      	adds	r3, #1
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	b25a      	sxtb	r2, r3
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a018:	2301      	movs	r3, #1
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a01c:	e001      	b.n	800a022 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	637b      	str	r3, [r7, #52]	@ 0x34
 800a022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a024:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f383 8811 	msr	BASEPRI, r3
}
 800a02c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a030:	4618      	mov	r0, r3
 800a032:	3738      	adds	r7, #56	@ 0x38
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08c      	sub	sp, #48	@ 0x30
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a044:	2300      	movs	r3, #0
 800a046:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <xQueueReceive+0x32>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	623b      	str	r3, [r7, #32]
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	e7fd      	b.n	800a066 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d103      	bne.n	800a078 <xQueueReceive+0x40>
 800a070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <xQueueReceive+0x44>
 800a078:	2301      	movs	r3, #1
 800a07a:	e000      	b.n	800a07e <xQueueReceive+0x46>
 800a07c:	2300      	movs	r3, #0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <xQueueReceive+0x62>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	61fb      	str	r3, [r7, #28]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a09a:	f001 fbf3 	bl	800b884 <xTaskGetSchedulerState>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <xQueueReceive+0x72>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <xQueueReceive+0x76>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueReceive+0x78>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <xQueueReceive+0x94>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	61bb      	str	r3, [r7, #24]
}
 800a0c6:	bf00      	nop
 800a0c8:	bf00      	nop
 800a0ca:	e7fd      	b.n	800a0c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0cc:	f002 fa44 	bl	800c558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01f      	beq.n	800a11c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e0:	f000 fb02 	bl	800a6e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	1e5a      	subs	r2, r3, #1
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00f      	beq.n	800a114 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	3310      	adds	r3, #16
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 f9ed 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a104:	4b3c      	ldr	r3, [pc, #240]	@ (800a1f8 <xQueueReceive+0x1c0>)
 800a106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a114:	f002 fa52 	bl	800c5bc <vPortExitCritical>
				return pdPASS;
 800a118:	2301      	movs	r3, #1
 800a11a:	e069      	b.n	800a1f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a122:	f002 fa4b 	bl	800c5bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a126:	2300      	movs	r3, #0
 800a128:	e062      	b.n	800a1f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a130:	f107 0310 	add.w	r3, r7, #16
 800a134:	4618      	mov	r0, r3
 800a136:	f001 fa33 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a13e:	f002 fa3d 	bl	800c5bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a142:	f000 ff6f 	bl	800b024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a146:	f002 fa07 	bl	800c558 <vPortEnterCritical>
 800a14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d103      	bne.n	800a160 <xQueueReceive+0x128>
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a166:	b25b      	sxtb	r3, r3
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d103      	bne.n	800a176 <xQueueReceive+0x13e>
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a176:	f002 fa21 	bl	800c5bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a17a:	1d3a      	adds	r2, r7, #4
 800a17c:	f107 0310 	add.w	r3, r7, #16
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fa22 	bl	800b5cc <xTaskCheckForTimeOut>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d123      	bne.n	800a1d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a18e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a190:	f000 fb22 	bl	800a7d8 <prvIsQueueEmpty>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d017      	beq.n	800a1ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	3324      	adds	r3, #36	@ 0x24
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 f946 	bl	800b434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1aa:	f000 fac3 	bl	800a734 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1ae:	f000 ff47 	bl	800b040 <xTaskResumeAll>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d189      	bne.n	800a0cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f8 <xQueueReceive+0x1c0>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	e780      	b.n	800a0cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1cc:	f000 fab2 	bl	800a734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d0:	f000 ff36 	bl	800b040 <xTaskResumeAll>
 800a1d4:	e77a      	b.n	800a0cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1d8:	f000 faac 	bl	800a734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1dc:	f000 ff30 	bl	800b040 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1e2:	f000 faf9 	bl	800a7d8 <prvIsQueueEmpty>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f43f af6f 	beq.w	800a0cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3730      	adds	r7, #48	@ 0x30
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08e      	sub	sp, #56	@ 0x38
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10b      	bne.n	800a230 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	623b      	str	r3, [r7, #32]
}
 800a22a:	bf00      	nop
 800a22c:	bf00      	nop
 800a22e:	e7fd      	b.n	800a22c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	61fb      	str	r3, [r7, #28]
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	e7fd      	b.n	800a24c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a250:	f001 fb18 	bl	800b884 <xTaskGetSchedulerState>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <xQueueSemaphoreTake+0x64>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <xQueueSemaphoreTake+0x68>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <xQueueSemaphoreTake+0x6a>
 800a264:	2300      	movs	r3, #0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10b      	bne.n	800a282 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	61bb      	str	r3, [r7, #24]
}
 800a27c:	bf00      	nop
 800a27e:	bf00      	nop
 800a280:	e7fd      	b.n	800a27e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a282:	f002 f969 	bl	800c558 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d024      	beq.n	800a2dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a298:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d104      	bne.n	800a2ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2a2:	f001 fc69 	bl	800bb78 <pvTaskIncrementMutexHeldCount>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00f      	beq.n	800a2d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b6:	3310      	adds	r3, #16
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f001 f90d 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d007      	beq.n	800a2d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2c4:	4b54      	ldr	r3, [pc, #336]	@ (800a418 <xQueueSemaphoreTake+0x21c>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2d4:	f002 f972 	bl	800c5bc <vPortExitCritical>
				return pdPASS;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e098      	b.n	800a40e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d112      	bne.n	800a308 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	617b      	str	r3, [r7, #20]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a300:	f002 f95c 	bl	800c5bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a304:	2300      	movs	r3, #0
 800a306:	e082      	b.n	800a40e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d106      	bne.n	800a31c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	4618      	mov	r0, r3
 800a314:	f001 f944 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a31c:	f002 f94e 	bl	800c5bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a320:	f000 fe80 	bl	800b024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a324:	f002 f918 	bl	800c558 <vPortEnterCritical>
 800a328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a334:	d103      	bne.n	800a33e <xQueueSemaphoreTake+0x142>
 800a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a344:	b25b      	sxtb	r3, r3
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d103      	bne.n	800a354 <xQueueSemaphoreTake+0x158>
 800a34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a354:	f002 f932 	bl	800c5bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a358:	463a      	mov	r2, r7
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f933 	bl	800b5cc <xTaskCheckForTimeOut>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d132      	bne.n	800a3d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a36c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a36e:	f000 fa33 	bl	800a7d8 <prvIsQueueEmpty>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d026      	beq.n	800a3c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a380:	f002 f8ea 	bl	800c558 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 fa99 	bl	800b8c0 <xTaskPriorityInherit>
 800a38e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a390:	f002 f914 	bl	800c5bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a396:	3324      	adds	r3, #36	@ 0x24
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 f849 	bl	800b434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3a4:	f000 f9c6 	bl	800a734 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3a8:	f000 fe4a 	bl	800b040 <xTaskResumeAll>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f47f af67 	bne.w	800a282 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a3b4:	4b18      	ldr	r3, [pc, #96]	@ (800a418 <xQueueSemaphoreTake+0x21c>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	e75d      	b.n	800a282 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3c8:	f000 f9b4 	bl	800a734 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3cc:	f000 fe38 	bl	800b040 <xTaskResumeAll>
 800a3d0:	e757      	b.n	800a282 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3d4:	f000 f9ae 	bl	800a734 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3d8:	f000 fe32 	bl	800b040 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3de:	f000 f9fb 	bl	800a7d8 <prvIsQueueEmpty>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f43f af4c 	beq.w	800a282 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00d      	beq.n	800a40c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a3f0:	f002 f8b2 	bl	800c558 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3f6:	f000 f8f5 	bl	800a5e4 <prvGetDisinheritPriorityAfterTimeout>
 800a3fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a402:	4618      	mov	r0, r3
 800a404:	f001 fb34 	bl	800ba70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a408:	f002 f8d8 	bl	800c5bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a40c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3738      	adds	r7, #56	@ 0x38
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	e000ed04 	.word	0xe000ed04

0800a41c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08e      	sub	sp, #56	@ 0x38
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10b      	bne.n	800a44a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	623b      	str	r3, [r7, #32]
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop
 800a448:	e7fd      	b.n	800a446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d103      	bne.n	800a458 <xQueueReceiveFromISR+0x3c>
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <xQueueReceiveFromISR+0x40>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <xQueueReceiveFromISR+0x42>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10b      	bne.n	800a47a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	61fb      	str	r3, [r7, #28]
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	e7fd      	b.n	800a476 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a47a:	f002 f94d 	bl	800c718 <vPortValidateInterruptPriority>
	__asm volatile
 800a47e:	f3ef 8211 	mrs	r2, BASEPRI
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	61ba      	str	r2, [r7, #24]
 800a494:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a496:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d02f      	beq.n	800a506 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b4:	f000 f918 	bl	800a6e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d112      	bne.n	800a4f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d016      	beq.n	800a500 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fffe 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00e      	beq.n	800a500 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e007      	b.n	800a500 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	b25a      	sxtb	r2, r3
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a500:	2301      	movs	r3, #1
 800a502:	637b      	str	r3, [r7, #52]	@ 0x34
 800a504:	e001      	b.n	800a50a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a506:	2300      	movs	r3, #0
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
 800a50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f383 8811 	msr	BASEPRI, r3
}
 800a514:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3738      	adds	r7, #56	@ 0x38
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10b      	bne.n	800a546 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	60bb      	str	r3, [r7, #8]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a546:	f002 f807 	bl	800c558 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a550:	f002 f834 	bl	800c5bc <vPortExitCritical>

	return uxReturn;
 800a554:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a55e:	b480      	push	{r7}
 800a560:	b087      	sub	sp, #28
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10b      	bne.n	800a588 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	bf00      	nop
 800a586:	e7fd      	b.n	800a584 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a58e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a590:	4618      	mov	r0, r3
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <vQueueDelete+0x2a>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60bb      	str	r3, [r7, #8]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 f95e 	bl	800a888 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f002 f9ae 	bl	800c938 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e001      	b.n	800a606 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a606:	68fb      	ldr	r3, [r7, #12]
	}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a628:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10d      	bne.n	800a64e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d14d      	bne.n	800a6d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	4618      	mov	r0, r3
 800a640:	f001 f9a6 	bl	800b990 <xTaskPriorityDisinherit>
 800a644:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
 800a64c:	e043      	b.n	800a6d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d119      	bne.n	800a688 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6858      	ldr	r0, [r3, #4]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	f014 f84b 	bl	801e6fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66c:	441a      	add	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d32b      	bcc.n	800a6d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	605a      	str	r2, [r3, #4]
 800a686:	e026      	b.n	800a6d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	68d8      	ldr	r0, [r3, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a690:	461a      	mov	r2, r3
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	f014 f831 	bl	801e6fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a0:	425b      	negs	r3, r3
 800a6a2:	441a      	add	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d207      	bcs.n	800a6c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6bc:	425b      	negs	r3, r3
 800a6be:	441a      	add	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d105      	bne.n	800a6d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6de:	697b      	ldr	r3, [r7, #20]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a702:	441a      	add	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d303      	bcc.n	800a71c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a724:	461a      	mov	r2, r3
 800a726:	6838      	ldr	r0, [r7, #0]
 800a728:	f013 ffe7 	bl	801e6fa <memcpy>
	}
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a73c:	f001 ff0c 	bl	800c558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a746:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a748:	e011      	b.n	800a76e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d012      	beq.n	800a778 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3324      	adds	r3, #36	@ 0x24
 800a756:	4618      	mov	r0, r3
 800a758:	f000 febe 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a762:	f000 ff97 	bl	800b694 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	3b01      	subs	r3, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a772:	2b00      	cmp	r3, #0
 800a774:	dce9      	bgt.n	800a74a <prvUnlockQueue+0x16>
 800a776:	e000      	b.n	800a77a <prvUnlockQueue+0x46>
					break;
 800a778:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	22ff      	movs	r2, #255	@ 0xff
 800a77e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a782:	f001 ff1b 	bl	800c5bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a786:	f001 fee7 	bl	800c558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a790:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a792:	e011      	b.n	800a7b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d012      	beq.n	800a7c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3310      	adds	r3, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fe99 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7ac:	f000 ff72 	bl	800b694 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dce9      	bgt.n	800a794 <prvUnlockQueue+0x60>
 800a7c0:	e000      	b.n	800a7c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	22ff      	movs	r2, #255	@ 0xff
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7cc:	f001 fef6 	bl	800c5bc <vPortExitCritical>
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e0:	f001 feba 	bl	800c558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e001      	b.n	800a7f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f6:	f001 fee1 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a80c:	f001 fea4 	bl	800c558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a818:	429a      	cmp	r2, r3
 800a81a:	d102      	bne.n	800a822 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	e001      	b.n	800a826 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a826:	f001 fec9 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800a82a:	68fb      	ldr	r3, [r7, #12]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e014      	b.n	800a86e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a844:	4a0f      	ldr	r2, [pc, #60]	@ (800a884 <vQueueAddToRegistry+0x50>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10b      	bne.n	800a868 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a850:	490c      	ldr	r1, [pc, #48]	@ (800a884 <vQueueAddToRegistry+0x50>)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a85a:	4a0a      	ldr	r2, [pc, #40]	@ (800a884 <vQueueAddToRegistry+0x50>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a866:	e006      	b.n	800a876 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b07      	cmp	r3, #7
 800a872:	d9e7      	bls.n	800a844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a874:	bf00      	nop
 800a876:	bf00      	nop
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	2000a3b4 	.word	0x2000a3b4

0800a888 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e016      	b.n	800a8c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a896:	4a10      	ldr	r2, [pc, #64]	@ (800a8d8 <vQueueUnregisterQueue+0x50>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d10b      	bne.n	800a8be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d8 <vQueueUnregisterQueue+0x50>)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a8b0:	4a09      	ldr	r2, [pc, #36]	@ (800a8d8 <vQueueUnregisterQueue+0x50>)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	605a      	str	r2, [r3, #4]
				break;
 800a8bc:	e006      	b.n	800a8cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b07      	cmp	r3, #7
 800a8c8:	d9e5      	bls.n	800a896 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	2000a3b4 	.word	0x2000a3b4

0800a8dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8ec:	f001 fe34 	bl	800c558 <vPortEnterCritical>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d103      	bne.n	800a906 <vQueueWaitForMessageRestricted+0x2a>
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d103      	bne.n	800a91c <vQueueWaitForMessageRestricted+0x40>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a91c:	f001 fe4e 	bl	800c5bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a924:	2b00      	cmp	r3, #0
 800a926:	d106      	bne.n	800a936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	3324      	adds	r3, #36	@ 0x24
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fda5 	bl	800b480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a936:	6978      	ldr	r0, [r7, #20]
 800a938:	f7ff fefc 	bl	800a734 <prvUnlockQueue>
	}
 800a93c:	bf00      	nop
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08e      	sub	sp, #56	@ 0x38
 800a948:	af04      	add	r7, sp, #16
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	623b      	str	r3, [r7, #32]
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	61fb      	str	r3, [r7, #28]
}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	e7fd      	b.n	800a98a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a98e:	23ac      	movs	r3, #172	@ 0xac
 800a990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2bac      	cmp	r3, #172	@ 0xac
 800a996:	d00b      	beq.n	800a9b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	61bb      	str	r3, [r7, #24]
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01e      	beq.n	800a9f6 <xTaskCreateStatic+0xb2>
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01b      	beq.n	800a9f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	f107 0314 	add.w	r3, r7, #20
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68b9      	ldr	r1, [r7, #8]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f851 	bl	800aa90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9f0:	f000 f8f8 	bl	800abe4 <prvAddNewTaskToReadyList>
 800a9f4:	e001      	b.n	800a9fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9fa:	697b      	ldr	r3, [r7, #20]
	}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3728      	adds	r7, #40	@ 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08c      	sub	sp, #48	@ 0x30
 800aa08:	af04      	add	r7, sp, #16
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 febf 	bl	800c79c <pvPortMalloc>
 800aa1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa26:	20ac      	movs	r0, #172	@ 0xac
 800aa28:	f001 feb8 	bl	800c79c <pvPortMalloc>
 800aa2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa3a:	e005      	b.n	800aa48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	f001 ff7b 	bl	800c938 <vPortFree>
 800aa42:	e001      	b.n	800aa48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d017      	beq.n	800aa7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa56:	88fa      	ldrh	r2, [r7, #6]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	9302      	str	r3, [sp, #8]
 800aa60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 f80f 	bl	800aa90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa72:	69f8      	ldr	r0, [r7, #28]
 800aa74:	f000 f8b6 	bl	800abe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	e002      	b.n	800aa84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa84:	69bb      	ldr	r3, [r7, #24]
	}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	21a5      	movs	r1, #165	@ 0xa5
 800aaaa:	f013 fd24 	bl	801e4f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aab8:	3b01      	subs	r3, #1
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	f023 0307 	bic.w	r3, r3, #7
 800aac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	617b      	str	r3, [r7, #20]
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	e7fd      	b.n	800aae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01f      	beq.n	800ab30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61fb      	str	r3, [r7, #28]
 800aaf4:	e012      	b.n	800ab1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	7819      	ldrb	r1, [r3, #0]
 800aafe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4413      	add	r3, r2
 800ab04:	3334      	adds	r3, #52	@ 0x34
 800ab06:	460a      	mov	r2, r1
 800ab08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b0f      	cmp	r3, #15
 800ab20:	d9e9      	bls.n	800aaf6 <prvInitialiseNewTask+0x66>
 800ab22:	e000      	b.n	800ab26 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab2e:	e003      	b.n	800ab38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	2b37      	cmp	r3, #55	@ 0x37
 800ab3c:	d901      	bls.n	800ab42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab3e:	2337      	movs	r3, #55	@ 0x37
 800ab40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	2200      	movs	r2, #0
 800ab52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab56:	3304      	adds	r3, #4
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe fd3d 	bl	80095d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	3318      	adds	r3, #24
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fd38 	bl	80095d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab96:	3358      	adds	r3, #88	@ 0x58
 800ab98:	224c      	movs	r2, #76	@ 0x4c
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f013 fcaa 	bl	801e4f6 <memset>
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	4a0c      	ldr	r2, [pc, #48]	@ (800abd8 <prvInitialiseNewTask+0x148>)
 800aba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	4a0c      	ldr	r2, [pc, #48]	@ (800abdc <prvInitialiseNewTask+0x14c>)
 800abac:	661a      	str	r2, [r3, #96]	@ 0x60
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	4a0b      	ldr	r2, [pc, #44]	@ (800abe0 <prvInitialiseNewTask+0x150>)
 800abb2:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	69b8      	ldr	r0, [r7, #24]
 800abba:	f001 fb9f 	bl	800c2fc <pxPortInitialiseStack>
 800abbe:	4602      	mov	r2, r0
 800abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abd0:	bf00      	nop
 800abd2:	3720      	adds	r7, #32
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	2001280c 	.word	0x2001280c
 800abdc:	20012874 	.word	0x20012874
 800abe0:	200128dc 	.word	0x200128dc

0800abe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abec:	f001 fcb4 	bl	800c558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abf0:	4b2d      	ldr	r3, [pc, #180]	@ (800aca8 <prvAddNewTaskToReadyList+0xc4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	4a2c      	ldr	r2, [pc, #176]	@ (800aca8 <prvAddNewTaskToReadyList+0xc4>)
 800abf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abfa:	4b2c      	ldr	r3, [pc, #176]	@ (800acac <prvAddNewTaskToReadyList+0xc8>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac02:	4a2a      	ldr	r2, [pc, #168]	@ (800acac <prvAddNewTaskToReadyList+0xc8>)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac08:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <prvAddNewTaskToReadyList+0xc4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d110      	bne.n	800ac32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac10:	f000 fd64 	bl	800b6dc <prvInitialiseTaskLists>
 800ac14:	e00d      	b.n	800ac32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac16:	4b26      	ldr	r3, [pc, #152]	@ (800acb0 <prvAddNewTaskToReadyList+0xcc>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac1e:	4b23      	ldr	r3, [pc, #140]	@ (800acac <prvAddNewTaskToReadyList+0xc8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d802      	bhi.n	800ac32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac2c:	4a1f      	ldr	r2, [pc, #124]	@ (800acac <prvAddNewTaskToReadyList+0xc8>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac32:	4b20      	ldr	r3, [pc, #128]	@ (800acb4 <prvAddNewTaskToReadyList+0xd0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3301      	adds	r3, #1
 800ac38:	4a1e      	ldr	r2, [pc, #120]	@ (800acb4 <prvAddNewTaskToReadyList+0xd0>)
 800ac3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac3c:	4b1d      	ldr	r3, [pc, #116]	@ (800acb4 <prvAddNewTaskToReadyList+0xd0>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac48:	4b1b      	ldr	r3, [pc, #108]	@ (800acb8 <prvAddNewTaskToReadyList+0xd4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d903      	bls.n	800ac58 <prvAddNewTaskToReadyList+0x74>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac54:	4a18      	ldr	r2, [pc, #96]	@ (800acb8 <prvAddNewTaskToReadyList+0xd4>)
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4a15      	ldr	r2, [pc, #84]	@ (800acbc <prvAddNewTaskToReadyList+0xd8>)
 800ac66:	441a      	add	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fe fcbf 	bl	80095f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac74:	f001 fca2 	bl	800c5bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac78:	4b0d      	ldr	r3, [pc, #52]	@ (800acb0 <prvAddNewTaskToReadyList+0xcc>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00e      	beq.n	800ac9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <prvAddNewTaskToReadyList+0xc8>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d207      	bcs.n	800ac9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <prvAddNewTaskToReadyList+0xdc>)
 800ac90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac9e:	bf00      	nop
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	2000a8c8 	.word	0x2000a8c8
 800acac:	2000a3f4 	.word	0x2000a3f4
 800acb0:	2000a8d4 	.word	0x2000a8d4
 800acb4:	2000a8e4 	.word	0x2000a8e4
 800acb8:	2000a8d0 	.word	0x2000a8d0
 800acbc:	2000a3f8 	.word	0x2000a3f8
 800acc0:	e000ed04 	.word	0xe000ed04

0800acc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800accc:	2300      	movs	r3, #0
 800acce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d018      	beq.n	800ad08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acd6:	4b14      	ldr	r3, [pc, #80]	@ (800ad28 <vTaskDelay+0x64>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <vTaskDelay+0x32>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60bb      	str	r3, [r7, #8]
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	e7fd      	b.n	800acf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acf6:	f000 f995 	bl	800b024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acfa:	2100      	movs	r1, #0
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 ff4f 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad02:	f000 f99d 	bl	800b040 <xTaskResumeAll>
 800ad06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d107      	bne.n	800ad1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad0e:	4b07      	ldr	r3, [pc, #28]	@ (800ad2c <vTaskDelay+0x68>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	2000a8f0 	.word	0x2000a8f0
 800ad2c:	e000ed04 	.word	0xe000ed04

0800ad30 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad38:	f001 fc0e 	bl	800c558 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <vTaskSuspend+0x18>
 800ad42:	4b30      	ldr	r3, [pc, #192]	@ (800ae04 <vTaskSuspend+0xd4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	e000      	b.n	800ad4a <vTaskSuspend+0x1a>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe fcab 	bl	80096ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d004      	beq.n	800ad68 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3318      	adds	r3, #24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fca2 	bl	80096ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4826      	ldr	r0, [pc, #152]	@ (800ae08 <vTaskSuspend+0xd8>)
 800ad70:	f7fe fc3f 	bl	80095f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d103      	bne.n	800ad88 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ad88:	f001 fc18 	bl	800c5bc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ad8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ae0c <vTaskSuspend+0xdc>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ad94:	f001 fbe0 	bl	800c558 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ad98:	f000 fd44 	bl	800b824 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ad9c:	f001 fc0e 	bl	800c5bc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ada0:	4b18      	ldr	r3, [pc, #96]	@ (800ae04 <vTaskSuspend+0xd4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d128      	bne.n	800adfc <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800adaa:	4b18      	ldr	r3, [pc, #96]	@ (800ae0c <vTaskSuspend+0xdc>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800adb2:	4b17      	ldr	r3, [pc, #92]	@ (800ae10 <vTaskSuspend+0xe0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <vTaskSuspend+0xa2>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	60bb      	str	r3, [r7, #8]
}
 800adcc:	bf00      	nop
 800adce:	bf00      	nop
 800add0:	e7fd      	b.n	800adce <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800add2:	4b10      	ldr	r3, [pc, #64]	@ (800ae14 <vTaskSuspend+0xe4>)
 800add4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ade2:	e00b      	b.n	800adfc <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ade4:	4b08      	ldr	r3, [pc, #32]	@ (800ae08 <vTaskSuspend+0xd8>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <vTaskSuspend+0xe8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d103      	bne.n	800adf8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800adf0:	4b04      	ldr	r3, [pc, #16]	@ (800ae04 <vTaskSuspend+0xd4>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
	}
 800adf6:	e001      	b.n	800adfc <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800adf8:	f000 fa9c 	bl	800b334 <vTaskSwitchContext>
	}
 800adfc:	bf00      	nop
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	2000a3f4 	.word	0x2000a3f4
 800ae08:	2000a8b4 	.word	0x2000a8b4
 800ae0c:	2000a8d4 	.word	0x2000a8d4
 800ae10:	2000a8f0 	.word	0x2000a8f0
 800ae14:	e000ed04 	.word	0xe000ed04
 800ae18:	2000a8c8 	.word	0x2000a8c8

0800ae1c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10b      	bne.n	800ae4a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	60fb      	str	r3, [r7, #12]
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	e7fd      	b.n	800ae46 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ae78 <prvTaskIsTaskSuspended+0x5c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d10a      	bne.n	800ae6a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae58:	4a08      	ldr	r2, [pc, #32]	@ (800ae7c <prvTaskIsTaskSuspended+0x60>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d005      	beq.n	800ae6a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800ae66:	2301      	movs	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	371c      	adds	r7, #28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	2000a8b4 	.word	0x2000a8b4
 800ae7c:	2000a888 	.word	0x2000a888

0800ae80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10b      	bne.n	800aeaa <vTaskResume+0x2a>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	60bb      	str	r3, [r7, #8]
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop
 800aea8:	e7fd      	b.n	800aea6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800aeaa:	4b21      	ldr	r3, [pc, #132]	@ (800af30 <vTaskResume+0xb0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d038      	beq.n	800af26 <vTaskResume+0xa6>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d035      	beq.n	800af26 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800aeba:	f001 fb4d 	bl	800c558 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff ffac 	bl	800ae1c <prvTaskIsTaskSuspended>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d02b      	beq.n	800af22 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3304      	adds	r3, #4
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fbec 	bl	80096ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed8:	4b16      	ldr	r3, [pc, #88]	@ (800af34 <vTaskResume+0xb4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d903      	bls.n	800aee8 <vTaskResume+0x68>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	4a13      	ldr	r2, [pc, #76]	@ (800af34 <vTaskResume+0xb4>)
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeec:	4613      	mov	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4a10      	ldr	r2, [pc, #64]	@ (800af38 <vTaskResume+0xb8>)
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4619      	mov	r1, r3
 800aefe:	4610      	mov	r0, r2
 800af00:	f7fe fb77 	bl	80095f2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af08:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <vTaskResume+0xb0>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af0e:	429a      	cmp	r2, r3
 800af10:	d307      	bcc.n	800af22 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800af12:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <vTaskResume+0xbc>)
 800af14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800af22:	f001 fb4b 	bl	800c5bc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af26:	bf00      	nop
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	2000a3f4 	.word	0x2000a3f4
 800af34:	2000a8d0 	.word	0x2000a8d0
 800af38:	2000a3f8 	.word	0x2000a3f8
 800af3c:	e000ed04 	.word	0xe000ed04

0800af40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af46:	2300      	movs	r3, #0
 800af48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af4e:	463a      	mov	r2, r7
 800af50:	1d39      	adds	r1, r7, #4
 800af52:	f107 0308 	add.w	r3, r7, #8
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe faea 	bl	8009530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	9202      	str	r2, [sp, #8]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	2300      	movs	r3, #0
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	2300      	movs	r3, #0
 800af6c:	460a      	mov	r2, r1
 800af6e:	4925      	ldr	r1, [pc, #148]	@ (800b004 <vTaskStartScheduler+0xc4>)
 800af70:	4825      	ldr	r0, [pc, #148]	@ (800b008 <vTaskStartScheduler+0xc8>)
 800af72:	f7ff fce7 	bl	800a944 <xTaskCreateStatic>
 800af76:	4603      	mov	r3, r0
 800af78:	4a24      	ldr	r2, [pc, #144]	@ (800b00c <vTaskStartScheduler+0xcc>)
 800af7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af7c:	4b23      	ldr	r3, [pc, #140]	@ (800b00c <vTaskStartScheduler+0xcc>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	e001      	b.n	800af8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d102      	bne.n	800af9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af94:	f000 fe58 	bl	800bc48 <xTimerCreateTimerTask>
 800af98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d11d      	bne.n	800afdc <vTaskStartScheduler+0x9c>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	613b      	str	r3, [r7, #16]
}
 800afb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afb4:	4b16      	ldr	r3, [pc, #88]	@ (800b010 <vTaskStartScheduler+0xd0>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3358      	adds	r3, #88	@ 0x58
 800afba:	4a16      	ldr	r2, [pc, #88]	@ (800b014 <vTaskStartScheduler+0xd4>)
 800afbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afbe:	4b16      	ldr	r3, [pc, #88]	@ (800b018 <vTaskStartScheduler+0xd8>)
 800afc0:	f04f 32ff 	mov.w	r2, #4294967295
 800afc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afc6:	4b15      	ldr	r3, [pc, #84]	@ (800b01c <vTaskStartScheduler+0xdc>)
 800afc8:	2201      	movs	r2, #1
 800afca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afcc:	4b14      	ldr	r3, [pc, #80]	@ (800b020 <vTaskStartScheduler+0xe0>)
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800afd2:	f7f6 faff 	bl	80015d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afd6:	f001 fa1b 	bl	800c410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afda:	e00f      	b.n	800affc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe2:	d10b      	bne.n	800affc <vTaskStartScheduler+0xbc>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	60fb      	str	r3, [r7, #12]
}
 800aff6:	bf00      	nop
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <vTaskStartScheduler+0xb8>
}
 800affc:	bf00      	nop
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	08021d6c 	.word	0x08021d6c
 800b008:	0800b6ad 	.word	0x0800b6ad
 800b00c:	2000a8ec 	.word	0x2000a8ec
 800b010:	2000a3f4 	.word	0x2000a3f4
 800b014:	20000054 	.word	0x20000054
 800b018:	2000a8e8 	.word	0x2000a8e8
 800b01c:	2000a8d4 	.word	0x2000a8d4
 800b020:	2000a8cc 	.word	0x2000a8cc

0800b024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b024:	b480      	push	{r7}
 800b026:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b028:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <vTaskSuspendAll+0x18>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	4a03      	ldr	r2, [pc, #12]	@ (800b03c <vTaskSuspendAll+0x18>)
 800b030:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b032:	bf00      	nop
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr
 800b03c:	2000a8f0 	.word	0x2000a8f0

0800b040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b04e:	4b42      	ldr	r3, [pc, #264]	@ (800b158 <xTaskResumeAll+0x118>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <xTaskResumeAll+0x2e>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	603b      	str	r3, [r7, #0]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b06e:	f001 fa73 	bl	800c558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b072:	4b39      	ldr	r3, [pc, #228]	@ (800b158 <xTaskResumeAll+0x118>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3b01      	subs	r3, #1
 800b078:	4a37      	ldr	r2, [pc, #220]	@ (800b158 <xTaskResumeAll+0x118>)
 800b07a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b07c:	4b36      	ldr	r3, [pc, #216]	@ (800b158 <xTaskResumeAll+0x118>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d162      	bne.n	800b14a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b084:	4b35      	ldr	r3, [pc, #212]	@ (800b15c <xTaskResumeAll+0x11c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d05e      	beq.n	800b14a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b08c:	e02f      	b.n	800b0ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b08e:	4b34      	ldr	r3, [pc, #208]	@ (800b160 <xTaskResumeAll+0x120>)
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3318      	adds	r3, #24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fb06 	bl	80096ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fb01 	bl	80096ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b164 <xTaskResumeAll+0x124>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d903      	bls.n	800b0be <xTaskResumeAll+0x7e>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b164 <xTaskResumeAll+0x124>)
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4a27      	ldr	r2, [pc, #156]	@ (800b168 <xTaskResumeAll+0x128>)
 800b0cc:	441a      	add	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7fe fa8c 	bl	80095f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0de:	4b23      	ldr	r3, [pc, #140]	@ (800b16c <xTaskResumeAll+0x12c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d302      	bcc.n	800b0ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0e8:	4b21      	ldr	r3, [pc, #132]	@ (800b170 <xTaskResumeAll+0x130>)
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b160 <xTaskResumeAll+0x120>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1cb      	bne.n	800b08e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0fc:	f000 fb92 	bl	800b824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b100:	4b1c      	ldr	r3, [pc, #112]	@ (800b174 <xTaskResumeAll+0x134>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d010      	beq.n	800b12e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b10c:	f000 f858 	bl	800b1c0 <xTaskIncrementTick>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b116:	4b16      	ldr	r3, [pc, #88]	@ (800b170 <xTaskResumeAll+0x130>)
 800b118:	2201      	movs	r2, #1
 800b11a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3b01      	subs	r3, #1
 800b120:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1f1      	bne.n	800b10c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b128:	4b12      	ldr	r3, [pc, #72]	@ (800b174 <xTaskResumeAll+0x134>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b12e:	4b10      	ldr	r3, [pc, #64]	@ (800b170 <xTaskResumeAll+0x130>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d009      	beq.n	800b14a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b136:	2301      	movs	r3, #1
 800b138:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b13a:	4b0f      	ldr	r3, [pc, #60]	@ (800b178 <xTaskResumeAll+0x138>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b14a:	f001 fa37 	bl	800c5bc <vPortExitCritical>

	return xAlreadyYielded;
 800b14e:	68bb      	ldr	r3, [r7, #8]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	2000a8f0 	.word	0x2000a8f0
 800b15c:	2000a8c8 	.word	0x2000a8c8
 800b160:	2000a888 	.word	0x2000a888
 800b164:	2000a8d0 	.word	0x2000a8d0
 800b168:	2000a3f8 	.word	0x2000a3f8
 800b16c:	2000a3f4 	.word	0x2000a3f4
 800b170:	2000a8dc 	.word	0x2000a8dc
 800b174:	2000a8d8 	.word	0x2000a8d8
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b182:	4b05      	ldr	r3, [pc, #20]	@ (800b198 <xTaskGetTickCount+0x1c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b188:	687b      	ldr	r3, [r7, #4]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	2000a8cc 	.word	0x2000a8cc

0800b19c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1a2:	f001 fab9 	bl	800c718 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b1aa:	4b04      	ldr	r3, [pc, #16]	@ (800b1bc <xTaskGetTickCountFromISR+0x20>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1b0:	683b      	ldr	r3, [r7, #0]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	2000a8cc 	.word	0x2000a8cc

0800b1c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b308 <xTaskIncrementTick+0x148>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 8090 	bne.w	800b2f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b30c <xTaskIncrementTick+0x14c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1dc:	4a4b      	ldr	r2, [pc, #300]	@ (800b30c <xTaskIncrementTick+0x14c>)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d121      	bne.n	800b22c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e8:	4b49      	ldr	r3, [pc, #292]	@ (800b310 <xTaskIncrementTick+0x150>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	603b      	str	r3, [r7, #0]
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <xTaskIncrementTick+0x46>
 800b20a:	4b41      	ldr	r3, [pc, #260]	@ (800b310 <xTaskIncrementTick+0x150>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	4b40      	ldr	r3, [pc, #256]	@ (800b314 <xTaskIncrementTick+0x154>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a3e      	ldr	r2, [pc, #248]	@ (800b310 <xTaskIncrementTick+0x150>)
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	4a3e      	ldr	r2, [pc, #248]	@ (800b314 <xTaskIncrementTick+0x154>)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	4b3e      	ldr	r3, [pc, #248]	@ (800b318 <xTaskIncrementTick+0x158>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a3c      	ldr	r2, [pc, #240]	@ (800b318 <xTaskIncrementTick+0x158>)
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	f000 fafc 	bl	800b824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b22c:	4b3b      	ldr	r3, [pc, #236]	@ (800b31c <xTaskIncrementTick+0x15c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	429a      	cmp	r2, r3
 800b234:	d349      	bcc.n	800b2ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b236:	4b36      	ldr	r3, [pc, #216]	@ (800b310 <xTaskIncrementTick+0x150>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b240:	4b36      	ldr	r3, [pc, #216]	@ (800b31c <xTaskIncrementTick+0x15c>)
 800b242:	f04f 32ff 	mov.w	r2, #4294967295
 800b246:	601a      	str	r2, [r3, #0]
					break;
 800b248:	e03f      	b.n	800b2ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24a:	4b31      	ldr	r3, [pc, #196]	@ (800b310 <xTaskIncrementTick+0x150>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d203      	bcs.n	800b26a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b262:	4a2e      	ldr	r2, [pc, #184]	@ (800b31c <xTaskIncrementTick+0x15c>)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b268:	e02f      	b.n	800b2ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fa1c 	bl	80096ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3318      	adds	r3, #24
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fa13 	bl	80096ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28a:	4b25      	ldr	r3, [pc, #148]	@ (800b320 <xTaskIncrementTick+0x160>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d903      	bls.n	800b29a <xTaskIncrementTick+0xda>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4a22      	ldr	r2, [pc, #136]	@ (800b320 <xTaskIncrementTick+0x160>)
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b324 <xTaskIncrementTick+0x164>)
 800b2a8:	441a      	add	r2, r3
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	f7fe f99e 	bl	80095f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b328 <xTaskIncrementTick+0x168>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d3b8      	bcc.n	800b236 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2c8:	e7b5      	b.n	800b236 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2ca:	4b17      	ldr	r3, [pc, #92]	@ (800b328 <xTaskIncrementTick+0x168>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d0:	4914      	ldr	r1, [pc, #80]	@ (800b324 <xTaskIncrementTick+0x164>)
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	440b      	add	r3, r1
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d901      	bls.n	800b2e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2e6:	4b11      	ldr	r3, [pc, #68]	@ (800b32c <xTaskIncrementTick+0x16c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d007      	beq.n	800b2fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e004      	b.n	800b2fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b330 <xTaskIncrementTick+0x170>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b330 <xTaskIncrementTick+0x170>)
 800b2fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2fe:	697b      	ldr	r3, [r7, #20]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	2000a8f0 	.word	0x2000a8f0
 800b30c:	2000a8cc 	.word	0x2000a8cc
 800b310:	2000a880 	.word	0x2000a880
 800b314:	2000a884 	.word	0x2000a884
 800b318:	2000a8e0 	.word	0x2000a8e0
 800b31c:	2000a8e8 	.word	0x2000a8e8
 800b320:	2000a8d0 	.word	0x2000a8d0
 800b324:	2000a3f8 	.word	0x2000a3f8
 800b328:	2000a3f4 	.word	0x2000a3f4
 800b32c:	2000a8dc 	.word	0x2000a8dc
 800b330:	2000a8d8 	.word	0x2000a8d8

0800b334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b33a:	4b36      	ldr	r3, [pc, #216]	@ (800b414 <vTaskSwitchContext+0xe0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b342:	4b35      	ldr	r3, [pc, #212]	@ (800b418 <vTaskSwitchContext+0xe4>)
 800b344:	2201      	movs	r2, #1
 800b346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b348:	e060      	b.n	800b40c <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800b34a:	4b33      	ldr	r3, [pc, #204]	@ (800b418 <vTaskSwitchContext+0xe4>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b350:	f7f6 f947 	bl	80015e2 <getRunTimeCounterValue>
 800b354:	4603      	mov	r3, r0
 800b356:	4a31      	ldr	r2, [pc, #196]	@ (800b41c <vTaskSwitchContext+0xe8>)
 800b358:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b35a:	4b30      	ldr	r3, [pc, #192]	@ (800b41c <vTaskSwitchContext+0xe8>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b30      	ldr	r3, [pc, #192]	@ (800b420 <vTaskSwitchContext+0xec>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	429a      	cmp	r2, r3
 800b364:	d909      	bls.n	800b37a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b366:	4b2f      	ldr	r3, [pc, #188]	@ (800b424 <vTaskSwitchContext+0xf0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b36c:	4a2b      	ldr	r2, [pc, #172]	@ (800b41c <vTaskSwitchContext+0xe8>)
 800b36e:	6810      	ldr	r0, [r2, #0]
 800b370:	4a2b      	ldr	r2, [pc, #172]	@ (800b420 <vTaskSwitchContext+0xec>)
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	1a82      	subs	r2, r0, r2
 800b376:	440a      	add	r2, r1
 800b378:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b37a:	4b28      	ldr	r3, [pc, #160]	@ (800b41c <vTaskSwitchContext+0xe8>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a28      	ldr	r2, [pc, #160]	@ (800b420 <vTaskSwitchContext+0xec>)
 800b380:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b382:	4b29      	ldr	r3, [pc, #164]	@ (800b428 <vTaskSwitchContext+0xf4>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	e011      	b.n	800b3ae <vTaskSwitchContext+0x7a>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10b      	bne.n	800b3a8 <vTaskSwitchContext+0x74>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	607b      	str	r3, [r7, #4]
}
 800b3a2:	bf00      	nop
 800b3a4:	bf00      	nop
 800b3a6:	e7fd      	b.n	800b3a4 <vTaskSwitchContext+0x70>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	491f      	ldr	r1, [pc, #124]	@ (800b42c <vTaskSwitchContext+0xf8>)
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	440b      	add	r3, r1
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0e3      	beq.n	800b38a <vTaskSwitchContext+0x56>
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4a17      	ldr	r2, [pc, #92]	@ (800b42c <vTaskSwitchContext+0xf8>)
 800b3ce:	4413      	add	r3, r2
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	605a      	str	r2, [r3, #4]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d104      	bne.n	800b3f2 <vTaskSwitchContext+0xbe>
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	4a0a      	ldr	r2, [pc, #40]	@ (800b424 <vTaskSwitchContext+0xf0>)
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	4a0a      	ldr	r2, [pc, #40]	@ (800b428 <vTaskSwitchContext+0xf4>)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b402:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <vTaskSwitchContext+0xf0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3358      	adds	r3, #88	@ 0x58
 800b408:	4a09      	ldr	r2, [pc, #36]	@ (800b430 <vTaskSwitchContext+0xfc>)
 800b40a:	6013      	str	r3, [r2, #0]
}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	2000a8f0 	.word	0x2000a8f0
 800b418:	2000a8dc 	.word	0x2000a8dc
 800b41c:	2000a8f8 	.word	0x2000a8f8
 800b420:	2000a8f4 	.word	0x2000a8f4
 800b424:	2000a3f4 	.word	0x2000a3f4
 800b428:	2000a8d0 	.word	0x2000a8d0
 800b42c:	2000a3f8 	.word	0x2000a3f8
 800b430:	20000054 	.word	0x20000054

0800b434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	60fb      	str	r3, [r7, #12]
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	e7fd      	b.n	800b458 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b45c:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <vTaskPlaceOnEventList+0x48>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3318      	adds	r3, #24
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7fe f8e8 	bl	800963a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b46a:	2101      	movs	r1, #1
 800b46c:	6838      	ldr	r0, [r7, #0]
 800b46e:	f000 fb97 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	2000a3f4 	.word	0x2000a3f4

0800b480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10b      	bne.n	800b4aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	617b      	str	r3, [r7, #20]
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	e7fd      	b.n	800b4a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3318      	adds	r3, #24
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7fe f89d 	bl	80095f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b4be:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	68b8      	ldr	r0, [r7, #8]
 800b4c8:	f000 fb6a 	bl	800bba0 <prvAddCurrentTaskToDelayedList>
	}
 800b4cc:	bf00      	nop
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	2000a3f4 	.word	0x2000a3f4

0800b4d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60fb      	str	r3, [r7, #12]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	3318      	adds	r3, #24
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe f8ce 	bl	80096ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b510:	4b1d      	ldr	r3, [pc, #116]	@ (800b588 <xTaskRemoveFromEventList+0xb0>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d11d      	bne.n	800b554 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fe f8c5 	bl	80096ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b526:	4b19      	ldr	r3, [pc, #100]	@ (800b58c <xTaskRemoveFromEventList+0xb4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d903      	bls.n	800b536 <xTaskRemoveFromEventList+0x5e>
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b532:	4a16      	ldr	r2, [pc, #88]	@ (800b58c <xTaskRemoveFromEventList+0xb4>)
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4a13      	ldr	r2, [pc, #76]	@ (800b590 <xTaskRemoveFromEventList+0xb8>)
 800b544:	441a      	add	r2, r3
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	3304      	adds	r3, #4
 800b54a:	4619      	mov	r1, r3
 800b54c:	4610      	mov	r0, r2
 800b54e:	f7fe f850 	bl	80095f2 <vListInsertEnd>
 800b552:	e005      	b.n	800b560 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	3318      	adds	r3, #24
 800b558:	4619      	mov	r1, r3
 800b55a:	480e      	ldr	r0, [pc, #56]	@ (800b594 <xTaskRemoveFromEventList+0xbc>)
 800b55c:	f7fe f849 	bl	80095f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b564:	4b0c      	ldr	r3, [pc, #48]	@ (800b598 <xTaskRemoveFromEventList+0xc0>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d905      	bls.n	800b57a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b56e:	2301      	movs	r3, #1
 800b570:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b572:	4b0a      	ldr	r3, [pc, #40]	@ (800b59c <xTaskRemoveFromEventList+0xc4>)
 800b574:	2201      	movs	r2, #1
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e001      	b.n	800b57e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b57e:	697b      	ldr	r3, [r7, #20]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	2000a8f0 	.word	0x2000a8f0
 800b58c:	2000a8d0 	.word	0x2000a8d0
 800b590:	2000a3f8 	.word	0x2000a3f8
 800b594:	2000a888 	.word	0x2000a888
 800b598:	2000a3f4 	.word	0x2000a3f4
 800b59c:	2000a8dc 	.word	0x2000a8dc

0800b5a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5a8:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <vTaskInternalSetTimeOutState+0x24>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5b0:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <vTaskInternalSetTimeOutState+0x28>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	2000a8e0 	.word	0x2000a8e0
 800b5c8:	2000a8cc 	.word	0x2000a8cc

0800b5cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10b      	bne.n	800b5f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	613b      	str	r3, [r7, #16]
}
 800b5ee:	bf00      	nop
 800b5f0:	bf00      	nop
 800b5f2:	e7fd      	b.n	800b5f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10b      	bne.n	800b612 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	60fb      	str	r3, [r7, #12]
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	e7fd      	b.n	800b60e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b612:	f000 ffa1 	bl	800c558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b616:	4b1d      	ldr	r3, [pc, #116]	@ (800b68c <xTaskCheckForTimeOut+0xc0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62e:	d102      	bne.n	800b636 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b630:	2300      	movs	r3, #0
 800b632:	61fb      	str	r3, [r7, #28]
 800b634:	e023      	b.n	800b67e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4b15      	ldr	r3, [pc, #84]	@ (800b690 <xTaskCheckForTimeOut+0xc4>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d007      	beq.n	800b652 <xTaskCheckForTimeOut+0x86>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d302      	bcc.n	800b652 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b64c:	2301      	movs	r3, #1
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	e015      	b.n	800b67e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d20b      	bcs.n	800b674 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	1ad2      	subs	r2, r2, r3
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ff99 	bl	800b5a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	e004      	b.n	800b67e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b67a:	2301      	movs	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b67e:	f000 ff9d 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800b682:	69fb      	ldr	r3, [r7, #28]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3720      	adds	r7, #32
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	2000a8cc 	.word	0x2000a8cc
 800b690:	2000a8e0 	.word	0x2000a8e0

0800b694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b698:	4b03      	ldr	r3, [pc, #12]	@ (800b6a8 <vTaskMissedYield+0x14>)
 800b69a:	2201      	movs	r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
}
 800b69e:	bf00      	nop
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	2000a8dc 	.word	0x2000a8dc

0800b6ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6b4:	f000 f852 	bl	800b75c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6b8:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <prvIdleTask+0x28>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d9f9      	bls.n	800b6b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6c0:	4b05      	ldr	r3, [pc, #20]	@ (800b6d8 <prvIdleTask+0x2c>)
 800b6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6d0:	e7f0      	b.n	800b6b4 <prvIdleTask+0x8>
 800b6d2:	bf00      	nop
 800b6d4:	2000a3f8 	.word	0x2000a3f8
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	607b      	str	r3, [r7, #4]
 800b6e6:	e00c      	b.n	800b702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4a12      	ldr	r2, [pc, #72]	@ (800b73c <prvInitialiseTaskLists+0x60>)
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fd ff4e 	bl	8009598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3301      	adds	r3, #1
 800b700:	607b      	str	r3, [r7, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b37      	cmp	r3, #55	@ 0x37
 800b706:	d9ef      	bls.n	800b6e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b708:	480d      	ldr	r0, [pc, #52]	@ (800b740 <prvInitialiseTaskLists+0x64>)
 800b70a:	f7fd ff45 	bl	8009598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b70e:	480d      	ldr	r0, [pc, #52]	@ (800b744 <prvInitialiseTaskLists+0x68>)
 800b710:	f7fd ff42 	bl	8009598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b714:	480c      	ldr	r0, [pc, #48]	@ (800b748 <prvInitialiseTaskLists+0x6c>)
 800b716:	f7fd ff3f 	bl	8009598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b71a:	480c      	ldr	r0, [pc, #48]	@ (800b74c <prvInitialiseTaskLists+0x70>)
 800b71c:	f7fd ff3c 	bl	8009598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b720:	480b      	ldr	r0, [pc, #44]	@ (800b750 <prvInitialiseTaskLists+0x74>)
 800b722:	f7fd ff39 	bl	8009598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b726:	4b0b      	ldr	r3, [pc, #44]	@ (800b754 <prvInitialiseTaskLists+0x78>)
 800b728:	4a05      	ldr	r2, [pc, #20]	@ (800b740 <prvInitialiseTaskLists+0x64>)
 800b72a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	@ (800b758 <prvInitialiseTaskLists+0x7c>)
 800b72e:	4a05      	ldr	r2, [pc, #20]	@ (800b744 <prvInitialiseTaskLists+0x68>)
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	2000a3f8 	.word	0x2000a3f8
 800b740:	2000a858 	.word	0x2000a858
 800b744:	2000a86c 	.word	0x2000a86c
 800b748:	2000a888 	.word	0x2000a888
 800b74c:	2000a89c 	.word	0x2000a89c
 800b750:	2000a8b4 	.word	0x2000a8b4
 800b754:	2000a880 	.word	0x2000a880
 800b758:	2000a884 	.word	0x2000a884

0800b75c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b762:	e019      	b.n	800b798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b764:	f000 fef8 	bl	800c558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b768:	4b10      	ldr	r3, [pc, #64]	@ (800b7ac <prvCheckTasksWaitingTermination+0x50>)
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3304      	adds	r3, #4
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd ff99 	bl	80096ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b77a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b0 <prvCheckTasksWaitingTermination+0x54>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3b01      	subs	r3, #1
 800b780:	4a0b      	ldr	r2, [pc, #44]	@ (800b7b0 <prvCheckTasksWaitingTermination+0x54>)
 800b782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b784:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <prvCheckTasksWaitingTermination+0x58>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3b01      	subs	r3, #1
 800b78a:	4a0a      	ldr	r2, [pc, #40]	@ (800b7b4 <prvCheckTasksWaitingTermination+0x58>)
 800b78c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b78e:	f000 ff15 	bl	800c5bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f810 	bl	800b7b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b798:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <prvCheckTasksWaitingTermination+0x58>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e1      	bne.n	800b764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	2000a89c 	.word	0x2000a89c
 800b7b0:	2000a8c8 	.word	0x2000a8c8
 800b7b4:	2000a8b0 	.word	0x2000a8b0

0800b7b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3358      	adds	r3, #88	@ 0x58
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f012 fed7 	bl	801e578 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d108      	bne.n	800b7e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f001 f8ad 	bl	800c938 <vPortFree>
				vPortFree( pxTCB );
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f001 f8aa 	bl	800c938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7e4:	e019      	b.n	800b81a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d103      	bne.n	800b7f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f8a1 	bl	800c938 <vPortFree>
	}
 800b7f6:	e010      	b.n	800b81a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d00b      	beq.n	800b81a <prvDeleteTCB+0x62>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	60fb      	str	r3, [r7, #12]
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	e7fd      	b.n	800b816 <prvDeleteTCB+0x5e>
	}
 800b81a:	bf00      	nop
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b82a:	4b0c      	ldr	r3, [pc, #48]	@ (800b85c <prvResetNextTaskUnblockTime+0x38>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d104      	bne.n	800b83e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b834:	4b0a      	ldr	r3, [pc, #40]	@ (800b860 <prvResetNextTaskUnblockTime+0x3c>)
 800b836:	f04f 32ff 	mov.w	r2, #4294967295
 800b83a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b83c:	e008      	b.n	800b850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b83e:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <prvResetNextTaskUnblockTime+0x38>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	4a04      	ldr	r2, [pc, #16]	@ (800b860 <prvResetNextTaskUnblockTime+0x3c>)
 800b84e:	6013      	str	r3, [r2, #0]
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	2000a880 	.word	0x2000a880
 800b860:	2000a8e8 	.word	0x2000a8e8

0800b864 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b86a:	4b05      	ldr	r3, [pc, #20]	@ (800b880 <xTaskGetCurrentTaskHandle+0x1c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b870:	687b      	ldr	r3, [r7, #4]
	}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	2000a3f4 	.word	0x2000a3f4

0800b884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b88a:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b8 <xTaskGetSchedulerState+0x34>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b892:	2301      	movs	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	e008      	b.n	800b8aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b898:	4b08      	ldr	r3, [pc, #32]	@ (800b8bc <xTaskGetSchedulerState+0x38>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	607b      	str	r3, [r7, #4]
 800b8a4:	e001      	b.n	800b8aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8aa:	687b      	ldr	r3, [r7, #4]
	}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	2000a8d4 	.word	0x2000a8d4
 800b8bc:	2000a8f0 	.word	0x2000a8f0

0800b8c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d051      	beq.n	800b97a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8da:	4b2a      	ldr	r3, [pc, #168]	@ (800b984 <xTaskPriorityInherit+0xc4>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d241      	bcs.n	800b968 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db06      	blt.n	800b8fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ec:	4b25      	ldr	r3, [pc, #148]	@ (800b984 <xTaskPriorityInherit+0xc4>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6959      	ldr	r1, [r3, #20]
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4a1f      	ldr	r2, [pc, #124]	@ (800b988 <xTaskPriorityInherit+0xc8>)
 800b90c:	4413      	add	r3, r2
 800b90e:	4299      	cmp	r1, r3
 800b910:	d122      	bne.n	800b958 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	3304      	adds	r3, #4
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd fec8 	bl	80096ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b91c:	4b19      	ldr	r3, [pc, #100]	@ (800b984 <xTaskPriorityInherit+0xc4>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4b18      	ldr	r3, [pc, #96]	@ (800b98c <xTaskPriorityInherit+0xcc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d903      	bls.n	800b93a <xTaskPriorityInherit+0x7a>
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b936:	4a15      	ldr	r2, [pc, #84]	@ (800b98c <xTaskPriorityInherit+0xcc>)
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4a10      	ldr	r2, [pc, #64]	@ (800b988 <xTaskPriorityInherit+0xc8>)
 800b948:	441a      	add	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f7fd fe4e 	bl	80095f2 <vListInsertEnd>
 800b956:	e004      	b.n	800b962 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b958:	4b0a      	ldr	r3, [pc, #40]	@ (800b984 <xTaskPriorityInherit+0xc4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b962:	2301      	movs	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	e008      	b.n	800b97a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b96c:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <xTaskPriorityInherit+0xc4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b972:	429a      	cmp	r2, r3
 800b974:	d201      	bcs.n	800b97a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b976:	2301      	movs	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b97a:	68fb      	ldr	r3, [r7, #12]
	}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	2000a3f4 	.word	0x2000a3f4
 800b988:	2000a3f8 	.word	0x2000a3f8
 800b98c:	2000a8d0 	.word	0x2000a8d0

0800b990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d058      	beq.n	800ba58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9a6:	4b2f      	ldr	r3, [pc, #188]	@ (800ba64 <xTaskPriorityDisinherit+0xd4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d00b      	beq.n	800b9c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	60fb      	str	r3, [r7, #12]
}
 800b9c2:	bf00      	nop
 800b9c4:	bf00      	nop
 800b9c6:	e7fd      	b.n	800b9c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10b      	bne.n	800b9e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	60bb      	str	r3, [r7, #8]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ec:	1e5a      	subs	r2, r3, #1
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d02c      	beq.n	800ba58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d128      	bne.n	800ba58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fd fe4e 	bl	80096ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	4b0f      	ldr	r3, [pc, #60]	@ (800ba68 <xTaskPriorityDisinherit+0xd8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d903      	bls.n	800ba38 <xTaskPriorityDisinherit+0xa8>
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba34:	4a0c      	ldr	r2, [pc, #48]	@ (800ba68 <xTaskPriorityDisinherit+0xd8>)
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4a09      	ldr	r2, [pc, #36]	@ (800ba6c <xTaskPriorityDisinherit+0xdc>)
 800ba46:	441a      	add	r2, r3
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7fd fdcf 	bl	80095f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba54:	2301      	movs	r3, #1
 800ba56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba58:	697b      	ldr	r3, [r7, #20]
	}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2000a3f4 	.word	0x2000a3f4
 800ba68:	2000a8d0 	.word	0x2000a8d0
 800ba6c:	2000a3f8 	.word	0x2000a3f8

0800ba70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d06c      	beq.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10b      	bne.n	800baa8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	60fb      	str	r3, [r7, #12]
}
 800baa2:	bf00      	nop
 800baa4:	bf00      	nop
 800baa6:	e7fd      	b.n	800baa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d902      	bls.n	800bab8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	e002      	b.n	800babe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800babc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	69fa      	ldr	r2, [r7, #28]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d04c      	beq.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d147      	bne.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bad2:	4b26      	ldr	r3, [pc, #152]	@ (800bb6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d10b      	bne.n	800baf4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60bb      	str	r3, [r7, #8]
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	db04      	blt.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	6959      	ldr	r1, [r3, #20]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4a13      	ldr	r2, [pc, #76]	@ (800bb70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb22:	4413      	add	r3, r2
 800bb24:	4299      	cmp	r1, r3
 800bb26:	d11c      	bne.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fd fdbd 	bl	80096ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	4b0f      	ldr	r3, [pc, #60]	@ (800bb74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d903      	bls.n	800bb46 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb42:	4a0c      	ldr	r2, [pc, #48]	@ (800bb74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4a07      	ldr	r2, [pc, #28]	@ (800bb70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb54:	441a      	add	r2, r3
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	3304      	adds	r3, #4
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	f7fd fd48 	bl	80095f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb62:	bf00      	nop
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2000a3f4 	.word	0x2000a3f4
 800bb70:	2000a3f8 	.word	0x2000a3f8
 800bb74:	2000a8d0 	.word	0x2000a8d0

0800bb78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb7c:	4b07      	ldr	r3, [pc, #28]	@ (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb8a:	3201      	adds	r2, #1
 800bb8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bb8e:	4b03      	ldr	r3, [pc, #12]	@ (800bb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb90:	681b      	ldr	r3, [r3, #0]
	}
 800bb92:	4618      	mov	r0, r3
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	2000a3f4 	.word	0x2000a3f4

0800bba0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbaa:	4b21      	ldr	r3, [pc, #132]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb0:	4b20      	ldr	r3, [pc, #128]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fd fd78 	bl	80096ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc2:	d10a      	bne.n	800bbda <prvAddCurrentTaskToDelayedList+0x3a>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbca:	4b1a      	ldr	r3, [pc, #104]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4819      	ldr	r0, [pc, #100]	@ (800bc38 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbd4:	f7fd fd0d 	bl	80095f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbd8:	e026      	b.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbe2:	4b14      	ldr	r3, [pc, #80]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d209      	bcs.n	800bc06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf2:	4b12      	ldr	r3, [pc, #72]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fd fd1b 	bl	800963a <vListInsert>
}
 800bc04:	e010      	b.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc06:	4b0e      	ldr	r3, [pc, #56]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fd fd11 	bl	800963a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc18:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d202      	bcs.n	800bc28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc22:	4a08      	ldr	r2, [pc, #32]	@ (800bc44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	6013      	str	r3, [r2, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000a8cc 	.word	0x2000a8cc
 800bc34:	2000a3f4 	.word	0x2000a3f4
 800bc38:	2000a8b4 	.word	0x2000a8b4
 800bc3c:	2000a884 	.word	0x2000a884
 800bc40:	2000a880 	.word	0x2000a880
 800bc44:	2000a8e8 	.word	0x2000a8e8

0800bc48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	@ 0x28
 800bc4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc52:	f000 fb13 	bl	800c27c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc56:	4b1d      	ldr	r3, [pc, #116]	@ (800bccc <xTimerCreateTimerTask+0x84>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d021      	beq.n	800bca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc66:	1d3a      	adds	r2, r7, #4
 800bc68:	f107 0108 	add.w	r1, r7, #8
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fc77 	bl	8009564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	9202      	str	r2, [sp, #8]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	2302      	movs	r3, #2
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	460a      	mov	r2, r1
 800bc88:	4911      	ldr	r1, [pc, #68]	@ (800bcd0 <xTimerCreateTimerTask+0x88>)
 800bc8a:	4812      	ldr	r0, [pc, #72]	@ (800bcd4 <xTimerCreateTimerTask+0x8c>)
 800bc8c:	f7fe fe5a 	bl	800a944 <xTaskCreateStatic>
 800bc90:	4603      	mov	r3, r0
 800bc92:	4a11      	ldr	r2, [pc, #68]	@ (800bcd8 <xTimerCreateTimerTask+0x90>)
 800bc94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc96:	4b10      	ldr	r3, [pc, #64]	@ (800bcd8 <xTimerCreateTimerTask+0x90>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10b      	bne.n	800bcc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	613b      	str	r3, [r7, #16]
}
 800bcba:	bf00      	nop
 800bcbc:	bf00      	nop
 800bcbe:	e7fd      	b.n	800bcbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcc0:	697b      	ldr	r3, [r7, #20]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	2000a92c 	.word	0x2000a92c
 800bcd0:	08021d9c 	.word	0x08021d9c
 800bcd4:	0800be15 	.word	0x0800be15
 800bcd8:	2000a930 	.word	0x2000a930

0800bcdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	@ 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10b      	bne.n	800bd0c <xTimerGenericCommand+0x30>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	623b      	str	r3, [r7, #32]
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd0c:	4b19      	ldr	r3, [pc, #100]	@ (800bd74 <xTimerGenericCommand+0x98>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d02a      	beq.n	800bd6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	dc18      	bgt.n	800bd58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd26:	f7ff fdad 	bl	800b884 <xTaskGetSchedulerState>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d109      	bne.n	800bd44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd30:	4b10      	ldr	r3, [pc, #64]	@ (800bd74 <xTimerGenericCommand+0x98>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	f107 0110 	add.w	r1, r7, #16
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd3c:	f7fd ff4c 	bl	8009bd8 <xQueueGenericSend>
 800bd40:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd42:	e012      	b.n	800bd6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd44:	4b0b      	ldr	r3, [pc, #44]	@ (800bd74 <xTimerGenericCommand+0x98>)
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	f107 0110 	add.w	r1, r7, #16
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f7fd ff42 	bl	8009bd8 <xQueueGenericSend>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd56:	e008      	b.n	800bd6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd58:	4b06      	ldr	r3, [pc, #24]	@ (800bd74 <xTimerGenericCommand+0x98>)
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	f107 0110 	add.w	r1, r7, #16
 800bd60:	2300      	movs	r3, #0
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	f7fe f83a 	bl	8009ddc <xQueueGenericSendFromISR>
 800bd68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3728      	adds	r7, #40	@ 0x28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	2000a92c 	.word	0x2000a92c

0800bd78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af02      	add	r7, sp, #8
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd82:	4b23      	ldr	r3, [pc, #140]	@ (800be10 <prvProcessExpiredTimer+0x98>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fd fc8b 	bl	80096ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d023      	beq.n	800bdec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	18d1      	adds	r1, r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	6978      	ldr	r0, [r7, #20]
 800bdb2:	f000 f8d5 	bl	800bf60 <prvInsertTimerInActiveList>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d020      	beq.n	800bdfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	6978      	ldr	r0, [r7, #20]
 800bdc8:	f7ff ff88 	bl	800bcdc <xTimerGenericCommand>
 800bdcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d114      	bne.n	800bdfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	60fb      	str	r3, [r7, #12]
}
 800bde6:	bf00      	nop
 800bde8:	bf00      	nop
 800bdea:	e7fd      	b.n	800bde8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdf2:	f023 0301 	bic.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	6978      	ldr	r0, [r7, #20]
 800be04:	4798      	blx	r3
}
 800be06:	bf00      	nop
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	2000a924 	.word	0x2000a924

0800be14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1c:	f107 0308 	add.w	r3, r7, #8
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f859 	bl	800bed8 <prvGetNextExpireTime>
 800be26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4619      	mov	r1, r3
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f805 	bl	800be3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be32:	f000 f8d7 	bl	800bfe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be36:	bf00      	nop
 800be38:	e7f0      	b.n	800be1c <prvTimerTask+0x8>
	...

0800be3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be46:	f7ff f8ed 	bl	800b024 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 f866 	bl	800bf20 <prvSampleTimeNow>
 800be54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d130      	bne.n	800bebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10a      	bne.n	800be78 <prvProcessTimerOrBlockTask+0x3c>
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	429a      	cmp	r2, r3
 800be68:	d806      	bhi.n	800be78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be6a:	f7ff f8e9 	bl	800b040 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff ff81 	bl	800bd78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be76:	e024      	b.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d008      	beq.n	800be90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be7e:	4b13      	ldr	r3, [pc, #76]	@ (800becc <prvProcessTimerOrBlockTask+0x90>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <prvProcessTimerOrBlockTask+0x50>
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <prvProcessTimerOrBlockTask+0x52>
 800be8c:	2300      	movs	r3, #0
 800be8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be90:	4b0f      	ldr	r3, [pc, #60]	@ (800bed0 <prvProcessTimerOrBlockTask+0x94>)
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	4619      	mov	r1, r3
 800be9e:	f7fe fd1d 	bl	800a8dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bea2:	f7ff f8cd 	bl	800b040 <xTaskResumeAll>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10a      	bne.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800beac:	4b09      	ldr	r3, [pc, #36]	@ (800bed4 <prvProcessTimerOrBlockTask+0x98>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
}
 800bebc:	e001      	b.n	800bec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bebe:	f7ff f8bf 	bl	800b040 <xTaskResumeAll>
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000a928 	.word	0x2000a928
 800bed0:	2000a92c 	.word	0x2000a92c
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bee0:	4b0e      	ldr	r3, [pc, #56]	@ (800bf1c <prvGetNextExpireTime+0x44>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <prvGetNextExpireTime+0x16>
 800beea:	2201      	movs	r2, #1
 800beec:	e000      	b.n	800bef0 <prvGetNextExpireTime+0x18>
 800beee:	2200      	movs	r2, #0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d105      	bne.n	800bf08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800befc:	4b07      	ldr	r3, [pc, #28]	@ (800bf1c <prvGetNextExpireTime+0x44>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	60fb      	str	r3, [r7, #12]
 800bf06:	e001      	b.n	800bf0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	2000a924 	.word	0x2000a924

0800bf20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf28:	f7ff f928 	bl	800b17c <xTaskGetTickCount>
 800bf2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf5c <prvSampleTimeNow+0x3c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d205      	bcs.n	800bf44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf38:	f000 f93a 	bl	800c1b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	e002      	b.n	800bf4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf4a:	4a04      	ldr	r2, [pc, #16]	@ (800bf5c <prvSampleTimeNow+0x3c>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000a934 	.word	0x2000a934

0800bf60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d812      	bhi.n	800bfac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d302      	bcc.n	800bf9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf94:	2301      	movs	r3, #1
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e01b      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf9a:	4b10      	ldr	r3, [pc, #64]	@ (800bfdc <prvInsertTimerInActiveList+0x7c>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fd fb48 	bl	800963a <vListInsert>
 800bfaa:	e012      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d206      	bcs.n	800bfc2 <prvInsertTimerInActiveList+0x62>
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d302      	bcc.n	800bfc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	e007      	b.n	800bfd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfc2:	4b07      	ldr	r3, [pc, #28]	@ (800bfe0 <prvInsertTimerInActiveList+0x80>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7fd fb34 	bl	800963a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfd2:	697b      	ldr	r3, [r7, #20]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	2000a928 	.word	0x2000a928
 800bfe0:	2000a924 	.word	0x2000a924

0800bfe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08e      	sub	sp, #56	@ 0x38
 800bfe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfea:	e0ce      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da19      	bge.n	800c026 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bff2:	1d3b      	adds	r3, r7, #4
 800bff4:	3304      	adds	r3, #4
 800bff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10b      	bne.n	800c016 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	61fb      	str	r3, [r7, #28]
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	e7fd      	b.n	800c012 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c01c:	6850      	ldr	r0, [r2, #4]
 800c01e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c020:	6892      	ldr	r2, [r2, #8]
 800c022:	4611      	mov	r1, r2
 800c024:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f2c0 80ae 	blt.w	800c18a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d004      	beq.n	800c044 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	3304      	adds	r3, #4
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fd fb34 	bl	80096ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c044:	463b      	mov	r3, r7
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff ff6a 	bl	800bf20 <prvSampleTimeNow>
 800c04c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b09      	cmp	r3, #9
 800c052:	f200 8097 	bhi.w	800c184 <prvProcessReceivedCommands+0x1a0>
 800c056:	a201      	add	r2, pc, #4	@ (adr r2, 800c05c <prvProcessReceivedCommands+0x78>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c085 	.word	0x0800c085
 800c060:	0800c085 	.word	0x0800c085
 800c064:	0800c085 	.word	0x0800c085
 800c068:	0800c0fb 	.word	0x0800c0fb
 800c06c:	0800c10f 	.word	0x0800c10f
 800c070:	0800c15b 	.word	0x0800c15b
 800c074:	0800c085 	.word	0x0800c085
 800c078:	0800c085 	.word	0x0800c085
 800c07c:	0800c0fb 	.word	0x0800c0fb
 800c080:	0800c10f 	.word	0x0800c10f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c08a:	f043 0301 	orr.w	r3, r3, #1
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	18d1      	adds	r1, r2, r3
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a4:	f7ff ff5c 	bl	800bf60 <prvInsertTimerInActiveList>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d06c      	beq.n	800c188 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0bc:	f003 0304 	and.w	r3, r3, #4
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d061      	beq.n	800c188 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	441a      	add	r2, r3
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0d6:	f7ff fe01 	bl	800bcdc <xTimerGenericCommand>
 800c0da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d152      	bne.n	800c188 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	61bb      	str	r3, [r7, #24]
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	e7fd      	b.n	800c0f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c100:	f023 0301 	bic.w	r3, r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c10c:	e03d      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c114:	f043 0301 	orr.w	r3, r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10b      	bne.n	800c146 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	617b      	str	r3, [r7, #20]
}
 800c140:	bf00      	nop
 800c142:	bf00      	nop
 800c144:	e7fd      	b.n	800c142 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	18d1      	adds	r1, r2, r3
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c154:	f7ff ff04 	bl	800bf60 <prvInsertTimerInActiveList>
					break;
 800c158:	e017      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c16a:	f000 fbe5 	bl	800c938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c16e:	e00c      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c176:	f023 0301 	bic.w	r3, r3, #1
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c182:	e002      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c184:	bf00      	nop
 800c186:	e000      	b.n	800c18a <prvProcessReceivedCommands+0x1a6>
					break;
 800c188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c18a:	4b08      	ldr	r3, [pc, #32]	@ (800c1ac <prvProcessReceivedCommands+0x1c8>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	1d39      	adds	r1, r7, #4
 800c190:	2200      	movs	r2, #0
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd ff50 	bl	800a038 <xQueueReceive>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f47f af26 	bne.w	800bfec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	3730      	adds	r7, #48	@ 0x30
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2000a92c 	.word	0x2000a92c

0800c1b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1b6:	e049      	b.n	800c24c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fd fa6b 	bl	80096ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a1b      	ldr	r3, [r3, #32]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d02f      	beq.n	800c24c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d90e      	bls.n	800c21c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c20a:	4b1a      	ldr	r3, [pc, #104]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3304      	adds	r3, #4
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fd fa10 	bl	800963a <vListInsert>
 800c21a:	e017      	b.n	800c24c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c21c:	2300      	movs	r3, #0
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	2300      	movs	r3, #0
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	2100      	movs	r1, #0
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f7ff fd58 	bl	800bcdc <xTimerGenericCommand>
 800c22c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10b      	bne.n	800c24c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	603b      	str	r3, [r7, #0]
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	e7fd      	b.n	800c248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c24c:	4b09      	ldr	r3, [pc, #36]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1b0      	bne.n	800c1b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c256:	4b07      	ldr	r3, [pc, #28]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c25c:	4b06      	ldr	r3, [pc, #24]	@ (800c278 <prvSwitchTimerLists+0xc8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a04      	ldr	r2, [pc, #16]	@ (800c274 <prvSwitchTimerLists+0xc4>)
 800c262:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c264:	4a04      	ldr	r2, [pc, #16]	@ (800c278 <prvSwitchTimerLists+0xc8>)
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	6013      	str	r3, [r2, #0]
}
 800c26a:	bf00      	nop
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	2000a924 	.word	0x2000a924
 800c278:	2000a928 	.word	0x2000a928

0800c27c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c282:	f000 f969 	bl	800c558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c286:	4b15      	ldr	r3, [pc, #84]	@ (800c2dc <prvCheckForValidListAndQueue+0x60>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d120      	bne.n	800c2d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c28e:	4814      	ldr	r0, [pc, #80]	@ (800c2e0 <prvCheckForValidListAndQueue+0x64>)
 800c290:	f7fd f982 	bl	8009598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c294:	4813      	ldr	r0, [pc, #76]	@ (800c2e4 <prvCheckForValidListAndQueue+0x68>)
 800c296:	f7fd f97f 	bl	8009598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c29a:	4b13      	ldr	r3, [pc, #76]	@ (800c2e8 <prvCheckForValidListAndQueue+0x6c>)
 800c29c:	4a10      	ldr	r2, [pc, #64]	@ (800c2e0 <prvCheckForValidListAndQueue+0x64>)
 800c29e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2a0:	4b12      	ldr	r3, [pc, #72]	@ (800c2ec <prvCheckForValidListAndQueue+0x70>)
 800c2a2:	4a10      	ldr	r2, [pc, #64]	@ (800c2e4 <prvCheckForValidListAndQueue+0x68>)
 800c2a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	4b11      	ldr	r3, [pc, #68]	@ (800c2f0 <prvCheckForValidListAndQueue+0x74>)
 800c2ac:	4a11      	ldr	r2, [pc, #68]	@ (800c2f4 <prvCheckForValidListAndQueue+0x78>)
 800c2ae:	2110      	movs	r1, #16
 800c2b0:	200a      	movs	r0, #10
 800c2b2:	f7fd fa8f 	bl	80097d4 <xQueueGenericCreateStatic>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	4a08      	ldr	r2, [pc, #32]	@ (800c2dc <prvCheckForValidListAndQueue+0x60>)
 800c2ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2bc:	4b07      	ldr	r3, [pc, #28]	@ (800c2dc <prvCheckForValidListAndQueue+0x60>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2c4:	4b05      	ldr	r3, [pc, #20]	@ (800c2dc <prvCheckForValidListAndQueue+0x60>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	490b      	ldr	r1, [pc, #44]	@ (800c2f8 <prvCheckForValidListAndQueue+0x7c>)
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fab2 	bl	800a834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2d0:	f000 f974 	bl	800c5bc <vPortExitCritical>
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	2000a92c 	.word	0x2000a92c
 800c2e0:	2000a8fc 	.word	0x2000a8fc
 800c2e4:	2000a910 	.word	0x2000a910
 800c2e8:	2000a924 	.word	0x2000a924
 800c2ec:	2000a928 	.word	0x2000a928
 800c2f0:	2000a9d8 	.word	0x2000a9d8
 800c2f4:	2000a938 	.word	0x2000a938
 800c2f8:	08021da4 	.word	0x08021da4

0800c2fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3b04      	subs	r3, #4
 800c30c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3b04      	subs	r3, #4
 800c31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	f023 0201 	bic.w	r2, r3, #1
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3b04      	subs	r3, #4
 800c32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c32c:	4a0c      	ldr	r2, [pc, #48]	@ (800c360 <pxPortInitialiseStack+0x64>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3b14      	subs	r3, #20
 800c336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3b04      	subs	r3, #4
 800c342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f06f 0202 	mvn.w	r2, #2
 800c34a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3b20      	subs	r3, #32
 800c350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c352:	68fb      	ldr	r3, [r7, #12]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	0800c365 	.word	0x0800c365

0800c364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c36e:	4b13      	ldr	r3, [pc, #76]	@ (800c3bc <prvTaskExitError+0x58>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d00b      	beq.n	800c390 <prvTaskExitError+0x2c>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	60fb      	str	r3, [r7, #12]
}
 800c38a:	bf00      	nop
 800c38c:	bf00      	nop
 800c38e:	e7fd      	b.n	800c38c <prvTaskExitError+0x28>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	60bb      	str	r3, [r7, #8]
}
 800c3a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3a4:	bf00      	nop
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0fc      	beq.n	800c3a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20000034 	.word	0x20000034

0800c3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3c0:	4b07      	ldr	r3, [pc, #28]	@ (800c3e0 <pxCurrentTCBConst2>)
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	6808      	ldr	r0, [r1, #0]
 800c3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	f380 8809 	msr	PSP, r0
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8811 	msr	BASEPRI, r0
 800c3da:	4770      	bx	lr
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst2>:
 800c3e0:	2000a3f4 	.word	0x2000a3f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3e8:	4808      	ldr	r0, [pc, #32]	@ (800c40c <prvPortStartFirstTask+0x24>)
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	6800      	ldr	r0, [r0, #0]
 800c3ee:	f380 8808 	msr	MSP, r0
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8814 	msr	CONTROL, r0
 800c3fa:	b662      	cpsie	i
 800c3fc:	b661      	cpsie	f
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	df00      	svc	0
 800c408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c40a:	bf00      	nop
 800c40c:	e000ed08 	.word	0xe000ed08

0800c410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c416:	4b47      	ldr	r3, [pc, #284]	@ (800c534 <xPortStartScheduler+0x124>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a47      	ldr	r2, [pc, #284]	@ (800c538 <xPortStartScheduler+0x128>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10b      	bne.n	800c438 <xPortStartScheduler+0x28>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c438:	4b3e      	ldr	r3, [pc, #248]	@ (800c534 <xPortStartScheduler+0x124>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a3f      	ldr	r2, [pc, #252]	@ (800c53c <xPortStartScheduler+0x12c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d10b      	bne.n	800c45a <xPortStartScheduler+0x4a>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60fb      	str	r3, [r7, #12]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c45a:	4b39      	ldr	r3, [pc, #228]	@ (800c540 <xPortStartScheduler+0x130>)
 800c45c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	22ff      	movs	r2, #255	@ 0xff
 800c46a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4b31      	ldr	r3, [pc, #196]	@ (800c544 <xPortStartScheduler+0x134>)
 800c480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c482:	4b31      	ldr	r3, [pc, #196]	@ (800c548 <xPortStartScheduler+0x138>)
 800c484:	2207      	movs	r2, #7
 800c486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c488:	e009      	b.n	800c49e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c48a:	4b2f      	ldr	r3, [pc, #188]	@ (800c548 <xPortStartScheduler+0x138>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3b01      	subs	r3, #1
 800c490:	4a2d      	ldr	r2, [pc, #180]	@ (800c548 <xPortStartScheduler+0x138>)
 800c492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4a6:	2b80      	cmp	r3, #128	@ 0x80
 800c4a8:	d0ef      	beq.n	800c48a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4aa:	4b27      	ldr	r3, [pc, #156]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f1c3 0307 	rsb	r3, r3, #7
 800c4b2:	2b04      	cmp	r3, #4
 800c4b4:	d00b      	beq.n	800c4ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	60bb      	str	r3, [r7, #8]
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	021b      	lsls	r3, r3, #8
 800c4d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4e0:	4a19      	ldr	r2, [pc, #100]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4ec:	4b17      	ldr	r3, [pc, #92]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a16      	ldr	r2, [pc, #88]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4f8:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a13      	ldr	r2, [pc, #76]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c504:	f000 f8da 	bl	800c6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c508:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <xPortStartScheduler+0x140>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c50e:	f000 f8f9 	bl	800c704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c512:	4b10      	ldr	r3, [pc, #64]	@ (800c554 <xPortStartScheduler+0x144>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a0f      	ldr	r2, [pc, #60]	@ (800c554 <xPortStartScheduler+0x144>)
 800c518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c51c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c51e:	f7ff ff63 	bl	800c3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c522:	f7fe ff07 	bl	800b334 <vTaskSwitchContext>
	prvTaskExitError();
 800c526:	f7ff ff1d 	bl	800c364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	e000ed00 	.word	0xe000ed00
 800c538:	410fc271 	.word	0x410fc271
 800c53c:	410fc270 	.word	0x410fc270
 800c540:	e000e400 	.word	0xe000e400
 800c544:	2000aa28 	.word	0x2000aa28
 800c548:	2000aa2c 	.word	0x2000aa2c
 800c54c:	e000ed20 	.word	0xe000ed20
 800c550:	20000034 	.word	0x20000034
 800c554:	e000ef34 	.word	0xe000ef34

0800c558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	607b      	str	r3, [r7, #4]
}
 800c570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c572:	4b10      	ldr	r3, [pc, #64]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3301      	adds	r3, #1
 800c578:	4a0e      	ldr	r2, [pc, #56]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c57a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c57c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d110      	bne.n	800c5a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c584:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b8 <vPortEnterCritical+0x60>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00b      	beq.n	800c5a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	603b      	str	r3, [r7, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	e7fd      	b.n	800c5a2 <vPortEnterCritical+0x4a>
	}
}
 800c5a6:	bf00      	nop
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20000034 	.word	0x20000034
 800c5b8:	e000ed04 	.word	0xe000ed04

0800c5bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5c2:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <vPortExitCritical+0x50>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10b      	bne.n	800c5e2 <vPortExitCritical+0x26>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	607b      	str	r3, [r7, #4]
}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	e7fd      	b.n	800c5de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c60c <vPortExitCritical+0x50>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	4a08      	ldr	r2, [pc, #32]	@ (800c60c <vPortExitCritical+0x50>)
 800c5ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5ec:	4b07      	ldr	r3, [pc, #28]	@ (800c60c <vPortExitCritical+0x50>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <vPortExitCritical+0x44>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
}
 800c5fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	20000034 	.word	0x20000034

0800c610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c610:	f3ef 8009 	mrs	r0, PSP
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4b15      	ldr	r3, [pc, #84]	@ (800c670 <pxCurrentTCBConst>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f01e 0f10 	tst.w	lr, #16
 800c620:	bf08      	it	eq
 800c622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c634:	f380 8811 	msr	BASEPRI, r0
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f7fe fe78 	bl	800b334 <vTaskSwitchContext>
 800c644:	f04f 0000 	mov.w	r0, #0
 800c648:	f380 8811 	msr	BASEPRI, r0
 800c64c:	bc09      	pop	{r0, r3}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f01e 0f10 	tst.w	lr, #16
 800c65a:	bf08      	it	eq
 800c65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c660:	f380 8809 	msr	PSP, r0
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst>:
 800c670:	2000a3f4 	.word	0x2000a3f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c692:	f7fe fd95 	bl	800b1c0 <xTaskIncrementTick>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <xPortSysTickHandler+0x40>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f383 8811 	msr	BASEPRI, r3
}
 800c6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f4 <vPortSetupTimerInterrupt+0x38>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6fc <vPortSetupTimerInterrupt+0x40>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	4a09      	ldr	r2, [pc, #36]	@ (800c700 <vPortSetupTimerInterrupt+0x44>)
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6de:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	e000e010 	.word	0xe000e010
 800c6f4:	e000e018 	.word	0xe000e018
 800c6f8:	20000014 	.word	0x20000014
 800c6fc:	10624dd3 	.word	0x10624dd3
 800c700:	e000e014 	.word	0xe000e014

0800c704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c714 <vPortEnableVFP+0x10>
 800c708:	6801      	ldr	r1, [r0, #0]
 800c70a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c70e:	6001      	str	r1, [r0, #0]
 800c710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c712:	bf00      	nop
 800c714:	e000ed88 	.word	0xe000ed88

0800c718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c71e:	f3ef 8305 	mrs	r3, IPSR
 800c722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b0f      	cmp	r3, #15
 800c728:	d915      	bls.n	800c756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c72a:	4a18      	ldr	r2, [pc, #96]	@ (800c78c <vPortValidateInterruptPriority+0x74>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c734:	4b16      	ldr	r3, [pc, #88]	@ (800c790 <vPortValidateInterruptPriority+0x78>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	7afa      	ldrb	r2, [r7, #11]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d20b      	bcs.n	800c756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c756:	4b0f      	ldr	r3, [pc, #60]	@ (800c794 <vPortValidateInterruptPriority+0x7c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c75e:	4b0e      	ldr	r3, [pc, #56]	@ (800c798 <vPortValidateInterruptPriority+0x80>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d90b      	bls.n	800c77e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	603b      	str	r3, [r7, #0]
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	e7fd      	b.n	800c77a <vPortValidateInterruptPriority+0x62>
	}
 800c77e:	bf00      	nop
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	e000e3f0 	.word	0xe000e3f0
 800c790:	2000aa28 	.word	0x2000aa28
 800c794:	e000ed0c 	.word	0xe000ed0c
 800c798:	2000aa2c 	.word	0x2000aa2c

0800c79c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	@ 0x28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7a8:	f7fe fc3c 	bl	800b024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c920 <pvPortMalloc+0x184>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7b4:	f000 f924 	bl	800ca00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c924 <pvPortMalloc+0x188>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f040 8095 	bne.w	800c8f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01e      	beq.n	800c80a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7cc:	2208      	movs	r2, #8
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d015      	beq.n	800c80a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f003 0307 	and.w	r3, r3, #7
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00b      	beq.n	800c80a <pvPortMalloc+0x6e>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	617b      	str	r3, [r7, #20]
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	e7fd      	b.n	800c806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d06f      	beq.n	800c8f0 <pvPortMalloc+0x154>
 800c810:	4b45      	ldr	r3, [pc, #276]	@ (800c928 <pvPortMalloc+0x18c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	429a      	cmp	r2, r3
 800c818:	d86a      	bhi.n	800c8f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c81a:	4b44      	ldr	r3, [pc, #272]	@ (800c92c <pvPortMalloc+0x190>)
 800c81c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c81e:	4b43      	ldr	r3, [pc, #268]	@ (800c92c <pvPortMalloc+0x190>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c824:	e004      	b.n	800c830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d903      	bls.n	800c842 <pvPortMalloc+0xa6>
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f1      	bne.n	800c826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c842:	4b37      	ldr	r3, [pc, #220]	@ (800c920 <pvPortMalloc+0x184>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c848:	429a      	cmp	r2, r3
 800c84a:	d051      	beq.n	800c8f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2208      	movs	r2, #8
 800c852:	4413      	add	r3, r2
 800c854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1ad2      	subs	r2, r2, r3
 800c866:	2308      	movs	r3, #8
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d920      	bls.n	800c8b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4413      	add	r3, r2
 800c874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	f003 0307 	and.w	r3, r3, #7
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <pvPortMalloc+0xfc>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	613b      	str	r3, [r7, #16]
}
 800c892:	bf00      	nop
 800c894:	bf00      	nop
 800c896:	e7fd      	b.n	800c894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1ad2      	subs	r2, r2, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8aa:	69b8      	ldr	r0, [r7, #24]
 800c8ac:	f000 f90a 	bl	800cac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8be:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c930 <pvPortMalloc+0x194>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d203      	bcs.n	800c8d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ca:	4b17      	ldr	r3, [pc, #92]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a18      	ldr	r2, [pc, #96]	@ (800c930 <pvPortMalloc+0x194>)
 800c8d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <pvPortMalloc+0x188>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <pvPortMalloc+0x198>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	4a11      	ldr	r2, [pc, #68]	@ (800c934 <pvPortMalloc+0x198>)
 800c8ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8f0:	f7fe fba6 	bl	800b040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <pvPortMalloc+0x17a>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60fb      	str	r3, [r7, #12]
}
 800c910:	bf00      	nop
 800c912:	bf00      	nop
 800c914:	e7fd      	b.n	800c912 <pvPortMalloc+0x176>
	return pvReturn;
 800c916:	69fb      	ldr	r3, [r7, #28]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3728      	adds	r7, #40	@ 0x28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	2000e8b8 	.word	0x2000e8b8
 800c924:	2000e8cc 	.word	0x2000e8cc
 800c928:	2000e8bc 	.word	0x2000e8bc
 800c92c:	2000e8b0 	.word	0x2000e8b0
 800c930:	2000e8c0 	.word	0x2000e8c0
 800c934:	2000e8c4 	.word	0x2000e8c4

0800c938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d04f      	beq.n	800c9ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c94a:	2308      	movs	r3, #8
 800c94c:	425b      	negs	r3, r3
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	4413      	add	r3, r2
 800c952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b25      	ldr	r3, [pc, #148]	@ (800c9f4 <vPortFree+0xbc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4013      	ands	r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10b      	bne.n	800c97e <vPortFree+0x46>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60fb      	str	r3, [r7, #12]
}
 800c978:	bf00      	nop
 800c97a:	bf00      	nop
 800c97c:	e7fd      	b.n	800c97a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <vPortFree+0x66>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60bb      	str	r3, [r7, #8]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	685a      	ldr	r2, [r3, #4]
 800c9a2:	4b14      	ldr	r3, [pc, #80]	@ (800c9f4 <vPortFree+0xbc>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01e      	beq.n	800c9ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11a      	bne.n	800c9ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f4 <vPortFree+0xbc>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	401a      	ands	r2, r3
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9c4:	f7fe fb2e 	bl	800b024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <vPortFree+0xc0>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	4a09      	ldr	r2, [pc, #36]	@ (800c9f8 <vPortFree+0xc0>)
 800c9d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9d6:	6938      	ldr	r0, [r7, #16]
 800c9d8:	f000 f874 	bl	800cac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9dc:	4b07      	ldr	r3, [pc, #28]	@ (800c9fc <vPortFree+0xc4>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	4a06      	ldr	r2, [pc, #24]	@ (800c9fc <vPortFree+0xc4>)
 800c9e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9e6:	f7fe fb2b 	bl	800b040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9ea:	bf00      	nop
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	2000e8cc 	.word	0x2000e8cc
 800c9f8:	2000e8bc 	.word	0x2000e8bc
 800c9fc:	2000e8c8 	.word	0x2000e8c8

0800ca00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca06:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800ca0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca0c:	4b27      	ldr	r3, [pc, #156]	@ (800caac <prvHeapInit+0xac>)
 800ca0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00c      	beq.n	800ca34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3307      	adds	r3, #7
 800ca1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0307 	bic.w	r3, r3, #7
 800ca26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	4a1f      	ldr	r2, [pc, #124]	@ (800caac <prvHeapInit+0xac>)
 800ca30:	4413      	add	r3, r2
 800ca32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca38:	4a1d      	ldr	r2, [pc, #116]	@ (800cab0 <prvHeapInit+0xb0>)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cab0 <prvHeapInit+0xb0>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	4413      	add	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	1a9b      	subs	r3, r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0307 	bic.w	r3, r3, #7
 800ca5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4a15      	ldr	r2, [pc, #84]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca62:	4b14      	ldr	r3, [pc, #80]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2200      	movs	r2, #0
 800ca68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca6a:	4b12      	ldr	r3, [pc, #72]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca80:	4b0c      	ldr	r3, [pc, #48]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	4a0a      	ldr	r2, [pc, #40]	@ (800cab8 <prvHeapInit+0xb8>)
 800ca8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	4a09      	ldr	r2, [pc, #36]	@ (800cabc <prvHeapInit+0xbc>)
 800ca96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca98:	4b09      	ldr	r3, [pc, #36]	@ (800cac0 <prvHeapInit+0xc0>)
 800ca9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	bf00      	nop
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	2000aa30 	.word	0x2000aa30
 800cab0:	2000e8b0 	.word	0x2000e8b0
 800cab4:	2000e8b8 	.word	0x2000e8b8
 800cab8:	2000e8c0 	.word	0x2000e8c0
 800cabc:	2000e8bc 	.word	0x2000e8bc
 800cac0:	2000e8cc 	.word	0x2000e8cc

0800cac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cacc:	4b28      	ldr	r3, [pc, #160]	@ (800cb70 <prvInsertBlockIntoFreeList+0xac>)
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e002      	b.n	800cad8 <prvInsertBlockIntoFreeList+0x14>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d8f7      	bhi.n	800cad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	4413      	add	r3, r2
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d108      	bne.n	800cb06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	441a      	add	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	441a      	add	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d118      	bne.n	800cb4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	4b15      	ldr	r3, [pc, #84]	@ (800cb74 <prvInsertBlockIntoFreeList+0xb0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d00d      	beq.n	800cb42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685a      	ldr	r2, [r3, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	441a      	add	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	e008      	b.n	800cb54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb42:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <prvInsertBlockIntoFreeList+0xb0>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	e003      	b.n	800cb54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d002      	beq.n	800cb62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	2000e8b0 	.word	0x2000e8b0
 800cb74:	2000e8b8 	.word	0x2000e8b8

0800cb78 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	330c      	adds	r3, #12
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f002 fbdf 	bl	800f350 <tcpip_send_msg_wait_sem>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d103      	bne.n	800cba6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cba4:	e001      	b.n	800cbaa <netconn_apimsg+0x32>
  }
  return err;
 800cba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08c      	sub	sp, #48	@ 0x30
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	603a      	str	r2, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fdd5 	bl	800d778 <netconn_alloc>
 800cbce:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d054      	beq.n	800cc80 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cbd6:	79bb      	ldrb	r3, [r7, #6]
 800cbd8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800cbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbdc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cbde:	f107 0308 	add.w	r3, r7, #8
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4829      	ldr	r0, [pc, #164]	@ (800cc8c <netconn_new_with_proto_and_callback+0xd8>)
 800cbe6:	f7ff ffc7 	bl	800cb78 <netconn_apimsg>
 800cbea:	4603      	mov	r3, r0
 800cbec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800cbf0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d043      	beq.n	800cc80 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <netconn_new_with_proto_and_callback+0x58>
 800cc00:	4b23      	ldr	r3, [pc, #140]	@ (800cc90 <netconn_new_with_proto_and_callback+0xdc>)
 800cc02:	22a3      	movs	r2, #163	@ 0xa3
 800cc04:	4923      	ldr	r1, [pc, #140]	@ (800cc94 <netconn_new_with_proto_and_callback+0xe0>)
 800cc06:	4824      	ldr	r0, [pc, #144]	@ (800cc98 <netconn_new_with_proto_and_callback+0xe4>)
 800cc08:	f011 fbd6 	bl	801e3b8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0e:	3310      	adds	r3, #16
 800cc10:	4618      	mov	r0, r3
 800cc12:	f010 f99b 	bl	801cf4c <sys_mbox_valid>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d105      	bne.n	800cc28 <netconn_new_with_proto_and_callback+0x74>
 800cc1c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc90 <netconn_new_with_proto_and_callback+0xdc>)
 800cc1e:	22a4      	movs	r2, #164	@ 0xa4
 800cc20:	491e      	ldr	r1, [pc, #120]	@ (800cc9c <netconn_new_with_proto_and_callback+0xe8>)
 800cc22:	481d      	ldr	r0, [pc, #116]	@ (800cc98 <netconn_new_with_proto_and_callback+0xe4>)
 800cc24:	f011 fbc8 	bl	801e3b8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800cc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2a:	3314      	adds	r3, #20
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f010 f98d 	bl	801cf4c <sys_mbox_valid>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <netconn_new_with_proto_and_callback+0x90>
 800cc38:	4b15      	ldr	r3, [pc, #84]	@ (800cc90 <netconn_new_with_proto_and_callback+0xdc>)
 800cc3a:	22a6      	movs	r2, #166	@ 0xa6
 800cc3c:	4918      	ldr	r1, [pc, #96]	@ (800cca0 <netconn_new_with_proto_and_callback+0xec>)
 800cc3e:	4816      	ldr	r0, [pc, #88]	@ (800cc98 <netconn_new_with_proto_and_callback+0xe4>)
 800cc40:	f011 fbba 	bl	801e3b8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc46:	330c      	adds	r3, #12
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f010 fa0d 	bl	801d068 <sys_sem_valid>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d105      	bne.n	800cc60 <netconn_new_with_proto_and_callback+0xac>
 800cc54:	4b0e      	ldr	r3, [pc, #56]	@ (800cc90 <netconn_new_with_proto_and_callback+0xdc>)
 800cc56:	22a9      	movs	r2, #169	@ 0xa9
 800cc58:	4912      	ldr	r1, [pc, #72]	@ (800cca4 <netconn_new_with_proto_and_callback+0xf0>)
 800cc5a:	480f      	ldr	r0, [pc, #60]	@ (800cc98 <netconn_new_with_proto_and_callback+0xe4>)
 800cc5c:	f011 fbac 	bl	801e3b8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	330c      	adds	r3, #12
 800cc64:	4618      	mov	r0, r3
 800cc66:	f010 f9f2 	bl	801d04e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f010 f8f8 	bl	801ce64 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cc74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc76:	2007      	movs	r0, #7
 800cc78:	f003 fc06 	bl	8010488 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	e000      	b.n	800cc82 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3730      	adds	r7, #48	@ 0x30
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	0800d74d 	.word	0x0800d74d
 800cc90:	08021dac 	.word	0x08021dac
 800cc94:	08021de0 	.word	0x08021de0
 800cc98:	08021e04 	.word	0x08021e04
 800cc9c:	08021e2c 	.word	0x08021e2c
 800cca0:	08021e44 	.word	0x08021e44
 800cca4:	08021e68 	.word	0x08021e68

0800cca8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08c      	sub	sp, #48	@ 0x30
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e014      	b.n	800cce4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ccbe:	2329      	movs	r3, #41	@ 0x29
 800ccc0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ccc2:	f107 030c 	add.w	r3, r7, #12
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4808      	ldr	r0, [pc, #32]	@ (800ccec <netconn_prepare_delete+0x44>)
 800ccca:	f7ff ff55 	bl	800cb78 <netconn_apimsg>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ccd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d002      	beq.n	800cce2 <netconn_prepare_delete+0x3a>
    return err;
 800ccdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800cce0:	e000      	b.n	800cce4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3730      	adds	r7, #48	@ 0x30
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	0800dcb9 	.word	0x0800dcb9

0800ccf0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <netconn_delete+0x12>
    return ERR_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e00d      	b.n	800cd1e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff ffd0 	bl	800cca8 <netconn_prepare_delete>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800cd0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <netconn_delete+0x2a>
    netconn_free(conn);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fd9d 	bl	800d854 <netconn_free>
  }
  return err;
 800cd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	@ 0x38
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	4613      	mov	r3, r2
 800cd34:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d109      	bne.n	800cd50 <netconn_connect+0x28>
 800cd3c:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <netconn_connect+0x5c>)
 800cd3e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800cd42:	4911      	ldr	r1, [pc, #68]	@ (800cd88 <netconn_connect+0x60>)
 800cd44:	4811      	ldr	r0, [pc, #68]	@ (800cd8c <netconn_connect+0x64>)
 800cd46:	f011 fb37 	bl	801e3b8 <iprintf>
 800cd4a:	f06f 030f 	mvn.w	r3, #15
 800cd4e:	e015      	b.n	800cd7c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800cd56:	4b0e      	ldr	r3, [pc, #56]	@ (800cd90 <netconn_connect+0x68>)
 800cd58:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800cd62:	88fb      	ldrh	r3, [r7, #6]
 800cd64:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800cd66:	f107 0314 	add.w	r3, r7, #20
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	4809      	ldr	r0, [pc, #36]	@ (800cd94 <netconn_connect+0x6c>)
 800cd6e:	f7ff ff03 	bl	800cb78 <netconn_apimsg>
 800cd72:	4603      	mov	r3, r0
 800cd74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800cd78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3738      	adds	r7, #56	@ 0x38
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	08021dac 	.word	0x08021dac
 800cd88:	08021f20 	.word	0x08021f20
 800cd8c:	08021e04 	.word	0x08021e04
 800cd90:	08025e1c 	.word	0x08025e1c
 800cd94:	0800dfa1 	.word	0x0800dfa1

0800cd98 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08c      	sub	sp, #48	@ 0x30
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <netconn_disconnect+0x22>
 800cda6:	4b0d      	ldr	r3, [pc, #52]	@ (800cddc <netconn_disconnect+0x44>)
 800cda8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cdac:	490c      	ldr	r1, [pc, #48]	@ (800cde0 <netconn_disconnect+0x48>)
 800cdae:	480d      	ldr	r0, [pc, #52]	@ (800cde4 <netconn_disconnect+0x4c>)
 800cdb0:	f011 fb02 	bl	801e3b8 <iprintf>
 800cdb4:	f06f 030f 	mvn.w	r3, #15
 800cdb8:	e00c      	b.n	800cdd4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4808      	ldr	r0, [pc, #32]	@ (800cde8 <netconn_disconnect+0x50>)
 800cdc6:	f7ff fed7 	bl	800cb78 <netconn_apimsg>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cdd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3730      	adds	r7, #48	@ 0x30
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	08021dac 	.word	0x08021dac
 800cde0:	08021f40 	.word	0x08021f40
 800cde4:	08021e04 	.word	0x08021e04
 800cde8:	0800e11d 	.word	0x0800e11d

0800cdec <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08c      	sub	sp, #48	@ 0x30
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d109      	bne.n	800ce10 <netconn_send+0x24>
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ce38 <netconn_send+0x4c>)
 800cdfe:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800ce02:	490e      	ldr	r1, [pc, #56]	@ (800ce3c <netconn_send+0x50>)
 800ce04:	480e      	ldr	r0, [pc, #56]	@ (800ce40 <netconn_send+0x54>)
 800ce06:	f011 fad7 	bl	801e3b8 <iprintf>
 800ce0a:	f06f 030f 	mvn.w	r3, #15
 800ce0e:	e00e      	b.n	800ce2e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800ce18:	f107 030c 	add.w	r3, r7, #12
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4809      	ldr	r0, [pc, #36]	@ (800ce44 <netconn_send+0x58>)
 800ce20:	f7ff feaa 	bl	800cb78 <netconn_apimsg>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ce2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	@ 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	08021dac 	.word	0x08021dac
 800ce3c:	08022068 	.word	0x08022068
 800ce40:	08021e04 	.word	0x08021e04
 800ce44:	0800e159 	.word	0x0800e159

0800ce48 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ce5e:	78fa      	ldrb	r2, [r7, #3]
 800ce60:	f107 0110 	add.w	r1, r7, #16
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f805 	bl	800ce7c <netconn_write_vectors_partly>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b092      	sub	sp, #72	@ 0x48
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4611      	mov	r1, r2
 800ce88:	461a      	mov	r2, r3
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	80fb      	strh	r3, [r7, #6]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d109      	bne.n	800ceac <netconn_write_vectors_partly+0x30>
 800ce98:	4b4e      	ldr	r3, [pc, #312]	@ (800cfd4 <netconn_write_vectors_partly+0x158>)
 800ce9a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ce9e:	494e      	ldr	r1, [pc, #312]	@ (800cfd8 <netconn_write_vectors_partly+0x15c>)
 800cea0:	484e      	ldr	r0, [pc, #312]	@ (800cfdc <netconn_write_vectors_partly+0x160>)
 800cea2:	f011 fa89 	bl	801e3b8 <iprintf>
 800cea6:	f06f 030f 	mvn.w	r3, #15
 800ceaa:	e08e      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ceb4:	2b10      	cmp	r3, #16
 800ceb6:	d009      	beq.n	800cecc <netconn_write_vectors_partly+0x50>
 800ceb8:	4b46      	ldr	r3, [pc, #280]	@ (800cfd4 <netconn_write_vectors_partly+0x158>)
 800ceba:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800cebe:	4948      	ldr	r1, [pc, #288]	@ (800cfe0 <netconn_write_vectors_partly+0x164>)
 800cec0:	4846      	ldr	r0, [pc, #280]	@ (800cfdc <netconn_write_vectors_partly+0x160>)
 800cec2:	f011 fa79 	bl	801e3b8 <iprintf>
 800cec6:	f06f 0305 	mvn.w	r3, #5
 800ceca:	e07e      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	7f1b      	ldrb	r3, [r3, #28]
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d104      	bne.n	800cee2 <netconn_write_vectors_partly+0x66>
 800ced8:	797b      	ldrb	r3, [r7, #5]
 800ceda:	f003 0304 	and.w	r3, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <netconn_write_vectors_partly+0x6a>
 800cee2:	2301      	movs	r3, #1
 800cee4:	e000      	b.n	800cee8 <netconn_write_vectors_partly+0x6c>
 800cee6:	2300      	movs	r3, #0
 800cee8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ceec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d005      	beq.n	800cf00 <netconn_write_vectors_partly+0x84>
 800cef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800cefa:	f06f 0305 	mvn.w	r3, #5
 800cefe:	e064      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800cf04:	2300      	movs	r3, #0
 800cf06:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf08:	e015      	b.n	800cf36 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf16:	4413      	add	r3, r2
 800cf18:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800cf1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d202      	bcs.n	800cf30 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800cf2a:	f06f 0305 	mvn.w	r3, #5
 800cf2e:	e04c      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800cf30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf32:	3301      	adds	r3, #1
 800cf34:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf36:	88fb      	ldrh	r3, [r7, #6]
 800cf38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	dbe5      	blt.n	800cf0a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800cf3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	e040      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800cf48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da0a      	bge.n	800cf64 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800cf4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d102      	bne.n	800cf5a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800cf54:	f06f 0305 	mvn.w	r3, #5
 800cf58:	e037      	b.n	800cfca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800cf5a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cf5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800cf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf62:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800cf6c:	88fb      	ldrh	r3, [r7, #6]
 800cf6e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800cf74:	797b      	ldrb	r3, [r7, #5]
 800cf76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800cf7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800cf82:	f107 0314 	add.w	r3, r7, #20
 800cf86:	4619      	mov	r1, r3
 800cf88:	4816      	ldr	r0, [pc, #88]	@ (800cfe4 <netconn_write_vectors_partly+0x168>)
 800cf8a:	f7ff fdf5 	bl	800cb78 <netconn_apimsg>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800cf94:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d114      	bne.n	800cfc6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800cf9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800cfa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800cfa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10a      	bne.n	800cfc6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d006      	beq.n	800cfc6 <netconn_write_vectors_partly+0x14a>
 800cfb8:	4b06      	ldr	r3, [pc, #24]	@ (800cfd4 <netconn_write_vectors_partly+0x158>)
 800cfba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800cfbe:	490a      	ldr	r1, [pc, #40]	@ (800cfe8 <netconn_write_vectors_partly+0x16c>)
 800cfc0:	4806      	ldr	r0, [pc, #24]	@ (800cfdc <netconn_write_vectors_partly+0x160>)
 800cfc2:	f011 f9f9 	bl	801e3b8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800cfc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3748      	adds	r7, #72	@ 0x48
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	08021dac 	.word	0x08021dac
 800cfd8:	08022084 	.word	0x08022084
 800cfdc:	08021e04 	.word	0x08021e04
 800cfe0:	080220a0 	.word	0x080220a0
 800cfe4:	0800e58d 	.word	0x0800e58d
 800cfe8:	080220c4 	.word	0x080220c4

0800cfec <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <netconn_err+0x12>
    return ERR_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e00d      	b.n	800d01a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cffe:	f010 f8af 	bl	801d160 <sys_arch_protect>
 800d002:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7a1b      	ldrb	r3, [r3, #8]
 800d008:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f010 f8b3 	bl	801d17c <sys_arch_unprotect>
  return err;
 800d016:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d02e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d032:	f113 0f0d 	cmn.w	r3, #13
 800d036:	d009      	beq.n	800d04c <lwip_netconn_err_to_msg+0x28>
 800d038:	f113 0f0d 	cmn.w	r3, #13
 800d03c:	dc0c      	bgt.n	800d058 <lwip_netconn_err_to_msg+0x34>
 800d03e:	f113 0f0f 	cmn.w	r3, #15
 800d042:	d007      	beq.n	800d054 <lwip_netconn_err_to_msg+0x30>
 800d044:	f113 0f0e 	cmn.w	r3, #14
 800d048:	d002      	beq.n	800d050 <lwip_netconn_err_to_msg+0x2c>
 800d04a:	e005      	b.n	800d058 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d04c:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <lwip_netconn_err_to_msg+0x54>)
 800d04e:	e00e      	b.n	800d06e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d050:	4b0a      	ldr	r3, [pc, #40]	@ (800d07c <lwip_netconn_err_to_msg+0x58>)
 800d052:	e00c      	b.n	800d06e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d054:	4b0a      	ldr	r3, [pc, #40]	@ (800d080 <lwip_netconn_err_to_msg+0x5c>)
 800d056:	e00a      	b.n	800d06e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d005      	beq.n	800d06c <lwip_netconn_err_to_msg+0x48>
 800d060:	4b08      	ldr	r3, [pc, #32]	@ (800d084 <lwip_netconn_err_to_msg+0x60>)
 800d062:	227d      	movs	r2, #125	@ 0x7d
 800d064:	4908      	ldr	r1, [pc, #32]	@ (800d088 <lwip_netconn_err_to_msg+0x64>)
 800d066:	4809      	ldr	r0, [pc, #36]	@ (800d08c <lwip_netconn_err_to_msg+0x68>)
 800d068:	f011 f9a6 	bl	801e3b8 <iprintf>
      return NULL;
 800d06c:	2300      	movs	r3, #0
  }
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	08025c9c 	.word	0x08025c9c
 800d07c:	08025c9d 	.word	0x08025c9d
 800d080:	08025c9e 	.word	0x08025c9e
 800d084:	0802214c 	.word	0x0802214c
 800d088:	08022180 	.word	0x08022180
 800d08c:	08022190 	.word	0x08022190

0800d090 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d105      	bne.n	800d0ac <lwip_netconn_is_err_msg+0x1c>
 800d0a0:	4b12      	ldr	r3, [pc, #72]	@ (800d0ec <lwip_netconn_is_err_msg+0x5c>)
 800d0a2:	2285      	movs	r2, #133	@ 0x85
 800d0a4:	4912      	ldr	r1, [pc, #72]	@ (800d0f0 <lwip_netconn_is_err_msg+0x60>)
 800d0a6:	4813      	ldr	r0, [pc, #76]	@ (800d0f4 <lwip_netconn_is_err_msg+0x64>)
 800d0a8:	f011 f986 	bl	801e3b8 <iprintf>

  if (msg == &netconn_aborted) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a12      	ldr	r2, [pc, #72]	@ (800d0f8 <lwip_netconn_is_err_msg+0x68>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d104      	bne.n	800d0be <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	22f3      	movs	r2, #243	@ 0xf3
 800d0b8:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e012      	b.n	800d0e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a0e      	ldr	r2, [pc, #56]	@ (800d0fc <lwip_netconn_is_err_msg+0x6c>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d104      	bne.n	800d0d0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	22f2      	movs	r2, #242	@ 0xf2
 800d0ca:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e009      	b.n	800d0e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a0b      	ldr	r2, [pc, #44]	@ (800d100 <lwip_netconn_is_err_msg+0x70>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d104      	bne.n	800d0e2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	22f1      	movs	r2, #241	@ 0xf1
 800d0dc:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e000      	b.n	800d0e4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	0802214c 	.word	0x0802214c
 800d0f0:	080221b8 	.word	0x080221b8
 800d0f4:	08022190 	.word	0x08022190
 800d0f8:	08025c9c 	.word	0x08025c9c
 800d0fc:	08025c9d 	.word	0x08025c9d
 800d100:	08025c9e 	.word	0x08025c9e

0800d104 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d105      	bne.n	800d124 <recv_udp+0x20>
 800d118:	4b34      	ldr	r3, [pc, #208]	@ (800d1ec <recv_udp+0xe8>)
 800d11a:	22e5      	movs	r2, #229	@ 0xe5
 800d11c:	4934      	ldr	r1, [pc, #208]	@ (800d1f0 <recv_udp+0xec>)
 800d11e:	4835      	ldr	r0, [pc, #212]	@ (800d1f4 <recv_udp+0xf0>)
 800d120:	f011 f94a 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d105      	bne.n	800d136 <recv_udp+0x32>
 800d12a:	4b30      	ldr	r3, [pc, #192]	@ (800d1ec <recv_udp+0xe8>)
 800d12c:	22e6      	movs	r2, #230	@ 0xe6
 800d12e:	4932      	ldr	r1, [pc, #200]	@ (800d1f8 <recv_udp+0xf4>)
 800d130:	4830      	ldr	r0, [pc, #192]	@ (800d1f4 <recv_udp+0xf0>)
 800d132:	f011 f941 	bl	801e3b8 <iprintf>
  conn = (struct netconn *)arg;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d103      	bne.n	800d148 <recv_udp+0x44>
    pbuf_free(p);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f004 f851 	bl	80111e8 <pbuf_free>
    return;
 800d146:	e04d      	b.n	800d1e4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d005      	beq.n	800d15e <recv_udp+0x5a>
 800d152:	4b26      	ldr	r3, [pc, #152]	@ (800d1ec <recv_udp+0xe8>)
 800d154:	22ee      	movs	r2, #238	@ 0xee
 800d156:	4929      	ldr	r1, [pc, #164]	@ (800d1fc <recv_udp+0xf8>)
 800d158:	4826      	ldr	r0, [pc, #152]	@ (800d1f4 <recv_udp+0xf0>)
 800d15a:	f011 f92d 	bl	801e3b8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	3310      	adds	r3, #16
 800d162:	4618      	mov	r0, r3
 800d164:	f00f fef2 	bl	801cf4c <sys_mbox_valid>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f004 f83a 	bl	80111e8 <pbuf_free>
    return;
 800d174:	e036      	b.n	800d1e4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d176:	2006      	movs	r0, #6
 800d178:	f003 f910 	bl	801039c <memp_malloc>
 800d17c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d103      	bne.n	800d18c <recv_udp+0x88>
    pbuf_free(p);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f004 f82f 	bl	80111e8 <pbuf_free>
    return;
 800d18a:	e02b      	b.n	800d1e4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d002      	beq.n	800d1a4 <recv_udp+0xa0>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	e000      	b.n	800d1a6 <recv_udp+0xa2>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d1ae:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	891b      	ldrh	r3, [r3, #8]
 800d1b4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	3310      	adds	r3, #16
 800d1ba:	69b9      	ldr	r1, [r7, #24]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f00f fe63 	bl	801ce88 <sys_mbox_trypost>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d1c8:	69b8      	ldr	r0, [r7, #24]
 800d1ca:	f001 fa89 	bl	800e6e0 <netbuf_delete>
    return;
 800d1ce:	e009      	b.n	800d1e4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <recv_udp+0xe0>
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1dc:	8afa      	ldrh	r2, [r7, #22]
 800d1de:	2100      	movs	r1, #0
 800d1e0:	69f8      	ldr	r0, [r7, #28]
 800d1e2:	4798      	blx	r3
  }
}
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0802214c 	.word	0x0802214c
 800d1f0:	080221c4 	.word	0x080221c4
 800d1f4:	08022190 	.word	0x08022190
 800d1f8:	080221e8 	.word	0x080221e8
 800d1fc:	08022208 	.word	0x08022208

0800d200 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <recv_tcp+0x22>
 800d214:	4b36      	ldr	r3, [pc, #216]	@ (800d2f0 <recv_tcp+0xf0>)
 800d216:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d21a:	4936      	ldr	r1, [pc, #216]	@ (800d2f4 <recv_tcp+0xf4>)
 800d21c:	4836      	ldr	r0, [pc, #216]	@ (800d2f8 <recv_tcp+0xf8>)
 800d21e:	f011 f8cb 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <recv_tcp+0x36>
 800d228:	4b31      	ldr	r3, [pc, #196]	@ (800d2f0 <recv_tcp+0xf0>)
 800d22a:	f240 122d 	movw	r2, #301	@ 0x12d
 800d22e:	4933      	ldr	r1, [pc, #204]	@ (800d2fc <recv_tcp+0xfc>)
 800d230:	4831      	ldr	r0, [pc, #196]	@ (800d2f8 <recv_tcp+0xf8>)
 800d232:	f011 f8c1 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d006      	beq.n	800d24c <recv_tcp+0x4c>
 800d23e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2f0 <recv_tcp+0xf0>)
 800d240:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800d244:	492e      	ldr	r1, [pc, #184]	@ (800d300 <recv_tcp+0x100>)
 800d246:	482c      	ldr	r0, [pc, #176]	@ (800d2f8 <recv_tcp+0xf8>)
 800d248:	f011 f8b6 	bl	801e3b8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <recv_tcp+0x5c>
    return ERR_VAL;
 800d256:	f06f 0305 	mvn.w	r3, #5
 800d25a:	e045      	b.n	800d2e8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	429a      	cmp	r2, r3
 800d264:	d006      	beq.n	800d274 <recv_tcp+0x74>
 800d266:	4b22      	ldr	r3, [pc, #136]	@ (800d2f0 <recv_tcp+0xf0>)
 800d268:	f240 1235 	movw	r2, #309	@ 0x135
 800d26c:	4925      	ldr	r1, [pc, #148]	@ (800d304 <recv_tcp+0x104>)
 800d26e:	4822      	ldr	r0, [pc, #136]	@ (800d2f8 <recv_tcp+0xf8>)
 800d270:	f011 f8a2 	bl	801e3b8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	3310      	adds	r3, #16
 800d278:	4618      	mov	r0, r3
 800d27a:	f00f fe67 	bl	801cf4c <sys_mbox_valid>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10d      	bne.n	800d2a0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d008      	beq.n	800d29c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	891b      	ldrh	r3, [r3, #8]
 800d28e:	4619      	mov	r1, r3
 800d290:	68b8      	ldr	r0, [r7, #8]
 800d292:	f004 ff69 	bl	8012168 <tcp_recved>
      pbuf_free(p);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f003 ffa6 	bl	80111e8 <pbuf_free>
    }
    return ERR_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e023      	b.n	800d2e8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <recv_tcp+0xb2>
    msg = p;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	891b      	ldrh	r3, [r3, #8]
 800d2ae:	83fb      	strh	r3, [r7, #30]
 800d2b0:	e003      	b.n	800d2ba <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d2b2:	4b15      	ldr	r3, [pc, #84]	@ (800d308 <recv_tcp+0x108>)
 800d2b4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	3310      	adds	r3, #16
 800d2be:	69b9      	ldr	r1, [r7, #24]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f00f fde1 	bl	801ce88 <sys_mbox_trypost>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d0:	e00a      	b.n	800d2e8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d005      	beq.n	800d2e6 <recv_tcp+0xe6>
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2de:	8bfa      	ldrh	r2, [r7, #30]
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	6978      	ldr	r0, [r7, #20]
 800d2e4:	4798      	blx	r3
  }

  return ERR_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3720      	adds	r7, #32
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	0802214c 	.word	0x0802214c
 800d2f4:	08022228 	.word	0x08022228
 800d2f8:	08022190 	.word	0x08022190
 800d2fc:	0802224c 	.word	0x0802224c
 800d300:	0802226c 	.word	0x0802226c
 800d304:	08022284 	.word	0x08022284
 800d308:	08025c9e 	.word	0x08025c9e

0800d30c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d106      	bne.n	800d32e <poll_tcp+0x22>
 800d320:	4b29      	ldr	r3, [pc, #164]	@ (800d3c8 <poll_tcp+0xbc>)
 800d322:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800d326:	4929      	ldr	r1, [pc, #164]	@ (800d3cc <poll_tcp+0xc0>)
 800d328:	4829      	ldr	r0, [pc, #164]	@ (800d3d0 <poll_tcp+0xc4>)
 800d32a:	f011 f845 	bl	801e3b8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d104      	bne.n	800d340 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d336:	2101      	movs	r1, #1
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 ff5b 	bl	800e1f4 <lwip_netconn_do_writemore>
 800d33e:	e016      	b.n	800d36e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	2b04      	cmp	r3, #4
 800d346:	d112      	bne.n	800d36e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00a      	beq.n	800d366 <poll_tcp+0x5a>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	7a5b      	ldrb	r3, [r3, #9]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	7a5a      	ldrb	r2, [r3, #9]
 800d360:	3a01      	subs	r2, #1
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d366:	2101      	movs	r1, #1
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 fb3b 	bl	800d9e4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	7f1b      	ldrb	r3, [r3, #28]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b00      	cmp	r3, #0
 800d378:	d021      	beq.n	800d3be <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d01d      	beq.n	800d3be <poll_tcp+0xb2>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d38a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d38e:	d316      	bcc.n	800d3be <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d810      	bhi.n	800d3be <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	7f1b      	ldrb	r3, [r3, #28]
 800d3a0:	f023 0310 	bic.w	r3, r3, #16
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <poll_tcp+0xb2>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	2102      	movs	r1, #2
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	0802214c 	.word	0x0802214c
 800d3cc:	080222a4 	.word	0x080222a4
 800d3d0:	08022190 	.word	0x08022190

0800d3d4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <sent_tcp+0x26>
 800d3ec:	4b20      	ldr	r3, [pc, #128]	@ (800d470 <sent_tcp+0x9c>)
 800d3ee:	f240 1293 	movw	r2, #403	@ 0x193
 800d3f2:	4920      	ldr	r1, [pc, #128]	@ (800d474 <sent_tcp+0xa0>)
 800d3f4:	4820      	ldr	r0, [pc, #128]	@ (800d478 <sent_tcp+0xa4>)
 800d3f6:	f010 ffdf 	bl	801e3b8 <iprintf>

  if (conn) {
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d032      	beq.n	800d466 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	785b      	ldrb	r3, [r3, #1]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d104      	bne.n	800d412 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d408:	2101      	movs	r1, #1
 800d40a:	6978      	ldr	r0, [r7, #20]
 800d40c:	f000 fef2 	bl	800e1f4 <lwip_netconn_do_writemore>
 800d410:	e007      	b.n	800d422 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	785b      	ldrb	r3, [r3, #1]
 800d416:	2b04      	cmp	r3, #4
 800d418:	d103      	bne.n	800d422 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d41a:	2101      	movs	r1, #1
 800d41c:	6978      	ldr	r0, [r7, #20]
 800d41e:	f000 fae1 	bl	800d9e4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01d      	beq.n	800d466 <sent_tcp+0x92>
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d432:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d436:	d316      	bcc.n	800d466 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d440:	2b04      	cmp	r3, #4
 800d442:	d810      	bhi.n	800d466 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	7f1b      	ldrb	r3, [r3, #28]
 800d448:	f023 0310 	bic.w	r3, r3, #16
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	d005      	beq.n	800d466 <sent_tcp+0x92>
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d45e:	88fa      	ldrh	r2, [r7, #6]
 800d460:	2102      	movs	r1, #2
 800d462:	6978      	ldr	r0, [r7, #20]
 800d464:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	0802214c 	.word	0x0802214c
 800d474:	080222a4 	.word	0x080222a4
 800d478:	08022190 	.word	0x08022190

0800d47c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <err_tcp+0x24>
 800d492:	4b5f      	ldr	r3, [pc, #380]	@ (800d610 <err_tcp+0x194>)
 800d494:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800d498:	495e      	ldr	r1, [pc, #376]	@ (800d614 <err_tcp+0x198>)
 800d49a:	485f      	ldr	r0, [pc, #380]	@ (800d618 <err_tcp+0x19c>)
 800d49c:	f010 ff8c 	bl	801e3b8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d4a0:	f00f fe5e 	bl	801d160 <sys_arch_protect>
 800d4a4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	78fa      	ldrb	r2, [r7, #3]
 800d4b0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	7f1b      	ldrb	r3, [r3, #28]
 800d4b6:	f043 0301 	orr.w	r3, r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	785b      	ldrb	r3, [r3, #1]
 800d4c4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d4cc:	69b8      	ldr	r0, [r7, #24]
 800d4ce:	f00f fe55 	bl	801d17c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d005      	beq.n	800d4e6 <err_tcp+0x6a>
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2104      	movs	r1, #4
 800d4e2:	69f8      	ldr	r0, [r7, #28]
 800d4e4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d005      	beq.n	800d4fa <err_tcp+0x7e>
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	69f8      	ldr	r0, [r7, #28]
 800d4f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d005      	beq.n	800d50e <err_tcp+0x92>
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d506:	2200      	movs	r2, #0
 800d508:	2102      	movs	r1, #2
 800d50a:	69f8      	ldr	r0, [r7, #28]
 800d50c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d50e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fd86 	bl	800d024 <lwip_netconn_err_to_msg>
 800d518:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	3310      	adds	r3, #16
 800d51e:	4618      	mov	r0, r3
 800d520:	f00f fd14 	bl	801cf4c <sys_mbox_valid>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	3310      	adds	r3, #16
 800d52e:	6939      	ldr	r1, [r7, #16]
 800d530:	4618      	mov	r0, r3
 800d532:	f00f fca9 	bl	801ce88 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	3314      	adds	r3, #20
 800d53a:	4618      	mov	r0, r3
 800d53c:	f00f fd06 	bl	801cf4c <sys_mbox_valid>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d005      	beq.n	800d552 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	3314      	adds	r3, #20
 800d54a:	6939      	ldr	r1, [r7, #16]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f00f fc9b 	bl	801ce88 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d005      	beq.n	800d564 <err_tcp+0xe8>
 800d558:	7dfb      	ldrb	r3, [r7, #23]
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d002      	beq.n	800d564 <err_tcp+0xe8>
 800d55e:	7dfb      	ldrb	r3, [r7, #23]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d143      	bne.n	800d5ec <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	7f1b      	ldrb	r3, [r3, #28]
 800d568:	f003 0304 	and.w	r3, r3, #4
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	bf14      	ite	ne
 800d570:	2301      	movne	r3, #1
 800d572:	2300      	moveq	r3, #0
 800d574:	b2db      	uxtb	r3, r3
 800d576:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	7f1b      	ldrb	r3, [r3, #28]
 800d57c:	f023 0304 	bic.w	r3, r3, #4
 800d580:	b2da      	uxtb	r2, r3
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d13b      	bne.n	800d604 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	6a1b      	ldr	r3, [r3, #32]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d106      	bne.n	800d5a2 <err_tcp+0x126>
 800d594:	4b1e      	ldr	r3, [pc, #120]	@ (800d610 <err_tcp+0x194>)
 800d596:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d59a:	4920      	ldr	r1, [pc, #128]	@ (800d61c <err_tcp+0x1a0>)
 800d59c:	481e      	ldr	r0, [pc, #120]	@ (800d618 <err_tcp+0x19c>)
 800d59e:	f010 ff0b 	bl	801e3b8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	2b04      	cmp	r3, #4
 800d5a6:	d104      	bne.n	800d5b2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	711a      	strb	r2, [r3, #4]
 800d5b0:	e003      	b.n	800d5ba <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	78fa      	ldrb	r2, [r7, #3]
 800d5b8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	330c      	adds	r3, #12
 800d5c2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d5c4:	68b8      	ldr	r0, [r7, #8]
 800d5c6:	f00f fd4f 	bl	801d068 <sys_sem_valid>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d106      	bne.n	800d5de <err_tcp+0x162>
 800d5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d610 <err_tcp+0x194>)
 800d5d2:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800d5d6:	4912      	ldr	r1, [pc, #72]	@ (800d620 <err_tcp+0x1a4>)
 800d5d8:	480f      	ldr	r0, [pc, #60]	@ (800d618 <err_tcp+0x19c>)
 800d5da:	f010 feed 	bl	801e3b8 <iprintf>
      conn->current_msg = NULL;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d5e4:	68b8      	ldr	r0, [r7, #8]
 800d5e6:	f00f fd25 	bl	801d034 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d5ea:	e00b      	b.n	800d604 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d008      	beq.n	800d606 <err_tcp+0x18a>
 800d5f4:	4b06      	ldr	r3, [pc, #24]	@ (800d610 <err_tcp+0x194>)
 800d5f6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800d5fa:	490a      	ldr	r1, [pc, #40]	@ (800d624 <err_tcp+0x1a8>)
 800d5fc:	4806      	ldr	r0, [pc, #24]	@ (800d618 <err_tcp+0x19c>)
 800d5fe:	f010 fedb 	bl	801e3b8 <iprintf>
  }
}
 800d602:	e000      	b.n	800d606 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d604:	bf00      	nop
}
 800d606:	bf00      	nop
 800d608:	3720      	adds	r7, #32
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	0802214c 	.word	0x0802214c
 800d614:	080222a4 	.word	0x080222a4
 800d618:	08022190 	.word	0x08022190
 800d61c:	080222b4 	.word	0x080222b4
 800d620:	080222d0 	.word	0x080222d0
 800d624:	080222ec 	.word	0x080222ec

0800d628 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f005 fd75 	bl	8013128 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d63e:	490a      	ldr	r1, [pc, #40]	@ (800d668 <setup_tcp+0x40>)
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f005 fd83 	bl	801314c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d646:	4909      	ldr	r1, [pc, #36]	@ (800d66c <setup_tcp+0x44>)
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f005 fda1 	bl	8013190 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d64e:	2202      	movs	r2, #2
 800d650:	4907      	ldr	r1, [pc, #28]	@ (800d670 <setup_tcp+0x48>)
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f005 fdf8 	bl	8013248 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d658:	4906      	ldr	r1, [pc, #24]	@ (800d674 <setup_tcp+0x4c>)
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f005 fdba 	bl	80131d4 <tcp_err>
}
 800d660:	bf00      	nop
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	0800d201 	.word	0x0800d201
 800d66c:	0800d3d5 	.word	0x0800d3d5
 800d670:	0800d30d 	.word	0x0800d30d
 800d674:	0800d47d 	.word	0x0800d47d

0800d678 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d006      	beq.n	800d69c <pcb_new+0x24>
 800d68e:	4b2b      	ldr	r3, [pc, #172]	@ (800d73c <pcb_new+0xc4>)
 800d690:	f240 2265 	movw	r2, #613	@ 0x265
 800d694:	492a      	ldr	r1, [pc, #168]	@ (800d740 <pcb_new+0xc8>)
 800d696:	482b      	ldr	r0, [pc, #172]	@ (800d744 <pcb_new+0xcc>)
 800d698:	f010 fe8e 	bl	801e3b8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6a6:	2b10      	cmp	r3, #16
 800d6a8:	d022      	beq.n	800d6f0 <pcb_new+0x78>
 800d6aa:	2b20      	cmp	r3, #32
 800d6ac:	d133      	bne.n	800d716 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681c      	ldr	r4, [r3, #0]
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f00b f890 	bl	80187da <udp_new_ip_type>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d02a      	beq.n	800d71e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b22      	cmp	r3, #34	@ 0x22
 800d6d0:	d104      	bne.n	800d6dc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6858      	ldr	r0, [r3, #4]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4917      	ldr	r1, [pc, #92]	@ (800d748 <pcb_new+0xd0>)
 800d6ea:	f00a fffd 	bl	80186e8 <udp_recv>
      }
      break;
 800d6ee:	e016      	b.n	800d71e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681c      	ldr	r4, [r3, #0]
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f005 fd08 	bl	801310c <tcp_new_ip_type>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff ff8a 	bl	800d628 <setup_tcp>
      }
      break;
 800d714:	e005      	b.n	800d722 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	22fa      	movs	r2, #250	@ 0xfa
 800d71a:	711a      	strb	r2, [r3, #4]
      return;
 800d71c:	e00a      	b.n	800d734 <pcb_new+0xbc>
      break;
 800d71e:	bf00      	nop
 800d720:	e000      	b.n	800d724 <pcb_new+0xac>
      break;
 800d722:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d102      	bne.n	800d734 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	22ff      	movs	r2, #255	@ 0xff
 800d732:	711a      	strb	r2, [r3, #4]
  }
}
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	bd90      	pop	{r4, r7, pc}
 800d73a:	bf00      	nop
 800d73c:	0802214c 	.word	0x0802214c
 800d740:	08022330 	.word	0x08022330
 800d744:	08022190 	.word	0x08022190
 800d748:	0800d105 	.word	0x0800d105

0800d74c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d102      	bne.n	800d76e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7ff ff85 	bl	800d678 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	6039      	str	r1, [r7, #0]
 800d782:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d788:	2007      	movs	r0, #7
 800d78a:	f002 fe07 	bl	801039c <memp_malloc>
 800d78e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <netconn_alloc+0x22>
    return NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	e052      	b.n	800d840 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2200      	movs	r2, #0
 800d79e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	79fa      	ldrb	r2, [r7, #7]
 800d7a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7b2:	2b10      	cmp	r3, #16
 800d7b4:	d004      	beq.n	800d7c0 <netconn_alloc+0x48>
 800d7b6:	2b20      	cmp	r3, #32
 800d7b8:	d105      	bne.n	800d7c6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d7ba:	2306      	movs	r3, #6
 800d7bc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d7be:	e00a      	b.n	800d7d6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d7c0:	2306      	movs	r3, #6
 800d7c2:	617b      	str	r3, [r7, #20]
      break;
 800d7c4:	e007      	b.n	800d7d6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d7c6:	4b20      	ldr	r3, [pc, #128]	@ (800d848 <netconn_alloc+0xd0>)
 800d7c8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800d7cc:	491f      	ldr	r1, [pc, #124]	@ (800d84c <netconn_alloc+0xd4>)
 800d7ce:	4820      	ldr	r0, [pc, #128]	@ (800d850 <netconn_alloc+0xd8>)
 800d7d0:	f010 fdf2 	bl	801e3b8 <iprintf>
      goto free_and_return;
 800d7d4:	e02f      	b.n	800d836 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3310      	adds	r3, #16
 800d7da:	6979      	ldr	r1, [r7, #20]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f00f fb27 	bl	801ce30 <sys_mbox_new>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d125      	bne.n	800d834 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	330c      	adds	r3, #12
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f00f fbca 	bl	801cf88 <sys_sem_new>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d005      	beq.n	800d806 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3310      	adds	r3, #16
 800d7fe:	4618      	mov	r0, r3
 800d800:	f00f fb30 	bl	801ce64 <sys_mbox_free>
    goto free_and_return;
 800d804:	e017      	b.n	800d836 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3314      	adds	r3, #20
 800d80a:	4618      	mov	r0, r3
 800d80c:	f00f fbaf 	bl	801cf6e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f04f 32ff 	mov.w	r2, #4294967295
 800d81c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	7cfa      	ldrb	r2, [r7, #19]
 800d82e:	771a      	strb	r2, [r3, #28]
  return conn;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	e005      	b.n	800d840 <netconn_alloc+0xc8>
    goto free_and_return;
 800d834:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d836:	68f9      	ldr	r1, [r7, #12]
 800d838:	2007      	movs	r0, #7
 800d83a:	f002 fe25 	bl	8010488 <memp_free>
  return NULL;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	0802214c 	.word	0x0802214c
 800d84c:	08022350 	.word	0x08022350
 800d850:	08022190 	.word	0x08022190

0800d854 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d006      	beq.n	800d872 <netconn_free+0x1e>
 800d864:	4b1b      	ldr	r3, [pc, #108]	@ (800d8d4 <netconn_free+0x80>)
 800d866:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d86a:	491b      	ldr	r1, [pc, #108]	@ (800d8d8 <netconn_free+0x84>)
 800d86c:	481b      	ldr	r0, [pc, #108]	@ (800d8dc <netconn_free+0x88>)
 800d86e:	f010 fda3 	bl	801e3b8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	3310      	adds	r3, #16
 800d876:	4618      	mov	r0, r3
 800d878:	f00f fb68 	bl	801cf4c <sys_mbox_valid>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d006      	beq.n	800d890 <netconn_free+0x3c>
 800d882:	4b14      	ldr	r3, [pc, #80]	@ (800d8d4 <netconn_free+0x80>)
 800d884:	f240 3223 	movw	r2, #803	@ 0x323
 800d888:	4915      	ldr	r1, [pc, #84]	@ (800d8e0 <netconn_free+0x8c>)
 800d88a:	4814      	ldr	r0, [pc, #80]	@ (800d8dc <netconn_free+0x88>)
 800d88c:	f010 fd94 	bl	801e3b8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3314      	adds	r3, #20
 800d894:	4618      	mov	r0, r3
 800d896:	f00f fb59 	bl	801cf4c <sys_mbox_valid>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d006      	beq.n	800d8ae <netconn_free+0x5a>
 800d8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d8d4 <netconn_free+0x80>)
 800d8a2:	f240 3226 	movw	r2, #806	@ 0x326
 800d8a6:	490f      	ldr	r1, [pc, #60]	@ (800d8e4 <netconn_free+0x90>)
 800d8a8:	480c      	ldr	r0, [pc, #48]	@ (800d8dc <netconn_free+0x88>)
 800d8aa:	f010 fd85 	bl	801e3b8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	330c      	adds	r3, #12
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f00f fbcb 	bl	801d04e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f00f fbe4 	bl	801d08a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d8c2:	6879      	ldr	r1, [r7, #4]
 800d8c4:	2007      	movs	r0, #7
 800d8c6:	f002 fddf 	bl	8010488 <memp_free>
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0802214c 	.word	0x0802214c
 800d8d8:	08022378 	.word	0x08022378
 800d8dc:	08022190 	.word	0x08022190
 800d8e0:	080223a8 	.word	0x080223a8
 800d8e4:	080223e4 	.word	0x080223e4

0800d8e8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	3310      	adds	r3, #16
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f00f fb29 	bl	801cf4c <sys_mbox_valid>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d02f      	beq.n	800d960 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d900:	e018      	b.n	800d934 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d90a:	2b10      	cmp	r3, #16
 800d90c:	d10e      	bne.n	800d92c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	f107 020f 	add.w	r2, r7, #15
 800d914:	4611      	mov	r1, r2
 800d916:	4618      	mov	r0, r3
 800d918:	f7ff fbba 	bl	800d090 <lwip_netconn_is_err_msg>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d108      	bne.n	800d934 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	4618      	mov	r0, r3
 800d926:	f003 fc5f 	bl	80111e8 <pbuf_free>
 800d92a:	e003      	b.n	800d934 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 fed6 	bl	800e6e0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3310      	adds	r3, #16
 800d938:	f107 0210 	add.w	r2, r7, #16
 800d93c:	4611      	mov	r1, r2
 800d93e:	4618      	mov	r0, r3
 800d940:	f00f faed 	bl	801cf1e <sys_arch_mbox_tryfetch>
 800d944:	4603      	mov	r3, r0
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94a:	d1da      	bne.n	800d902 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3310      	adds	r3, #16
 800d950:	4618      	mov	r0, r3
 800d952:	f00f fa87 	bl	801ce64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3310      	adds	r3, #16
 800d95a:	4618      	mov	r0, r3
 800d95c:	f00f fb07 	bl	801cf6e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3314      	adds	r3, #20
 800d964:	4618      	mov	r0, r3
 800d966:	f00f faf1 	bl	801cf4c <sys_mbox_valid>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d034      	beq.n	800d9da <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d970:	e01d      	b.n	800d9ae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f107 020e 	add.w	r2, r7, #14
 800d978:	4611      	mov	r1, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff fb88 	bl	800d090 <lwip_netconn_is_err_msg>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d113      	bne.n	800d9ae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d98a:	6978      	ldr	r0, [r7, #20]
 800d98c:	f7ff ffac 	bl	800d8e8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d007      	beq.n	800d9a8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f004 fb7d 	bl	801209c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d9a8:	6978      	ldr	r0, [r7, #20]
 800d9aa:	f7ff ff53 	bl	800d854 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3314      	adds	r3, #20
 800d9b2:	f107 0210 	add.w	r2, r7, #16
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f00f fab0 	bl	801cf1e <sys_arch_mbox_tryfetch>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c4:	d1d5      	bne.n	800d972 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f00f fa4a 	bl	801ce64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3314      	adds	r3, #20
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f00f faca 	bl	801cf6e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d9da:	bf00      	nop
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <lwip_netconn_do_close_internal+0x24>
 800d9fa:	4b87      	ldr	r3, [pc, #540]	@ (800dc18 <lwip_netconn_do_close_internal+0x234>)
 800d9fc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800da00:	4986      	ldr	r1, [pc, #536]	@ (800dc1c <lwip_netconn_do_close_internal+0x238>)
 800da02:	4887      	ldr	r0, [pc, #540]	@ (800dc20 <lwip_netconn_do_close_internal+0x23c>)
 800da04:	f010 fcd8 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da10:	2b10      	cmp	r3, #16
 800da12:	d006      	beq.n	800da22 <lwip_netconn_do_close_internal+0x3e>
 800da14:	4b80      	ldr	r3, [pc, #512]	@ (800dc18 <lwip_netconn_do_close_internal+0x234>)
 800da16:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800da1a:	4982      	ldr	r1, [pc, #520]	@ (800dc24 <lwip_netconn_do_close_internal+0x240>)
 800da1c:	4880      	ldr	r0, [pc, #512]	@ (800dc20 <lwip_netconn_do_close_internal+0x23c>)
 800da1e:	f010 fccb 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	2b04      	cmp	r3, #4
 800da28:	d006      	beq.n	800da38 <lwip_netconn_do_close_internal+0x54>
 800da2a:	4b7b      	ldr	r3, [pc, #492]	@ (800dc18 <lwip_netconn_do_close_internal+0x234>)
 800da2c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800da30:	497d      	ldr	r1, [pc, #500]	@ (800dc28 <lwip_netconn_do_close_internal+0x244>)
 800da32:	487b      	ldr	r0, [pc, #492]	@ (800dc20 <lwip_netconn_do_close_internal+0x23c>)
 800da34:	f010 fcc0 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <lwip_netconn_do_close_internal+0x6a>
 800da40:	4b75      	ldr	r3, [pc, #468]	@ (800dc18 <lwip_netconn_do_close_internal+0x234>)
 800da42:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800da46:	4979      	ldr	r1, [pc, #484]	@ (800dc2c <lwip_netconn_do_close_internal+0x248>)
 800da48:	4875      	ldr	r0, [pc, #468]	@ (800dc20 <lwip_netconn_do_close_internal+0x23c>)
 800da4a:	f010 fcb5 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <lwip_netconn_do_close_internal+0x80>
 800da56:	4b70      	ldr	r3, [pc, #448]	@ (800dc18 <lwip_netconn_do_close_internal+0x234>)
 800da58:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800da5c:	4974      	ldr	r1, [pc, #464]	@ (800dc30 <lwip_netconn_do_close_internal+0x24c>)
 800da5e:	4870      	ldr	r0, [pc, #448]	@ (800dc20 <lwip_netconn_do_close_internal+0x23c>)
 800da60:	f010 fcaa 	bl	801e3b8 <iprintf>

  tpcb = conn->pcb.tcp;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	7a1b      	ldrb	r3, [r3, #8]
 800da70:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	2b03      	cmp	r3, #3
 800da86:	d102      	bne.n	800da8e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800da88:	2301      	movs	r3, #1
 800da8a:	75bb      	strb	r3, [r7, #22]
 800da8c:	e01f      	b.n	800dace <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800da8e:	7bbb      	ldrb	r3, [r7, #14]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00e      	beq.n	800dab2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800da98:	2b05      	cmp	r3, #5
 800da9a:	d007      	beq.n	800daac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800daa0:	2b06      	cmp	r3, #6
 800daa2:	d003      	beq.n	800daac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d102      	bne.n	800dab2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800daac:	2301      	movs	r3, #1
 800daae:	75bb      	strb	r3, [r7, #22]
 800dab0:	e00d      	b.n	800dace <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800dab2:	7b7b      	ldrb	r3, [r7, #13]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d008      	beq.n	800daca <lwip_netconn_do_close_internal+0xe6>
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	8b5b      	ldrh	r3, [r3, #26]
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dac4:	2301      	movs	r3, #1
 800dac6:	75bb      	strb	r3, [r7, #22]
 800dac8:	e001      	b.n	800dace <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dace:	7dbb      	ldrb	r3, [r7, #22]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d003      	beq.n	800dadc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dad4:	2100      	movs	r1, #0
 800dad6:	6938      	ldr	r0, [r7, #16]
 800dad8:	f005 fb26 	bl	8013128 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	7d1b      	ldrb	r3, [r3, #20]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d104      	bne.n	800daee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dae4:	2100      	movs	r1, #0
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f005 fb96 	bl	8013218 <tcp_accept>
 800daec:	e01d      	b.n	800db2a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d007      	beq.n	800db04 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800daf4:	2100      	movs	r1, #0
 800daf6:	6938      	ldr	r0, [r7, #16]
 800daf8:	f005 fb28 	bl	801314c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800dafc:	2100      	movs	r1, #0
 800dafe:	6938      	ldr	r0, [r7, #16]
 800db00:	f005 fb8a 	bl	8013218 <tcp_accept>
    }
    if (shut_tx) {
 800db04:	7b7b      	ldrb	r3, [r7, #13]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d003      	beq.n	800db12 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800db0a:	2100      	movs	r1, #0
 800db0c:	6938      	ldr	r0, [r7, #16]
 800db0e:	f005 fb3f 	bl	8013190 <tcp_sent>
    }
    if (shut_close) {
 800db12:	7dbb      	ldrb	r3, [r7, #22]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d008      	beq.n	800db2a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800db18:	2200      	movs	r2, #0
 800db1a:	2100      	movs	r1, #0
 800db1c:	6938      	ldr	r0, [r7, #16]
 800db1e:	f005 fb93 	bl	8013248 <tcp_poll>
      tcp_err(tpcb, NULL);
 800db22:	2100      	movs	r1, #0
 800db24:	6938      	ldr	r0, [r7, #16]
 800db26:	f005 fb55 	bl	80131d4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800db2a:	7dbb      	ldrb	r3, [r7, #22]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d005      	beq.n	800db3c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800db30:	6938      	ldr	r0, [r7, #16]
 800db32:	f004 f96d 	bl	8011e10 <tcp_close>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
 800db3a:	e007      	b.n	800db4c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	7b7a      	ldrb	r2, [r7, #13]
 800db40:	4619      	mov	r1, r3
 800db42:	6938      	ldr	r0, [r7, #16]
 800db44:	f004 f990 	bl	8011e68 <tcp_shutdown>
 800db48:	4603      	mov	r3, r0
 800db4a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800db4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800db54:	2301      	movs	r3, #1
 800db56:	757b      	strb	r3, [r7, #21]
 800db58:	e016      	b.n	800db88 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800db5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db62:	d10f      	bne.n	800db84 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	7a5b      	ldrb	r3, [r3, #9]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10c      	bne.n	800db88 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800db72:	7dbb      	ldrb	r3, [r7, #22]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d007      	beq.n	800db88 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800db78:	6938      	ldr	r0, [r7, #16]
 800db7a:	f004 fa8f 	bl	801209c <tcp_abort>
          err = ERR_OK;
 800db7e:	2300      	movs	r3, #0
 800db80:	75fb      	strb	r3, [r7, #23]
 800db82:	e001      	b.n	800db88 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800db84:	2301      	movs	r3, #1
 800db86:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800db88:	7d7b      	ldrb	r3, [r7, #21]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d052      	beq.n	800dc34 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	330c      	adds	r3, #12
 800db96:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	7dfa      	ldrb	r2, [r7, #23]
 800db9e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dbac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d129      	bne.n	800dc08 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800dbb4:	7dbb      	ldrb	r3, [r7, #22]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <lwip_netconn_do_close_internal+0x1f0>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2104      	movs	r1, #4
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3
      }
      if (shut_rx) {
 800dbd4:	7bbb      	ldrb	r3, [r7, #14]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d009      	beq.n	800dbee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <lwip_netconn_do_close_internal+0x20a>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2100      	movs	r1, #0
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	4798      	blx	r3
      }
      if (shut_tx) {
 800dbee:	7b7b      	ldrb	r3, [r7, #13]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <lwip_netconn_do_close_internal+0x224>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc00:	2200      	movs	r2, #0
 800dc02:	2102      	movs	r1, #2
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800dc0e:	68b8      	ldr	r0, [r7, #8]
 800dc10:	f00f fa10 	bl	801d034 <sys_sem_signal>
    }
    return ERR_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	e03c      	b.n	800dc92 <lwip_netconn_do_close_internal+0x2ae>
 800dc18:	0802214c 	.word	0x0802214c
 800dc1c:	08022420 	.word	0x08022420
 800dc20:	08022190 	.word	0x08022190
 800dc24:	08022430 	.word	0x08022430
 800dc28:	08022450 	.word	0x08022450
 800dc2c:	08022474 	.word	0x08022474
 800dc30:	080222b4 	.word	0x080222b4
  }
  if (!close_finished) {
 800dc34:	7d7b      	ldrb	r3, [r7, #21]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d11e      	bne.n	800dc78 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	7d1b      	ldrb	r3, [r3, #20]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d106      	bne.n	800dc50 <lwip_netconn_do_close_internal+0x26c>
 800dc42:	4b16      	ldr	r3, [pc, #88]	@ (800dc9c <lwip_netconn_do_close_internal+0x2b8>)
 800dc44:	f240 4241 	movw	r2, #1089	@ 0x441
 800dc48:	4915      	ldr	r1, [pc, #84]	@ (800dca0 <lwip_netconn_do_close_internal+0x2bc>)
 800dc4a:	4816      	ldr	r0, [pc, #88]	@ (800dca4 <lwip_netconn_do_close_internal+0x2c0>)
 800dc4c:	f010 fbb4 	bl	801e3b8 <iprintf>
    if (shut_tx) {
 800dc50:	7b7b      	ldrb	r3, [r7, #13]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d003      	beq.n	800dc5e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800dc56:	4914      	ldr	r1, [pc, #80]	@ (800dca8 <lwip_netconn_do_close_internal+0x2c4>)
 800dc58:	6938      	ldr	r0, [r7, #16]
 800dc5a:	f005 fa99 	bl	8013190 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dc5e:	2201      	movs	r2, #1
 800dc60:	4912      	ldr	r1, [pc, #72]	@ (800dcac <lwip_netconn_do_close_internal+0x2c8>)
 800dc62:	6938      	ldr	r0, [r7, #16]
 800dc64:	f005 faf0 	bl	8013248 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800dc68:	4911      	ldr	r1, [pc, #68]	@ (800dcb0 <lwip_netconn_do_close_internal+0x2cc>)
 800dc6a:	6938      	ldr	r0, [r7, #16]
 800dc6c:	f005 fab2 	bl	80131d4 <tcp_err>
    tcp_arg(tpcb, conn);
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	6938      	ldr	r0, [r7, #16]
 800dc74:	f005 fa58 	bl	8013128 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dc78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <lwip_netconn_do_close_internal+0x2aa>
 800dc80:	4b06      	ldr	r3, [pc, #24]	@ (800dc9c <lwip_netconn_do_close_internal+0x2b8>)
 800dc82:	f240 424d 	movw	r2, #1101	@ 0x44d
 800dc86:	490b      	ldr	r1, [pc, #44]	@ (800dcb4 <lwip_netconn_do_close_internal+0x2d0>)
 800dc88:	4806      	ldr	r0, [pc, #24]	@ (800dca4 <lwip_netconn_do_close_internal+0x2c0>)
 800dc8a:	f010 fb95 	bl	801e3b8 <iprintf>
  return err;
 800dc8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3718      	adds	r7, #24
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	0802214c 	.word	0x0802214c
 800dca0:	08022488 	.word	0x08022488
 800dca4:	08022190 	.word	0x08022190
 800dca8:	0800d3d5 	.word	0x0800d3d5
 800dcac:	0800d30d 	.word	0x0800d30d
 800dcb0:	0800d47d 	.word	0x0800d47d
 800dcb4:	080224ac 	.word	0x080224ac

0800dcb8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	785b      	ldrb	r3, [r3, #1]
 800dcca:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800dccc:	7afb      	ldrb	r3, [r7, #11]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00d      	beq.n	800dcee <lwip_netconn_do_delconn+0x36>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dcdc:	2b10      	cmp	r3, #16
 800dcde:	d006      	beq.n	800dcee <lwip_netconn_do_delconn+0x36>
 800dce0:	4b60      	ldr	r3, [pc, #384]	@ (800de64 <lwip_netconn_do_delconn+0x1ac>)
 800dce2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800dce6:	4960      	ldr	r1, [pc, #384]	@ (800de68 <lwip_netconn_do_delconn+0x1b0>)
 800dce8:	4860      	ldr	r0, [pc, #384]	@ (800de6c <lwip_netconn_do_delconn+0x1b4>)
 800dcea:	f010 fb65 	bl	801e3b8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800dcee:	7afb      	ldrb	r3, [r7, #11]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <lwip_netconn_do_delconn+0x48>
 800dcf4:	7afb      	ldrb	r3, [r7, #11]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d002      	beq.n	800dd00 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800dcfa:	7afb      	ldrb	r3, [r7, #11]
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	d109      	bne.n	800dd14 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dd00:	7afb      	ldrb	r3, [r7, #11]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d10a      	bne.n	800dd1c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	7f1b      	ldrb	r3, [r3, #28]
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	22fb      	movs	r2, #251	@ 0xfb
 800dd18:	711a      	strb	r2, [r3, #4]
 800dd1a:	e097      	b.n	800de4c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dd1c:	7afb      	ldrb	r3, [r7, #11]
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d10d      	bne.n	800dd3e <lwip_netconn_do_delconn+0x86>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	7f1b      	ldrb	r3, [r3, #28]
 800dd28:	f003 0304 	and.w	r3, r3, #4
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <lwip_netconn_do_delconn+0x86>
 800dd30:	4b4c      	ldr	r3, [pc, #304]	@ (800de64 <lwip_netconn_do_delconn+0x1ac>)
 800dd32:	f240 427a 	movw	r2, #1146	@ 0x47a
 800dd36:	494e      	ldr	r1, [pc, #312]	@ (800de70 <lwip_netconn_do_delconn+0x1b8>)
 800dd38:	484c      	ldr	r0, [pc, #304]	@ (800de6c <lwip_netconn_do_delconn+0x1b4>)
 800dd3a:	f010 fb3d 	bl	801e3b8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fdcd 	bl	800d8e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d05f      	beq.n	800de18 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd62:	2b10      	cmp	r3, #16
 800dd64:	d00d      	beq.n	800dd82 <lwip_netconn_do_delconn+0xca>
 800dd66:	2b20      	cmp	r3, #32
 800dd68:	d151      	bne.n	800de0e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f00a fcd4 	bl	8018728 <udp_remove>
          break;
 800dd80:	e046      	b.n	800de10 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <lwip_netconn_do_delconn+0xe2>
 800dd8c:	4b35      	ldr	r3, [pc, #212]	@ (800de64 <lwip_netconn_do_delconn+0x1ac>)
 800dd8e:	f240 4294 	movw	r2, #1172	@ 0x494
 800dd92:	4938      	ldr	r1, [pc, #224]	@ (800de74 <lwip_netconn_do_delconn+0x1bc>)
 800dd94:	4835      	ldr	r0, [pc, #212]	@ (800de6c <lwip_netconn_do_delconn+0x1b4>)
 800dd96:	f010 fb0f 	bl	801e3b8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2204      	movs	r2, #4
 800dda0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2203      	movs	r2, #3
 800dda6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7ff fe14 	bl	800d9e4 <lwip_netconn_do_close_internal>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d04b      	beq.n	800de5a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	785b      	ldrb	r3, [r3, #1]
 800ddc8:	2b04      	cmp	r3, #4
 800ddca:	d006      	beq.n	800ddda <lwip_netconn_do_delconn+0x122>
 800ddcc:	4b25      	ldr	r3, [pc, #148]	@ (800de64 <lwip_netconn_do_delconn+0x1ac>)
 800ddce:	f240 429a 	movw	r2, #1178	@ 0x49a
 800ddd2:	4929      	ldr	r1, [pc, #164]	@ (800de78 <lwip_netconn_do_delconn+0x1c0>)
 800ddd4:	4825      	ldr	r0, [pc, #148]	@ (800de6c <lwip_netconn_do_delconn+0x1b4>)
 800ddd6:	f010 faef 	bl	801e3b8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ddda:	4828      	ldr	r0, [pc, #160]	@ (800de7c <lwip_netconn_do_delconn+0x1c4>)
 800dddc:	f00f f993 	bl	801d106 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	330c      	adds	r3, #12
 800dde6:	2100      	movs	r1, #0
 800dde8:	4618      	mov	r0, r3
 800ddea:	f00f f8f2 	bl	801cfd2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ddee:	4823      	ldr	r0, [pc, #140]	@ (800de7c <lwip_netconn_do_delconn+0x1c4>)
 800ddf0:	f00f f97a 	bl	801d0e8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	785b      	ldrb	r3, [r3, #1]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d02d      	beq.n	800de5a <lwip_netconn_do_delconn+0x1a2>
 800ddfe:	4b19      	ldr	r3, [pc, #100]	@ (800de64 <lwip_netconn_do_delconn+0x1ac>)
 800de00:	f240 429e 	movw	r2, #1182	@ 0x49e
 800de04:	491c      	ldr	r1, [pc, #112]	@ (800de78 <lwip_netconn_do_delconn+0x1c0>)
 800de06:	4819      	ldr	r0, [pc, #100]	@ (800de6c <lwip_netconn_do_delconn+0x1b4>)
 800de08:	f010 fad6 	bl	801e3b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800de0c:	e025      	b.n	800de5a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800de0e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2200      	movs	r2, #0
 800de16:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d007      	beq.n	800de32 <lwip_netconn_do_delconn+0x17a>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	6810      	ldr	r0, [r2, #0]
 800de2c:	2200      	movs	r2, #0
 800de2e:	2100      	movs	r1, #0
 800de30:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d007      	beq.n	800de4c <lwip_netconn_do_delconn+0x194>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	6810      	ldr	r0, [r2, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	2102      	movs	r1, #2
 800de4a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	330c      	adds	r3, #12
 800de52:	4618      	mov	r0, r3
 800de54:	f00f f908 	bl	801d068 <sys_sem_valid>
 800de58:	e000      	b.n	800de5c <lwip_netconn_do_delconn+0x1a4>
          return;
 800de5a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	0802214c 	.word	0x0802214c
 800de68:	080224bc 	.word	0x080224bc
 800de6c:	08022190 	.word	0x08022190
 800de70:	080224d0 	.word	0x080224d0
 800de74:	080224f0 	.word	0x080224f0
 800de78:	0802250c 	.word	0x0802250c
 800de7c:	2000e920 	.word	0x2000e920

0800de80 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	4613      	mov	r3, r2
 800de8c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800de8e:	2300      	movs	r3, #0
 800de90:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800de9c:	f06f 0305 	mvn.w	r3, #5
 800dea0:	e070      	b.n	800df84 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	785b      	ldrb	r3, [r3, #1]
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d006      	beq.n	800deb8 <lwip_netconn_do_connected+0x38>
 800deaa:	4b38      	ldr	r3, [pc, #224]	@ (800df8c <lwip_netconn_do_connected+0x10c>)
 800deac:	f240 5223 	movw	r2, #1315	@ 0x523
 800deb0:	4937      	ldr	r1, [pc, #220]	@ (800df90 <lwip_netconn_do_connected+0x110>)
 800deb2:	4838      	ldr	r0, [pc, #224]	@ (800df94 <lwip_netconn_do_connected+0x114>)
 800deb4:	f010 fa80 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	6a1b      	ldr	r3, [r3, #32]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10c      	bne.n	800deda <lwip_netconn_do_connected+0x5a>
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	7f1b      	ldrb	r3, [r3, #28]
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d106      	bne.n	800deda <lwip_netconn_do_connected+0x5a>
 800decc:	4b2f      	ldr	r3, [pc, #188]	@ (800df8c <lwip_netconn_do_connected+0x10c>)
 800dece:	f240 5224 	movw	r2, #1316	@ 0x524
 800ded2:	4931      	ldr	r1, [pc, #196]	@ (800df98 <lwip_netconn_do_connected+0x118>)
 800ded4:	482f      	ldr	r0, [pc, #188]	@ (800df94 <lwip_netconn_do_connected+0x114>)
 800ded6:	f010 fa6f 	bl	801e3b8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d008      	beq.n	800def4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	79fa      	ldrb	r2, [r7, #7]
 800dee8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	330c      	adds	r3, #12
 800def2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800defc:	2b10      	cmp	r3, #16
 800defe:	d106      	bne.n	800df0e <lwip_netconn_do_connected+0x8e>
 800df00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800df08:	69b8      	ldr	r0, [r7, #24]
 800df0a:	f7ff fb8d 	bl	800d628 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	7f1b      	ldrb	r3, [r3, #28]
 800df12:	f003 0304 	and.w	r3, r3, #4
 800df16:	2b00      	cmp	r3, #0
 800df18:	bf0c      	ite	eq
 800df1a:	2301      	moveq	r3, #1
 800df1c:	2300      	movne	r3, #0
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	7f1b      	ldrb	r3, [r3, #28]
 800df26:	f023 0304 	bic.w	r3, r3, #4
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <lwip_netconn_do_connected+0xbc>
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10c      	bne.n	800df56 <lwip_netconn_do_connected+0xd6>
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d102      	bne.n	800df48 <lwip_netconn_do_connected+0xc8>
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d006      	beq.n	800df56 <lwip_netconn_do_connected+0xd6>
 800df48:	4b10      	ldr	r3, [pc, #64]	@ (800df8c <lwip_netconn_do_connected+0x10c>)
 800df4a:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800df4e:	4913      	ldr	r1, [pc, #76]	@ (800df9c <lwip_netconn_do_connected+0x11c>)
 800df50:	4810      	ldr	r0, [pc, #64]	@ (800df94 <lwip_netconn_do_connected+0x114>)
 800df52:	f010 fa31 	bl	801e3b8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	2200      	movs	r2, #0
 800df5a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	2200      	movs	r2, #0
 800df60:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <lwip_netconn_do_connected+0xf6>
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6e:	2200      	movs	r2, #0
 800df70:	2102      	movs	r1, #2
 800df72:	69b8      	ldr	r0, [r7, #24]
 800df74:	4798      	blx	r3

  if (was_blocking) {
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800df7c:	69f8      	ldr	r0, [r7, #28]
 800df7e:	f00f f859 	bl	801d034 <sys_sem_signal>
  }
  return ERR_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3720      	adds	r7, #32
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	0802214c 	.word	0x0802214c
 800df90:	08022514 	.word	0x08022514
 800df94:	08022190 	.word	0x08022190
 800df98:	08022534 	.word	0x08022534
 800df9c:	08022574 	.word	0x08022574

0800dfa0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d102      	bne.n	800dfbc <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800dfb6:	23f1      	movs	r3, #241	@ 0xf1
 800dfb8:	75fb      	strb	r3, [r7, #23]
 800dfba:	e09b      	b.n	800e0f4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dfc6:	2b10      	cmp	r3, #16
 800dfc8:	d00f      	beq.n	800dfea <lwip_netconn_do_connect+0x4a>
 800dfca:	2b20      	cmp	r3, #32
 800dfcc:	f040 8087 	bne.w	800e0de <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6858      	ldr	r0, [r3, #4]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6899      	ldr	r1, [r3, #8]
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	899b      	ldrh	r3, [r3, #12]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	f00a faec 	bl	80185bc <udp_connect>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	75fb      	strb	r3, [r7, #23]
        break;
 800dfe8:	e084      	b.n	800e0f4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	785b      	ldrb	r3, [r3, #1]
 800dff0:	2b03      	cmp	r3, #3
 800dff2:	d102      	bne.n	800dffa <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800dff4:	23f7      	movs	r3, #247	@ 0xf7
 800dff6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800dff8:	e07b      	b.n	800e0f2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	785b      	ldrb	r3, [r3, #1]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800e004:	23f6      	movs	r3, #246	@ 0xf6
 800e006:	75fb      	strb	r3, [r7, #23]
        break;
 800e008:	e073      	b.n	800e0f2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff fb0a 	bl	800d628 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6858      	ldr	r0, [r3, #4]
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	6899      	ldr	r1, [r3, #8]
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	899a      	ldrh	r2, [r3, #12]
 800e022:	4b38      	ldr	r3, [pc, #224]	@ (800e104 <lwip_netconn_do_connect+0x164>)
 800e024:	f004 f936 	bl	8012294 <tcp_connect>
 800e028:	4603      	mov	r3, r0
 800e02a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800e02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d15e      	bne.n	800e0f2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	7f1b      	ldrb	r3, [r3, #28]
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bf14      	ite	ne
 800e042:	2301      	movne	r3, #1
 800e044:	2300      	moveq	r3, #0
 800e046:	b2db      	uxtb	r3, r3
 800e048:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2203      	movs	r2, #3
 800e050:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <lwip_netconn_do_connect+0xcc>
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	7f1a      	ldrb	r2, [r3, #28]
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f042 0204 	orr.w	r2, r2, #4
 800e066:	b2d2      	uxtb	r2, r2
 800e068:	771a      	strb	r2, [r3, #28]
 800e06a:	e008      	b.n	800e07e <lwip_netconn_do_connect+0xde>
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	7f1a      	ldrb	r2, [r3, #28]
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f022 0204 	bic.w	r2, r2, #4
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800e084:	23fb      	movs	r3, #251	@ 0xfb
 800e086:	75fb      	strb	r3, [r7, #23]
        break;
 800e088:	e033      	b.n	800e0f2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	785b      	ldrb	r3, [r3, #1]
 800e098:	2b03      	cmp	r3, #3
 800e09a:	d006      	beq.n	800e0aa <lwip_netconn_do_connect+0x10a>
 800e09c:	4b1a      	ldr	r3, [pc, #104]	@ (800e108 <lwip_netconn_do_connect+0x168>)
 800e09e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800e0a2:	491a      	ldr	r1, [pc, #104]	@ (800e10c <lwip_netconn_do_connect+0x16c>)
 800e0a4:	481a      	ldr	r0, [pc, #104]	@ (800e110 <lwip_netconn_do_connect+0x170>)
 800e0a6:	f010 f987 	bl	801e3b8 <iprintf>
              UNLOCK_TCPIP_CORE();
 800e0aa:	481a      	ldr	r0, [pc, #104]	@ (800e114 <lwip_netconn_do_connect+0x174>)
 800e0ac:	f00f f82b 	bl	801d106 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	330c      	adds	r3, #12
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f00e ff8a 	bl	801cfd2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800e0be:	4815      	ldr	r0, [pc, #84]	@ (800e114 <lwip_netconn_do_connect+0x174>)
 800e0c0:	f00f f812 	bl	801d0e8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	785b      	ldrb	r3, [r3, #1]
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d116      	bne.n	800e0fc <lwip_netconn_do_connect+0x15c>
 800e0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e108 <lwip_netconn_do_connect+0x168>)
 800e0d0:	f240 5274 	movw	r2, #1396	@ 0x574
 800e0d4:	490d      	ldr	r1, [pc, #52]	@ (800e10c <lwip_netconn_do_connect+0x16c>)
 800e0d6:	480e      	ldr	r0, [pc, #56]	@ (800e110 <lwip_netconn_do_connect+0x170>)
 800e0d8:	f010 f96e 	bl	801e3b8 <iprintf>
              return;
 800e0dc:	e00e      	b.n	800e0fc <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800e0de:	4b0a      	ldr	r3, [pc, #40]	@ (800e108 <lwip_netconn_do_connect+0x168>)
 800e0e0:	f240 527d 	movw	r2, #1405	@ 0x57d
 800e0e4:	490c      	ldr	r1, [pc, #48]	@ (800e118 <lwip_netconn_do_connect+0x178>)
 800e0e6:	480a      	ldr	r0, [pc, #40]	@ (800e110 <lwip_netconn_do_connect+0x170>)
 800e0e8:	f010 f966 	bl	801e3b8 <iprintf>
 800e0ec:	23fa      	movs	r3, #250	@ 0xfa
 800e0ee:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800e0f0:	e000      	b.n	800e0f4 <lwip_netconn_do_connect+0x154>
        break;
 800e0f2:	bf00      	nop
    }
  }
  msg->err = err;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	7dfa      	ldrb	r2, [r7, #23]
 800e0f8:	711a      	strb	r2, [r3, #4]
 800e0fa:	e000      	b.n	800e0fe <lwip_netconn_do_connect+0x15e>
              return;
 800e0fc:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	0800de81 	.word	0x0800de81
 800e108:	0802214c 	.word	0x0802214c
 800e10c:	0802250c 	.word	0x0802250c
 800e110:	08022190 	.word	0x08022190
 800e114:	2000e920 	.word	0x2000e920
 800e118:	08022594 	.word	0x08022594

0800e11c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e132:	2b20      	cmp	r3, #32
 800e134:	d109      	bne.n	800e14a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f00a faab 	bl	8018698 <udp_disconnect>
    msg->err = ERR_OK;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e148:	e002      	b.n	800e150 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	22fa      	movs	r2, #250	@ 0xfa
 800e14e:	711a      	strb	r2, [r3, #4]
}
 800e150:	bf00      	nop
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fe ff3f 	bl	800cfec <netconn_err>
 800e16e:	4603      	mov	r3, r0
 800e170:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d134      	bne.n	800e1e4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d02d      	beq.n	800e1e0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e18e:	2b20      	cmp	r3, #32
 800e190:	d123      	bne.n	800e1da <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10c      	bne.n	800e1b6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	f009 ff94 	bl	80180d8 <udp_send>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e1b4:	e016      	b.n	800e1e4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	6858      	ldr	r0, [r3, #4]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	6819      	ldr	r1, [r3, #0]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	f103 0208 	add.w	r2, r3, #8
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	899b      	ldrh	r3, [r3, #12]
 800e1d0:	f009 ffb6 	bl	8018140 <udp_sendto>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73fb      	strb	r3, [r7, #15]
          break;
 800e1d8:	e004      	b.n	800e1e4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e1da:	23f5      	movs	r3, #245	@ 0xf5
 800e1dc:	73fb      	strb	r3, [r7, #15]
          break;
 800e1de:	e001      	b.n	800e1e4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e1e0:	23f5      	movs	r3, #245	@ 0xf5
 800e1e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	7bfa      	ldrb	r2, [r7, #15]
 800e1e8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e1ea:	bf00      	nop
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
	...

0800e1f4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <lwip_netconn_do_writemore+0x24>
 800e20a:	4b96      	ldr	r3, [pc, #600]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e20c:	f240 6273 	movw	r2, #1651	@ 0x673
 800e210:	4995      	ldr	r1, [pc, #596]	@ (800e468 <lwip_netconn_do_writemore+0x274>)
 800e212:	4896      	ldr	r0, [pc, #600]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e214:	f010 f8d0 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	785b      	ldrb	r3, [r3, #1]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d006      	beq.n	800e22e <lwip_netconn_do_writemore+0x3a>
 800e220:	4b90      	ldr	r3, [pc, #576]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e222:	f240 6274 	movw	r2, #1652	@ 0x674
 800e226:	4992      	ldr	r1, [pc, #584]	@ (800e470 <lwip_netconn_do_writemore+0x27c>)
 800e228:	4890      	ldr	r0, [pc, #576]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e22a:	f010 f8c5 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d106      	bne.n	800e244 <lwip_netconn_do_writemore+0x50>
 800e236:	4b8b      	ldr	r3, [pc, #556]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e238:	f240 6275 	movw	r2, #1653	@ 0x675
 800e23c:	498d      	ldr	r1, [pc, #564]	@ (800e474 <lwip_netconn_do_writemore+0x280>)
 800e23e:	488b      	ldr	r0, [pc, #556]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e240:	f010 f8ba 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d106      	bne.n	800e25a <lwip_netconn_do_writemore+0x66>
 800e24c:	4b85      	ldr	r3, [pc, #532]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e24e:	f240 6276 	movw	r2, #1654	@ 0x676
 800e252:	4989      	ldr	r1, [pc, #548]	@ (800e478 <lwip_netconn_do_writemore+0x284>)
 800e254:	4885      	ldr	r0, [pc, #532]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e256:	f010 f8af 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	699a      	ldr	r2, [r3, #24]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a1b      	ldr	r3, [r3, #32]
 800e264:	695b      	ldr	r3, [r3, #20]
 800e266:	429a      	cmp	r2, r3
 800e268:	d306      	bcc.n	800e278 <lwip_netconn_do_writemore+0x84>
 800e26a:	4b7e      	ldr	r3, [pc, #504]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e26c:	f240 6277 	movw	r2, #1655	@ 0x677
 800e270:	4982      	ldr	r1, [pc, #520]	@ (800e47c <lwip_netconn_do_writemore+0x288>)
 800e272:	487e      	ldr	r0, [pc, #504]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e274:	f010 f8a0 	bl	801e3b8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a1b      	ldr	r3, [r3, #32]
 800e27c:	899b      	ldrh	r3, [r3, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d106      	bne.n	800e290 <lwip_netconn_do_writemore+0x9c>
 800e282:	4b78      	ldr	r3, [pc, #480]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e284:	f240 6279 	movw	r2, #1657	@ 0x679
 800e288:	497d      	ldr	r1, [pc, #500]	@ (800e480 <lwip_netconn_do_writemore+0x28c>)
 800e28a:	4878      	ldr	r0, [pc, #480]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e28c:	f010 f894 	bl	801e3b8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	7f1b      	ldrb	r3, [r3, #28]
 800e296:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7f1b      	ldrb	r3, [r3, #28]
 800e29c:	f003 0302 	and.w	r3, r3, #2
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d104      	bne.n	800e2ae <lwip_netconn_do_writemore+0xba>
 800e2a4:	7ebb      	ldrb	r3, [r7, #26]
 800e2a6:	f003 0304 	and.w	r3, r3, #4
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <lwip_netconn_do_writemore+0xbe>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e000      	b.n	800e2b4 <lwip_netconn_do_writemore+0xc0>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a1b      	ldr	r3, [r3, #32]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2e0:	d307      	bcc.n	800e2f2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e2e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e2e6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e2e8:	7ebb      	ldrb	r3, [r7, #26]
 800e2ea:	f043 0302 	orr.w	r3, r3, #2
 800e2ee:	76bb      	strb	r3, [r7, #26]
 800e2f0:	e001      	b.n	800e2f6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e2fe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e300:	89fa      	ldrh	r2, [r7, #14]
 800e302:	8bbb      	ldrh	r3, [r7, #28]
 800e304:	429a      	cmp	r2, r3
 800e306:	d216      	bcs.n	800e336 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e308:	89fb      	ldrh	r3, [r7, #14]
 800e30a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e30c:	7e3b      	ldrb	r3, [r7, #24]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00d      	beq.n	800e32e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e312:	8bbb      	ldrh	r3, [r7, #28]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10e      	bne.n	800e336 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <lwip_netconn_do_writemore+0x134>
 800e322:	f06f 0306 	mvn.w	r3, #6
 800e326:	e000      	b.n	800e32a <lwip_netconn_do_writemore+0x136>
 800e328:	2300      	movs	r3, #0
 800e32a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e32c:	e07d      	b.n	800e42a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e32e:	7ebb      	ldrb	r3, [r7, #26]
 800e330:	f043 0302 	orr.w	r3, r3, #2
 800e334:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	691a      	ldr	r2, [r3, #16]
 800e33c:	8bbb      	ldrh	r3, [r7, #28]
 800e33e:	441a      	add	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d906      	bls.n	800e35a <lwip_netconn_do_writemore+0x166>
 800e34c:	4b45      	ldr	r3, [pc, #276]	@ (800e464 <lwip_netconn_do_writemore+0x270>)
 800e34e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800e352:	494c      	ldr	r1, [pc, #304]	@ (800e484 <lwip_netconn_do_writemore+0x290>)
 800e354:	4845      	ldr	r0, [pc, #276]	@ (800e46c <lwip_netconn_do_writemore+0x278>)
 800e356:	f010 f82f 	bl	801e3b8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e35a:	8bbb      	ldrh	r3, [r7, #28]
 800e35c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e360:	4293      	cmp	r3, r2
 800e362:	d103      	bne.n	800e36c <lwip_netconn_do_writemore+0x178>
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e36a:	d209      	bcs.n	800e380 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e370:	8bba      	ldrh	r2, [r7, #28]
 800e372:	429a      	cmp	r2, r3
 800e374:	d10b      	bne.n	800e38e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	899b      	ldrh	r3, [r3, #12]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d906      	bls.n	800e38e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e380:	2301      	movs	r3, #1
 800e382:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e384:	7ebb      	ldrb	r3, [r7, #26]
 800e386:	f043 0302 	orr.w	r3, r3, #2
 800e38a:	76bb      	strb	r3, [r7, #26]
 800e38c:	e001      	b.n	800e392 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6858      	ldr	r0, [r3, #4]
 800e396:	7ebb      	ldrb	r3, [r7, #26]
 800e398:	8bba      	ldrh	r2, [r7, #28]
 800e39a:	6979      	ldr	r1, [r7, #20]
 800e39c:	f007 fe00 	bl	8015fa0 <tcp_write>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e3a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d12c      	bne.n	800e406 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a1b      	ldr	r3, [r3, #32]
 800e3b0:	6999      	ldr	r1, [r3, #24]
 800e3b2:	8bba      	ldrh	r2, [r7, #28]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a1b      	ldr	r3, [r3, #32]
 800e3b8:	440a      	add	r2, r1
 800e3ba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	6919      	ldr	r1, [r3, #16]
 800e3c2:	8bba      	ldrh	r2, [r7, #28]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	440a      	add	r2, r1
 800e3ca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a1b      	ldr	r3, [r3, #32]
 800e3d0:	691a      	ldr	r2, [r3, #16]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d113      	bne.n	800e406 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	899a      	ldrh	r2, [r3, #12]
 800e3e4:	3a01      	subs	r2, #1
 800e3e6:	b292      	uxth	r2, r2
 800e3e8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	899b      	ldrh	r3, [r3, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d008      	beq.n	800e406 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	689a      	ldr	r2, [r3, #8]
 800e3fa:	3208      	adds	r2, #8
 800e3fc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	2200      	movs	r2, #0
 800e404:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e406:	7e7b      	ldrb	r3, [r7, #25]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d004      	beq.n	800e416 <lwip_netconn_do_writemore+0x222>
 800e40c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f43f af50 	beq.w	800e2b6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e416:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d004      	beq.n	800e428 <lwip_netconn_do_writemore+0x234>
 800e41e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e426:	d146      	bne.n	800e4b6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e428:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e42a:	7e3b      	ldrb	r3, [r7, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d02b      	beq.n	800e488 <lwip_netconn_do_writemore+0x294>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a1b      	ldr	r3, [r3, #32]
 800e434:	699a      	ldr	r2, [r3, #24]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	695b      	ldr	r3, [r3, #20]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d223      	bcs.n	800e488 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <lwip_netconn_do_writemore+0x260>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44c:	2200      	movs	r2, #0
 800e44e:	2103      	movs	r1, #3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	7f1b      	ldrb	r3, [r3, #28]
 800e458:	f043 0310 	orr.w	r3, r3, #16
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	771a      	strb	r2, [r3, #28]
 800e462:	e028      	b.n	800e4b6 <lwip_netconn_do_writemore+0x2c2>
 800e464:	0802214c 	.word	0x0802214c
 800e468:	080222a4 	.word	0x080222a4
 800e46c:	08022190 	.word	0x08022190
 800e470:	080225ac 	.word	0x080225ac
 800e474:	080222b4 	.word	0x080222b4
 800e478:	080225cc 	.word	0x080225cc
 800e47c:	080225e4 	.word	0x080225e4
 800e480:	08022624 	.word	0x08022624
 800e484:	0802264c 	.word	0x0802264c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e490:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800e494:	d305      	bcc.n	800e4a2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e49e:	2b04      	cmp	r3, #4
 800e4a0:	d909      	bls.n	800e4b6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d005      	beq.n	800e4b6 <lwip_netconn_do_writemore+0x2c2>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	2103      	movs	r1, #3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e4b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d11d      	bne.n	800e4fa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	699a      	ldr	r2, [r3, #24]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a1b      	ldr	r3, [r3, #32]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d002      	beq.n	800e4d4 <lwip_netconn_do_writemore+0x2e0>
 800e4ce:	7e3b      	ldrb	r3, [r7, #24]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f008 fb49 	bl	8016b74 <tcp_output>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e4e6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e4ea:	f113 0f04 	cmn.w	r3, #4
 800e4ee:	d12c      	bne.n	800e54a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e4f0:	7b3b      	ldrb	r3, [r7, #12]
 800e4f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	76fb      	strb	r3, [r7, #27]
 800e4f8:	e027      	b.n	800e54a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e4fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e502:	d120      	bne.n	800e546 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	f008 fb33 	bl	8016b74 <tcp_output>
 800e50e:	4603      	mov	r3, r0
 800e510:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e512:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e516:	f113 0f04 	cmn.w	r3, #4
 800e51a:	d104      	bne.n	800e526 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e51c:	7b7b      	ldrb	r3, [r7, #13]
 800e51e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e520:	2301      	movs	r3, #1
 800e522:	76fb      	strb	r3, [r7, #27]
 800e524:	e011      	b.n	800e54a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e526:	7e3b      	ldrb	r3, [r7, #24]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00e      	beq.n	800e54a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a1b      	ldr	r3, [r3, #32]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d102      	bne.n	800e53c <lwip_netconn_do_writemore+0x348>
 800e536:	f06f 0306 	mvn.w	r3, #6
 800e53a:	e000      	b.n	800e53e <lwip_netconn_do_writemore+0x34a>
 800e53c:	2300      	movs	r3, #0
 800e53e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e540:	2301      	movs	r3, #1
 800e542:	76fb      	strb	r3, [r7, #27]
 800e544:	e001      	b.n	800e54a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e546:	2301      	movs	r3, #1
 800e548:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e54a:	7efb      	ldrb	r3, [r7, #27]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d015      	beq.n	800e57c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6a1b      	ldr	r3, [r3, #32]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	330c      	adds	r3, #12
 800e558:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	7ffa      	ldrb	r2, [r7, #31]
 800e560:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e56e:	78fb      	ldrb	r3, [r7, #3]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d006      	beq.n	800e582 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e574:	68b8      	ldr	r0, [r7, #8]
 800e576:	f00e fd5d 	bl	801d034 <sys_sem_signal>
 800e57a:	e002      	b.n	800e582 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e57c:	f04f 33ff 	mov.w	r3, #4294967295
 800e580:	e000      	b.n	800e584 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3720      	adds	r7, #32
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe fd25 	bl	800cfec <netconn_err>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d166      	bne.n	800e67c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e5b8:	2b10      	cmp	r3, #16
 800e5ba:	d15d      	bne.n	800e678 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	785b      	ldrb	r3, [r3, #1]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e5c6:	23fb      	movs	r3, #251	@ 0xfb
 800e5c8:	73fb      	strb	r3, [r7, #15]
 800e5ca:	e057      	b.n	800e67c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d04d      	beq.n	800e672 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6a1b      	ldr	r3, [r3, #32]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d006      	beq.n	800e5f6 <lwip_netconn_do_write+0x6a>
 800e5e8:	4b28      	ldr	r3, [pc, #160]	@ (800e68c <lwip_netconn_do_write+0x100>)
 800e5ea:	f240 7223 	movw	r2, #1827	@ 0x723
 800e5ee:	4928      	ldr	r1, [pc, #160]	@ (800e690 <lwip_netconn_do_write+0x104>)
 800e5f0:	4828      	ldr	r0, [pc, #160]	@ (800e694 <lwip_netconn_do_write+0x108>)
 800e5f2:	f00f fee1 	bl	801e3b8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	695b      	ldr	r3, [r3, #20]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d106      	bne.n	800e60c <lwip_netconn_do_write+0x80>
 800e5fe:	4b23      	ldr	r3, [pc, #140]	@ (800e68c <lwip_netconn_do_write+0x100>)
 800e600:	f240 7224 	movw	r2, #1828	@ 0x724
 800e604:	4924      	ldr	r1, [pc, #144]	@ (800e698 <lwip_netconn_do_write+0x10c>)
 800e606:	4823      	ldr	r0, [pc, #140]	@ (800e694 <lwip_netconn_do_write+0x108>)
 800e608:	f00f fed6 	bl	801e3b8 <iprintf>
        msg->conn->current_msg = msg;
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2100      	movs	r1, #0
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fdea 	bl	800e1f4 <lwip_netconn_do_writemore>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d02e      	beq.n	800e684 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	785b      	ldrb	r3, [r3, #1]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d006      	beq.n	800e63e <lwip_netconn_do_write+0xb2>
 800e630:	4b16      	ldr	r3, [pc, #88]	@ (800e68c <lwip_netconn_do_write+0x100>)
 800e632:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800e636:	4919      	ldr	r1, [pc, #100]	@ (800e69c <lwip_netconn_do_write+0x110>)
 800e638:	4816      	ldr	r0, [pc, #88]	@ (800e694 <lwip_netconn_do_write+0x108>)
 800e63a:	f00f febd 	bl	801e3b8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e63e:	4818      	ldr	r0, [pc, #96]	@ (800e6a0 <lwip_netconn_do_write+0x114>)
 800e640:	f00e fd61 	bl	801d106 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	330c      	adds	r3, #12
 800e64a:	2100      	movs	r1, #0
 800e64c:	4618      	mov	r0, r3
 800e64e:	f00e fcc0 	bl	801cfd2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e652:	4813      	ldr	r0, [pc, #76]	@ (800e6a0 <lwip_netconn_do_write+0x114>)
 800e654:	f00e fd48 	bl	801d0e8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	785b      	ldrb	r3, [r3, #1]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d110      	bne.n	800e684 <lwip_netconn_do_write+0xf8>
 800e662:	4b0a      	ldr	r3, [pc, #40]	@ (800e68c <lwip_netconn_do_write+0x100>)
 800e664:	f240 722c 	movw	r2, #1836	@ 0x72c
 800e668:	490c      	ldr	r1, [pc, #48]	@ (800e69c <lwip_netconn_do_write+0x110>)
 800e66a:	480a      	ldr	r0, [pc, #40]	@ (800e694 <lwip_netconn_do_write+0x108>)
 800e66c:	f00f fea4 	bl	801e3b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e670:	e008      	b.n	800e684 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e672:	23f5      	movs	r3, #245	@ 0xf5
 800e674:	73fb      	strb	r3, [r7, #15]
 800e676:	e001      	b.n	800e67c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e678:	23fa      	movs	r3, #250	@ 0xfa
 800e67a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	7bfa      	ldrb	r2, [r7, #15]
 800e680:	711a      	strb	r2, [r3, #4]
 800e682:	e000      	b.n	800e686 <lwip_netconn_do_write+0xfa>
        return;
 800e684:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	0802214c 	.word	0x0802214c
 800e690:	080224f0 	.word	0x080224f0
 800e694:	08022190 	.word	0x08022190
 800e698:	08022678 	.word	0x08022678
 800e69c:	0802250c 	.word	0x0802250c
 800e6a0:	2000e920 	.word	0x2000e920

0800e6a4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e6ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dc04      	bgt.n	800e6c0 <err_to_errno+0x1c>
 800e6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ba:	f113 0f10 	cmn.w	r3, #16
 800e6be:	da01      	bge.n	800e6c4 <err_to_errno+0x20>
    return EIO;
 800e6c0:	2305      	movs	r3, #5
 800e6c2:	e005      	b.n	800e6d0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6c8:	425b      	negs	r3, r3
 800e6ca:	4a04      	ldr	r2, [pc, #16]	@ (800e6dc <err_to_errno+0x38>)
 800e6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	08025ca0 	.word	0x08025ca0

0800e6e0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d013      	beq.n	800e716 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00b      	beq.n	800e70e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f002 fd74 	bl	80111e8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	605a      	str	r2, [r3, #4]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	2006      	movs	r0, #6
 800e712:	f001 feb9 	bl	8010488 <memp_free>
  }
}
 800e716:	bf00      	nop
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <netbuf_free+0x1c>
 800e72e:	4b0d      	ldr	r3, [pc, #52]	@ (800e764 <netbuf_free+0x44>)
 800e730:	2281      	movs	r2, #129	@ 0x81
 800e732:	490d      	ldr	r1, [pc, #52]	@ (800e768 <netbuf_free+0x48>)
 800e734:	480d      	ldr	r0, [pc, #52]	@ (800e76c <netbuf_free+0x4c>)
 800e736:	f00f fe3f 	bl	801e3b8 <iprintf>
 800e73a:	e00f      	b.n	800e75c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	f002 fd4d 	bl	80111e8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	605a      	str	r2, [r3, #4]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	080226cc 	.word	0x080226cc
 800e768:	08022768 	.word	0x08022768
 800e76c:	0802271c 	.word	0x0802271c

0800e770 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	4613      	mov	r3, r2
 800e77c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d108      	bne.n	800e796 <netbuf_ref+0x26>
 800e784:	4b1c      	ldr	r3, [pc, #112]	@ (800e7f8 <netbuf_ref+0x88>)
 800e786:	2299      	movs	r2, #153	@ 0x99
 800e788:	491c      	ldr	r1, [pc, #112]	@ (800e7fc <netbuf_ref+0x8c>)
 800e78a:	481d      	ldr	r0, [pc, #116]	@ (800e800 <netbuf_ref+0x90>)
 800e78c:	f00f fe14 	bl	801e3b8 <iprintf>
 800e790:	f06f 030f 	mvn.w	r3, #15
 800e794:	e02b      	b.n	800e7ee <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d004      	beq.n	800e7a8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f002 fd20 	bl	80111e8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e7a8:	2241      	movs	r2, #65	@ 0x41
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	2036      	movs	r0, #54	@ 0x36
 800e7ae:	f002 fa37 	bl	8010c20 <pbuf_alloc>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d105      	bne.n	800e7cc <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ca:	e010      	b.n	800e7ee <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	88fa      	ldrh	r2, [r7, #6]
 800e7da:	811a      	strh	r2, [r3, #8]
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	6812      	ldr	r2, [r2, #0]
 800e7e0:	891b      	ldrh	r3, [r3, #8]
 800e7e2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	080226cc 	.word	0x080226cc
 800e7fc:	08022784 	.word	0x08022784
 800e800:	0802271c 	.word	0x0802271c

0800e804 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2b00      	cmp	r3, #0
 800e814:	db02      	blt.n	800e81c <tryget_socket_unconn_nouse+0x18>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b03      	cmp	r3, #3
 800e81a:	dd01      	ble.n	800e820 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e81c:	2300      	movs	r3, #0
 800e81e:	e003      	b.n	800e828 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4a03      	ldr	r2, [pc, #12]	@ (800e834 <tryget_socket_unconn_nouse+0x30>)
 800e826:	4413      	add	r3, r2
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2000e8d0 	.word	0x2000e8d0

0800e838 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff ffdf 	bl	800e804 <tryget_socket_unconn_nouse>
 800e846:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b084      	sub	sp, #16
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff ffec 	bl	800e838 <tryget_socket_unconn>
 800e860:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d005      	beq.n	800e874 <tryget_socket+0x22>
    if (sock->conn) {
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <tryget_socket+0x22>
      return sock;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	e000      	b.n	800e876 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
	...

0800e880 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff ffe2 	bl	800e852 <tryget_socket>
 800e88e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d104      	bne.n	800e8a0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e896:	4b05      	ldr	r3, [pc, #20]	@ (800e8ac <get_socket+0x2c>)
 800e898:	2209      	movs	r2, #9
 800e89a:	601a      	str	r2, [r3, #0]
    return NULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	e000      	b.n	800e8a2 <get_socket+0x22>
  }
  return sock;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20012948 	.word	0x20012948

0800e8b0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60fb      	str	r3, [r7, #12]
 800e8be:	e052      	b.n	800e966 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e8c0:	f00e fc4e 	bl	801d160 <sys_arch_protect>
 800e8c4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e8c6:	4a2c      	ldr	r2, [pc, #176]	@ (800e978 <alloc_socket+0xc8>)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	011b      	lsls	r3, r3, #4
 800e8cc:	4413      	add	r3, r2
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d142      	bne.n	800e95a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e8d4:	4a28      	ldr	r2, [pc, #160]	@ (800e978 <alloc_socket+0xc8>)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	4413      	add	r3, r2
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e8e0:	68b8      	ldr	r0, [r7, #8]
 800e8e2:	f00e fc4b 	bl	801d17c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e8e6:	4a24      	ldr	r2, [pc, #144]	@ (800e978 <alloc_socket+0xc8>)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	011b      	lsls	r3, r3, #4
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e8f4:	4a20      	ldr	r2, [pc, #128]	@ (800e978 <alloc_socket+0xc8>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	4413      	add	r3, r2
 800e8fc:	330e      	adds	r3, #14
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d006      	beq.n	800e912 <alloc_socket+0x62>
 800e904:	4b1d      	ldr	r3, [pc, #116]	@ (800e97c <alloc_socket+0xcc>)
 800e906:	f240 220e 	movw	r2, #526	@ 0x20e
 800e90a:	491d      	ldr	r1, [pc, #116]	@ (800e980 <alloc_socket+0xd0>)
 800e90c:	481d      	ldr	r0, [pc, #116]	@ (800e984 <alloc_socket+0xd4>)
 800e90e:	f00f fd53 	bl	801e3b8 <iprintf>
      sockets[i].rcvevent   = 0;
 800e912:	4a19      	ldr	r2, [pc, #100]	@ (800e978 <alloc_socket+0xc8>)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	011b      	lsls	r3, r3, #4
 800e918:	4413      	add	r3, r2
 800e91a:	3308      	adds	r3, #8
 800e91c:	2200      	movs	r2, #0
 800e91e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e928:	2b10      	cmp	r3, #16
 800e92a:	d102      	bne.n	800e932 <alloc_socket+0x82>
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <alloc_socket+0x86>
 800e932:	2301      	movs	r3, #1
 800e934:	e000      	b.n	800e938 <alloc_socket+0x88>
 800e936:	2300      	movs	r3, #0
 800e938:	b299      	uxth	r1, r3
 800e93a:	4a0f      	ldr	r2, [pc, #60]	@ (800e978 <alloc_socket+0xc8>)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	011b      	lsls	r3, r3, #4
 800e940:	4413      	add	r3, r2
 800e942:	330a      	adds	r3, #10
 800e944:	460a      	mov	r2, r1
 800e946:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e948:	4a0b      	ldr	r2, [pc, #44]	@ (800e978 <alloc_socket+0xc8>)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	011b      	lsls	r3, r3, #4
 800e94e:	4413      	add	r3, r2
 800e950:	330c      	adds	r3, #12
 800e952:	2200      	movs	r2, #0
 800e954:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	e00a      	b.n	800e970 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e95a:	68b8      	ldr	r0, [r7, #8]
 800e95c:	f00e fc0e 	bl	801d17c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3301      	adds	r3, #1
 800e964:	60fb      	str	r3, [r7, #12]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b03      	cmp	r3, #3
 800e96a:	dda9      	ble.n	800e8c0 <alloc_socket+0x10>
  }
  return -1;
 800e96c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	2000e8d0 	.word	0x2000e8d0
 800e97c:	08022864 	.word	0x08022864
 800e980:	08022898 	.word	0x08022898
 800e984:	080228b8 	.word	0x080228b8

0800e988 <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08c      	sub	sp, #48	@ 0x30
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f7ff ff73 	bl	800e880 <get_socket>
 800e99a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d102      	bne.n	800e9a8 <lwip_connect+0x20>
    return -1;
 800e9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a6:	e062      	b.n	800ea6e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d108      	bne.n	800e9c2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800e9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe f9ef 	bl	800cd98 <netconn_disconnect>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e9c0:	e039      	b.n	800ea36 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b10      	cmp	r3, #16
 800e9c6:	d10c      	bne.n	800e9e2 <lwip_connect+0x5a>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <lwip_connect+0x50>
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	785b      	ldrb	r3, [r3, #1]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	d104      	bne.n	800e9e2 <lwip_connect+0x5a>
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f003 0303 	and.w	r3, r3, #3
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d014      	beq.n	800ea0c <lwip_connect+0x84>
 800e9e2:	4b25      	ldr	r3, [pc, #148]	@ (800ea78 <lwip_connect+0xf0>)
 800e9e4:	f240 3247 	movw	r2, #839	@ 0x347
 800e9e8:	4924      	ldr	r1, [pc, #144]	@ (800ea7c <lwip_connect+0xf4>)
 800e9ea:	4825      	ldr	r0, [pc, #148]	@ (800ea80 <lwip_connect+0xf8>)
 800e9ec:	f00f fce4 	bl	801e3b8 <iprintf>
 800e9f0:	f06f 000f 	mvn.w	r0, #15
 800e9f4:	f7ff fe56 	bl	800e6a4 <err_to_errno>
 800e9f8:	6238      	str	r0, [r7, #32]
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <lwip_connect+0x7e>
 800ea00:	4a20      	ldr	r2, [pc, #128]	@ (800ea84 <lwip_connect+0xfc>)
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	f04f 33ff 	mov.w	r3, #4294967295
 800ea0a:	e030      	b.n	800ea6e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	885b      	ldrh	r3, [r3, #2]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 fcfa 	bl	800f410 <lwip_htons>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea26:	f107 0114 	add.w	r1, r7, #20
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f97c 	bl	800cd28 <netconn_connect>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800ea36:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00e      	beq.n	800ea5c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800ea3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff fe2e 	bl	800e6a4 <err_to_errno>
 800ea48:	61b8      	str	r0, [r7, #24]
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <lwip_connect+0xce>
 800ea50:	4a0c      	ldr	r2, [pc, #48]	@ (800ea84 <lwip_connect+0xfc>)
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	e008      	b.n	800ea6e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	61fb      	str	r3, [r7, #28]
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d002      	beq.n	800ea6c <lwip_connect+0xe4>
 800ea66:	4a07      	ldr	r2, [pc, #28]	@ (800ea84 <lwip_connect+0xfc>)
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3730      	adds	r7, #48	@ 0x30
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	08022864 	.word	0x08022864
 800ea7c:	0802293c 	.word	0x0802293c
 800ea80:	080228b8 	.word	0x080228b8
 800ea84:	20012948 	.word	0x20012948

0800ea88 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	@ 0x28
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff fef2 	bl	800e880 <get_socket>
 800ea9c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <lwip_send+0x22>
    return -1;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	e046      	b.n	800eb38 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eab4:	2b10      	cmp	r3, #16
 800eab6:	d00b      	beq.n	800ead0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800eab8:	2300      	movs	r3, #0
 800eaba:	9301      	str	r3, [sp, #4]
 800eabc:	2300      	movs	r3, #0
 800eabe:	9300      	str	r3, [sp, #0]
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	68b9      	ldr	r1, [r7, #8]
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f000 f83c 	bl	800eb44 <lwip_sendto>
 800eacc:	4603      	mov	r3, r0
 800eace:	e033      	b.n	800eb38 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <lwip_send+0x56>
 800eada:	2203      	movs	r2, #3
 800eadc:	e000      	b.n	800eae0 <lwip_send+0x58>
 800eade:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	105b      	asrs	r3, r3, #1
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	f003 0304 	and.w	r3, r3, #4
 800eaea:	b25b      	sxtb	r3, r3
 800eaec:	4313      	orrs	r3, r2
 800eaee:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800eaf0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	6818      	ldr	r0, [r3, #0]
 800eafa:	7efa      	ldrb	r2, [r7, #27]
 800eafc:	f107 0310 	add.w	r3, r7, #16
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	4613      	mov	r3, r2
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	68b9      	ldr	r1, [r7, #8]
 800eb08:	f7fe f99e 	bl	800ce48 <netconn_write_partly>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800eb10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fdc5 	bl	800e6a4 <err_to_errno>
 800eb1a:	6178      	str	r0, [r7, #20]
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <lwip_send+0xa0>
 800eb22:	4a07      	ldr	r2, [pc, #28]	@ (800eb40 <lwip_send+0xb8>)
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800eb28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d101      	bne.n	800eb34 <lwip_send+0xac>
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	e001      	b.n	800eb38 <lwip_send+0xb0>
 800eb34:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3720      	adds	r7, #32
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20012948 	.word	0x20012948

0800eb44 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08e      	sub	sp, #56	@ 0x38
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
 800eb50:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7ff fe94 	bl	800e880 <get_socket>
 800eb58:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <lwip_sendto+0x22>
    return -1;
 800eb60:	f04f 33ff 	mov.w	r3, #4294967295
 800eb64:	e093      	b.n	800ec8e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb70:	2b10      	cmp	r3, #16
 800eb72:	d107      	bne.n	800eb84 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff ff84 	bl	800ea88 <lwip_send>
 800eb80:	4603      	mov	r3, r0
 800eb82:	e084      	b.n	800ec8e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb8a:	d30a      	bcc.n	800eba2 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800eb8c:	235a      	movs	r3, #90	@ 0x5a
 800eb8e:	623b      	str	r3, [r7, #32]
 800eb90:	6a3b      	ldr	r3, [r7, #32]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d002      	beq.n	800eb9c <lwip_sendto+0x58>
 800eb96:	4a40      	ldr	r2, [pc, #256]	@ (800ec98 <lwip_sendto+0x154>)
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	e075      	b.n	800ec8e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800eba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <lwip_sendto+0x6e>
 800ebac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d023      	beq.n	800ebfa <lwip_sendto+0xb6>
 800ebb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	d10b      	bne.n	800ebd0 <lwip_sendto+0x8c>
 800ebb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d008      	beq.n	800ebd0 <lwip_sendto+0x8c>
 800ebbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebc0:	785b      	ldrb	r3, [r3, #1]
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d104      	bne.n	800ebd0 <lwip_sendto+0x8c>
 800ebc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebc8:	f003 0303 	and.w	r3, r3, #3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d014      	beq.n	800ebfa <lwip_sendto+0xb6>
 800ebd0:	4b32      	ldr	r3, [pc, #200]	@ (800ec9c <lwip_sendto+0x158>)
 800ebd2:	f240 6252 	movw	r2, #1618	@ 0x652
 800ebd6:	4932      	ldr	r1, [pc, #200]	@ (800eca0 <lwip_sendto+0x15c>)
 800ebd8:	4832      	ldr	r0, [pc, #200]	@ (800eca4 <lwip_sendto+0x160>)
 800ebda:	f00f fbed 	bl	801e3b8 <iprintf>
 800ebde:	f06f 000f 	mvn.w	r0, #15
 800ebe2:	f7ff fd5f 	bl	800e6a4 <err_to_errno>
 800ebe6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <lwip_sendto+0xb0>
 800ebee:	4a2a      	ldr	r2, [pc, #168]	@ (800ec98 <lwip_sendto+0x154>)
 800ebf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf8:	e049      	b.n	800ec8e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	617b      	str	r3, [r7, #20]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ec02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00a      	beq.n	800ec1e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ec08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	61bb      	str	r3, [r7, #24]
 800ec0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec10:	885b      	ldrh	r3, [r3, #2]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 fbfc 	bl	800f410 <lwip_htons>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ec1c:	e003      	b.n	800ec26 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ec22:	2300      	movs	r3, #0
 800ec24:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ec26:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ec28:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ec2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ec2c:	f107 0310 	add.w	r3, r7, #16
 800ec30:	68b9      	ldr	r1, [r7, #8]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fd9c 	bl	800e770 <netbuf_ref>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800ec3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10a      	bne.n	800ec5c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800ec46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f107 0210 	add.w	r2, r7, #16
 800ec4e:	4611      	mov	r1, r2
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fe f8cb 	bl	800cdec <netconn_send>
 800ec56:	4603      	mov	r3, r0
 800ec58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ec5c:	f107 0310 	add.w	r3, r7, #16
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fd5d 	bl	800e720 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800ec66:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff fd1a 	bl	800e6a4 <err_to_errno>
 800ec70:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d002      	beq.n	800ec7e <lwip_sendto+0x13a>
 800ec78:	4a07      	ldr	r2, [pc, #28]	@ (800ec98 <lwip_sendto+0x154>)
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800ec7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <lwip_sendto+0x146>
 800ec86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ec88:	e001      	b.n	800ec8e <lwip_sendto+0x14a>
 800ec8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3738      	adds	r7, #56	@ 0x38
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	20012948 	.word	0x20012948
 800ec9c:	08022864 	.word	0x08022864
 800eca0:	08022b44 	.word	0x08022b44
 800eca4:	080228b8 	.word	0x080228b8

0800eca8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2b03      	cmp	r3, #3
 800ecb8:	d009      	beq.n	800ecce <lwip_socket+0x26>
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	dc23      	bgt.n	800ed08 <lwip_socket+0x60>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d019      	beq.n	800ecfa <lwip_socket+0x52>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d009      	beq.n	800ece0 <lwip_socket+0x38>
 800eccc:	e01c      	b.n	800ed08 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	4a22      	ldr	r2, [pc, #136]	@ (800ed5c <lwip_socket+0xb4>)
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	2040      	movs	r0, #64	@ 0x40
 800ecd8:	f7fd ff6c 	bl	800cbb4 <netconn_new_with_proto_and_callback>
 800ecdc:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ecde:	e019      	b.n	800ed14 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b88      	cmp	r3, #136	@ 0x88
 800ece4:	d101      	bne.n	800ecea <lwip_socket+0x42>
 800ece6:	2321      	movs	r3, #33	@ 0x21
 800ece8:	e000      	b.n	800ecec <lwip_socket+0x44>
 800ecea:	2320      	movs	r3, #32
 800ecec:	4a1b      	ldr	r2, [pc, #108]	@ (800ed5c <lwip_socket+0xb4>)
 800ecee:	2100      	movs	r1, #0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd ff5f 	bl	800cbb4 <netconn_new_with_proto_and_callback>
 800ecf6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ecf8:	e00c      	b.n	800ed14 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ecfa:	4a18      	ldr	r2, [pc, #96]	@ (800ed5c <lwip_socket+0xb4>)
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	2010      	movs	r0, #16
 800ed00:	f7fd ff58 	bl	800cbb4 <netconn_new_with_proto_and_callback>
 800ed04:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ed06:	e005      	b.n	800ed14 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ed08:	4b15      	ldr	r3, [pc, #84]	@ (800ed60 <lwip_socket+0xb8>)
 800ed0a:	2216      	movs	r2, #22
 800ed0c:	601a      	str	r2, [r3, #0]
      return -1;
 800ed0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed12:	e01e      	b.n	800ed52 <lwip_socket+0xaa>
  }

  if (!conn) {
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ed1a:	4b11      	ldr	r3, [pc, #68]	@ (800ed60 <lwip_socket+0xb8>)
 800ed1c:	2269      	movs	r2, #105	@ 0x69
 800ed1e:	601a      	str	r2, [r3, #0]
    return -1;
 800ed20:	f04f 33ff 	mov.w	r3, #4294967295
 800ed24:	e015      	b.n	800ed52 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800ed26:	2100      	movs	r1, #0
 800ed28:	6978      	ldr	r0, [r7, #20]
 800ed2a:	f7ff fdc1 	bl	800e8b0 <alloc_socket>
 800ed2e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed36:	d108      	bne.n	800ed4a <lwip_socket+0xa2>
    netconn_delete(conn);
 800ed38:	6978      	ldr	r0, [r7, #20]
 800ed3a:	f7fd ffd9 	bl	800ccf0 <netconn_delete>
    set_errno(ENFILE);
 800ed3e:	4b08      	ldr	r3, [pc, #32]	@ (800ed60 <lwip_socket+0xb8>)
 800ed40:	2217      	movs	r2, #23
 800ed42:	601a      	str	r2, [r3, #0]
    return -1;
 800ed44:	f04f 33ff 	mov.w	r3, #4294967295
 800ed48:	e003      	b.n	800ed52 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	693a      	ldr	r2, [r7, #16]
 800ed4e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ed50:	693b      	ldr	r3, [r7, #16]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3718      	adds	r7, #24
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	0800ee0d 	.word	0x0800ee0d
 800ed60:	20012948 	.word	0x20012948

0800ed64 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800ed70:	2300      	movs	r3, #0
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f7ff fe86 	bl	800ea88 <lwip_send>
 800ed7c:	4603      	mov	r3, r0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ed86:	b480      	push	{r7}
 800ed88:	b087      	sub	sp, #28
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	60f8      	str	r0, [r7, #12]
 800ed8e:	60b9      	str	r1, [r7, #8]
 800ed90:	607a      	str	r2, [r7, #4]
 800ed92:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	e02c      	b.n	800edf4 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	695a      	ldr	r2, [r3, #20]
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	00db      	lsls	r3, r3, #3
 800eda2:	4413      	add	r3, r2
 800eda4:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	429a      	cmp	r2, r3
 800edae:	d11e      	bne.n	800edee <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d009      	beq.n	800edca <lwip_poll_should_wake+0x44>
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	f003 0301 	and.w	r3, r3, #1
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <lwip_poll_should_wake+0x44>
        return 1;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e01a      	b.n	800ee00 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d009      	beq.n	800ede4 <lwip_poll_should_wake+0x5e>
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	f003 0302 	and.w	r3, r3, #2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <lwip_poll_should_wake+0x5e>
        return 1;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e00d      	b.n	800ee00 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800edea:	2301      	movs	r3, #1
 800edec:	e008      	b.n	800ee00 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	3301      	adds	r3, #1
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	697a      	ldr	r2, [r7, #20]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d3cd      	bcc.n	800ed9a <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	371c      	adds	r7, #28
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08a      	sub	sp, #40	@ 0x28
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	70fb      	strb	r3, [r7, #3]
 800ee18:	4613      	mov	r3, r2
 800ee1a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f000 80a4 	beq.w	800ef6c <event_callback+0x160>
    s = conn->socket;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	da18      	bge.n	800ee62 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ee30:	f00e f996 	bl	801d160 <sys_arch_protect>
 800ee34:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	da0b      	bge.n	800ee56 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ee3e:	78fb      	ldrb	r3, [r7, #3]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d104      	bne.n	800ee4e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	1e5a      	subs	r2, r3, #1
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ee4e:	69f8      	ldr	r0, [r7, #28]
 800ee50:	f00e f994 	bl	801d17c <sys_arch_unprotect>
        return;
 800ee54:	e08d      	b.n	800ef72 <event_callback+0x166>
      }
      s = conn->socket;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ee5c:	69f8      	ldr	r0, [r7, #28]
 800ee5e:	f00e f98d 	bl	801d17c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ee62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee64:	f7ff fd0c 	bl	800e880 <get_socket>
 800ee68:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d07f      	beq.n	800ef70 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ee70:	2301      	movs	r3, #1
 800ee72:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ee74:	f00e f974 	bl	801d160 <sys_arch_protect>
 800ee78:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ee7a:	78fb      	ldrb	r3, [r7, #3]
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	d83e      	bhi.n	800eefe <event_callback+0xf2>
 800ee80:	a201      	add	r2, pc, #4	@ (adr r2, 800ee88 <event_callback+0x7c>)
 800ee82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee86:	bf00      	nop
 800ee88:	0800ee9d 	.word	0x0800ee9d
 800ee8c:	0800eebf 	.word	0x0800eebf
 800ee90:	0800eed7 	.word	0x0800eed7
 800ee94:	0800eeeb 	.word	0x0800eeeb
 800ee98:	0800eef7 	.word	0x0800eef7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	3301      	adds	r3, #1
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	b21a      	sxth	r2, r3
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	dd2a      	ble.n	800ef0e <event_callback+0x102>
        check_waiters = 0;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	623b      	str	r3, [r7, #32]
      }
      break;
 800eebc:	e027      	b.n	800ef0e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	3b01      	subs	r3, #1
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	b21a      	sxth	r2, r3
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	623b      	str	r3, [r7, #32]
      break;
 800eed4:	e01c      	b.n	800ef10 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	895b      	ldrh	r3, [r3, #10]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <event_callback+0xd6>
        check_waiters = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	2201      	movs	r2, #1
 800eee6:	815a      	strh	r2, [r3, #10]
      break;
 800eee8:	e012      	b.n	800ef10 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	2200      	movs	r2, #0
 800eeee:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	623b      	str	r3, [r7, #32]
      break;
 800eef4:	e00c      	b.n	800ef10 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	2201      	movs	r2, #1
 800eefa:	819a      	strh	r2, [r3, #12]
      break;
 800eefc:	e008      	b.n	800ef10 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800eefe:	4b1e      	ldr	r3, [pc, #120]	@ (800ef78 <event_callback+0x16c>)
 800ef00:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800ef04:	491d      	ldr	r1, [pc, #116]	@ (800ef7c <event_callback+0x170>)
 800ef06:	481e      	ldr	r0, [pc, #120]	@ (800ef80 <event_callback+0x174>)
 800ef08:	f00f fa56 	bl	801e3b8 <iprintf>
      break;
 800ef0c:	e000      	b.n	800ef10 <event_callback+0x104>
      break;
 800ef0e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	7b9b      	ldrb	r3, [r3, #14]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d025      	beq.n	800ef64 <event_callback+0x158>
 800ef18:	6a3b      	ldr	r3, [r7, #32]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d022      	beq.n	800ef64 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	bfcc      	ite	gt
 800ef28:	2301      	movgt	r3, #1
 800ef2a:	2300      	movle	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	895b      	ldrh	r3, [r3, #10]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	bf14      	ite	ne
 800ef38:	2301      	movne	r3, #1
 800ef3a:	2300      	moveq	r3, #0
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	899b      	ldrh	r3, [r3, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bf14      	ite	ne
 800ef48:	2301      	movne	r3, #1
 800ef4a:	2300      	moveq	r3, #0
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ef50:	69f8      	ldr	r0, [r7, #28]
 800ef52:	f00e f913 	bl	801d17c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	693a      	ldr	r2, [r7, #16]
 800ef5a:	6979      	ldr	r1, [r7, #20]
 800ef5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef5e:	f000 f811 	bl	800ef84 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ef62:	e006      	b.n	800ef72 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ef64:	69f8      	ldr	r0, [r7, #28]
 800ef66:	f00e f909 	bl	801d17c <sys_arch_unprotect>
 800ef6a:	e002      	b.n	800ef72 <event_callback+0x166>
    return;
 800ef6c:	bf00      	nop
 800ef6e:	e000      	b.n	800ef72 <event_callback+0x166>
      return;
 800ef70:	bf00      	nop
  }
  done_socket(sock);
}
 800ef72:	3728      	adds	r7, #40	@ 0x28
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	08022864 	.word	0x08022864
 800ef7c:	08022be0 	.word	0x08022be0
 800ef80:	080228b8 	.word	0x080228b8

0800ef84 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af02      	add	r7, sp, #8
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
 800ef90:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ef92:	4b42      	ldr	r3, [pc, #264]	@ (800f09c <select_check_waiters+0x118>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	e078      	b.n	800f08c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	69db      	ldr	r3, [r3, #28]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d171      	bne.n	800f086 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	695b      	ldr	r3, [r3, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	68f9      	ldr	r1, [r7, #12]
 800efb8:	6978      	ldr	r0, [r7, #20]
 800efba:	f7ff fee4 	bl	800ed86 <lwip_poll_should_wake>
 800efbe:	6138      	str	r0, [r7, #16]
 800efc0:	e056      	b.n	800f070 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d017      	beq.n	800eff8 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d013      	beq.n	800eff8 <select_check_waiters+0x74>
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	689a      	ldr	r2, [r3, #8]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	da00      	bge.n	800efdc <select_check_waiters+0x58>
 800efda:	331f      	adds	r3, #31
 800efdc:	115b      	asrs	r3, r3, #5
 800efde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 031f 	and.w	r3, r3, #31
 800efe8:	fa22 f303 	lsr.w	r3, r2, r3
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d001      	beq.n	800eff8 <select_check_waiters+0x74>
            do_signal = 1;
 800eff4:	2301      	movs	r3, #1
 800eff6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01a      	beq.n	800f034 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d117      	bne.n	800f034 <select_check_waiters+0xb0>
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d013      	beq.n	800f034 <select_check_waiters+0xb0>
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	68da      	ldr	r2, [r3, #12]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	da00      	bge.n	800f018 <select_check_waiters+0x94>
 800f016:	331f      	adds	r3, #31
 800f018:	115b      	asrs	r3, r3, #5
 800f01a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f003 031f 	and.w	r3, r3, #31
 800f024:	fa22 f303 	lsr.w	r3, r2, r3
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <select_check_waiters+0xb0>
            do_signal = 1;
 800f030:	2301      	movs	r3, #1
 800f032:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d01a      	beq.n	800f070 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d117      	bne.n	800f070 <select_check_waiters+0xec>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d013      	beq.n	800f070 <select_check_waiters+0xec>
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	691a      	ldr	r2, [r3, #16]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	da00      	bge.n	800f054 <select_check_waiters+0xd0>
 800f052:	331f      	adds	r3, #31
 800f054:	115b      	asrs	r3, r3, #5
 800f056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f003 031f 	and.w	r3, r3, #31
 800f060:	fa22 f303 	lsr.w	r3, r2, r3
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <select_check_waiters+0xec>
            do_signal = 1;
 800f06c:	2301      	movs	r3, #1
 800f06e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d007      	beq.n	800f086 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2201      	movs	r2, #1
 800f07a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	3320      	adds	r3, #32
 800f080:	4618      	mov	r0, r3
 800f082:	f00d ffd7 	bl	801d034 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	617b      	str	r3, [r7, #20]
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d183      	bne.n	800ef9a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f092:	bf00      	nop
 800f094:	bf00      	nop
 800f096:	3718      	adds	r7, #24
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	2000e910 	.word	0x2000e910

0800f0a0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f0aa:	f008 fe1b 	bl	8017ce4 <sys_timeouts_sleeptime>
 800f0ae:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d10b      	bne.n	800f0d0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f0b8:	4813      	ldr	r0, [pc, #76]	@ (800f108 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0ba:	f00e f824 	bl	801d106 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f0be:	2200      	movs	r2, #0
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f00d fefa 	bl	801cebc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f0c8:	480f      	ldr	r0, [pc, #60]	@ (800f108 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0ca:	f00e f80d 	bl	801d0e8 <sys_mutex_lock>
    return;
 800f0ce:	e018      	b.n	800f102 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f0d6:	f008 fdcb 	bl	8017c70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f0da:	e7e6      	b.n	800f0aa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f0dc:	480a      	ldr	r0, [pc, #40]	@ (800f108 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0de:	f00e f812 	bl	801d106 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f00d fee8 	bl	801cebc <sys_arch_mbox_fetch>
 800f0ec:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f0ee:	4806      	ldr	r0, [pc, #24]	@ (800f108 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0f0:	f00d fffa 	bl	801d0e8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fa:	d102      	bne.n	800f102 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f0fc:	f008 fdb8 	bl	8017c70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f100:	e7d3      	b.n	800f0aa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	2000e920 	.word	0x2000e920

0800f10c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f114:	4810      	ldr	r0, [pc, #64]	@ (800f158 <tcpip_thread+0x4c>)
 800f116:	f00d ffe7 	bl	801d0e8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f11a:	4b10      	ldr	r3, [pc, #64]	@ (800f15c <tcpip_thread+0x50>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d005      	beq.n	800f12e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f122:	4b0e      	ldr	r3, [pc, #56]	@ (800f15c <tcpip_thread+0x50>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a0e      	ldr	r2, [pc, #56]	@ (800f160 <tcpip_thread+0x54>)
 800f128:	6812      	ldr	r2, [r2, #0]
 800f12a:	4610      	mov	r0, r2
 800f12c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f12e:	f107 030c 	add.w	r3, r7, #12
 800f132:	4619      	mov	r1, r3
 800f134:	480b      	ldr	r0, [pc, #44]	@ (800f164 <tcpip_thread+0x58>)
 800f136:	f7ff ffb3 	bl	800f0a0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f140:	4b09      	ldr	r3, [pc, #36]	@ (800f168 <tcpip_thread+0x5c>)
 800f142:	2291      	movs	r2, #145	@ 0x91
 800f144:	4909      	ldr	r1, [pc, #36]	@ (800f16c <tcpip_thread+0x60>)
 800f146:	480a      	ldr	r0, [pc, #40]	@ (800f170 <tcpip_thread+0x64>)
 800f148:	f00f f936 	bl	801e3b8 <iprintf>
      continue;
 800f14c:	e003      	b.n	800f156 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	4618      	mov	r0, r3
 800f152:	f000 f80f 	bl	800f174 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f156:	e7ea      	b.n	800f12e <tcpip_thread+0x22>
 800f158:	2000e920 	.word	0x2000e920
 800f15c:	2000e914 	.word	0x2000e914
 800f160:	2000e918 	.word	0x2000e918
 800f164:	2000e91c 	.word	0x2000e91c
 800f168:	08022c34 	.word	0x08022c34
 800f16c:	08022c64 	.word	0x08022c64
 800f170:	08022c84 	.word	0x08022c84

0800f174 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d026      	beq.n	800f1d2 <tcpip_thread_handle_msg+0x5e>
 800f184:	2b02      	cmp	r3, #2
 800f186:	dc2b      	bgt.n	800f1e0 <tcpip_thread_handle_msg+0x6c>
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <tcpip_thread_handle_msg+0x1e>
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d015      	beq.n	800f1bc <tcpip_thread_handle_msg+0x48>
 800f190:	e026      	b.n	800f1e0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	6850      	ldr	r0, [r2, #4]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	6892      	ldr	r2, [r2, #8]
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4798      	blx	r3
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d004      	beq.n	800f1b2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f002 f81b 	bl	80111e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	2009      	movs	r0, #9
 800f1b6:	f001 f967 	bl	8010488 <memp_free>
      break;
 800f1ba:	e018      	b.n	800f1ee <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	6892      	ldr	r2, [r2, #8]
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	2008      	movs	r0, #8
 800f1cc:	f001 f95c 	bl	8010488 <memp_free>
      break;
 800f1d0:	e00d      	b.n	800f1ee <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	6892      	ldr	r2, [r2, #8]
 800f1da:	4610      	mov	r0, r2
 800f1dc:	4798      	blx	r3
      break;
 800f1de:	e006      	b.n	800f1ee <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f1e0:	4b05      	ldr	r3, [pc, #20]	@ (800f1f8 <tcpip_thread_handle_msg+0x84>)
 800f1e2:	22cf      	movs	r2, #207	@ 0xcf
 800f1e4:	4905      	ldr	r1, [pc, #20]	@ (800f1fc <tcpip_thread_handle_msg+0x88>)
 800f1e6:	4806      	ldr	r0, [pc, #24]	@ (800f200 <tcpip_thread_handle_msg+0x8c>)
 800f1e8:	f00f f8e6 	bl	801e3b8 <iprintf>
      break;
 800f1ec:	bf00      	nop
  }
}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	08022c34 	.word	0x08022c34
 800f1fc:	08022c64 	.word	0x08022c64
 800f200:	08022c84 	.word	0x08022c84

0800f204 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f210:	481a      	ldr	r0, [pc, #104]	@ (800f27c <tcpip_inpkt+0x78>)
 800f212:	f00d fe9b 	bl	801cf4c <sys_mbox_valid>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d105      	bne.n	800f228 <tcpip_inpkt+0x24>
 800f21c:	4b18      	ldr	r3, [pc, #96]	@ (800f280 <tcpip_inpkt+0x7c>)
 800f21e:	22fc      	movs	r2, #252	@ 0xfc
 800f220:	4918      	ldr	r1, [pc, #96]	@ (800f284 <tcpip_inpkt+0x80>)
 800f222:	4819      	ldr	r0, [pc, #100]	@ (800f288 <tcpip_inpkt+0x84>)
 800f224:	f00f f8c8 	bl	801e3b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f228:	2009      	movs	r0, #9
 800f22a:	f001 f8b7 	bl	801039c <memp_malloc>
 800f22e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d102      	bne.n	800f23c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f236:	f04f 33ff 	mov.w	r3, #4294967295
 800f23a:	e01a      	b.n	800f272 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f254:	6979      	ldr	r1, [r7, #20]
 800f256:	4809      	ldr	r0, [pc, #36]	@ (800f27c <tcpip_inpkt+0x78>)
 800f258:	f00d fe16 	bl	801ce88 <sys_mbox_trypost>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d006      	beq.n	800f270 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f262:	6979      	ldr	r1, [r7, #20]
 800f264:	2009      	movs	r0, #9
 800f266:	f001 f90f 	bl	8010488 <memp_free>
    return ERR_MEM;
 800f26a:	f04f 33ff 	mov.w	r3, #4294967295
 800f26e:	e000      	b.n	800f272 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f270:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	2000e91c 	.word	0x2000e91c
 800f280:	08022c34 	.word	0x08022c34
 800f284:	08022cac 	.word	0x08022cac
 800f288:	08022c84 	.word	0x08022c84

0800f28c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f29c:	f003 0318 	and.w	r3, r3, #24
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d006      	beq.n	800f2b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f2a4:	4a08      	ldr	r2, [pc, #32]	@ (800f2c8 <tcpip_input+0x3c>)
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff ffab 	bl	800f204 <tcpip_inpkt>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e005      	b.n	800f2be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f2b2:	4a06      	ldr	r2, [pc, #24]	@ (800f2cc <tcpip_input+0x40>)
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff ffa4 	bl	800f204 <tcpip_inpkt>
 800f2bc:	4603      	mov	r3, r0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	0801cc85 	.word	0x0801cc85
 800f2cc:	0801b8fd 	.word	0x0801b8fd

0800f2d0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f2da:	4819      	ldr	r0, [pc, #100]	@ (800f340 <tcpip_try_callback+0x70>)
 800f2dc:	f00d fe36 	bl	801cf4c <sys_mbox_valid>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <tcpip_try_callback+0x24>
 800f2e6:	4b17      	ldr	r3, [pc, #92]	@ (800f344 <tcpip_try_callback+0x74>)
 800f2e8:	f240 125d 	movw	r2, #349	@ 0x15d
 800f2ec:	4916      	ldr	r1, [pc, #88]	@ (800f348 <tcpip_try_callback+0x78>)
 800f2ee:	4817      	ldr	r0, [pc, #92]	@ (800f34c <tcpip_try_callback+0x7c>)
 800f2f0:	f00f f862 	bl	801e3b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f2f4:	2008      	movs	r0, #8
 800f2f6:	f001 f851 	bl	801039c <memp_malloc>
 800f2fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d102      	bne.n	800f308 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	e017      	b.n	800f338 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2201      	movs	r2, #1
 800f30c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	683a      	ldr	r2, [r7, #0]
 800f318:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f31a:	68f9      	ldr	r1, [r7, #12]
 800f31c:	4808      	ldr	r0, [pc, #32]	@ (800f340 <tcpip_try_callback+0x70>)
 800f31e:	f00d fdb3 	bl	801ce88 <sys_mbox_trypost>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d006      	beq.n	800f336 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f328:	68f9      	ldr	r1, [r7, #12]
 800f32a:	2008      	movs	r0, #8
 800f32c:	f001 f8ac 	bl	8010488 <memp_free>
    return ERR_MEM;
 800f330:	f04f 33ff 	mov.w	r3, #4294967295
 800f334:	e000      	b.n	800f338 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f336:	2300      	movs	r3, #0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3710      	adds	r7, #16
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	2000e91c 	.word	0x2000e91c
 800f344:	08022c34 	.word	0x08022c34
 800f348:	08022cac 	.word	0x08022cac
 800f34c:	08022c84 	.word	0x08022c84

0800f350 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f35c:	4806      	ldr	r0, [pc, #24]	@ (800f378 <tcpip_send_msg_wait_sem+0x28>)
 800f35e:	f00d fec3 	bl	801d0e8 <sys_mutex_lock>
  fn(apimsg);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68b8      	ldr	r0, [r7, #8]
 800f366:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f368:	4803      	ldr	r0, [pc, #12]	@ (800f378 <tcpip_send_msg_wait_sem+0x28>)
 800f36a:	f00d fecc 	bl	801d106 <sys_mutex_unlock>
  return ERR_OK;
 800f36e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	2000e920 	.word	0x2000e920

0800f37c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af02      	add	r7, sp, #8
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f386:	f000 fb5e 	bl	800fa46 <lwip_init>

  tcpip_init_done = initfunc;
 800f38a:	4a17      	ldr	r2, [pc, #92]	@ (800f3e8 <tcpip_init+0x6c>)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f390:	4a16      	ldr	r2, [pc, #88]	@ (800f3ec <tcpip_init+0x70>)
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f396:	2106      	movs	r1, #6
 800f398:	4815      	ldr	r0, [pc, #84]	@ (800f3f0 <tcpip_init+0x74>)
 800f39a:	f00d fd49 	bl	801ce30 <sys_mbox_new>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d006      	beq.n	800f3b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f3a4:	4b13      	ldr	r3, [pc, #76]	@ (800f3f4 <tcpip_init+0x78>)
 800f3a6:	f240 2261 	movw	r2, #609	@ 0x261
 800f3aa:	4913      	ldr	r1, [pc, #76]	@ (800f3f8 <tcpip_init+0x7c>)
 800f3ac:	4813      	ldr	r0, [pc, #76]	@ (800f3fc <tcpip_init+0x80>)
 800f3ae:	f00f f803 	bl	801e3b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f3b2:	4813      	ldr	r0, [pc, #76]	@ (800f400 <tcpip_init+0x84>)
 800f3b4:	f00d fe82 	bl	801d0bc <sys_mutex_new>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d006      	beq.n	800f3cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f3be:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <tcpip_init+0x78>)
 800f3c0:	f240 2265 	movw	r2, #613	@ 0x265
 800f3c4:	490f      	ldr	r1, [pc, #60]	@ (800f404 <tcpip_init+0x88>)
 800f3c6:	480d      	ldr	r0, [pc, #52]	@ (800f3fc <tcpip_init+0x80>)
 800f3c8:	f00e fff6 	bl	801e3b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	490c      	ldr	r1, [pc, #48]	@ (800f408 <tcpip_init+0x8c>)
 800f3d8:	480c      	ldr	r0, [pc, #48]	@ (800f40c <tcpip_init+0x90>)
 800f3da:	f00d fea1 	bl	801d120 <sys_thread_new>
}
 800f3de:	bf00      	nop
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	2000e914 	.word	0x2000e914
 800f3ec:	2000e918 	.word	0x2000e918
 800f3f0:	2000e91c 	.word	0x2000e91c
 800f3f4:	08022c34 	.word	0x08022c34
 800f3f8:	08022cbc 	.word	0x08022cbc
 800f3fc:	08022c84 	.word	0x08022c84
 800f400:	2000e920 	.word	0x2000e920
 800f404:	08022ce0 	.word	0x08022ce0
 800f408:	0800f10d 	.word	0x0800f10d
 800f40c:	08022d04 	.word	0x08022d04

0800f410 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f41a:	88fb      	ldrh	r3, [r7, #6]
 800f41c:	021b      	lsls	r3, r3, #8
 800f41e:	b21a      	sxth	r2, r3
 800f420:	88fb      	ldrh	r3, [r7, #6]
 800f422:	0a1b      	lsrs	r3, r3, #8
 800f424:	b29b      	uxth	r3, r3
 800f426:	b21b      	sxth	r3, r3
 800f428:	4313      	orrs	r3, r2
 800f42a:	b21b      	sxth	r3, r3
 800f42c:	b29b      	uxth	r3, r3
}
 800f42e:	4618      	mov	r0, r3
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr

0800f43a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f43a:	b480      	push	{r7}
 800f43c:	b083      	sub	sp, #12
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	061a      	lsls	r2, r3, #24
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	021b      	lsls	r3, r3, #8
 800f44a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f44e:	431a      	orrs	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	0a1b      	lsrs	r3, r3, #8
 800f454:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f458:	431a      	orrs	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	0e1b      	lsrs	r3, r3, #24
 800f45e:	4313      	orrs	r3, r2
}
 800f460:	4618      	mov	r0, r3
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f46c:	b480      	push	{r7}
 800f46e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f470:	bf00      	nop
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
	...

0800f47c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	4603      	mov	r3, r0
 800f484:	6039      	str	r1, [r7, #0]
 800f486:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f488:	79fb      	ldrb	r3, [r7, #7]
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d80f      	bhi.n	800f4ae <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d006      	beq.n	800f4a2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	4909      	ldr	r1, [pc, #36]	@ (800f4bc <dns_setserver+0x40>)
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	6812      	ldr	r2, [r2, #0]
 800f49c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f4a0:	e005      	b.n	800f4ae <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f4a2:	79fb      	ldrb	r3, [r7, #7]
 800f4a4:	4905      	ldr	r1, [pc, #20]	@ (800f4bc <dns_setserver+0x40>)
 800f4a6:	4a06      	ldr	r2, [pc, #24]	@ (800f4c0 <dns_setserver+0x44>)
 800f4a8:	6812      	ldr	r2, [r2, #0]
 800f4aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f4ae:	bf00      	nop
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	2000eda4 	.word	0x2000eda4
 800f4c0:	08025e1c 	.word	0x08025e1c

0800f4c4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f4c8:	f000 faa8 	bl	800fa1c <dns_check_entries>
}
 800f4cc:	bf00      	nop
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b090      	sub	sp, #64	@ 0x40
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f4da:	79fa      	ldrb	r2, [r7, #7]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	011b      	lsls	r3, r3, #4
 800f4e0:	4413      	add	r3, r2
 800f4e2:	011b      	lsls	r3, r3, #4
 800f4e4:	4a6c      	ldr	r2, [pc, #432]	@ (800f698 <dns_send+0x1c8>)
 800f4e6:	4413      	add	r3, r2
 800f4e8:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ec:	7adb      	ldrb	r3, [r3, #11]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d906      	bls.n	800f500 <dns_send+0x30>
 800f4f2:	4b6a      	ldr	r3, [pc, #424]	@ (800f69c <dns_send+0x1cc>)
 800f4f4:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800f4f8:	4969      	ldr	r1, [pc, #420]	@ (800f6a0 <dns_send+0x1d0>)
 800f4fa:	486a      	ldr	r0, [pc, #424]	@ (800f6a4 <dns_send+0x1d4>)
 800f4fc:	f00e ff5c 	bl	801e3b8 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f502:	7adb      	ldrb	r3, [r3, #11]
 800f504:	461a      	mov	r2, r3
 800f506:	4b68      	ldr	r3, [pc, #416]	@ (800f6a8 <dns_send+0x1d8>)
 800f508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d109      	bne.n	800f524 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	2100      	movs	r1, #0
 800f514:	4618      	mov	r0, r3
 800f516:	f000 f8cb 	bl	800f6b0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f51c:	2200      	movs	r2, #0
 800f51e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	e0b4      	b.n	800f68e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f526:	3310      	adds	r3, #16
 800f528:	4618      	mov	r0, r3
 800f52a:	f7f0 fea1 	bl	8000270 <strlen>
 800f52e:	4603      	mov	r3, r0
 800f530:	b29b      	uxth	r3, r3
 800f532:	3312      	adds	r3, #18
 800f534:	b29b      	uxth	r3, r3
 800f536:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f53a:	4619      	mov	r1, r3
 800f53c:	2036      	movs	r0, #54	@ 0x36
 800f53e:	f001 fb6f 	bl	8010c20 <pbuf_alloc>
 800f542:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f546:	2b00      	cmp	r3, #0
 800f548:	f000 8095 	beq.w	800f676 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f54c:	f107 0310 	add.w	r3, r7, #16
 800f550:	220c      	movs	r2, #12
 800f552:	2100      	movs	r1, #0
 800f554:	4618      	mov	r0, r3
 800f556:	f00e ffce 	bl	801e4f6 <memset>
    hdr.id = lwip_htons(entry->txid);
 800f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55c:	891b      	ldrh	r3, [r3, #8]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff ff56 	bl	800f410 <lwip_htons>
 800f564:	4603      	mov	r3, r0
 800f566:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f568:	2301      	movs	r3, #1
 800f56a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f56c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f570:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f572:	f107 0310 	add.w	r3, r7, #16
 800f576:	220c      	movs	r2, #12
 800f578:	4619      	mov	r1, r3
 800f57a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f57c:	f002 f8e8 	bl	8011750 <pbuf_take>
    hostname = entry->name;
 800f580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f582:	3310      	adds	r3, #16
 800f584:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800f586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f588:	3b01      	subs	r3, #1
 800f58a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f58c:	230c      	movs	r3, #12
 800f58e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800f590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f592:	3301      	adds	r3, #1
 800f594:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800f596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f598:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f59a:	2300      	movs	r3, #0
 800f59c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f5a0:	e007      	b.n	800f5b2 <dns_send+0xe2>
        ++n;
 800f5a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5b8:	d003      	beq.n	800f5c2 <dns_send+0xf2>
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1ef      	bne.n	800f5a2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f5c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f5ca:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800f5cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	dc53      	bgt.n	800f682 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f5da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f5de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5e4:	f002 f9e2 	bl	80119ac <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f5e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f5f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5f4:	f002 f93e 	bl	8011874 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f600:	4413      	add	r3, r2
 800f602:	b29b      	uxth	r3, r3
 800f604:	3301      	adds	r3, #1
 800f606:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800f608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1bf      	bne.n	800f590 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f610:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f612:	2200      	movs	r2, #0
 800f614:	4619      	mov	r1, r3
 800f616:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f618:	f002 f9c8 	bl	80119ac <pbuf_put_at>
    query_idx++;
 800f61c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f61e:	3301      	adds	r3, #1
 800f620:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f622:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f626:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f62c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f62e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f630:	f107 010c 	add.w	r1, r7, #12
 800f634:	2204      	movs	r2, #4
 800f636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f638:	f002 f91c 	bl	8011874 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63e:	7bdb      	ldrb	r3, [r3, #15]
 800f640:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f644:	2335      	movs	r3, #53	@ 0x35
 800f646:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800f648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f64a:	7adb      	ldrb	r3, [r3, #11]
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	4a16      	ldr	r2, [pc, #88]	@ (800f6a8 <dns_send+0x1d8>)
 800f650:	4413      	add	r3, r2
 800f652:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f654:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f658:	4a14      	ldr	r2, [pc, #80]	@ (800f6ac <dns_send+0x1dc>)
 800f65a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f65e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f660:	69fa      	ldr	r2, [r7, #28]
 800f662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f664:	f008 fd6c 	bl	8018140 <udp_sendto>
 800f668:	4603      	mov	r3, r0
 800f66a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f66e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f670:	f001 fdba 	bl	80111e8 <pbuf_free>
 800f674:	e002      	b.n	800f67c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f676:	23ff      	movs	r3, #255	@ 0xff
 800f678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800f67c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f680:	e005      	b.n	800f68e <dns_send+0x1be>
        goto overflow_return;
 800f682:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f686:	f001 fdaf 	bl	80111e8 <pbuf_free>
  return ERR_VAL;
 800f68a:	f06f 0305 	mvn.w	r3, #5
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3740      	adds	r7, #64	@ 0x40
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	2000e934 	.word	0x2000e934
 800f69c:	08022d14 	.word	0x08022d14
 800f6a0:	08022d44 	.word	0x08022d44
 800f6a4:	08022d5c 	.word	0x08022d5c
 800f6a8:	2000eda4 	.word	0x2000eda4
 800f6ac:	2000e924 	.word	0x2000e924

0800f6b0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f6b0:	b590      	push	{r4, r7, lr}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73fb      	strb	r3, [r7, #15]
 800f6c0:	e03d      	b.n	800f73e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f6c2:	7bfa      	ldrb	r2, [r7, #15]
 800f6c4:	4957      	ldr	r1, [pc, #348]	@ (800f824 <dns_call_found+0x174>)
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	4413      	add	r3, r2
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	440b      	add	r3, r1
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d030      	beq.n	800f738 <dns_call_found+0x88>
 800f6d6:	7bfa      	ldrb	r2, [r7, #15]
 800f6d8:	4952      	ldr	r1, [pc, #328]	@ (800f824 <dns_call_found+0x174>)
 800f6da:	4613      	mov	r3, r2
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	4413      	add	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	440b      	add	r3, r1
 800f6e4:	3308      	adds	r3, #8
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	79fa      	ldrb	r2, [r7, #7]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d124      	bne.n	800f738 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f6ee:	7bfa      	ldrb	r2, [r7, #15]
 800f6f0:	494c      	ldr	r1, [pc, #304]	@ (800f824 <dns_call_found+0x174>)
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	440b      	add	r3, r1
 800f6fc:	681c      	ldr	r4, [r3, #0]
 800f6fe:	79fa      	ldrb	r2, [r7, #7]
 800f700:	4613      	mov	r3, r2
 800f702:	011b      	lsls	r3, r3, #4
 800f704:	4413      	add	r3, r2
 800f706:	011b      	lsls	r3, r3, #4
 800f708:	3310      	adds	r3, #16
 800f70a:	4a47      	ldr	r2, [pc, #284]	@ (800f828 <dns_call_found+0x178>)
 800f70c:	1898      	adds	r0, r3, r2
 800f70e:	7bfa      	ldrb	r2, [r7, #15]
 800f710:	4944      	ldr	r1, [pc, #272]	@ (800f824 <dns_call_found+0x174>)
 800f712:	4613      	mov	r3, r2
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	4413      	add	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	440b      	add	r3, r1
 800f71c:	3304      	adds	r3, #4
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f726:	7bfa      	ldrb	r2, [r7, #15]
 800f728:	493e      	ldr	r1, [pc, #248]	@ (800f824 <dns_call_found+0x174>)
 800f72a:	4613      	mov	r3, r2
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	4413      	add	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	440b      	add	r3, r1
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f738:	7bfb      	ldrb	r3, [r7, #15]
 800f73a:	3301      	adds	r3, #1
 800f73c:	73fb      	strb	r3, [r7, #15]
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	2b03      	cmp	r3, #3
 800f742:	d9be      	bls.n	800f6c2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f744:	2300      	movs	r3, #0
 800f746:	73fb      	strb	r3, [r7, #15]
 800f748:	e031      	b.n	800f7ae <dns_call_found+0xfe>
    if (i == idx) {
 800f74a:	7bfa      	ldrb	r2, [r7, #15]
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d029      	beq.n	800f7a6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f752:	7bfa      	ldrb	r2, [r7, #15]
 800f754:	4934      	ldr	r1, [pc, #208]	@ (800f828 <dns_call_found+0x178>)
 800f756:	4613      	mov	r3, r2
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	4413      	add	r3, r2
 800f75c:	011b      	lsls	r3, r3, #4
 800f75e:	440b      	add	r3, r1
 800f760:	330a      	adds	r3, #10
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b02      	cmp	r3, #2
 800f766:	d11f      	bne.n	800f7a8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f768:	7bfa      	ldrb	r2, [r7, #15]
 800f76a:	492f      	ldr	r1, [pc, #188]	@ (800f828 <dns_call_found+0x178>)
 800f76c:	4613      	mov	r3, r2
 800f76e:	011b      	lsls	r3, r3, #4
 800f770:	4413      	add	r3, r2
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	440b      	add	r3, r1
 800f776:	330f      	adds	r3, #15
 800f778:	7819      	ldrb	r1, [r3, #0]
 800f77a:	79fa      	ldrb	r2, [r7, #7]
 800f77c:	482a      	ldr	r0, [pc, #168]	@ (800f828 <dns_call_found+0x178>)
 800f77e:	4613      	mov	r3, r2
 800f780:	011b      	lsls	r3, r3, #4
 800f782:	4413      	add	r3, r2
 800f784:	011b      	lsls	r3, r3, #4
 800f786:	4403      	add	r3, r0
 800f788:	330f      	adds	r3, #15
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	4299      	cmp	r1, r3
 800f78e:	d10b      	bne.n	800f7a8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f790:	79fa      	ldrb	r2, [r7, #7]
 800f792:	4925      	ldr	r1, [pc, #148]	@ (800f828 <dns_call_found+0x178>)
 800f794:	4613      	mov	r3, r2
 800f796:	011b      	lsls	r3, r3, #4
 800f798:	4413      	add	r3, r2
 800f79a:	011b      	lsls	r3, r3, #4
 800f79c:	440b      	add	r3, r1
 800f79e:	330f      	adds	r3, #15
 800f7a0:	2204      	movs	r2, #4
 800f7a2:	701a      	strb	r2, [r3, #0]
        break;
 800f7a4:	e006      	b.n	800f7b4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800f7a6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	73fb      	strb	r3, [r7, #15]
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d9ca      	bls.n	800f74a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f7b4:	79fa      	ldrb	r2, [r7, #7]
 800f7b6:	491c      	ldr	r1, [pc, #112]	@ (800f828 <dns_call_found+0x178>)
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	011b      	lsls	r3, r3, #4
 800f7bc:	4413      	add	r3, r2
 800f7be:	011b      	lsls	r3, r3, #4
 800f7c0:	440b      	add	r3, r1
 800f7c2:	330f      	adds	r3, #15
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	2b03      	cmp	r3, #3
 800f7c8:	d827      	bhi.n	800f81a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f7ca:	79fa      	ldrb	r2, [r7, #7]
 800f7cc:	4916      	ldr	r1, [pc, #88]	@ (800f828 <dns_call_found+0x178>)
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	4413      	add	r3, r2
 800f7d4:	011b      	lsls	r3, r3, #4
 800f7d6:	440b      	add	r3, r1
 800f7d8:	330f      	adds	r3, #15
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b13      	ldr	r3, [pc, #76]	@ (800f82c <dns_call_found+0x17c>)
 800f7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f008 ff9f 	bl	8018728 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f7ea:	79fa      	ldrb	r2, [r7, #7]
 800f7ec:	490e      	ldr	r1, [pc, #56]	@ (800f828 <dns_call_found+0x178>)
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	011b      	lsls	r3, r3, #4
 800f7f2:	4413      	add	r3, r2
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	440b      	add	r3, r1
 800f7f8:	330f      	adds	r3, #15
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f82c <dns_call_found+0x17c>)
 800f800:	2200      	movs	r2, #0
 800f802:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f806:	79fa      	ldrb	r2, [r7, #7]
 800f808:	4907      	ldr	r1, [pc, #28]	@ (800f828 <dns_call_found+0x178>)
 800f80a:	4613      	mov	r3, r2
 800f80c:	011b      	lsls	r3, r3, #4
 800f80e:	4413      	add	r3, r2
 800f810:	011b      	lsls	r3, r3, #4
 800f812:	440b      	add	r3, r1
 800f814:	330f      	adds	r3, #15
 800f816:	2204      	movs	r2, #4
 800f818:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f81a:	bf00      	nop
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd90      	pop	{r4, r7, pc}
 800f822:	bf00      	nop
 800f824:	2000ed74 	.word	0x2000ed74
 800f828:	2000e934 	.word	0x2000e934
 800f82c:	2000e924 	.word	0x2000e924

0800f830 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f836:	f00d fccb 	bl	801d1d0 <rand>
 800f83a:	4603      	mov	r3, r0
 800f83c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f83e:	2300      	movs	r3, #0
 800f840:	71fb      	strb	r3, [r7, #7]
 800f842:	e01a      	b.n	800f87a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f844:	79fa      	ldrb	r2, [r7, #7]
 800f846:	4911      	ldr	r1, [pc, #68]	@ (800f88c <dns_create_txid+0x5c>)
 800f848:	4613      	mov	r3, r2
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	4413      	add	r3, r2
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	440b      	add	r3, r1
 800f852:	330a      	adds	r3, #10
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	2b02      	cmp	r3, #2
 800f858:	d10c      	bne.n	800f874 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f85a:	79fa      	ldrb	r2, [r7, #7]
 800f85c:	490b      	ldr	r1, [pc, #44]	@ (800f88c <dns_create_txid+0x5c>)
 800f85e:	4613      	mov	r3, r2
 800f860:	011b      	lsls	r3, r3, #4
 800f862:	4413      	add	r3, r2
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	440b      	add	r3, r1
 800f868:	3308      	adds	r3, #8
 800f86a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f86c:	88ba      	ldrh	r2, [r7, #4]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d100      	bne.n	800f874 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f872:	e7e0      	b.n	800f836 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	3301      	adds	r3, #1
 800f878:	71fb      	strb	r3, [r7, #7]
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d9e1      	bls.n	800f844 <dns_create_txid+0x14>
    }
  }

  return txid;
 800f880:	88bb      	ldrh	r3, [r7, #4]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	2000e934 	.word	0x2000e934

0800f890 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800f898:	2300      	movs	r3, #0
 800f89a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00d      	beq.n	800f8be <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7adb      	ldrb	r3, [r3, #11]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d109      	bne.n	800f8be <dns_backupserver_available+0x2e>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	7adb      	ldrb	r3, [r3, #11]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	4a06      	ldr	r2, [pc, #24]	@ (800f8cc <dns_backupserver_available+0x3c>)
 800f8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <dns_backupserver_available+0x2e>
      ret = 1;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3714      	adds	r7, #20
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr
 800f8cc:	2000eda4 	.word	0x2000eda4

0800f8d0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f8da:	79fa      	ldrb	r2, [r7, #7]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	011b      	lsls	r3, r3, #4
 800f8e0:	4413      	add	r3, r2
 800f8e2:	011b      	lsls	r3, r3, #4
 800f8e4:	4a48      	ldr	r2, [pc, #288]	@ (800fa08 <dns_check_entry+0x138>)
 800f8e6:	4413      	add	r3, r2
 800f8e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f8ea:	79fb      	ldrb	r3, [r7, #7]
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	d906      	bls.n	800f8fe <dns_check_entry+0x2e>
 800f8f0:	4b46      	ldr	r3, [pc, #280]	@ (800fa0c <dns_check_entry+0x13c>)
 800f8f2:	f240 421c 	movw	r2, #1052	@ 0x41c
 800f8f6:	4946      	ldr	r1, [pc, #280]	@ (800fa10 <dns_check_entry+0x140>)
 800f8f8:	4846      	ldr	r0, [pc, #280]	@ (800fa14 <dns_check_entry+0x144>)
 800f8fa:	f00e fd5d 	bl	801e3b8 <iprintf>

  switch (entry->state) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	7a9b      	ldrb	r3, [r3, #10]
 800f902:	2b03      	cmp	r3, #3
 800f904:	d86f      	bhi.n	800f9e6 <dns_check_entry+0x116>
 800f906:	a201      	add	r2, pc, #4	@ (adr r2, 800f90c <dns_check_entry+0x3c>)
 800f908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90c:	0800f9f7 	.word	0x0800f9f7
 800f910:	0800f91d 	.word	0x0800f91d
 800f914:	0800f94f 	.word	0x0800f94f
 800f918:	0800f9c5 	.word	0x0800f9c5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f91c:	f7ff ff88 	bl	800f830 <dns_create_txid>
 800f920:	4603      	mov	r3, r0
 800f922:	461a      	mov	r2, r3
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2202      	movs	r2, #2
 800f92c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2201      	movs	r2, #1
 800f938:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f940:	79fb      	ldrb	r3, [r7, #7]
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff fdc4 	bl	800f4d0 <dns_send>
 800f948:	4603      	mov	r3, r0
 800f94a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f94c:	e058      	b.n	800fa00 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	7b1b      	ldrb	r3, [r3, #12]
 800f952:	3b01      	subs	r3, #1
 800f954:	b2da      	uxtb	r2, r3
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	731a      	strb	r2, [r3, #12]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	7b1b      	ldrb	r3, [r3, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d14b      	bne.n	800f9fa <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	7b5b      	ldrb	r3, [r3, #13]
 800f966:	3301      	adds	r3, #1
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	735a      	strb	r2, [r3, #13]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	7b5b      	ldrb	r3, [r3, #13]
 800f972:	2b04      	cmp	r3, #4
 800f974:	d11b      	bne.n	800f9ae <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff ff8a 	bl	800f890 <dns_backupserver_available>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00c      	beq.n	800f99c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	7adb      	ldrb	r3, [r3, #11]
 800f986:	3301      	adds	r3, #1
 800f988:	b2da      	uxtb	r2, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2201      	movs	r2, #1
 800f992:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	735a      	strb	r2, [r3, #13]
 800f99a:	e00c      	b.n	800f9b6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7ff fe85 	bl	800f6b0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	729a      	strb	r2, [r3, #10]
            break;
 800f9ac:	e028      	b.n	800fa00 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	7b5a      	ldrb	r2, [r3, #13]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fd89 	bl	800f4d0 <dns_send>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f9c2:	e01a      	b.n	800f9fa <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d008      	beq.n	800f9de <dns_check_entry+0x10e>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	1e5a      	subs	r2, r3, #1
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10f      	bne.n	800f9fe <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f9e4:	e00b      	b.n	800f9fe <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f9e6:	4b09      	ldr	r3, [pc, #36]	@ (800fa0c <dns_check_entry+0x13c>)
 800f9e8:	f240 425b 	movw	r2, #1115	@ 0x45b
 800f9ec:	490a      	ldr	r1, [pc, #40]	@ (800fa18 <dns_check_entry+0x148>)
 800f9ee:	4809      	ldr	r0, [pc, #36]	@ (800fa14 <dns_check_entry+0x144>)
 800f9f0:	f00e fce2 	bl	801e3b8 <iprintf>
      break;
 800f9f4:	e004      	b.n	800fa00 <dns_check_entry+0x130>
      break;
 800f9f6:	bf00      	nop
 800f9f8:	e002      	b.n	800fa00 <dns_check_entry+0x130>
      break;
 800f9fa:	bf00      	nop
 800f9fc:	e000      	b.n	800fa00 <dns_check_entry+0x130>
      break;
 800f9fe:	bf00      	nop
  }
}
 800fa00:	bf00      	nop
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	2000e934 	.word	0x2000e934
 800fa0c:	08022d14 	.word	0x08022d14
 800fa10:	08022d84 	.word	0x08022d84
 800fa14:	08022d5c 	.word	0x08022d5c
 800fa18:	08022da0 	.word	0x08022da0

0800fa1c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fa22:	2300      	movs	r3, #0
 800fa24:	71fb      	strb	r3, [r7, #7]
 800fa26:	e006      	b.n	800fa36 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff ff50 	bl	800f8d0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fa30:	79fb      	ldrb	r3, [r7, #7]
 800fa32:	3301      	adds	r3, #1
 800fa34:	71fb      	strb	r3, [r7, #7]
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d9f5      	bls.n	800fa28 <dns_check_entries+0xc>
  }
}
 800fa3c:	bf00      	nop
 800fa3e:	bf00      	nop
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b082      	sub	sp, #8
 800fa4a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fa50:	f00d fb28 	bl	801d0a4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fa54:	f000 f8d6 	bl	800fc04 <mem_init>
  memp_init();
 800fa58:	f000 fc32 	bl	80102c0 <memp_init>
  pbuf_init();
  netif_init();
 800fa5c:	f000 fd3e 	bl	80104dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa60:	f008 f978 	bl	8017d54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa64:	f001 ffc4 	bl	80119f0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800fa68:	f7ff fd00 	bl	800f46c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa6c:	f008 f8b8 	bl	8017be0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	4603      	mov	r3, r0
 800fa80:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa82:	4b05      	ldr	r3, [pc, #20]	@ (800fa98 <ptr_to_mem+0x20>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	88fb      	ldrh	r3, [r7, #6]
 800fa88:	4413      	add	r3, r2
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	370c      	adds	r7, #12
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	2000f418 	.word	0x2000f418

0800fa9c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800faa4:	4b05      	ldr	r3, [pc, #20]	@ (800fabc <mem_to_ptr+0x20>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29b      	uxth	r3, r3
}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	2000f418 	.word	0x2000f418

0800fac0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fac0:	b590      	push	{r4, r7, lr}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fac8:	4b45      	ldr	r3, [pc, #276]	@ (800fbe0 <plug_holes+0x120>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	429a      	cmp	r2, r3
 800fad0:	d206      	bcs.n	800fae0 <plug_holes+0x20>
 800fad2:	4b44      	ldr	r3, [pc, #272]	@ (800fbe4 <plug_holes+0x124>)
 800fad4:	f240 12df 	movw	r2, #479	@ 0x1df
 800fad8:	4943      	ldr	r1, [pc, #268]	@ (800fbe8 <plug_holes+0x128>)
 800fada:	4844      	ldr	r0, [pc, #272]	@ (800fbec <plug_holes+0x12c>)
 800fadc:	f00e fc6c 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fae0:	4b43      	ldr	r3, [pc, #268]	@ (800fbf0 <plug_holes+0x130>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d306      	bcc.n	800faf8 <plug_holes+0x38>
 800faea:	4b3e      	ldr	r3, [pc, #248]	@ (800fbe4 <plug_holes+0x124>)
 800faec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800faf0:	4940      	ldr	r1, [pc, #256]	@ (800fbf4 <plug_holes+0x134>)
 800faf2:	483e      	ldr	r0, [pc, #248]	@ (800fbec <plug_holes+0x12c>)
 800faf4:	f00e fc60 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	791b      	ldrb	r3, [r3, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d006      	beq.n	800fb0e <plug_holes+0x4e>
 800fb00:	4b38      	ldr	r3, [pc, #224]	@ (800fbe4 <plug_holes+0x124>)
 800fb02:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800fb06:	493c      	ldr	r1, [pc, #240]	@ (800fbf8 <plug_holes+0x138>)
 800fb08:	4838      	ldr	r0, [pc, #224]	@ (800fbec <plug_holes+0x12c>)
 800fb0a:	f00e fc55 	bl	801e3b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb16:	d906      	bls.n	800fb26 <plug_holes+0x66>
 800fb18:	4b32      	ldr	r3, [pc, #200]	@ (800fbe4 <plug_holes+0x124>)
 800fb1a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800fb1e:	4937      	ldr	r1, [pc, #220]	@ (800fbfc <plug_holes+0x13c>)
 800fb20:	4832      	ldr	r0, [pc, #200]	@ (800fbec <plug_holes+0x12c>)
 800fb22:	f00e fc49 	bl	801e3b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7ff ffa4 	bl	800fa78 <ptr_to_mem>
 800fb30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d024      	beq.n	800fb84 <plug_holes+0xc4>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	791b      	ldrb	r3, [r3, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d120      	bne.n	800fb84 <plug_holes+0xc4>
 800fb42:	4b2b      	ldr	r3, [pc, #172]	@ (800fbf0 <plug_holes+0x130>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d01b      	beq.n	800fb84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb4c:	4b2c      	ldr	r3, [pc, #176]	@ (800fc00 <plug_holes+0x140>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d102      	bne.n	800fb5c <plug_holes+0x9c>
      lfree = mem;
 800fb56:	4a2a      	ldr	r2, [pc, #168]	@ (800fc00 <plug_holes+0x140>)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	881a      	ldrh	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb6c:	d00a      	beq.n	800fb84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff ff80 	bl	800fa78 <ptr_to_mem>
 800fb78:	4604      	mov	r4, r0
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff ff8e 	bl	800fa9c <mem_to_ptr>
 800fb80:	4603      	mov	r3, r0
 800fb82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	885b      	ldrh	r3, [r3, #2]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff ff75 	bl	800fa78 <ptr_to_mem>
 800fb8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d01f      	beq.n	800fbd8 <plug_holes+0x118>
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	791b      	ldrb	r3, [r3, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d11b      	bne.n	800fbd8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fba0:	4b17      	ldr	r3, [pc, #92]	@ (800fc00 <plug_holes+0x140>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d102      	bne.n	800fbb0 <plug_holes+0xf0>
      lfree = pmem;
 800fbaa:	4a15      	ldr	r2, [pc, #84]	@ (800fc00 <plug_holes+0x140>)
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	881a      	ldrh	r2, [r3, #0]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fbc0:	d00a      	beq.n	800fbd8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff ff56 	bl	800fa78 <ptr_to_mem>
 800fbcc:	4604      	mov	r4, r0
 800fbce:	68b8      	ldr	r0, [r7, #8]
 800fbd0:	f7ff ff64 	bl	800fa9c <mem_to_ptr>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbd8:	bf00      	nop
 800fbda:	3714      	adds	r7, #20
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd90      	pop	{r4, r7, pc}
 800fbe0:	2000f418 	.word	0x2000f418
 800fbe4:	08022dc0 	.word	0x08022dc0
 800fbe8:	08022df0 	.word	0x08022df0
 800fbec:	08022e08 	.word	0x08022e08
 800fbf0:	2000f41c 	.word	0x2000f41c
 800fbf4:	08022e30 	.word	0x08022e30
 800fbf8:	08022e4c 	.word	0x08022e4c
 800fbfc:	08022e68 	.word	0x08022e68
 800fc00:	2000f424 	.word	0x2000f424

0800fc04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc0a:	4b1f      	ldr	r3, [pc, #124]	@ (800fc88 <mem_init+0x84>)
 800fc0c:	3303      	adds	r3, #3
 800fc0e:	f023 0303 	bic.w	r3, r3, #3
 800fc12:	461a      	mov	r2, r3
 800fc14:	4b1d      	ldr	r3, [pc, #116]	@ (800fc8c <mem_init+0x88>)
 800fc16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc18:	4b1c      	ldr	r3, [pc, #112]	@ (800fc8c <mem_init+0x88>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc24:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc32:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800fc36:	f7ff ff1f 	bl	800fa78 <ptr_to_mem>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4a14      	ldr	r2, [pc, #80]	@ (800fc90 <mem_init+0x8c>)
 800fc3e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fc40:	4b13      	ldr	r3, [pc, #76]	@ (800fc90 <mem_init+0x8c>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2201      	movs	r2, #1
 800fc46:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc48:	4b11      	ldr	r3, [pc, #68]	@ (800fc90 <mem_init+0x8c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc50:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc52:	4b0f      	ldr	r3, [pc, #60]	@ (800fc90 <mem_init+0x8c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc5a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fc8c <mem_init+0x88>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a0c      	ldr	r2, [pc, #48]	@ (800fc94 <mem_init+0x90>)
 800fc62:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc64:	480c      	ldr	r0, [pc, #48]	@ (800fc98 <mem_init+0x94>)
 800fc66:	f00d fa29 	bl	801d0bc <sys_mutex_new>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d006      	beq.n	800fc7e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fc70:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <mem_init+0x98>)
 800fc72:	f240 221f 	movw	r2, #543	@ 0x21f
 800fc76:	490a      	ldr	r1, [pc, #40]	@ (800fca0 <mem_init+0x9c>)
 800fc78:	480a      	ldr	r0, [pc, #40]	@ (800fca4 <mem_init+0xa0>)
 800fc7a:	f00e fb9d 	bl	801e3b8 <iprintf>
  }
}
 800fc7e:	bf00      	nop
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	2000edc4 	.word	0x2000edc4
 800fc8c:	2000f418 	.word	0x2000f418
 800fc90:	2000f41c 	.word	0x2000f41c
 800fc94:	2000f424 	.word	0x2000f424
 800fc98:	2000f420 	.word	0x2000f420
 800fc9c:	08022dc0 	.word	0x08022dc0
 800fca0:	08022e94 	.word	0x08022e94
 800fca4:	08022e08 	.word	0x08022e08

0800fca8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff fef3 	bl	800fa9c <mem_to_ptr>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff feda 	bl	800fa78 <ptr_to_mem>
 800fcc4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	885b      	ldrh	r3, [r3, #2]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff fed4 	bl	800fa78 <ptr_to_mem>
 800fcd0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fcda:	d818      	bhi.n	800fd0e <mem_link_valid+0x66>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	885b      	ldrh	r3, [r3, #2]
 800fce0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fce4:	d813      	bhi.n	800fd0e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcea:	8afa      	ldrh	r2, [r7, #22]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d004      	beq.n	800fcfa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	8afa      	ldrh	r2, [r7, #22]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d109      	bne.n	800fd0e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcfa:	4b08      	ldr	r3, [pc, #32]	@ (800fd1c <mem_link_valid+0x74>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d006      	beq.n	800fd12 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	885b      	ldrh	r3, [r3, #2]
 800fd08:	8afa      	ldrh	r2, [r7, #22]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d001      	beq.n	800fd12 <mem_link_valid+0x6a>
    return 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	e000      	b.n	800fd14 <mem_link_valid+0x6c>
  }
  return 1;
 800fd12:	2301      	movs	r3, #1
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	2000f41c 	.word	0x2000f41c

0800fd20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b088      	sub	sp, #32
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d070      	beq.n	800fe10 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f003 0303 	and.w	r3, r3, #3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00d      	beq.n	800fd54 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd38:	4b37      	ldr	r3, [pc, #220]	@ (800fe18 <mem_free+0xf8>)
 800fd3a:	f240 2273 	movw	r2, #627	@ 0x273
 800fd3e:	4937      	ldr	r1, [pc, #220]	@ (800fe1c <mem_free+0xfc>)
 800fd40:	4837      	ldr	r0, [pc, #220]	@ (800fe20 <mem_free+0x100>)
 800fd42:	f00e fb39 	bl	801e3b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd46:	f00d fa0b 	bl	801d160 <sys_arch_protect>
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f00d fa15 	bl	801d17c <sys_arch_unprotect>
    return;
 800fd52:	e05e      	b.n	800fe12 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	3b08      	subs	r3, #8
 800fd58:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd5a:	4b32      	ldr	r3, [pc, #200]	@ (800fe24 <mem_free+0x104>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	69fa      	ldr	r2, [r7, #28]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d306      	bcc.n	800fd72 <mem_free+0x52>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f103 020c 	add.w	r2, r3, #12
 800fd6a:	4b2f      	ldr	r3, [pc, #188]	@ (800fe28 <mem_free+0x108>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d90d      	bls.n	800fd8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd72:	4b29      	ldr	r3, [pc, #164]	@ (800fe18 <mem_free+0xf8>)
 800fd74:	f240 227f 	movw	r2, #639	@ 0x27f
 800fd78:	492c      	ldr	r1, [pc, #176]	@ (800fe2c <mem_free+0x10c>)
 800fd7a:	4829      	ldr	r0, [pc, #164]	@ (800fe20 <mem_free+0x100>)
 800fd7c:	f00e fb1c 	bl	801e3b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd80:	f00d f9ee 	bl	801d160 <sys_arch_protect>
 800fd84:	6138      	str	r0, [r7, #16]
 800fd86:	6938      	ldr	r0, [r7, #16]
 800fd88:	f00d f9f8 	bl	801d17c <sys_arch_unprotect>
    return;
 800fd8c:	e041      	b.n	800fe12 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd8e:	4828      	ldr	r0, [pc, #160]	@ (800fe30 <mem_free+0x110>)
 800fd90:	f00d f9aa 	bl	801d0e8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	791b      	ldrb	r3, [r3, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d110      	bne.n	800fdbe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe18 <mem_free+0xf8>)
 800fd9e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800fda2:	4924      	ldr	r1, [pc, #144]	@ (800fe34 <mem_free+0x114>)
 800fda4:	481e      	ldr	r0, [pc, #120]	@ (800fe20 <mem_free+0x100>)
 800fda6:	f00e fb07 	bl	801e3b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fdaa:	4821      	ldr	r0, [pc, #132]	@ (800fe30 <mem_free+0x110>)
 800fdac:	f00d f9ab 	bl	801d106 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdb0:	f00d f9d6 	bl	801d160 <sys_arch_protect>
 800fdb4:	6178      	str	r0, [r7, #20]
 800fdb6:	6978      	ldr	r0, [r7, #20]
 800fdb8:	f00d f9e0 	bl	801d17c <sys_arch_unprotect>
    return;
 800fdbc:	e029      	b.n	800fe12 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fdbe:	69f8      	ldr	r0, [r7, #28]
 800fdc0:	f7ff ff72 	bl	800fca8 <mem_link_valid>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d110      	bne.n	800fdec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fdca:	4b13      	ldr	r3, [pc, #76]	@ (800fe18 <mem_free+0xf8>)
 800fdcc:	f240 2295 	movw	r2, #661	@ 0x295
 800fdd0:	4919      	ldr	r1, [pc, #100]	@ (800fe38 <mem_free+0x118>)
 800fdd2:	4813      	ldr	r0, [pc, #76]	@ (800fe20 <mem_free+0x100>)
 800fdd4:	f00e faf0 	bl	801e3b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fdd8:	4815      	ldr	r0, [pc, #84]	@ (800fe30 <mem_free+0x110>)
 800fdda:	f00d f994 	bl	801d106 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdde:	f00d f9bf 	bl	801d160 <sys_arch_protect>
 800fde2:	61b8      	str	r0, [r7, #24]
 800fde4:	69b8      	ldr	r0, [r7, #24]
 800fde6:	f00d f9c9 	bl	801d17c <sys_arch_unprotect>
    return;
 800fdea:	e012      	b.n	800fe12 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fdf2:	4b12      	ldr	r3, [pc, #72]	@ (800fe3c <mem_free+0x11c>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	69fa      	ldr	r2, [r7, #28]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d202      	bcs.n	800fe02 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fdfc:	4a0f      	ldr	r2, [pc, #60]	@ (800fe3c <mem_free+0x11c>)
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fe02:	69f8      	ldr	r0, [r7, #28]
 800fe04:	f7ff fe5c 	bl	800fac0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fe08:	4809      	ldr	r0, [pc, #36]	@ (800fe30 <mem_free+0x110>)
 800fe0a:	f00d f97c 	bl	801d106 <sys_mutex_unlock>
 800fe0e:	e000      	b.n	800fe12 <mem_free+0xf2>
    return;
 800fe10:	bf00      	nop
}
 800fe12:	3720      	adds	r7, #32
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	08022dc0 	.word	0x08022dc0
 800fe1c:	08022eb0 	.word	0x08022eb0
 800fe20:	08022e08 	.word	0x08022e08
 800fe24:	2000f418 	.word	0x2000f418
 800fe28:	2000f41c 	.word	0x2000f41c
 800fe2c:	08022ed4 	.word	0x08022ed4
 800fe30:	2000f420 	.word	0x2000f420
 800fe34:	08022ef0 	.word	0x08022ef0
 800fe38:	08022f18 	.word	0x08022f18
 800fe3c:	2000f424 	.word	0x2000f424

0800fe40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b088      	sub	sp, #32
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fe4c:	887b      	ldrh	r3, [r7, #2]
 800fe4e:	3303      	adds	r3, #3
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	f023 0303 	bic.w	r3, r3, #3
 800fe56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe58:	8bfb      	ldrh	r3, [r7, #30]
 800fe5a:	2b0b      	cmp	r3, #11
 800fe5c:	d801      	bhi.n	800fe62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe5e:	230c      	movs	r3, #12
 800fe60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe62:	8bfb      	ldrh	r3, [r7, #30]
 800fe64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fe68:	d803      	bhi.n	800fe72 <mem_trim+0x32>
 800fe6a:	8bfa      	ldrh	r2, [r7, #30]
 800fe6c:	887b      	ldrh	r3, [r7, #2]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d201      	bcs.n	800fe76 <mem_trim+0x36>
    return NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e0d8      	b.n	8010028 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe76:	4b6e      	ldr	r3, [pc, #440]	@ (8010030 <mem_trim+0x1f0>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d304      	bcc.n	800fe8a <mem_trim+0x4a>
 800fe80:	4b6c      	ldr	r3, [pc, #432]	@ (8010034 <mem_trim+0x1f4>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d306      	bcc.n	800fe98 <mem_trim+0x58>
 800fe8a:	4b6b      	ldr	r3, [pc, #428]	@ (8010038 <mem_trim+0x1f8>)
 800fe8c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fe90:	496a      	ldr	r1, [pc, #424]	@ (801003c <mem_trim+0x1fc>)
 800fe92:	486b      	ldr	r0, [pc, #428]	@ (8010040 <mem_trim+0x200>)
 800fe94:	f00e fa90 	bl	801e3b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe98:	4b65      	ldr	r3, [pc, #404]	@ (8010030 <mem_trim+0x1f0>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d304      	bcc.n	800feac <mem_trim+0x6c>
 800fea2:	4b64      	ldr	r3, [pc, #400]	@ (8010034 <mem_trim+0x1f4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d307      	bcc.n	800febc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800feac:	f00d f958 	bl	801d160 <sys_arch_protect>
 800feb0:	60b8      	str	r0, [r7, #8]
 800feb2:	68b8      	ldr	r0, [r7, #8]
 800feb4:	f00d f962 	bl	801d17c <sys_arch_unprotect>
    return rmem;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	e0b5      	b.n	8010028 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	3b08      	subs	r3, #8
 800fec0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fec2:	69b8      	ldr	r0, [r7, #24]
 800fec4:	f7ff fdea 	bl	800fa9c <mem_to_ptr>
 800fec8:	4603      	mov	r3, r0
 800feca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	881a      	ldrh	r2, [r3, #0]
 800fed0:	8afb      	ldrh	r3, [r7, #22]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	3b08      	subs	r3, #8
 800fed8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800feda:	8bfa      	ldrh	r2, [r7, #30]
 800fedc:	8abb      	ldrh	r3, [r7, #20]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d906      	bls.n	800fef0 <mem_trim+0xb0>
 800fee2:	4b55      	ldr	r3, [pc, #340]	@ (8010038 <mem_trim+0x1f8>)
 800fee4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800fee8:	4956      	ldr	r1, [pc, #344]	@ (8010044 <mem_trim+0x204>)
 800feea:	4855      	ldr	r0, [pc, #340]	@ (8010040 <mem_trim+0x200>)
 800feec:	f00e fa64 	bl	801e3b8 <iprintf>
  if (newsize > size) {
 800fef0:	8bfa      	ldrh	r2, [r7, #30]
 800fef2:	8abb      	ldrh	r3, [r7, #20]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d901      	bls.n	800fefc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fef8:	2300      	movs	r3, #0
 800fefa:	e095      	b.n	8010028 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800fefc:	8bfa      	ldrh	r2, [r7, #30]
 800fefe:	8abb      	ldrh	r3, [r7, #20]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d101      	bne.n	800ff08 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	e08f      	b.n	8010028 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ff08:	484f      	ldr	r0, [pc, #316]	@ (8010048 <mem_trim+0x208>)
 800ff0a:	f00d f8ed 	bl	801d0e8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7ff fdb0 	bl	800fa78 <ptr_to_mem>
 800ff18:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	791b      	ldrb	r3, [r3, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d13f      	bne.n	800ffa2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	881b      	ldrh	r3, [r3, #0]
 800ff26:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff2a:	d106      	bne.n	800ff3a <mem_trim+0xfa>
 800ff2c:	4b42      	ldr	r3, [pc, #264]	@ (8010038 <mem_trim+0x1f8>)
 800ff2e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ff32:	4946      	ldr	r1, [pc, #280]	@ (801004c <mem_trim+0x20c>)
 800ff34:	4842      	ldr	r0, [pc, #264]	@ (8010040 <mem_trim+0x200>)
 800ff36:	f00e fa3f 	bl	801e3b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff40:	8afa      	ldrh	r2, [r7, #22]
 800ff42:	8bfb      	ldrh	r3, [r7, #30]
 800ff44:	4413      	add	r3, r2
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	3308      	adds	r3, #8
 800ff4a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ff4c:	4b40      	ldr	r3, [pc, #256]	@ (8010050 <mem_trim+0x210>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	693a      	ldr	r2, [r7, #16]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d106      	bne.n	800ff64 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ff56:	89fb      	ldrh	r3, [r7, #14]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff fd8d 	bl	800fa78 <ptr_to_mem>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4a3b      	ldr	r2, [pc, #236]	@ (8010050 <mem_trim+0x210>)
 800ff62:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff64:	89fb      	ldrh	r3, [r7, #14]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff fd86 	bl	800fa78 <ptr_to_mem>
 800ff6c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	2200      	movs	r2, #0
 800ff72:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	89ba      	ldrh	r2, [r7, #12]
 800ff78:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	8afa      	ldrh	r2, [r7, #22]
 800ff7e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	89fa      	ldrh	r2, [r7, #14]
 800ff84:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	881b      	ldrh	r3, [r3, #0]
 800ff8a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff8e:	d047      	beq.n	8010020 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff fd6f 	bl	800fa78 <ptr_to_mem>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	89fb      	ldrh	r3, [r7, #14]
 800ff9e:	8053      	strh	r3, [r2, #2]
 800ffa0:	e03e      	b.n	8010020 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ffa2:	8bfb      	ldrh	r3, [r7, #30]
 800ffa4:	f103 0214 	add.w	r2, r3, #20
 800ffa8:	8abb      	ldrh	r3, [r7, #20]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d838      	bhi.n	8010020 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ffae:	8afa      	ldrh	r2, [r7, #22]
 800ffb0:	8bfb      	ldrh	r3, [r7, #30]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	3308      	adds	r3, #8
 800ffb8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ffc2:	d106      	bne.n	800ffd2 <mem_trim+0x192>
 800ffc4:	4b1c      	ldr	r3, [pc, #112]	@ (8010038 <mem_trim+0x1f8>)
 800ffc6:	f240 3216 	movw	r2, #790	@ 0x316
 800ffca:	4920      	ldr	r1, [pc, #128]	@ (801004c <mem_trim+0x20c>)
 800ffcc:	481c      	ldr	r0, [pc, #112]	@ (8010040 <mem_trim+0x200>)
 800ffce:	f00e f9f3 	bl	801e3b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ffd2:	89fb      	ldrh	r3, [r7, #14]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7ff fd4f 	bl	800fa78 <ptr_to_mem>
 800ffda:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ffdc:	4b1c      	ldr	r3, [pc, #112]	@ (8010050 <mem_trim+0x210>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	693a      	ldr	r2, [r7, #16]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d202      	bcs.n	800ffec <mem_trim+0x1ac>
      lfree = mem2;
 800ffe6:	4a1a      	ldr	r2, [pc, #104]	@ (8010050 <mem_trim+0x210>)
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	2200      	movs	r2, #0
 800fff0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	881a      	ldrh	r2, [r3, #0]
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	8afa      	ldrh	r2, [r7, #22]
 800fffe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	89fa      	ldrh	r2, [r7, #14]
 8010004:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801000e:	d007      	beq.n	8010020 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff fd2f 	bl	800fa78 <ptr_to_mem>
 801001a:	4602      	mov	r2, r0
 801001c:	89fb      	ldrh	r3, [r7, #14]
 801001e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010020:	4809      	ldr	r0, [pc, #36]	@ (8010048 <mem_trim+0x208>)
 8010022:	f00d f870 	bl	801d106 <sys_mutex_unlock>
  return rmem;
 8010026:	687b      	ldr	r3, [r7, #4]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	2000f418 	.word	0x2000f418
 8010034:	2000f41c 	.word	0x2000f41c
 8010038:	08022dc0 	.word	0x08022dc0
 801003c:	08022f4c 	.word	0x08022f4c
 8010040:	08022e08 	.word	0x08022e08
 8010044:	08022f64 	.word	0x08022f64
 8010048:	2000f420 	.word	0x2000f420
 801004c:	08022f84 	.word	0x08022f84
 8010050:	2000f424 	.word	0x2000f424

08010054 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801005e:	88fb      	ldrh	r3, [r7, #6]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d101      	bne.n	8010068 <mem_malloc+0x14>
    return NULL;
 8010064:	2300      	movs	r3, #0
 8010066:	e0e2      	b.n	801022e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010068:	88fb      	ldrh	r3, [r7, #6]
 801006a:	3303      	adds	r3, #3
 801006c:	b29b      	uxth	r3, r3
 801006e:	f023 0303 	bic.w	r3, r3, #3
 8010072:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010074:	8bbb      	ldrh	r3, [r7, #28]
 8010076:	2b0b      	cmp	r3, #11
 8010078:	d801      	bhi.n	801007e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801007a:	230c      	movs	r3, #12
 801007c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801007e:	8bbb      	ldrh	r3, [r7, #28]
 8010080:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010084:	d803      	bhi.n	801008e <mem_malloc+0x3a>
 8010086:	8bba      	ldrh	r2, [r7, #28]
 8010088:	88fb      	ldrh	r3, [r7, #6]
 801008a:	429a      	cmp	r2, r3
 801008c:	d201      	bcs.n	8010092 <mem_malloc+0x3e>
    return NULL;
 801008e:	2300      	movs	r3, #0
 8010090:	e0cd      	b.n	801022e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010092:	4869      	ldr	r0, [pc, #420]	@ (8010238 <mem_malloc+0x1e4>)
 8010094:	f00d f828 	bl	801d0e8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010098:	4b68      	ldr	r3, [pc, #416]	@ (801023c <mem_malloc+0x1e8>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4618      	mov	r0, r3
 801009e:	f7ff fcfd 	bl	800fa9c <mem_to_ptr>
 80100a2:	4603      	mov	r3, r0
 80100a4:	83fb      	strh	r3, [r7, #30]
 80100a6:	e0b7      	b.n	8010218 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80100a8:	8bfb      	ldrh	r3, [r7, #30]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff fce4 	bl	800fa78 <ptr_to_mem>
 80100b0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	791b      	ldrb	r3, [r3, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f040 80a7 	bne.w	801020a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	461a      	mov	r2, r3
 80100c2:	8bfb      	ldrh	r3, [r7, #30]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	f1a3 0208 	sub.w	r2, r3, #8
 80100ca:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80100cc:	429a      	cmp	r2, r3
 80100ce:	f0c0 809c 	bcc.w	801020a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	8bfb      	ldrh	r3, [r7, #30]
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	f1a3 0208 	sub.w	r2, r3, #8
 80100e0:	8bbb      	ldrh	r3, [r7, #28]
 80100e2:	3314      	adds	r3, #20
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d333      	bcc.n	8010150 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80100e8:	8bfa      	ldrh	r2, [r7, #30]
 80100ea:	8bbb      	ldrh	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	3308      	adds	r3, #8
 80100f2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80100f4:	8a7b      	ldrh	r3, [r7, #18]
 80100f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80100fa:	d106      	bne.n	801010a <mem_malloc+0xb6>
 80100fc:	4b50      	ldr	r3, [pc, #320]	@ (8010240 <mem_malloc+0x1ec>)
 80100fe:	f240 3287 	movw	r2, #903	@ 0x387
 8010102:	4950      	ldr	r1, [pc, #320]	@ (8010244 <mem_malloc+0x1f0>)
 8010104:	4850      	ldr	r0, [pc, #320]	@ (8010248 <mem_malloc+0x1f4>)
 8010106:	f00e f957 	bl	801e3b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801010a:	8a7b      	ldrh	r3, [r7, #18]
 801010c:	4618      	mov	r0, r3
 801010e:	f7ff fcb3 	bl	800fa78 <ptr_to_mem>
 8010112:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	881a      	ldrh	r2, [r3, #0]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	8bfa      	ldrh	r2, [r7, #30]
 8010126:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	8a7a      	ldrh	r2, [r7, #18]
 801012c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2201      	movs	r2, #1
 8010132:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	881b      	ldrh	r3, [r3, #0]
 8010138:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801013c:	d00b      	beq.n	8010156 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fc98 	bl	800fa78 <ptr_to_mem>
 8010148:	4602      	mov	r2, r0
 801014a:	8a7b      	ldrh	r3, [r7, #18]
 801014c:	8053      	strh	r3, [r2, #2]
 801014e:	e002      	b.n	8010156 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	2201      	movs	r2, #1
 8010154:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010156:	4b39      	ldr	r3, [pc, #228]	@ (801023c <mem_malloc+0x1e8>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	429a      	cmp	r2, r3
 801015e:	d127      	bne.n	80101b0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010160:	4b36      	ldr	r3, [pc, #216]	@ (801023c <mem_malloc+0x1e8>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010166:	e005      	b.n	8010174 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	4618      	mov	r0, r3
 801016e:	f7ff fc83 	bl	800fa78 <ptr_to_mem>
 8010172:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	791b      	ldrb	r3, [r3, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d004      	beq.n	8010186 <mem_malloc+0x132>
 801017c:	4b33      	ldr	r3, [pc, #204]	@ (801024c <mem_malloc+0x1f8>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	69ba      	ldr	r2, [r7, #24]
 8010182:	429a      	cmp	r2, r3
 8010184:	d1f0      	bne.n	8010168 <mem_malloc+0x114>
          }
          lfree = cur;
 8010186:	4a2d      	ldr	r2, [pc, #180]	@ (801023c <mem_malloc+0x1e8>)
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801018c:	4b2b      	ldr	r3, [pc, #172]	@ (801023c <mem_malloc+0x1e8>)
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	4b2e      	ldr	r3, [pc, #184]	@ (801024c <mem_malloc+0x1f8>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d00b      	beq.n	80101b0 <mem_malloc+0x15c>
 8010198:	4b28      	ldr	r3, [pc, #160]	@ (801023c <mem_malloc+0x1e8>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	791b      	ldrb	r3, [r3, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <mem_malloc+0x15c>
 80101a2:	4b27      	ldr	r3, [pc, #156]	@ (8010240 <mem_malloc+0x1ec>)
 80101a4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80101a8:	4929      	ldr	r1, [pc, #164]	@ (8010250 <mem_malloc+0x1fc>)
 80101aa:	4827      	ldr	r0, [pc, #156]	@ (8010248 <mem_malloc+0x1f4>)
 80101ac:	f00e f904 	bl	801e3b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80101b0:	4821      	ldr	r0, [pc, #132]	@ (8010238 <mem_malloc+0x1e4>)
 80101b2:	f00c ffa8 	bl	801d106 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80101b6:	8bba      	ldrh	r2, [r7, #28]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	4413      	add	r3, r2
 80101bc:	3308      	adds	r3, #8
 80101be:	4a23      	ldr	r2, [pc, #140]	@ (801024c <mem_malloc+0x1f8>)
 80101c0:	6812      	ldr	r2, [r2, #0]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d906      	bls.n	80101d4 <mem_malloc+0x180>
 80101c6:	4b1e      	ldr	r3, [pc, #120]	@ (8010240 <mem_malloc+0x1ec>)
 80101c8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80101cc:	4921      	ldr	r1, [pc, #132]	@ (8010254 <mem_malloc+0x200>)
 80101ce:	481e      	ldr	r0, [pc, #120]	@ (8010248 <mem_malloc+0x1f4>)
 80101d0:	f00e f8f2 	bl	801e3b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	f003 0303 	and.w	r3, r3, #3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d006      	beq.n	80101ec <mem_malloc+0x198>
 80101de:	4b18      	ldr	r3, [pc, #96]	@ (8010240 <mem_malloc+0x1ec>)
 80101e0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80101e4:	491c      	ldr	r1, [pc, #112]	@ (8010258 <mem_malloc+0x204>)
 80101e6:	4818      	ldr	r0, [pc, #96]	@ (8010248 <mem_malloc+0x1f4>)
 80101e8:	f00e f8e6 	bl	801e3b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d006      	beq.n	8010204 <mem_malloc+0x1b0>
 80101f6:	4b12      	ldr	r3, [pc, #72]	@ (8010240 <mem_malloc+0x1ec>)
 80101f8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80101fc:	4917      	ldr	r1, [pc, #92]	@ (801025c <mem_malloc+0x208>)
 80101fe:	4812      	ldr	r0, [pc, #72]	@ (8010248 <mem_malloc+0x1f4>)
 8010200:	f00e f8da 	bl	801e3b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	3308      	adds	r3, #8
 8010208:	e011      	b.n	801022e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801020a:	8bfb      	ldrh	r3, [r7, #30]
 801020c:	4618      	mov	r0, r3
 801020e:	f7ff fc33 	bl	800fa78 <ptr_to_mem>
 8010212:	4603      	mov	r3, r0
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010218:	8bfa      	ldrh	r2, [r7, #30]
 801021a:	8bbb      	ldrh	r3, [r7, #28]
 801021c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8010220:	429a      	cmp	r2, r3
 8010222:	f4ff af41 	bcc.w	80100a8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010226:	4804      	ldr	r0, [pc, #16]	@ (8010238 <mem_malloc+0x1e4>)
 8010228:	f00c ff6d 	bl	801d106 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3720      	adds	r7, #32
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	2000f420 	.word	0x2000f420
 801023c:	2000f424 	.word	0x2000f424
 8010240:	08022dc0 	.word	0x08022dc0
 8010244:	08022f84 	.word	0x08022f84
 8010248:	08022e08 	.word	0x08022e08
 801024c:	2000f41c 	.word	0x2000f41c
 8010250:	08022f98 	.word	0x08022f98
 8010254:	08022fb4 	.word	0x08022fb4
 8010258:	08022fe4 	.word	0x08022fe4
 801025c:	08023014 	.word	0x08023014

08010260 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	2200      	movs	r2, #0
 801026e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	3303      	adds	r3, #3
 8010276:	f023 0303 	bic.w	r3, r3, #3
 801027a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801027c:	2300      	movs	r3, #0
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	e011      	b.n	80102a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	68ba      	ldr	r2, [r7, #8]
 8010292:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	4413      	add	r3, r2
 801029e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3301      	adds	r3, #1
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	885b      	ldrh	r3, [r3, #2]
 80102aa:	461a      	mov	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	dbe7      	blt.n	8010282 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80102b2:	bf00      	nop
 80102b4:	bf00      	nop
 80102b6:	3714      	adds	r7, #20
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102c6:	2300      	movs	r3, #0
 80102c8:	80fb      	strh	r3, [r7, #6]
 80102ca:	e009      	b.n	80102e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80102cc:	88fb      	ldrh	r3, [r7, #6]
 80102ce:	4a08      	ldr	r2, [pc, #32]	@ (80102f0 <memp_init+0x30>)
 80102d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff ffc3 	bl	8010260 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102da:	88fb      	ldrh	r3, [r7, #6]
 80102dc:	3301      	adds	r3, #1
 80102de:	80fb      	strh	r3, [r7, #6]
 80102e0:	88fb      	ldrh	r3, [r7, #6]
 80102e2:	2b0d      	cmp	r3, #13
 80102e4:	d9f2      	bls.n	80102cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80102e6:	bf00      	nop
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	08025d8c 	.word	0x08025d8c

080102f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80102fc:	f00c ff30 	bl	801d160 <sys_arch_protect>
 8010300:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d015      	beq.n	801033c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	6812      	ldr	r2, [r2, #0]
 8010318:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	f003 0303 	and.w	r3, r3, #3
 8010320:	2b00      	cmp	r3, #0
 8010322:	d006      	beq.n	8010332 <do_memp_malloc_pool+0x3e>
 8010324:	4b09      	ldr	r3, [pc, #36]	@ (801034c <do_memp_malloc_pool+0x58>)
 8010326:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801032a:	4909      	ldr	r1, [pc, #36]	@ (8010350 <do_memp_malloc_pool+0x5c>)
 801032c:	4809      	ldr	r0, [pc, #36]	@ (8010354 <do_memp_malloc_pool+0x60>)
 801032e:	f00e f843 	bl	801e3b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f00c ff22 	bl	801d17c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	e003      	b.n	8010344 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f00c ff1d 	bl	801d17c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	08023038 	.word	0x08023038
 8010350:	08023068 	.word	0x08023068
 8010354:	0802308c 	.word	0x0802308c

08010358 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d106      	bne.n	8010374 <memp_malloc_pool+0x1c>
 8010366:	4b0a      	ldr	r3, [pc, #40]	@ (8010390 <memp_malloc_pool+0x38>)
 8010368:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801036c:	4909      	ldr	r1, [pc, #36]	@ (8010394 <memp_malloc_pool+0x3c>)
 801036e:	480a      	ldr	r0, [pc, #40]	@ (8010398 <memp_malloc_pool+0x40>)
 8010370:	f00e f822 	bl	801e3b8 <iprintf>
  if (desc == NULL) {
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d101      	bne.n	801037e <memp_malloc_pool+0x26>
    return NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	e003      	b.n	8010386 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7ff ffb8 	bl	80102f4 <do_memp_malloc_pool>
 8010384:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010386:	4618      	mov	r0, r3
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	08023038 	.word	0x08023038
 8010394:	080230b4 	.word	0x080230b4
 8010398:	0802308c 	.word	0x0802308c

0801039c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	2b0d      	cmp	r3, #13
 80103aa:	d908      	bls.n	80103be <memp_malloc+0x22>
 80103ac:	4b0a      	ldr	r3, [pc, #40]	@ (80103d8 <memp_malloc+0x3c>)
 80103ae:	f240 1257 	movw	r2, #343	@ 0x157
 80103b2:	490a      	ldr	r1, [pc, #40]	@ (80103dc <memp_malloc+0x40>)
 80103b4:	480a      	ldr	r0, [pc, #40]	@ (80103e0 <memp_malloc+0x44>)
 80103b6:	f00d ffff 	bl	801e3b8 <iprintf>
 80103ba:	2300      	movs	r3, #0
 80103bc:	e008      	b.n	80103d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80103be:	79fb      	ldrb	r3, [r7, #7]
 80103c0:	4a08      	ldr	r2, [pc, #32]	@ (80103e4 <memp_malloc+0x48>)
 80103c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff ff94 	bl	80102f4 <do_memp_malloc_pool>
 80103cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80103ce:	68fb      	ldr	r3, [r7, #12]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	08023038 	.word	0x08023038
 80103dc:	080230c8 	.word	0x080230c8
 80103e0:	0802308c 	.word	0x0802308c
 80103e4:	08025d8c 	.word	0x08025d8c

080103e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	f003 0303 	and.w	r3, r3, #3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d006      	beq.n	801040a <do_memp_free_pool+0x22>
 80103fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010434 <do_memp_free_pool+0x4c>)
 80103fe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010402:	490d      	ldr	r1, [pc, #52]	@ (8010438 <do_memp_free_pool+0x50>)
 8010404:	480d      	ldr	r0, [pc, #52]	@ (801043c <do_memp_free_pool+0x54>)
 8010406:	f00d ffd7 	bl	801e3b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801040e:	f00c fea7 	bl	801d160 <sys_arch_protect>
 8010412:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010426:	68b8      	ldr	r0, [r7, #8]
 8010428:	f00c fea8 	bl	801d17c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	08023038 	.word	0x08023038
 8010438:	080230e8 	.word	0x080230e8
 801043c:	0802308c 	.word	0x0802308c

08010440 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d106      	bne.n	801045e <memp_free_pool+0x1e>
 8010450:	4b0a      	ldr	r3, [pc, #40]	@ (801047c <memp_free_pool+0x3c>)
 8010452:	f240 1295 	movw	r2, #405	@ 0x195
 8010456:	490a      	ldr	r1, [pc, #40]	@ (8010480 <memp_free_pool+0x40>)
 8010458:	480a      	ldr	r0, [pc, #40]	@ (8010484 <memp_free_pool+0x44>)
 801045a:	f00d ffad 	bl	801e3b8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d007      	beq.n	8010474 <memp_free_pool+0x34>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d004      	beq.n	8010474 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801046a:	6839      	ldr	r1, [r7, #0]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff ffbb 	bl	80103e8 <do_memp_free_pool>
 8010472:	e000      	b.n	8010476 <memp_free_pool+0x36>
    return;
 8010474:	bf00      	nop
}
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	08023038 	.word	0x08023038
 8010480:	080230b4 	.word	0x080230b4
 8010484:	0802308c 	.word	0x0802308c

08010488 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	6039      	str	r1, [r7, #0]
 8010492:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010494:	79fb      	ldrb	r3, [r7, #7]
 8010496:	2b0d      	cmp	r3, #13
 8010498:	d907      	bls.n	80104aa <memp_free+0x22>
 801049a:	4b0c      	ldr	r3, [pc, #48]	@ (80104cc <memp_free+0x44>)
 801049c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80104a0:	490b      	ldr	r1, [pc, #44]	@ (80104d0 <memp_free+0x48>)
 80104a2:	480c      	ldr	r0, [pc, #48]	@ (80104d4 <memp_free+0x4c>)
 80104a4:	f00d ff88 	bl	801e3b8 <iprintf>
 80104a8:	e00c      	b.n	80104c4 <memp_free+0x3c>

  if (mem == NULL) {
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d008      	beq.n	80104c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80104b0:	79fb      	ldrb	r3, [r7, #7]
 80104b2:	4a09      	ldr	r2, [pc, #36]	@ (80104d8 <memp_free+0x50>)
 80104b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff ff94 	bl	80103e8 <do_memp_free_pool>
 80104c0:	e000      	b.n	80104c4 <memp_free+0x3c>
    return;
 80104c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	08023038 	.word	0x08023038
 80104d0:	08023108 	.word	0x08023108
 80104d4:	0802308c 	.word	0x0802308c
 80104d8:	08025d8c 	.word	0x08025d8c

080104dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80104e0:	bf00      	nop
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
	...

080104ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b086      	sub	sp, #24
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d108      	bne.n	8010512 <netif_add+0x26>
 8010500:	4b5b      	ldr	r3, [pc, #364]	@ (8010670 <netif_add+0x184>)
 8010502:	f240 1227 	movw	r2, #295	@ 0x127
 8010506:	495b      	ldr	r1, [pc, #364]	@ (8010674 <netif_add+0x188>)
 8010508:	485b      	ldr	r0, [pc, #364]	@ (8010678 <netif_add+0x18c>)
 801050a:	f00d ff55 	bl	801e3b8 <iprintf>
 801050e:	2300      	movs	r3, #0
 8010510:	e0a9      	b.n	8010666 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010514:	2b00      	cmp	r3, #0
 8010516:	d108      	bne.n	801052a <netif_add+0x3e>
 8010518:	4b55      	ldr	r3, [pc, #340]	@ (8010670 <netif_add+0x184>)
 801051a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801051e:	4957      	ldr	r1, [pc, #348]	@ (801067c <netif_add+0x190>)
 8010520:	4855      	ldr	r0, [pc, #340]	@ (8010678 <netif_add+0x18c>)
 8010522:	f00d ff49 	bl	801e3b8 <iprintf>
 8010526:	2300      	movs	r3, #0
 8010528:	e09d      	b.n	8010666 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d101      	bne.n	8010534 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010530:	4b53      	ldr	r3, [pc, #332]	@ (8010680 <netif_add+0x194>)
 8010532:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d101      	bne.n	801053e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801053a:	4b51      	ldr	r3, [pc, #324]	@ (8010680 <netif_add+0x194>)
 801053c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010544:	4b4e      	ldr	r3, [pc, #312]	@ (8010680 <netif_add+0x194>)
 8010546:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2200      	movs	r2, #0
 8010552:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2200      	movs	r2, #0
 8010558:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	4a49      	ldr	r2, [pc, #292]	@ (8010684 <netif_add+0x198>)
 801055e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	3324      	adds	r3, #36	@ 0x24
 8010572:	2204      	movs	r2, #4
 8010574:	2100      	movs	r1, #0
 8010576:	4618      	mov	r0, r3
 8010578:	f00d ffbd 	bl	801e4f6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2200      	movs	r2, #0
 8010580:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6a3a      	ldr	r2, [r7, #32]
 8010586:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010588:	4b3f      	ldr	r3, [pc, #252]	@ (8010688 <netif_add+0x19c>)
 801058a:	781a      	ldrb	r2, [r3, #0]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010596:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	68b9      	ldr	r1, [r7, #8]
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f000 f914 	bl	80107cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80105a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	4798      	blx	r3
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <netif_add+0xc8>
    return NULL;
 80105b0:	2300      	movs	r3, #0
 80105b2:	e058      	b.n	8010666 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80105ba:	2bff      	cmp	r3, #255	@ 0xff
 80105bc:	d103      	bne.n	80105c6 <netif_add+0xda>
        netif->num = 0;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80105c6:	2300      	movs	r3, #0
 80105c8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80105ca:	4b30      	ldr	r3, [pc, #192]	@ (801068c <netif_add+0x1a0>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	e02b      	b.n	801062a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80105d2:	697a      	ldr	r2, [r7, #20]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d106      	bne.n	80105e8 <netif_add+0xfc>
 80105da:	4b25      	ldr	r3, [pc, #148]	@ (8010670 <netif_add+0x184>)
 80105dc:	f240 128b 	movw	r2, #395	@ 0x18b
 80105e0:	492b      	ldr	r1, [pc, #172]	@ (8010690 <netif_add+0x1a4>)
 80105e2:	4825      	ldr	r0, [pc, #148]	@ (8010678 <netif_add+0x18c>)
 80105e4:	f00d fee8 	bl	801e3b8 <iprintf>
        num_netifs++;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	3301      	adds	r3, #1
 80105ec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	2bff      	cmp	r3, #255	@ 0xff
 80105f2:	dd06      	ble.n	8010602 <netif_add+0x116>
 80105f4:	4b1e      	ldr	r3, [pc, #120]	@ (8010670 <netif_add+0x184>)
 80105f6:	f240 128d 	movw	r2, #397	@ 0x18d
 80105fa:	4926      	ldr	r1, [pc, #152]	@ (8010694 <netif_add+0x1a8>)
 80105fc:	481e      	ldr	r0, [pc, #120]	@ (8010678 <netif_add+0x18c>)
 80105fe:	f00d fedb 	bl	801e3b8 <iprintf>
        if (netif2->num == netif->num) {
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801060e:	429a      	cmp	r2, r3
 8010610:	d108      	bne.n	8010624 <netif_add+0x138>
          netif->num++;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010618:	3301      	adds	r3, #1
 801061a:	b2da      	uxtb	r2, r3
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8010622:	e005      	b.n	8010630 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	617b      	str	r3, [r7, #20]
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1d0      	bne.n	80105d2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1be      	bne.n	80105b4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801063c:	2bfe      	cmp	r3, #254	@ 0xfe
 801063e:	d103      	bne.n	8010648 <netif_add+0x15c>
    netif_num = 0;
 8010640:	4b11      	ldr	r3, [pc, #68]	@ (8010688 <netif_add+0x19c>)
 8010642:	2200      	movs	r2, #0
 8010644:	701a      	strb	r2, [r3, #0]
 8010646:	e006      	b.n	8010656 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801064e:	3301      	adds	r3, #1
 8010650:	b2da      	uxtb	r2, r3
 8010652:	4b0d      	ldr	r3, [pc, #52]	@ (8010688 <netif_add+0x19c>)
 8010654:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010656:	4b0d      	ldr	r3, [pc, #52]	@ (801068c <netif_add+0x1a0>)
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801065e:	4a0b      	ldr	r2, [pc, #44]	@ (801068c <netif_add+0x1a0>)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010664:	68fb      	ldr	r3, [r7, #12]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	08023124 	.word	0x08023124
 8010674:	080231b8 	.word	0x080231b8
 8010678:	08023174 	.word	0x08023174
 801067c:	080231d4 	.word	0x080231d4
 8010680:	08025e1c 	.word	0x08025e1c
 8010684:	08010aaf 	.word	0x08010aaf
 8010688:	20012668 	.word	0x20012668
 801068c:	20012660 	.word	0x20012660
 8010690:	080231f8 	.word	0x080231f8
 8010694:	0802320c 	.word	0x0802320c

08010698 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80106a2:	6839      	ldr	r1, [r7, #0]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f002 ff75 	bl	8013594 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f008 f8a1 	bl	80187f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d106      	bne.n	80106dc <netif_do_set_ipaddr+0x20>
 80106ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010744 <netif_do_set_ipaddr+0x88>)
 80106d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80106d4:	491c      	ldr	r1, [pc, #112]	@ (8010748 <netif_do_set_ipaddr+0x8c>)
 80106d6:	481d      	ldr	r0, [pc, #116]	@ (801074c <netif_do_set_ipaddr+0x90>)
 80106d8:	f00d fe6e 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d106      	bne.n	80106f0 <netif_do_set_ipaddr+0x34>
 80106e2:	4b18      	ldr	r3, [pc, #96]	@ (8010744 <netif_do_set_ipaddr+0x88>)
 80106e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80106e8:	4917      	ldr	r1, [pc, #92]	@ (8010748 <netif_do_set_ipaddr+0x8c>)
 80106ea:	4818      	ldr	r0, [pc, #96]	@ (801074c <netif_do_set_ipaddr+0x90>)
 80106ec:	f00d fe64 	bl	801e3b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d01c      	beq.n	8010738 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3304      	adds	r3, #4
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801070e:	f107 0314 	add.w	r3, r7, #20
 8010712:	4619      	mov	r1, r3
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ffbf 	bl	8010698 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <netif_do_set_ipaddr+0x6a>
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	e000      	b.n	8010728 <netif_do_set_ipaddr+0x6c>
 8010726:	2300      	movs	r3, #0
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801072c:	2101      	movs	r1, #1
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f000 f8d2 	bl	80108d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010734:	2301      	movs	r3, #1
 8010736:	e000      	b.n	801073a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3718      	adds	r7, #24
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	08023124 	.word	0x08023124
 8010748:	0802323c 	.word	0x0802323c
 801074c:	08023174 	.word	0x08023174

08010750 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	3308      	adds	r3, #8
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	429a      	cmp	r2, r3
 8010768:	d00a      	beq.n	8010780 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <netif_do_set_netmask+0x26>
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	e000      	b.n	8010778 <netif_do_set_netmask+0x28>
 8010776:	2300      	movs	r3, #0
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801077c:	2301      	movs	r3, #1
 801077e:	e000      	b.n	8010782 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3714      	adds	r7, #20
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr

0801078e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801078e:	b480      	push	{r7}
 8010790:	b085      	sub	sp, #20
 8010792:	af00      	add	r7, sp, #0
 8010794:	60f8      	str	r0, [r7, #12]
 8010796:	60b9      	str	r1, [r7, #8]
 8010798:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	330c      	adds	r3, #12
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d00a      	beq.n	80107be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d002      	beq.n	80107b4 <netif_do_set_gw+0x26>
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	e000      	b.n	80107b6 <netif_do_set_gw+0x28>
 80107b4:	2300      	movs	r3, #0
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80107ba:	2301      	movs	r3, #1
 80107bc:	e000      	b.n	80107c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80107de:	2300      	movs	r3, #0
 80107e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d101      	bne.n	80107ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80107e8:	4b1c      	ldr	r3, [pc, #112]	@ (801085c <netif_set_addr+0x90>)
 80107ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d101      	bne.n	80107f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80107f2:	4b1a      	ldr	r3, [pc, #104]	@ (801085c <netif_set_addr+0x90>)
 80107f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80107fc:	4b17      	ldr	r3, [pc, #92]	@ (801085c <netif_set_addr+0x90>)
 80107fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d003      	beq.n	801080e <netif_set_addr+0x42>
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d101      	bne.n	8010812 <netif_set_addr+0x46>
 801080e:	2301      	movs	r3, #1
 8010810:	e000      	b.n	8010814 <netif_set_addr+0x48>
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d006      	beq.n	801082a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801081c:	f107 0310 	add.w	r3, r7, #16
 8010820:	461a      	mov	r2, r3
 8010822:	68b9      	ldr	r1, [r7, #8]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7ff ff49 	bl	80106bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801082a:	69fa      	ldr	r2, [r7, #28]
 801082c:	6879      	ldr	r1, [r7, #4]
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f7ff ff8e 	bl	8010750 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010834:	69ba      	ldr	r2, [r7, #24]
 8010836:	6839      	ldr	r1, [r7, #0]
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f7ff ffa8 	bl	801078e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d106      	bne.n	8010852 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010844:	f107 0310 	add.w	r3, r7, #16
 8010848:	461a      	mov	r2, r3
 801084a:	68b9      	ldr	r1, [r7, #8]
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7ff ff35 	bl	80106bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010852:	bf00      	nop
 8010854:	3720      	adds	r7, #32
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	08025e1c 	.word	0x08025e1c

08010860 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010868:	4a04      	ldr	r2, [pc, #16]	@ (801087c <netif_set_default+0x1c>)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801086e:	bf00      	nop
 8010870:	370c      	adds	r7, #12
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	20012664 	.word	0x20012664

08010880 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d107      	bne.n	801089e <netif_set_up+0x1e>
 801088e:	4b0f      	ldr	r3, [pc, #60]	@ (80108cc <netif_set_up+0x4c>)
 8010890:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010894:	490e      	ldr	r1, [pc, #56]	@ (80108d0 <netif_set_up+0x50>)
 8010896:	480f      	ldr	r0, [pc, #60]	@ (80108d4 <netif_set_up+0x54>)
 8010898:	f00d fd8e 	bl	801e3b8 <iprintf>
 801089c:	e013      	b.n	80108c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10c      	bne.n	80108c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108b2:	f043 0301 	orr.w	r3, r3, #1
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80108be:	2103      	movs	r1, #3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 f809 	bl	80108d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	08023124 	.word	0x08023124
 80108d0:	080232ac 	.word	0x080232ac
 80108d4:	08023174 	.word	0x08023174

080108d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	460b      	mov	r3, r1
 80108e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d106      	bne.n	80108f8 <netif_issue_reports+0x20>
 80108ea:	4b18      	ldr	r3, [pc, #96]	@ (801094c <netif_issue_reports+0x74>)
 80108ec:	f240 326d 	movw	r2, #877	@ 0x36d
 80108f0:	4917      	ldr	r1, [pc, #92]	@ (8010950 <netif_issue_reports+0x78>)
 80108f2:	4818      	ldr	r0, [pc, #96]	@ (8010954 <netif_issue_reports+0x7c>)
 80108f4:	f00d fd60 	bl	801e3b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	2b00      	cmp	r3, #0
 8010904:	d01e      	beq.n	8010944 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801090c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010910:	2b00      	cmp	r3, #0
 8010912:	d017      	beq.n	8010944 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010914:	78fb      	ldrb	r3, [r7, #3]
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	2b00      	cmp	r3, #0
 801091c:	d013      	beq.n	8010946 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3304      	adds	r3, #4
 8010922:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00e      	beq.n	8010946 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801092e:	f003 0308 	and.w	r3, r3, #8
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	3304      	adds	r3, #4
 801093a:	4619      	mov	r1, r3
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f00a fda3 	bl	801b488 <etharp_request>
 8010942:	e000      	b.n	8010946 <netif_issue_reports+0x6e>
    return;
 8010944:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	08023124 	.word	0x08023124
 8010950:	080232c8 	.word	0x080232c8
 8010954:	08023174 	.word	0x08023174

08010958 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d107      	bne.n	8010976 <netif_set_down+0x1e>
 8010966:	4b12      	ldr	r3, [pc, #72]	@ (80109b0 <netif_set_down+0x58>)
 8010968:	f240 329b 	movw	r2, #923	@ 0x39b
 801096c:	4911      	ldr	r1, [pc, #68]	@ (80109b4 <netif_set_down+0x5c>)
 801096e:	4812      	ldr	r0, [pc, #72]	@ (80109b8 <netif_set_down+0x60>)
 8010970:	f00d fd22 	bl	801e3b8 <iprintf>
 8010974:	e019      	b.n	80109aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	d012      	beq.n	80109aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801098a:	f023 0301 	bic.w	r3, r3, #1
 801098e:	b2da      	uxtb	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801099c:	f003 0308 	and.w	r3, r3, #8
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f00a f929 	bl	801abfc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	08023124 	.word	0x08023124
 80109b4:	080232ec 	.word	0x080232ec
 80109b8:	08023174 	.word	0x08023174

080109bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d107      	bne.n	80109da <netif_set_link_up+0x1e>
 80109ca:	4b15      	ldr	r3, [pc, #84]	@ (8010a20 <netif_set_link_up+0x64>)
 80109cc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80109d0:	4914      	ldr	r1, [pc, #80]	@ (8010a24 <netif_set_link_up+0x68>)
 80109d2:	4815      	ldr	r0, [pc, #84]	@ (8010a28 <netif_set_link_up+0x6c>)
 80109d4:	f00d fcf0 	bl	801e3b8 <iprintf>
 80109d8:	e01e      	b.n	8010a18 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109e0:	f003 0304 	and.w	r3, r3, #4
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d117      	bne.n	8010a18 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109ee:	f043 0304 	orr.w	r3, r3, #4
 80109f2:	b2da      	uxtb	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f008 fb44 	bl	8019088 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010a00:	2103      	movs	r1, #3
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f7ff ff68 	bl	80108d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	69db      	ldr	r3, [r3, #28]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d003      	beq.n	8010a18 <netif_set_link_up+0x5c>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	69db      	ldr	r3, [r3, #28]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a18:	3708      	adds	r7, #8
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	08023124 	.word	0x08023124
 8010a24:	0802330c 	.word	0x0802330c
 8010a28:	08023174 	.word	0x08023174

08010a2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d107      	bne.n	8010a4a <netif_set_link_down+0x1e>
 8010a3a:	4b11      	ldr	r3, [pc, #68]	@ (8010a80 <netif_set_link_down+0x54>)
 8010a3c:	f240 4206 	movw	r2, #1030	@ 0x406
 8010a40:	4910      	ldr	r1, [pc, #64]	@ (8010a84 <netif_set_link_down+0x58>)
 8010a42:	4811      	ldr	r0, [pc, #68]	@ (8010a88 <netif_set_link_down+0x5c>)
 8010a44:	f00d fcb8 	bl	801e3b8 <iprintf>
 8010a48:	e017      	b.n	8010a7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a50:	f003 0304 	and.w	r3, r3, #4
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d010      	beq.n	8010a7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a5e:	f023 0304 	bic.w	r3, r3, #4
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <netif_set_link_down+0x4e>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	08023124 	.word	0x08023124
 8010a84:	08023330 	.word	0x08023330
 8010a88:	08023174 	.word	0x08023174

08010a8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	683a      	ldr	r2, [r7, #0]
 8010aa0:	61da      	str	r2, [r3, #28]
  }
}
 8010aa2:	bf00      	nop
 8010aa4:	370c      	adds	r7, #12
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010aae:	b480      	push	{r7}
 8010ab0:	b085      	sub	sp, #20
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	60f8      	str	r0, [r7, #12]
 8010ab6:	60b9      	str	r1, [r7, #8]
 8010ab8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010aba:	f06f 030b 	mvn.w	r3, #11
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
	...

08010acc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b085      	sub	sp, #20
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ad6:	79fb      	ldrb	r3, [r7, #7]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d013      	beq.n	8010b04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010adc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b14 <netif_get_by_index+0x48>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	e00c      	b.n	8010afe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010aea:	3301      	adds	r3, #1
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	79fa      	ldrb	r2, [r7, #7]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d101      	bne.n	8010af8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	e006      	b.n	8010b06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	60fb      	str	r3, [r7, #12]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1ef      	bne.n	8010ae4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	20012660 	.word	0x20012660

08010b18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010b1e:	f00c fb1f 	bl	801d160 <sys_arch_protect>
 8010b22:	6038      	str	r0, [r7, #0]
 8010b24:	4b0d      	ldr	r3, [pc, #52]	@ (8010b5c <pbuf_free_ooseq+0x44>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	701a      	strb	r2, [r3, #0]
 8010b2a:	6838      	ldr	r0, [r7, #0]
 8010b2c:	f00c fb26 	bl	801d17c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b30:	4b0b      	ldr	r3, [pc, #44]	@ (8010b60 <pbuf_free_ooseq+0x48>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	607b      	str	r3, [r7, #4]
 8010b36:	e00a      	b.n	8010b4e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d003      	beq.n	8010b48 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f002 fd65 	bl	8013610 <tcp_free_ooseq>
      return;
 8010b46:	e005      	b.n	8010b54 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	607b      	str	r3, [r7, #4]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1f1      	bne.n	8010b38 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20012669 	.word	0x20012669
 8010b60:	20012678 	.word	0x20012678

08010b64 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010b6c:	f7ff ffd4 	bl	8010b18 <pbuf_free_ooseq>
}
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010b7e:	f00c faef 	bl	801d160 <sys_arch_protect>
 8010b82:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010b84:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc4 <pbuf_pool_is_empty+0x4c>)
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8010bc4 <pbuf_pool_is_empty+0x4c>)
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f00c faf3 	bl	801d17c <sys_arch_unprotect>

  if (!queued) {
 8010b96:	78fb      	ldrb	r3, [r7, #3]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10f      	bne.n	8010bbc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	480a      	ldr	r0, [pc, #40]	@ (8010bc8 <pbuf_pool_is_empty+0x50>)
 8010ba0:	f7fe fb96 	bl	800f2d0 <tcpip_try_callback>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d008      	beq.n	8010bbc <pbuf_pool_is_empty+0x44>
 8010baa:	f00c fad9 	bl	801d160 <sys_arch_protect>
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	4b04      	ldr	r3, [pc, #16]	@ (8010bc4 <pbuf_pool_is_empty+0x4c>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	701a      	strb	r2, [r3, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f00c fae0 	bl	801d17c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	20012669 	.word	0x20012669
 8010bc8:	08010b65 	.word	0x08010b65

08010bcc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	461a      	mov	r2, r3
 8010bda:	460b      	mov	r3, r1
 8010bdc:	80fb      	strh	r3, [r7, #6]
 8010bde:	4613      	mov	r3, r2
 8010be0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	88fa      	ldrh	r2, [r7, #6]
 8010bf2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	88ba      	ldrh	r2, [r7, #4]
 8010bf8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010bfa:	8b3b      	ldrh	r3, [r7, #24]
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	7f3a      	ldrb	r2, [r7, #28]
 8010c06:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	73da      	strb	r2, [r3, #15]
}
 8010c14:	bf00      	nop
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08c      	sub	sp, #48	@ 0x30
 8010c24:	af02      	add	r7, sp, #8
 8010c26:	4603      	mov	r3, r0
 8010c28:	71fb      	strb	r3, [r7, #7]
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	80bb      	strh	r3, [r7, #4]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010c36:	887b      	ldrh	r3, [r7, #2]
 8010c38:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010c3c:	d07f      	beq.n	8010d3e <pbuf_alloc+0x11e>
 8010c3e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010c42:	f300 80c8 	bgt.w	8010dd6 <pbuf_alloc+0x1b6>
 8010c46:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010c4a:	d010      	beq.n	8010c6e <pbuf_alloc+0x4e>
 8010c4c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010c50:	f300 80c1 	bgt.w	8010dd6 <pbuf_alloc+0x1b6>
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d002      	beq.n	8010c5e <pbuf_alloc+0x3e>
 8010c58:	2b41      	cmp	r3, #65	@ 0x41
 8010c5a:	f040 80bc 	bne.w	8010dd6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010c5e:	887a      	ldrh	r2, [r7, #2]
 8010c60:	88bb      	ldrh	r3, [r7, #4]
 8010c62:	4619      	mov	r1, r3
 8010c64:	2000      	movs	r0, #0
 8010c66:	f000 f8d1 	bl	8010e0c <pbuf_alloc_reference>
 8010c6a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010c6c:	e0bd      	b.n	8010dea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8010c72:	2300      	movs	r3, #0
 8010c74:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010c76:	88bb      	ldrh	r3, [r7, #4]
 8010c78:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010c7a:	200d      	movs	r0, #13
 8010c7c:	f7ff fb8e 	bl	801039c <memp_malloc>
 8010c80:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010c88:	f7ff ff76 	bl	8010b78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d002      	beq.n	8010c98 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010c92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c94:	f000 faa8 	bl	80111e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e0a7      	b.n	8010dec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010c9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c9e:	3303      	adds	r3, #3
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	f023 0303 	bic.w	r3, r3, #3
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	8b7a      	ldrh	r2, [r7, #26]
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	bf28      	it	cs
 8010cb4:	4613      	movcs	r3, r2
 8010cb6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010cb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010cba:	3310      	adds	r3, #16
 8010cbc:	693a      	ldr	r2, [r7, #16]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	3303      	adds	r3, #3
 8010cc2:	f023 0303 	bic.w	r3, r3, #3
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	89f9      	ldrh	r1, [r7, #14]
 8010cca:	8b7a      	ldrh	r2, [r7, #26]
 8010ccc:	2300      	movs	r3, #0
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	887b      	ldrh	r3, [r7, #2]
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	4601      	mov	r1, r0
 8010cd8:	6938      	ldr	r0, [r7, #16]
 8010cda:	f7ff ff77 	bl	8010bcc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	f003 0303 	and.w	r3, r3, #3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d006      	beq.n	8010cf8 <pbuf_alloc+0xd8>
 8010cea:	4b42      	ldr	r3, [pc, #264]	@ (8010df4 <pbuf_alloc+0x1d4>)
 8010cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010cf0:	4941      	ldr	r1, [pc, #260]	@ (8010df8 <pbuf_alloc+0x1d8>)
 8010cf2:	4842      	ldr	r0, [pc, #264]	@ (8010dfc <pbuf_alloc+0x1dc>)
 8010cf4:	f00d fb60 	bl	801e3b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010cf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010cfa:	3303      	adds	r3, #3
 8010cfc:	f023 0303 	bic.w	r3, r3, #3
 8010d00:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010d04:	d106      	bne.n	8010d14 <pbuf_alloc+0xf4>
 8010d06:	4b3b      	ldr	r3, [pc, #236]	@ (8010df4 <pbuf_alloc+0x1d4>)
 8010d08:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010d0c:	493c      	ldr	r1, [pc, #240]	@ (8010e00 <pbuf_alloc+0x1e0>)
 8010d0e:	483b      	ldr	r0, [pc, #236]	@ (8010dfc <pbuf_alloc+0x1dc>)
 8010d10:	f00d fb52 	bl	801e3b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d102      	bne.n	8010d20 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d1e:	e002      	b.n	8010d26 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	693a      	ldr	r2, [r7, #16]
 8010d24:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010d2a:	8b7a      	ldrh	r2, [r7, #26]
 8010d2c:	89fb      	ldrh	r3, [r7, #14]
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010d32:	2300      	movs	r3, #0
 8010d34:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010d36:	8b7b      	ldrh	r3, [r7, #26]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d19e      	bne.n	8010c7a <pbuf_alloc+0x5a>
      break;
 8010d3c:	e055      	b.n	8010dea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010d3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d40:	3303      	adds	r3, #3
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	f023 0303 	bic.w	r3, r3, #3
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	88bb      	ldrh	r3, [r7, #4]
 8010d4c:	3303      	adds	r3, #3
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	f023 0303 	bic.w	r3, r3, #3
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	4413      	add	r3, r2
 8010d58:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010d5a:	8b3b      	ldrh	r3, [r7, #24]
 8010d5c:	3310      	adds	r3, #16
 8010d5e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d60:	8b3a      	ldrh	r2, [r7, #24]
 8010d62:	88bb      	ldrh	r3, [r7, #4]
 8010d64:	3303      	adds	r3, #3
 8010d66:	f023 0303 	bic.w	r3, r3, #3
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d306      	bcc.n	8010d7c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010d6e:	8afa      	ldrh	r2, [r7, #22]
 8010d70:	88bb      	ldrh	r3, [r7, #4]
 8010d72:	3303      	adds	r3, #3
 8010d74:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d201      	bcs.n	8010d80 <pbuf_alloc+0x160>
        return NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e035      	b.n	8010dec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010d80:	8afb      	ldrh	r3, [r7, #22]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff f966 	bl	8010054 <mem_malloc>
 8010d88:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <pbuf_alloc+0x174>
        return NULL;
 8010d90:	2300      	movs	r3, #0
 8010d92:	e02b      	b.n	8010dec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010d94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d96:	3310      	adds	r3, #16
 8010d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d9a:	4413      	add	r3, r2
 8010d9c:	3303      	adds	r3, #3
 8010d9e:	f023 0303 	bic.w	r3, r3, #3
 8010da2:	4618      	mov	r0, r3
 8010da4:	88b9      	ldrh	r1, [r7, #4]
 8010da6:	88ba      	ldrh	r2, [r7, #4]
 8010da8:	2300      	movs	r3, #0
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	887b      	ldrh	r3, [r7, #2]
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	460b      	mov	r3, r1
 8010db2:	4601      	mov	r1, r0
 8010db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010db6:	f7ff ff09 	bl	8010bcc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d010      	beq.n	8010de8 <pbuf_alloc+0x1c8>
 8010dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8010df4 <pbuf_alloc+0x1d4>)
 8010dc8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010dcc:	490d      	ldr	r1, [pc, #52]	@ (8010e04 <pbuf_alloc+0x1e4>)
 8010dce:	480b      	ldr	r0, [pc, #44]	@ (8010dfc <pbuf_alloc+0x1dc>)
 8010dd0:	f00d faf2 	bl	801e3b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010dd4:	e008      	b.n	8010de8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010dd6:	4b07      	ldr	r3, [pc, #28]	@ (8010df4 <pbuf_alloc+0x1d4>)
 8010dd8:	f240 1227 	movw	r2, #295	@ 0x127
 8010ddc:	490a      	ldr	r1, [pc, #40]	@ (8010e08 <pbuf_alloc+0x1e8>)
 8010dde:	4807      	ldr	r0, [pc, #28]	@ (8010dfc <pbuf_alloc+0x1dc>)
 8010de0:	f00d faea 	bl	801e3b8 <iprintf>
      return NULL;
 8010de4:	2300      	movs	r3, #0
 8010de6:	e001      	b.n	8010dec <pbuf_alloc+0x1cc>
      break;
 8010de8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3728      	adds	r7, #40	@ 0x28
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	08023354 	.word	0x08023354
 8010df8:	08023384 	.word	0x08023384
 8010dfc:	080233b4 	.word	0x080233b4
 8010e00:	080233dc 	.word	0x080233dc
 8010e04:	08023410 	.word	0x08023410
 8010e08:	0802343c 	.word	0x0802343c

08010e0c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	460b      	mov	r3, r1
 8010e16:	807b      	strh	r3, [r7, #2]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010e1c:	883b      	ldrh	r3, [r7, #0]
 8010e1e:	2b41      	cmp	r3, #65	@ 0x41
 8010e20:	d009      	beq.n	8010e36 <pbuf_alloc_reference+0x2a>
 8010e22:	883b      	ldrh	r3, [r7, #0]
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d006      	beq.n	8010e36 <pbuf_alloc_reference+0x2a>
 8010e28:	4b0f      	ldr	r3, [pc, #60]	@ (8010e68 <pbuf_alloc_reference+0x5c>)
 8010e2a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010e2e:	490f      	ldr	r1, [pc, #60]	@ (8010e6c <pbuf_alloc_reference+0x60>)
 8010e30:	480f      	ldr	r0, [pc, #60]	@ (8010e70 <pbuf_alloc_reference+0x64>)
 8010e32:	f00d fac1 	bl	801e3b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010e36:	200c      	movs	r0, #12
 8010e38:	f7ff fab0 	bl	801039c <memp_malloc>
 8010e3c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d101      	bne.n	8010e48 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010e44:	2300      	movs	r3, #0
 8010e46:	e00b      	b.n	8010e60 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010e48:	8879      	ldrh	r1, [r7, #2]
 8010e4a:	887a      	ldrh	r2, [r7, #2]
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	9301      	str	r3, [sp, #4]
 8010e50:	883b      	ldrh	r3, [r7, #0]
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	460b      	mov	r3, r1
 8010e56:	6879      	ldr	r1, [r7, #4]
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7ff feb7 	bl	8010bcc <pbuf_init_alloced_pbuf>
  return p;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	08023354 	.word	0x08023354
 8010e6c:	08023458 	.word	0x08023458
 8010e70:	080233b4 	.word	0x080233b4

08010e74 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af02      	add	r7, sp, #8
 8010e7a:	607b      	str	r3, [r7, #4]
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	73fb      	strb	r3, [r7, #15]
 8010e80:	460b      	mov	r3, r1
 8010e82:	81bb      	strh	r3, [r7, #12]
 8010e84:	4613      	mov	r3, r2
 8010e86:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010e88:	7bfb      	ldrb	r3, [r7, #15]
 8010e8a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010e8c:	8a7b      	ldrh	r3, [r7, #18]
 8010e8e:	3303      	adds	r3, #3
 8010e90:	f023 0203 	bic.w	r2, r3, #3
 8010e94:	89bb      	ldrh	r3, [r7, #12]
 8010e96:	441a      	add	r2, r3
 8010e98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d901      	bls.n	8010ea2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	e018      	b.n	8010ed4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d007      	beq.n	8010eb8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010ea8:	8a7b      	ldrh	r3, [r7, #18]
 8010eaa:	3303      	adds	r3, #3
 8010eac:	f023 0303 	bic.w	r3, r3, #3
 8010eb0:	6a3a      	ldr	r2, [r7, #32]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	617b      	str	r3, [r7, #20]
 8010eb6:	e001      	b.n	8010ebc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	89b9      	ldrh	r1, [r7, #12]
 8010ec0:	89ba      	ldrh	r2, [r7, #12]
 8010ec2:	2302      	movs	r3, #2
 8010ec4:	9301      	str	r3, [sp, #4]
 8010ec6:	897b      	ldrh	r3, [r7, #10]
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	460b      	mov	r3, r1
 8010ecc:	6979      	ldr	r1, [r7, #20]
 8010ece:	f7ff fe7d 	bl	8010bcc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010ed2:	687b      	ldr	r3, [r7, #4]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <pbuf_realloc+0x20>
 8010eee:	4b3a      	ldr	r3, [pc, #232]	@ (8010fd8 <pbuf_realloc+0xfc>)
 8010ef0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010ef4:	4939      	ldr	r1, [pc, #228]	@ (8010fdc <pbuf_realloc+0x100>)
 8010ef6:	483a      	ldr	r0, [pc, #232]	@ (8010fe0 <pbuf_realloc+0x104>)
 8010ef8:	f00d fa5e 	bl	801e3b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	891b      	ldrh	r3, [r3, #8]
 8010f00:	887a      	ldrh	r2, [r7, #2]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d263      	bcs.n	8010fce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	891a      	ldrh	r2, [r3, #8]
 8010f0a:	887b      	ldrh	r3, [r7, #2]
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010f10:	887b      	ldrh	r3, [r7, #2]
 8010f12:	817b      	strh	r3, [r7, #10]
  q = p;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010f18:	e018      	b.n	8010f4c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	895b      	ldrh	r3, [r3, #10]
 8010f1e:	897a      	ldrh	r2, [r7, #10]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	891a      	ldrh	r2, [r3, #8]
 8010f28:	893b      	ldrh	r3, [r7, #8]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d106      	bne.n	8010f4c <pbuf_realloc+0x70>
 8010f3e:	4b26      	ldr	r3, [pc, #152]	@ (8010fd8 <pbuf_realloc+0xfc>)
 8010f40:	f240 12af 	movw	r2, #431	@ 0x1af
 8010f44:	4927      	ldr	r1, [pc, #156]	@ (8010fe4 <pbuf_realloc+0x108>)
 8010f46:	4826      	ldr	r0, [pc, #152]	@ (8010fe0 <pbuf_realloc+0x104>)
 8010f48:	f00d fa36 	bl	801e3b8 <iprintf>
  while (rem_len > q->len) {
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	895b      	ldrh	r3, [r3, #10]
 8010f50:	897a      	ldrh	r2, [r7, #10]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d8e1      	bhi.n	8010f1a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	7b1b      	ldrb	r3, [r3, #12]
 8010f5a:	f003 030f 	and.w	r3, r3, #15
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d121      	bne.n	8010fa6 <pbuf_realloc+0xca>
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	895b      	ldrh	r3, [r3, #10]
 8010f66:	897a      	ldrh	r2, [r7, #10]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d01c      	beq.n	8010fa6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	7b5b      	ldrb	r3, [r3, #13]
 8010f70:	f003 0302 	and.w	r3, r3, #2
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d116      	bne.n	8010fa6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	897b      	ldrh	r3, [r7, #10]
 8010f84:	4413      	add	r3, r2
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	4619      	mov	r1, r3
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7fe ff58 	bl	800fe40 <mem_trim>
 8010f90:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d106      	bne.n	8010fa6 <pbuf_realloc+0xca>
 8010f98:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd8 <pbuf_realloc+0xfc>)
 8010f9a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010f9e:	4912      	ldr	r1, [pc, #72]	@ (8010fe8 <pbuf_realloc+0x10c>)
 8010fa0:	480f      	ldr	r0, [pc, #60]	@ (8010fe0 <pbuf_realloc+0x104>)
 8010fa2:	f00d fa09 	bl	801e3b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	897a      	ldrh	r2, [r7, #10]
 8010faa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	895a      	ldrh	r2, [r3, #10]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d004      	beq.n	8010fc6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f000 f911 	bl	80111e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	601a      	str	r2, [r3, #0]
 8010fcc:	e000      	b.n	8010fd0 <pbuf_realloc+0xf4>
    return;
 8010fce:	bf00      	nop

}
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08023354 	.word	0x08023354
 8010fdc:	0802346c 	.word	0x0802346c
 8010fe0:	080233b4 	.word	0x080233b4
 8010fe4:	08023484 	.word	0x08023484
 8010fe8:	0802349c 	.word	0x0802349c

08010fec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d106      	bne.n	801100e <pbuf_add_header_impl+0x22>
 8011000:	4b2b      	ldr	r3, [pc, #172]	@ (80110b0 <pbuf_add_header_impl+0xc4>)
 8011002:	f240 12df 	movw	r2, #479	@ 0x1df
 8011006:	492b      	ldr	r1, [pc, #172]	@ (80110b4 <pbuf_add_header_impl+0xc8>)
 8011008:	482b      	ldr	r0, [pc, #172]	@ (80110b8 <pbuf_add_header_impl+0xcc>)
 801100a:	f00d f9d5 	bl	801e3b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d003      	beq.n	801101c <pbuf_add_header_impl+0x30>
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801101a:	d301      	bcc.n	8011020 <pbuf_add_header_impl+0x34>
    return 1;
 801101c:	2301      	movs	r3, #1
 801101e:	e043      	b.n	80110a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d101      	bne.n	801102a <pbuf_add_header_impl+0x3e>
    return 0;
 8011026:	2300      	movs	r3, #0
 8011028:	e03e      	b.n	80110a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	891a      	ldrh	r2, [r3, #8]
 8011032:	8a7b      	ldrh	r3, [r7, #18]
 8011034:	4413      	add	r3, r2
 8011036:	b29b      	uxth	r3, r3
 8011038:	8a7a      	ldrh	r2, [r7, #18]
 801103a:	429a      	cmp	r2, r3
 801103c:	d901      	bls.n	8011042 <pbuf_add_header_impl+0x56>
    return 1;
 801103e:	2301      	movs	r3, #1
 8011040:	e032      	b.n	80110a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	7b1b      	ldrb	r3, [r3, #12]
 8011046:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011048:	8a3b      	ldrh	r3, [r7, #16]
 801104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00c      	beq.n	801106c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	685a      	ldr	r2, [r3, #4]
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	425b      	negs	r3, r3
 801105a:	4413      	add	r3, r2
 801105c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3310      	adds	r3, #16
 8011062:	697a      	ldr	r2, [r7, #20]
 8011064:	429a      	cmp	r2, r3
 8011066:	d20d      	bcs.n	8011084 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011068:	2301      	movs	r3, #1
 801106a:	e01d      	b.n	80110a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d006      	beq.n	8011080 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	425b      	negs	r3, r3
 801107a:	4413      	add	r3, r2
 801107c:	617b      	str	r3, [r7, #20]
 801107e:	e001      	b.n	8011084 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011080:	2301      	movs	r3, #1
 8011082:	e011      	b.n	80110a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	697a      	ldr	r2, [r7, #20]
 8011088:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	895a      	ldrh	r2, [r3, #10]
 801108e:	8a7b      	ldrh	r3, [r7, #18]
 8011090:	4413      	add	r3, r2
 8011092:	b29a      	uxth	r2, r3
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	891a      	ldrh	r2, [r3, #8]
 801109c:	8a7b      	ldrh	r3, [r7, #18]
 801109e:	4413      	add	r3, r2
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	811a      	strh	r2, [r3, #8]


  return 0;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3718      	adds	r7, #24
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	08023354 	.word	0x08023354
 80110b4:	080234b8 	.word	0x080234b8
 80110b8:	080233b4 	.word	0x080233b4

080110bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80110c6:	2200      	movs	r2, #0
 80110c8:	6839      	ldr	r1, [r7, #0]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7ff ff8e 	bl	8010fec <pbuf_add_header_impl>
 80110d0:	4603      	mov	r3, r0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d106      	bne.n	80110fa <pbuf_remove_header+0x1e>
 80110ec:	4b20      	ldr	r3, [pc, #128]	@ (8011170 <pbuf_remove_header+0x94>)
 80110ee:	f240 224b 	movw	r2, #587	@ 0x24b
 80110f2:	4920      	ldr	r1, [pc, #128]	@ (8011174 <pbuf_remove_header+0x98>)
 80110f4:	4820      	ldr	r0, [pc, #128]	@ (8011178 <pbuf_remove_header+0x9c>)
 80110f6:	f00d f95f 	bl	801e3b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <pbuf_remove_header+0x2c>
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011106:	d301      	bcc.n	801110c <pbuf_remove_header+0x30>
    return 1;
 8011108:	2301      	movs	r3, #1
 801110a:	e02c      	b.n	8011166 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d101      	bne.n	8011116 <pbuf_remove_header+0x3a>
    return 0;
 8011112:	2300      	movs	r3, #0
 8011114:	e027      	b.n	8011166 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	895b      	ldrh	r3, [r3, #10]
 801111e:	89fa      	ldrh	r2, [r7, #14]
 8011120:	429a      	cmp	r2, r3
 8011122:	d908      	bls.n	8011136 <pbuf_remove_header+0x5a>
 8011124:	4b12      	ldr	r3, [pc, #72]	@ (8011170 <pbuf_remove_header+0x94>)
 8011126:	f240 2255 	movw	r2, #597	@ 0x255
 801112a:	4914      	ldr	r1, [pc, #80]	@ (801117c <pbuf_remove_header+0xa0>)
 801112c:	4812      	ldr	r0, [pc, #72]	@ (8011178 <pbuf_remove_header+0x9c>)
 801112e:	f00d f943 	bl	801e3b8 <iprintf>
 8011132:	2301      	movs	r3, #1
 8011134:	e017      	b.n	8011166 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	441a      	add	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	895a      	ldrh	r2, [r3, #10]
 801114c:	89fb      	ldrh	r3, [r7, #14]
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	b29a      	uxth	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	891a      	ldrh	r2, [r3, #8]
 801115a:	89fb      	ldrh	r3, [r7, #14]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	b29a      	uxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	08023354 	.word	0x08023354
 8011174:	080234b8 	.word	0x080234b8
 8011178:	080233b4 	.word	0x080233b4
 801117c:	080234c4 	.word	0x080234c4

08011180 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	807b      	strh	r3, [r7, #2]
 801118c:	4613      	mov	r3, r2
 801118e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011190:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011194:	2b00      	cmp	r3, #0
 8011196:	da08      	bge.n	80111aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801119c:	425b      	negs	r3, r3
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7ff ff9b 	bl	80110dc <pbuf_remove_header>
 80111a6:	4603      	mov	r3, r0
 80111a8:	e007      	b.n	80111ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80111aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111ae:	787a      	ldrb	r2, [r7, #1]
 80111b0:	4619      	mov	r1, r3
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7ff ff1a 	bl	8010fec <pbuf_add_header_impl>
 80111b8:	4603      	mov	r3, r0
  }
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b082      	sub	sp, #8
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	460b      	mov	r3, r1
 80111cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80111ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111d2:	2201      	movs	r2, #1
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff ffd2 	bl	8011180 <pbuf_header_impl>
 80111dc:	4603      	mov	r3, r0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
	...

080111e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b088      	sub	sp, #32
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d10b      	bne.n	801120e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d106      	bne.n	801120a <pbuf_free+0x22>
 80111fc:	4b3b      	ldr	r3, [pc, #236]	@ (80112ec <pbuf_free+0x104>)
 80111fe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011202:	493b      	ldr	r1, [pc, #236]	@ (80112f0 <pbuf_free+0x108>)
 8011204:	483b      	ldr	r0, [pc, #236]	@ (80112f4 <pbuf_free+0x10c>)
 8011206:	f00d f8d7 	bl	801e3b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801120a:	2300      	movs	r3, #0
 801120c:	e069      	b.n	80112e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011212:	e062      	b.n	80112da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011214:	f00b ffa4 	bl	801d160 <sys_arch_protect>
 8011218:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	7b9b      	ldrb	r3, [r3, #14]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d106      	bne.n	8011230 <pbuf_free+0x48>
 8011222:	4b32      	ldr	r3, [pc, #200]	@ (80112ec <pbuf_free+0x104>)
 8011224:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011228:	4933      	ldr	r1, [pc, #204]	@ (80112f8 <pbuf_free+0x110>)
 801122a:	4832      	ldr	r0, [pc, #200]	@ (80112f4 <pbuf_free+0x10c>)
 801122c:	f00d f8c4 	bl	801e3b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	7b9b      	ldrb	r3, [r3, #14]
 8011234:	3b01      	subs	r3, #1
 8011236:	b2da      	uxtb	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	739a      	strb	r2, [r3, #14]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	7b9b      	ldrb	r3, [r3, #14]
 8011240:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011242:	69b8      	ldr	r0, [r7, #24]
 8011244:	f00b ff9a 	bl	801d17c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011248:	7dfb      	ldrb	r3, [r7, #23]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d143      	bne.n	80112d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	7b1b      	ldrb	r3, [r3, #12]
 8011258:	f003 030f 	and.w	r3, r3, #15
 801125c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	7b5b      	ldrb	r3, [r3, #13]
 8011262:	f003 0302 	and.w	r3, r3, #2
 8011266:	2b00      	cmp	r3, #0
 8011268:	d011      	beq.n	801128e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <pbuf_free+0x9c>
 8011276:	4b1d      	ldr	r3, [pc, #116]	@ (80112ec <pbuf_free+0x104>)
 8011278:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801127c:	491f      	ldr	r1, [pc, #124]	@ (80112fc <pbuf_free+0x114>)
 801127e:	481d      	ldr	r0, [pc, #116]	@ (80112f4 <pbuf_free+0x10c>)
 8011280:	f00d f89a 	bl	801e3b8 <iprintf>
        pc->custom_free_function(p);
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	4798      	blx	r3
 801128c:	e01d      	b.n	80112ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	2b02      	cmp	r3, #2
 8011292:	d104      	bne.n	801129e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	200d      	movs	r0, #13
 8011298:	f7ff f8f6 	bl	8010488 <memp_free>
 801129c:	e015      	b.n	80112ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801129e:	7bfb      	ldrb	r3, [r7, #15]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d104      	bne.n	80112ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80112a4:	6879      	ldr	r1, [r7, #4]
 80112a6:	200c      	movs	r0, #12
 80112a8:	f7ff f8ee 	bl	8010488 <memp_free>
 80112ac:	e00d      	b.n	80112ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80112ae:	7bfb      	ldrb	r3, [r7, #15]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d103      	bne.n	80112bc <pbuf_free+0xd4>
          mem_free(p);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f7fe fd33 	bl	800fd20 <mem_free>
 80112ba:	e006      	b.n	80112ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80112bc:	4b0b      	ldr	r3, [pc, #44]	@ (80112ec <pbuf_free+0x104>)
 80112be:	f240 320f 	movw	r2, #783	@ 0x30f
 80112c2:	490f      	ldr	r1, [pc, #60]	@ (8011300 <pbuf_free+0x118>)
 80112c4:	480b      	ldr	r0, [pc, #44]	@ (80112f4 <pbuf_free+0x10c>)
 80112c6:	f00d f877 	bl	801e3b8 <iprintf>
        }
      }
      count++;
 80112ca:	7ffb      	ldrb	r3, [r7, #31]
 80112cc:	3301      	adds	r3, #1
 80112ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	607b      	str	r3, [r7, #4]
 80112d4:	e001      	b.n	80112da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80112d6:	2300      	movs	r3, #0
 80112d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d199      	bne.n	8011214 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80112e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3720      	adds	r7, #32
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	08023354 	.word	0x08023354
 80112f0:	080234b8 	.word	0x080234b8
 80112f4:	080233b4 	.word	0x080233b4
 80112f8:	080234e4 	.word	0x080234e4
 80112fc:	080234fc 	.word	0x080234fc
 8011300:	08023520 	.word	0x08023520

08011304 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011304:	b480      	push	{r7}
 8011306:	b085      	sub	sp, #20
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801130c:	2300      	movs	r3, #0
 801130e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011310:	e005      	b.n	801131e <pbuf_clen+0x1a>
    ++len;
 8011312:	89fb      	ldrh	r3, [r7, #14]
 8011314:	3301      	adds	r3, #1
 8011316:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1f6      	bne.n	8011312 <pbuf_clen+0xe>
  }
  return len;
 8011324:	89fb      	ldrh	r3, [r7, #14]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
	...

08011334 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d016      	beq.n	8011370 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011342:	f00b ff0d 	bl	801d160 <sys_arch_protect>
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	7b9b      	ldrb	r3, [r3, #14]
 801134c:	3301      	adds	r3, #1
 801134e:	b2da      	uxtb	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	739a      	strb	r2, [r3, #14]
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f00b ff11 	bl	801d17c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	7b9b      	ldrb	r3, [r3, #14]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <pbuf_ref+0x3c>
 8011362:	4b05      	ldr	r3, [pc, #20]	@ (8011378 <pbuf_ref+0x44>)
 8011364:	f240 3242 	movw	r2, #834	@ 0x342
 8011368:	4904      	ldr	r1, [pc, #16]	@ (801137c <pbuf_ref+0x48>)
 801136a:	4805      	ldr	r0, [pc, #20]	@ (8011380 <pbuf_ref+0x4c>)
 801136c:	f00d f824 	bl	801e3b8 <iprintf>
  }
}
 8011370:	bf00      	nop
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	08023354 	.word	0x08023354
 801137c:	08023534 	.word	0x08023534
 8011380:	080233b4 	.word	0x080233b4

08011384 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d002      	beq.n	801139a <pbuf_cat+0x16>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d107      	bne.n	80113aa <pbuf_cat+0x26>
 801139a:	4b20      	ldr	r3, [pc, #128]	@ (801141c <pbuf_cat+0x98>)
 801139c:	f240 3259 	movw	r2, #857	@ 0x359
 80113a0:	491f      	ldr	r1, [pc, #124]	@ (8011420 <pbuf_cat+0x9c>)
 80113a2:	4820      	ldr	r0, [pc, #128]	@ (8011424 <pbuf_cat+0xa0>)
 80113a4:	f00d f808 	bl	801e3b8 <iprintf>
 80113a8:	e034      	b.n	8011414 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	60fb      	str	r3, [r7, #12]
 80113ae:	e00a      	b.n	80113c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	891a      	ldrh	r2, [r3, #8]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	4413      	add	r3, r2
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	60fb      	str	r3, [r7, #12]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1f0      	bne.n	80113b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	891a      	ldrh	r2, [r3, #8]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	895b      	ldrh	r3, [r3, #10]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d006      	beq.n	80113e8 <pbuf_cat+0x64>
 80113da:	4b10      	ldr	r3, [pc, #64]	@ (801141c <pbuf_cat+0x98>)
 80113dc:	f240 3262 	movw	r2, #866	@ 0x362
 80113e0:	4911      	ldr	r1, [pc, #68]	@ (8011428 <pbuf_cat+0xa4>)
 80113e2:	4810      	ldr	r0, [pc, #64]	@ (8011424 <pbuf_cat+0xa0>)
 80113e4:	f00c ffe8 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d006      	beq.n	80113fe <pbuf_cat+0x7a>
 80113f0:	4b0a      	ldr	r3, [pc, #40]	@ (801141c <pbuf_cat+0x98>)
 80113f2:	f240 3263 	movw	r2, #867	@ 0x363
 80113f6:	490d      	ldr	r1, [pc, #52]	@ (801142c <pbuf_cat+0xa8>)
 80113f8:	480a      	ldr	r0, [pc, #40]	@ (8011424 <pbuf_cat+0xa0>)
 80113fa:	f00c ffdd 	bl	801e3b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	891a      	ldrh	r2, [r3, #8]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	4413      	add	r3, r2
 8011408:	b29a      	uxth	r2, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	08023354 	.word	0x08023354
 8011420:	08023548 	.word	0x08023548
 8011424:	080233b4 	.word	0x080233b4
 8011428:	08023580 	.word	0x08023580
 801142c:	080235b0 	.word	0x080235b0

08011430 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801143a:	6839      	ldr	r1, [r7, #0]
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff ffa1 	bl	8011384 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011442:	6838      	ldr	r0, [r7, #0]
 8011444:	f7ff ff76 	bl	8011334 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011448:	bf00      	nop
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801145a:	2300      	movs	r3, #0
 801145c:	617b      	str	r3, [r7, #20]
 801145e:	2300      	movs	r3, #0
 8011460:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d008      	beq.n	801147a <pbuf_copy+0x2a>
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d005      	beq.n	801147a <pbuf_copy+0x2a>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	891a      	ldrh	r2, [r3, #8]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	891b      	ldrh	r3, [r3, #8]
 8011476:	429a      	cmp	r2, r3
 8011478:	d209      	bcs.n	801148e <pbuf_copy+0x3e>
 801147a:	4b57      	ldr	r3, [pc, #348]	@ (80115d8 <pbuf_copy+0x188>)
 801147c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011480:	4956      	ldr	r1, [pc, #344]	@ (80115dc <pbuf_copy+0x18c>)
 8011482:	4857      	ldr	r0, [pc, #348]	@ (80115e0 <pbuf_copy+0x190>)
 8011484:	f00c ff98 	bl	801e3b8 <iprintf>
 8011488:	f06f 030f 	mvn.w	r3, #15
 801148c:	e09f      	b.n	80115ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	895b      	ldrh	r3, [r3, #10]
 8011492:	461a      	mov	r2, r3
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	1ad2      	subs	r2, r2, r3
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	895b      	ldrh	r3, [r3, #10]
 801149c:	4619      	mov	r1, r3
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	1acb      	subs	r3, r1, r3
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d306      	bcc.n	80114b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	895b      	ldrh	r3, [r3, #10]
 80114aa:	461a      	mov	r2, r3
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	1ad3      	subs	r3, r2, r3
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	e005      	b.n	80114c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	895b      	ldrh	r3, [r3, #10]
 80114b8:	461a      	mov	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	685a      	ldr	r2, [r3, #4]
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	18d0      	adds	r0, r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	685a      	ldr	r2, [r3, #4]
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	4413      	add	r3, r2
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	4619      	mov	r1, r3
 80114d4:	f00d f911 	bl	801e6fa <memcpy>
    offset_to += len;
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4413      	add	r3, r2
 80114de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	4413      	add	r3, r2
 80114e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	895b      	ldrh	r3, [r3, #10]
 80114ec:	461a      	mov	r2, r3
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d906      	bls.n	8011502 <pbuf_copy+0xb2>
 80114f4:	4b38      	ldr	r3, [pc, #224]	@ (80115d8 <pbuf_copy+0x188>)
 80114f6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80114fa:	493a      	ldr	r1, [pc, #232]	@ (80115e4 <pbuf_copy+0x194>)
 80114fc:	4838      	ldr	r0, [pc, #224]	@ (80115e0 <pbuf_copy+0x190>)
 80114fe:	f00c ff5b 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	895b      	ldrh	r3, [r3, #10]
 8011506:	461a      	mov	r2, r3
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	4293      	cmp	r3, r2
 801150c:	d906      	bls.n	801151c <pbuf_copy+0xcc>
 801150e:	4b32      	ldr	r3, [pc, #200]	@ (80115d8 <pbuf_copy+0x188>)
 8011510:	f240 32da 	movw	r2, #986	@ 0x3da
 8011514:	4934      	ldr	r1, [pc, #208]	@ (80115e8 <pbuf_copy+0x198>)
 8011516:	4832      	ldr	r0, [pc, #200]	@ (80115e0 <pbuf_copy+0x190>)
 8011518:	f00c ff4e 	bl	801e3b8 <iprintf>
    if (offset_from >= p_from->len) {
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	461a      	mov	r2, r3
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	4293      	cmp	r3, r2
 8011526:	d304      	bcc.n	8011532 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011528:	2300      	movs	r3, #0
 801152a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	895b      	ldrh	r3, [r3, #10]
 8011536:	461a      	mov	r2, r3
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	4293      	cmp	r3, r2
 801153c:	d114      	bne.n	8011568 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801153e:	2300      	movs	r3, #0
 8011540:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10c      	bne.n	8011568 <pbuf_copy+0x118>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d009      	beq.n	8011568 <pbuf_copy+0x118>
 8011554:	4b20      	ldr	r3, [pc, #128]	@ (80115d8 <pbuf_copy+0x188>)
 8011556:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801155a:	4924      	ldr	r1, [pc, #144]	@ (80115ec <pbuf_copy+0x19c>)
 801155c:	4820      	ldr	r0, [pc, #128]	@ (80115e0 <pbuf_copy+0x190>)
 801155e:	f00c ff2b 	bl	801e3b8 <iprintf>
 8011562:	f06f 030f 	mvn.w	r3, #15
 8011566:	e032      	b.n	80115ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d013      	beq.n	8011596 <pbuf_copy+0x146>
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	895a      	ldrh	r2, [r3, #10]
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	891b      	ldrh	r3, [r3, #8]
 8011576:	429a      	cmp	r2, r3
 8011578:	d10d      	bne.n	8011596 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d009      	beq.n	8011596 <pbuf_copy+0x146>
 8011582:	4b15      	ldr	r3, [pc, #84]	@ (80115d8 <pbuf_copy+0x188>)
 8011584:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011588:	4919      	ldr	r1, [pc, #100]	@ (80115f0 <pbuf_copy+0x1a0>)
 801158a:	4815      	ldr	r0, [pc, #84]	@ (80115e0 <pbuf_copy+0x190>)
 801158c:	f00c ff14 	bl	801e3b8 <iprintf>
 8011590:	f06f 0305 	mvn.w	r3, #5
 8011594:	e01b      	b.n	80115ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d013      	beq.n	80115c4 <pbuf_copy+0x174>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	895a      	ldrh	r2, [r3, #10]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	891b      	ldrh	r3, [r3, #8]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d10d      	bne.n	80115c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d009      	beq.n	80115c4 <pbuf_copy+0x174>
 80115b0:	4b09      	ldr	r3, [pc, #36]	@ (80115d8 <pbuf_copy+0x188>)
 80115b2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80115b6:	490e      	ldr	r1, [pc, #56]	@ (80115f0 <pbuf_copy+0x1a0>)
 80115b8:	4809      	ldr	r0, [pc, #36]	@ (80115e0 <pbuf_copy+0x190>)
 80115ba:	f00c fefd 	bl	801e3b8 <iprintf>
 80115be:	f06f 0305 	mvn.w	r3, #5
 80115c2:	e004      	b.n	80115ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f47f af61 	bne.w	801148e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3718      	adds	r7, #24
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	08023354 	.word	0x08023354
 80115dc:	080235fc 	.word	0x080235fc
 80115e0:	080233b4 	.word	0x080233b4
 80115e4:	0802362c 	.word	0x0802362c
 80115e8:	08023644 	.word	0x08023644
 80115ec:	08023660 	.word	0x08023660
 80115f0:	08023670 	.word	0x08023670

080115f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b088      	sub	sp, #32
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	4611      	mov	r1, r2
 8011600:	461a      	mov	r2, r3
 8011602:	460b      	mov	r3, r1
 8011604:	80fb      	strh	r3, [r7, #6]
 8011606:	4613      	mov	r3, r2
 8011608:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801160e:	2300      	movs	r3, #0
 8011610:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d108      	bne.n	801162a <pbuf_copy_partial+0x36>
 8011618:	4b2b      	ldr	r3, [pc, #172]	@ (80116c8 <pbuf_copy_partial+0xd4>)
 801161a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801161e:	492b      	ldr	r1, [pc, #172]	@ (80116cc <pbuf_copy_partial+0xd8>)
 8011620:	482b      	ldr	r0, [pc, #172]	@ (80116d0 <pbuf_copy_partial+0xdc>)
 8011622:	f00c fec9 	bl	801e3b8 <iprintf>
 8011626:	2300      	movs	r3, #0
 8011628:	e04a      	b.n	80116c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d108      	bne.n	8011642 <pbuf_copy_partial+0x4e>
 8011630:	4b25      	ldr	r3, [pc, #148]	@ (80116c8 <pbuf_copy_partial+0xd4>)
 8011632:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011636:	4927      	ldr	r1, [pc, #156]	@ (80116d4 <pbuf_copy_partial+0xe0>)
 8011638:	4825      	ldr	r0, [pc, #148]	@ (80116d0 <pbuf_copy_partial+0xdc>)
 801163a:	f00c febd 	bl	801e3b8 <iprintf>
 801163e:	2300      	movs	r3, #0
 8011640:	e03e      	b.n	80116c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	61fb      	str	r3, [r7, #28]
 8011646:	e034      	b.n	80116b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011648:	88bb      	ldrh	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d00a      	beq.n	8011664 <pbuf_copy_partial+0x70>
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	895b      	ldrh	r3, [r3, #10]
 8011652:	88ba      	ldrh	r2, [r7, #4]
 8011654:	429a      	cmp	r2, r3
 8011656:	d305      	bcc.n	8011664 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	895b      	ldrh	r3, [r3, #10]
 801165c:	88ba      	ldrh	r2, [r7, #4]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	80bb      	strh	r3, [r7, #4]
 8011662:	e023      	b.n	80116ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	895a      	ldrh	r2, [r3, #10]
 8011668:	88bb      	ldrh	r3, [r7, #4]
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801166e:	8b3a      	ldrh	r2, [r7, #24]
 8011670:	88fb      	ldrh	r3, [r7, #6]
 8011672:	429a      	cmp	r2, r3
 8011674:	d901      	bls.n	801167a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011676:	88fb      	ldrh	r3, [r7, #6]
 8011678:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801167a:	8b7b      	ldrh	r3, [r7, #26]
 801167c:	68ba      	ldr	r2, [r7, #8]
 801167e:	18d0      	adds	r0, r2, r3
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	685a      	ldr	r2, [r3, #4]
 8011684:	88bb      	ldrh	r3, [r7, #4]
 8011686:	4413      	add	r3, r2
 8011688:	8b3a      	ldrh	r2, [r7, #24]
 801168a:	4619      	mov	r1, r3
 801168c:	f00d f835 	bl	801e6fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011690:	8afa      	ldrh	r2, [r7, #22]
 8011692:	8b3b      	ldrh	r3, [r7, #24]
 8011694:	4413      	add	r3, r2
 8011696:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011698:	8b7a      	ldrh	r2, [r7, #26]
 801169a:	8b3b      	ldrh	r3, [r7, #24]
 801169c:	4413      	add	r3, r2
 801169e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80116a0:	88fa      	ldrh	r2, [r7, #6]
 80116a2:	8b3b      	ldrh	r3, [r7, #24]
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80116a8:	2300      	movs	r3, #0
 80116aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	61fb      	str	r3, [r7, #28]
 80116b2:	88fb      	ldrh	r3, [r7, #6]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <pbuf_copy_partial+0xca>
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1c4      	bne.n	8011648 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80116be:	8afb      	ldrh	r3, [r7, #22]
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3720      	adds	r7, #32
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	08023354 	.word	0x08023354
 80116cc:	0802369c 	.word	0x0802369c
 80116d0:	080233b4 	.word	0x080233b4
 80116d4:	080236bc 	.word	0x080236bc

080116d8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80116d8:	b480      	push	{r7}
 80116da:	b087      	sub	sp, #28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	460b      	mov	r3, r1
 80116e2:	607a      	str	r2, [r7, #4]
 80116e4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80116e6:	897b      	ldrh	r3, [r7, #10]
 80116e8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80116ee:	e007      	b.n	8011700 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	895b      	ldrh	r3, [r3, #10]
 80116f4:	8afa      	ldrh	r2, [r7, #22]
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d004      	beq.n	8011710 <pbuf_skip_const+0x38>
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	895b      	ldrh	r3, [r3, #10]
 801170a:	8afa      	ldrh	r2, [r7, #22]
 801170c:	429a      	cmp	r2, r3
 801170e:	d2ef      	bcs.n	80116f0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d002      	beq.n	801171c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8afa      	ldrh	r2, [r7, #22]
 801171a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801171c:	693b      	ldr	r3, [r7, #16]
}
 801171e:	4618      	mov	r0, r3
 8011720:	371c      	adds	r7, #28
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr

0801172a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801172a:	b580      	push	{r7, lr}
 801172c:	b086      	sub	sp, #24
 801172e:	af00      	add	r7, sp, #0
 8011730:	60f8      	str	r0, [r7, #12]
 8011732:	460b      	mov	r3, r1
 8011734:	607a      	str	r2, [r7, #4]
 8011736:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011738:	897b      	ldrh	r3, [r7, #10]
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	4619      	mov	r1, r3
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7ff ffca 	bl	80116d8 <pbuf_skip_const>
 8011744:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011746:	697b      	ldr	r3, [r7, #20]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b088      	sub	sp, #32
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	4613      	mov	r3, r2
 801175c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801175e:	88fb      	ldrh	r3, [r7, #6]
 8011760:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d109      	bne.n	8011780 <pbuf_take+0x30>
 801176c:	4b3a      	ldr	r3, [pc, #232]	@ (8011858 <pbuf_take+0x108>)
 801176e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8011772:	493a      	ldr	r1, [pc, #232]	@ (801185c <pbuf_take+0x10c>)
 8011774:	483a      	ldr	r0, [pc, #232]	@ (8011860 <pbuf_take+0x110>)
 8011776:	f00c fe1f 	bl	801e3b8 <iprintf>
 801177a:	f06f 030f 	mvn.w	r3, #15
 801177e:	e067      	b.n	8011850 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d109      	bne.n	801179a <pbuf_take+0x4a>
 8011786:	4b34      	ldr	r3, [pc, #208]	@ (8011858 <pbuf_take+0x108>)
 8011788:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801178c:	4935      	ldr	r1, [pc, #212]	@ (8011864 <pbuf_take+0x114>)
 801178e:	4834      	ldr	r0, [pc, #208]	@ (8011860 <pbuf_take+0x110>)
 8011790:	f00c fe12 	bl	801e3b8 <iprintf>
 8011794:	f06f 030f 	mvn.w	r3, #15
 8011798:	e05a      	b.n	8011850 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	891b      	ldrh	r3, [r3, #8]
 801179e:	88fa      	ldrh	r2, [r7, #6]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d909      	bls.n	80117b8 <pbuf_take+0x68>
 80117a4:	4b2c      	ldr	r3, [pc, #176]	@ (8011858 <pbuf_take+0x108>)
 80117a6:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80117aa:	492f      	ldr	r1, [pc, #188]	@ (8011868 <pbuf_take+0x118>)
 80117ac:	482c      	ldr	r0, [pc, #176]	@ (8011860 <pbuf_take+0x110>)
 80117ae:	f00c fe03 	bl	801e3b8 <iprintf>
 80117b2:	f04f 33ff 	mov.w	r3, #4294967295
 80117b6:	e04b      	b.n	8011850 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d007      	beq.n	80117ce <pbuf_take+0x7e>
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d004      	beq.n	80117ce <pbuf_take+0x7e>
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	891b      	ldrh	r3, [r3, #8]
 80117c8:	88fa      	ldrh	r2, [r7, #6]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d902      	bls.n	80117d4 <pbuf_take+0x84>
    return ERR_ARG;
 80117ce:	f06f 030f 	mvn.w	r3, #15
 80117d2:	e03d      	b.n	8011850 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	61fb      	str	r3, [r7, #28]
 80117d8:	e028      	b.n	801182c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d106      	bne.n	80117ee <pbuf_take+0x9e>
 80117e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011858 <pbuf_take+0x108>)
 80117e2:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80117e6:	4921      	ldr	r1, [pc, #132]	@ (801186c <pbuf_take+0x11c>)
 80117e8:	481d      	ldr	r0, [pc, #116]	@ (8011860 <pbuf_take+0x110>)
 80117ea:	f00c fde5 	bl	801e3b8 <iprintf>
    buf_copy_len = total_copy_len;
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	895b      	ldrh	r3, [r3, #10]
 80117f6:	461a      	mov	r2, r3
 80117f8:	69bb      	ldr	r3, [r7, #24]
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d902      	bls.n	8011804 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	895b      	ldrh	r3, [r3, #10]
 8011802:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	6858      	ldr	r0, [r3, #4]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	4413      	add	r3, r2
 801180e:	69ba      	ldr	r2, [r7, #24]
 8011810:	4619      	mov	r1, r3
 8011812:	f00c ff72 	bl	801e6fa <memcpy>
    total_copy_len -= buf_copy_len;
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	69bb      	ldr	r3, [r7, #24]
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801181e:	693a      	ldr	r2, [r7, #16]
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	4413      	add	r3, r2
 8011824:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	61fb      	str	r3, [r7, #28]
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1d3      	bne.n	80117da <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d103      	bne.n	8011840 <pbuf_take+0xf0>
 8011838:	88fb      	ldrh	r3, [r7, #6]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	429a      	cmp	r2, r3
 801183e:	d006      	beq.n	801184e <pbuf_take+0xfe>
 8011840:	4b05      	ldr	r3, [pc, #20]	@ (8011858 <pbuf_take+0x108>)
 8011842:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8011846:	490a      	ldr	r1, [pc, #40]	@ (8011870 <pbuf_take+0x120>)
 8011848:	4805      	ldr	r0, [pc, #20]	@ (8011860 <pbuf_take+0x110>)
 801184a:	f00c fdb5 	bl	801e3b8 <iprintf>
  return ERR_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	08023354 	.word	0x08023354
 801185c:	0802372c 	.word	0x0802372c
 8011860:	080233b4 	.word	0x080233b4
 8011864:	08023744 	.word	0x08023744
 8011868:	08023760 	.word	0x08023760
 801186c:	08023780 	.word	0x08023780
 8011870:	08023798 	.word	0x08023798

08011874 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b088      	sub	sp, #32
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	4611      	mov	r1, r2
 8011880:	461a      	mov	r2, r3
 8011882:	460b      	mov	r3, r1
 8011884:	80fb      	strh	r3, [r7, #6]
 8011886:	4613      	mov	r3, r2
 8011888:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801188a:	f107 0210 	add.w	r2, r7, #16
 801188e:	88bb      	ldrh	r3, [r7, #4]
 8011890:	4619      	mov	r1, r3
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f7ff ff49 	bl	801172a <pbuf_skip>
 8011898:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d047      	beq.n	8011930 <pbuf_take_at+0xbc>
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	891b      	ldrh	r3, [r3, #8]
 80118a4:	461a      	mov	r2, r3
 80118a6:	8a3b      	ldrh	r3, [r7, #16]
 80118a8:	4619      	mov	r1, r3
 80118aa:	88fb      	ldrh	r3, [r7, #6]
 80118ac:	440b      	add	r3, r1
 80118ae:	429a      	cmp	r2, r3
 80118b0:	db3e      	blt.n	8011930 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80118b2:	88fb      	ldrh	r3, [r7, #6]
 80118b4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	895a      	ldrh	r2, [r3, #10]
 80118be:	8a3b      	ldrh	r3, [r7, #16]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d806      	bhi.n	80118d2 <pbuf_take_at+0x5e>
 80118c4:	4b1d      	ldr	r3, [pc, #116]	@ (801193c <pbuf_take_at+0xc8>)
 80118c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80118ca:	491d      	ldr	r1, [pc, #116]	@ (8011940 <pbuf_take_at+0xcc>)
 80118cc:	481d      	ldr	r0, [pc, #116]	@ (8011944 <pbuf_take_at+0xd0>)
 80118ce:	f00c fd73 	bl	801e3b8 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	895b      	ldrh	r3, [r3, #10]
 80118d6:	461a      	mov	r2, r3
 80118d8:	8a3b      	ldrh	r3, [r7, #16]
 80118da:	1ad2      	subs	r2, r2, r3
 80118dc:	88fb      	ldrh	r3, [r7, #6]
 80118de:	429a      	cmp	r2, r3
 80118e0:	da05      	bge.n	80118ee <pbuf_take_at+0x7a>
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	895a      	ldrh	r2, [r3, #10]
 80118e6:	8a3b      	ldrh	r3, [r7, #16]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	e000      	b.n	80118f0 <pbuf_take_at+0x7c>
 80118ee:	88fb      	ldrh	r3, [r7, #6]
 80118f0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	8a3a      	ldrh	r2, [r7, #16]
 80118f8:	4413      	add	r3, r2
 80118fa:	8a7a      	ldrh	r2, [r7, #18]
 80118fc:	68b9      	ldr	r1, [r7, #8]
 80118fe:	4618      	mov	r0, r3
 8011900:	f00c fefb 	bl	801e6fa <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8011904:	8b7a      	ldrh	r2, [r7, #26]
 8011906:	8a7b      	ldrh	r3, [r7, #18]
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801190c:	8a7b      	ldrh	r3, [r7, #18]
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	4413      	add	r3, r2
 8011912:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011914:	8b7b      	ldrh	r3, [r7, #26]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d008      	beq.n	801192c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	8b7a      	ldrh	r2, [r7, #26]
 8011920:	6979      	ldr	r1, [r7, #20]
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff ff14 	bl	8011750 <pbuf_take>
 8011928:	4603      	mov	r3, r0
 801192a:	e003      	b.n	8011934 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801192c:	2300      	movs	r3, #0
 801192e:	e001      	b.n	8011934 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8011930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011934:	4618      	mov	r0, r3
 8011936:	3720      	adds	r7, #32
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	08023354 	.word	0x08023354
 8011940:	080237b0 	.word	0x080237b0
 8011944:	080233b4 	.word	0x080233b4

08011948 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	4603      	mov	r3, r0
 8011950:	603a      	str	r2, [r7, #0]
 8011952:	71fb      	strb	r3, [r7, #7]
 8011954:	460b      	mov	r3, r1
 8011956:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	8919      	ldrh	r1, [r3, #8]
 801195c:	88ba      	ldrh	r2, [r7, #4]
 801195e:	79fb      	ldrb	r3, [r7, #7]
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff f95d 	bl	8010c20 <pbuf_alloc>
 8011966:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d101      	bne.n	8011972 <pbuf_clone+0x2a>
    return NULL;
 801196e:	2300      	movs	r3, #0
 8011970:	e011      	b.n	8011996 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	68f8      	ldr	r0, [r7, #12]
 8011976:	f7ff fd6b 	bl	8011450 <pbuf_copy>
 801197a:	4603      	mov	r3, r0
 801197c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801197e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d006      	beq.n	8011994 <pbuf_clone+0x4c>
 8011986:	4b06      	ldr	r3, [pc, #24]	@ (80119a0 <pbuf_clone+0x58>)
 8011988:	f240 5224 	movw	r2, #1316	@ 0x524
 801198c:	4905      	ldr	r1, [pc, #20]	@ (80119a4 <pbuf_clone+0x5c>)
 801198e:	4806      	ldr	r0, [pc, #24]	@ (80119a8 <pbuf_clone+0x60>)
 8011990:	f00c fd12 	bl	801e3b8 <iprintf>
  return q;
 8011994:	68fb      	ldr	r3, [r7, #12]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	08023354 	.word	0x08023354
 80119a4:	080237c8 	.word	0x080237c8
 80119a8:	080233b4 	.word	0x080233b4

080119ac <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	460b      	mov	r3, r1
 80119b6:	807b      	strh	r3, [r7, #2]
 80119b8:	4613      	mov	r3, r2
 80119ba:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80119bc:	f107 020a 	add.w	r2, r7, #10
 80119c0:	887b      	ldrh	r3, [r7, #2]
 80119c2:	4619      	mov	r1, r3
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7ff feb0 	bl	801172a <pbuf_skip>
 80119ca:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <pbuf_put_at+0x3c>
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	895a      	ldrh	r2, [r3, #10]
 80119d6:	897b      	ldrh	r3, [r7, #10]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d905      	bls.n	80119e8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	897a      	ldrh	r2, [r7, #10]
 80119e2:	4413      	add	r3, r2
 80119e4:	787a      	ldrb	r2, [r7, #1]
 80119e6:	701a      	strb	r2, [r3, #0]
  }
}
 80119e8:	bf00      	nop
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80119f4:	f00b fbec 	bl	801d1d0 <rand>
 80119f8:	4603      	mov	r3, r0
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011a06:	b29a      	uxth	r2, r3
 8011a08:	4b01      	ldr	r3, [pc, #4]	@ (8011a10 <tcp_init+0x20>)
 8011a0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011a0c:	bf00      	nop
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	20000038 	.word	0x20000038

08011a14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	7d1b      	ldrb	r3, [r3, #20]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d105      	bne.n	8011a30 <tcp_free+0x1c>
 8011a24:	4b06      	ldr	r3, [pc, #24]	@ (8011a40 <tcp_free+0x2c>)
 8011a26:	22d4      	movs	r2, #212	@ 0xd4
 8011a28:	4906      	ldr	r1, [pc, #24]	@ (8011a44 <tcp_free+0x30>)
 8011a2a:	4807      	ldr	r0, [pc, #28]	@ (8011a48 <tcp_free+0x34>)
 8011a2c:	f00c fcc4 	bl	801e3b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011a30:	6879      	ldr	r1, [r7, #4]
 8011a32:	2001      	movs	r0, #1
 8011a34:	f7fe fd28 	bl	8010488 <memp_free>
}
 8011a38:	bf00      	nop
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	08023854 	.word	0x08023854
 8011a44:	08023884 	.word	0x08023884
 8011a48:	08023898 	.word	0x08023898

08011a4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7d1b      	ldrb	r3, [r3, #20]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d105      	bne.n	8011a68 <tcp_free_listen+0x1c>
 8011a5c:	4b06      	ldr	r3, [pc, #24]	@ (8011a78 <tcp_free_listen+0x2c>)
 8011a5e:	22df      	movs	r2, #223	@ 0xdf
 8011a60:	4906      	ldr	r1, [pc, #24]	@ (8011a7c <tcp_free_listen+0x30>)
 8011a62:	4807      	ldr	r0, [pc, #28]	@ (8011a80 <tcp_free_listen+0x34>)
 8011a64:	f00c fca8 	bl	801e3b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011a68:	6879      	ldr	r1, [r7, #4]
 8011a6a:	2002      	movs	r0, #2
 8011a6c:	f7fe fd0c 	bl	8010488 <memp_free>
}
 8011a70:	bf00      	nop
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	08023854 	.word	0x08023854
 8011a7c:	080238c0 	.word	0x080238c0
 8011a80:	08023898 	.word	0x08023898

08011a84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011a88:	f001 f85e 	bl	8012b48 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011a8c:	4b07      	ldr	r3, [pc, #28]	@ (8011aac <tcp_tmr+0x28>)
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	3301      	adds	r3, #1
 8011a92:	b2da      	uxtb	r2, r3
 8011a94:	4b05      	ldr	r3, [pc, #20]	@ (8011aac <tcp_tmr+0x28>)
 8011a96:	701a      	strb	r2, [r3, #0]
 8011a98:	4b04      	ldr	r3, [pc, #16]	@ (8011aac <tcp_tmr+0x28>)
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	f003 0301 	and.w	r3, r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d001      	beq.n	8011aa8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011aa4:	f000 fd0e 	bl	80124c4 <tcp_slowtmr>
  }
}
 8011aa8:	bf00      	nop
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	20012681 	.word	0x20012681

08011ab0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d105      	bne.n	8011acc <tcp_remove_listener+0x1c>
 8011ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8011af8 <tcp_remove_listener+0x48>)
 8011ac2:	22ff      	movs	r2, #255	@ 0xff
 8011ac4:	490d      	ldr	r1, [pc, #52]	@ (8011afc <tcp_remove_listener+0x4c>)
 8011ac6:	480e      	ldr	r0, [pc, #56]	@ (8011b00 <tcp_remove_listener+0x50>)
 8011ac8:	f00c fc76 	bl	801e3b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	60fb      	str	r3, [r7, #12]
 8011ad0:	e00a      	b.n	8011ae8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d102      	bne.n	8011ae2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1f1      	bne.n	8011ad2 <tcp_remove_listener+0x22>
    }
  }
}
 8011aee:	bf00      	nop
 8011af0:	bf00      	nop
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	08023854 	.word	0x08023854
 8011afc:	080238dc 	.word	0x080238dc
 8011b00:	08023898 	.word	0x08023898

08011b04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d106      	bne.n	8011b20 <tcp_listen_closed+0x1c>
 8011b12:	4b14      	ldr	r3, [pc, #80]	@ (8011b64 <tcp_listen_closed+0x60>)
 8011b14:	f240 1211 	movw	r2, #273	@ 0x111
 8011b18:	4913      	ldr	r1, [pc, #76]	@ (8011b68 <tcp_listen_closed+0x64>)
 8011b1a:	4814      	ldr	r0, [pc, #80]	@ (8011b6c <tcp_listen_closed+0x68>)
 8011b1c:	f00c fc4c 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	7d1b      	ldrb	r3, [r3, #20]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d006      	beq.n	8011b36 <tcp_listen_closed+0x32>
 8011b28:	4b0e      	ldr	r3, [pc, #56]	@ (8011b64 <tcp_listen_closed+0x60>)
 8011b2a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011b2e:	4910      	ldr	r1, [pc, #64]	@ (8011b70 <tcp_listen_closed+0x6c>)
 8011b30:	480e      	ldr	r0, [pc, #56]	@ (8011b6c <tcp_listen_closed+0x68>)
 8011b32:	f00c fc41 	bl	801e3b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b36:	2301      	movs	r3, #1
 8011b38:	60fb      	str	r3, [r7, #12]
 8011b3a:	e00b      	b.n	8011b54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8011b74 <tcp_listen_closed+0x70>)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	6879      	ldr	r1, [r7, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff ffb1 	bl	8011ab0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	3301      	adds	r3, #1
 8011b52:	60fb      	str	r3, [r7, #12]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b03      	cmp	r3, #3
 8011b58:	d9f0      	bls.n	8011b3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011b5a:	bf00      	nop
 8011b5c:	bf00      	nop
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	08023854 	.word	0x08023854
 8011b68:	08023904 	.word	0x08023904
 8011b6c:	08023898 	.word	0x08023898
 8011b70:	08023910 	.word	0x08023910
 8011b74:	08025ddc 	.word	0x08025ddc

08011b78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011b78:	b5b0      	push	{r4, r5, r7, lr}
 8011b7a:	b088      	sub	sp, #32
 8011b7c:	af04      	add	r7, sp, #16
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_close_shutdown+0x20>
 8011b8a:	4b63      	ldr	r3, [pc, #396]	@ (8011d18 <tcp_close_shutdown+0x1a0>)
 8011b8c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011b90:	4962      	ldr	r1, [pc, #392]	@ (8011d1c <tcp_close_shutdown+0x1a4>)
 8011b92:	4863      	ldr	r0, [pc, #396]	@ (8011d20 <tcp_close_shutdown+0x1a8>)
 8011b94:	f00c fc10 	bl	801e3b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011b98:	78fb      	ldrb	r3, [r7, #3]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d066      	beq.n	8011c6c <tcp_close_shutdown+0xf4>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7d1b      	ldrb	r3, [r3, #20]
 8011ba2:	2b04      	cmp	r3, #4
 8011ba4:	d003      	beq.n	8011bae <tcp_close_shutdown+0x36>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7d1b      	ldrb	r3, [r3, #20]
 8011baa:	2b07      	cmp	r3, #7
 8011bac:	d15e      	bne.n	8011c6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <tcp_close_shutdown+0x48>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011bbe:	d055      	beq.n	8011c6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	8b5b      	ldrh	r3, [r3, #26]
 8011bc4:	f003 0310 	and.w	r3, r3, #16
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d106      	bne.n	8011bda <tcp_close_shutdown+0x62>
 8011bcc:	4b52      	ldr	r3, [pc, #328]	@ (8011d18 <tcp_close_shutdown+0x1a0>)
 8011bce:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011bd2:	4954      	ldr	r1, [pc, #336]	@ (8011d24 <tcp_close_shutdown+0x1ac>)
 8011bd4:	4852      	ldr	r0, [pc, #328]	@ (8011d20 <tcp_close_shutdown+0x1a8>)
 8011bd6:	f00c fbef 	bl	801e3b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011be2:	687d      	ldr	r5, [r7, #4]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	3304      	adds	r3, #4
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	8ad2      	ldrh	r2, [r2, #22]
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	8b09      	ldrh	r1, [r1, #24]
 8011bf0:	9102      	str	r1, [sp, #8]
 8011bf2:	9201      	str	r2, [sp, #4]
 8011bf4:	9300      	str	r3, [sp, #0]
 8011bf6:	462b      	mov	r3, r5
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	4601      	mov	r1, r0
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f005 fd6d 	bl	80176dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f001 fb50 	bl	80132a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011c08:	4b47      	ldr	r3, [pc, #284]	@ (8011d28 <tcp_close_shutdown+0x1b0>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d105      	bne.n	8011c1e <tcp_close_shutdown+0xa6>
 8011c12:	4b45      	ldr	r3, [pc, #276]	@ (8011d28 <tcp_close_shutdown+0x1b0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	4a43      	ldr	r2, [pc, #268]	@ (8011d28 <tcp_close_shutdown+0x1b0>)
 8011c1a:	6013      	str	r3, [r2, #0]
 8011c1c:	e013      	b.n	8011c46 <tcp_close_shutdown+0xce>
 8011c1e:	4b42      	ldr	r3, [pc, #264]	@ (8011d28 <tcp_close_shutdown+0x1b0>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e00c      	b.n	8011c40 <tcp_close_shutdown+0xc8>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d104      	bne.n	8011c3a <tcp_close_shutdown+0xc2>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	68da      	ldr	r2, [r3, #12]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	60da      	str	r2, [r3, #12]
 8011c38:	e005      	b.n	8011c46 <tcp_close_shutdown+0xce>
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1ef      	bne.n	8011c26 <tcp_close_shutdown+0xae>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	60da      	str	r2, [r3, #12]
 8011c4c:	4b37      	ldr	r3, [pc, #220]	@ (8011d2c <tcp_close_shutdown+0x1b4>)
 8011c4e:	2201      	movs	r2, #1
 8011c50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011c52:	4b37      	ldr	r3, [pc, #220]	@ (8011d30 <tcp_close_shutdown+0x1b8>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d102      	bne.n	8011c62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011c5c:	f003 ffe4 	bl	8015c28 <tcp_trigger_input_pcb_close>
 8011c60:	e002      	b.n	8011c68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f7ff fed6 	bl	8011a14 <tcp_free>
      }
      return ERR_OK;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e050      	b.n	8011d0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	7d1b      	ldrb	r3, [r3, #20]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d03b      	beq.n	8011cec <tcp_close_shutdown+0x174>
 8011c74:	2b02      	cmp	r3, #2
 8011c76:	dc44      	bgt.n	8011d02 <tcp_close_shutdown+0x18a>
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <tcp_close_shutdown+0x10a>
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d02a      	beq.n	8011cd6 <tcp_close_shutdown+0x15e>
 8011c80:	e03f      	b.n	8011d02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	8adb      	ldrh	r3, [r3, #22]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d021      	beq.n	8011cce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8011d34 <tcp_close_shutdown+0x1bc>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d105      	bne.n	8011ca0 <tcp_close_shutdown+0x128>
 8011c94:	4b27      	ldr	r3, [pc, #156]	@ (8011d34 <tcp_close_shutdown+0x1bc>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	4a26      	ldr	r2, [pc, #152]	@ (8011d34 <tcp_close_shutdown+0x1bc>)
 8011c9c:	6013      	str	r3, [r2, #0]
 8011c9e:	e013      	b.n	8011cc8 <tcp_close_shutdown+0x150>
 8011ca0:	4b24      	ldr	r3, [pc, #144]	@ (8011d34 <tcp_close_shutdown+0x1bc>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60bb      	str	r3, [r7, #8]
 8011ca6:	e00c      	b.n	8011cc2 <tcp_close_shutdown+0x14a>
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d104      	bne.n	8011cbc <tcp_close_shutdown+0x144>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	68da      	ldr	r2, [r3, #12]
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	60da      	str	r2, [r3, #12]
 8011cba:	e005      	b.n	8011cc8 <tcp_close_shutdown+0x150>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	60bb      	str	r3, [r7, #8]
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d1ef      	bne.n	8011ca8 <tcp_close_shutdown+0x130>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ff fea0 	bl	8011a14 <tcp_free>
      break;
 8011cd4:	e01a      	b.n	8011d0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7ff ff14 	bl	8011b04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	4816      	ldr	r0, [pc, #88]	@ (8011d38 <tcp_close_shutdown+0x1c0>)
 8011ce0:	f001 fb32 	bl	8013348 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff feb1 	bl	8011a4c <tcp_free_listen>
      break;
 8011cea:	e00f      	b.n	8011d0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011cec:	6879      	ldr	r1, [r7, #4]
 8011cee:	480e      	ldr	r0, [pc, #56]	@ (8011d28 <tcp_close_shutdown+0x1b0>)
 8011cf0:	f001 fb2a 	bl	8013348 <tcp_pcb_remove>
 8011cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8011d2c <tcp_close_shutdown+0x1b4>)
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff fe8a 	bl	8011a14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011d00:	e004      	b.n	8011d0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 f81a 	bl	8011d3c <tcp_close_shutdown_fin>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	e000      	b.n	8011d0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011d0c:	2300      	movs	r3, #0
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bdb0      	pop	{r4, r5, r7, pc}
 8011d16:	bf00      	nop
 8011d18:	08023854 	.word	0x08023854
 8011d1c:	08023928 	.word	0x08023928
 8011d20:	08023898 	.word	0x08023898
 8011d24:	08023948 	.word	0x08023948
 8011d28:	20012678 	.word	0x20012678
 8011d2c:	20012680 	.word	0x20012680
 8011d30:	200126b8 	.word	0x200126b8
 8011d34:	20012670 	.word	0x20012670
 8011d38:	20012674 	.word	0x20012674

08011d3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <tcp_close_shutdown_fin+0x1c>
 8011d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8011e04 <tcp_close_shutdown_fin+0xc8>)
 8011d4c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011d50:	492d      	ldr	r1, [pc, #180]	@ (8011e08 <tcp_close_shutdown_fin+0xcc>)
 8011d52:	482e      	ldr	r0, [pc, #184]	@ (8011e0c <tcp_close_shutdown_fin+0xd0>)
 8011d54:	f00c fb30 	bl	801e3b8 <iprintf>

  switch (pcb->state) {
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7d1b      	ldrb	r3, [r3, #20]
 8011d5c:	2b07      	cmp	r3, #7
 8011d5e:	d020      	beq.n	8011da2 <tcp_close_shutdown_fin+0x66>
 8011d60:	2b07      	cmp	r3, #7
 8011d62:	dc2b      	bgt.n	8011dbc <tcp_close_shutdown_fin+0x80>
 8011d64:	2b03      	cmp	r3, #3
 8011d66:	d002      	beq.n	8011d6e <tcp_close_shutdown_fin+0x32>
 8011d68:	2b04      	cmp	r3, #4
 8011d6a:	d00d      	beq.n	8011d88 <tcp_close_shutdown_fin+0x4c>
 8011d6c:	e026      	b.n	8011dbc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f004 fdc2 	bl	80168f8 <tcp_send_fin>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d11f      	bne.n	8011dc0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2205      	movs	r2, #5
 8011d84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d86:	e01b      	b.n	8011dc0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f004 fdb5 	bl	80168f8 <tcp_send_fin>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d114      	bne.n	8011dc4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2205      	movs	r2, #5
 8011d9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011da0:	e010      	b.n	8011dc4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f004 fda8 	bl	80168f8 <tcp_send_fin>
 8011da8:	4603      	mov	r3, r0
 8011daa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d109      	bne.n	8011dc8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2209      	movs	r2, #9
 8011db8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011dba:	e005      	b.n	8011dc8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	e01c      	b.n	8011dfa <tcp_close_shutdown_fin+0xbe>
      break;
 8011dc0:	bf00      	nop
 8011dc2:	e002      	b.n	8011dca <tcp_close_shutdown_fin+0x8e>
      break;
 8011dc4:	bf00      	nop
 8011dc6:	e000      	b.n	8011dca <tcp_close_shutdown_fin+0x8e>
      break;
 8011dc8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d103      	bne.n	8011dda <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f004 fece 	bl	8016b74 <tcp_output>
 8011dd8:	e00d      	b.n	8011df6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de2:	d108      	bne.n	8011df6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	8b5b      	ldrh	r3, [r3, #26]
 8011de8:	f043 0308 	orr.w	r3, r3, #8
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011df2:	2300      	movs	r3, #0
 8011df4:	e001      	b.n	8011dfa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3710      	adds	r7, #16
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	08023854 	.word	0x08023854
 8011e08:	08023904 	.word	0x08023904
 8011e0c:	08023898 	.word	0x08023898

08011e10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d109      	bne.n	8011e32 <tcp_close+0x22>
 8011e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e5c <tcp_close+0x4c>)
 8011e20:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011e24:	490e      	ldr	r1, [pc, #56]	@ (8011e60 <tcp_close+0x50>)
 8011e26:	480f      	ldr	r0, [pc, #60]	@ (8011e64 <tcp_close+0x54>)
 8011e28:	f00c fac6 	bl	801e3b8 <iprintf>
 8011e2c:	f06f 030f 	mvn.w	r3, #15
 8011e30:	e00f      	b.n	8011e52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	7d1b      	ldrb	r3, [r3, #20]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d006      	beq.n	8011e48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	8b5b      	ldrh	r3, [r3, #26]
 8011e3e:	f043 0310 	orr.w	r3, r3, #16
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011e48:	2101      	movs	r1, #1
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7ff fe94 	bl	8011b78 <tcp_close_shutdown>
 8011e50:	4603      	mov	r3, r0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	08023854 	.word	0x08023854
 8011e60:	08023964 	.word	0x08023964
 8011e64:	08023898 	.word	0x08023898

08011e68 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d109      	bne.n	8011e8e <tcp_shutdown+0x26>
 8011e7a:	4b26      	ldr	r3, [pc, #152]	@ (8011f14 <tcp_shutdown+0xac>)
 8011e7c:	f240 2207 	movw	r2, #519	@ 0x207
 8011e80:	4925      	ldr	r1, [pc, #148]	@ (8011f18 <tcp_shutdown+0xb0>)
 8011e82:	4826      	ldr	r0, [pc, #152]	@ (8011f1c <tcp_shutdown+0xb4>)
 8011e84:	f00c fa98 	bl	801e3b8 <iprintf>
 8011e88:	f06f 030f 	mvn.w	r3, #15
 8011e8c:	e03d      	b.n	8011f0a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	7d1b      	ldrb	r3, [r3, #20]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d102      	bne.n	8011e9c <tcp_shutdown+0x34>
    return ERR_CONN;
 8011e96:	f06f 030a 	mvn.w	r3, #10
 8011e9a:	e036      	b.n	8011f0a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d01b      	beq.n	8011eda <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	8b5b      	ldrh	r3, [r3, #26]
 8011ea6:	f043 0310 	orr.w	r3, r3, #16
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d005      	beq.n	8011ec2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7ff fe5d 	bl	8011b78 <tcp_close_shutdown>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	e023      	b.n	8011f0a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d007      	beq.n	8011eda <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7ff f98a 	bl	80111e8 <pbuf_free>
      pcb->refused_data = NULL;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d013      	beq.n	8011f08 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	7d1b      	ldrb	r3, [r3, #20]
 8011ee4:	2b04      	cmp	r3, #4
 8011ee6:	dc02      	bgt.n	8011eee <tcp_shutdown+0x86>
 8011ee8:	2b03      	cmp	r3, #3
 8011eea:	da02      	bge.n	8011ef2 <tcp_shutdown+0x8a>
 8011eec:	e009      	b.n	8011f02 <tcp_shutdown+0x9a>
 8011eee:	2b07      	cmp	r3, #7
 8011ef0:	d107      	bne.n	8011f02 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f7ff fe3d 	bl	8011b78 <tcp_close_shutdown>
 8011efe:	4603      	mov	r3, r0
 8011f00:	e003      	b.n	8011f0a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011f02:	f06f 030a 	mvn.w	r3, #10
 8011f06:	e000      	b.n	8011f0a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011f08:	2300      	movs	r3, #0
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	08023854 	.word	0x08023854
 8011f18:	0802397c 	.word	0x0802397c
 8011f1c:	08023898 	.word	0x08023898

08011f20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b08e      	sub	sp, #56	@ 0x38
 8011f24:	af04      	add	r7, sp, #16
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d107      	bne.n	8011f40 <tcp_abandon+0x20>
 8011f30:	4b52      	ldr	r3, [pc, #328]	@ (801207c <tcp_abandon+0x15c>)
 8011f32:	f240 223d 	movw	r2, #573	@ 0x23d
 8011f36:	4952      	ldr	r1, [pc, #328]	@ (8012080 <tcp_abandon+0x160>)
 8011f38:	4852      	ldr	r0, [pc, #328]	@ (8012084 <tcp_abandon+0x164>)
 8011f3a:	f00c fa3d 	bl	801e3b8 <iprintf>
 8011f3e:	e099      	b.n	8012074 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	7d1b      	ldrb	r3, [r3, #20]
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d106      	bne.n	8011f56 <tcp_abandon+0x36>
 8011f48:	4b4c      	ldr	r3, [pc, #304]	@ (801207c <tcp_abandon+0x15c>)
 8011f4a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011f4e:	494e      	ldr	r1, [pc, #312]	@ (8012088 <tcp_abandon+0x168>)
 8011f50:	484c      	ldr	r0, [pc, #304]	@ (8012084 <tcp_abandon+0x164>)
 8011f52:	f00c fa31 	bl	801e3b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	7d1b      	ldrb	r3, [r3, #20]
 8011f5a:	2b0a      	cmp	r3, #10
 8011f5c:	d107      	bne.n	8011f6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	484a      	ldr	r0, [pc, #296]	@ (801208c <tcp_abandon+0x16c>)
 8011f62:	f001 f9f1 	bl	8013348 <tcp_pcb_remove>
    tcp_free(pcb);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7ff fd54 	bl	8011a14 <tcp_free>
 8011f6c:	e082      	b.n	8012074 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011f72:	2300      	movs	r3, #0
 8011f74:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	7d1b      	ldrb	r3, [r3, #20]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d126      	bne.n	8011fe6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	8adb      	ldrh	r3, [r3, #22]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d02e      	beq.n	8011ffe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8012090 <tcp_abandon+0x170>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d105      	bne.n	8011fb6 <tcp_abandon+0x96>
 8011faa:	4b39      	ldr	r3, [pc, #228]	@ (8012090 <tcp_abandon+0x170>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	4a37      	ldr	r2, [pc, #220]	@ (8012090 <tcp_abandon+0x170>)
 8011fb2:	6013      	str	r3, [r2, #0]
 8011fb4:	e013      	b.n	8011fde <tcp_abandon+0xbe>
 8011fb6:	4b36      	ldr	r3, [pc, #216]	@ (8012090 <tcp_abandon+0x170>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	61fb      	str	r3, [r7, #28]
 8011fbc:	e00c      	b.n	8011fd8 <tcp_abandon+0xb8>
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d104      	bne.n	8011fd2 <tcp_abandon+0xb2>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	68da      	ldr	r2, [r3, #12]
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	60da      	str	r2, [r3, #12]
 8011fd0:	e005      	b.n	8011fde <tcp_abandon+0xbe>
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	61fb      	str	r3, [r7, #28]
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d1ef      	bne.n	8011fbe <tcp_abandon+0x9e>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	60da      	str	r2, [r3, #12]
 8011fe4:	e00b      	b.n	8011ffe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8adb      	ldrh	r3, [r3, #22]
 8011fee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011ff0:	6879      	ldr	r1, [r7, #4]
 8011ff2:	4828      	ldr	r0, [pc, #160]	@ (8012094 <tcp_abandon+0x174>)
 8011ff4:	f001 f9a8 	bl	8013348 <tcp_pcb_remove>
 8011ff8:	4b27      	ldr	r3, [pc, #156]	@ (8012098 <tcp_abandon+0x178>)
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012002:	2b00      	cmp	r3, #0
 8012004:	d004      	beq.n	8012010 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801200a:	4618      	mov	r0, r3
 801200c:	f000 fe7c 	bl	8012d08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801201c:	4618      	mov	r0, r3
 801201e:	f000 fe73 	bl	8012d08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012026:	2b00      	cmp	r3, #0
 8012028:	d004      	beq.n	8012034 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801202e:	4618      	mov	r0, r3
 8012030:	f000 fe6a 	bl	8012d08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00e      	beq.n	8012058 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801203a:	6879      	ldr	r1, [r7, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	3304      	adds	r3, #4
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	8b12      	ldrh	r2, [r2, #24]
 8012044:	9202      	str	r2, [sp, #8]
 8012046:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012048:	9201      	str	r2, [sp, #4]
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	460b      	mov	r3, r1
 801204e:	697a      	ldr	r2, [r7, #20]
 8012050:	69b9      	ldr	r1, [r7, #24]
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f005 fb42 	bl	80176dc <tcp_rst>
    }
    last_state = pcb->state;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	7d1b      	ldrb	r3, [r3, #20]
 801205c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7ff fcd8 	bl	8011a14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d004      	beq.n	8012074 <tcp_abandon+0x154>
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	f06f 010c 	mvn.w	r1, #12
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	4798      	blx	r3
  }
}
 8012074:	3728      	adds	r7, #40	@ 0x28
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	08023854 	.word	0x08023854
 8012080:	08023998 	.word	0x08023998
 8012084:	08023898 	.word	0x08023898
 8012088:	080239b4 	.word	0x080239b4
 801208c:	2001267c 	.word	0x2001267c
 8012090:	20012670 	.word	0x20012670
 8012094:	20012678 	.word	0x20012678
 8012098:	20012680 	.word	0x20012680

0801209c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80120a4:	2101      	movs	r1, #1
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7ff ff3a 	bl	8011f20 <tcp_abandon>
}
 80120ac:	bf00      	nop
 80120ae:	3708      	adds	r7, #8
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d106      	bne.n	80120d0 <tcp_update_rcv_ann_wnd+0x1c>
 80120c2:	4b25      	ldr	r3, [pc, #148]	@ (8012158 <tcp_update_rcv_ann_wnd+0xa4>)
 80120c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80120c8:	4924      	ldr	r1, [pc, #144]	@ (801215c <tcp_update_rcv_ann_wnd+0xa8>)
 80120ca:	4825      	ldr	r0, [pc, #148]	@ (8012160 <tcp_update_rcv_ann_wnd+0xac>)
 80120cc:	f00c f974 	bl	801e3b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80120d8:	4413      	add	r3, r2
 80120da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80120e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80120e8:	bf28      	it	cs
 80120ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80120ee:	b292      	uxth	r2, r2
 80120f0:	4413      	add	r3, r2
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	db08      	blt.n	801210c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	e020      	b.n	801214e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	dd03      	ble.n	8012122 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012120:	e014      	b.n	801214c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801212a:	1ad3      	subs	r3, r2, r3
 801212c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012134:	d306      	bcc.n	8012144 <tcp_update_rcv_ann_wnd+0x90>
 8012136:	4b08      	ldr	r3, [pc, #32]	@ (8012158 <tcp_update_rcv_ann_wnd+0xa4>)
 8012138:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801213c:	4909      	ldr	r1, [pc, #36]	@ (8012164 <tcp_update_rcv_ann_wnd+0xb0>)
 801213e:	4808      	ldr	r0, [pc, #32]	@ (8012160 <tcp_update_rcv_ann_wnd+0xac>)
 8012140:	f00c f93a 	bl	801e3b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	b29a      	uxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801214c:	2300      	movs	r3, #0
  }
}
 801214e:	4618      	mov	r0, r3
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	08023854 	.word	0x08023854
 801215c:	08023ab0 	.word	0x08023ab0
 8012160:	08023898 	.word	0x08023898
 8012164:	08023ad4 	.word	0x08023ad4

08012168 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	460b      	mov	r3, r1
 8012172:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d107      	bne.n	801218a <tcp_recved+0x22>
 801217a:	4b1f      	ldr	r3, [pc, #124]	@ (80121f8 <tcp_recved+0x90>)
 801217c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012180:	491e      	ldr	r1, [pc, #120]	@ (80121fc <tcp_recved+0x94>)
 8012182:	481f      	ldr	r0, [pc, #124]	@ (8012200 <tcp_recved+0x98>)
 8012184:	f00c f918 	bl	801e3b8 <iprintf>
 8012188:	e032      	b.n	80121f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	7d1b      	ldrb	r3, [r3, #20]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d106      	bne.n	80121a0 <tcp_recved+0x38>
 8012192:	4b19      	ldr	r3, [pc, #100]	@ (80121f8 <tcp_recved+0x90>)
 8012194:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012198:	491a      	ldr	r1, [pc, #104]	@ (8012204 <tcp_recved+0x9c>)
 801219a:	4819      	ldr	r0, [pc, #100]	@ (8012200 <tcp_recved+0x98>)
 801219c:	f00c f90c 	bl	801e3b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80121a4:	887b      	ldrh	r3, [r7, #2]
 80121a6:	4413      	add	r3, r2
 80121a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80121aa:	89fb      	ldrh	r3, [r7, #14]
 80121ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80121b0:	d804      	bhi.n	80121bc <tcp_recved+0x54>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121b6:	89fa      	ldrh	r2, [r7, #14]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d204      	bcs.n	80121c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80121c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80121c4:	e002      	b.n	80121cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	89fa      	ldrh	r2, [r7, #14]
 80121ca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7ff ff71 	bl	80120b4 <tcp_update_rcv_ann_wnd>
 80121d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80121da:	d309      	bcc.n	80121f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	8b5b      	ldrh	r3, [r3, #26]
 80121e0:	f043 0302 	orr.w	r3, r3, #2
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f004 fcc2 	bl	8016b74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08023854 	.word	0x08023854
 80121fc:	08023af0 	.word	0x08023af0
 8012200:	08023898 	.word	0x08023898
 8012204:	08023b08 	.word	0x08023b08

08012208 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012212:	4b1e      	ldr	r3, [pc, #120]	@ (801228c <tcp_new_port+0x84>)
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	3301      	adds	r3, #1
 8012218:	b29a      	uxth	r2, r3
 801221a:	4b1c      	ldr	r3, [pc, #112]	@ (801228c <tcp_new_port+0x84>)
 801221c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801221e:	4b1b      	ldr	r3, [pc, #108]	@ (801228c <tcp_new_port+0x84>)
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012226:	4293      	cmp	r3, r2
 8012228:	d103      	bne.n	8012232 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801222a:	4b18      	ldr	r3, [pc, #96]	@ (801228c <tcp_new_port+0x84>)
 801222c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012232:	2300      	movs	r3, #0
 8012234:	71fb      	strb	r3, [r7, #7]
 8012236:	e01e      	b.n	8012276 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012238:	79fb      	ldrb	r3, [r7, #7]
 801223a:	4a15      	ldr	r2, [pc, #84]	@ (8012290 <tcp_new_port+0x88>)
 801223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	603b      	str	r3, [r7, #0]
 8012244:	e011      	b.n	801226a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	8ada      	ldrh	r2, [r3, #22]
 801224a:	4b10      	ldr	r3, [pc, #64]	@ (801228c <tcp_new_port+0x84>)
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	429a      	cmp	r2, r3
 8012250:	d108      	bne.n	8012264 <tcp_new_port+0x5c>
        n++;
 8012252:	88bb      	ldrh	r3, [r7, #4]
 8012254:	3301      	adds	r3, #1
 8012256:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012258:	88bb      	ldrh	r3, [r7, #4]
 801225a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801225e:	d3d8      	bcc.n	8012212 <tcp_new_port+0xa>
          return 0;
 8012260:	2300      	movs	r3, #0
 8012262:	e00d      	b.n	8012280 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	603b      	str	r3, [r7, #0]
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1ea      	bne.n	8012246 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012270:	79fb      	ldrb	r3, [r7, #7]
 8012272:	3301      	adds	r3, #1
 8012274:	71fb      	strb	r3, [r7, #7]
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	2b03      	cmp	r3, #3
 801227a:	d9dd      	bls.n	8012238 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801227c:	4b03      	ldr	r3, [pc, #12]	@ (801228c <tcp_new_port+0x84>)
 801227e:	881b      	ldrh	r3, [r3, #0]
}
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr
 801228c:	20000038 	.word	0x20000038
 8012290:	08025ddc 	.word	0x08025ddc

08012294 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08a      	sub	sp, #40	@ 0x28
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	4613      	mov	r3, r2
 80122a2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80122a4:	2300      	movs	r3, #0
 80122a6:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d109      	bne.n	80122c2 <tcp_connect+0x2e>
 80122ae:	4b7d      	ldr	r3, [pc, #500]	@ (80124a4 <tcp_connect+0x210>)
 80122b0:	f240 4235 	movw	r2, #1077	@ 0x435
 80122b4:	497c      	ldr	r1, [pc, #496]	@ (80124a8 <tcp_connect+0x214>)
 80122b6:	487d      	ldr	r0, [pc, #500]	@ (80124ac <tcp_connect+0x218>)
 80122b8:	f00c f87e 	bl	801e3b8 <iprintf>
 80122bc:	f06f 030f 	mvn.w	r3, #15
 80122c0:	e0ec      	b.n	801249c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d109      	bne.n	80122dc <tcp_connect+0x48>
 80122c8:	4b76      	ldr	r3, [pc, #472]	@ (80124a4 <tcp_connect+0x210>)
 80122ca:	f240 4236 	movw	r2, #1078	@ 0x436
 80122ce:	4978      	ldr	r1, [pc, #480]	@ (80124b0 <tcp_connect+0x21c>)
 80122d0:	4876      	ldr	r0, [pc, #472]	@ (80124ac <tcp_connect+0x218>)
 80122d2:	f00c f871 	bl	801e3b8 <iprintf>
 80122d6:	f06f 030f 	mvn.w	r3, #15
 80122da:	e0df      	b.n	801249c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d009      	beq.n	80122f8 <tcp_connect+0x64>
 80122e4:	4b6f      	ldr	r3, [pc, #444]	@ (80124a4 <tcp_connect+0x210>)
 80122e6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80122ea:	4972      	ldr	r1, [pc, #456]	@ (80124b4 <tcp_connect+0x220>)
 80122ec:	486f      	ldr	r0, [pc, #444]	@ (80124ac <tcp_connect+0x218>)
 80122ee:	f00c f863 	bl	801e3b8 <iprintf>
 80122f2:	f06f 0309 	mvn.w	r3, #9
 80122f6:	e0d1      	b.n	801249c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d002      	beq.n	8012304 <tcp_connect+0x70>
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	e000      	b.n	8012306 <tcp_connect+0x72>
 8012304:	2300      	movs	r3, #0
 8012306:	68fa      	ldr	r2, [r7, #12]
 8012308:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	88fa      	ldrh	r2, [r7, #6]
 801230e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7a1b      	ldrb	r3, [r3, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d006      	beq.n	8012326 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	7a1b      	ldrb	r3, [r3, #8]
 801231c:	4618      	mov	r0, r3
 801231e:	f7fe fbd5 	bl	8010acc <netif_get_by_index>
 8012322:	6278      	str	r0, [r7, #36]	@ 0x24
 8012324:	e005      	b.n	8012332 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	3304      	adds	r3, #4
 801232a:	4618      	mov	r0, r3
 801232c:	f009 fa4c 	bl	801b7c8 <ip4_route>
 8012330:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	2b00      	cmp	r3, #0
 8012336:	d102      	bne.n	801233e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012338:	f06f 0303 	mvn.w	r3, #3
 801233c:	e0ae      	b.n	801249c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d003      	beq.n	801234c <tcp_connect+0xb8>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d111      	bne.n	8012370 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <tcp_connect+0xc4>
 8012352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012354:	3304      	adds	r3, #4
 8012356:	e000      	b.n	801235a <tcp_connect+0xc6>
 8012358:	2300      	movs	r3, #0
 801235a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d102      	bne.n	8012368 <tcp_connect+0xd4>
      return ERR_RTE;
 8012362:	f06f 0303 	mvn.w	r3, #3
 8012366:	e099      	b.n	801249c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	8adb      	ldrh	r3, [r3, #22]
 8012374:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	8adb      	ldrh	r3, [r3, #22]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d10c      	bne.n	8012398 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801237e:	f7ff ff43 	bl	8012208 <tcp_new_port>
 8012382:	4603      	mov	r3, r0
 8012384:	461a      	mov	r2, r3
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	8adb      	ldrh	r3, [r3, #22]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d102      	bne.n	8012398 <tcp_connect+0x104>
      return ERR_BUF;
 8012392:	f06f 0301 	mvn.w	r3, #1
 8012396:	e081      	b.n	801249c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f001 f869 	bl	8013470 <tcp_next_iss>
 801239e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2200      	movs	r2, #0
 80123a4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	697a      	ldr	r2, [r7, #20]
 80123aa:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	1e5a      	subs	r2, r3, #1
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	1e5a      	subs	r2, r3, #1
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	1e5a      	subs	r2, r3, #1
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80123ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80123e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80123ec:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3304      	adds	r3, #4
 80123f6:	461a      	mov	r2, r3
 80123f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123fa:	f001 f85f 	bl	80134bc <tcp_eff_send_mss_netif>
 80123fe:	4603      	mov	r3, r0
 8012400:	461a      	mov	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2201      	movs	r2, #1
 801240a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012416:	2102      	movs	r1, #2
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f004 fabd 	bl	8016998 <tcp_enqueue_flags>
 801241e:	4603      	mov	r3, r0
 8012420:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d136      	bne.n	8012498 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2202      	movs	r2, #2
 801242e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012430:	8b7b      	ldrh	r3, [r7, #26]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d021      	beq.n	801247a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012436:	4b20      	ldr	r3, [pc, #128]	@ (80124b8 <tcp_connect+0x224>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	429a      	cmp	r2, r3
 801243e:	d105      	bne.n	801244c <tcp_connect+0x1b8>
 8012440:	4b1d      	ldr	r3, [pc, #116]	@ (80124b8 <tcp_connect+0x224>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	4a1c      	ldr	r2, [pc, #112]	@ (80124b8 <tcp_connect+0x224>)
 8012448:	6013      	str	r3, [r2, #0]
 801244a:	e013      	b.n	8012474 <tcp_connect+0x1e0>
 801244c:	4b1a      	ldr	r3, [pc, #104]	@ (80124b8 <tcp_connect+0x224>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	623b      	str	r3, [r7, #32]
 8012452:	e00c      	b.n	801246e <tcp_connect+0x1da>
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	429a      	cmp	r2, r3
 801245c:	d104      	bne.n	8012468 <tcp_connect+0x1d4>
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68da      	ldr	r2, [r3, #12]
 8012462:	6a3b      	ldr	r3, [r7, #32]
 8012464:	60da      	str	r2, [r3, #12]
 8012466:	e005      	b.n	8012474 <tcp_connect+0x1e0>
 8012468:	6a3b      	ldr	r3, [r7, #32]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	623b      	str	r3, [r7, #32]
 801246e:	6a3b      	ldr	r3, [r7, #32]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d1ef      	bne.n	8012454 <tcp_connect+0x1c0>
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2200      	movs	r2, #0
 8012478:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801247a:	4b10      	ldr	r3, [pc, #64]	@ (80124bc <tcp_connect+0x228>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	60da      	str	r2, [r3, #12]
 8012482:	4a0e      	ldr	r2, [pc, #56]	@ (80124bc <tcp_connect+0x228>)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	6013      	str	r3, [r2, #0]
 8012488:	f005 faea 	bl	8017a60 <tcp_timer_needed>
 801248c:	4b0c      	ldr	r3, [pc, #48]	@ (80124c0 <tcp_connect+0x22c>)
 801248e:	2201      	movs	r2, #1
 8012490:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f004 fb6e 	bl	8016b74 <tcp_output>
  }
  return ret;
 8012498:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3728      	adds	r7, #40	@ 0x28
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	08023854 	.word	0x08023854
 80124a8:	08023b30 	.word	0x08023b30
 80124ac:	08023898 	.word	0x08023898
 80124b0:	08023b4c 	.word	0x08023b4c
 80124b4:	08023b68 	.word	0x08023b68
 80124b8:	20012670 	.word	0x20012670
 80124bc:	20012678 	.word	0x20012678
 80124c0:	20012680 	.word	0x20012680

080124c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80124c4:	b5b0      	push	{r4, r5, r7, lr}
 80124c6:	b090      	sub	sp, #64	@ 0x40
 80124c8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80124ca:	2300      	movs	r3, #0
 80124cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80124d0:	4b95      	ldr	r3, [pc, #596]	@ (8012728 <tcp_slowtmr+0x264>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	3301      	adds	r3, #1
 80124d6:	4a94      	ldr	r2, [pc, #592]	@ (8012728 <tcp_slowtmr+0x264>)
 80124d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80124da:	4b94      	ldr	r3, [pc, #592]	@ (801272c <tcp_slowtmr+0x268>)
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	3301      	adds	r3, #1
 80124e0:	b2da      	uxtb	r2, r3
 80124e2:	4b92      	ldr	r3, [pc, #584]	@ (801272c <tcp_slowtmr+0x268>)
 80124e4:	701a      	strb	r2, [r3, #0]
 80124e6:	e000      	b.n	80124ea <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80124e8:	bf00      	nop
  prev = NULL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80124ee:	4b90      	ldr	r3, [pc, #576]	@ (8012730 <tcp_slowtmr+0x26c>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80124f4:	e29f      	b.n	8012a36 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80124f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f8:	7d1b      	ldrb	r3, [r3, #20]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d106      	bne.n	801250c <tcp_slowtmr+0x48>
 80124fe:	4b8d      	ldr	r3, [pc, #564]	@ (8012734 <tcp_slowtmr+0x270>)
 8012500:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012504:	498c      	ldr	r1, [pc, #560]	@ (8012738 <tcp_slowtmr+0x274>)
 8012506:	488d      	ldr	r0, [pc, #564]	@ (801273c <tcp_slowtmr+0x278>)
 8012508:	f00b ff56 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250e:	7d1b      	ldrb	r3, [r3, #20]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d106      	bne.n	8012522 <tcp_slowtmr+0x5e>
 8012514:	4b87      	ldr	r3, [pc, #540]	@ (8012734 <tcp_slowtmr+0x270>)
 8012516:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801251a:	4989      	ldr	r1, [pc, #548]	@ (8012740 <tcp_slowtmr+0x27c>)
 801251c:	4887      	ldr	r0, [pc, #540]	@ (801273c <tcp_slowtmr+0x278>)
 801251e:	f00b ff4b 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012524:	7d1b      	ldrb	r3, [r3, #20]
 8012526:	2b0a      	cmp	r3, #10
 8012528:	d106      	bne.n	8012538 <tcp_slowtmr+0x74>
 801252a:	4b82      	ldr	r3, [pc, #520]	@ (8012734 <tcp_slowtmr+0x270>)
 801252c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012530:	4984      	ldr	r1, [pc, #528]	@ (8012744 <tcp_slowtmr+0x280>)
 8012532:	4882      	ldr	r0, [pc, #520]	@ (801273c <tcp_slowtmr+0x278>)
 8012534:	f00b ff40 	bl	801e3b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801253a:	7f9a      	ldrb	r2, [r3, #30]
 801253c:	4b7b      	ldr	r3, [pc, #492]	@ (801272c <tcp_slowtmr+0x268>)
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	429a      	cmp	r2, r3
 8012542:	d105      	bne.n	8012550 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012546:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801254e:	e272      	b.n	8012a36 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8012550:	4b76      	ldr	r3, [pc, #472]	@ (801272c <tcp_slowtmr+0x268>)
 8012552:	781a      	ldrb	r2, [r3, #0]
 8012554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012556:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012566:	7d1b      	ldrb	r3, [r3, #20]
 8012568:	2b02      	cmp	r3, #2
 801256a:	d10a      	bne.n	8012582 <tcp_slowtmr+0xbe>
 801256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801256e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012572:	2b05      	cmp	r3, #5
 8012574:	d905      	bls.n	8012582 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801257a:	3301      	adds	r3, #1
 801257c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012580:	e11e      	b.n	80127c0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012588:	2b0b      	cmp	r3, #11
 801258a:	d905      	bls.n	8012598 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801258c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012590:	3301      	adds	r3, #1
 8012592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012596:	e113      	b.n	80127c0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801259a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d075      	beq.n	801268e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80125a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d006      	beq.n	80125b8 <tcp_slowtmr+0xf4>
 80125aa:	4b62      	ldr	r3, [pc, #392]	@ (8012734 <tcp_slowtmr+0x270>)
 80125ac:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80125b0:	4965      	ldr	r1, [pc, #404]	@ (8012748 <tcp_slowtmr+0x284>)
 80125b2:	4862      	ldr	r0, [pc, #392]	@ (801273c <tcp_slowtmr+0x278>)
 80125b4:	f00b ff00 	bl	801e3b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80125b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d106      	bne.n	80125ce <tcp_slowtmr+0x10a>
 80125c0:	4b5c      	ldr	r3, [pc, #368]	@ (8012734 <tcp_slowtmr+0x270>)
 80125c2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80125c6:	4961      	ldr	r1, [pc, #388]	@ (801274c <tcp_slowtmr+0x288>)
 80125c8:	485c      	ldr	r0, [pc, #368]	@ (801273c <tcp_slowtmr+0x278>)
 80125ca:	f00b fef5 	bl	801e3b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80125ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80125d4:	2b0b      	cmp	r3, #11
 80125d6:	d905      	bls.n	80125e4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80125d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125dc:	3301      	adds	r3, #1
 80125de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80125e2:	e0ed      	b.n	80127c0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80125e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80125ea:	3b01      	subs	r3, #1
 80125ec:	4a58      	ldr	r2, [pc, #352]	@ (8012750 <tcp_slowtmr+0x28c>)
 80125ee:	5cd3      	ldrb	r3, [r2, r3]
 80125f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80125f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80125f8:	7c7a      	ldrb	r2, [r7, #17]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d907      	bls.n	801260e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80125fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012600:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012604:	3301      	adds	r3, #1
 8012606:	b2da      	uxtb	r2, r3
 8012608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801260e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012610:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012614:	7c7a      	ldrb	r2, [r7, #17]
 8012616:	429a      	cmp	r2, r3
 8012618:	f200 80d2 	bhi.w	80127c0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801261c:	2301      	movs	r3, #1
 801261e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012626:	2b00      	cmp	r3, #0
 8012628:	d108      	bne.n	801263c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801262a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801262c:	f005 f94a 	bl	80178c4 <tcp_zero_window_probe>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d014      	beq.n	8012660 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012636:	2300      	movs	r3, #0
 8012638:	623b      	str	r3, [r7, #32]
 801263a:	e011      	b.n	8012660 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801263c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801263e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012642:	4619      	mov	r1, r3
 8012644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012646:	f004 f80f 	bl	8016668 <tcp_split_unsent_seg>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d107      	bne.n	8012660 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012650:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012652:	f004 fa8f 	bl	8016b74 <tcp_output>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d101      	bne.n	8012660 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801265c:	2300      	movs	r3, #0
 801265e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 80ac 	beq.w	80127c0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801266a:	2200      	movs	r2, #0
 801266c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012672:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012676:	2b06      	cmp	r3, #6
 8012678:	f200 80a2 	bhi.w	80127c0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801267c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801267e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012682:	3301      	adds	r3, #1
 8012684:	b2da      	uxtb	r2, r3
 8012686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012688:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801268c:	e098      	b.n	80127c0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012690:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012694:	2b00      	cmp	r3, #0
 8012696:	db0f      	blt.n	80126b8 <tcp_slowtmr+0x1f4>
 8012698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801269a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801269e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d008      	beq.n	80126b8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80126a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	3301      	adds	r3, #1
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	b21a      	sxth	r2, r3
 80126b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80126b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80126be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80126c4:	429a      	cmp	r2, r3
 80126c6:	db7b      	blt.n	80127c0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80126c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126ca:	f004 fd47 	bl	801715c <tcp_rexmit_rto_prepare>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d007      	beq.n	80126e4 <tcp_slowtmr+0x220>
 80126d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d171      	bne.n	80127c0 <tcp_slowtmr+0x2fc>
 80126dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d06d      	beq.n	80127c0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80126e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e6:	7d1b      	ldrb	r3, [r3, #20]
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d03a      	beq.n	8012762 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80126ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126f2:	2b0c      	cmp	r3, #12
 80126f4:	bf28      	it	cs
 80126f6:	230c      	movcs	r3, #12
 80126f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80126fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012700:	10db      	asrs	r3, r3, #3
 8012702:	b21b      	sxth	r3, r3
 8012704:	461a      	mov	r2, r3
 8012706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012708:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801270c:	4413      	add	r3, r2
 801270e:	7efa      	ldrb	r2, [r7, #27]
 8012710:	4910      	ldr	r1, [pc, #64]	@ (8012754 <tcp_slowtmr+0x290>)
 8012712:	5c8a      	ldrb	r2, [r1, r2]
 8012714:	4093      	lsls	r3, r2
 8012716:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801271e:	4293      	cmp	r3, r2
 8012720:	dc1a      	bgt.n	8012758 <tcp_slowtmr+0x294>
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	b21a      	sxth	r2, r3
 8012726:	e019      	b.n	801275c <tcp_slowtmr+0x298>
 8012728:	2001266c 	.word	0x2001266c
 801272c:	20012682 	.word	0x20012682
 8012730:	20012678 	.word	0x20012678
 8012734:	08023854 	.word	0x08023854
 8012738:	08023b98 	.word	0x08023b98
 801273c:	08023898 	.word	0x08023898
 8012740:	08023bc4 	.word	0x08023bc4
 8012744:	08023bf0 	.word	0x08023bf0
 8012748:	08023c20 	.word	0x08023c20
 801274c:	08023c54 	.word	0x08023c54
 8012750:	08025dd4 	.word	0x08025dd4
 8012754:	08025dc4 	.word	0x08025dc4
 8012758:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012764:	2200      	movs	r2, #0
 8012766:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801276a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012774:	4293      	cmp	r3, r2
 8012776:	bf28      	it	cs
 8012778:	4613      	movcs	r3, r2
 801277a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801277c:	8a7b      	ldrh	r3, [r7, #18]
 801277e:	085b      	lsrs	r3, r3, #1
 8012780:	b29a      	uxth	r2, r3
 8012782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012784:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801278a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	b29b      	uxth	r3, r3
 8012796:	429a      	cmp	r2, r3
 8012798:	d206      	bcs.n	80127a8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80127a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127aa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80127ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80127b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b4:	2200      	movs	r2, #0
 80127b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80127ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127bc:	f004 fd3e 	bl	801723c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80127c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c2:	7d1b      	ldrb	r3, [r3, #20]
 80127c4:	2b06      	cmp	r3, #6
 80127c6:	d111      	bne.n	80127ec <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80127c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ca:	8b5b      	ldrh	r3, [r3, #26]
 80127cc:	f003 0310 	and.w	r3, r3, #16
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00b      	beq.n	80127ec <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127d4:	4b9d      	ldr	r3, [pc, #628]	@ (8012a4c <tcp_slowtmr+0x588>)
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127da:	6a1b      	ldr	r3, [r3, #32]
 80127dc:	1ad3      	subs	r3, r2, r3
 80127de:	2b28      	cmp	r3, #40	@ 0x28
 80127e0:	d904      	bls.n	80127ec <tcp_slowtmr+0x328>
          ++pcb_remove;
 80127e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127e6:	3301      	adds	r3, #1
 80127e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80127ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ee:	7a5b      	ldrb	r3, [r3, #9]
 80127f0:	f003 0308 	and.w	r3, r3, #8
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d04c      	beq.n	8012892 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80127f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80127fc:	2b04      	cmp	r3, #4
 80127fe:	d003      	beq.n	8012808 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012802:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012804:	2b07      	cmp	r3, #7
 8012806:	d144      	bne.n	8012892 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012808:	4b90      	ldr	r3, [pc, #576]	@ (8012a4c <tcp_slowtmr+0x588>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801280e:	6a1b      	ldr	r3, [r3, #32]
 8012810:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012818:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801281c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8012820:	498b      	ldr	r1, [pc, #556]	@ (8012a50 <tcp_slowtmr+0x58c>)
 8012822:	fba1 1303 	umull	r1, r3, r1, r3
 8012826:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012828:	429a      	cmp	r2, r3
 801282a:	d90a      	bls.n	8012842 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801282c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012830:	3301      	adds	r3, #1
 8012832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012836:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801283a:	3301      	adds	r3, #1
 801283c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012840:	e027      	b.n	8012892 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012842:	4b82      	ldr	r3, [pc, #520]	@ (8012a4c <tcp_slowtmr+0x588>)
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012848:	6a1b      	ldr	r3, [r3, #32]
 801284a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012854:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012858:	4618      	mov	r0, r3
 801285a:	4b7e      	ldr	r3, [pc, #504]	@ (8012a54 <tcp_slowtmr+0x590>)
 801285c:	fb00 f303 	mul.w	r3, r0, r3
 8012860:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012862:	497b      	ldr	r1, [pc, #492]	@ (8012a50 <tcp_slowtmr+0x58c>)
 8012864:	fba1 1303 	umull	r1, r3, r1, r3
 8012868:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801286a:	429a      	cmp	r2, r3
 801286c:	d911      	bls.n	8012892 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801286e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012870:	f004 ffe8 	bl	8017844 <tcp_keepalive>
 8012874:	4603      	mov	r3, r0
 8012876:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801287a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801287e:	2b00      	cmp	r3, #0
 8012880:	d107      	bne.n	8012892 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8012882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012884:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012888:	3301      	adds	r3, #1
 801288a:	b2da      	uxtb	r2, r3
 801288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801288e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012896:	2b00      	cmp	r3, #0
 8012898:	d011      	beq.n	80128be <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801289a:	4b6c      	ldr	r3, [pc, #432]	@ (8012a4c <tcp_slowtmr+0x588>)
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128a0:	6a1b      	ldr	r3, [r3, #32]
 80128a2:	1ad2      	subs	r2, r2, r3
 80128a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80128aa:	4619      	mov	r1, r3
 80128ac:	460b      	mov	r3, r1
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	440b      	add	r3, r1
 80128b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d302      	bcc.n	80128be <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80128b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80128ba:	f000 fea9 	bl	8013610 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80128be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c0:	7d1b      	ldrb	r3, [r3, #20]
 80128c2:	2b03      	cmp	r3, #3
 80128c4:	d10b      	bne.n	80128de <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128c6:	4b61      	ldr	r3, [pc, #388]	@ (8012a4c <tcp_slowtmr+0x588>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128cc:	6a1b      	ldr	r3, [r3, #32]
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	2b28      	cmp	r3, #40	@ 0x28
 80128d2:	d904      	bls.n	80128de <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80128d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128d8:	3301      	adds	r3, #1
 80128da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80128de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e0:	7d1b      	ldrb	r3, [r3, #20]
 80128e2:	2b09      	cmp	r3, #9
 80128e4:	d10b      	bne.n	80128fe <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80128e6:	4b59      	ldr	r3, [pc, #356]	@ (8012a4c <tcp_slowtmr+0x588>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ec:	6a1b      	ldr	r3, [r3, #32]
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	2bf0      	cmp	r3, #240	@ 0xf0
 80128f2:	d904      	bls.n	80128fe <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80128f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128f8:	3301      	adds	r3, #1
 80128fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80128fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012902:	2b00      	cmp	r3, #0
 8012904:	d060      	beq.n	80129c8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8012906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801290c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801290e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012910:	f000 fcca 	bl	80132a8 <tcp_pcb_purge>
      if (prev != NULL) {
 8012914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012916:	2b00      	cmp	r3, #0
 8012918:	d010      	beq.n	801293c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801291a:	4b4f      	ldr	r3, [pc, #316]	@ (8012a58 <tcp_slowtmr+0x594>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012920:	429a      	cmp	r2, r3
 8012922:	d106      	bne.n	8012932 <tcp_slowtmr+0x46e>
 8012924:	4b4d      	ldr	r3, [pc, #308]	@ (8012a5c <tcp_slowtmr+0x598>)
 8012926:	f240 526d 	movw	r2, #1389	@ 0x56d
 801292a:	494d      	ldr	r1, [pc, #308]	@ (8012a60 <tcp_slowtmr+0x59c>)
 801292c:	484d      	ldr	r0, [pc, #308]	@ (8012a64 <tcp_slowtmr+0x5a0>)
 801292e:	f00b fd43 	bl	801e3b8 <iprintf>
        prev->next = pcb->next;
 8012932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012934:	68da      	ldr	r2, [r3, #12]
 8012936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012938:	60da      	str	r2, [r3, #12]
 801293a:	e00f      	b.n	801295c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801293c:	4b46      	ldr	r3, [pc, #280]	@ (8012a58 <tcp_slowtmr+0x594>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012942:	429a      	cmp	r2, r3
 8012944:	d006      	beq.n	8012954 <tcp_slowtmr+0x490>
 8012946:	4b45      	ldr	r3, [pc, #276]	@ (8012a5c <tcp_slowtmr+0x598>)
 8012948:	f240 5271 	movw	r2, #1393	@ 0x571
 801294c:	4946      	ldr	r1, [pc, #280]	@ (8012a68 <tcp_slowtmr+0x5a4>)
 801294e:	4845      	ldr	r0, [pc, #276]	@ (8012a64 <tcp_slowtmr+0x5a0>)
 8012950:	f00b fd32 	bl	801e3b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	4a3f      	ldr	r2, [pc, #252]	@ (8012a58 <tcp_slowtmr+0x594>)
 801295a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801295c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012960:	2b00      	cmp	r3, #0
 8012962:	d013      	beq.n	801298c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012966:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801296a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801296c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012970:	3304      	adds	r3, #4
 8012972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012974:	8ad2      	ldrh	r2, [r2, #22]
 8012976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012978:	8b09      	ldrh	r1, [r1, #24]
 801297a:	9102      	str	r1, [sp, #8]
 801297c:	9201      	str	r2, [sp, #4]
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	462b      	mov	r3, r5
 8012982:	4622      	mov	r2, r4
 8012984:	4601      	mov	r1, r0
 8012986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012988:	f004 fea8 	bl	80176dc <tcp_rst>
      err_arg = pcb->callback_arg;
 801298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298e:	691b      	ldr	r3, [r3, #16]
 8012990:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012994:	7d1b      	ldrb	r3, [r3, #20]
 8012996:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80129a2:	6838      	ldr	r0, [r7, #0]
 80129a4:	f7ff f836 	bl	8011a14 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80129a8:	4b30      	ldr	r3, [pc, #192]	@ (8012a6c <tcp_slowtmr+0x5a8>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d004      	beq.n	80129be <tcp_slowtmr+0x4fa>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f06f 010c 	mvn.w	r1, #12
 80129ba:	68b8      	ldr	r0, [r7, #8]
 80129bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80129be:	4b2b      	ldr	r3, [pc, #172]	@ (8012a6c <tcp_slowtmr+0x5a8>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d037      	beq.n	8012a36 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80129c6:	e590      	b.n	80124ea <tcp_slowtmr+0x26>
      prev = pcb;
 80129c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80129cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80129d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d4:	7f1b      	ldrb	r3, [r3, #28]
 80129d6:	3301      	adds	r3, #1
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80129de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e0:	7f1a      	ldrb	r2, [r3, #28]
 80129e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e4:	7f5b      	ldrb	r3, [r3, #29]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d325      	bcc.n	8012a36 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80129ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ec:	2200      	movs	r2, #0
 80129ee:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80129f0:	4b1e      	ldr	r3, [pc, #120]	@ (8012a6c <tcp_slowtmr+0x5a8>)
 80129f2:	2200      	movs	r2, #0
 80129f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80129f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d00b      	beq.n	8012a18 <tcp_slowtmr+0x554>
 8012a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a08:	6912      	ldr	r2, [r2, #16]
 8012a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	4798      	blx	r3
 8012a10:	4603      	mov	r3, r0
 8012a12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012a16:	e002      	b.n	8012a1e <tcp_slowtmr+0x55a>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012a1e:	4b13      	ldr	r3, [pc, #76]	@ (8012a6c <tcp_slowtmr+0x5a8>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f47f ad60 	bne.w	80124e8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012a28:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8012a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a32:	f004 f89f 	bl	8016b74 <tcp_output>
  while (pcb != NULL) {
 8012a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f47f ad5c 	bne.w	80124f6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012a42:	4b0b      	ldr	r3, [pc, #44]	@ (8012a70 <tcp_slowtmr+0x5ac>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012a48:	e067      	b.n	8012b1a <tcp_slowtmr+0x656>
 8012a4a:	bf00      	nop
 8012a4c:	2001266c 	.word	0x2001266c
 8012a50:	10624dd3 	.word	0x10624dd3
 8012a54:	000124f8 	.word	0x000124f8
 8012a58:	20012678 	.word	0x20012678
 8012a5c:	08023854 	.word	0x08023854
 8012a60:	08023c8c 	.word	0x08023c8c
 8012a64:	08023898 	.word	0x08023898
 8012a68:	08023cb8 	.word	0x08023cb8
 8012a6c:	20012680 	.word	0x20012680
 8012a70:	2001267c 	.word	0x2001267c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a76:	7d1b      	ldrb	r3, [r3, #20]
 8012a78:	2b0a      	cmp	r3, #10
 8012a7a:	d006      	beq.n	8012a8a <tcp_slowtmr+0x5c6>
 8012a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8012b2c <tcp_slowtmr+0x668>)
 8012a7e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012a82:	492b      	ldr	r1, [pc, #172]	@ (8012b30 <tcp_slowtmr+0x66c>)
 8012a84:	482b      	ldr	r0, [pc, #172]	@ (8012b34 <tcp_slowtmr+0x670>)
 8012a86:	f00b fc97 	bl	801e3b8 <iprintf>
    pcb_remove = 0;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012a90:	4b29      	ldr	r3, [pc, #164]	@ (8012b38 <tcp_slowtmr+0x674>)
 8012a92:	681a      	ldr	r2, [r3, #0]
 8012a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a96:	6a1b      	ldr	r3, [r3, #32]
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	2bf0      	cmp	r3, #240	@ 0xf0
 8012a9c:	d904      	bls.n	8012aa8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d02f      	beq.n	8012b10 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ab2:	f000 fbf9 	bl	80132a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d010      	beq.n	8012ade <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012abc:	4b1f      	ldr	r3, [pc, #124]	@ (8012b3c <tcp_slowtmr+0x678>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d106      	bne.n	8012ad4 <tcp_slowtmr+0x610>
 8012ac6:	4b19      	ldr	r3, [pc, #100]	@ (8012b2c <tcp_slowtmr+0x668>)
 8012ac8:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012acc:	491c      	ldr	r1, [pc, #112]	@ (8012b40 <tcp_slowtmr+0x67c>)
 8012ace:	4819      	ldr	r0, [pc, #100]	@ (8012b34 <tcp_slowtmr+0x670>)
 8012ad0:	f00b fc72 	bl	801e3b8 <iprintf>
        prev->next = pcb->next;
 8012ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad6:	68da      	ldr	r2, [r3, #12]
 8012ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ada:	60da      	str	r2, [r3, #12]
 8012adc:	e00f      	b.n	8012afe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012ade:	4b17      	ldr	r3, [pc, #92]	@ (8012b3c <tcp_slowtmr+0x678>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d006      	beq.n	8012af6 <tcp_slowtmr+0x632>
 8012ae8:	4b10      	ldr	r3, [pc, #64]	@ (8012b2c <tcp_slowtmr+0x668>)
 8012aea:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012aee:	4915      	ldr	r1, [pc, #84]	@ (8012b44 <tcp_slowtmr+0x680>)
 8012af0:	4810      	ldr	r0, [pc, #64]	@ (8012b34 <tcp_slowtmr+0x670>)
 8012af2:	f00b fc61 	bl	801e3b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	4a10      	ldr	r2, [pc, #64]	@ (8012b3c <tcp_slowtmr+0x678>)
 8012afc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b00:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012b08:	69f8      	ldr	r0, [r7, #28]
 8012b0a:	f7fe ff83 	bl	8011a14 <tcp_free>
 8012b0e:	e004      	b.n	8012b1a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b12:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d1a9      	bne.n	8012a74 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012b20:	bf00      	nop
 8012b22:	bf00      	nop
 8012b24:	3730      	adds	r7, #48	@ 0x30
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bdb0      	pop	{r4, r5, r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	08023854 	.word	0x08023854
 8012b30:	08023ce4 	.word	0x08023ce4
 8012b34:	08023898 	.word	0x08023898
 8012b38:	2001266c 	.word	0x2001266c
 8012b3c:	2001267c 	.word	0x2001267c
 8012b40:	08023d14 	.word	0x08023d14
 8012b44:	08023d3c 	.word	0x08023d3c

08012b48 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8012c04 <tcp_fasttmr+0xbc>)
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	3301      	adds	r3, #1
 8012b54:	b2da      	uxtb	r2, r3
 8012b56:	4b2b      	ldr	r3, [pc, #172]	@ (8012c04 <tcp_fasttmr+0xbc>)
 8012b58:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8012c08 <tcp_fasttmr+0xc0>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012b60:	e048      	b.n	8012bf4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	7f9a      	ldrb	r2, [r3, #30]
 8012b66:	4b27      	ldr	r3, [pc, #156]	@ (8012c04 <tcp_fasttmr+0xbc>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d03f      	beq.n	8012bee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012b6e:	4b25      	ldr	r3, [pc, #148]	@ (8012c04 <tcp_fasttmr+0xbc>)
 8012b70:	781a      	ldrb	r2, [r3, #0]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	8b5b      	ldrh	r3, [r3, #26]
 8012b7a:	f003 0301 	and.w	r3, r3, #1
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d010      	beq.n	8012ba4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	8b5b      	ldrh	r3, [r3, #26]
 8012b86:	f043 0302 	orr.w	r3, r3, #2
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f003 ffef 	bl	8016b74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	8b5b      	ldrh	r3, [r3, #26]
 8012b9a:	f023 0303 	bic.w	r3, r3, #3
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	8b5b      	ldrh	r3, [r3, #26]
 8012ba8:	f003 0308 	and.w	r3, r3, #8
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d009      	beq.n	8012bc4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8b5b      	ldrh	r3, [r3, #26]
 8012bb4:	f023 0308 	bic.w	r3, r3, #8
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff f8bc 	bl	8011d3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00a      	beq.n	8012be8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8012c0c <tcp_fasttmr+0xc4>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 f819 	bl	8012c10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012bde:	4b0b      	ldr	r3, [pc, #44]	@ (8012c0c <tcp_fasttmr+0xc4>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d000      	beq.n	8012be8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012be6:	e7b8      	b.n	8012b5a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	607b      	str	r3, [r7, #4]
 8012bec:	e002      	b.n	8012bf4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1b3      	bne.n	8012b62 <tcp_fasttmr+0x1a>
    }
  }
}
 8012bfa:	bf00      	nop
 8012bfc:	bf00      	nop
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	20012682 	.word	0x20012682
 8012c08:	20012678 	.word	0x20012678
 8012c0c:	20012680 	.word	0x20012680

08012c10 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d109      	bne.n	8012c32 <tcp_process_refused_data+0x22>
 8012c1e:	4b37      	ldr	r3, [pc, #220]	@ (8012cfc <tcp_process_refused_data+0xec>)
 8012c20:	f240 6209 	movw	r2, #1545	@ 0x609
 8012c24:	4936      	ldr	r1, [pc, #216]	@ (8012d00 <tcp_process_refused_data+0xf0>)
 8012c26:	4837      	ldr	r0, [pc, #220]	@ (8012d04 <tcp_process_refused_data+0xf4>)
 8012c28:	f00b fbc6 	bl	801e3b8 <iprintf>
 8012c2c:	f06f 030f 	mvn.w	r3, #15
 8012c30:	e060      	b.n	8012cf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c36:	7b5b      	ldrb	r3, [r3, #13]
 8012c38:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c3e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00b      	beq.n	8012c68 <tcp_process_refused_data+0x58>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6918      	ldr	r0, [r3, #16]
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	6879      	ldr	r1, [r7, #4]
 8012c60:	47a0      	blx	r4
 8012c62:	4603      	mov	r3, r0
 8012c64:	73fb      	strb	r3, [r7, #15]
 8012c66:	e007      	b.n	8012c78 <tcp_process_refused_data+0x68>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	6879      	ldr	r1, [r7, #4]
 8012c6e:	2000      	movs	r0, #0
 8012c70:	f000 f8a4 	bl	8012dbc <tcp_recv_null>
 8012c74:	4603      	mov	r3, r0
 8012c76:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d12a      	bne.n	8012cd6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012c80:	7bbb      	ldrb	r3, [r7, #14]
 8012c82:	f003 0320 	and.w	r3, r3, #32
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d033      	beq.n	8012cf2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012c92:	d005      	beq.n	8012ca0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c98:	3301      	adds	r3, #1
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00b      	beq.n	8012cc2 <tcp_process_refused_data+0xb2>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6918      	ldr	r0, [r3, #16]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	6879      	ldr	r1, [r7, #4]
 8012cba:	47a0      	blx	r4
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73fb      	strb	r3, [r7, #15]
 8012cc0:	e001      	b.n	8012cc6 <tcp_process_refused_data+0xb6>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cca:	f113 0f0d 	cmn.w	r3, #13
 8012cce:	d110      	bne.n	8012cf2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012cd0:	f06f 030c 	mvn.w	r3, #12
 8012cd4:	e00e      	b.n	8012cf4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cda:	f113 0f0d 	cmn.w	r3, #13
 8012cde:	d102      	bne.n	8012ce6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012ce0:	f06f 030c 	mvn.w	r3, #12
 8012ce4:	e006      	b.n	8012cf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	68ba      	ldr	r2, [r7, #8]
 8012cea:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8012cec:	f06f 0304 	mvn.w	r3, #4
 8012cf0:	e000      	b.n	8012cf4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012cf2:	2300      	movs	r3, #0
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3714      	adds	r7, #20
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd90      	pop	{r4, r7, pc}
 8012cfc:	08023854 	.word	0x08023854
 8012d00:	08023d64 	.word	0x08023d64
 8012d04:	08023898 	.word	0x08023898

08012d08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d10:	e007      	b.n	8012d22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f80a 	bl	8012d32 <tcp_seg_free>
    seg = next;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d1f4      	bne.n	8012d12 <tcp_segs_free+0xa>
  }
}
 8012d28:	bf00      	nop
 8012d2a:	bf00      	nop
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b082      	sub	sp, #8
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00c      	beq.n	8012d5a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d004      	beq.n	8012d52 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fa4b 	bl	80111e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012d52:	6879      	ldr	r1, [r7, #4]
 8012d54:	2003      	movs	r0, #3
 8012d56:	f7fd fb97 	bl	8010488 <memp_free>
  }
}
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_seg_copy+0x1c>
 8012d72:	4b0f      	ldr	r3, [pc, #60]	@ (8012db0 <tcp_seg_copy+0x4c>)
 8012d74:	f240 6282 	movw	r2, #1666	@ 0x682
 8012d78:	490e      	ldr	r1, [pc, #56]	@ (8012db4 <tcp_seg_copy+0x50>)
 8012d7a:	480f      	ldr	r0, [pc, #60]	@ (8012db8 <tcp_seg_copy+0x54>)
 8012d7c:	f00b fb1c 	bl	801e3b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012d80:	2003      	movs	r0, #3
 8012d82:	f7fd fb0b 	bl	801039c <memp_malloc>
 8012d86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d101      	bne.n	8012d92 <tcp_seg_copy+0x2e>
    return NULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e00a      	b.n	8012da8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012d92:	2210      	movs	r2, #16
 8012d94:	6879      	ldr	r1, [r7, #4]
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f00b fcaf 	bl	801e6fa <memcpy>
  pbuf_ref(cseg->p);
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe fac7 	bl	8011334 <pbuf_ref>
  return cseg;
 8012da6:	68fb      	ldr	r3, [r7, #12]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3710      	adds	r7, #16
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	08023854 	.word	0x08023854
 8012db4:	08023da8 	.word	0x08023da8
 8012db8:	08023898 	.word	0x08023898

08012dbc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	60f8      	str	r0, [r7, #12]
 8012dc4:	60b9      	str	r1, [r7, #8]
 8012dc6:	607a      	str	r2, [r7, #4]
 8012dc8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d109      	bne.n	8012de4 <tcp_recv_null+0x28>
 8012dd0:	4b12      	ldr	r3, [pc, #72]	@ (8012e1c <tcp_recv_null+0x60>)
 8012dd2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012dd6:	4912      	ldr	r1, [pc, #72]	@ (8012e20 <tcp_recv_null+0x64>)
 8012dd8:	4812      	ldr	r0, [pc, #72]	@ (8012e24 <tcp_recv_null+0x68>)
 8012dda:	f00b faed 	bl	801e3b8 <iprintf>
 8012dde:	f06f 030f 	mvn.w	r3, #15
 8012de2:	e016      	b.n	8012e12 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d009      	beq.n	8012dfe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	891b      	ldrh	r3, [r3, #8]
 8012dee:	4619      	mov	r1, r3
 8012df0:	68b8      	ldr	r0, [r7, #8]
 8012df2:	f7ff f9b9 	bl	8012168 <tcp_recved>
    pbuf_free(p);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7fe f9f6 	bl	80111e8 <pbuf_free>
 8012dfc:	e008      	b.n	8012e10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d104      	bne.n	8012e10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012e06:	68b8      	ldr	r0, [r7, #8]
 8012e08:	f7ff f802 	bl	8011e10 <tcp_close>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	e000      	b.n	8012e12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3710      	adds	r7, #16
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	08023854 	.word	0x08023854
 8012e20:	08023dc4 	.word	0x08023dc4
 8012e24:	08023898 	.word	0x08023898

08012e28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b086      	sub	sp, #24
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	4603      	mov	r3, r0
 8012e30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	db01      	blt.n	8012e3e <tcp_kill_prio+0x16>
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	e000      	b.n	8012e40 <tcp_kill_prio+0x18>
 8012e3e:	237f      	movs	r3, #127	@ 0x7f
 8012e40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012e42:	7afb      	ldrb	r3, [r7, #11]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d034      	beq.n	8012eb2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012e48:	7afb      	ldrb	r3, [r7, #11]
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012e52:	2300      	movs	r3, #0
 8012e54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e56:	4b19      	ldr	r3, [pc, #100]	@ (8012ebc <tcp_kill_prio+0x94>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	617b      	str	r3, [r7, #20]
 8012e5c:	e01f      	b.n	8012e9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	7d5b      	ldrb	r3, [r3, #21]
 8012e62:	7afa      	ldrb	r2, [r7, #11]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d80c      	bhi.n	8012e82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012e6c:	7afa      	ldrb	r2, [r7, #11]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d112      	bne.n	8012e98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e72:	4b13      	ldr	r3, [pc, #76]	@ (8012ec0 <tcp_kill_prio+0x98>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	6a1b      	ldr	r3, [r3, #32]
 8012e7a:	1ad3      	subs	r3, r2, r3
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d80a      	bhi.n	8012e98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012e82:	4b0f      	ldr	r3, [pc, #60]	@ (8012ec0 <tcp_kill_prio+0x98>)
 8012e84:	681a      	ldr	r2, [r3, #0]
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	6a1b      	ldr	r3, [r3, #32]
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	7d5b      	ldrb	r3, [r3, #21]
 8012e96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d1dc      	bne.n	8012e5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d004      	beq.n	8012eb4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012eaa:	6938      	ldr	r0, [r7, #16]
 8012eac:	f7ff f8f6 	bl	801209c <tcp_abort>
 8012eb0:	e000      	b.n	8012eb4 <tcp_kill_prio+0x8c>
    return;
 8012eb2:	bf00      	nop
  }
}
 8012eb4:	3718      	adds	r7, #24
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	20012678 	.word	0x20012678
 8012ec0:	2001266c 	.word	0x2001266c

08012ec4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b086      	sub	sp, #24
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	4603      	mov	r3, r0
 8012ecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012ece:	79fb      	ldrb	r3, [r7, #7]
 8012ed0:	2b08      	cmp	r3, #8
 8012ed2:	d009      	beq.n	8012ee8 <tcp_kill_state+0x24>
 8012ed4:	79fb      	ldrb	r3, [r7, #7]
 8012ed6:	2b09      	cmp	r3, #9
 8012ed8:	d006      	beq.n	8012ee8 <tcp_kill_state+0x24>
 8012eda:	4b1a      	ldr	r3, [pc, #104]	@ (8012f44 <tcp_kill_state+0x80>)
 8012edc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012ee0:	4919      	ldr	r1, [pc, #100]	@ (8012f48 <tcp_kill_state+0x84>)
 8012ee2:	481a      	ldr	r0, [pc, #104]	@ (8012f4c <tcp_kill_state+0x88>)
 8012ee4:	f00b fa68 	bl	801e3b8 <iprintf>

  inactivity = 0;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012eec:	2300      	movs	r3, #0
 8012eee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ef0:	4b17      	ldr	r3, [pc, #92]	@ (8012f50 <tcp_kill_state+0x8c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	617b      	str	r3, [r7, #20]
 8012ef6:	e017      	b.n	8012f28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	7d1b      	ldrb	r3, [r3, #20]
 8012efc:	79fa      	ldrb	r2, [r7, #7]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d10f      	bne.n	8012f22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f02:	4b14      	ldr	r3, [pc, #80]	@ (8012f54 <tcp_kill_state+0x90>)
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	6a1b      	ldr	r3, [r3, #32]
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d807      	bhi.n	8012f22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012f12:	4b10      	ldr	r3, [pc, #64]	@ (8012f54 <tcp_kill_state+0x90>)
 8012f14:	681a      	ldr	r2, [r3, #0]
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	6a1b      	ldr	r3, [r3, #32]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	617b      	str	r3, [r7, #20]
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1e4      	bne.n	8012ef8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d003      	beq.n	8012f3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012f34:	2100      	movs	r1, #0
 8012f36:	6938      	ldr	r0, [r7, #16]
 8012f38:	f7fe fff2 	bl	8011f20 <tcp_abandon>
  }
}
 8012f3c:	bf00      	nop
 8012f3e:	3718      	adds	r7, #24
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	08023854 	.word	0x08023854
 8012f48:	08023de0 	.word	0x08023de0
 8012f4c:	08023898 	.word	0x08023898
 8012f50:	20012678 	.word	0x20012678
 8012f54:	2001266c 	.word	0x2001266c

08012f58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012f62:	2300      	movs	r3, #0
 8012f64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f66:	4b12      	ldr	r3, [pc, #72]	@ (8012fb0 <tcp_kill_timewait+0x58>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	60fb      	str	r3, [r7, #12]
 8012f6c:	e012      	b.n	8012f94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f6e:	4b11      	ldr	r3, [pc, #68]	@ (8012fb4 <tcp_kill_timewait+0x5c>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d807      	bhi.n	8012f8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012fb4 <tcp_kill_timewait+0x5c>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6a1b      	ldr	r3, [r3, #32]
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	60fb      	str	r3, [r7, #12]
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d1e9      	bne.n	8012f6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012fa0:	68b8      	ldr	r0, [r7, #8]
 8012fa2:	f7ff f87b 	bl	801209c <tcp_abort>
  }
}
 8012fa6:	bf00      	nop
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	2001267c 	.word	0x2001267c
 8012fb4:	2001266c 	.word	0x2001266c

08012fb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012fbe:	4b10      	ldr	r3, [pc, #64]	@ (8013000 <tcp_handle_closepend+0x48>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012fc4:	e014      	b.n	8012ff0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	8b5b      	ldrh	r3, [r3, #26]
 8012fd0:	f003 0308 	and.w	r3, r3, #8
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d009      	beq.n	8012fec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	8b5b      	ldrh	r3, [r3, #26]
 8012fdc:	f023 0308 	bic.w	r3, r3, #8
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7fe fea8 	bl	8011d3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1e7      	bne.n	8012fc6 <tcp_handle_closepend+0xe>
  }
}
 8012ff6:	bf00      	nop
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	20012678 	.word	0x20012678

08013004 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801300e:	2001      	movs	r0, #1
 8013010:	f7fd f9c4 	bl	801039c <memp_malloc>
 8013014:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d126      	bne.n	801306a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801301c:	f7ff ffcc 	bl	8012fb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013020:	f7ff ff9a 	bl	8012f58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013024:	2001      	movs	r0, #1
 8013026:	f7fd f9b9 	bl	801039c <memp_malloc>
 801302a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d11b      	bne.n	801306a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013032:	2009      	movs	r0, #9
 8013034:	f7ff ff46 	bl	8012ec4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013038:	2001      	movs	r0, #1
 801303a:	f7fd f9af 	bl	801039c <memp_malloc>
 801303e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d111      	bne.n	801306a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013046:	2008      	movs	r0, #8
 8013048:	f7ff ff3c 	bl	8012ec4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801304c:	2001      	movs	r0, #1
 801304e:	f7fd f9a5 	bl	801039c <memp_malloc>
 8013052:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d107      	bne.n	801306a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801305a:	79fb      	ldrb	r3, [r7, #7]
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff fee3 	bl	8012e28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013062:	2001      	movs	r0, #1
 8013064:	f7fd f99a 	bl	801039c <memp_malloc>
 8013068:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d03f      	beq.n	80130f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013070:	229c      	movs	r2, #156	@ 0x9c
 8013072:	2100      	movs	r1, #0
 8013074:	68f8      	ldr	r0, [r7, #12]
 8013076:	f00b fa3e 	bl	801e4f6 <memset>
    pcb->prio = prio;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	79fa      	ldrb	r2, [r7, #7]
 801307e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013086:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	22ff      	movs	r2, #255	@ 0xff
 801309e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80130a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2206      	movs	r2, #6
 80130ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2206      	movs	r2, #6
 80130b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130bc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2201      	movs	r2, #1
 80130c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80130c6:	4b0d      	ldr	r3, [pc, #52]	@ (80130fc <tcp_alloc+0xf8>)
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80130ce:	4b0c      	ldr	r3, [pc, #48]	@ (8013100 <tcp_alloc+0xfc>)
 80130d0:	781a      	ldrb	r2, [r3, #0]
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80130dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	4a08      	ldr	r2, [pc, #32]	@ (8013104 <tcp_alloc+0x100>)
 80130e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4a07      	ldr	r2, [pc, #28]	@ (8013108 <tcp_alloc+0x104>)
 80130ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80130f0:	68fb      	ldr	r3, [r7, #12]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	2001266c 	.word	0x2001266c
 8013100:	20012682 	.word	0x20012682
 8013104:	08012dbd 	.word	0x08012dbd
 8013108:	006ddd00 	.word	0x006ddd00

0801310c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	4603      	mov	r3, r0
 8013114:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013116:	2040      	movs	r0, #64	@ 0x40
 8013118:	f7ff ff74 	bl	8013004 <tcp_alloc>
 801311c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801311e:	68fb      	ldr	r3, [r7, #12]
}
 8013120:	4618      	mov	r0, r3
 8013122:	3710      	adds	r7, #16
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d002      	beq.n	801313e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	683a      	ldr	r2, [r7, #0]
 801313c:	611a      	str	r2, [r3, #16]
  }
}
 801313e:	bf00      	nop
 8013140:	370c      	adds	r7, #12
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
	...

0801314c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d00e      	beq.n	801317a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	7d1b      	ldrb	r3, [r3, #20]
 8013160:	2b01      	cmp	r3, #1
 8013162:	d106      	bne.n	8013172 <tcp_recv+0x26>
 8013164:	4b07      	ldr	r3, [pc, #28]	@ (8013184 <tcp_recv+0x38>)
 8013166:	f240 72df 	movw	r2, #2015	@ 0x7df
 801316a:	4907      	ldr	r1, [pc, #28]	@ (8013188 <tcp_recv+0x3c>)
 801316c:	4807      	ldr	r0, [pc, #28]	@ (801318c <tcp_recv+0x40>)
 801316e:	f00b f923 	bl	801e3b8 <iprintf>
    pcb->recv = recv;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	683a      	ldr	r2, [r7, #0]
 8013176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801317a:	bf00      	nop
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	08023854 	.word	0x08023854
 8013188:	08023df0 	.word	0x08023df0
 801318c:	08023898 	.word	0x08023898

08013190 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00e      	beq.n	80131be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7d1b      	ldrb	r3, [r3, #20]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d106      	bne.n	80131b6 <tcp_sent+0x26>
 80131a8:	4b07      	ldr	r3, [pc, #28]	@ (80131c8 <tcp_sent+0x38>)
 80131aa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80131ae:	4907      	ldr	r1, [pc, #28]	@ (80131cc <tcp_sent+0x3c>)
 80131b0:	4807      	ldr	r0, [pc, #28]	@ (80131d0 <tcp_sent+0x40>)
 80131b2:	f00b f901 	bl	801e3b8 <iprintf>
    pcb->sent = sent;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	683a      	ldr	r2, [r7, #0]
 80131ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	08023854 	.word	0x08023854
 80131cc:	08023e18 	.word	0x08023e18
 80131d0:	08023898 	.word	0x08023898

080131d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00e      	beq.n	8013202 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	7d1b      	ldrb	r3, [r3, #20]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d106      	bne.n	80131fa <tcp_err+0x26>
 80131ec:	4b07      	ldr	r3, [pc, #28]	@ (801320c <tcp_err+0x38>)
 80131ee:	f640 020d 	movw	r2, #2061	@ 0x80d
 80131f2:	4907      	ldr	r1, [pc, #28]	@ (8013210 <tcp_err+0x3c>)
 80131f4:	4807      	ldr	r0, [pc, #28]	@ (8013214 <tcp_err+0x40>)
 80131f6:	f00b f8df 	bl	801e3b8 <iprintf>
    pcb->errf = err;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8013202:	bf00      	nop
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	08023854 	.word	0x08023854
 8013210:	08023e40 	.word	0x08023e40
 8013214:	08023898 	.word	0x08023898

08013218 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013218:	b480      	push	{r7}
 801321a:	b085      	sub	sp, #20
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d008      	beq.n	801323a <tcp_accept+0x22>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	7d1b      	ldrb	r3, [r3, #20]
 801322c:	2b01      	cmp	r3, #1
 801322e:	d104      	bne.n	801323a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	683a      	ldr	r2, [r7, #0]
 8013238:	619a      	str	r2, [r3, #24]
  }
}
 801323a:	bf00      	nop
 801323c:	3714      	adds	r7, #20
 801323e:	46bd      	mov	sp, r7
 8013240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013244:	4770      	bx	lr
	...

08013248 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	4613      	mov	r3, r2
 8013254:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d107      	bne.n	801326c <tcp_poll+0x24>
 801325c:	4b0e      	ldr	r3, [pc, #56]	@ (8013298 <tcp_poll+0x50>)
 801325e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8013262:	490e      	ldr	r1, [pc, #56]	@ (801329c <tcp_poll+0x54>)
 8013264:	480e      	ldr	r0, [pc, #56]	@ (80132a0 <tcp_poll+0x58>)
 8013266:	f00b f8a7 	bl	801e3b8 <iprintf>
 801326a:	e011      	b.n	8013290 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	2b01      	cmp	r3, #1
 8013272:	d106      	bne.n	8013282 <tcp_poll+0x3a>
 8013274:	4b08      	ldr	r3, [pc, #32]	@ (8013298 <tcp_poll+0x50>)
 8013276:	f640 023e 	movw	r2, #2110	@ 0x83e
 801327a:	490a      	ldr	r1, [pc, #40]	@ (80132a4 <tcp_poll+0x5c>)
 801327c:	4808      	ldr	r0, [pc, #32]	@ (80132a0 <tcp_poll+0x58>)
 801327e:	f00b f89b 	bl	801e3b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	68ba      	ldr	r2, [r7, #8]
 8013286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	79fa      	ldrb	r2, [r7, #7]
 801328e:	775a      	strb	r2, [r3, #29]
}
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	08023854 	.word	0x08023854
 801329c:	08023e68 	.word	0x08023e68
 80132a0:	08023898 	.word	0x08023898
 80132a4:	08023e80 	.word	0x08023e80

080132a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d107      	bne.n	80132c6 <tcp_pcb_purge+0x1e>
 80132b6:	4b21      	ldr	r3, [pc, #132]	@ (801333c <tcp_pcb_purge+0x94>)
 80132b8:	f640 0251 	movw	r2, #2129	@ 0x851
 80132bc:	4920      	ldr	r1, [pc, #128]	@ (8013340 <tcp_pcb_purge+0x98>)
 80132be:	4821      	ldr	r0, [pc, #132]	@ (8013344 <tcp_pcb_purge+0x9c>)
 80132c0:	f00b f87a 	bl	801e3b8 <iprintf>
 80132c4:	e037      	b.n	8013336 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	7d1b      	ldrb	r3, [r3, #20]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d033      	beq.n	8013336 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80132d2:	2b0a      	cmp	r3, #10
 80132d4:	d02f      	beq.n	8013336 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80132da:	2b01      	cmp	r3, #1
 80132dc:	d02b      	beq.n	8013336 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d007      	beq.n	80132f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fd ff7c 	bl	80111e8 <pbuf_free>
      pcb->refused_data = NULL;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2200      	movs	r2, #0
 80132f4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 f986 	bl	8013610 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801330a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013310:	4618      	mov	r0, r3
 8013312:	f7ff fcf9 	bl	8012d08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801331a:	4618      	mov	r0, r3
 801331c:	f7ff fcf4 	bl	8012d08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	08023854 	.word	0x08023854
 8013340:	08023ea0 	.word	0x08023ea0
 8013344:	08023898 	.word	0x08023898

08013348 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d106      	bne.n	8013366 <tcp_pcb_remove+0x1e>
 8013358:	4b3e      	ldr	r3, [pc, #248]	@ (8013454 <tcp_pcb_remove+0x10c>)
 801335a:	f640 0283 	movw	r2, #2179	@ 0x883
 801335e:	493e      	ldr	r1, [pc, #248]	@ (8013458 <tcp_pcb_remove+0x110>)
 8013360:	483e      	ldr	r0, [pc, #248]	@ (801345c <tcp_pcb_remove+0x114>)
 8013362:	f00b f829 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d106      	bne.n	801337a <tcp_pcb_remove+0x32>
 801336c:	4b39      	ldr	r3, [pc, #228]	@ (8013454 <tcp_pcb_remove+0x10c>)
 801336e:	f640 0284 	movw	r2, #2180	@ 0x884
 8013372:	493b      	ldr	r1, [pc, #236]	@ (8013460 <tcp_pcb_remove+0x118>)
 8013374:	4839      	ldr	r0, [pc, #228]	@ (801345c <tcp_pcb_remove+0x114>)
 8013376:	f00b f81f 	bl	801e3b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	683a      	ldr	r2, [r7, #0]
 8013380:	429a      	cmp	r2, r3
 8013382:	d105      	bne.n	8013390 <tcp_pcb_remove+0x48>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	68da      	ldr	r2, [r3, #12]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	e013      	b.n	80133b8 <tcp_pcb_remove+0x70>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	60fb      	str	r3, [r7, #12]
 8013396:	e00c      	b.n	80133b2 <tcp_pcb_remove+0x6a>
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d104      	bne.n	80133ac <tcp_pcb_remove+0x64>
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	68da      	ldr	r2, [r3, #12]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	60da      	str	r2, [r3, #12]
 80133aa:	e005      	b.n	80133b8 <tcp_pcb_remove+0x70>
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	60fb      	str	r3, [r7, #12]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d1ef      	bne.n	8013398 <tcp_pcb_remove+0x50>
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	2200      	movs	r2, #0
 80133bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80133be:	6838      	ldr	r0, [r7, #0]
 80133c0:	f7ff ff72 	bl	80132a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	7d1b      	ldrb	r3, [r3, #20]
 80133c8:	2b0a      	cmp	r3, #10
 80133ca:	d013      	beq.n	80133f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d00f      	beq.n	80133f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	8b5b      	ldrh	r3, [r3, #26]
 80133d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d009      	beq.n	80133f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	8b5b      	ldrh	r3, [r3, #26]
 80133e4:	f043 0302 	orr.w	r3, r3, #2
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133ee:	6838      	ldr	r0, [r7, #0]
 80133f0:	f003 fbc0 	bl	8016b74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	7d1b      	ldrb	r3, [r3, #20]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d020      	beq.n	801343e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013400:	2b00      	cmp	r3, #0
 8013402:	d006      	beq.n	8013412 <tcp_pcb_remove+0xca>
 8013404:	4b13      	ldr	r3, [pc, #76]	@ (8013454 <tcp_pcb_remove+0x10c>)
 8013406:	f640 0293 	movw	r2, #2195	@ 0x893
 801340a:	4916      	ldr	r1, [pc, #88]	@ (8013464 <tcp_pcb_remove+0x11c>)
 801340c:	4813      	ldr	r0, [pc, #76]	@ (801345c <tcp_pcb_remove+0x114>)
 801340e:	f00a ffd3 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013416:	2b00      	cmp	r3, #0
 8013418:	d006      	beq.n	8013428 <tcp_pcb_remove+0xe0>
 801341a:	4b0e      	ldr	r3, [pc, #56]	@ (8013454 <tcp_pcb_remove+0x10c>)
 801341c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013420:	4911      	ldr	r1, [pc, #68]	@ (8013468 <tcp_pcb_remove+0x120>)
 8013422:	480e      	ldr	r0, [pc, #56]	@ (801345c <tcp_pcb_remove+0x114>)
 8013424:	f00a ffc8 	bl	801e3b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801342c:	2b00      	cmp	r3, #0
 801342e:	d006      	beq.n	801343e <tcp_pcb_remove+0xf6>
 8013430:	4b08      	ldr	r3, [pc, #32]	@ (8013454 <tcp_pcb_remove+0x10c>)
 8013432:	f640 0296 	movw	r2, #2198	@ 0x896
 8013436:	490d      	ldr	r1, [pc, #52]	@ (801346c <tcp_pcb_remove+0x124>)
 8013438:	4808      	ldr	r0, [pc, #32]	@ (801345c <tcp_pcb_remove+0x114>)
 801343a:	f00a ffbd 	bl	801e3b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	2200      	movs	r2, #0
 8013442:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2200      	movs	r2, #0
 8013448:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801344a:	bf00      	nop
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	08023854 	.word	0x08023854
 8013458:	08023ebc 	.word	0x08023ebc
 801345c:	08023898 	.word	0x08023898
 8013460:	08023ed8 	.word	0x08023ed8
 8013464:	08023ef8 	.word	0x08023ef8
 8013468:	08023f10 	.word	0x08023f10
 801346c:	08023f2c 	.word	0x08023f2c

08013470 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d106      	bne.n	801348c <tcp_next_iss+0x1c>
 801347e:	4b0a      	ldr	r3, [pc, #40]	@ (80134a8 <tcp_next_iss+0x38>)
 8013480:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013484:	4909      	ldr	r1, [pc, #36]	@ (80134ac <tcp_next_iss+0x3c>)
 8013486:	480a      	ldr	r0, [pc, #40]	@ (80134b0 <tcp_next_iss+0x40>)
 8013488:	f00a ff96 	bl	801e3b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801348c:	4b09      	ldr	r3, [pc, #36]	@ (80134b4 <tcp_next_iss+0x44>)
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	4b09      	ldr	r3, [pc, #36]	@ (80134b8 <tcp_next_iss+0x48>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4413      	add	r3, r2
 8013496:	4a07      	ldr	r2, [pc, #28]	@ (80134b4 <tcp_next_iss+0x44>)
 8013498:	6013      	str	r3, [r2, #0]
  return iss;
 801349a:	4b06      	ldr	r3, [pc, #24]	@ (80134b4 <tcp_next_iss+0x44>)
 801349c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	08023854 	.word	0x08023854
 80134ac:	08023f44 	.word	0x08023f44
 80134b0:	08023898 	.word	0x08023898
 80134b4:	2000003c 	.word	0x2000003c
 80134b8:	2001266c 	.word	0x2001266c

080134bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	4603      	mov	r3, r0
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
 80134c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d106      	bne.n	80134de <tcp_eff_send_mss_netif+0x22>
 80134d0:	4b14      	ldr	r3, [pc, #80]	@ (8013524 <tcp_eff_send_mss_netif+0x68>)
 80134d2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80134d6:	4914      	ldr	r1, [pc, #80]	@ (8013528 <tcp_eff_send_mss_netif+0x6c>)
 80134d8:	4814      	ldr	r0, [pc, #80]	@ (801352c <tcp_eff_send_mss_netif+0x70>)
 80134da:	f00a ff6d 	bl	801e3b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d101      	bne.n	80134e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80134e4:	89fb      	ldrh	r3, [r7, #14]
 80134e6:	e019      	b.n	801351c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80134ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80134ee:	8afb      	ldrh	r3, [r7, #22]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d012      	beq.n	801351a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80134f4:	2328      	movs	r3, #40	@ 0x28
 80134f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80134f8:	8afa      	ldrh	r2, [r7, #22]
 80134fa:	8abb      	ldrh	r3, [r7, #20]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d904      	bls.n	801350a <tcp_eff_send_mss_netif+0x4e>
 8013500:	8afa      	ldrh	r2, [r7, #22]
 8013502:	8abb      	ldrh	r3, [r7, #20]
 8013504:	1ad3      	subs	r3, r2, r3
 8013506:	b29b      	uxth	r3, r3
 8013508:	e000      	b.n	801350c <tcp_eff_send_mss_netif+0x50>
 801350a:	2300      	movs	r3, #0
 801350c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801350e:	8a7a      	ldrh	r2, [r7, #18]
 8013510:	89fb      	ldrh	r3, [r7, #14]
 8013512:	4293      	cmp	r3, r2
 8013514:	bf28      	it	cs
 8013516:	4613      	movcs	r3, r2
 8013518:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801351a:	89fb      	ldrh	r3, [r7, #14]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	08023854 	.word	0x08023854
 8013528:	08023f60 	.word	0x08023f60
 801352c:	08023898 	.word	0x08023898

08013530 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d119      	bne.n	8013578 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013544:	4b10      	ldr	r3, [pc, #64]	@ (8013588 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013546:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801354a:	4910      	ldr	r1, [pc, #64]	@ (801358c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801354c:	4810      	ldr	r0, [pc, #64]	@ (8013590 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801354e:	f00a ff33 	bl	801e3b8 <iprintf>

  while (pcb != NULL) {
 8013552:	e011      	b.n	8013578 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	429a      	cmp	r2, r3
 801355e:	d108      	bne.n	8013572 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013566:	68f8      	ldr	r0, [r7, #12]
 8013568:	f7fe fd98 	bl	801209c <tcp_abort>
      pcb = next;
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	60fb      	str	r3, [r7, #12]
 8013570:	e002      	b.n	8013578 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1ea      	bne.n	8013554 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801357e:	bf00      	nop
 8013580:	bf00      	nop
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}
 8013588:	08023854 	.word	0x08023854
 801358c:	08023f88 	.word	0x08023f88
 8013590:	08023898 	.word	0x08023898

08013594 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d02a      	beq.n	80135fa <tcp_netif_ip_addr_changed+0x66>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d026      	beq.n	80135fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80135ac:	4b15      	ldr	r3, [pc, #84]	@ (8013604 <tcp_netif_ip_addr_changed+0x70>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4619      	mov	r1, r3
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f7ff ffbc 	bl	8013530 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80135b8:	4b13      	ldr	r3, [pc, #76]	@ (8013608 <tcp_netif_ip_addr_changed+0x74>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4619      	mov	r1, r3
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7ff ffb6 	bl	8013530 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d017      	beq.n	80135fa <tcp_netif_ip_addr_changed+0x66>
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d013      	beq.n	80135fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135d2:	4b0e      	ldr	r3, [pc, #56]	@ (801360c <tcp_netif_ip_addr_changed+0x78>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	60fb      	str	r3, [r7, #12]
 80135d8:	e00c      	b.n	80135f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d103      	bne.n	80135ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1ef      	bne.n	80135da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80135fa:	bf00      	nop
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	20012678 	.word	0x20012678
 8013608:	20012670 	.word	0x20012670
 801360c:	20012674 	.word	0x20012674

08013610 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801361c:	2b00      	cmp	r3, #0
 801361e:	d007      	beq.n	8013630 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013624:	4618      	mov	r0, r3
 8013626:	f7ff fb6f 	bl	8012d08 <tcp_segs_free>
    pcb->ooseq = NULL;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2200      	movs	r2, #0
 801362e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013630:	bf00      	nop
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b08d      	sub	sp, #52	@ 0x34
 801363c:	af04      	add	r7, sp, #16
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d105      	bne.n	8013654 <tcp_input+0x1c>
 8013648:	4b9b      	ldr	r3, [pc, #620]	@ (80138b8 <tcp_input+0x280>)
 801364a:	2283      	movs	r2, #131	@ 0x83
 801364c:	499b      	ldr	r1, [pc, #620]	@ (80138bc <tcp_input+0x284>)
 801364e:	489c      	ldr	r0, [pc, #624]	@ (80138c0 <tcp_input+0x288>)
 8013650:	f00a feb2 	bl	801e3b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	4a9a      	ldr	r2, [pc, #616]	@ (80138c4 <tcp_input+0x28c>)
 801365a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	895b      	ldrh	r3, [r3, #10]
 8013660:	2b13      	cmp	r3, #19
 8013662:	f240 83d1 	bls.w	8013e08 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013666:	4b98      	ldr	r3, [pc, #608]	@ (80138c8 <tcp_input+0x290>)
 8013668:	695b      	ldr	r3, [r3, #20]
 801366a:	4a97      	ldr	r2, [pc, #604]	@ (80138c8 <tcp_input+0x290>)
 801366c:	6812      	ldr	r2, [r2, #0]
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f008 fb5d 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	f040 83c7 	bne.w	8013e0c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801367e:	4b92      	ldr	r3, [pc, #584]	@ (80138c8 <tcp_input+0x290>)
 8013680:	695b      	ldr	r3, [r3, #20]
 8013682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013686:	2be0      	cmp	r3, #224	@ 0xe0
 8013688:	f000 83c0 	beq.w	8013e0c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801368c:	4b8d      	ldr	r3, [pc, #564]	@ (80138c4 <tcp_input+0x28c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	899b      	ldrh	r3, [r3, #12]
 8013692:	b29b      	uxth	r3, r3
 8013694:	4618      	mov	r0, r3
 8013696:	f7fb febb 	bl	800f410 <lwip_htons>
 801369a:	4603      	mov	r3, r0
 801369c:	0b1b      	lsrs	r3, r3, #12
 801369e:	b29b      	uxth	r3, r3
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80136a6:	7cbb      	ldrb	r3, [r7, #18]
 80136a8:	2b13      	cmp	r3, #19
 80136aa:	f240 83b1 	bls.w	8013e10 <tcp_input+0x7d8>
 80136ae:	7cbb      	ldrb	r3, [r7, #18]
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	891b      	ldrh	r3, [r3, #8]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	f200 83aa 	bhi.w	8013e10 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80136bc:	7cbb      	ldrb	r3, [r7, #18]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	3b14      	subs	r3, #20
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	4b81      	ldr	r3, [pc, #516]	@ (80138cc <tcp_input+0x294>)
 80136c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80136c8:	4b81      	ldr	r3, [pc, #516]	@ (80138d0 <tcp_input+0x298>)
 80136ca:	2200      	movs	r2, #0
 80136cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	895a      	ldrh	r2, [r3, #10]
 80136d2:	7cbb      	ldrb	r3, [r7, #18]
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d309      	bcc.n	80136ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80136da:	4b7c      	ldr	r3, [pc, #496]	@ (80138cc <tcp_input+0x294>)
 80136dc:	881a      	ldrh	r2, [r3, #0]
 80136de:	4b7d      	ldr	r3, [pc, #500]	@ (80138d4 <tcp_input+0x29c>)
 80136e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80136e2:	7cbb      	ldrb	r3, [r7, #18]
 80136e4:	4619      	mov	r1, r3
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f7fd fcf8 	bl	80110dc <pbuf_remove_header>
 80136ec:	e04e      	b.n	801378c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d105      	bne.n	8013702 <tcp_input+0xca>
 80136f6:	4b70      	ldr	r3, [pc, #448]	@ (80138b8 <tcp_input+0x280>)
 80136f8:	22c2      	movs	r2, #194	@ 0xc2
 80136fa:	4977      	ldr	r1, [pc, #476]	@ (80138d8 <tcp_input+0x2a0>)
 80136fc:	4870      	ldr	r0, [pc, #448]	@ (80138c0 <tcp_input+0x288>)
 80136fe:	f00a fe5b 	bl	801e3b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013702:	2114      	movs	r1, #20
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7fd fce9 	bl	80110dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	895a      	ldrh	r2, [r3, #10]
 801370e:	4b71      	ldr	r3, [pc, #452]	@ (80138d4 <tcp_input+0x29c>)
 8013710:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013712:	4b6e      	ldr	r3, [pc, #440]	@ (80138cc <tcp_input+0x294>)
 8013714:	881a      	ldrh	r2, [r3, #0]
 8013716:	4b6f      	ldr	r3, [pc, #444]	@ (80138d4 <tcp_input+0x29c>)
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801371e:	4b6d      	ldr	r3, [pc, #436]	@ (80138d4 <tcp_input+0x29c>)
 8013720:	881b      	ldrh	r3, [r3, #0]
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7fd fcd9 	bl	80110dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	895b      	ldrh	r3, [r3, #10]
 8013730:	8a3a      	ldrh	r2, [r7, #16]
 8013732:	429a      	cmp	r2, r3
 8013734:	f200 836e 	bhi.w	8013e14 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	4a64      	ldr	r2, [pc, #400]	@ (80138d0 <tcp_input+0x298>)
 8013740:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	8a3a      	ldrh	r2, [r7, #16]
 8013748:	4611      	mov	r1, r2
 801374a:	4618      	mov	r0, r3
 801374c:	f7fd fcc6 	bl	80110dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	891a      	ldrh	r2, [r3, #8]
 8013754:	8a3b      	ldrh	r3, [r7, #16]
 8013756:	1ad3      	subs	r3, r2, r3
 8013758:	b29a      	uxth	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	895b      	ldrh	r3, [r3, #10]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d005      	beq.n	8013772 <tcp_input+0x13a>
 8013766:	4b54      	ldr	r3, [pc, #336]	@ (80138b8 <tcp_input+0x280>)
 8013768:	22df      	movs	r2, #223	@ 0xdf
 801376a:	495c      	ldr	r1, [pc, #368]	@ (80138dc <tcp_input+0x2a4>)
 801376c:	4854      	ldr	r0, [pc, #336]	@ (80138c0 <tcp_input+0x288>)
 801376e:	f00a fe23 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	891a      	ldrh	r2, [r3, #8]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	891b      	ldrh	r3, [r3, #8]
 801377c:	429a      	cmp	r2, r3
 801377e:	d005      	beq.n	801378c <tcp_input+0x154>
 8013780:	4b4d      	ldr	r3, [pc, #308]	@ (80138b8 <tcp_input+0x280>)
 8013782:	22e0      	movs	r2, #224	@ 0xe0
 8013784:	4956      	ldr	r1, [pc, #344]	@ (80138e0 <tcp_input+0x2a8>)
 8013786:	484e      	ldr	r0, [pc, #312]	@ (80138c0 <tcp_input+0x288>)
 8013788:	f00a fe16 	bl	801e3b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801378c:	4b4d      	ldr	r3, [pc, #308]	@ (80138c4 <tcp_input+0x28c>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	b29b      	uxth	r3, r3
 8013794:	4a4b      	ldr	r2, [pc, #300]	@ (80138c4 <tcp_input+0x28c>)
 8013796:	6814      	ldr	r4, [r2, #0]
 8013798:	4618      	mov	r0, r3
 801379a:	f7fb fe39 	bl	800f410 <lwip_htons>
 801379e:	4603      	mov	r3, r0
 80137a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80137a2:	4b48      	ldr	r3, [pc, #288]	@ (80138c4 <tcp_input+0x28c>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	885b      	ldrh	r3, [r3, #2]
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	4a46      	ldr	r2, [pc, #280]	@ (80138c4 <tcp_input+0x28c>)
 80137ac:	6814      	ldr	r4, [r2, #0]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7fb fe2e 	bl	800f410 <lwip_htons>
 80137b4:	4603      	mov	r3, r0
 80137b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80137b8:	4b42      	ldr	r3, [pc, #264]	@ (80138c4 <tcp_input+0x28c>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	4a41      	ldr	r2, [pc, #260]	@ (80138c4 <tcp_input+0x28c>)
 80137c0:	6814      	ldr	r4, [r2, #0]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fb fe39 	bl	800f43a <lwip_htonl>
 80137c8:	4603      	mov	r3, r0
 80137ca:	6063      	str	r3, [r4, #4]
 80137cc:	6863      	ldr	r3, [r4, #4]
 80137ce:	4a45      	ldr	r2, [pc, #276]	@ (80138e4 <tcp_input+0x2ac>)
 80137d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80137d2:	4b3c      	ldr	r3, [pc, #240]	@ (80138c4 <tcp_input+0x28c>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	689b      	ldr	r3, [r3, #8]
 80137d8:	4a3a      	ldr	r2, [pc, #232]	@ (80138c4 <tcp_input+0x28c>)
 80137da:	6814      	ldr	r4, [r2, #0]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fb fe2c 	bl	800f43a <lwip_htonl>
 80137e2:	4603      	mov	r3, r0
 80137e4:	60a3      	str	r3, [r4, #8]
 80137e6:	68a3      	ldr	r3, [r4, #8]
 80137e8:	4a3f      	ldr	r2, [pc, #252]	@ (80138e8 <tcp_input+0x2b0>)
 80137ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80137ec:	4b35      	ldr	r3, [pc, #212]	@ (80138c4 <tcp_input+0x28c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	89db      	ldrh	r3, [r3, #14]
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	4a33      	ldr	r2, [pc, #204]	@ (80138c4 <tcp_input+0x28c>)
 80137f6:	6814      	ldr	r4, [r2, #0]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fb fe09 	bl	800f410 <lwip_htons>
 80137fe:	4603      	mov	r3, r0
 8013800:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013802:	4b30      	ldr	r3, [pc, #192]	@ (80138c4 <tcp_input+0x28c>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	899b      	ldrh	r3, [r3, #12]
 8013808:	b29b      	uxth	r3, r3
 801380a:	4618      	mov	r0, r3
 801380c:	f7fb fe00 	bl	800f410 <lwip_htons>
 8013810:	4603      	mov	r3, r0
 8013812:	b2db      	uxtb	r3, r3
 8013814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013818:	b2da      	uxtb	r2, r3
 801381a:	4b34      	ldr	r3, [pc, #208]	@ (80138ec <tcp_input+0x2b4>)
 801381c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	891a      	ldrh	r2, [r3, #8]
 8013822:	4b33      	ldr	r3, [pc, #204]	@ (80138f0 <tcp_input+0x2b8>)
 8013824:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013826:	4b31      	ldr	r3, [pc, #196]	@ (80138ec <tcp_input+0x2b4>)
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	f003 0303 	and.w	r3, r3, #3
 801382e:	2b00      	cmp	r3, #0
 8013830:	d00c      	beq.n	801384c <tcp_input+0x214>
    tcplen++;
 8013832:	4b2f      	ldr	r3, [pc, #188]	@ (80138f0 <tcp_input+0x2b8>)
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	3301      	adds	r3, #1
 8013838:	b29a      	uxth	r2, r3
 801383a:	4b2d      	ldr	r3, [pc, #180]	@ (80138f0 <tcp_input+0x2b8>)
 801383c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	891a      	ldrh	r2, [r3, #8]
 8013842:	4b2b      	ldr	r3, [pc, #172]	@ (80138f0 <tcp_input+0x2b8>)
 8013844:	881b      	ldrh	r3, [r3, #0]
 8013846:	429a      	cmp	r2, r3
 8013848:	f200 82e6 	bhi.w	8013e18 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801384c:	2300      	movs	r3, #0
 801384e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013850:	4b28      	ldr	r3, [pc, #160]	@ (80138f4 <tcp_input+0x2bc>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	61fb      	str	r3, [r7, #28]
 8013856:	e09d      	b.n	8013994 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	7d1b      	ldrb	r3, [r3, #20]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d105      	bne.n	801386c <tcp_input+0x234>
 8013860:	4b15      	ldr	r3, [pc, #84]	@ (80138b8 <tcp_input+0x280>)
 8013862:	22fb      	movs	r2, #251	@ 0xfb
 8013864:	4924      	ldr	r1, [pc, #144]	@ (80138f8 <tcp_input+0x2c0>)
 8013866:	4816      	ldr	r0, [pc, #88]	@ (80138c0 <tcp_input+0x288>)
 8013868:	f00a fda6 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	7d1b      	ldrb	r3, [r3, #20]
 8013870:	2b0a      	cmp	r3, #10
 8013872:	d105      	bne.n	8013880 <tcp_input+0x248>
 8013874:	4b10      	ldr	r3, [pc, #64]	@ (80138b8 <tcp_input+0x280>)
 8013876:	22fc      	movs	r2, #252	@ 0xfc
 8013878:	4920      	ldr	r1, [pc, #128]	@ (80138fc <tcp_input+0x2c4>)
 801387a:	4811      	ldr	r0, [pc, #68]	@ (80138c0 <tcp_input+0x288>)
 801387c:	f00a fd9c 	bl	801e3b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	7d1b      	ldrb	r3, [r3, #20]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d105      	bne.n	8013894 <tcp_input+0x25c>
 8013888:	4b0b      	ldr	r3, [pc, #44]	@ (80138b8 <tcp_input+0x280>)
 801388a:	22fd      	movs	r2, #253	@ 0xfd
 801388c:	491c      	ldr	r1, [pc, #112]	@ (8013900 <tcp_input+0x2c8>)
 801388e:	480c      	ldr	r0, [pc, #48]	@ (80138c0 <tcp_input+0x288>)
 8013890:	f00a fd92 	bl	801e3b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	7a1b      	ldrb	r3, [r3, #8]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d033      	beq.n	8013904 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	7a1a      	ldrb	r2, [r3, #8]
 80138a0:	4b09      	ldr	r3, [pc, #36]	@ (80138c8 <tcp_input+0x290>)
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80138a8:	3301      	adds	r3, #1
 80138aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d029      	beq.n	8013904 <tcp_input+0x2cc>
      prev = pcb;
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	61bb      	str	r3, [r7, #24]
      continue;
 80138b4:	e06b      	b.n	801398e <tcp_input+0x356>
 80138b6:	bf00      	nop
 80138b8:	08023fbc 	.word	0x08023fbc
 80138bc:	08023ff0 	.word	0x08023ff0
 80138c0:	08024008 	.word	0x08024008
 80138c4:	20012694 	.word	0x20012694
 80138c8:	2000edac 	.word	0x2000edac
 80138cc:	20012698 	.word	0x20012698
 80138d0:	2001269c 	.word	0x2001269c
 80138d4:	2001269a 	.word	0x2001269a
 80138d8:	08024030 	.word	0x08024030
 80138dc:	08024040 	.word	0x08024040
 80138e0:	0802404c 	.word	0x0802404c
 80138e4:	200126a4 	.word	0x200126a4
 80138e8:	200126a8 	.word	0x200126a8
 80138ec:	200126b0 	.word	0x200126b0
 80138f0:	200126ae 	.word	0x200126ae
 80138f4:	20012678 	.word	0x20012678
 80138f8:	0802406c 	.word	0x0802406c
 80138fc:	08024094 	.word	0x08024094
 8013900:	080240c0 	.word	0x080240c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	8b1a      	ldrh	r2, [r3, #24]
 8013908:	4b72      	ldr	r3, [pc, #456]	@ (8013ad4 <tcp_input+0x49c>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	b29b      	uxth	r3, r3
 8013910:	429a      	cmp	r2, r3
 8013912:	d13a      	bne.n	801398a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	8ada      	ldrh	r2, [r3, #22]
 8013918:	4b6e      	ldr	r3, [pc, #440]	@ (8013ad4 <tcp_input+0x49c>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	885b      	ldrh	r3, [r3, #2]
 801391e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013920:	429a      	cmp	r2, r3
 8013922:	d132      	bne.n	801398a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	685a      	ldr	r2, [r3, #4]
 8013928:	4b6b      	ldr	r3, [pc, #428]	@ (8013ad8 <tcp_input+0x4a0>)
 801392a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801392c:	429a      	cmp	r2, r3
 801392e:	d12c      	bne.n	801398a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	4b68      	ldr	r3, [pc, #416]	@ (8013ad8 <tcp_input+0x4a0>)
 8013936:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013938:	429a      	cmp	r2, r3
 801393a:	d126      	bne.n	801398a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	69fa      	ldr	r2, [r7, #28]
 8013942:	429a      	cmp	r2, r3
 8013944:	d106      	bne.n	8013954 <tcp_input+0x31c>
 8013946:	4b65      	ldr	r3, [pc, #404]	@ (8013adc <tcp_input+0x4a4>)
 8013948:	f240 120d 	movw	r2, #269	@ 0x10d
 801394c:	4964      	ldr	r1, [pc, #400]	@ (8013ae0 <tcp_input+0x4a8>)
 801394e:	4865      	ldr	r0, [pc, #404]	@ (8013ae4 <tcp_input+0x4ac>)
 8013950:	f00a fd32 	bl	801e3b8 <iprintf>
      if (prev != NULL) {
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00a      	beq.n	8013970 <tcp_input+0x338>
        prev->next = pcb->next;
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	68da      	ldr	r2, [r3, #12]
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013962:	4b61      	ldr	r3, [pc, #388]	@ (8013ae8 <tcp_input+0x4b0>)
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801396a:	4a5f      	ldr	r2, [pc, #380]	@ (8013ae8 <tcp_input+0x4b0>)
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	69fa      	ldr	r2, [r7, #28]
 8013976:	429a      	cmp	r2, r3
 8013978:	d111      	bne.n	801399e <tcp_input+0x366>
 801397a:	4b58      	ldr	r3, [pc, #352]	@ (8013adc <tcp_input+0x4a4>)
 801397c:	f240 1215 	movw	r2, #277	@ 0x115
 8013980:	495a      	ldr	r1, [pc, #360]	@ (8013aec <tcp_input+0x4b4>)
 8013982:	4858      	ldr	r0, [pc, #352]	@ (8013ae4 <tcp_input+0x4ac>)
 8013984:	f00a fd18 	bl	801e3b8 <iprintf>
      break;
 8013988:	e009      	b.n	801399e <tcp_input+0x366>
    }
    prev = pcb;
 801398a:	69fb      	ldr	r3, [r7, #28]
 801398c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	61fb      	str	r3, [r7, #28]
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	2b00      	cmp	r3, #0
 8013998:	f47f af5e 	bne.w	8013858 <tcp_input+0x220>
 801399c:	e000      	b.n	80139a0 <tcp_input+0x368>
      break;
 801399e:	bf00      	nop
  }

  if (pcb == NULL) {
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	f040 80aa 	bne.w	8013afc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139a8:	4b51      	ldr	r3, [pc, #324]	@ (8013af0 <tcp_input+0x4b8>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	61fb      	str	r3, [r7, #28]
 80139ae:	e03f      	b.n	8013a30 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	7d1b      	ldrb	r3, [r3, #20]
 80139b4:	2b0a      	cmp	r3, #10
 80139b6:	d006      	beq.n	80139c6 <tcp_input+0x38e>
 80139b8:	4b48      	ldr	r3, [pc, #288]	@ (8013adc <tcp_input+0x4a4>)
 80139ba:	f240 121f 	movw	r2, #287	@ 0x11f
 80139be:	494d      	ldr	r1, [pc, #308]	@ (8013af4 <tcp_input+0x4bc>)
 80139c0:	4848      	ldr	r0, [pc, #288]	@ (8013ae4 <tcp_input+0x4ac>)
 80139c2:	f00a fcf9 	bl	801e3b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139c6:	69fb      	ldr	r3, [r7, #28]
 80139c8:	7a1b      	ldrb	r3, [r3, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d009      	beq.n	80139e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	7a1a      	ldrb	r2, [r3, #8]
 80139d2:	4b41      	ldr	r3, [pc, #260]	@ (8013ad8 <tcp_input+0x4a0>)
 80139d4:	685b      	ldr	r3, [r3, #4]
 80139d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80139da:	3301      	adds	r3, #1
 80139dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139de:	429a      	cmp	r2, r3
 80139e0:	d122      	bne.n	8013a28 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	8b1a      	ldrh	r2, [r3, #24]
 80139e6:	4b3b      	ldr	r3, [pc, #236]	@ (8013ad4 <tcp_input+0x49c>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d11b      	bne.n	8013a2a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	8ada      	ldrh	r2, [r3, #22]
 80139f6:	4b37      	ldr	r3, [pc, #220]	@ (8013ad4 <tcp_input+0x49c>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	885b      	ldrh	r3, [r3, #2]
 80139fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d113      	bne.n	8013a2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	685a      	ldr	r2, [r3, #4]
 8013a06:	4b34      	ldr	r3, [pc, #208]	@ (8013ad8 <tcp_input+0x4a0>)
 8013a08:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d10d      	bne.n	8013a2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	4b31      	ldr	r3, [pc, #196]	@ (8013ad8 <tcp_input+0x4a0>)
 8013a14:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d107      	bne.n	8013a2a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013a1a:	69f8      	ldr	r0, [r7, #28]
 8013a1c:	f000 fb56 	bl	80140cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7fd fbe1 	bl	80111e8 <pbuf_free>
        return;
 8013a26:	e1fd      	b.n	8013e24 <tcp_input+0x7ec>
        continue;
 8013a28:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	61fb      	str	r3, [r7, #28]
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d1bc      	bne.n	80139b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013a36:	2300      	movs	r3, #0
 8013a38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8013af8 <tcp_input+0x4c0>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	617b      	str	r3, [r7, #20]
 8013a40:	e02a      	b.n	8013a98 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	7a1b      	ldrb	r3, [r3, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00c      	beq.n	8013a64 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	7a1a      	ldrb	r2, [r3, #8]
 8013a4e:	4b22      	ldr	r3, [pc, #136]	@ (8013ad8 <tcp_input+0x4a0>)
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013a56:	3301      	adds	r3, #1
 8013a58:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d002      	beq.n	8013a64 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	61bb      	str	r3, [r7, #24]
        continue;
 8013a62:	e016      	b.n	8013a92 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	8ada      	ldrh	r2, [r3, #22]
 8013a68:	4b1a      	ldr	r3, [pc, #104]	@ (8013ad4 <tcp_input+0x49c>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	885b      	ldrh	r3, [r3, #2]
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d10c      	bne.n	8013a8e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	4b17      	ldr	r3, [pc, #92]	@ (8013ad8 <tcp_input+0x4a0>)
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d00f      	beq.n	8013aa0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d00d      	beq.n	8013aa2 <tcp_input+0x46a>
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d009      	beq.n	8013aa2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	68db      	ldr	r3, [r3, #12]
 8013a96:	617b      	str	r3, [r7, #20]
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1d1      	bne.n	8013a42 <tcp_input+0x40a>
 8013a9e:	e000      	b.n	8013aa2 <tcp_input+0x46a>
            break;
 8013aa0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d029      	beq.n	8013afc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d00a      	beq.n	8013ac4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	68da      	ldr	r2, [r3, #12]
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013ab6:	4b10      	ldr	r3, [pc, #64]	@ (8013af8 <tcp_input+0x4c0>)
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013abe:	4a0e      	ldr	r2, [pc, #56]	@ (8013af8 <tcp_input+0x4c0>)
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013ac4:	6978      	ldr	r0, [r7, #20]
 8013ac6:	f000 fa03 	bl	8013ed0 <tcp_listen_input>
      }
      pbuf_free(p);
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7fd fb8c 	bl	80111e8 <pbuf_free>
      return;
 8013ad0:	e1a8      	b.n	8013e24 <tcp_input+0x7ec>
 8013ad2:	bf00      	nop
 8013ad4:	20012694 	.word	0x20012694
 8013ad8:	2000edac 	.word	0x2000edac
 8013adc:	08023fbc 	.word	0x08023fbc
 8013ae0:	080240e8 	.word	0x080240e8
 8013ae4:	08024008 	.word	0x08024008
 8013ae8:	20012678 	.word	0x20012678
 8013aec:	08024114 	.word	0x08024114
 8013af0:	2001267c 	.word	0x2001267c
 8013af4:	08024140 	.word	0x08024140
 8013af8:	20012674 	.word	0x20012674
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f000 8158 	beq.w	8013db4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b04:	4b95      	ldr	r3, [pc, #596]	@ (8013d5c <tcp_input+0x724>)
 8013b06:	2200      	movs	r2, #0
 8013b08:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	891a      	ldrh	r2, [r3, #8]
 8013b0e:	4b93      	ldr	r3, [pc, #588]	@ (8013d5c <tcp_input+0x724>)
 8013b10:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b12:	4a92      	ldr	r2, [pc, #584]	@ (8013d5c <tcp_input+0x724>)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b18:	4b91      	ldr	r3, [pc, #580]	@ (8013d60 <tcp_input+0x728>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4a8f      	ldr	r2, [pc, #572]	@ (8013d5c <tcp_input+0x724>)
 8013b1e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b20:	4b90      	ldr	r3, [pc, #576]	@ (8013d64 <tcp_input+0x72c>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013b26:	4b90      	ldr	r3, [pc, #576]	@ (8013d68 <tcp_input+0x730>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8013d6c <tcp_input+0x734>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013b32:	4b8f      	ldr	r3, [pc, #572]	@ (8013d70 <tcp_input+0x738>)
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	f003 0308 	and.w	r3, r3, #8
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d006      	beq.n	8013b4c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	7b5b      	ldrb	r3, [r3, #13]
 8013b42:	f043 0301 	orr.w	r3, r3, #1
 8013b46:	b2da      	uxtb	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d017      	beq.n	8013b84 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b54:	69f8      	ldr	r0, [r7, #28]
 8013b56:	f7ff f85b 	bl	8012c10 <tcp_process_refused_data>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	f113 0f0d 	cmn.w	r3, #13
 8013b60:	d007      	beq.n	8013b72 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d00c      	beq.n	8013b84 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b6a:	4b82      	ldr	r3, [pc, #520]	@ (8013d74 <tcp_input+0x73c>)
 8013b6c:	881b      	ldrh	r3, [r3, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d008      	beq.n	8013b84 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f040 80e3 	bne.w	8013d42 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013b7c:	69f8      	ldr	r0, [r7, #28]
 8013b7e:	f003 fdff 	bl	8017780 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013b82:	e0de      	b.n	8013d42 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013b84:	4a7c      	ldr	r2, [pc, #496]	@ (8013d78 <tcp_input+0x740>)
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013b8a:	69f8      	ldr	r0, [r7, #28]
 8013b8c:	f000 fb18 	bl	80141c0 <tcp_process>
 8013b90:	4603      	mov	r3, r0
 8013b92:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b98:	f113 0f0d 	cmn.w	r3, #13
 8013b9c:	f000 80d3 	beq.w	8013d46 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013ba0:	4b71      	ldr	r3, [pc, #452]	@ (8013d68 <tcp_input+0x730>)
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	f003 0308 	and.w	r3, r3, #8
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d015      	beq.n	8013bd8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d008      	beq.n	8013bc8 <tcp_input+0x590>
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013bbc:	69fa      	ldr	r2, [r7, #28]
 8013bbe:	6912      	ldr	r2, [r2, #16]
 8013bc0:	f06f 010d 	mvn.w	r1, #13
 8013bc4:	4610      	mov	r0, r2
 8013bc6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013bc8:	69f9      	ldr	r1, [r7, #28]
 8013bca:	486c      	ldr	r0, [pc, #432]	@ (8013d7c <tcp_input+0x744>)
 8013bcc:	f7ff fbbc 	bl	8013348 <tcp_pcb_remove>
        tcp_free(pcb);
 8013bd0:	69f8      	ldr	r0, [r7, #28]
 8013bd2:	f7fd ff1f 	bl	8011a14 <tcp_free>
 8013bd6:	e0da      	b.n	8013d8e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013bdc:	4b63      	ldr	r3, [pc, #396]	@ (8013d6c <tcp_input+0x734>)
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d01d      	beq.n	8013c20 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013be4:	4b61      	ldr	r3, [pc, #388]	@ (8013d6c <tcp_input+0x734>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00a      	beq.n	8013c0a <tcp_input+0x5d2>
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bfa:	69fa      	ldr	r2, [r7, #28]
 8013bfc:	6910      	ldr	r0, [r2, #16]
 8013bfe:	89fa      	ldrh	r2, [r7, #14]
 8013c00:	69f9      	ldr	r1, [r7, #28]
 8013c02:	4798      	blx	r3
 8013c04:	4603      	mov	r3, r0
 8013c06:	74fb      	strb	r3, [r7, #19]
 8013c08:	e001      	b.n	8013c0e <tcp_input+0x5d6>
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c12:	f113 0f0d 	cmn.w	r3, #13
 8013c16:	f000 8098 	beq.w	8013d4a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c1a:	4b54      	ldr	r3, [pc, #336]	@ (8013d6c <tcp_input+0x734>)
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013c20:	69f8      	ldr	r0, [r7, #28]
 8013c22:	f000 f915 	bl	8013e50 <tcp_input_delayed_close>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f040 8090 	bne.w	8013d4e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8013d64 <tcp_input+0x72c>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d041      	beq.n	8013cba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d006      	beq.n	8013c4c <tcp_input+0x614>
 8013c3e:	4b50      	ldr	r3, [pc, #320]	@ (8013d80 <tcp_input+0x748>)
 8013c40:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013c44:	494f      	ldr	r1, [pc, #316]	@ (8013d84 <tcp_input+0x74c>)
 8013c46:	4850      	ldr	r0, [pc, #320]	@ (8013d88 <tcp_input+0x750>)
 8013c48:	f00a fbb6 	bl	801e3b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	8b5b      	ldrh	r3, [r3, #26]
 8013c50:	f003 0310 	and.w	r3, r3, #16
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d008      	beq.n	8013c6a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013c58:	4b42      	ldr	r3, [pc, #264]	@ (8013d64 <tcp_input+0x72c>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7fd fac3 	bl	80111e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013c62:	69f8      	ldr	r0, [r7, #28]
 8013c64:	f7fe fa1a 	bl	801209c <tcp_abort>
            goto aborted;
 8013c68:	e091      	b.n	8013d8e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013c6a:	69fb      	ldr	r3, [r7, #28]
 8013c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d00c      	beq.n	8013c8e <tcp_input+0x656>
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	6918      	ldr	r0, [r3, #16]
 8013c7e:	4b39      	ldr	r3, [pc, #228]	@ (8013d64 <tcp_input+0x72c>)
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	2300      	movs	r3, #0
 8013c84:	69f9      	ldr	r1, [r7, #28]
 8013c86:	47a0      	blx	r4
 8013c88:	4603      	mov	r3, r0
 8013c8a:	74fb      	strb	r3, [r7, #19]
 8013c8c:	e008      	b.n	8013ca0 <tcp_input+0x668>
 8013c8e:	4b35      	ldr	r3, [pc, #212]	@ (8013d64 <tcp_input+0x72c>)
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	2300      	movs	r3, #0
 8013c94:	69f9      	ldr	r1, [r7, #28]
 8013c96:	2000      	movs	r0, #0
 8013c98:	f7ff f890 	bl	8012dbc <tcp_recv_null>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013ca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ca4:	f113 0f0d 	cmn.w	r3, #13
 8013ca8:	d053      	beq.n	8013d52 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013caa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d003      	beq.n	8013cba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8013d64 <tcp_input+0x72c>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013cba:	4b2b      	ldr	r3, [pc, #172]	@ (8013d68 <tcp_input+0x730>)
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	f003 0320 	and.w	r3, r3, #32
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d030      	beq.n	8013d28 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d009      	beq.n	8013ce2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cd2:	7b5a      	ldrb	r2, [r3, #13]
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cd8:	f042 0220 	orr.w	r2, r2, #32
 8013cdc:	b2d2      	uxtb	r2, r2
 8013cde:	735a      	strb	r2, [r3, #13]
 8013ce0:	e022      	b.n	8013d28 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ce6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013cea:	d005      	beq.n	8013cf8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d00b      	beq.n	8013d1a <tcp_input+0x6e2>
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	6918      	ldr	r0, [r3, #16]
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	2200      	movs	r2, #0
 8013d10:	69f9      	ldr	r1, [r7, #28]
 8013d12:	47a0      	blx	r4
 8013d14:	4603      	mov	r3, r0
 8013d16:	74fb      	strb	r3, [r7, #19]
 8013d18:	e001      	b.n	8013d1e <tcp_input+0x6e6>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d22:	f113 0f0d 	cmn.w	r3, #13
 8013d26:	d016      	beq.n	8013d56 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013d28:	4b13      	ldr	r3, [pc, #76]	@ (8013d78 <tcp_input+0x740>)
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013d2e:	69f8      	ldr	r0, [r7, #28]
 8013d30:	f000 f88e 	bl	8013e50 <tcp_input_delayed_close>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d128      	bne.n	8013d8c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013d3a:	69f8      	ldr	r0, [r7, #28]
 8013d3c:	f002 ff1a 	bl	8016b74 <tcp_output>
 8013d40:	e025      	b.n	8013d8e <tcp_input+0x756>
        goto aborted;
 8013d42:	bf00      	nop
 8013d44:	e023      	b.n	8013d8e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013d46:	bf00      	nop
 8013d48:	e021      	b.n	8013d8e <tcp_input+0x756>
              goto aborted;
 8013d4a:	bf00      	nop
 8013d4c:	e01f      	b.n	8013d8e <tcp_input+0x756>
          goto aborted;
 8013d4e:	bf00      	nop
 8013d50:	e01d      	b.n	8013d8e <tcp_input+0x756>
            goto aborted;
 8013d52:	bf00      	nop
 8013d54:	e01b      	b.n	8013d8e <tcp_input+0x756>
              goto aborted;
 8013d56:	bf00      	nop
 8013d58:	e019      	b.n	8013d8e <tcp_input+0x756>
 8013d5a:	bf00      	nop
 8013d5c:	20012684 	.word	0x20012684
 8013d60:	20012694 	.word	0x20012694
 8013d64:	200126b4 	.word	0x200126b4
 8013d68:	200126b1 	.word	0x200126b1
 8013d6c:	200126ac 	.word	0x200126ac
 8013d70:	200126b0 	.word	0x200126b0
 8013d74:	200126ae 	.word	0x200126ae
 8013d78:	200126b8 	.word	0x200126b8
 8013d7c:	20012678 	.word	0x20012678
 8013d80:	08023fbc 	.word	0x08023fbc
 8013d84:	08024170 	.word	0x08024170
 8013d88:	08024008 	.word	0x08024008
          goto aborted;
 8013d8c:	bf00      	nop
    tcp_input_pcb = NULL;
 8013d8e:	4b27      	ldr	r3, [pc, #156]	@ (8013e2c <tcp_input+0x7f4>)
 8013d90:	2200      	movs	r2, #0
 8013d92:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013d94:	4b26      	ldr	r3, [pc, #152]	@ (8013e30 <tcp_input+0x7f8>)
 8013d96:	2200      	movs	r2, #0
 8013d98:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013d9a:	4b26      	ldr	r3, [pc, #152]	@ (8013e34 <tcp_input+0x7fc>)
 8013d9c:	685b      	ldr	r3, [r3, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d03f      	beq.n	8013e22 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013da2:	4b24      	ldr	r3, [pc, #144]	@ (8013e34 <tcp_input+0x7fc>)
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fd fa1e 	bl	80111e8 <pbuf_free>
      inseg.p = NULL;
 8013dac:	4b21      	ldr	r3, [pc, #132]	@ (8013e34 <tcp_input+0x7fc>)
 8013dae:	2200      	movs	r2, #0
 8013db0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013db2:	e036      	b.n	8013e22 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013db4:	4b20      	ldr	r3, [pc, #128]	@ (8013e38 <tcp_input+0x800>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	899b      	ldrh	r3, [r3, #12]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fb fb27 	bl	800f410 <lwip_htons>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	f003 0304 	and.w	r3, r3, #4
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d118      	bne.n	8013e00 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dce:	4b1b      	ldr	r3, [pc, #108]	@ (8013e3c <tcp_input+0x804>)
 8013dd0:	6819      	ldr	r1, [r3, #0]
 8013dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e40 <tcp_input+0x808>)
 8013dd4:	881b      	ldrh	r3, [r3, #0]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8013e44 <tcp_input+0x80c>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dde:	4b16      	ldr	r3, [pc, #88]	@ (8013e38 <tcp_input+0x800>)
 8013de0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013de2:	885b      	ldrh	r3, [r3, #2]
 8013de4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013de6:	4a14      	ldr	r2, [pc, #80]	@ (8013e38 <tcp_input+0x800>)
 8013de8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dea:	8812      	ldrh	r2, [r2, #0]
 8013dec:	b292      	uxth	r2, r2
 8013dee:	9202      	str	r2, [sp, #8]
 8013df0:	9301      	str	r3, [sp, #4]
 8013df2:	4b15      	ldr	r3, [pc, #84]	@ (8013e48 <tcp_input+0x810>)
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	4b15      	ldr	r3, [pc, #84]	@ (8013e4c <tcp_input+0x814>)
 8013df8:	4602      	mov	r2, r0
 8013dfa:	2000      	movs	r0, #0
 8013dfc:	f003 fc6e 	bl	80176dc <tcp_rst>
    pbuf_free(p);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f7fd f9f1 	bl	80111e8 <pbuf_free>
  return;
 8013e06:	e00c      	b.n	8013e22 <tcp_input+0x7ea>
    goto dropped;
 8013e08:	bf00      	nop
 8013e0a:	e006      	b.n	8013e1a <tcp_input+0x7e2>
    goto dropped;
 8013e0c:	bf00      	nop
 8013e0e:	e004      	b.n	8013e1a <tcp_input+0x7e2>
    goto dropped;
 8013e10:	bf00      	nop
 8013e12:	e002      	b.n	8013e1a <tcp_input+0x7e2>
      goto dropped;
 8013e14:	bf00      	nop
 8013e16:	e000      	b.n	8013e1a <tcp_input+0x7e2>
      goto dropped;
 8013e18:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f7fd f9e4 	bl	80111e8 <pbuf_free>
 8013e20:	e000      	b.n	8013e24 <tcp_input+0x7ec>
  return;
 8013e22:	bf00      	nop
}
 8013e24:	3724      	adds	r7, #36	@ 0x24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd90      	pop	{r4, r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	200126b8 	.word	0x200126b8
 8013e30:	200126b4 	.word	0x200126b4
 8013e34:	20012684 	.word	0x20012684
 8013e38:	20012694 	.word	0x20012694
 8013e3c:	200126a8 	.word	0x200126a8
 8013e40:	200126ae 	.word	0x200126ae
 8013e44:	200126a4 	.word	0x200126a4
 8013e48:	2000edbc 	.word	0x2000edbc
 8013e4c:	2000edc0 	.word	0x2000edc0

08013e50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_input_delayed_close+0x1c>
 8013e5e:	4b17      	ldr	r3, [pc, #92]	@ (8013ebc <tcp_input_delayed_close+0x6c>)
 8013e60:	f240 225a 	movw	r2, #602	@ 0x25a
 8013e64:	4916      	ldr	r1, [pc, #88]	@ (8013ec0 <tcp_input_delayed_close+0x70>)
 8013e66:	4817      	ldr	r0, [pc, #92]	@ (8013ec4 <tcp_input_delayed_close+0x74>)
 8013e68:	f00a faa6 	bl	801e3b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013e6c:	4b16      	ldr	r3, [pc, #88]	@ (8013ec8 <tcp_input_delayed_close+0x78>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f003 0310 	and.w	r3, r3, #16
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d01c      	beq.n	8013eb2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	8b5b      	ldrh	r3, [r3, #26]
 8013e7c:	f003 0310 	and.w	r3, r3, #16
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10d      	bne.n	8013ea0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d008      	beq.n	8013ea0 <tcp_input_delayed_close+0x50>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	6912      	ldr	r2, [r2, #16]
 8013e98:	f06f 010e 	mvn.w	r1, #14
 8013e9c:	4610      	mov	r0, r2
 8013e9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013ea0:	6879      	ldr	r1, [r7, #4]
 8013ea2:	480a      	ldr	r0, [pc, #40]	@ (8013ecc <tcp_input_delayed_close+0x7c>)
 8013ea4:	f7ff fa50 	bl	8013348 <tcp_pcb_remove>
    tcp_free(pcb);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7fd fdb3 	bl	8011a14 <tcp_free>
    return 1;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	e000      	b.n	8013eb4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013eb2:	2300      	movs	r3, #0
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3708      	adds	r7, #8
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	08023fbc 	.word	0x08023fbc
 8013ec0:	0802418c 	.word	0x0802418c
 8013ec4:	08024008 	.word	0x08024008
 8013ec8:	200126b1 	.word	0x200126b1
 8013ecc:	20012678 	.word	0x20012678

08013ed0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013ed0:	b590      	push	{r4, r7, lr}
 8013ed2:	b08b      	sub	sp, #44	@ 0x2c
 8013ed4:	af04      	add	r7, sp, #16
 8013ed6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8014098 <tcp_listen_input+0x1c8>)
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	f003 0304 	and.w	r3, r3, #4
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f040 80d2 	bne.w	801408a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d106      	bne.n	8013efa <tcp_listen_input+0x2a>
 8013eec:	4b6b      	ldr	r3, [pc, #428]	@ (801409c <tcp_listen_input+0x1cc>)
 8013eee:	f240 2281 	movw	r2, #641	@ 0x281
 8013ef2:	496b      	ldr	r1, [pc, #428]	@ (80140a0 <tcp_listen_input+0x1d0>)
 8013ef4:	486b      	ldr	r0, [pc, #428]	@ (80140a4 <tcp_listen_input+0x1d4>)
 8013ef6:	f00a fa5f 	bl	801e3b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013efa:	4b67      	ldr	r3, [pc, #412]	@ (8014098 <tcp_listen_input+0x1c8>)
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	f003 0310 	and.w	r3, r3, #16
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d019      	beq.n	8013f3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f06:	4b68      	ldr	r3, [pc, #416]	@ (80140a8 <tcp_listen_input+0x1d8>)
 8013f08:	6819      	ldr	r1, [r3, #0]
 8013f0a:	4b68      	ldr	r3, [pc, #416]	@ (80140ac <tcp_listen_input+0x1dc>)
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	4b67      	ldr	r3, [pc, #412]	@ (80140b0 <tcp_listen_input+0x1e0>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f16:	4b67      	ldr	r3, [pc, #412]	@ (80140b4 <tcp_listen_input+0x1e4>)
 8013f18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f1a:	885b      	ldrh	r3, [r3, #2]
 8013f1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f1e:	4a65      	ldr	r2, [pc, #404]	@ (80140b4 <tcp_listen_input+0x1e4>)
 8013f20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f22:	8812      	ldrh	r2, [r2, #0]
 8013f24:	b292      	uxth	r2, r2
 8013f26:	9202      	str	r2, [sp, #8]
 8013f28:	9301      	str	r3, [sp, #4]
 8013f2a:	4b63      	ldr	r3, [pc, #396]	@ (80140b8 <tcp_listen_input+0x1e8>)
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	4b63      	ldr	r3, [pc, #396]	@ (80140bc <tcp_listen_input+0x1ec>)
 8013f30:	4602      	mov	r2, r0
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f003 fbd2 	bl	80176dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013f38:	e0a9      	b.n	801408e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013f3a:	4b57      	ldr	r3, [pc, #348]	@ (8014098 <tcp_listen_input+0x1c8>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	f003 0302 	and.w	r3, r3, #2
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 80a3 	beq.w	801408e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	7d5b      	ldrb	r3, [r3, #21]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7ff f859 	bl	8013004 <tcp_alloc>
 8013f52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d111      	bne.n	8013f7e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	699b      	ldr	r3, [r3, #24]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00a      	beq.n	8013f78 <tcp_listen_input+0xa8>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	6910      	ldr	r0, [r2, #16]
 8013f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f6e:	2100      	movs	r1, #0
 8013f70:	4798      	blx	r3
 8013f72:	4603      	mov	r3, r0
 8013f74:	73bb      	strb	r3, [r7, #14]
      return;
 8013f76:	e08b      	b.n	8014090 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f78:	23f0      	movs	r3, #240	@ 0xf0
 8013f7a:	73bb      	strb	r3, [r7, #14]
      return;
 8013f7c:	e088      	b.n	8014090 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013f7e:	4b50      	ldr	r3, [pc, #320]	@ (80140c0 <tcp_listen_input+0x1f0>)
 8013f80:	695a      	ldr	r2, [r3, #20]
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013f86:	4b4e      	ldr	r3, [pc, #312]	@ (80140c0 <tcp_listen_input+0x1f0>)
 8013f88:	691a      	ldr	r2, [r3, #16]
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	8ada      	ldrh	r2, [r3, #22]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013f96:	4b47      	ldr	r3, [pc, #284]	@ (80140b4 <tcp_listen_input+0x1e4>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	881b      	ldrh	r3, [r3, #0]
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	2203      	movs	r2, #3
 8013fa6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013fa8:	4b41      	ldr	r3, [pc, #260]	@ (80140b0 <tcp_listen_input+0x1e0>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	1c5a      	adds	r2, r3, #1
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8013fba:	6978      	ldr	r0, [r7, #20]
 8013fbc:	f7ff fa58 	bl	8013470 <tcp_next_iss>
 8013fc0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	693a      	ldr	r2, [r7, #16]
 8013fc6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	693a      	ldr	r2, [r7, #16]
 8013fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013fda:	4b35      	ldr	r3, [pc, #212]	@ (80140b0 <tcp_listen_input+0x1e0>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	1e5a      	subs	r2, r3, #1
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	691a      	ldr	r2, [r3, #16]
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	7a5b      	ldrb	r3, [r3, #9]
 8013ff6:	f003 030c 	and.w	r3, r3, #12
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	7a1a      	ldrb	r2, [r3, #8]
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014008:	4b2e      	ldr	r3, [pc, #184]	@ (80140c4 <tcp_listen_input+0x1f4>)
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	60da      	str	r2, [r3, #12]
 8014010:	4a2c      	ldr	r2, [pc, #176]	@ (80140c4 <tcp_listen_input+0x1f4>)
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	6013      	str	r3, [r2, #0]
 8014016:	f003 fd23 	bl	8017a60 <tcp_timer_needed>
 801401a:	4b2b      	ldr	r3, [pc, #172]	@ (80140c8 <tcp_listen_input+0x1f8>)
 801401c:	2201      	movs	r2, #1
 801401e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014020:	6978      	ldr	r0, [r7, #20]
 8014022:	f001 fd8b 	bl	8015b3c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014026:	4b23      	ldr	r3, [pc, #140]	@ (80140b4 <tcp_listen_input+0x1e4>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	89db      	ldrh	r3, [r3, #14]
 801402c:	b29a      	uxth	r2, r3
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	3304      	adds	r3, #4
 8014048:	4618      	mov	r0, r3
 801404a:	f007 fbbd 	bl	801b7c8 <ip4_route>
 801404e:	4601      	mov	r1, r0
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	3304      	adds	r3, #4
 8014054:	461a      	mov	r2, r3
 8014056:	4620      	mov	r0, r4
 8014058:	f7ff fa30 	bl	80134bc <tcp_eff_send_mss_netif>
 801405c:	4603      	mov	r3, r0
 801405e:	461a      	mov	r2, r3
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014064:	2112      	movs	r1, #18
 8014066:	6978      	ldr	r0, [r7, #20]
 8014068:	f002 fc96 	bl	8016998 <tcp_enqueue_flags>
 801406c:	4603      	mov	r3, r0
 801406e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d004      	beq.n	8014082 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014078:	2100      	movs	r1, #0
 801407a:	6978      	ldr	r0, [r7, #20]
 801407c:	f7fd ff50 	bl	8011f20 <tcp_abandon>
      return;
 8014080:	e006      	b.n	8014090 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014082:	6978      	ldr	r0, [r7, #20]
 8014084:	f002 fd76 	bl	8016b74 <tcp_output>
  return;
 8014088:	e001      	b.n	801408e <tcp_listen_input+0x1be>
    return;
 801408a:	bf00      	nop
 801408c:	e000      	b.n	8014090 <tcp_listen_input+0x1c0>
  return;
 801408e:	bf00      	nop
}
 8014090:	371c      	adds	r7, #28
 8014092:	46bd      	mov	sp, r7
 8014094:	bd90      	pop	{r4, r7, pc}
 8014096:	bf00      	nop
 8014098:	200126b0 	.word	0x200126b0
 801409c:	08023fbc 	.word	0x08023fbc
 80140a0:	080241b4 	.word	0x080241b4
 80140a4:	08024008 	.word	0x08024008
 80140a8:	200126a8 	.word	0x200126a8
 80140ac:	200126ae 	.word	0x200126ae
 80140b0:	200126a4 	.word	0x200126a4
 80140b4:	20012694 	.word	0x20012694
 80140b8:	2000edbc 	.word	0x2000edbc
 80140bc:	2000edc0 	.word	0x2000edc0
 80140c0:	2000edac 	.word	0x2000edac
 80140c4:	20012678 	.word	0x20012678
 80140c8:	20012680 	.word	0x20012680

080140cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af04      	add	r7, sp, #16
 80140d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80140d4:	4b2f      	ldr	r3, [pc, #188]	@ (8014194 <tcp_timewait_input+0xc8>)
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	f003 0304 	and.w	r3, r3, #4
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d153      	bne.n	8014188 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <tcp_timewait_input+0x28>
 80140e6:	4b2c      	ldr	r3, [pc, #176]	@ (8014198 <tcp_timewait_input+0xcc>)
 80140e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80140ec:	492b      	ldr	r1, [pc, #172]	@ (801419c <tcp_timewait_input+0xd0>)
 80140ee:	482c      	ldr	r0, [pc, #176]	@ (80141a0 <tcp_timewait_input+0xd4>)
 80140f0:	f00a f962 	bl	801e3b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80140f4:	4b27      	ldr	r3, [pc, #156]	@ (8014194 <tcp_timewait_input+0xc8>)
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	f003 0302 	and.w	r3, r3, #2
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d02a      	beq.n	8014156 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014100:	4b28      	ldr	r3, [pc, #160]	@ (80141a4 <tcp_timewait_input+0xd8>)
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014108:	1ad3      	subs	r3, r2, r3
 801410a:	2b00      	cmp	r3, #0
 801410c:	db2d      	blt.n	801416a <tcp_timewait_input+0x9e>
 801410e:	4b25      	ldr	r3, [pc, #148]	@ (80141a4 <tcp_timewait_input+0xd8>)
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014116:	6879      	ldr	r1, [r7, #4]
 8014118:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801411a:	440b      	add	r3, r1
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	dc23      	bgt.n	801416a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014122:	4b21      	ldr	r3, [pc, #132]	@ (80141a8 <tcp_timewait_input+0xdc>)
 8014124:	6819      	ldr	r1, [r3, #0]
 8014126:	4b21      	ldr	r3, [pc, #132]	@ (80141ac <tcp_timewait_input+0xe0>)
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	461a      	mov	r2, r3
 801412c:	4b1d      	ldr	r3, [pc, #116]	@ (80141a4 <tcp_timewait_input+0xd8>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014132:	4b1f      	ldr	r3, [pc, #124]	@ (80141b0 <tcp_timewait_input+0xe4>)
 8014134:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014136:	885b      	ldrh	r3, [r3, #2]
 8014138:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801413a:	4a1d      	ldr	r2, [pc, #116]	@ (80141b0 <tcp_timewait_input+0xe4>)
 801413c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801413e:	8812      	ldrh	r2, [r2, #0]
 8014140:	b292      	uxth	r2, r2
 8014142:	9202      	str	r2, [sp, #8]
 8014144:	9301      	str	r3, [sp, #4]
 8014146:	4b1b      	ldr	r3, [pc, #108]	@ (80141b4 <tcp_timewait_input+0xe8>)
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	4b1b      	ldr	r3, [pc, #108]	@ (80141b8 <tcp_timewait_input+0xec>)
 801414c:	4602      	mov	r2, r0
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f003 fac4 	bl	80176dc <tcp_rst>
      return;
 8014154:	e01b      	b.n	801418e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014156:	4b0f      	ldr	r3, [pc, #60]	@ (8014194 <tcp_timewait_input+0xc8>)
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d003      	beq.n	801416a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014162:	4b16      	ldr	r3, [pc, #88]	@ (80141bc <tcp_timewait_input+0xf0>)
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801416a:	4b10      	ldr	r3, [pc, #64]	@ (80141ac <tcp_timewait_input+0xe0>)
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00c      	beq.n	801418c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	8b5b      	ldrh	r3, [r3, #26]
 8014176:	f043 0302 	orr.w	r3, r3, #2
 801417a:	b29a      	uxth	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f002 fcf7 	bl	8016b74 <tcp_output>
  }
  return;
 8014186:	e001      	b.n	801418c <tcp_timewait_input+0xc0>
    return;
 8014188:	bf00      	nop
 801418a:	e000      	b.n	801418e <tcp_timewait_input+0xc2>
  return;
 801418c:	bf00      	nop
}
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	200126b0 	.word	0x200126b0
 8014198:	08023fbc 	.word	0x08023fbc
 801419c:	080241d4 	.word	0x080241d4
 80141a0:	08024008 	.word	0x08024008
 80141a4:	200126a4 	.word	0x200126a4
 80141a8:	200126a8 	.word	0x200126a8
 80141ac:	200126ae 	.word	0x200126ae
 80141b0:	20012694 	.word	0x20012694
 80141b4:	2000edbc 	.word	0x2000edbc
 80141b8:	2000edc0 	.word	0x2000edc0
 80141bc:	2001266c 	.word	0x2001266c

080141c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b08d      	sub	sp, #52	@ 0x34
 80141c4:	af04      	add	r7, sp, #16
 80141c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80141c8:	2300      	movs	r3, #0
 80141ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80141cc:	2300      	movs	r3, #0
 80141ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <tcp_process+0x24>
 80141d6:	4b9d      	ldr	r3, [pc, #628]	@ (801444c <tcp_process+0x28c>)
 80141d8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80141dc:	499c      	ldr	r1, [pc, #624]	@ (8014450 <tcp_process+0x290>)
 80141de:	489d      	ldr	r0, [pc, #628]	@ (8014454 <tcp_process+0x294>)
 80141e0:	f00a f8ea 	bl	801e3b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80141e4:	4b9c      	ldr	r3, [pc, #624]	@ (8014458 <tcp_process+0x298>)
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	f003 0304 	and.w	r3, r3, #4
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d04e      	beq.n	801428e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	7d1b      	ldrb	r3, [r3, #20]
 80141f4:	2b02      	cmp	r3, #2
 80141f6:	d108      	bne.n	801420a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141fc:	4b97      	ldr	r3, [pc, #604]	@ (801445c <tcp_process+0x29c>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	429a      	cmp	r2, r3
 8014202:	d123      	bne.n	801424c <tcp_process+0x8c>
        acceptable = 1;
 8014204:	2301      	movs	r3, #1
 8014206:	76fb      	strb	r3, [r7, #27]
 8014208:	e020      	b.n	801424c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801420e:	4b94      	ldr	r3, [pc, #592]	@ (8014460 <tcp_process+0x2a0>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	429a      	cmp	r2, r3
 8014214:	d102      	bne.n	801421c <tcp_process+0x5c>
        acceptable = 1;
 8014216:	2301      	movs	r3, #1
 8014218:	76fb      	strb	r3, [r7, #27]
 801421a:	e017      	b.n	801424c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801421c:	4b90      	ldr	r3, [pc, #576]	@ (8014460 <tcp_process+0x2a0>)
 801421e:	681a      	ldr	r2, [r3, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014224:	1ad3      	subs	r3, r2, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	db10      	blt.n	801424c <tcp_process+0x8c>
 801422a:	4b8d      	ldr	r3, [pc, #564]	@ (8014460 <tcp_process+0x2a0>)
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014232:	6879      	ldr	r1, [r7, #4]
 8014234:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014236:	440b      	add	r3, r1
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	2b00      	cmp	r3, #0
 801423c:	dc06      	bgt.n	801424c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0302 	orr.w	r3, r3, #2
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801424c:	7efb      	ldrb	r3, [r7, #27]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d01b      	beq.n	801428a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	7d1b      	ldrb	r3, [r3, #20]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <tcp_process+0xa8>
 801425a:	4b7c      	ldr	r3, [pc, #496]	@ (801444c <tcp_process+0x28c>)
 801425c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014260:	4980      	ldr	r1, [pc, #512]	@ (8014464 <tcp_process+0x2a4>)
 8014262:	487c      	ldr	r0, [pc, #496]	@ (8014454 <tcp_process+0x294>)
 8014264:	f00a f8a8 	bl	801e3b8 <iprintf>
      recv_flags |= TF_RESET;
 8014268:	4b7f      	ldr	r3, [pc, #508]	@ (8014468 <tcp_process+0x2a8>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f043 0308 	orr.w	r3, r3, #8
 8014270:	b2da      	uxtb	r2, r3
 8014272:	4b7d      	ldr	r3, [pc, #500]	@ (8014468 <tcp_process+0x2a8>)
 8014274:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	8b5b      	ldrh	r3, [r3, #26]
 801427a:	f023 0301 	bic.w	r3, r3, #1
 801427e:	b29a      	uxth	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014284:	f06f 030d 	mvn.w	r3, #13
 8014288:	e37a      	b.n	8014980 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801428a:	2300      	movs	r3, #0
 801428c:	e378      	b.n	8014980 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801428e:	4b72      	ldr	r3, [pc, #456]	@ (8014458 <tcp_process+0x298>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	f003 0302 	and.w	r3, r3, #2
 8014296:	2b00      	cmp	r3, #0
 8014298:	d010      	beq.n	80142bc <tcp_process+0xfc>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	7d1b      	ldrb	r3, [r3, #20]
 801429e:	2b02      	cmp	r3, #2
 80142a0:	d00c      	beq.n	80142bc <tcp_process+0xfc>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	7d1b      	ldrb	r3, [r3, #20]
 80142a6:	2b03      	cmp	r3, #3
 80142a8:	d008      	beq.n	80142bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	8b5b      	ldrh	r3, [r3, #26]
 80142ae:	f043 0302 	orr.w	r3, r3, #2
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80142b8:	2300      	movs	r3, #0
 80142ba:	e361      	b.n	8014980 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	8b5b      	ldrh	r3, [r3, #26]
 80142c0:	f003 0310 	and.w	r3, r3, #16
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d103      	bne.n	80142d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80142c8:	4b68      	ldr	r3, [pc, #416]	@ (801446c <tcp_process+0x2ac>)
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f001 fc2b 	bl	8015b3c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	7d1b      	ldrb	r3, [r3, #20]
 80142ea:	3b02      	subs	r3, #2
 80142ec:	2b07      	cmp	r3, #7
 80142ee:	f200 8337 	bhi.w	8014960 <tcp_process+0x7a0>
 80142f2:	a201      	add	r2, pc, #4	@ (adr r2, 80142f8 <tcp_process+0x138>)
 80142f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f8:	08014319 	.word	0x08014319
 80142fc:	08014549 	.word	0x08014549
 8014300:	080146c1 	.word	0x080146c1
 8014304:	080146eb 	.word	0x080146eb
 8014308:	0801480f 	.word	0x0801480f
 801430c:	080146c1 	.word	0x080146c1
 8014310:	0801489b 	.word	0x0801489b
 8014314:	0801492b 	.word	0x0801492b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014318:	4b4f      	ldr	r3, [pc, #316]	@ (8014458 <tcp_process+0x298>)
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f003 0310 	and.w	r3, r3, #16
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 80e4 	beq.w	80144ee <tcp_process+0x32e>
 8014326:	4b4c      	ldr	r3, [pc, #304]	@ (8014458 <tcp_process+0x298>)
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	f003 0302 	and.w	r3, r3, #2
 801432e:	2b00      	cmp	r3, #0
 8014330:	f000 80dd 	beq.w	80144ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014338:	1c5a      	adds	r2, r3, #1
 801433a:	4b48      	ldr	r3, [pc, #288]	@ (801445c <tcp_process+0x29c>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	f040 80d5 	bne.w	80144ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014344:	4b46      	ldr	r3, [pc, #280]	@ (8014460 <tcp_process+0x2a0>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	1c5a      	adds	r2, r3, #1
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014356:	4b41      	ldr	r3, [pc, #260]	@ (801445c <tcp_process+0x29c>)
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801435e:	4b44      	ldr	r3, [pc, #272]	@ (8014470 <tcp_process+0x2b0>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	89db      	ldrh	r3, [r3, #14]
 8014364:	b29a      	uxth	r2, r3
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014378:	4b39      	ldr	r3, [pc, #228]	@ (8014460 <tcp_process+0x2a0>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	1e5a      	subs	r2, r3, #1
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2204      	movs	r2, #4
 8014386:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	3304      	adds	r3, #4
 8014390:	4618      	mov	r0, r3
 8014392:	f007 fa19 	bl	801b7c8 <ip4_route>
 8014396:	4601      	mov	r1, r0
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	3304      	adds	r3, #4
 801439c:	461a      	mov	r2, r3
 801439e:	4620      	mov	r0, r4
 80143a0:	f7ff f88c 	bl	80134bc <tcp_eff_send_mss_netif>
 80143a4:	4603      	mov	r3, r0
 80143a6:	461a      	mov	r2, r3
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143b0:	009a      	lsls	r2, r3, #2
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80143bc:	428b      	cmp	r3, r1
 80143be:	bf38      	it	cc
 80143c0:	460b      	movcc	r3, r1
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d204      	bcs.n	80143d0 <tcp_process+0x210>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	e00d      	b.n	80143ec <tcp_process+0x22c>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143d4:	005b      	lsls	r3, r3, #1
 80143d6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80143da:	4293      	cmp	r3, r2
 80143dc:	d904      	bls.n	80143e8 <tcp_process+0x228>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	e001      	b.n	80143ec <tcp_process+0x22c>
 80143e8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d106      	bne.n	801440a <tcp_process+0x24a>
 80143fc:	4b13      	ldr	r3, [pc, #76]	@ (801444c <tcp_process+0x28c>)
 80143fe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014402:	491c      	ldr	r1, [pc, #112]	@ (8014474 <tcp_process+0x2b4>)
 8014404:	4813      	ldr	r0, [pc, #76]	@ (8014454 <tcp_process+0x294>)
 8014406:	f009 ffd7 	bl	801e3b8 <iprintf>
        --pcb->snd_queuelen;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014410:	3b01      	subs	r3, #1
 8014412:	b29a      	uxth	r2, r3
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801441e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d12a      	bne.n	801447c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801442a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d106      	bne.n	8014440 <tcp_process+0x280>
 8014432:	4b06      	ldr	r3, [pc, #24]	@ (801444c <tcp_process+0x28c>)
 8014434:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014438:	490f      	ldr	r1, [pc, #60]	@ (8014478 <tcp_process+0x2b8>)
 801443a:	4806      	ldr	r0, [pc, #24]	@ (8014454 <tcp_process+0x294>)
 801443c:	f009 ffbc 	bl	801e3b8 <iprintf>
          pcb->unsent = rseg->next;
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014448:	e01c      	b.n	8014484 <tcp_process+0x2c4>
 801444a:	bf00      	nop
 801444c:	08023fbc 	.word	0x08023fbc
 8014450:	080241f4 	.word	0x080241f4
 8014454:	08024008 	.word	0x08024008
 8014458:	200126b0 	.word	0x200126b0
 801445c:	200126a8 	.word	0x200126a8
 8014460:	200126a4 	.word	0x200126a4
 8014464:	08024210 	.word	0x08024210
 8014468:	200126b1 	.word	0x200126b1
 801446c:	2001266c 	.word	0x2001266c
 8014470:	20012694 	.word	0x20012694
 8014474:	08024230 	.word	0x08024230
 8014478:	08024248 	.word	0x08024248
        } else {
          pcb->unacked = rseg->next;
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014484:	69f8      	ldr	r0, [r7, #28]
 8014486:	f7fe fc54 	bl	8012d32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801448e:	2b00      	cmp	r3, #0
 8014490:	d104      	bne.n	801449c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014498:	861a      	strh	r2, [r3, #48]	@ 0x30
 801449a:	e006      	b.n	80144aa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2200      	movs	r2, #0
 80144a0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2200      	movs	r2, #0
 80144a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00a      	beq.n	80144ca <tcp_process+0x30a>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	6910      	ldr	r0, [r2, #16]
 80144be:	2200      	movs	r2, #0
 80144c0:	6879      	ldr	r1, [r7, #4]
 80144c2:	4798      	blx	r3
 80144c4:	4603      	mov	r3, r0
 80144c6:	76bb      	strb	r3, [r7, #26]
 80144c8:	e001      	b.n	80144ce <tcp_process+0x30e>
 80144ca:	2300      	movs	r3, #0
 80144cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80144ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80144d2:	f113 0f0d 	cmn.w	r3, #13
 80144d6:	d102      	bne.n	80144de <tcp_process+0x31e>
          return ERR_ABRT;
 80144d8:	f06f 030c 	mvn.w	r3, #12
 80144dc:	e250      	b.n	8014980 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	8b5b      	ldrh	r3, [r3, #26]
 80144e2:	f043 0302 	orr.w	r3, r3, #2
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80144ec:	e23a      	b.n	8014964 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80144ee:	4b98      	ldr	r3, [pc, #608]	@ (8014750 <tcp_process+0x590>)
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f003 0310 	and.w	r3, r3, #16
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f000 8234 	beq.w	8014964 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144fc:	4b95      	ldr	r3, [pc, #596]	@ (8014754 <tcp_process+0x594>)
 80144fe:	6819      	ldr	r1, [r3, #0]
 8014500:	4b95      	ldr	r3, [pc, #596]	@ (8014758 <tcp_process+0x598>)
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	461a      	mov	r2, r3
 8014506:	4b95      	ldr	r3, [pc, #596]	@ (801475c <tcp_process+0x59c>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801450c:	4b94      	ldr	r3, [pc, #592]	@ (8014760 <tcp_process+0x5a0>)
 801450e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014510:	885b      	ldrh	r3, [r3, #2]
 8014512:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014514:	4a92      	ldr	r2, [pc, #584]	@ (8014760 <tcp_process+0x5a0>)
 8014516:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014518:	8812      	ldrh	r2, [r2, #0]
 801451a:	b292      	uxth	r2, r2
 801451c:	9202      	str	r2, [sp, #8]
 801451e:	9301      	str	r3, [sp, #4]
 8014520:	4b90      	ldr	r3, [pc, #576]	@ (8014764 <tcp_process+0x5a4>)
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	4b90      	ldr	r3, [pc, #576]	@ (8014768 <tcp_process+0x5a8>)
 8014526:	4602      	mov	r2, r0
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f003 f8d7 	bl	80176dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014534:	2b05      	cmp	r3, #5
 8014536:	f200 8215 	bhi.w	8014964 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2200      	movs	r2, #0
 801453e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f002 fea3 	bl	801728c <tcp_rexmit_rto>
      break;
 8014546:	e20d      	b.n	8014964 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014548:	4b81      	ldr	r3, [pc, #516]	@ (8014750 <tcp_process+0x590>)
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	f003 0310 	and.w	r3, r3, #16
 8014550:	2b00      	cmp	r3, #0
 8014552:	f000 80a1 	beq.w	8014698 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014556:	4b7f      	ldr	r3, [pc, #508]	@ (8014754 <tcp_process+0x594>)
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801455e:	1ad3      	subs	r3, r2, r3
 8014560:	3b01      	subs	r3, #1
 8014562:	2b00      	cmp	r3, #0
 8014564:	db7e      	blt.n	8014664 <tcp_process+0x4a4>
 8014566:	4b7b      	ldr	r3, [pc, #492]	@ (8014754 <tcp_process+0x594>)
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801456e:	1ad3      	subs	r3, r2, r3
 8014570:	2b00      	cmp	r3, #0
 8014572:	dc77      	bgt.n	8014664 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2204      	movs	r2, #4
 8014578:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801457e:	2b00      	cmp	r3, #0
 8014580:	d102      	bne.n	8014588 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014582:	23fa      	movs	r3, #250	@ 0xfa
 8014584:	76bb      	strb	r3, [r7, #26]
 8014586:	e01d      	b.n	80145c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801458c:	699b      	ldr	r3, [r3, #24]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <tcp_process+0x3e0>
 8014592:	4b76      	ldr	r3, [pc, #472]	@ (801476c <tcp_process+0x5ac>)
 8014594:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014598:	4975      	ldr	r1, [pc, #468]	@ (8014770 <tcp_process+0x5b0>)
 801459a:	4876      	ldr	r0, [pc, #472]	@ (8014774 <tcp_process+0x5b4>)
 801459c:	f009 ff0c 	bl	801e3b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145a4:	699b      	ldr	r3, [r3, #24]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d00a      	beq.n	80145c0 <tcp_process+0x400>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145ae:	699b      	ldr	r3, [r3, #24]
 80145b0:	687a      	ldr	r2, [r7, #4]
 80145b2:	6910      	ldr	r0, [r2, #16]
 80145b4:	2200      	movs	r2, #0
 80145b6:	6879      	ldr	r1, [r7, #4]
 80145b8:	4798      	blx	r3
 80145ba:	4603      	mov	r3, r0
 80145bc:	76bb      	strb	r3, [r7, #26]
 80145be:	e001      	b.n	80145c4 <tcp_process+0x404>
 80145c0:	23f0      	movs	r3, #240	@ 0xf0
 80145c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80145c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d00a      	beq.n	80145e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80145cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145d0:	f113 0f0d 	cmn.w	r3, #13
 80145d4:	d002      	beq.n	80145dc <tcp_process+0x41c>
              tcp_abort(pcb);
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f7fd fd60 	bl	801209c <tcp_abort>
            }
            return ERR_ABRT;
 80145dc:	f06f 030c 	mvn.w	r3, #12
 80145e0:	e1ce      	b.n	8014980 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fae0 	bl	8014ba8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80145e8:	4b63      	ldr	r3, [pc, #396]	@ (8014778 <tcp_process+0x5b8>)
 80145ea:	881b      	ldrh	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d005      	beq.n	80145fc <tcp_process+0x43c>
            recv_acked--;
 80145f0:	4b61      	ldr	r3, [pc, #388]	@ (8014778 <tcp_process+0x5b8>)
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	3b01      	subs	r3, #1
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	4b5f      	ldr	r3, [pc, #380]	@ (8014778 <tcp_process+0x5b8>)
 80145fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014600:	009a      	lsls	r2, r3, #2
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	f241 111c 	movw	r1, #4380	@ 0x111c
 801460c:	428b      	cmp	r3, r1
 801460e:	bf38      	it	cc
 8014610:	460b      	movcc	r3, r1
 8014612:	429a      	cmp	r2, r3
 8014614:	d204      	bcs.n	8014620 <tcp_process+0x460>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	b29b      	uxth	r3, r3
 801461e:	e00d      	b.n	801463c <tcp_process+0x47c>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	f241 121c 	movw	r2, #4380	@ 0x111c
 801462a:	4293      	cmp	r3, r2
 801462c:	d904      	bls.n	8014638 <tcp_process+0x478>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014632:	005b      	lsls	r3, r3, #1
 8014634:	b29b      	uxth	r3, r3
 8014636:	e001      	b.n	801463c <tcp_process+0x47c>
 8014638:	f241 131c 	movw	r3, #4380	@ 0x111c
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014642:	4b4e      	ldr	r3, [pc, #312]	@ (801477c <tcp_process+0x5bc>)
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	f003 0320 	and.w	r3, r3, #32
 801464a:	2b00      	cmp	r3, #0
 801464c:	d037      	beq.n	80146be <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	8b5b      	ldrh	r3, [r3, #26]
 8014652:	f043 0302 	orr.w	r3, r3, #2
 8014656:	b29a      	uxth	r2, r3
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2207      	movs	r2, #7
 8014660:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014662:	e02c      	b.n	80146be <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014664:	4b3b      	ldr	r3, [pc, #236]	@ (8014754 <tcp_process+0x594>)
 8014666:	6819      	ldr	r1, [r3, #0]
 8014668:	4b3b      	ldr	r3, [pc, #236]	@ (8014758 <tcp_process+0x598>)
 801466a:	881b      	ldrh	r3, [r3, #0]
 801466c:	461a      	mov	r2, r3
 801466e:	4b3b      	ldr	r3, [pc, #236]	@ (801475c <tcp_process+0x59c>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014674:	4b3a      	ldr	r3, [pc, #232]	@ (8014760 <tcp_process+0x5a0>)
 8014676:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014678:	885b      	ldrh	r3, [r3, #2]
 801467a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801467c:	4a38      	ldr	r2, [pc, #224]	@ (8014760 <tcp_process+0x5a0>)
 801467e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014680:	8812      	ldrh	r2, [r2, #0]
 8014682:	b292      	uxth	r2, r2
 8014684:	9202      	str	r2, [sp, #8]
 8014686:	9301      	str	r3, [sp, #4]
 8014688:	4b36      	ldr	r3, [pc, #216]	@ (8014764 <tcp_process+0x5a4>)
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	4b36      	ldr	r3, [pc, #216]	@ (8014768 <tcp_process+0x5a8>)
 801468e:	4602      	mov	r2, r0
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f003 f823 	bl	80176dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014696:	e167      	b.n	8014968 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014698:	4b2d      	ldr	r3, [pc, #180]	@ (8014750 <tcp_process+0x590>)
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	f003 0302 	and.w	r3, r3, #2
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	f000 8161 	beq.w	8014968 <tcp_process+0x7a8>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146aa:	1e5a      	subs	r2, r3, #1
 80146ac:	4b2b      	ldr	r3, [pc, #172]	@ (801475c <tcp_process+0x59c>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	f040 8159 	bne.w	8014968 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f002 fe0a 	bl	80172d0 <tcp_rexmit>
      break;
 80146bc:	e154      	b.n	8014968 <tcp_process+0x7a8>
 80146be:	e153      	b.n	8014968 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f000 fa71 	bl	8014ba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80146c6:	4b2d      	ldr	r3, [pc, #180]	@ (801477c <tcp_process+0x5bc>)
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	f003 0320 	and.w	r3, r3, #32
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f000 814c 	beq.w	801496c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	8b5b      	ldrh	r3, [r3, #26]
 80146d8:	f043 0302 	orr.w	r3, r3, #2
 80146dc:	b29a      	uxth	r2, r3
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2207      	movs	r2, #7
 80146e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80146e8:	e140      	b.n	801496c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 fa5c 	bl	8014ba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80146f0:	4b22      	ldr	r3, [pc, #136]	@ (801477c <tcp_process+0x5bc>)
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 0320 	and.w	r3, r3, #32
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d071      	beq.n	80147e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80146fc:	4b14      	ldr	r3, [pc, #80]	@ (8014750 <tcp_process+0x590>)
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	f003 0310 	and.w	r3, r3, #16
 8014704:	2b00      	cmp	r3, #0
 8014706:	d060      	beq.n	80147ca <tcp_process+0x60a>
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801470c:	4b11      	ldr	r3, [pc, #68]	@ (8014754 <tcp_process+0x594>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	429a      	cmp	r2, r3
 8014712:	d15a      	bne.n	80147ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014718:	2b00      	cmp	r3, #0
 801471a:	d156      	bne.n	80147ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f043 0302 	orr.w	r3, r3, #2
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7fe fdbc 	bl	80132a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014730:	4b13      	ldr	r3, [pc, #76]	@ (8014780 <tcp_process+0x5c0>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	429a      	cmp	r2, r3
 8014738:	d105      	bne.n	8014746 <tcp_process+0x586>
 801473a:	4b11      	ldr	r3, [pc, #68]	@ (8014780 <tcp_process+0x5c0>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	4a0f      	ldr	r2, [pc, #60]	@ (8014780 <tcp_process+0x5c0>)
 8014742:	6013      	str	r3, [r2, #0]
 8014744:	e02e      	b.n	80147a4 <tcp_process+0x5e4>
 8014746:	4b0e      	ldr	r3, [pc, #56]	@ (8014780 <tcp_process+0x5c0>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	617b      	str	r3, [r7, #20]
 801474c:	e027      	b.n	801479e <tcp_process+0x5de>
 801474e:	bf00      	nop
 8014750:	200126b0 	.word	0x200126b0
 8014754:	200126a8 	.word	0x200126a8
 8014758:	200126ae 	.word	0x200126ae
 801475c:	200126a4 	.word	0x200126a4
 8014760:	20012694 	.word	0x20012694
 8014764:	2000edbc 	.word	0x2000edbc
 8014768:	2000edc0 	.word	0x2000edc0
 801476c:	08023fbc 	.word	0x08023fbc
 8014770:	0802425c 	.word	0x0802425c
 8014774:	08024008 	.word	0x08024008
 8014778:	200126ac 	.word	0x200126ac
 801477c:	200126b1 	.word	0x200126b1
 8014780:	20012678 	.word	0x20012678
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	429a      	cmp	r2, r3
 801478c:	d104      	bne.n	8014798 <tcp_process+0x5d8>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	68da      	ldr	r2, [r3, #12]
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	60da      	str	r2, [r3, #12]
 8014796:	e005      	b.n	80147a4 <tcp_process+0x5e4>
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	617b      	str	r3, [r7, #20]
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d1ef      	bne.n	8014784 <tcp_process+0x5c4>
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	60da      	str	r2, [r3, #12]
 80147aa:	4b77      	ldr	r3, [pc, #476]	@ (8014988 <tcp_process+0x7c8>)
 80147ac:	2201      	movs	r2, #1
 80147ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	220a      	movs	r2, #10
 80147b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80147b6:	4b75      	ldr	r3, [pc, #468]	@ (801498c <tcp_process+0x7cc>)
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	60da      	str	r2, [r3, #12]
 80147be:	4a73      	ldr	r2, [pc, #460]	@ (801498c <tcp_process+0x7cc>)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6013      	str	r3, [r2, #0]
 80147c4:	f003 f94c 	bl	8017a60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80147c8:	e0d2      	b.n	8014970 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	8b5b      	ldrh	r3, [r3, #26]
 80147ce:	f043 0302 	orr.w	r3, r3, #2
 80147d2:	b29a      	uxth	r2, r3
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2208      	movs	r2, #8
 80147dc:	751a      	strb	r2, [r3, #20]
      break;
 80147de:	e0c7      	b.n	8014970 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147e0:	4b6b      	ldr	r3, [pc, #428]	@ (8014990 <tcp_process+0x7d0>)
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	f003 0310 	and.w	r3, r3, #16
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f000 80c1 	beq.w	8014970 <tcp_process+0x7b0>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147f2:	4b68      	ldr	r3, [pc, #416]	@ (8014994 <tcp_process+0x7d4>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	f040 80ba 	bne.w	8014970 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014800:	2b00      	cmp	r3, #0
 8014802:	f040 80b5 	bne.w	8014970 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2206      	movs	r2, #6
 801480a:	751a      	strb	r2, [r3, #20]
      break;
 801480c:	e0b0      	b.n	8014970 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 f9ca 	bl	8014ba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014814:	4b60      	ldr	r3, [pc, #384]	@ (8014998 <tcp_process+0x7d8>)
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	f003 0320 	and.w	r3, r3, #32
 801481c:	2b00      	cmp	r3, #0
 801481e:	f000 80a9 	beq.w	8014974 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	8b5b      	ldrh	r3, [r3, #26]
 8014826:	f043 0302 	orr.w	r3, r3, #2
 801482a:	b29a      	uxth	r2, r3
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7fe fd39 	bl	80132a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014836:	4b59      	ldr	r3, [pc, #356]	@ (801499c <tcp_process+0x7dc>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	429a      	cmp	r2, r3
 801483e:	d105      	bne.n	801484c <tcp_process+0x68c>
 8014840:	4b56      	ldr	r3, [pc, #344]	@ (801499c <tcp_process+0x7dc>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	4a55      	ldr	r2, [pc, #340]	@ (801499c <tcp_process+0x7dc>)
 8014848:	6013      	str	r3, [r2, #0]
 801484a:	e013      	b.n	8014874 <tcp_process+0x6b4>
 801484c:	4b53      	ldr	r3, [pc, #332]	@ (801499c <tcp_process+0x7dc>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	613b      	str	r3, [r7, #16]
 8014852:	e00c      	b.n	801486e <tcp_process+0x6ae>
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	429a      	cmp	r2, r3
 801485c:	d104      	bne.n	8014868 <tcp_process+0x6a8>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	68da      	ldr	r2, [r3, #12]
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	60da      	str	r2, [r3, #12]
 8014866:	e005      	b.n	8014874 <tcp_process+0x6b4>
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	613b      	str	r3, [r7, #16]
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d1ef      	bne.n	8014854 <tcp_process+0x694>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2200      	movs	r2, #0
 8014878:	60da      	str	r2, [r3, #12]
 801487a:	4b43      	ldr	r3, [pc, #268]	@ (8014988 <tcp_process+0x7c8>)
 801487c:	2201      	movs	r2, #1
 801487e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	220a      	movs	r2, #10
 8014884:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014886:	4b41      	ldr	r3, [pc, #260]	@ (801498c <tcp_process+0x7cc>)
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	60da      	str	r2, [r3, #12]
 801488e:	4a3f      	ldr	r2, [pc, #252]	@ (801498c <tcp_process+0x7cc>)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6013      	str	r3, [r2, #0]
 8014894:	f003 f8e4 	bl	8017a60 <tcp_timer_needed>
      }
      break;
 8014898:	e06c      	b.n	8014974 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 f984 	bl	8014ba8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80148a0:	4b3b      	ldr	r3, [pc, #236]	@ (8014990 <tcp_process+0x7d0>)
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	f003 0310 	and.w	r3, r3, #16
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d065      	beq.n	8014978 <tcp_process+0x7b8>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80148b0:	4b38      	ldr	r3, [pc, #224]	@ (8014994 <tcp_process+0x7d4>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d15f      	bne.n	8014978 <tcp_process+0x7b8>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d15b      	bne.n	8014978 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7fe fcf1 	bl	80132a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148c6:	4b35      	ldr	r3, [pc, #212]	@ (801499c <tcp_process+0x7dc>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d105      	bne.n	80148dc <tcp_process+0x71c>
 80148d0:	4b32      	ldr	r3, [pc, #200]	@ (801499c <tcp_process+0x7dc>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	4a31      	ldr	r2, [pc, #196]	@ (801499c <tcp_process+0x7dc>)
 80148d8:	6013      	str	r3, [r2, #0]
 80148da:	e013      	b.n	8014904 <tcp_process+0x744>
 80148dc:	4b2f      	ldr	r3, [pc, #188]	@ (801499c <tcp_process+0x7dc>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	60fb      	str	r3, [r7, #12]
 80148e2:	e00c      	b.n	80148fe <tcp_process+0x73e>
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d104      	bne.n	80148f8 <tcp_process+0x738>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	68da      	ldr	r2, [r3, #12]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	60da      	str	r2, [r3, #12]
 80148f6:	e005      	b.n	8014904 <tcp_process+0x744>
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	60fb      	str	r3, [r7, #12]
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d1ef      	bne.n	80148e4 <tcp_process+0x724>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	60da      	str	r2, [r3, #12]
 801490a:	4b1f      	ldr	r3, [pc, #124]	@ (8014988 <tcp_process+0x7c8>)
 801490c:	2201      	movs	r2, #1
 801490e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	220a      	movs	r2, #10
 8014914:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014916:	4b1d      	ldr	r3, [pc, #116]	@ (801498c <tcp_process+0x7cc>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	60da      	str	r2, [r3, #12]
 801491e:	4a1b      	ldr	r2, [pc, #108]	@ (801498c <tcp_process+0x7cc>)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	f003 f89c 	bl	8017a60 <tcp_timer_needed>
      }
      break;
 8014928:	e026      	b.n	8014978 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 f93c 	bl	8014ba8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014930:	4b17      	ldr	r3, [pc, #92]	@ (8014990 <tcp_process+0x7d0>)
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	f003 0310 	and.w	r3, r3, #16
 8014938:	2b00      	cmp	r3, #0
 801493a:	d01f      	beq.n	801497c <tcp_process+0x7bc>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014940:	4b14      	ldr	r3, [pc, #80]	@ (8014994 <tcp_process+0x7d4>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	429a      	cmp	r2, r3
 8014946:	d119      	bne.n	801497c <tcp_process+0x7bc>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801494c:	2b00      	cmp	r3, #0
 801494e:	d115      	bne.n	801497c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014950:	4b11      	ldr	r3, [pc, #68]	@ (8014998 <tcp_process+0x7d8>)
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f043 0310 	orr.w	r3, r3, #16
 8014958:	b2da      	uxtb	r2, r3
 801495a:	4b0f      	ldr	r3, [pc, #60]	@ (8014998 <tcp_process+0x7d8>)
 801495c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801495e:	e00d      	b.n	801497c <tcp_process+0x7bc>
    default:
      break;
 8014960:	bf00      	nop
 8014962:	e00c      	b.n	801497e <tcp_process+0x7be>
      break;
 8014964:	bf00      	nop
 8014966:	e00a      	b.n	801497e <tcp_process+0x7be>
      break;
 8014968:	bf00      	nop
 801496a:	e008      	b.n	801497e <tcp_process+0x7be>
      break;
 801496c:	bf00      	nop
 801496e:	e006      	b.n	801497e <tcp_process+0x7be>
      break;
 8014970:	bf00      	nop
 8014972:	e004      	b.n	801497e <tcp_process+0x7be>
      break;
 8014974:	bf00      	nop
 8014976:	e002      	b.n	801497e <tcp_process+0x7be>
      break;
 8014978:	bf00      	nop
 801497a:	e000      	b.n	801497e <tcp_process+0x7be>
      break;
 801497c:	bf00      	nop
  }
  return ERR_OK;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	3724      	adds	r7, #36	@ 0x24
 8014984:	46bd      	mov	sp, r7
 8014986:	bd90      	pop	{r4, r7, pc}
 8014988:	20012680 	.word	0x20012680
 801498c:	2001267c 	.word	0x2001267c
 8014990:	200126b0 	.word	0x200126b0
 8014994:	200126a8 	.word	0x200126a8
 8014998:	200126b1 	.word	0x200126b1
 801499c:	20012678 	.word	0x20012678

080149a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80149a0:	b590      	push	{r4, r7, lr}
 80149a2:	b085      	sub	sp, #20
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d106      	bne.n	80149be <tcp_oos_insert_segment+0x1e>
 80149b0:	4b3b      	ldr	r3, [pc, #236]	@ (8014aa0 <tcp_oos_insert_segment+0x100>)
 80149b2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80149b6:	493b      	ldr	r1, [pc, #236]	@ (8014aa4 <tcp_oos_insert_segment+0x104>)
 80149b8:	483b      	ldr	r0, [pc, #236]	@ (8014aa8 <tcp_oos_insert_segment+0x108>)
 80149ba:	f009 fcfd 	bl	801e3b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	899b      	ldrh	r3, [r3, #12]
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fa fd22 	bl	800f410 <lwip_htons>
 80149cc:	4603      	mov	r3, r0
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	f003 0301 	and.w	r3, r3, #1
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d028      	beq.n	8014a2a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80149d8:	6838      	ldr	r0, [r7, #0]
 80149da:	f7fe f995 	bl	8012d08 <tcp_segs_free>
    next = NULL;
 80149de:	2300      	movs	r3, #0
 80149e0:	603b      	str	r3, [r7, #0]
 80149e2:	e056      	b.n	8014a92 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	899b      	ldrh	r3, [r3, #12]
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7fa fd0f 	bl	800f410 <lwip_htons>
 80149f2:	4603      	mov	r3, r0
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	f003 0301 	and.w	r3, r3, #1
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d00d      	beq.n	8014a1a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	899b      	ldrh	r3, [r3, #12]
 8014a04:	b29c      	uxth	r4, r3
 8014a06:	2001      	movs	r0, #1
 8014a08:	f7fa fd02 	bl	800f410 <lwip_htons>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	4322      	orrs	r2, r4
 8014a16:	b292      	uxth	r2, r2
 8014a18:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f7fe f984 	bl	8012d32 <tcp_seg_free>
    while (next &&
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00e      	beq.n	8014a4e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	891b      	ldrh	r3, [r3, #8]
 8014a34:	461a      	mov	r2, r3
 8014a36:	4b1d      	ldr	r3, [pc, #116]	@ (8014aac <tcp_oos_insert_segment+0x10c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	441a      	add	r2, r3
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	6839      	ldr	r1, [r7, #0]
 8014a44:	8909      	ldrh	r1, [r1, #8]
 8014a46:	440b      	add	r3, r1
 8014a48:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	daca      	bge.n	80149e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d01e      	beq.n	8014a92 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	891b      	ldrh	r3, [r3, #8]
 8014a58:	461a      	mov	r2, r3
 8014a5a:	4b14      	ldr	r3, [pc, #80]	@ (8014aac <tcp_oos_insert_segment+0x10c>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	441a      	add	r2, r3
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	dd12      	ble.n	8014a92 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	4b0d      	ldr	r3, [pc, #52]	@ (8014aac <tcp_oos_insert_segment+0x10c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	1ad3      	subs	r3, r2, r3
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	685a      	ldr	r2, [r3, #4]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	891b      	ldrh	r3, [r3, #8]
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	4610      	mov	r0, r2
 8014a8e:	f7fc fa25 	bl	8010edc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	683a      	ldr	r2, [r7, #0]
 8014a96:	601a      	str	r2, [r3, #0]
}
 8014a98:	bf00      	nop
 8014a9a:	3714      	adds	r7, #20
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd90      	pop	{r4, r7, pc}
 8014aa0:	08023fbc 	.word	0x08023fbc
 8014aa4:	0802427c 	.word	0x0802427c
 8014aa8:	08024008 	.word	0x08024008
 8014aac:	200126a4 	.word	0x200126a4

08014ab0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014ab0:	b5b0      	push	{r4, r5, r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014abe:	e03e      	b.n	8014b3e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fc fc18 	bl	8011304 <pbuf_clen>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ade:	8a7a      	ldrh	r2, [r7, #18]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d906      	bls.n	8014af2 <tcp_free_acked_segments+0x42>
 8014ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8014b90 <tcp_free_acked_segments+0xe0>)
 8014ae6:	f240 4257 	movw	r2, #1111	@ 0x457
 8014aea:	492a      	ldr	r1, [pc, #168]	@ (8014b94 <tcp_free_acked_segments+0xe4>)
 8014aec:	482a      	ldr	r0, [pc, #168]	@ (8014b98 <tcp_free_acked_segments+0xe8>)
 8014aee:	f009 fc63 	bl	801e3b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014af8:	8a7b      	ldrh	r3, [r7, #18]
 8014afa:	1ad3      	subs	r3, r2, r3
 8014afc:	b29a      	uxth	r2, r3
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	891a      	ldrh	r2, [r3, #8]
 8014b08:	4b24      	ldr	r3, [pc, #144]	@ (8014b9c <tcp_free_acked_segments+0xec>)
 8014b0a:	881b      	ldrh	r3, [r3, #0]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	4b22      	ldr	r3, [pc, #136]	@ (8014b9c <tcp_free_acked_segments+0xec>)
 8014b12:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b14:	6978      	ldr	r0, [r7, #20]
 8014b16:	f7fe f90c 	bl	8012d32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d00c      	beq.n	8014b3e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d109      	bne.n	8014b3e <tcp_free_acked_segments+0x8e>
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d106      	bne.n	8014b3e <tcp_free_acked_segments+0x8e>
 8014b30:	4b17      	ldr	r3, [pc, #92]	@ (8014b90 <tcp_free_acked_segments+0xe0>)
 8014b32:	f240 4261 	movw	r2, #1121	@ 0x461
 8014b36:	491a      	ldr	r1, [pc, #104]	@ (8014ba0 <tcp_free_acked_segments+0xf0>)
 8014b38:	4817      	ldr	r0, [pc, #92]	@ (8014b98 <tcp_free_acked_segments+0xe8>)
 8014b3a:	f009 fc3d 	bl	801e3b8 <iprintf>
  while (seg_list != NULL &&
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d020      	beq.n	8014b86 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7fa fc75 	bl	800f43a <lwip_htonl>
 8014b50:	4604      	mov	r4, r0
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	891b      	ldrh	r3, [r3, #8]
 8014b56:	461d      	mov	r5, r3
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	68db      	ldr	r3, [r3, #12]
 8014b5c:	899b      	ldrh	r3, [r3, #12]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fa fc55 	bl	800f410 <lwip_htons>
 8014b66:	4603      	mov	r3, r0
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	f003 0303 	and.w	r3, r3, #3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d001      	beq.n	8014b76 <tcp_free_acked_segments+0xc6>
 8014b72:	2301      	movs	r3, #1
 8014b74:	e000      	b.n	8014b78 <tcp_free_acked_segments+0xc8>
 8014b76:	2300      	movs	r3, #0
 8014b78:	442b      	add	r3, r5
 8014b7a:	18e2      	adds	r2, r4, r3
 8014b7c:	4b09      	ldr	r3, [pc, #36]	@ (8014ba4 <tcp_free_acked_segments+0xf4>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	dd9c      	ble.n	8014ac0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014b86:	68bb      	ldr	r3, [r7, #8]
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8014b90:	08023fbc 	.word	0x08023fbc
 8014b94:	080242a4 	.word	0x080242a4
 8014b98:	08024008 	.word	0x08024008
 8014b9c:	200126ac 	.word	0x200126ac
 8014ba0:	080242cc 	.word	0x080242cc
 8014ba4:	200126a8 	.word	0x200126a8

08014ba8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014ba8:	b5b0      	push	{r4, r5, r7, lr}
 8014baa:	b094      	sub	sp, #80	@ 0x50
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <tcp_receive+0x20>
 8014bba:	4b91      	ldr	r3, [pc, #580]	@ (8014e00 <tcp_receive+0x258>)
 8014bbc:	f240 427b 	movw	r2, #1147	@ 0x47b
 8014bc0:	4990      	ldr	r1, [pc, #576]	@ (8014e04 <tcp_receive+0x25c>)
 8014bc2:	4891      	ldr	r0, [pc, #580]	@ (8014e08 <tcp_receive+0x260>)
 8014bc4:	f009 fbf8 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	7d1b      	ldrb	r3, [r3, #20]
 8014bcc:	2b03      	cmp	r3, #3
 8014bce:	d806      	bhi.n	8014bde <tcp_receive+0x36>
 8014bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8014e00 <tcp_receive+0x258>)
 8014bd2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8014bd6:	498d      	ldr	r1, [pc, #564]	@ (8014e0c <tcp_receive+0x264>)
 8014bd8:	488b      	ldr	r0, [pc, #556]	@ (8014e08 <tcp_receive+0x260>)
 8014bda:	f009 fbed 	bl	801e3b8 <iprintf>

  if (flags & TCP_ACK) {
 8014bde:	4b8c      	ldr	r3, [pc, #560]	@ (8014e10 <tcp_receive+0x268>)
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	f003 0310 	and.w	r3, r3, #16
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	f000 8264 	beq.w	80150b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bf8:	4413      	add	r3, r2
 8014bfa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014c00:	4b84      	ldr	r3, [pc, #528]	@ (8014e14 <tcp_receive+0x26c>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	db1b      	blt.n	8014c42 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014c0e:	4b81      	ldr	r3, [pc, #516]	@ (8014e14 <tcp_receive+0x26c>)
 8014c10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d106      	bne.n	8014c24 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8014e18 <tcp_receive+0x270>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	db0e      	blt.n	8014c42 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014c28:	4b7b      	ldr	r3, [pc, #492]	@ (8014e18 <tcp_receive+0x270>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d125      	bne.n	8014c7c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c30:	4b7a      	ldr	r3, [pc, #488]	@ (8014e1c <tcp_receive+0x274>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	89db      	ldrh	r3, [r3, #14]
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d91c      	bls.n	8014c7c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014c42:	4b76      	ldr	r3, [pc, #472]	@ (8014e1c <tcp_receive+0x274>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	89db      	ldrh	r3, [r3, #14]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d205      	bcs.n	8014c6c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014c6c:	4b69      	ldr	r3, [pc, #420]	@ (8014e14 <tcp_receive+0x26c>)
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014c74:	4b68      	ldr	r3, [pc, #416]	@ (8014e18 <tcp_receive+0x270>)
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014c7c:	4b66      	ldr	r3, [pc, #408]	@ (8014e18 <tcp_receive+0x270>)
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	dc58      	bgt.n	8014d3c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014c8a:	4b65      	ldr	r3, [pc, #404]	@ (8014e20 <tcp_receive+0x278>)
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d14b      	bne.n	8014d2a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014c9c:	4413      	add	r3, r2
 8014c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d142      	bne.n	8014d2a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	db3d      	blt.n	8014d2a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014cb2:	4b59      	ldr	r3, [pc, #356]	@ (8014e18 <tcp_receive+0x270>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d137      	bne.n	8014d2a <tcp_receive+0x182>
              found_dupack = 1;
 8014cba:	2301      	movs	r3, #1
 8014cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cc4:	2bff      	cmp	r3, #255	@ 0xff
 8014cc6:	d007      	beq.n	8014cd8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cce:	3301      	adds	r3, #1
 8014cd0:	b2da      	uxtb	r2, r3
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d91b      	bls.n	8014d1a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cec:	4413      	add	r3, r2
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d30a      	bcc.n	8014d10 <tcp_receive+0x168>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d04:	4413      	add	r3, r2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014d0e:	e004      	b.n	8014d1a <tcp_receive+0x172>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d16:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014d20:	2b02      	cmp	r3, #2
 8014d22:	d902      	bls.n	8014d2a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f002 fb3f 	bl	80173a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f040 8161 	bne.w	8014ff4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2200      	movs	r2, #0
 8014d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d3a:	e15b      	b.n	8014ff4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d3c:	4b36      	ldr	r3, [pc, #216]	@ (8014e18 <tcp_receive+0x270>)
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d44:	1ad3      	subs	r3, r2, r3
 8014d46:	3b01      	subs	r3, #1
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	f2c0 814e 	blt.w	8014fea <tcp_receive+0x442>
 8014d4e:	4b32      	ldr	r3, [pc, #200]	@ (8014e18 <tcp_receive+0x270>)
 8014d50:	681a      	ldr	r2, [r3, #0]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f300 8146 	bgt.w	8014fea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	8b5b      	ldrh	r3, [r3, #26]
 8014d62:	f003 0304 	and.w	r3, r3, #4
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d010      	beq.n	8014d8c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8b5b      	ldrh	r3, [r3, #26]
 8014d6e:	f023 0304 	bic.w	r3, r3, #4
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2200      	movs	r2, #0
 8014d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014d9a:	10db      	asrs	r3, r3, #3
 8014d9c:	b21b      	sxth	r3, r3
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	4413      	add	r3, r2
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	b21a      	sxth	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014db4:	4b18      	ldr	r3, [pc, #96]	@ (8014e18 <tcp_receive+0x270>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	b29a      	uxth	r2, r3
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8014dcc:	4b12      	ldr	r3, [pc, #72]	@ (8014e18 <tcp_receive+0x270>)
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	7d1b      	ldrb	r3, [r3, #20]
 8014dd8:	2b03      	cmp	r3, #3
 8014dda:	f240 8097 	bls.w	8014f0c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d245      	bcs.n	8014e7a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	8b5b      	ldrh	r3, [r3, #26]
 8014df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d014      	beq.n	8014e24 <tcp_receive+0x27c>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	e013      	b.n	8014e26 <tcp_receive+0x27e>
 8014dfe:	bf00      	nop
 8014e00:	08023fbc 	.word	0x08023fbc
 8014e04:	080242ec 	.word	0x080242ec
 8014e08:	08024008 	.word	0x08024008
 8014e0c:	08024308 	.word	0x08024308
 8014e10:	200126b0 	.word	0x200126b0
 8014e14:	200126a4 	.word	0x200126a4
 8014e18:	200126a8 	.word	0x200126a8
 8014e1c:	20012694 	.word	0x20012694
 8014e20:	200126ae 	.word	0x200126ae
 8014e24:	2302      	movs	r3, #2
 8014e26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e34:	fb12 f303 	smulbb	r3, r2, r3
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	bf28      	it	cs
 8014e40:	4613      	movcs	r3, r2
 8014e42:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014e4c:	4413      	add	r3, r2
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d309      	bcc.n	8014e6e <tcp_receive+0x2c6>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014e62:	4413      	add	r3, r2
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014e6c:	e04e      	b.n	8014f0c <tcp_receive+0x364>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014e78:	e048      	b.n	8014f0c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014e80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e82:	4413      	add	r3, r2
 8014e84:	b29a      	uxth	r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d309      	bcc.n	8014ea4 <tcp_receive+0x2fc>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014e96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e98:	4413      	add	r3, r2
 8014e9a:	b29a      	uxth	r2, r3
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ea2:	e004      	b.n	8014eae <tcp_receive+0x306>
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014eaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d326      	bcc.n	8014f0c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	b29a      	uxth	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ede:	4413      	add	r3, r2
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d30a      	bcc.n	8014f02 <tcp_receive+0x35a>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ef6:	4413      	add	r3, r2
 8014ef8:	b29a      	uxth	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014f00:	e004      	b.n	8014f0c <tcp_receive+0x364>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f14:	4a98      	ldr	r2, [pc, #608]	@ (8015178 <tcp_receive+0x5d0>)
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7ff fdca 	bl	8014ab0 <tcp_free_acked_segments>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f2a:	4a94      	ldr	r2, [pc, #592]	@ (801517c <tcp_receive+0x5d4>)
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f7ff fdbf 	bl	8014ab0 <tcp_free_acked_segments>
 8014f32:	4602      	mov	r2, r0
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d104      	bne.n	8014f4a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f46:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014f48:	e002      	b.n	8014f50 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d103      	bne.n	8014f66 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	2200      	movs	r2, #0
 8014f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014f6c:	4b84      	ldr	r3, [pc, #528]	@ (8015180 <tcp_receive+0x5d8>)
 8014f6e:	881b      	ldrh	r3, [r3, #0]
 8014f70:	4413      	add	r3, r2
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	8b5b      	ldrh	r3, [r3, #26]
 8014f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d035      	beq.n	8014ff2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d118      	bne.n	8014fc0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00c      	beq.n	8014fb0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7fa fa49 	bl	800f43a <lwip_htonl>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	dc20      	bgt.n	8014ff2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	8b5b      	ldrh	r3, [r3, #26]
 8014fb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fbe:	e018      	b.n	8014ff2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fa fa34 	bl	800f43a <lwip_htonl>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	1ae3      	subs	r3, r4, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	dc0b      	bgt.n	8014ff2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	8b5b      	ldrh	r3, [r3, #26]
 8014fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fe8:	e003      	b.n	8014ff2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f002 fbc8 	bl	8017780 <tcp_send_empty_ack>
 8014ff0:	e000      	b.n	8014ff4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ff2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d05b      	beq.n	80150b4 <tcp_receive+0x50c>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015000:	4b60      	ldr	r3, [pc, #384]	@ (8015184 <tcp_receive+0x5dc>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	2b00      	cmp	r3, #0
 8015008:	da54      	bge.n	80150b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801500a:	4b5f      	ldr	r3, [pc, #380]	@ (8015188 <tcp_receive+0x5e0>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	b29a      	uxth	r2, r3
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015014:	b29b      	uxth	r3, r3
 8015016:	1ad3      	subs	r3, r2, r3
 8015018:	b29b      	uxth	r3, r3
 801501a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801501e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015028:	10db      	asrs	r3, r3, #3
 801502a:	b21b      	sxth	r3, r3
 801502c:	b29b      	uxth	r3, r3
 801502e:	1ad3      	subs	r3, r2, r3
 8015030:	b29b      	uxth	r3, r3
 8015032:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801503c:	b29a      	uxth	r2, r3
 801503e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015042:	4413      	add	r3, r2
 8015044:	b29b      	uxth	r3, r3
 8015046:	b21a      	sxth	r2, r3
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801504c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015050:	2b00      	cmp	r3, #0
 8015052:	da05      	bge.n	8015060 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015058:	425b      	negs	r3, r3
 801505a:	b29b      	uxth	r3, r3
 801505c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015060:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801506a:	109b      	asrs	r3, r3, #2
 801506c:	b21b      	sxth	r3, r3
 801506e:	b29b      	uxth	r3, r3
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	b29b      	uxth	r3, r3
 8015074:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801507e:	b29a      	uxth	r2, r3
 8015080:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015084:	4413      	add	r3, r2
 8015086:	b29b      	uxth	r3, r3
 8015088:	b21a      	sxth	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015094:	10db      	asrs	r3, r3, #3
 8015096:	b21b      	sxth	r3, r3
 8015098:	b29a      	uxth	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	4413      	add	r3, r2
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	b21a      	sxth	r2, r3
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80150b4:	4b35      	ldr	r3, [pc, #212]	@ (801518c <tcp_receive+0x5e4>)
 80150b6:	881b      	ldrh	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	f000 84df 	beq.w	8015a7c <tcp_receive+0xed4>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	7d1b      	ldrb	r3, [r3, #20]
 80150c2:	2b06      	cmp	r3, #6
 80150c4:	f200 84da 	bhi.w	8015a7c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150cc:	4b30      	ldr	r3, [pc, #192]	@ (8015190 <tcp_receive+0x5e8>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	1ad3      	subs	r3, r2, r3
 80150d2:	3b01      	subs	r3, #1
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f2c0 808f 	blt.w	80151f8 <tcp_receive+0x650>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150de:	4b2b      	ldr	r3, [pc, #172]	@ (801518c <tcp_receive+0x5e4>)
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	4619      	mov	r1, r3
 80150e4:	4b2a      	ldr	r3, [pc, #168]	@ (8015190 <tcp_receive+0x5e8>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	440b      	add	r3, r1
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	3301      	adds	r3, #1
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f300 8082 	bgt.w	80151f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80150f4:	4b27      	ldr	r3, [pc, #156]	@ (8015194 <tcp_receive+0x5ec>)
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150fe:	4b24      	ldr	r3, [pc, #144]	@ (8015190 <tcp_receive+0x5e8>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	1ad3      	subs	r3, r2, r3
 8015104:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015106:	4b23      	ldr	r3, [pc, #140]	@ (8015194 <tcp_receive+0x5ec>)
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d106      	bne.n	801511c <tcp_receive+0x574>
 801510e:	4b22      	ldr	r3, [pc, #136]	@ (8015198 <tcp_receive+0x5f0>)
 8015110:	f240 5294 	movw	r2, #1428	@ 0x594
 8015114:	4921      	ldr	r1, [pc, #132]	@ (801519c <tcp_receive+0x5f4>)
 8015116:	4822      	ldr	r0, [pc, #136]	@ (80151a0 <tcp_receive+0x5f8>)
 8015118:	f009 f94e 	bl	801e3b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801511e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015122:	4293      	cmp	r3, r2
 8015124:	d906      	bls.n	8015134 <tcp_receive+0x58c>
 8015126:	4b1c      	ldr	r3, [pc, #112]	@ (8015198 <tcp_receive+0x5f0>)
 8015128:	f240 5295 	movw	r2, #1429	@ 0x595
 801512c:	491d      	ldr	r1, [pc, #116]	@ (80151a4 <tcp_receive+0x5fc>)
 801512e:	481c      	ldr	r0, [pc, #112]	@ (80151a0 <tcp_receive+0x5f8>)
 8015130:	f009 f942 	bl	801e3b8 <iprintf>
      off = (u16_t)off32;
 8015134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015136:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801513a:	4b16      	ldr	r3, [pc, #88]	@ (8015194 <tcp_receive+0x5ec>)
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	891b      	ldrh	r3, [r3, #8]
 8015140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015144:	429a      	cmp	r2, r3
 8015146:	d906      	bls.n	8015156 <tcp_receive+0x5ae>
 8015148:	4b13      	ldr	r3, [pc, #76]	@ (8015198 <tcp_receive+0x5f0>)
 801514a:	f240 5297 	movw	r2, #1431	@ 0x597
 801514e:	4916      	ldr	r1, [pc, #88]	@ (80151a8 <tcp_receive+0x600>)
 8015150:	4813      	ldr	r0, [pc, #76]	@ (80151a0 <tcp_receive+0x5f8>)
 8015152:	f009 f931 	bl	801e3b8 <iprintf>
      inseg.len -= off;
 8015156:	4b0f      	ldr	r3, [pc, #60]	@ (8015194 <tcp_receive+0x5ec>)
 8015158:	891a      	ldrh	r2, [r3, #8]
 801515a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801515e:	1ad3      	subs	r3, r2, r3
 8015160:	b29a      	uxth	r2, r3
 8015162:	4b0c      	ldr	r3, [pc, #48]	@ (8015194 <tcp_receive+0x5ec>)
 8015164:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015166:	4b0b      	ldr	r3, [pc, #44]	@ (8015194 <tcp_receive+0x5ec>)
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	891a      	ldrh	r2, [r3, #8]
 801516c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015170:	1ad3      	subs	r3, r2, r3
 8015172:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015174:	e02a      	b.n	80151cc <tcp_receive+0x624>
 8015176:	bf00      	nop
 8015178:	08024324 	.word	0x08024324
 801517c:	0802432c 	.word	0x0802432c
 8015180:	200126ac 	.word	0x200126ac
 8015184:	200126a8 	.word	0x200126a8
 8015188:	2001266c 	.word	0x2001266c
 801518c:	200126ae 	.word	0x200126ae
 8015190:	200126a4 	.word	0x200126a4
 8015194:	20012684 	.word	0x20012684
 8015198:	08023fbc 	.word	0x08023fbc
 801519c:	08024334 	.word	0x08024334
 80151a0:	08024008 	.word	0x08024008
 80151a4:	08024344 	.word	0x08024344
 80151a8:	08024354 	.word	0x08024354
        off -= p->len;
 80151ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151ae:	895b      	ldrh	r3, [r3, #10]
 80151b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80151ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80151be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80151c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151c2:	2200      	movs	r2, #0
 80151c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80151c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80151cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151ce:	895b      	ldrh	r3, [r3, #10]
 80151d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d8e9      	bhi.n	80151ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80151d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80151dc:	4619      	mov	r1, r3
 80151de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80151e0:	f7fb ff7c 	bl	80110dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151e8:	4a90      	ldr	r2, [pc, #576]	@ (801542c <tcp_receive+0x884>)
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	4b90      	ldr	r3, [pc, #576]	@ (8015430 <tcp_receive+0x888>)
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	4a8e      	ldr	r2, [pc, #568]	@ (801542c <tcp_receive+0x884>)
 80151f2:	6812      	ldr	r2, [r2, #0]
 80151f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80151f6:	e00d      	b.n	8015214 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80151f8:	4b8c      	ldr	r3, [pc, #560]	@ (801542c <tcp_receive+0x884>)
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	2b00      	cmp	r3, #0
 8015204:	da06      	bge.n	8015214 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	8b5b      	ldrh	r3, [r3, #26]
 801520a:	f043 0302 	orr.w	r3, r3, #2
 801520e:	b29a      	uxth	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015214:	4b85      	ldr	r3, [pc, #532]	@ (801542c <tcp_receive+0x884>)
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	2b00      	cmp	r3, #0
 8015220:	f2c0 8427 	blt.w	8015a72 <tcp_receive+0xeca>
 8015224:	4b81      	ldr	r3, [pc, #516]	@ (801542c <tcp_receive+0x884>)
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801522c:	6879      	ldr	r1, [r7, #4]
 801522e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015230:	440b      	add	r3, r1
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	3301      	adds	r3, #1
 8015236:	2b00      	cmp	r3, #0
 8015238:	f300 841b 	bgt.w	8015a72 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015240:	4b7a      	ldr	r3, [pc, #488]	@ (801542c <tcp_receive+0x884>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	429a      	cmp	r2, r3
 8015246:	f040 8298 	bne.w	801577a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801524a:	4b79      	ldr	r3, [pc, #484]	@ (8015430 <tcp_receive+0x888>)
 801524c:	891c      	ldrh	r4, [r3, #8]
 801524e:	4b78      	ldr	r3, [pc, #480]	@ (8015430 <tcp_receive+0x888>)
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	899b      	ldrh	r3, [r3, #12]
 8015254:	b29b      	uxth	r3, r3
 8015256:	4618      	mov	r0, r3
 8015258:	f7fa f8da 	bl	800f410 <lwip_htons>
 801525c:	4603      	mov	r3, r0
 801525e:	b2db      	uxtb	r3, r3
 8015260:	f003 0303 	and.w	r3, r3, #3
 8015264:	2b00      	cmp	r3, #0
 8015266:	d001      	beq.n	801526c <tcp_receive+0x6c4>
 8015268:	2301      	movs	r3, #1
 801526a:	e000      	b.n	801526e <tcp_receive+0x6c6>
 801526c:	2300      	movs	r3, #0
 801526e:	4423      	add	r3, r4
 8015270:	b29a      	uxth	r2, r3
 8015272:	4b70      	ldr	r3, [pc, #448]	@ (8015434 <tcp_receive+0x88c>)
 8015274:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801527a:	4b6e      	ldr	r3, [pc, #440]	@ (8015434 <tcp_receive+0x88c>)
 801527c:	881b      	ldrh	r3, [r3, #0]
 801527e:	429a      	cmp	r2, r3
 8015280:	d274      	bcs.n	801536c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015282:	4b6b      	ldr	r3, [pc, #428]	@ (8015430 <tcp_receive+0x888>)
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	899b      	ldrh	r3, [r3, #12]
 8015288:	b29b      	uxth	r3, r3
 801528a:	4618      	mov	r0, r3
 801528c:	f7fa f8c0 	bl	800f410 <lwip_htons>
 8015290:	4603      	mov	r3, r0
 8015292:	b2db      	uxtb	r3, r3
 8015294:	f003 0301 	and.w	r3, r3, #1
 8015298:	2b00      	cmp	r3, #0
 801529a:	d01e      	beq.n	80152da <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801529c:	4b64      	ldr	r3, [pc, #400]	@ (8015430 <tcp_receive+0x888>)
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	899b      	ldrh	r3, [r3, #12]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	b21b      	sxth	r3, r3
 80152a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80152aa:	b21c      	sxth	r4, r3
 80152ac:	4b60      	ldr	r3, [pc, #384]	@ (8015430 <tcp_receive+0x888>)
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	899b      	ldrh	r3, [r3, #12]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fa f8ab 	bl	800f410 <lwip_htons>
 80152ba:	4603      	mov	r3, r0
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fa f8a3 	bl	800f410 <lwip_htons>
 80152ca:	4603      	mov	r3, r0
 80152cc:	b21b      	sxth	r3, r3
 80152ce:	4323      	orrs	r3, r4
 80152d0:	b21a      	sxth	r2, r3
 80152d2:	4b57      	ldr	r3, [pc, #348]	@ (8015430 <tcp_receive+0x888>)
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	b292      	uxth	r2, r2
 80152d8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80152de:	4b54      	ldr	r3, [pc, #336]	@ (8015430 <tcp_receive+0x888>)
 80152e0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80152e2:	4b53      	ldr	r3, [pc, #332]	@ (8015430 <tcp_receive+0x888>)
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	899b      	ldrh	r3, [r3, #12]
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fa f890 	bl	800f410 <lwip_htons>
 80152f0:	4603      	mov	r3, r0
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	f003 0302 	and.w	r3, r3, #2
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d005      	beq.n	8015308 <tcp_receive+0x760>
            inseg.len -= 1;
 80152fc:	4b4c      	ldr	r3, [pc, #304]	@ (8015430 <tcp_receive+0x888>)
 80152fe:	891b      	ldrh	r3, [r3, #8]
 8015300:	3b01      	subs	r3, #1
 8015302:	b29a      	uxth	r2, r3
 8015304:	4b4a      	ldr	r3, [pc, #296]	@ (8015430 <tcp_receive+0x888>)
 8015306:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015308:	4b49      	ldr	r3, [pc, #292]	@ (8015430 <tcp_receive+0x888>)
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	4a48      	ldr	r2, [pc, #288]	@ (8015430 <tcp_receive+0x888>)
 801530e:	8912      	ldrh	r2, [r2, #8]
 8015310:	4611      	mov	r1, r2
 8015312:	4618      	mov	r0, r3
 8015314:	f7fb fde2 	bl	8010edc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015318:	4b45      	ldr	r3, [pc, #276]	@ (8015430 <tcp_receive+0x888>)
 801531a:	891c      	ldrh	r4, [r3, #8]
 801531c:	4b44      	ldr	r3, [pc, #272]	@ (8015430 <tcp_receive+0x888>)
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	899b      	ldrh	r3, [r3, #12]
 8015322:	b29b      	uxth	r3, r3
 8015324:	4618      	mov	r0, r3
 8015326:	f7fa f873 	bl	800f410 <lwip_htons>
 801532a:	4603      	mov	r3, r0
 801532c:	b2db      	uxtb	r3, r3
 801532e:	f003 0303 	and.w	r3, r3, #3
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <tcp_receive+0x792>
 8015336:	2301      	movs	r3, #1
 8015338:	e000      	b.n	801533c <tcp_receive+0x794>
 801533a:	2300      	movs	r3, #0
 801533c:	4423      	add	r3, r4
 801533e:	b29a      	uxth	r2, r3
 8015340:	4b3c      	ldr	r3, [pc, #240]	@ (8015434 <tcp_receive+0x88c>)
 8015342:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015344:	4b3b      	ldr	r3, [pc, #236]	@ (8015434 <tcp_receive+0x88c>)
 8015346:	881b      	ldrh	r3, [r3, #0]
 8015348:	461a      	mov	r2, r3
 801534a:	4b38      	ldr	r3, [pc, #224]	@ (801542c <tcp_receive+0x884>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	441a      	add	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015354:	6879      	ldr	r1, [r7, #4]
 8015356:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015358:	440b      	add	r3, r1
 801535a:	429a      	cmp	r2, r3
 801535c:	d006      	beq.n	801536c <tcp_receive+0x7c4>
 801535e:	4b36      	ldr	r3, [pc, #216]	@ (8015438 <tcp_receive+0x890>)
 8015360:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015364:	4935      	ldr	r1, [pc, #212]	@ (801543c <tcp_receive+0x894>)
 8015366:	4836      	ldr	r0, [pc, #216]	@ (8015440 <tcp_receive+0x898>)
 8015368:	f009 f826 	bl	801e3b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015370:	2b00      	cmp	r3, #0
 8015372:	f000 80e6 	beq.w	8015542 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015376:	4b2e      	ldr	r3, [pc, #184]	@ (8015430 <tcp_receive+0x888>)
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	899b      	ldrh	r3, [r3, #12]
 801537c:	b29b      	uxth	r3, r3
 801537e:	4618      	mov	r0, r3
 8015380:	f7fa f846 	bl	800f410 <lwip_htons>
 8015384:	4603      	mov	r3, r0
 8015386:	b2db      	uxtb	r3, r3
 8015388:	f003 0301 	and.w	r3, r3, #1
 801538c:	2b00      	cmp	r3, #0
 801538e:	d010      	beq.n	80153b2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015390:	e00a      	b.n	80153a8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015396:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	f7fd fcc5 	bl	8012d32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d1f0      	bne.n	8015392 <tcp_receive+0x7ea>
 80153b0:	e0c7      	b.n	8015542 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80153b8:	e051      	b.n	801545e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	899b      	ldrh	r3, [r3, #12]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fa f824 	bl	800f410 <lwip_htons>
 80153c8:	4603      	mov	r3, r0
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	f003 0301 	and.w	r3, r3, #1
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d03c      	beq.n	801544e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80153d4:	4b16      	ldr	r3, [pc, #88]	@ (8015430 <tcp_receive+0x888>)
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	899b      	ldrh	r3, [r3, #12]
 80153da:	b29b      	uxth	r3, r3
 80153dc:	4618      	mov	r0, r3
 80153de:	f7fa f817 	bl	800f410 <lwip_htons>
 80153e2:	4603      	mov	r3, r0
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d12f      	bne.n	801544e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80153ee:	4b10      	ldr	r3, [pc, #64]	@ (8015430 <tcp_receive+0x888>)
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	899b      	ldrh	r3, [r3, #12]
 80153f4:	b29c      	uxth	r4, r3
 80153f6:	2001      	movs	r0, #1
 80153f8:	f7fa f80a 	bl	800f410 <lwip_htons>
 80153fc:	4603      	mov	r3, r0
 80153fe:	461a      	mov	r2, r3
 8015400:	4b0b      	ldr	r3, [pc, #44]	@ (8015430 <tcp_receive+0x888>)
 8015402:	68db      	ldr	r3, [r3, #12]
 8015404:	4322      	orrs	r2, r4
 8015406:	b292      	uxth	r2, r2
 8015408:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801540a:	4b09      	ldr	r3, [pc, #36]	@ (8015430 <tcp_receive+0x888>)
 801540c:	891c      	ldrh	r4, [r3, #8]
 801540e:	4b08      	ldr	r3, [pc, #32]	@ (8015430 <tcp_receive+0x888>)
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	899b      	ldrh	r3, [r3, #12]
 8015414:	b29b      	uxth	r3, r3
 8015416:	4618      	mov	r0, r3
 8015418:	f7f9 fffa 	bl	800f410 <lwip_htons>
 801541c:	4603      	mov	r3, r0
 801541e:	b2db      	uxtb	r3, r3
 8015420:	f003 0303 	and.w	r3, r3, #3
 8015424:	2b00      	cmp	r3, #0
 8015426:	d00d      	beq.n	8015444 <tcp_receive+0x89c>
 8015428:	2301      	movs	r3, #1
 801542a:	e00c      	b.n	8015446 <tcp_receive+0x89e>
 801542c:	200126a4 	.word	0x200126a4
 8015430:	20012684 	.word	0x20012684
 8015434:	200126ae 	.word	0x200126ae
 8015438:	08023fbc 	.word	0x08023fbc
 801543c:	08024364 	.word	0x08024364
 8015440:	08024008 	.word	0x08024008
 8015444:	2300      	movs	r3, #0
 8015446:	4423      	add	r3, r4
 8015448:	b29a      	uxth	r2, r3
 801544a:	4b98      	ldr	r3, [pc, #608]	@ (80156ac <tcp_receive+0xb04>)
 801544c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015450:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015458:	6938      	ldr	r0, [r7, #16]
 801545a:	f7fd fc6a 	bl	8012d32 <tcp_seg_free>
            while (next &&
 801545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015460:	2b00      	cmp	r3, #0
 8015462:	d00e      	beq.n	8015482 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015464:	4b91      	ldr	r3, [pc, #580]	@ (80156ac <tcp_receive+0xb04>)
 8015466:	881b      	ldrh	r3, [r3, #0]
 8015468:	461a      	mov	r2, r3
 801546a:	4b91      	ldr	r3, [pc, #580]	@ (80156b0 <tcp_receive+0xb08>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	441a      	add	r2, r3
 8015470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015478:	8909      	ldrh	r1, [r1, #8]
 801547a:	440b      	add	r3, r1
 801547c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801547e:	2b00      	cmp	r3, #0
 8015480:	da9b      	bge.n	80153ba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015484:	2b00      	cmp	r3, #0
 8015486:	d059      	beq.n	801553c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015488:	4b88      	ldr	r3, [pc, #544]	@ (80156ac <tcp_receive+0xb04>)
 801548a:	881b      	ldrh	r3, [r3, #0]
 801548c:	461a      	mov	r2, r3
 801548e:	4b88      	ldr	r3, [pc, #544]	@ (80156b0 <tcp_receive+0xb08>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	441a      	add	r2, r3
 8015494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801549c:	2b00      	cmp	r3, #0
 801549e:	dd4d      	ble.n	801553c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80154a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	b29a      	uxth	r2, r3
 80154a8:	4b81      	ldr	r3, [pc, #516]	@ (80156b0 <tcp_receive+0xb08>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	b29b      	uxth	r3, r3
 80154ae:	1ad3      	subs	r3, r2, r3
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	4b80      	ldr	r3, [pc, #512]	@ (80156b4 <tcp_receive+0xb0c>)
 80154b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154b6:	4b7f      	ldr	r3, [pc, #508]	@ (80156b4 <tcp_receive+0xb0c>)
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	899b      	ldrh	r3, [r3, #12]
 80154bc:	b29b      	uxth	r3, r3
 80154be:	4618      	mov	r0, r3
 80154c0:	f7f9 ffa6 	bl	800f410 <lwip_htons>
 80154c4:	4603      	mov	r3, r0
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	f003 0302 	and.w	r3, r3, #2
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d005      	beq.n	80154dc <tcp_receive+0x934>
                inseg.len -= 1;
 80154d0:	4b78      	ldr	r3, [pc, #480]	@ (80156b4 <tcp_receive+0xb0c>)
 80154d2:	891b      	ldrh	r3, [r3, #8]
 80154d4:	3b01      	subs	r3, #1
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	4b76      	ldr	r3, [pc, #472]	@ (80156b4 <tcp_receive+0xb0c>)
 80154da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80154dc:	4b75      	ldr	r3, [pc, #468]	@ (80156b4 <tcp_receive+0xb0c>)
 80154de:	685b      	ldr	r3, [r3, #4]
 80154e0:	4a74      	ldr	r2, [pc, #464]	@ (80156b4 <tcp_receive+0xb0c>)
 80154e2:	8912      	ldrh	r2, [r2, #8]
 80154e4:	4611      	mov	r1, r2
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fb fcf8 	bl	8010edc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80154ec:	4b71      	ldr	r3, [pc, #452]	@ (80156b4 <tcp_receive+0xb0c>)
 80154ee:	891c      	ldrh	r4, [r3, #8]
 80154f0:	4b70      	ldr	r3, [pc, #448]	@ (80156b4 <tcp_receive+0xb0c>)
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	899b      	ldrh	r3, [r3, #12]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f9 ff89 	bl	800f410 <lwip_htons>
 80154fe:	4603      	mov	r3, r0
 8015500:	b2db      	uxtb	r3, r3
 8015502:	f003 0303 	and.w	r3, r3, #3
 8015506:	2b00      	cmp	r3, #0
 8015508:	d001      	beq.n	801550e <tcp_receive+0x966>
 801550a:	2301      	movs	r3, #1
 801550c:	e000      	b.n	8015510 <tcp_receive+0x968>
 801550e:	2300      	movs	r3, #0
 8015510:	4423      	add	r3, r4
 8015512:	b29a      	uxth	r2, r3
 8015514:	4b65      	ldr	r3, [pc, #404]	@ (80156ac <tcp_receive+0xb04>)
 8015516:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015518:	4b64      	ldr	r3, [pc, #400]	@ (80156ac <tcp_receive+0xb04>)
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	461a      	mov	r2, r3
 801551e:	4b64      	ldr	r3, [pc, #400]	@ (80156b0 <tcp_receive+0xb08>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	441a      	add	r2, r3
 8015524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	429a      	cmp	r2, r3
 801552c:	d006      	beq.n	801553c <tcp_receive+0x994>
 801552e:	4b62      	ldr	r3, [pc, #392]	@ (80156b8 <tcp_receive+0xb10>)
 8015530:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015534:	4961      	ldr	r1, [pc, #388]	@ (80156bc <tcp_receive+0xb14>)
 8015536:	4862      	ldr	r0, [pc, #392]	@ (80156c0 <tcp_receive+0xb18>)
 8015538:	f008 ff3e 	bl	801e3b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015540:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015542:	4b5a      	ldr	r3, [pc, #360]	@ (80156ac <tcp_receive+0xb04>)
 8015544:	881b      	ldrh	r3, [r3, #0]
 8015546:	461a      	mov	r2, r3
 8015548:	4b59      	ldr	r3, [pc, #356]	@ (80156b0 <tcp_receive+0xb08>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	441a      	add	r2, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015556:	4b55      	ldr	r3, [pc, #340]	@ (80156ac <tcp_receive+0xb04>)
 8015558:	881b      	ldrh	r3, [r3, #0]
 801555a:	429a      	cmp	r2, r3
 801555c:	d206      	bcs.n	801556c <tcp_receive+0x9c4>
 801555e:	4b56      	ldr	r3, [pc, #344]	@ (80156b8 <tcp_receive+0xb10>)
 8015560:	f240 6207 	movw	r2, #1543	@ 0x607
 8015564:	4957      	ldr	r1, [pc, #348]	@ (80156c4 <tcp_receive+0xb1c>)
 8015566:	4856      	ldr	r0, [pc, #344]	@ (80156c0 <tcp_receive+0xb18>)
 8015568:	f008 ff26 	bl	801e3b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015570:	4b4e      	ldr	r3, [pc, #312]	@ (80156ac <tcp_receive+0xb04>)
 8015572:	881b      	ldrh	r3, [r3, #0]
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	b29a      	uxth	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7fc fd99 	bl	80120b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015582:	4b4c      	ldr	r3, [pc, #304]	@ (80156b4 <tcp_receive+0xb0c>)
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	891b      	ldrh	r3, [r3, #8]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d006      	beq.n	801559a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801558c:	4b49      	ldr	r3, [pc, #292]	@ (80156b4 <tcp_receive+0xb0c>)
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	4a4d      	ldr	r2, [pc, #308]	@ (80156c8 <tcp_receive+0xb20>)
 8015592:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015594:	4b47      	ldr	r3, [pc, #284]	@ (80156b4 <tcp_receive+0xb0c>)
 8015596:	2200      	movs	r2, #0
 8015598:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801559a:	4b46      	ldr	r3, [pc, #280]	@ (80156b4 <tcp_receive+0xb0c>)
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	899b      	ldrh	r3, [r3, #12]
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7f9 ff34 	bl	800f410 <lwip_htons>
 80155a8:	4603      	mov	r3, r0
 80155aa:	b2db      	uxtb	r3, r3
 80155ac:	f003 0301 	and.w	r3, r3, #1
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f000 80b8 	beq.w	8015726 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80155b6:	4b45      	ldr	r3, [pc, #276]	@ (80156cc <tcp_receive+0xb24>)
 80155b8:	781b      	ldrb	r3, [r3, #0]
 80155ba:	f043 0320 	orr.w	r3, r3, #32
 80155be:	b2da      	uxtb	r2, r3
 80155c0:	4b42      	ldr	r3, [pc, #264]	@ (80156cc <tcp_receive+0xb24>)
 80155c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80155c4:	e0af      	b.n	8015726 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	685b      	ldr	r3, [r3, #4]
 80155d4:	4a36      	ldr	r2, [pc, #216]	@ (80156b0 <tcp_receive+0xb08>)
 80155d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	891b      	ldrh	r3, [r3, #8]
 80155dc:	461c      	mov	r4, r3
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	899b      	ldrh	r3, [r3, #12]
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7f9 ff12 	bl	800f410 <lwip_htons>
 80155ec:	4603      	mov	r3, r0
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	f003 0303 	and.w	r3, r3, #3
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d001      	beq.n	80155fc <tcp_receive+0xa54>
 80155f8:	2301      	movs	r3, #1
 80155fa:	e000      	b.n	80155fe <tcp_receive+0xa56>
 80155fc:	2300      	movs	r3, #0
 80155fe:	191a      	adds	r2, r3, r4
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015604:	441a      	add	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801560e:	461c      	mov	r4, r3
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	891b      	ldrh	r3, [r3, #8]
 8015614:	461d      	mov	r5, r3
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	899b      	ldrh	r3, [r3, #12]
 801561c:	b29b      	uxth	r3, r3
 801561e:	4618      	mov	r0, r3
 8015620:	f7f9 fef6 	bl	800f410 <lwip_htons>
 8015624:	4603      	mov	r3, r0
 8015626:	b2db      	uxtb	r3, r3
 8015628:	f003 0303 	and.w	r3, r3, #3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d001      	beq.n	8015634 <tcp_receive+0xa8c>
 8015630:	2301      	movs	r3, #1
 8015632:	e000      	b.n	8015636 <tcp_receive+0xa8e>
 8015634:	2300      	movs	r3, #0
 8015636:	442b      	add	r3, r5
 8015638:	429c      	cmp	r4, r3
 801563a:	d206      	bcs.n	801564a <tcp_receive+0xaa2>
 801563c:	4b1e      	ldr	r3, [pc, #120]	@ (80156b8 <tcp_receive+0xb10>)
 801563e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015642:	4923      	ldr	r1, [pc, #140]	@ (80156d0 <tcp_receive+0xb28>)
 8015644:	481e      	ldr	r0, [pc, #120]	@ (80156c0 <tcp_receive+0xb18>)
 8015646:	f008 feb7 	bl	801e3b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	461c      	mov	r4, r3
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	899b      	ldrh	r3, [r3, #12]
 8015656:	b29b      	uxth	r3, r3
 8015658:	4618      	mov	r0, r3
 801565a:	f7f9 fed9 	bl	800f410 <lwip_htons>
 801565e:	4603      	mov	r3, r0
 8015660:	b2db      	uxtb	r3, r3
 8015662:	f003 0303 	and.w	r3, r3, #3
 8015666:	2b00      	cmp	r3, #0
 8015668:	d001      	beq.n	801566e <tcp_receive+0xac6>
 801566a:	2301      	movs	r3, #1
 801566c:	e000      	b.n	8015670 <tcp_receive+0xac8>
 801566e:	2300      	movs	r3, #0
 8015670:	1919      	adds	r1, r3, r4
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015676:	b28b      	uxth	r3, r1
 8015678:	1ad3      	subs	r3, r2, r3
 801567a:	b29a      	uxth	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7fc fd17 	bl	80120b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	891b      	ldrh	r3, [r3, #8]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d028      	beq.n	80156e2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015690:	4b0d      	ldr	r3, [pc, #52]	@ (80156c8 <tcp_receive+0xb20>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d01d      	beq.n	80156d4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015698:	4b0b      	ldr	r3, [pc, #44]	@ (80156c8 <tcp_receive+0xb20>)
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	4619      	mov	r1, r3
 80156a2:	4610      	mov	r0, r2
 80156a4:	f7fb fe6e 	bl	8011384 <pbuf_cat>
 80156a8:	e018      	b.n	80156dc <tcp_receive+0xb34>
 80156aa:	bf00      	nop
 80156ac:	200126ae 	.word	0x200126ae
 80156b0:	200126a4 	.word	0x200126a4
 80156b4:	20012684 	.word	0x20012684
 80156b8:	08023fbc 	.word	0x08023fbc
 80156bc:	0802439c 	.word	0x0802439c
 80156c0:	08024008 	.word	0x08024008
 80156c4:	080243d8 	.word	0x080243d8
 80156c8:	200126b4 	.word	0x200126b4
 80156cc:	200126b1 	.word	0x200126b1
 80156d0:	080243f8 	.word	0x080243f8
            } else {
              recv_data = cseg->p;
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	4a70      	ldr	r2, [pc, #448]	@ (801589c <tcp_receive+0xcf4>)
 80156da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	2200      	movs	r2, #0
 80156e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	899b      	ldrh	r3, [r3, #12]
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7f9 fe90 	bl	800f410 <lwip_htons>
 80156f0:	4603      	mov	r3, r0
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	f003 0301 	and.w	r3, r3, #1
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d00d      	beq.n	8015718 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80156fc:	4b68      	ldr	r3, [pc, #416]	@ (80158a0 <tcp_receive+0xcf8>)
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	f043 0320 	orr.w	r3, r3, #32
 8015704:	b2da      	uxtb	r2, r3
 8015706:	4b66      	ldr	r3, [pc, #408]	@ (80158a0 <tcp_receive+0xcf8>)
 8015708:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	7d1b      	ldrb	r3, [r3, #20]
 801570e:	2b04      	cmp	r3, #4
 8015710:	d102      	bne.n	8015718 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2207      	movs	r2, #7
 8015716:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015720:	68b8      	ldr	r0, [r7, #8]
 8015722:	f7fd fb06 	bl	8012d32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801572a:	2b00      	cmp	r3, #0
 801572c:	d008      	beq.n	8015740 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	685a      	ldr	r2, [r3, #4]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801573a:	429a      	cmp	r2, r3
 801573c:	f43f af43 	beq.w	80155c6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	8b5b      	ldrh	r3, [r3, #26]
 8015744:	f003 0301 	and.w	r3, r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00e      	beq.n	801576a <tcp_receive+0xbc2>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8b5b      	ldrh	r3, [r3, #26]
 8015750:	f023 0301 	bic.w	r3, r3, #1
 8015754:	b29a      	uxth	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	835a      	strh	r2, [r3, #26]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	8b5b      	ldrh	r3, [r3, #26]
 801575e:	f043 0302 	orr.w	r3, r3, #2
 8015762:	b29a      	uxth	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015768:	e187      	b.n	8015a7a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	8b5b      	ldrh	r3, [r3, #26]
 801576e:	f043 0301 	orr.w	r3, r3, #1
 8015772:	b29a      	uxth	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015778:	e17f      	b.n	8015a7a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801577e:	2b00      	cmp	r3, #0
 8015780:	d106      	bne.n	8015790 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015782:	4848      	ldr	r0, [pc, #288]	@ (80158a4 <tcp_receive+0xcfc>)
 8015784:	f7fd faee 	bl	8012d64 <tcp_seg_copy>
 8015788:	4602      	mov	r2, r0
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	675a      	str	r2, [r3, #116]	@ 0x74
 801578e:	e16c      	b.n	8015a6a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015790:	2300      	movs	r3, #0
 8015792:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015798:	63bb      	str	r3, [r7, #56]	@ 0x38
 801579a:	e156      	b.n	8015a4a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	685a      	ldr	r2, [r3, #4]
 80157a2:	4b41      	ldr	r3, [pc, #260]	@ (80158a8 <tcp_receive+0xd00>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d11d      	bne.n	80157e6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80157aa:	4b3e      	ldr	r3, [pc, #248]	@ (80158a4 <tcp_receive+0xcfc>)
 80157ac:	891a      	ldrh	r2, [r3, #8]
 80157ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b0:	891b      	ldrh	r3, [r3, #8]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	f240 814e 	bls.w	8015a54 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80157b8:	483a      	ldr	r0, [pc, #232]	@ (80158a4 <tcp_receive+0xcfc>)
 80157ba:	f7fd fad3 	bl	8012d64 <tcp_seg_copy>
 80157be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f000 8148 	beq.w	8015a58 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80157c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d003      	beq.n	80157d6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80157ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157d0:	697a      	ldr	r2, [r7, #20]
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	e002      	b.n	80157dc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	697a      	ldr	r2, [r7, #20]
 80157da:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80157dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80157de:	6978      	ldr	r0, [r7, #20]
 80157e0:	f7ff f8de 	bl	80149a0 <tcp_oos_insert_segment>
                }
                break;
 80157e4:	e138      	b.n	8015a58 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80157e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d117      	bne.n	801581c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80157ec:	4b2e      	ldr	r3, [pc, #184]	@ (80158a8 <tcp_receive+0xd00>)
 80157ee:	681a      	ldr	r2, [r3, #0]
 80157f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	1ad3      	subs	r3, r2, r3
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	da57      	bge.n	80158ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80157fc:	4829      	ldr	r0, [pc, #164]	@ (80158a4 <tcp_receive+0xcfc>)
 80157fe:	f7fd fab1 	bl	8012d64 <tcp_seg_copy>
 8015802:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	2b00      	cmp	r3, #0
 8015808:	f000 8128 	beq.w	8015a5c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	69ba      	ldr	r2, [r7, #24]
 8015810:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015812:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015814:	69b8      	ldr	r0, [r7, #24]
 8015816:	f7ff f8c3 	bl	80149a0 <tcp_oos_insert_segment>
                  }
                  break;
 801581a:	e11f      	b.n	8015a5c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801581c:	4b22      	ldr	r3, [pc, #136]	@ (80158a8 <tcp_receive+0xd00>)
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	1ad3      	subs	r3, r2, r3
 8015828:	3b01      	subs	r3, #1
 801582a:	2b00      	cmp	r3, #0
 801582c:	db3e      	blt.n	80158ac <tcp_receive+0xd04>
 801582e:	4b1e      	ldr	r3, [pc, #120]	@ (80158a8 <tcp_receive+0xd00>)
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	685b      	ldr	r3, [r3, #4]
 8015838:	1ad3      	subs	r3, r2, r3
 801583a:	3301      	adds	r3, #1
 801583c:	2b00      	cmp	r3, #0
 801583e:	dc35      	bgt.n	80158ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015840:	4818      	ldr	r0, [pc, #96]	@ (80158a4 <tcp_receive+0xcfc>)
 8015842:	f7fd fa8f 	bl	8012d64 <tcp_seg_copy>
 8015846:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	2b00      	cmp	r3, #0
 801584c:	f000 8108 	beq.w	8015a60 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015852:	68db      	ldr	r3, [r3, #12]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015858:	8912      	ldrh	r2, [r2, #8]
 801585a:	441a      	add	r2, r3
 801585c:	4b12      	ldr	r3, [pc, #72]	@ (80158a8 <tcp_receive+0xd00>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	1ad3      	subs	r3, r2, r3
 8015862:	2b00      	cmp	r3, #0
 8015864:	dd12      	ble.n	801588c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015866:	4b10      	ldr	r3, [pc, #64]	@ (80158a8 <tcp_receive+0xd00>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	b29a      	uxth	r2, r3
 801586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	b29b      	uxth	r3, r3
 8015874:	1ad3      	subs	r3, r2, r3
 8015876:	b29a      	uxth	r2, r3
 8015878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801587a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801587e:	685a      	ldr	r2, [r3, #4]
 8015880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015882:	891b      	ldrh	r3, [r3, #8]
 8015884:	4619      	mov	r1, r3
 8015886:	4610      	mov	r0, r2
 8015888:	f7fb fb28 	bl	8010edc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801588e:	69fa      	ldr	r2, [r7, #28]
 8015890:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015892:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015894:	69f8      	ldr	r0, [r7, #28]
 8015896:	f7ff f883 	bl	80149a0 <tcp_oos_insert_segment>
                  }
                  break;
 801589a:	e0e1      	b.n	8015a60 <tcp_receive+0xeb8>
 801589c:	200126b4 	.word	0x200126b4
 80158a0:	200126b1 	.word	0x200126b1
 80158a4:	20012684 	.word	0x20012684
 80158a8:	200126a4 	.word	0x200126a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80158ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80158b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f040 80c5 	bne.w	8015a44 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80158ba:	4b7f      	ldr	r3, [pc, #508]	@ (8015ab8 <tcp_receive+0xf10>)
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	f340 80bc 	ble.w	8015a44 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80158cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	899b      	ldrh	r3, [r3, #12]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7f9 fd9b 	bl	800f410 <lwip_htons>
 80158da:	4603      	mov	r3, r0
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	f003 0301 	and.w	r3, r3, #1
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	f040 80be 	bne.w	8015a64 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80158e8:	4874      	ldr	r0, [pc, #464]	@ (8015abc <tcp_receive+0xf14>)
 80158ea:	f7fd fa3b 	bl	8012d64 <tcp_seg_copy>
 80158ee:	4602      	mov	r2, r0
 80158f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80158f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f000 80b5 	beq.w	8015a68 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80158fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015906:	8912      	ldrh	r2, [r2, #8]
 8015908:	441a      	add	r2, r3
 801590a:	4b6b      	ldr	r3, [pc, #428]	@ (8015ab8 <tcp_receive+0xf10>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	1ad3      	subs	r3, r2, r3
 8015910:	2b00      	cmp	r3, #0
 8015912:	dd12      	ble.n	801593a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015914:	4b68      	ldr	r3, [pc, #416]	@ (8015ab8 <tcp_receive+0xf10>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	b29a      	uxth	r2, r3
 801591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801591c:	68db      	ldr	r3, [r3, #12]
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	b29b      	uxth	r3, r3
 8015922:	1ad3      	subs	r3, r2, r3
 8015924:	b29a      	uxth	r2, r3
 8015926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015928:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801592c:	685a      	ldr	r2, [r3, #4]
 801592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015930:	891b      	ldrh	r3, [r3, #8]
 8015932:	4619      	mov	r1, r3
 8015934:	4610      	mov	r0, r2
 8015936:	f7fb fad1 	bl	8010edc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801593a:	4b61      	ldr	r3, [pc, #388]	@ (8015ac0 <tcp_receive+0xf18>)
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	461a      	mov	r2, r3
 8015940:	4b5d      	ldr	r3, [pc, #372]	@ (8015ab8 <tcp_receive+0xf10>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	441a      	add	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801594a:	6879      	ldr	r1, [r7, #4]
 801594c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801594e:	440b      	add	r3, r1
 8015950:	1ad3      	subs	r3, r2, r3
 8015952:	2b00      	cmp	r3, #0
 8015954:	f340 8088 	ble.w	8015a68 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	899b      	ldrh	r3, [r3, #12]
 8015960:	b29b      	uxth	r3, r3
 8015962:	4618      	mov	r0, r3
 8015964:	f7f9 fd54 	bl	800f410 <lwip_htons>
 8015968:	4603      	mov	r3, r0
 801596a:	b2db      	uxtb	r3, r3
 801596c:	f003 0301 	and.w	r3, r3, #1
 8015970:	2b00      	cmp	r3, #0
 8015972:	d021      	beq.n	80159b8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	899b      	ldrh	r3, [r3, #12]
 801597c:	b29b      	uxth	r3, r3
 801597e:	b21b      	sxth	r3, r3
 8015980:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015984:	b21c      	sxth	r4, r3
 8015986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	899b      	ldrh	r3, [r3, #12]
 801598e:	b29b      	uxth	r3, r3
 8015990:	4618      	mov	r0, r3
 8015992:	f7f9 fd3d 	bl	800f410 <lwip_htons>
 8015996:	4603      	mov	r3, r0
 8015998:	b2db      	uxtb	r3, r3
 801599a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801599e:	b29b      	uxth	r3, r3
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7f9 fd35 	bl	800f410 <lwip_htons>
 80159a6:	4603      	mov	r3, r0
 80159a8:	b21b      	sxth	r3, r3
 80159aa:	4323      	orrs	r3, r4
 80159ac:	b21a      	sxth	r2, r3
 80159ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	b292      	uxth	r2, r2
 80159b6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159bc:	b29a      	uxth	r2, r3
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159c2:	4413      	add	r3, r2
 80159c4:	b299      	uxth	r1, r3
 80159c6:	4b3c      	ldr	r3, [pc, #240]	@ (8015ab8 <tcp_receive+0xf10>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	1a8a      	subs	r2, r1, r2
 80159d2:	b292      	uxth	r2, r2
 80159d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80159d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	685a      	ldr	r2, [r3, #4]
 80159dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	891b      	ldrh	r3, [r3, #8]
 80159e2:	4619      	mov	r1, r3
 80159e4:	4610      	mov	r0, r2
 80159e6:	f7fb fa79 	bl	8010edc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80159ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	891c      	ldrh	r4, [r3, #8]
 80159f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	68db      	ldr	r3, [r3, #12]
 80159f6:	899b      	ldrh	r3, [r3, #12]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f9 fd08 	bl	800f410 <lwip_htons>
 8015a00:	4603      	mov	r3, r0
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	f003 0303 	and.w	r3, r3, #3
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d001      	beq.n	8015a10 <tcp_receive+0xe68>
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	e000      	b.n	8015a12 <tcp_receive+0xe6a>
 8015a10:	2300      	movs	r3, #0
 8015a12:	4423      	add	r3, r4
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	4b2a      	ldr	r3, [pc, #168]	@ (8015ac0 <tcp_receive+0xf18>)
 8015a18:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015a1a:	4b29      	ldr	r3, [pc, #164]	@ (8015ac0 <tcp_receive+0xf18>)
 8015a1c:	881b      	ldrh	r3, [r3, #0]
 8015a1e:	461a      	mov	r2, r3
 8015a20:	4b25      	ldr	r3, [pc, #148]	@ (8015ab8 <tcp_receive+0xf10>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	441a      	add	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a2e:	440b      	add	r3, r1
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d019      	beq.n	8015a68 <tcp_receive+0xec0>
 8015a34:	4b23      	ldr	r3, [pc, #140]	@ (8015ac4 <tcp_receive+0xf1c>)
 8015a36:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015a3a:	4923      	ldr	r1, [pc, #140]	@ (8015ac8 <tcp_receive+0xf20>)
 8015a3c:	4823      	ldr	r0, [pc, #140]	@ (8015acc <tcp_receive+0xf24>)
 8015a3e:	f008 fcbb 	bl	801e3b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015a42:	e011      	b.n	8015a68 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	f47f aea5 	bne.w	801579c <tcp_receive+0xbf4>
 8015a52:	e00a      	b.n	8015a6a <tcp_receive+0xec2>
                break;
 8015a54:	bf00      	nop
 8015a56:	e008      	b.n	8015a6a <tcp_receive+0xec2>
                break;
 8015a58:	bf00      	nop
 8015a5a:	e006      	b.n	8015a6a <tcp_receive+0xec2>
                  break;
 8015a5c:	bf00      	nop
 8015a5e:	e004      	b.n	8015a6a <tcp_receive+0xec2>
                  break;
 8015a60:	bf00      	nop
 8015a62:	e002      	b.n	8015a6a <tcp_receive+0xec2>
                  break;
 8015a64:	bf00      	nop
 8015a66:	e000      	b.n	8015a6a <tcp_receive+0xec2>
                break;
 8015a68:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	f001 fe88 	bl	8017780 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015a70:	e003      	b.n	8015a7a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f001 fe84 	bl	8017780 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a78:	e01a      	b.n	8015ab0 <tcp_receive+0xf08>
 8015a7a:	e019      	b.n	8015ab0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8015ab8 <tcp_receive+0xf10>)
 8015a7e:	681a      	ldr	r2, [r3, #0]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a84:	1ad3      	subs	r3, r2, r3
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	db0a      	blt.n	8015aa0 <tcp_receive+0xef8>
 8015a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8015ab8 <tcp_receive+0xf10>)
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a92:	6879      	ldr	r1, [r7, #4]
 8015a94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a96:	440b      	add	r3, r1
 8015a98:	1ad3      	subs	r3, r2, r3
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	dd07      	ble.n	8015ab0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	8b5b      	ldrh	r3, [r3, #26]
 8015aa4:	f043 0302 	orr.w	r3, r3, #2
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015aae:	e7ff      	b.n	8015ab0 <tcp_receive+0xf08>
 8015ab0:	bf00      	nop
 8015ab2:	3750      	adds	r7, #80	@ 0x50
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8015ab8:	200126a4 	.word	0x200126a4
 8015abc:	20012684 	.word	0x20012684
 8015ac0:	200126ae 	.word	0x200126ae
 8015ac4:	08023fbc 	.word	0x08023fbc
 8015ac8:	08024364 	.word	0x08024364
 8015acc:	08024008 	.word	0x08024008

08015ad0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b083      	sub	sp, #12
 8015ad4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015ad6:	4b15      	ldr	r3, [pc, #84]	@ (8015b2c <tcp_get_next_optbyte+0x5c>)
 8015ad8:	881b      	ldrh	r3, [r3, #0]
 8015ada:	1c5a      	adds	r2, r3, #1
 8015adc:	b291      	uxth	r1, r2
 8015ade:	4a13      	ldr	r2, [pc, #76]	@ (8015b2c <tcp_get_next_optbyte+0x5c>)
 8015ae0:	8011      	strh	r1, [r2, #0]
 8015ae2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015ae4:	4b12      	ldr	r3, [pc, #72]	@ (8015b30 <tcp_get_next_optbyte+0x60>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d004      	beq.n	8015af6 <tcp_get_next_optbyte+0x26>
 8015aec:	4b11      	ldr	r3, [pc, #68]	@ (8015b34 <tcp_get_next_optbyte+0x64>)
 8015aee:	881b      	ldrh	r3, [r3, #0]
 8015af0:	88fa      	ldrh	r2, [r7, #6]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d208      	bcs.n	8015b08 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015af6:	4b10      	ldr	r3, [pc, #64]	@ (8015b38 <tcp_get_next_optbyte+0x68>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	3314      	adds	r3, #20
 8015afc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015afe:	88fb      	ldrh	r3, [r7, #6]
 8015b00:	683a      	ldr	r2, [r7, #0]
 8015b02:	4413      	add	r3, r2
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	e00b      	b.n	8015b20 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b08:	88fb      	ldrh	r3, [r7, #6]
 8015b0a:	b2da      	uxtb	r2, r3
 8015b0c:	4b09      	ldr	r3, [pc, #36]	@ (8015b34 <tcp_get_next_optbyte+0x64>)
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015b16:	4b06      	ldr	r3, [pc, #24]	@ (8015b30 <tcp_get_next_optbyte+0x60>)
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	797b      	ldrb	r3, [r7, #5]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	370c      	adds	r7, #12
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr
 8015b2c:	200126a0 	.word	0x200126a0
 8015b30:	2001269c 	.word	0x2001269c
 8015b34:	2001269a 	.word	0x2001269a
 8015b38:	20012694 	.word	0x20012694

08015b3c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <tcp_parseopt+0x1c>
 8015b4a:	4b32      	ldr	r3, [pc, #200]	@ (8015c14 <tcp_parseopt+0xd8>)
 8015b4c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015b50:	4931      	ldr	r1, [pc, #196]	@ (8015c18 <tcp_parseopt+0xdc>)
 8015b52:	4832      	ldr	r0, [pc, #200]	@ (8015c1c <tcp_parseopt+0xe0>)
 8015b54:	f008 fc30 	bl	801e3b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015b58:	4b31      	ldr	r3, [pc, #196]	@ (8015c20 <tcp_parseopt+0xe4>)
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d056      	beq.n	8015c0e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015b60:	4b30      	ldr	r3, [pc, #192]	@ (8015c24 <tcp_parseopt+0xe8>)
 8015b62:	2200      	movs	r2, #0
 8015b64:	801a      	strh	r2, [r3, #0]
 8015b66:	e046      	b.n	8015bf6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015b68:	f7ff ffb2 	bl	8015ad0 <tcp_get_next_optbyte>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015b70:	7bfb      	ldrb	r3, [r7, #15]
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d006      	beq.n	8015b84 <tcp_parseopt+0x48>
 8015b76:	2b02      	cmp	r3, #2
 8015b78:	dc2a      	bgt.n	8015bd0 <tcp_parseopt+0x94>
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d042      	beq.n	8015c04 <tcp_parseopt+0xc8>
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d038      	beq.n	8015bf4 <tcp_parseopt+0xb8>
 8015b82:	e025      	b.n	8015bd0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015b84:	f7ff ffa4 	bl	8015ad0 <tcp_get_next_optbyte>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	2b04      	cmp	r3, #4
 8015b8c:	d13c      	bne.n	8015c08 <tcp_parseopt+0xcc>
 8015b8e:	4b25      	ldr	r3, [pc, #148]	@ (8015c24 <tcp_parseopt+0xe8>)
 8015b90:	881b      	ldrh	r3, [r3, #0]
 8015b92:	3301      	adds	r3, #1
 8015b94:	4a22      	ldr	r2, [pc, #136]	@ (8015c20 <tcp_parseopt+0xe4>)
 8015b96:	8812      	ldrh	r2, [r2, #0]
 8015b98:	4293      	cmp	r3, r2
 8015b9a:	da35      	bge.n	8015c08 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015b9c:	f7ff ff98 	bl	8015ad0 <tcp_get_next_optbyte>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	021b      	lsls	r3, r3, #8
 8015ba4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015ba6:	f7ff ff93 	bl	8015ad0 <tcp_get_next_optbyte>
 8015baa:	4603      	mov	r3, r0
 8015bac:	461a      	mov	r2, r3
 8015bae:	89bb      	ldrh	r3, [r7, #12]
 8015bb0:	4313      	orrs	r3, r2
 8015bb2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015bb4:	89bb      	ldrh	r3, [r7, #12]
 8015bb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015bba:	d804      	bhi.n	8015bc6 <tcp_parseopt+0x8a>
 8015bbc:	89bb      	ldrh	r3, [r7, #12]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d001      	beq.n	8015bc6 <tcp_parseopt+0x8a>
 8015bc2:	89ba      	ldrh	r2, [r7, #12]
 8015bc4:	e001      	b.n	8015bca <tcp_parseopt+0x8e>
 8015bc6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8015bce:	e012      	b.n	8015bf6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015bd0:	f7ff ff7e 	bl	8015ad0 <tcp_get_next_optbyte>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015bd8:	7afb      	ldrb	r3, [r7, #11]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d916      	bls.n	8015c0c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015bde:	7afb      	ldrb	r3, [r7, #11]
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	4b10      	ldr	r3, [pc, #64]	@ (8015c24 <tcp_parseopt+0xe8>)
 8015be4:	881b      	ldrh	r3, [r3, #0]
 8015be6:	4413      	add	r3, r2
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	3b02      	subs	r3, #2
 8015bec:	b29a      	uxth	r2, r3
 8015bee:	4b0d      	ldr	r3, [pc, #52]	@ (8015c24 <tcp_parseopt+0xe8>)
 8015bf0:	801a      	strh	r2, [r3, #0]
 8015bf2:	e000      	b.n	8015bf6 <tcp_parseopt+0xba>
          break;
 8015bf4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8015c24 <tcp_parseopt+0xe8>)
 8015bf8:	881a      	ldrh	r2, [r3, #0]
 8015bfa:	4b09      	ldr	r3, [pc, #36]	@ (8015c20 <tcp_parseopt+0xe4>)
 8015bfc:	881b      	ldrh	r3, [r3, #0]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d3b2      	bcc.n	8015b68 <tcp_parseopt+0x2c>
 8015c02:	e004      	b.n	8015c0e <tcp_parseopt+0xd2>
          return;
 8015c04:	bf00      	nop
 8015c06:	e002      	b.n	8015c0e <tcp_parseopt+0xd2>
            return;
 8015c08:	bf00      	nop
 8015c0a:	e000      	b.n	8015c0e <tcp_parseopt+0xd2>
            return;
 8015c0c:	bf00      	nop
      }
    }
  }
}
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	08023fbc 	.word	0x08023fbc
 8015c18:	08024420 	.word	0x08024420
 8015c1c:	08024008 	.word	0x08024008
 8015c20:	20012698 	.word	0x20012698
 8015c24:	200126a0 	.word	0x200126a0

08015c28 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015c28:	b480      	push	{r7}
 8015c2a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015c2c:	4b05      	ldr	r3, [pc, #20]	@ (8015c44 <tcp_trigger_input_pcb_close+0x1c>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	f043 0310 	orr.w	r3, r3, #16
 8015c34:	b2da      	uxtb	r2, r3
 8015c36:	4b03      	ldr	r3, [pc, #12]	@ (8015c44 <tcp_trigger_input_pcb_close+0x1c>)
 8015c38:	701a      	strb	r2, [r3, #0]
}
 8015c3a:	bf00      	nop
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr
 8015c44:	200126b1 	.word	0x200126b1

08015c48 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d00a      	beq.n	8015c70 <tcp_route+0x28>
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	7a1b      	ldrb	r3, [r3, #8]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	7a1b      	ldrb	r3, [r3, #8]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7fa ff30 	bl	8010acc <netif_get_by_index>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	e003      	b.n	8015c78 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f005 fda9 	bl	801b7c8 <ip4_route>
 8015c76:	4603      	mov	r3, r0
  }
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3710      	adds	r7, #16
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015c80:	b590      	push	{r4, r7, lr}
 8015c82:	b087      	sub	sp, #28
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	603b      	str	r3, [r7, #0]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d105      	bne.n	8015ca2 <tcp_create_segment+0x22>
 8015c96:	4b43      	ldr	r3, [pc, #268]	@ (8015da4 <tcp_create_segment+0x124>)
 8015c98:	22a3      	movs	r2, #163	@ 0xa3
 8015c9a:	4943      	ldr	r1, [pc, #268]	@ (8015da8 <tcp_create_segment+0x128>)
 8015c9c:	4843      	ldr	r0, [pc, #268]	@ (8015dac <tcp_create_segment+0x12c>)
 8015c9e:	f008 fb8b 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d105      	bne.n	8015cb4 <tcp_create_segment+0x34>
 8015ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8015da4 <tcp_create_segment+0x124>)
 8015caa:	22a4      	movs	r2, #164	@ 0xa4
 8015cac:	4940      	ldr	r1, [pc, #256]	@ (8015db0 <tcp_create_segment+0x130>)
 8015cae:	483f      	ldr	r0, [pc, #252]	@ (8015dac <tcp_create_segment+0x12c>)
 8015cb0:	f008 fb82 	bl	801e3b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015cb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	f003 0304 	and.w	r3, r3, #4
 8015cc0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015cc2:	2003      	movs	r0, #3
 8015cc4:	f7fa fb6a 	bl	801039c <memp_malloc>
 8015cc8:	6138      	str	r0, [r7, #16]
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d104      	bne.n	8015cda <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015cd0:	68b8      	ldr	r0, [r7, #8]
 8015cd2:	f7fb fa89 	bl	80111e8 <pbuf_free>
    return NULL;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	e060      	b.n	8015d9c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015ce0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	891a      	ldrh	r2, [r3, #8]
 8015cf2:	7dfb      	ldrb	r3, [r7, #23]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d205      	bcs.n	8015d06 <tcp_create_segment+0x86>
 8015cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8015da4 <tcp_create_segment+0x124>)
 8015cfc:	22b0      	movs	r2, #176	@ 0xb0
 8015cfe:	492d      	ldr	r1, [pc, #180]	@ (8015db4 <tcp_create_segment+0x134>)
 8015d00:	482a      	ldr	r0, [pc, #168]	@ (8015dac <tcp_create_segment+0x12c>)
 8015d02:	f008 fb59 	bl	801e3b8 <iprintf>
  seg->len = p->tot_len - optlen;
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	891a      	ldrh	r2, [r3, #8]
 8015d0a:	7dfb      	ldrb	r3, [r7, #23]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015d16:	2114      	movs	r1, #20
 8015d18:	68b8      	ldr	r0, [r7, #8]
 8015d1a:	f7fb f9cf 	bl	80110bc <pbuf_add_header>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d004      	beq.n	8015d2e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015d24:	6938      	ldr	r0, [r7, #16]
 8015d26:	f7fd f804 	bl	8012d32 <tcp_seg_free>
    return NULL;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	e036      	b.n	8015d9c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	685a      	ldr	r2, [r3, #4]
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	8ada      	ldrh	r2, [r3, #22]
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	68dc      	ldr	r4, [r3, #12]
 8015d40:	4610      	mov	r0, r2
 8015d42:	f7f9 fb65 	bl	800f410 <lwip_htons>
 8015d46:	4603      	mov	r3, r0
 8015d48:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	8b1a      	ldrh	r2, [r3, #24]
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	68dc      	ldr	r4, [r3, #12]
 8015d52:	4610      	mov	r0, r2
 8015d54:	f7f9 fb5c 	bl	800f410 <lwip_htons>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	68dc      	ldr	r4, [r3, #12]
 8015d60:	6838      	ldr	r0, [r7, #0]
 8015d62:	f7f9 fb6a 	bl	800f43a <lwip_htonl>
 8015d66:	4603      	mov	r3, r0
 8015d68:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015d6a:	7dfb      	ldrb	r3, [r7, #23]
 8015d6c:	089b      	lsrs	r3, r3, #2
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	3305      	adds	r3, #5
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	031b      	lsls	r3, r3, #12
 8015d76:	b29a      	uxth	r2, r3
 8015d78:	79fb      	ldrb	r3, [r7, #7]
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	4313      	orrs	r3, r2
 8015d7e:	b29a      	uxth	r2, r3
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	68dc      	ldr	r4, [r3, #12]
 8015d84:	4610      	mov	r0, r2
 8015d86:	f7f9 fb43 	bl	800f410 <lwip_htons>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	2200      	movs	r2, #0
 8015d94:	749a      	strb	r2, [r3, #18]
 8015d96:	2200      	movs	r2, #0
 8015d98:	74da      	strb	r2, [r3, #19]
  return seg;
 8015d9a:	693b      	ldr	r3, [r7, #16]
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	371c      	adds	r7, #28
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd90      	pop	{r4, r7, pc}
 8015da4:	0802443c 	.word	0x0802443c
 8015da8:	08024470 	.word	0x08024470
 8015dac:	08024490 	.word	0x08024490
 8015db0:	080244b8 	.word	0x080244b8
 8015db4:	080244dc 	.word	0x080244dc

08015db8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	607b      	str	r3, [r7, #4]
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	73fb      	strb	r3, [r7, #15]
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	81bb      	strh	r3, [r7, #12]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015dcc:	89bb      	ldrh	r3, [r7, #12]
 8015dce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d105      	bne.n	8015de2 <tcp_pbuf_prealloc+0x2a>
 8015dd6:	4b30      	ldr	r3, [pc, #192]	@ (8015e98 <tcp_pbuf_prealloc+0xe0>)
 8015dd8:	22e8      	movs	r2, #232	@ 0xe8
 8015dda:	4930      	ldr	r1, [pc, #192]	@ (8015e9c <tcp_pbuf_prealloc+0xe4>)
 8015ddc:	4830      	ldr	r0, [pc, #192]	@ (8015ea0 <tcp_pbuf_prealloc+0xe8>)
 8015dde:	f008 faeb 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015de2:	6a3b      	ldr	r3, [r7, #32]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d105      	bne.n	8015df4 <tcp_pbuf_prealloc+0x3c>
 8015de8:	4b2b      	ldr	r3, [pc, #172]	@ (8015e98 <tcp_pbuf_prealloc+0xe0>)
 8015dea:	22e9      	movs	r2, #233	@ 0xe9
 8015dec:	492d      	ldr	r1, [pc, #180]	@ (8015ea4 <tcp_pbuf_prealloc+0xec>)
 8015dee:	482c      	ldr	r0, [pc, #176]	@ (8015ea0 <tcp_pbuf_prealloc+0xe8>)
 8015df0:	f008 fae2 	bl	801e3b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015df4:	89ba      	ldrh	r2, [r7, #12]
 8015df6:	897b      	ldrh	r3, [r7, #10]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d221      	bcs.n	8015e40 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015e00:	f003 0302 	and.w	r3, r3, #2
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d111      	bne.n	8015e2c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e08:	6a3b      	ldr	r3, [r7, #32]
 8015e0a:	8b5b      	ldrh	r3, [r3, #26]
 8015e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d115      	bne.n	8015e40 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015e14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d007      	beq.n	8015e2c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015e1c:	6a3b      	ldr	r3, [r7, #32]
 8015e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d103      	bne.n	8015e2c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015e24:	6a3b      	ldr	r3, [r7, #32]
 8015e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d009      	beq.n	8015e40 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015e2c:	89bb      	ldrh	r3, [r7, #12]
 8015e2e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8015e32:	f023 0203 	bic.w	r2, r3, #3
 8015e36:	897b      	ldrh	r3, [r7, #10]
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	bf28      	it	cs
 8015e3c:	4613      	movcs	r3, r2
 8015e3e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015e40:	8af9      	ldrh	r1, [r7, #22]
 8015e42:	7bfb      	ldrb	r3, [r7, #15]
 8015e44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7fa fee9 	bl	8010c20 <pbuf_alloc>
 8015e4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015e56:	2300      	movs	r3, #0
 8015e58:	e019      	b.n	8015e8e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d006      	beq.n	8015e70 <tcp_pbuf_prealloc+0xb8>
 8015e62:	4b0d      	ldr	r3, [pc, #52]	@ (8015e98 <tcp_pbuf_prealloc+0xe0>)
 8015e64:	f240 120b 	movw	r2, #267	@ 0x10b
 8015e68:	490f      	ldr	r1, [pc, #60]	@ (8015ea8 <tcp_pbuf_prealloc+0xf0>)
 8015e6a:	480d      	ldr	r0, [pc, #52]	@ (8015ea0 <tcp_pbuf_prealloc+0xe8>)
 8015e6c:	f008 faa4 	bl	801e3b8 <iprintf>
  *oversize = p->len - length;
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	895a      	ldrh	r2, [r3, #10]
 8015e74:	89bb      	ldrh	r3, [r7, #12]
 8015e76:	1ad3      	subs	r3, r2, r3
 8015e78:	b29a      	uxth	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	89ba      	ldrh	r2, [r7, #12]
 8015e82:	811a      	strh	r2, [r3, #8]
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	891a      	ldrh	r2, [r3, #8]
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	815a      	strh	r2, [r3, #10]
  return p;
 8015e8c:	693b      	ldr	r3, [r7, #16]
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3718      	adds	r7, #24
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	0802443c 	.word	0x0802443c
 8015e9c:	080244f4 	.word	0x080244f4
 8015ea0:	08024490 	.word	0x08024490
 8015ea4:	08024518 	.word	0x08024518
 8015ea8:	08024538 	.word	0x08024538

08015eac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <tcp_write_checks+0x20>
 8015ebe:	4b33      	ldr	r3, [pc, #204]	@ (8015f8c <tcp_write_checks+0xe0>)
 8015ec0:	f240 1233 	movw	r2, #307	@ 0x133
 8015ec4:	4932      	ldr	r1, [pc, #200]	@ (8015f90 <tcp_write_checks+0xe4>)
 8015ec6:	4833      	ldr	r0, [pc, #204]	@ (8015f94 <tcp_write_checks+0xe8>)
 8015ec8:	f008 fa76 	bl	801e3b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	7d1b      	ldrb	r3, [r3, #20]
 8015ed0:	2b04      	cmp	r3, #4
 8015ed2:	d00e      	beq.n	8015ef2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015ed8:	2b07      	cmp	r3, #7
 8015eda:	d00a      	beq.n	8015ef2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015ee0:	2b02      	cmp	r3, #2
 8015ee2:	d006      	beq.n	8015ef2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015ee8:	2b03      	cmp	r3, #3
 8015eea:	d002      	beq.n	8015ef2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015eec:	f06f 030a 	mvn.w	r3, #10
 8015ef0:	e048      	b.n	8015f84 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015ef2:	887b      	ldrh	r3, [r7, #2]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d101      	bne.n	8015efc <tcp_write_checks+0x50>
    return ERR_OK;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	e043      	b.n	8015f84 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015f02:	887a      	ldrh	r2, [r7, #2]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d909      	bls.n	8015f1c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	8b5b      	ldrh	r3, [r3, #26]
 8015f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f16:	f04f 33ff 	mov.w	r3, #4294967295
 8015f1a:	e033      	b.n	8015f84 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f22:	2b08      	cmp	r3, #8
 8015f24:	d909      	bls.n	8015f3a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	8b5b      	ldrh	r3, [r3, #26]
 8015f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f2e:	b29a      	uxth	r2, r3
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f34:	f04f 33ff 	mov.w	r3, #4294967295
 8015f38:	e024      	b.n	8015f84 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00f      	beq.n	8015f64 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d11a      	bne.n	8015f82 <tcp_write_checks+0xd6>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d116      	bne.n	8015f82 <tcp_write_checks+0xd6>
 8015f54:	4b0d      	ldr	r3, [pc, #52]	@ (8015f8c <tcp_write_checks+0xe0>)
 8015f56:	f240 1255 	movw	r2, #341	@ 0x155
 8015f5a:	490f      	ldr	r1, [pc, #60]	@ (8015f98 <tcp_write_checks+0xec>)
 8015f5c:	480d      	ldr	r0, [pc, #52]	@ (8015f94 <tcp_write_checks+0xe8>)
 8015f5e:	f008 fa2b 	bl	801e3b8 <iprintf>
 8015f62:	e00e      	b.n	8015f82 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d103      	bne.n	8015f74 <tcp_write_checks+0xc8>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d006      	beq.n	8015f82 <tcp_write_checks+0xd6>
 8015f74:	4b05      	ldr	r3, [pc, #20]	@ (8015f8c <tcp_write_checks+0xe0>)
 8015f76:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8015f7a:	4908      	ldr	r1, [pc, #32]	@ (8015f9c <tcp_write_checks+0xf0>)
 8015f7c:	4805      	ldr	r0, [pc, #20]	@ (8015f94 <tcp_write_checks+0xe8>)
 8015f7e:	f008 fa1b 	bl	801e3b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015f82:	2300      	movs	r3, #0
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3708      	adds	r7, #8
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	0802443c 	.word	0x0802443c
 8015f90:	0802454c 	.word	0x0802454c
 8015f94:	08024490 	.word	0x08024490
 8015f98:	0802456c 	.word	0x0802456c
 8015f9c:	080245a8 	.word	0x080245a8

08015fa0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015fa0:	b590      	push	{r4, r7, lr}
 8015fa2:	b09b      	sub	sp, #108	@ 0x6c
 8015fa4:	af04      	add	r7, sp, #16
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	4611      	mov	r1, r2
 8015fac:	461a      	mov	r2, r3
 8015fae:	460b      	mov	r3, r1
 8015fb0:	80fb      	strh	r3, [r7, #6]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015fca:	2300      	movs	r3, #0
 8015fcc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d109      	bne.n	8015ffc <tcp_write+0x5c>
 8015fe8:	4ba4      	ldr	r3, [pc, #656]	@ (801627c <tcp_write+0x2dc>)
 8015fea:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8015fee:	49a4      	ldr	r1, [pc, #656]	@ (8016280 <tcp_write+0x2e0>)
 8015ff0:	48a4      	ldr	r0, [pc, #656]	@ (8016284 <tcp_write+0x2e4>)
 8015ff2:	f008 f9e1 	bl	801e3b8 <iprintf>
 8015ff6:	f06f 030f 	mvn.w	r3, #15
 8015ffa:	e32a      	b.n	8016652 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016002:	085b      	lsrs	r3, r3, #1
 8016004:	b29a      	uxth	r2, r3
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801600a:	4293      	cmp	r3, r2
 801600c:	bf28      	it	cs
 801600e:	4613      	movcs	r3, r2
 8016010:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016012:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016014:	2b00      	cmp	r3, #0
 8016016:	d102      	bne.n	801601e <tcp_write+0x7e>
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801601c:	e000      	b.n	8016020 <tcp_write+0x80>
 801601e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016020:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d109      	bne.n	801603c <tcp_write+0x9c>
 8016028:	4b94      	ldr	r3, [pc, #592]	@ (801627c <tcp_write+0x2dc>)
 801602a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801602e:	4996      	ldr	r1, [pc, #600]	@ (8016288 <tcp_write+0x2e8>)
 8016030:	4894      	ldr	r0, [pc, #592]	@ (8016284 <tcp_write+0x2e4>)
 8016032:	f008 f9c1 	bl	801e3b8 <iprintf>
 8016036:	f06f 030f 	mvn.w	r3, #15
 801603a:	e30a      	b.n	8016652 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801603c:	88fb      	ldrh	r3, [r7, #6]
 801603e:	4619      	mov	r1, r3
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f7ff ff33 	bl	8015eac <tcp_write_checks>
 8016046:	4603      	mov	r3, r0
 8016048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801604c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016050:	2b00      	cmp	r3, #0
 8016052:	d002      	beq.n	801605a <tcp_write+0xba>
    return err;
 8016054:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016058:	e2fb      	b.n	8016652 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016060:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016064:	2300      	movs	r3, #0
 8016066:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801606e:	2b00      	cmp	r3, #0
 8016070:	f000 80f6 	beq.w	8016260 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016078:	653b      	str	r3, [r7, #80]	@ 0x50
 801607a:	e002      	b.n	8016082 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801607c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d1f8      	bne.n	801607c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801608a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801608c:	7a9b      	ldrb	r3, [r3, #10]
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	b29b      	uxth	r3, r3
 8016092:	f003 0304 	and.w	r3, r3, #4
 8016096:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016098:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801609a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801609c:	891b      	ldrh	r3, [r3, #8]
 801609e:	4619      	mov	r1, r3
 80160a0:	8c3b      	ldrh	r3, [r7, #32]
 80160a2:	440b      	add	r3, r1
 80160a4:	429a      	cmp	r2, r3
 80160a6:	da06      	bge.n	80160b6 <tcp_write+0x116>
 80160a8:	4b74      	ldr	r3, [pc, #464]	@ (801627c <tcp_write+0x2dc>)
 80160aa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80160ae:	4977      	ldr	r1, [pc, #476]	@ (801628c <tcp_write+0x2ec>)
 80160b0:	4874      	ldr	r0, [pc, #464]	@ (8016284 <tcp_write+0x2e4>)
 80160b2:	f008 f981 	bl	801e3b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80160b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160b8:	891a      	ldrh	r2, [r3, #8]
 80160ba:	8c3b      	ldrh	r3, [r7, #32]
 80160bc:	4413      	add	r3, r2
 80160be:	b29b      	uxth	r3, r3
 80160c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80160c2:	1ad3      	subs	r3, r2, r3
 80160c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80160cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80160ce:	8a7b      	ldrh	r3, [r7, #18]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d026      	beq.n	8016122 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80160d4:	8a7b      	ldrh	r3, [r7, #18]
 80160d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80160d8:	429a      	cmp	r2, r3
 80160da:	d206      	bcs.n	80160ea <tcp_write+0x14a>
 80160dc:	4b67      	ldr	r3, [pc, #412]	@ (801627c <tcp_write+0x2dc>)
 80160de:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80160e2:	496b      	ldr	r1, [pc, #428]	@ (8016290 <tcp_write+0x2f0>)
 80160e4:	4867      	ldr	r0, [pc, #412]	@ (8016284 <tcp_write+0x2e4>)
 80160e6:	f008 f967 	bl	801e3b8 <iprintf>
      seg = last_unsent;
 80160ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80160ee:	8a7b      	ldrh	r3, [r7, #18]
 80160f0:	88fa      	ldrh	r2, [r7, #6]
 80160f2:	4293      	cmp	r3, r2
 80160f4:	bf28      	it	cs
 80160f6:	4613      	movcs	r3, r2
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80160fc:	4293      	cmp	r3, r2
 80160fe:	bf28      	it	cs
 8016100:	4613      	movcs	r3, r2
 8016102:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8016104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016108:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801610a:	4413      	add	r3, r2
 801610c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8016110:	8a7a      	ldrh	r2, [r7, #18]
 8016112:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016114:	1ad3      	subs	r3, r2, r3
 8016116:	b29b      	uxth	r3, r3
 8016118:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801611a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801611c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016122:	8a7b      	ldrh	r3, [r7, #18]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d00b      	beq.n	8016140 <tcp_write+0x1a0>
 8016128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801612c:	88fb      	ldrh	r3, [r7, #6]
 801612e:	429a      	cmp	r2, r3
 8016130:	d006      	beq.n	8016140 <tcp_write+0x1a0>
 8016132:	4b52      	ldr	r3, [pc, #328]	@ (801627c <tcp_write+0x2dc>)
 8016134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016138:	4956      	ldr	r1, [pc, #344]	@ (8016294 <tcp_write+0x2f4>)
 801613a:	4852      	ldr	r0, [pc, #328]	@ (8016284 <tcp_write+0x2e4>)
 801613c:	f008 f93c 	bl	801e3b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016144:	88fb      	ldrh	r3, [r7, #6]
 8016146:	429a      	cmp	r2, r3
 8016148:	f080 8167 	bcs.w	801641a <tcp_write+0x47a>
 801614c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801614e:	2b00      	cmp	r3, #0
 8016150:	f000 8163 	beq.w	801641a <tcp_write+0x47a>
 8016154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016156:	891b      	ldrh	r3, [r3, #8]
 8016158:	2b00      	cmp	r3, #0
 801615a:	f000 815e 	beq.w	801641a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801615e:	88fa      	ldrh	r2, [r7, #6]
 8016160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016164:	1ad2      	subs	r2, r2, r3
 8016166:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016168:	4293      	cmp	r3, r2
 801616a:	bfa8      	it	ge
 801616c:	4613      	movge	r3, r2
 801616e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016172:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016174:	797b      	ldrb	r3, [r7, #5]
 8016176:	f003 0301 	and.w	r3, r3, #1
 801617a:	2b00      	cmp	r3, #0
 801617c:	d027      	beq.n	80161ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801617e:	f107 0012 	add.w	r0, r7, #18
 8016182:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016184:	8bf9      	ldrh	r1, [r7, #30]
 8016186:	2301      	movs	r3, #1
 8016188:	9302      	str	r3, [sp, #8]
 801618a:	797b      	ldrb	r3, [r7, #5]
 801618c:	9301      	str	r3, [sp, #4]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	4603      	mov	r3, r0
 8016194:	2000      	movs	r0, #0
 8016196:	f7ff fe0f 	bl	8015db8 <tcp_pbuf_prealloc>
 801619a:	6578      	str	r0, [r7, #84]	@ 0x54
 801619c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 8225 	beq.w	80165ee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80161a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80161a6:	6858      	ldr	r0, [r3, #4]
 80161a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80161ac:	68ba      	ldr	r2, [r7, #8]
 80161ae:	4413      	add	r3, r2
 80161b0:	8bfa      	ldrh	r2, [r7, #30]
 80161b2:	4619      	mov	r1, r3
 80161b4:	f008 faa1 	bl	801e6fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80161b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80161ba:	f7fb f8a3 	bl	8011304 <pbuf_clen>
 80161be:	4603      	mov	r3, r0
 80161c0:	461a      	mov	r2, r3
 80161c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80161c6:	4413      	add	r3, r2
 80161c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80161cc:	e041      	b.n	8016252 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80161ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80161d4:	e002      	b.n	80161dc <tcp_write+0x23c>
 80161d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	637b      	str	r3, [r7, #52]	@ 0x34
 80161dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d1f8      	bne.n	80161d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80161e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161e6:	7b1b      	ldrb	r3, [r3, #12]
 80161e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d115      	bne.n	801621c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80161f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161f6:	8952      	ldrh	r2, [r2, #10]
 80161f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80161fa:	68ba      	ldr	r2, [r7, #8]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d10d      	bne.n	801621c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016204:	2b00      	cmp	r3, #0
 8016206:	d006      	beq.n	8016216 <tcp_write+0x276>
 8016208:	4b1c      	ldr	r3, [pc, #112]	@ (801627c <tcp_write+0x2dc>)
 801620a:	f240 2231 	movw	r2, #561	@ 0x231
 801620e:	4922      	ldr	r1, [pc, #136]	@ (8016298 <tcp_write+0x2f8>)
 8016210:	481c      	ldr	r0, [pc, #112]	@ (8016284 <tcp_write+0x2e4>)
 8016212:	f008 f8d1 	bl	801e3b8 <iprintf>
          extendlen = seglen;
 8016216:	8bfb      	ldrh	r3, [r7, #30]
 8016218:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801621a:	e01a      	b.n	8016252 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801621c:	8bfb      	ldrh	r3, [r7, #30]
 801621e:	2201      	movs	r2, #1
 8016220:	4619      	mov	r1, r3
 8016222:	2000      	movs	r0, #0
 8016224:	f7fa fcfc 	bl	8010c20 <pbuf_alloc>
 8016228:	6578      	str	r0, [r7, #84]	@ 0x54
 801622a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801622c:	2b00      	cmp	r3, #0
 801622e:	f000 81e0 	beq.w	80165f2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016236:	68ba      	ldr	r2, [r7, #8]
 8016238:	441a      	add	r2, r3
 801623a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801623c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801623e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016240:	f7fb f860 	bl	8011304 <pbuf_clen>
 8016244:	4603      	mov	r3, r0
 8016246:	461a      	mov	r2, r3
 8016248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801624c:	4413      	add	r3, r2
 801624e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016252:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016256:	8bfb      	ldrh	r3, [r7, #30]
 8016258:	4413      	add	r3, r2
 801625a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801625e:	e0dc      	b.n	801641a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016266:	2b00      	cmp	r3, #0
 8016268:	f000 80d7 	beq.w	801641a <tcp_write+0x47a>
 801626c:	4b03      	ldr	r3, [pc, #12]	@ (801627c <tcp_write+0x2dc>)
 801626e:	f240 224a 	movw	r2, #586	@ 0x24a
 8016272:	490a      	ldr	r1, [pc, #40]	@ (801629c <tcp_write+0x2fc>)
 8016274:	4803      	ldr	r0, [pc, #12]	@ (8016284 <tcp_write+0x2e4>)
 8016276:	f008 f89f 	bl	801e3b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801627a:	e0ce      	b.n	801641a <tcp_write+0x47a>
 801627c:	0802443c 	.word	0x0802443c
 8016280:	080245dc 	.word	0x080245dc
 8016284:	08024490 	.word	0x08024490
 8016288:	080245f4 	.word	0x080245f4
 801628c:	08024628 	.word	0x08024628
 8016290:	08024640 	.word	0x08024640
 8016294:	08024660 	.word	0x08024660
 8016298:	08024680 	.word	0x08024680
 801629c:	080246ac 	.word	0x080246ac
    struct pbuf *p;
    u16_t left = len - pos;
 80162a0:	88fa      	ldrh	r2, [r7, #6]
 80162a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80162a6:	1ad3      	subs	r3, r2, r3
 80162a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80162aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80162b2:	1ad3      	subs	r3, r2, r3
 80162b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80162b6:	8b7a      	ldrh	r2, [r7, #26]
 80162b8:	8bbb      	ldrh	r3, [r7, #28]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	bf28      	it	cs
 80162be:	4613      	movcs	r3, r2
 80162c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80162c2:	797b      	ldrb	r3, [r7, #5]
 80162c4:	f003 0301 	and.w	r3, r3, #1
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d036      	beq.n	801633a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80162cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	8b3b      	ldrh	r3, [r7, #24]
 80162d4:	4413      	add	r3, r2
 80162d6:	b299      	uxth	r1, r3
 80162d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162da:	2b00      	cmp	r3, #0
 80162dc:	bf0c      	ite	eq
 80162de:	2301      	moveq	r3, #1
 80162e0:	2300      	movne	r3, #0
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	f107 0012 	add.w	r0, r7, #18
 80162e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80162ea:	9302      	str	r3, [sp, #8]
 80162ec:	797b      	ldrb	r3, [r7, #5]
 80162ee:	9301      	str	r3, [sp, #4]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	4603      	mov	r3, r0
 80162f6:	2036      	movs	r0, #54	@ 0x36
 80162f8:	f7ff fd5e 	bl	8015db8 <tcp_pbuf_prealloc>
 80162fc:	6338      	str	r0, [r7, #48]	@ 0x30
 80162fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016300:	2b00      	cmp	r3, #0
 8016302:	f000 8178 	beq.w	80165f6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016308:	895b      	ldrh	r3, [r3, #10]
 801630a:	8b3a      	ldrh	r2, [r7, #24]
 801630c:	429a      	cmp	r2, r3
 801630e:	d906      	bls.n	801631e <tcp_write+0x37e>
 8016310:	4b8c      	ldr	r3, [pc, #560]	@ (8016544 <tcp_write+0x5a4>)
 8016312:	f240 2266 	movw	r2, #614	@ 0x266
 8016316:	498c      	ldr	r1, [pc, #560]	@ (8016548 <tcp_write+0x5a8>)
 8016318:	488c      	ldr	r0, [pc, #560]	@ (801654c <tcp_write+0x5ac>)
 801631a:	f008 f84d 	bl	801e3b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016320:	685a      	ldr	r2, [r3, #4]
 8016322:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016326:	18d0      	adds	r0, r2, r3
 8016328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801632c:	68ba      	ldr	r2, [r7, #8]
 801632e:	4413      	add	r3, r2
 8016330:	8b3a      	ldrh	r2, [r7, #24]
 8016332:	4619      	mov	r1, r3
 8016334:	f008 f9e1 	bl	801e6fa <memcpy>
 8016338:	e02f      	b.n	801639a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801633a:	8a7b      	ldrh	r3, [r7, #18]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d006      	beq.n	801634e <tcp_write+0x3ae>
 8016340:	4b80      	ldr	r3, [pc, #512]	@ (8016544 <tcp_write+0x5a4>)
 8016342:	f240 2271 	movw	r2, #625	@ 0x271
 8016346:	4982      	ldr	r1, [pc, #520]	@ (8016550 <tcp_write+0x5b0>)
 8016348:	4880      	ldr	r0, [pc, #512]	@ (801654c <tcp_write+0x5ac>)
 801634a:	f008 f835 	bl	801e3b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801634e:	8b3b      	ldrh	r3, [r7, #24]
 8016350:	2201      	movs	r2, #1
 8016352:	4619      	mov	r1, r3
 8016354:	2036      	movs	r0, #54	@ 0x36
 8016356:	f7fa fc63 	bl	8010c20 <pbuf_alloc>
 801635a:	6178      	str	r0, [r7, #20]
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	2b00      	cmp	r3, #0
 8016360:	f000 814b 	beq.w	80165fa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016368:	68ba      	ldr	r2, [r7, #8]
 801636a:	441a      	add	r2, r3
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016370:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016374:	b29b      	uxth	r3, r3
 8016376:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801637a:	4619      	mov	r1, r3
 801637c:	2036      	movs	r0, #54	@ 0x36
 801637e:	f7fa fc4f 	bl	8010c20 <pbuf_alloc>
 8016382:	6338      	str	r0, [r7, #48]	@ 0x30
 8016384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016386:	2b00      	cmp	r3, #0
 8016388:	d103      	bne.n	8016392 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801638a:	6978      	ldr	r0, [r7, #20]
 801638c:	f7fa ff2c 	bl	80111e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016390:	e136      	b.n	8016600 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016392:	6979      	ldr	r1, [r7, #20]
 8016394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016396:	f7fa fff5 	bl	8011384 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801639a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801639c:	f7fa ffb2 	bl	8011304 <pbuf_clen>
 80163a0:	4603      	mov	r3, r0
 80163a2:	461a      	mov	r2, r3
 80163a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80163a8:	4413      	add	r3, r2
 80163aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80163ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80163b2:	2b09      	cmp	r3, #9
 80163b4:	d903      	bls.n	80163be <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80163b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80163b8:	f7fa ff16 	bl	80111e8 <pbuf_free>
      goto memerr;
 80163bc:	e120      	b.n	8016600 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80163c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80163c6:	441a      	add	r2, r3
 80163c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80163cc:	9300      	str	r3, [sp, #0]
 80163ce:	4613      	mov	r3, r2
 80163d0:	2200      	movs	r2, #0
 80163d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f7ff fc53 	bl	8015c80 <tcp_create_segment>
 80163da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80163dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163de:	2b00      	cmp	r3, #0
 80163e0:	f000 810d 	beq.w	80165fe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80163e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d102      	bne.n	80163f0 <tcp_write+0x450>
      queue = seg;
 80163ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80163ee:	e00c      	b.n	801640a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80163f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d106      	bne.n	8016404 <tcp_write+0x464>
 80163f6:	4b53      	ldr	r3, [pc, #332]	@ (8016544 <tcp_write+0x5a4>)
 80163f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80163fc:	4955      	ldr	r1, [pc, #340]	@ (8016554 <tcp_write+0x5b4>)
 80163fe:	4853      	ldr	r0, [pc, #332]	@ (801654c <tcp_write+0x5ac>)
 8016400:	f007 ffda 	bl	801e3b8 <iprintf>
      prev_seg->next = seg;
 8016404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016408:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801640a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801640c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801640e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016412:	8b3b      	ldrh	r3, [r7, #24]
 8016414:	4413      	add	r3, r2
 8016416:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801641a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801641e:	88fb      	ldrh	r3, [r7, #6]
 8016420:	429a      	cmp	r2, r3
 8016422:	f4ff af3d 	bcc.w	80162a0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016426:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016428:	2b00      	cmp	r3, #0
 801642a:	d02c      	beq.n	8016486 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801642c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016432:	e01e      	b.n	8016472 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016436:	891a      	ldrh	r2, [r3, #8]
 8016438:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801643a:	4413      	add	r3, r2
 801643c:	b29a      	uxth	r2, r3
 801643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016440:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d110      	bne.n	801646c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016450:	8952      	ldrh	r2, [r2, #10]
 8016452:	4413      	add	r3, r2
 8016454:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016456:	68b9      	ldr	r1, [r7, #8]
 8016458:	4618      	mov	r0, r3
 801645a:	f008 f94e 	bl	801e6fa <memcpy>
        p->len += oversize_used;
 801645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016460:	895a      	ldrh	r2, [r3, #10]
 8016462:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016464:	4413      	add	r3, r2
 8016466:	b29a      	uxth	r2, r3
 8016468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801646a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1dd      	bne.n	8016434 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801647a:	891a      	ldrh	r2, [r3, #8]
 801647c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801647e:	4413      	add	r3, r2
 8016480:	b29a      	uxth	r2, r3
 8016482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016484:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016486:	8a7a      	ldrh	r2, [r7, #18]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801648e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016490:	2b00      	cmp	r3, #0
 8016492:	d018      	beq.n	80164c6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016496:	2b00      	cmp	r3, #0
 8016498:	d106      	bne.n	80164a8 <tcp_write+0x508>
 801649a:	4b2a      	ldr	r3, [pc, #168]	@ (8016544 <tcp_write+0x5a4>)
 801649c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80164a0:	492d      	ldr	r1, [pc, #180]	@ (8016558 <tcp_write+0x5b8>)
 80164a2:	482a      	ldr	r0, [pc, #168]	@ (801654c <tcp_write+0x5ac>)
 80164a4:	f007 ff88 	bl	801e3b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80164a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fa ff68 	bl	8011384 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80164b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164b6:	891a      	ldrh	r2, [r3, #8]
 80164b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164ba:	891b      	ldrh	r3, [r3, #8]
 80164bc:	4413      	add	r3, r2
 80164be:	b29a      	uxth	r2, r3
 80164c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164c2:	811a      	strh	r2, [r3, #8]
 80164c4:	e037      	b.n	8016536 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80164c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d034      	beq.n	8016536 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80164cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d003      	beq.n	80164da <tcp_write+0x53a>
 80164d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d106      	bne.n	80164e8 <tcp_write+0x548>
 80164da:	4b1a      	ldr	r3, [pc, #104]	@ (8016544 <tcp_write+0x5a4>)
 80164dc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80164e0:	491e      	ldr	r1, [pc, #120]	@ (801655c <tcp_write+0x5bc>)
 80164e2:	481a      	ldr	r0, [pc, #104]	@ (801654c <tcp_write+0x5ac>)
 80164e4:	f007 ff68 	bl	801e3b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80164e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80164ee:	e009      	b.n	8016504 <tcp_write+0x564>
      p->tot_len += extendlen;
 80164f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f2:	891a      	ldrh	r2, [r3, #8]
 80164f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164f6:	4413      	add	r3, r2
 80164f8:	b29a      	uxth	r2, r3
 80164fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80164fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d1f1      	bne.n	80164f0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801650e:	891a      	ldrh	r2, [r3, #8]
 8016510:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016512:	4413      	add	r3, r2
 8016514:	b29a      	uxth	r2, r3
 8016516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016518:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801651c:	895a      	ldrh	r2, [r3, #10]
 801651e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016520:	4413      	add	r3, r2
 8016522:	b29a      	uxth	r2, r3
 8016524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016526:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801652a:	891a      	ldrh	r2, [r3, #8]
 801652c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801652e:	4413      	add	r3, r2
 8016530:	b29a      	uxth	r2, r3
 8016532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016534:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016538:	2b00      	cmp	r3, #0
 801653a:	d111      	bne.n	8016560 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016540:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016542:	e010      	b.n	8016566 <tcp_write+0x5c6>
 8016544:	0802443c 	.word	0x0802443c
 8016548:	080246dc 	.word	0x080246dc
 801654c:	08024490 	.word	0x08024490
 8016550:	0802471c 	.word	0x0802471c
 8016554:	0802472c 	.word	0x0802472c
 8016558:	08024740 	.word	0x08024740
 801655c:	08024778 	.word	0x08024778
  } else {
    last_unsent->next = queue;
 8016560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016564:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801656a:	88fb      	ldrh	r3, [r7, #6]
 801656c:	441a      	add	r2, r3
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016578:	88fb      	ldrh	r3, [r7, #6]
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	b29a      	uxth	r2, r3
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801658a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016594:	2b00      	cmp	r3, #0
 8016596:	d00e      	beq.n	80165b6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801659c:	2b00      	cmp	r3, #0
 801659e:	d10a      	bne.n	80165b6 <tcp_write+0x616>
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d106      	bne.n	80165b6 <tcp_write+0x616>
 80165a8:	4b2c      	ldr	r3, [pc, #176]	@ (801665c <tcp_write+0x6bc>)
 80165aa:	f240 3212 	movw	r2, #786	@ 0x312
 80165ae:	492c      	ldr	r1, [pc, #176]	@ (8016660 <tcp_write+0x6c0>)
 80165b0:	482c      	ldr	r0, [pc, #176]	@ (8016664 <tcp_write+0x6c4>)
 80165b2:	f007 ff01 	bl	801e3b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80165b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d016      	beq.n	80165ea <tcp_write+0x64a>
 80165bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d012      	beq.n	80165ea <tcp_write+0x64a>
 80165c4:	797b      	ldrb	r3, [r7, #5]
 80165c6:	f003 0302 	and.w	r3, r3, #2
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d10d      	bne.n	80165ea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80165ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165d0:	68db      	ldr	r3, [r3, #12]
 80165d2:	899b      	ldrh	r3, [r3, #12]
 80165d4:	b29c      	uxth	r4, r3
 80165d6:	2008      	movs	r0, #8
 80165d8:	f7f8 ff1a 	bl	800f410 <lwip_htons>
 80165dc:	4603      	mov	r3, r0
 80165de:	461a      	mov	r2, r3
 80165e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165e2:	68db      	ldr	r3, [r3, #12]
 80165e4:	4322      	orrs	r2, r4
 80165e6:	b292      	uxth	r2, r2
 80165e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80165ea:	2300      	movs	r3, #0
 80165ec:	e031      	b.n	8016652 <tcp_write+0x6b2>
          goto memerr;
 80165ee:	bf00      	nop
 80165f0:	e006      	b.n	8016600 <tcp_write+0x660>
            goto memerr;
 80165f2:	bf00      	nop
 80165f4:	e004      	b.n	8016600 <tcp_write+0x660>
        goto memerr;
 80165f6:	bf00      	nop
 80165f8:	e002      	b.n	8016600 <tcp_write+0x660>
        goto memerr;
 80165fa:	bf00      	nop
 80165fc:	e000      	b.n	8016600 <tcp_write+0x660>
      goto memerr;
 80165fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	8b5b      	ldrh	r3, [r3, #26]
 8016604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016608:	b29a      	uxth	r2, r3
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801660e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016610:	2b00      	cmp	r3, #0
 8016612:	d002      	beq.n	801661a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016614:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016616:	f7fa fde7 	bl	80111e8 <pbuf_free>
  }
  if (queue != NULL) {
 801661a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801661c:	2b00      	cmp	r3, #0
 801661e:	d002      	beq.n	8016626 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016620:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016622:	f7fc fb71 	bl	8012d08 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801662c:	2b00      	cmp	r3, #0
 801662e:	d00e      	beq.n	801664e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016634:	2b00      	cmp	r3, #0
 8016636:	d10a      	bne.n	801664e <tcp_write+0x6ae>
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801663c:	2b00      	cmp	r3, #0
 801663e:	d106      	bne.n	801664e <tcp_write+0x6ae>
 8016640:	4b06      	ldr	r3, [pc, #24]	@ (801665c <tcp_write+0x6bc>)
 8016642:	f240 3227 	movw	r2, #807	@ 0x327
 8016646:	4906      	ldr	r1, [pc, #24]	@ (8016660 <tcp_write+0x6c0>)
 8016648:	4806      	ldr	r0, [pc, #24]	@ (8016664 <tcp_write+0x6c4>)
 801664a:	f007 feb5 	bl	801e3b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801664e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016652:	4618      	mov	r0, r3
 8016654:	375c      	adds	r7, #92	@ 0x5c
 8016656:	46bd      	mov	sp, r7
 8016658:	bd90      	pop	{r4, r7, pc}
 801665a:	bf00      	nop
 801665c:	0802443c 	.word	0x0802443c
 8016660:	080247b0 	.word	0x080247b0
 8016664:	08024490 	.word	0x08024490

08016668 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016668:	b590      	push	{r4, r7, lr}
 801666a:	b08b      	sub	sp, #44	@ 0x2c
 801666c:	af02      	add	r7, sp, #8
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	460b      	mov	r3, r1
 8016672:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016674:	2300      	movs	r3, #0
 8016676:	61fb      	str	r3, [r7, #28]
 8016678:	2300      	movs	r3, #0
 801667a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801667c:	2300      	movs	r3, #0
 801667e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d106      	bne.n	8016694 <tcp_split_unsent_seg+0x2c>
 8016686:	4b95      	ldr	r3, [pc, #596]	@ (80168dc <tcp_split_unsent_seg+0x274>)
 8016688:	f240 324b 	movw	r2, #843	@ 0x34b
 801668c:	4994      	ldr	r1, [pc, #592]	@ (80168e0 <tcp_split_unsent_seg+0x278>)
 801668e:	4895      	ldr	r0, [pc, #596]	@ (80168e4 <tcp_split_unsent_seg+0x27c>)
 8016690:	f007 fe92 	bl	801e3b8 <iprintf>

  useg = pcb->unsent;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016698:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d102      	bne.n	80166a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80166a0:	f04f 33ff 	mov.w	r3, #4294967295
 80166a4:	e116      	b.n	80168d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80166a6:	887b      	ldrh	r3, [r7, #2]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d109      	bne.n	80166c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80166ac:	4b8b      	ldr	r3, [pc, #556]	@ (80168dc <tcp_split_unsent_seg+0x274>)
 80166ae:	f240 3253 	movw	r2, #851	@ 0x353
 80166b2:	498d      	ldr	r1, [pc, #564]	@ (80168e8 <tcp_split_unsent_seg+0x280>)
 80166b4:	488b      	ldr	r0, [pc, #556]	@ (80168e4 <tcp_split_unsent_seg+0x27c>)
 80166b6:	f007 fe7f 	bl	801e3b8 <iprintf>
    return ERR_VAL;
 80166ba:	f06f 0305 	mvn.w	r3, #5
 80166be:	e109      	b.n	80168d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	891b      	ldrh	r3, [r3, #8]
 80166c4:	887a      	ldrh	r2, [r7, #2]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d301      	bcc.n	80166ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e102      	b.n	80168d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166d2:	887a      	ldrh	r2, [r7, #2]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d906      	bls.n	80166e6 <tcp_split_unsent_seg+0x7e>
 80166d8:	4b80      	ldr	r3, [pc, #512]	@ (80168dc <tcp_split_unsent_seg+0x274>)
 80166da:	f240 325b 	movw	r2, #859	@ 0x35b
 80166de:	4983      	ldr	r1, [pc, #524]	@ (80168ec <tcp_split_unsent_seg+0x284>)
 80166e0:	4880      	ldr	r0, [pc, #512]	@ (80168e4 <tcp_split_unsent_seg+0x27c>)
 80166e2:	f007 fe69 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	891b      	ldrh	r3, [r3, #8]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d106      	bne.n	80166fc <tcp_split_unsent_seg+0x94>
 80166ee:	4b7b      	ldr	r3, [pc, #492]	@ (80168dc <tcp_split_unsent_seg+0x274>)
 80166f0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80166f4:	497e      	ldr	r1, [pc, #504]	@ (80168f0 <tcp_split_unsent_seg+0x288>)
 80166f6:	487b      	ldr	r0, [pc, #492]	@ (80168e4 <tcp_split_unsent_seg+0x27c>)
 80166f8:	f007 fe5e 	bl	801e3b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	7a9b      	ldrb	r3, [r3, #10]
 8016700:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016702:	7bfb      	ldrb	r3, [r7, #15]
 8016704:	009b      	lsls	r3, r3, #2
 8016706:	b2db      	uxtb	r3, r3
 8016708:	f003 0304 	and.w	r3, r3, #4
 801670c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801670e:	697b      	ldr	r3, [r7, #20]
 8016710:	891a      	ldrh	r2, [r3, #8]
 8016712:	887b      	ldrh	r3, [r7, #2]
 8016714:	1ad3      	subs	r3, r2, r3
 8016716:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016718:	7bbb      	ldrb	r3, [r7, #14]
 801671a:	b29a      	uxth	r2, r3
 801671c:	89bb      	ldrh	r3, [r7, #12]
 801671e:	4413      	add	r3, r2
 8016720:	b29b      	uxth	r3, r3
 8016722:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016726:	4619      	mov	r1, r3
 8016728:	2036      	movs	r0, #54	@ 0x36
 801672a:	f7fa fa79 	bl	8010c20 <pbuf_alloc>
 801672e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	2b00      	cmp	r3, #0
 8016734:	f000 80b7 	beq.w	80168a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	891a      	ldrh	r2, [r3, #8]
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	891b      	ldrh	r3, [r3, #8]
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	b29a      	uxth	r2, r3
 8016746:	887b      	ldrh	r3, [r7, #2]
 8016748:	4413      	add	r3, r2
 801674a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	6858      	ldr	r0, [r3, #4]
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	685a      	ldr	r2, [r3, #4]
 8016754:	7bbb      	ldrb	r3, [r7, #14]
 8016756:	18d1      	adds	r1, r2, r3
 8016758:	897b      	ldrh	r3, [r7, #10]
 801675a:	89ba      	ldrh	r2, [r7, #12]
 801675c:	f7fa ff4a 	bl	80115f4 <pbuf_copy_partial>
 8016760:	4603      	mov	r3, r0
 8016762:	461a      	mov	r2, r3
 8016764:	89bb      	ldrh	r3, [r7, #12]
 8016766:	4293      	cmp	r3, r2
 8016768:	f040 809f 	bne.w	80168aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	899b      	ldrh	r3, [r3, #12]
 8016772:	b29b      	uxth	r3, r3
 8016774:	4618      	mov	r0, r3
 8016776:	f7f8 fe4b 	bl	800f410 <lwip_htons>
 801677a:	4603      	mov	r3, r0
 801677c:	b2db      	uxtb	r3, r3
 801677e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016782:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016784:	2300      	movs	r3, #0
 8016786:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016788:	7efb      	ldrb	r3, [r7, #27]
 801678a:	f003 0308 	and.w	r3, r3, #8
 801678e:	2b00      	cmp	r3, #0
 8016790:	d007      	beq.n	80167a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016792:	7efb      	ldrb	r3, [r7, #27]
 8016794:	f023 0308 	bic.w	r3, r3, #8
 8016798:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801679a:	7ebb      	ldrb	r3, [r7, #26]
 801679c:	f043 0308 	orr.w	r3, r3, #8
 80167a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80167a2:	7efb      	ldrb	r3, [r7, #27]
 80167a4:	f003 0301 	and.w	r3, r3, #1
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d007      	beq.n	80167bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80167ac:	7efb      	ldrb	r3, [r7, #27]
 80167ae:	f023 0301 	bic.w	r3, r3, #1
 80167b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80167b4:	7ebb      	ldrb	r3, [r7, #26]
 80167b6:	f043 0301 	orr.w	r3, r3, #1
 80167ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7f8 fe39 	bl	800f43a <lwip_htonl>
 80167c8:	4602      	mov	r2, r0
 80167ca:	887b      	ldrh	r3, [r7, #2]
 80167cc:	18d1      	adds	r1, r2, r3
 80167ce:	7eba      	ldrb	r2, [r7, #26]
 80167d0:	7bfb      	ldrb	r3, [r7, #15]
 80167d2:	9300      	str	r3, [sp, #0]
 80167d4:	460b      	mov	r3, r1
 80167d6:	6939      	ldr	r1, [r7, #16]
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7ff fa51 	bl	8015c80 <tcp_create_segment>
 80167de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80167e0:	69fb      	ldr	r3, [r7, #28]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d063      	beq.n	80168ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fa fd8a 	bl	8011304 <pbuf_clen>
 80167f0:	4603      	mov	r3, r0
 80167f2:	461a      	mov	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80167fa:	1a9b      	subs	r3, r3, r2
 80167fc:	b29a      	uxth	r2, r3
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	6858      	ldr	r0, [r3, #4]
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	891a      	ldrh	r2, [r3, #8]
 801680e:	89bb      	ldrh	r3, [r7, #12]
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	b29b      	uxth	r3, r3
 8016814:	4619      	mov	r1, r3
 8016816:	f7fa fb61 	bl	8010edc <pbuf_realloc>
  useg->len -= remainder;
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	891a      	ldrh	r2, [r3, #8]
 801681e:	89bb      	ldrh	r3, [r7, #12]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	b29a      	uxth	r2, r3
 8016824:	697b      	ldr	r3, [r7, #20]
 8016826:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	68db      	ldr	r3, [r3, #12]
 801682c:	899b      	ldrh	r3, [r3, #12]
 801682e:	b29c      	uxth	r4, r3
 8016830:	7efb      	ldrb	r3, [r7, #27]
 8016832:	b29b      	uxth	r3, r3
 8016834:	4618      	mov	r0, r3
 8016836:	f7f8 fdeb 	bl	800f410 <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	461a      	mov	r2, r3
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	68db      	ldr	r3, [r3, #12]
 8016842:	4322      	orrs	r2, r4
 8016844:	b292      	uxth	r2, r2
 8016846:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	4618      	mov	r0, r3
 801684e:	f7fa fd59 	bl	8011304 <pbuf_clen>
 8016852:	4603      	mov	r3, r0
 8016854:	461a      	mov	r2, r3
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801685c:	4413      	add	r3, r2
 801685e:	b29a      	uxth	r2, r3
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	4618      	mov	r0, r3
 801686c:	f7fa fd4a 	bl	8011304 <pbuf_clen>
 8016870:	4603      	mov	r3, r0
 8016872:	461a      	mov	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801687a:	4413      	add	r3, r2
 801687c:	b29a      	uxth	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	69fa      	ldr	r2, [r7, #28]
 8016890:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d103      	bne.n	80168a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2200      	movs	r2, #0
 801689e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80168a2:	2300      	movs	r3, #0
 80168a4:	e016      	b.n	80168d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80168a6:	bf00      	nop
 80168a8:	e002      	b.n	80168b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168aa:	bf00      	nop
 80168ac:	e000      	b.n	80168b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d006      	beq.n	80168c4 <tcp_split_unsent_seg+0x25c>
 80168b6:	4b09      	ldr	r3, [pc, #36]	@ (80168dc <tcp_split_unsent_seg+0x274>)
 80168b8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80168bc:	490d      	ldr	r1, [pc, #52]	@ (80168f4 <tcp_split_unsent_seg+0x28c>)
 80168be:	4809      	ldr	r0, [pc, #36]	@ (80168e4 <tcp_split_unsent_seg+0x27c>)
 80168c0:	f007 fd7a 	bl	801e3b8 <iprintf>
  if (p != NULL) {
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d002      	beq.n	80168d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80168ca:	6938      	ldr	r0, [r7, #16]
 80168cc:	f7fa fc8c 	bl	80111e8 <pbuf_free>
  }

  return ERR_MEM;
 80168d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3724      	adds	r7, #36	@ 0x24
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd90      	pop	{r4, r7, pc}
 80168dc:	0802443c 	.word	0x0802443c
 80168e0:	080247d0 	.word	0x080247d0
 80168e4:	08024490 	.word	0x08024490
 80168e8:	080247f4 	.word	0x080247f4
 80168ec:	08024818 	.word	0x08024818
 80168f0:	08024828 	.word	0x08024828
 80168f4:	08024838 	.word	0x08024838

080168f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80168f8:	b590      	push	{r4, r7, lr}
 80168fa:	b085      	sub	sp, #20
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d106      	bne.n	8016914 <tcp_send_fin+0x1c>
 8016906:	4b21      	ldr	r3, [pc, #132]	@ (801698c <tcp_send_fin+0x94>)
 8016908:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801690c:	4920      	ldr	r1, [pc, #128]	@ (8016990 <tcp_send_fin+0x98>)
 801690e:	4821      	ldr	r0, [pc, #132]	@ (8016994 <tcp_send_fin+0x9c>)
 8016910:	f007 fd52 	bl	801e3b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016918:	2b00      	cmp	r3, #0
 801691a:	d02e      	beq.n	801697a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016920:	60fb      	str	r3, [r7, #12]
 8016922:	e002      	b.n	801692a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d1f8      	bne.n	8016924 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	68db      	ldr	r3, [r3, #12]
 8016936:	899b      	ldrh	r3, [r3, #12]
 8016938:	b29b      	uxth	r3, r3
 801693a:	4618      	mov	r0, r3
 801693c:	f7f8 fd68 	bl	800f410 <lwip_htons>
 8016940:	4603      	mov	r3, r0
 8016942:	b2db      	uxtb	r3, r3
 8016944:	f003 0307 	and.w	r3, r3, #7
 8016948:	2b00      	cmp	r3, #0
 801694a:	d116      	bne.n	801697a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	899b      	ldrh	r3, [r3, #12]
 8016952:	b29c      	uxth	r4, r3
 8016954:	2001      	movs	r0, #1
 8016956:	f7f8 fd5b 	bl	800f410 <lwip_htons>
 801695a:	4603      	mov	r3, r0
 801695c:	461a      	mov	r2, r3
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	68db      	ldr	r3, [r3, #12]
 8016962:	4322      	orrs	r2, r4
 8016964:	b292      	uxth	r2, r2
 8016966:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	8b5b      	ldrh	r3, [r3, #26]
 801696c:	f043 0320 	orr.w	r3, r3, #32
 8016970:	b29a      	uxth	r2, r3
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016976:	2300      	movs	r3, #0
 8016978:	e004      	b.n	8016984 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801697a:	2101      	movs	r1, #1
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 f80b 	bl	8016998 <tcp_enqueue_flags>
 8016982:	4603      	mov	r3, r0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3714      	adds	r7, #20
 8016988:	46bd      	mov	sp, r7
 801698a:	bd90      	pop	{r4, r7, pc}
 801698c:	0802443c 	.word	0x0802443c
 8016990:	08024844 	.word	0x08024844
 8016994:	08024490 	.word	0x08024490

08016998 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b08a      	sub	sp, #40	@ 0x28
 801699c:	af02      	add	r7, sp, #8
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	460b      	mov	r3, r1
 80169a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80169a4:	2300      	movs	r3, #0
 80169a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80169a8:	2300      	movs	r3, #0
 80169aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80169ac:	78fb      	ldrb	r3, [r7, #3]
 80169ae:	f003 0303 	and.w	r3, r3, #3
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d106      	bne.n	80169c4 <tcp_enqueue_flags+0x2c>
 80169b6:	4b67      	ldr	r3, [pc, #412]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 80169b8:	f240 4211 	movw	r2, #1041	@ 0x411
 80169bc:	4966      	ldr	r1, [pc, #408]	@ (8016b58 <tcp_enqueue_flags+0x1c0>)
 80169be:	4867      	ldr	r0, [pc, #412]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 80169c0:	f007 fcfa 	bl	801e3b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d106      	bne.n	80169d8 <tcp_enqueue_flags+0x40>
 80169ca:	4b62      	ldr	r3, [pc, #392]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 80169cc:	f240 4213 	movw	r2, #1043	@ 0x413
 80169d0:	4963      	ldr	r1, [pc, #396]	@ (8016b60 <tcp_enqueue_flags+0x1c8>)
 80169d2:	4862      	ldr	r0, [pc, #392]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 80169d4:	f007 fcf0 	bl	801e3b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80169d8:	78fb      	ldrb	r3, [r7, #3]
 80169da:	f003 0302 	and.w	r3, r3, #2
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d001      	beq.n	80169e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80169e2:	2301      	movs	r3, #1
 80169e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80169e6:	7ffb      	ldrb	r3, [r7, #31]
 80169e8:	009b      	lsls	r3, r3, #2
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	f003 0304 	and.w	r3, r3, #4
 80169f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80169f2:	7dfb      	ldrb	r3, [r7, #23]
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80169fa:	4619      	mov	r1, r3
 80169fc:	2036      	movs	r0, #54	@ 0x36
 80169fe:	f7fa f90f 	bl	8010c20 <pbuf_alloc>
 8016a02:	6138      	str	r0, [r7, #16]
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d109      	bne.n	8016a1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	8b5b      	ldrh	r3, [r3, #26]
 8016a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a18:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1c:	e095      	b.n	8016b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	895a      	ldrh	r2, [r3, #10]
 8016a22:	7dfb      	ldrb	r3, [r7, #23]
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d206      	bcs.n	8016a38 <tcp_enqueue_flags+0xa0>
 8016a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 8016a2c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016a30:	494c      	ldr	r1, [pc, #304]	@ (8016b64 <tcp_enqueue_flags+0x1cc>)
 8016a32:	484a      	ldr	r0, [pc, #296]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 8016a34:	f007 fcc0 	bl	801e3b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016a3c:	78fa      	ldrb	r2, [r7, #3]
 8016a3e:	7ffb      	ldrb	r3, [r7, #31]
 8016a40:	9300      	str	r3, [sp, #0]
 8016a42:	460b      	mov	r3, r1
 8016a44:	6939      	ldr	r1, [r7, #16]
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f7ff f91a 	bl	8015c80 <tcp_create_segment>
 8016a4c:	60f8      	str	r0, [r7, #12]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d109      	bne.n	8016a68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	8b5b      	ldrh	r3, [r3, #26]
 8016a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a62:	f04f 33ff 	mov.w	r3, #4294967295
 8016a66:	e070      	b.n	8016b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	f003 0303 	and.w	r3, r3, #3
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d006      	beq.n	8016a82 <tcp_enqueue_flags+0xea>
 8016a74:	4b37      	ldr	r3, [pc, #220]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 8016a76:	f240 4242 	movw	r2, #1090	@ 0x442
 8016a7a:	493b      	ldr	r1, [pc, #236]	@ (8016b68 <tcp_enqueue_flags+0x1d0>)
 8016a7c:	4837      	ldr	r0, [pc, #220]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 8016a7e:	f007 fc9b 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	891b      	ldrh	r3, [r3, #8]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d006      	beq.n	8016a98 <tcp_enqueue_flags+0x100>
 8016a8a:	4b32      	ldr	r3, [pc, #200]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 8016a8c:	f240 4243 	movw	r2, #1091	@ 0x443
 8016a90:	4936      	ldr	r1, [pc, #216]	@ (8016b6c <tcp_enqueue_flags+0x1d4>)
 8016a92:	4832      	ldr	r0, [pc, #200]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 8016a94:	f007 fc90 	bl	801e3b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d103      	bne.n	8016aa8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016aa6:	e00d      	b.n	8016ac4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016aac:	61bb      	str	r3, [r7, #24]
 8016aae:	e002      	b.n	8016ab6 <tcp_enqueue_flags+0x11e>
 8016ab0:	69bb      	ldr	r3, [r7, #24]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	61bb      	str	r3, [r7, #24]
 8016ab6:	69bb      	ldr	r3, [r7, #24]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d1f8      	bne.n	8016ab0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016acc:	78fb      	ldrb	r3, [r7, #3]
 8016ace:	f003 0302 	and.w	r3, r3, #2
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d104      	bne.n	8016ae0 <tcp_enqueue_flags+0x148>
 8016ad6:	78fb      	ldrb	r3, [r7, #3]
 8016ad8:	f003 0301 	and.w	r3, r3, #1
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d004      	beq.n	8016aea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016ae4:	1c5a      	adds	r2, r3, #1
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016aea:	78fb      	ldrb	r3, [r7, #3]
 8016aec:	f003 0301 	and.w	r3, r3, #1
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d006      	beq.n	8016b02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	8b5b      	ldrh	r3, [r3, #26]
 8016af8:	f043 0320 	orr.w	r3, r3, #32
 8016afc:	b29a      	uxth	r2, r3
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fa fbfc 	bl	8011304 <pbuf_clen>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	461a      	mov	r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b16:	4413      	add	r3, r2
 8016b18:	b29a      	uxth	r2, r3
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d00e      	beq.n	8016b48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d10a      	bne.n	8016b48 <tcp_enqueue_flags+0x1b0>
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d106      	bne.n	8016b48 <tcp_enqueue_flags+0x1b0>
 8016b3a:	4b06      	ldr	r3, [pc, #24]	@ (8016b54 <tcp_enqueue_flags+0x1bc>)
 8016b3c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016b40:	490b      	ldr	r1, [pc, #44]	@ (8016b70 <tcp_enqueue_flags+0x1d8>)
 8016b42:	4806      	ldr	r0, [pc, #24]	@ (8016b5c <tcp_enqueue_flags+0x1c4>)
 8016b44:	f007 fc38 	bl	801e3b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016b48:	2300      	movs	r3, #0
}
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	3720      	adds	r7, #32
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}
 8016b52:	bf00      	nop
 8016b54:	0802443c 	.word	0x0802443c
 8016b58:	08024860 	.word	0x08024860
 8016b5c:	08024490 	.word	0x08024490
 8016b60:	080248b8 	.word	0x080248b8
 8016b64:	080248d8 	.word	0x080248d8
 8016b68:	08024914 	.word	0x08024914
 8016b6c:	0802492c 	.word	0x0802492c
 8016b70:	08024958 	.word	0x08024958

08016b74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016b74:	b5b0      	push	{r4, r5, r7, lr}
 8016b76:	b08a      	sub	sp, #40	@ 0x28
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d106      	bne.n	8016b90 <tcp_output+0x1c>
 8016b82:	4b8a      	ldr	r3, [pc, #552]	@ (8016dac <tcp_output+0x238>)
 8016b84:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016b88:	4989      	ldr	r1, [pc, #548]	@ (8016db0 <tcp_output+0x23c>)
 8016b8a:	488a      	ldr	r0, [pc, #552]	@ (8016db4 <tcp_output+0x240>)
 8016b8c:	f007 fc14 	bl	801e3b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	7d1b      	ldrb	r3, [r3, #20]
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d106      	bne.n	8016ba6 <tcp_output+0x32>
 8016b98:	4b84      	ldr	r3, [pc, #528]	@ (8016dac <tcp_output+0x238>)
 8016b9a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016b9e:	4986      	ldr	r1, [pc, #536]	@ (8016db8 <tcp_output+0x244>)
 8016ba0:	4884      	ldr	r0, [pc, #528]	@ (8016db4 <tcp_output+0x240>)
 8016ba2:	f007 fc09 	bl	801e3b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016ba6:	4b85      	ldr	r3, [pc, #532]	@ (8016dbc <tcp_output+0x248>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	687a      	ldr	r2, [r7, #4]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d101      	bne.n	8016bb4 <tcp_output+0x40>
    return ERR_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	e1ce      	b.n	8016f52 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	bf28      	it	cs
 8016bc4:	4613      	movcs	r3, r2
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d10b      	bne.n	8016bee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	8b5b      	ldrh	r3, [r3, #26]
 8016bda:	f003 0302 	and.w	r3, r3, #2
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f000 81aa 	beq.w	8016f38 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f000 fdcb 	bl	8017780 <tcp_send_empty_ack>
 8016bea:	4603      	mov	r3, r0
 8016bec:	e1b1      	b.n	8016f52 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	3304      	adds	r3, #4
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7ff f826 	bl	8015c48 <tcp_route>
 8016bfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d102      	bne.n	8016c0a <tcp_output+0x96>
    return ERR_RTE;
 8016c04:	f06f 0303 	mvn.w	r3, #3
 8016c08:	e1a3      	b.n	8016f52 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d003      	beq.n	8016c18 <tcp_output+0xa4>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d111      	bne.n	8016c3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d002      	beq.n	8016c24 <tcp_output+0xb0>
 8016c1e:	697b      	ldr	r3, [r7, #20]
 8016c20:	3304      	adds	r3, #4
 8016c22:	e000      	b.n	8016c26 <tcp_output+0xb2>
 8016c24:	2300      	movs	r3, #0
 8016c26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d102      	bne.n	8016c34 <tcp_output+0xc0>
      return ERR_RTE;
 8016c2e:	f06f 0303 	mvn.w	r3, #3
 8016c32:	e18e      	b.n	8016f52 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	68db      	ldr	r3, [r3, #12]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7f8 fbf9 	bl	800f43a <lwip_htonl>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c52:	8912      	ldrh	r2, [r2, #8]
 8016c54:	4413      	add	r3, r2
 8016c56:	69ba      	ldr	r2, [r7, #24]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d227      	bcs.n	8016cac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016c62:	461a      	mov	r2, r3
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	4293      	cmp	r3, r2
 8016c68:	d114      	bne.n	8016c94 <tcp_output+0x120>
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d110      	bne.n	8016c94 <tcp_output+0x120>
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d10b      	bne.n	8016c94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2201      	movs	r2, #1
 8016c88:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	8b5b      	ldrh	r3, [r3, #26]
 8016c98:	f003 0302 	and.w	r3, r3, #2
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	f000 814d 	beq.w	8016f3c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f000 fd6c 	bl	8017780 <tcp_send_empty_ack>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	e152      	b.n	8016f52 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016cb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016cba:	6a3b      	ldr	r3, [r7, #32]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f000 811c 	beq.w	8016efa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016cc2:	e002      	b.n	8016cca <tcp_output+0x156>
 8016cc4:	6a3b      	ldr	r3, [r7, #32]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	623b      	str	r3, [r7, #32]
 8016cca:	6a3b      	ldr	r3, [r7, #32]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d1f8      	bne.n	8016cc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016cd2:	e112      	b.n	8016efa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	899b      	ldrh	r3, [r3, #12]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7f8 fb97 	bl	800f410 <lwip_htons>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	f003 0304 	and.w	r3, r3, #4
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d006      	beq.n	8016cfc <tcp_output+0x188>
 8016cee:	4b2f      	ldr	r3, [pc, #188]	@ (8016dac <tcp_output+0x238>)
 8016cf0:	f240 5236 	movw	r2, #1334	@ 0x536
 8016cf4:	4932      	ldr	r1, [pc, #200]	@ (8016dc0 <tcp_output+0x24c>)
 8016cf6:	482f      	ldr	r0, [pc, #188]	@ (8016db4 <tcp_output+0x240>)
 8016cf8:	f007 fb5e 	bl	801e3b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d01f      	beq.n	8016d44 <tcp_output+0x1d0>
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	8b5b      	ldrh	r3, [r3, #26]
 8016d08:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d119      	bne.n	8016d44 <tcp_output+0x1d0>
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d00b      	beq.n	8016d30 <tcp_output+0x1bc>
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d110      	bne.n	8016d44 <tcp_output+0x1d0>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d26:	891a      	ldrh	r2, [r3, #8]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d209      	bcs.n	8016d44 <tcp_output+0x1d0>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d004      	beq.n	8016d44 <tcp_output+0x1d0>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d40:	2b08      	cmp	r3, #8
 8016d42:	d901      	bls.n	8016d48 <tcp_output+0x1d4>
 8016d44:	2301      	movs	r3, #1
 8016d46:	e000      	b.n	8016d4a <tcp_output+0x1d6>
 8016d48:	2300      	movs	r3, #0
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d106      	bne.n	8016d5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	8b5b      	ldrh	r3, [r3, #26]
 8016d52:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f000 80e4 	beq.w	8016f24 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	7d1b      	ldrb	r3, [r3, #20]
 8016d60:	2b02      	cmp	r3, #2
 8016d62:	d00d      	beq.n	8016d80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	899b      	ldrh	r3, [r3, #12]
 8016d6a:	b29c      	uxth	r4, r3
 8016d6c:	2010      	movs	r0, #16
 8016d6e:	f7f8 fb4f 	bl	800f410 <lwip_htons>
 8016d72:	4603      	mov	r3, r0
 8016d74:	461a      	mov	r2, r3
 8016d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d78:	68db      	ldr	r3, [r3, #12]
 8016d7a:	4322      	orrs	r2, r4
 8016d7c:	b292      	uxth	r2, r2
 8016d7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016d80:	697a      	ldr	r2, [r7, #20]
 8016d82:	6879      	ldr	r1, [r7, #4]
 8016d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d86:	f000 f909 	bl	8016f9c <tcp_output_segment>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d016      	beq.n	8016dc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	8b5b      	ldrh	r3, [r3, #26]
 8016d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	835a      	strh	r2, [r3, #26]
      return err;
 8016da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016da8:	e0d3      	b.n	8016f52 <tcp_output+0x3de>
 8016daa:	bf00      	nop
 8016dac:	0802443c 	.word	0x0802443c
 8016db0:	08024980 	.word	0x08024980
 8016db4:	08024490 	.word	0x08024490
 8016db8:	08024998 	.word	0x08024998
 8016dbc:	200126b8 	.word	0x200126b8
 8016dc0:	080249c0 	.word	0x080249c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc6:	681a      	ldr	r2, [r3, #0]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	7d1b      	ldrb	r3, [r3, #20]
 8016dd0:	2b02      	cmp	r3, #2
 8016dd2:	d006      	beq.n	8016de2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	8b5b      	ldrh	r3, [r3, #26]
 8016dd8:	f023 0303 	bic.w	r3, r3, #3
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f8 fb26 	bl	800f43a <lwip_htonl>
 8016dee:	4604      	mov	r4, r0
 8016df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df2:	891b      	ldrh	r3, [r3, #8]
 8016df4:	461d      	mov	r5, r3
 8016df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df8:	68db      	ldr	r3, [r3, #12]
 8016dfa:	899b      	ldrh	r3, [r3, #12]
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7f8 fb06 	bl	800f410 <lwip_htons>
 8016e04:	4603      	mov	r3, r0
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	f003 0303 	and.w	r3, r3, #3
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d001      	beq.n	8016e14 <tcp_output+0x2a0>
 8016e10:	2301      	movs	r3, #1
 8016e12:	e000      	b.n	8016e16 <tcp_output+0x2a2>
 8016e14:	2300      	movs	r3, #0
 8016e16:	442b      	add	r3, r5
 8016e18:	4423      	add	r3, r4
 8016e1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	1ad3      	subs	r3, r2, r3
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	da02      	bge.n	8016e2e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	68ba      	ldr	r2, [r7, #8]
 8016e2c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e30:	891b      	ldrh	r3, [r3, #8]
 8016e32:	461c      	mov	r4, r3
 8016e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e36:	68db      	ldr	r3, [r3, #12]
 8016e38:	899b      	ldrh	r3, [r3, #12]
 8016e3a:	b29b      	uxth	r3, r3
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7f8 fae7 	bl	800f410 <lwip_htons>
 8016e42:	4603      	mov	r3, r0
 8016e44:	b2db      	uxtb	r3, r3
 8016e46:	f003 0303 	and.w	r3, r3, #3
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d001      	beq.n	8016e52 <tcp_output+0x2de>
 8016e4e:	2301      	movs	r3, #1
 8016e50:	e000      	b.n	8016e54 <tcp_output+0x2e0>
 8016e52:	2300      	movs	r3, #0
 8016e54:	4423      	add	r3, r4
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d049      	beq.n	8016eee <tcp_output+0x37a>
      seg->next = NULL;
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d105      	bne.n	8016e74 <tcp_output+0x300>
        pcb->unacked = seg;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e6c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e70:	623b      	str	r3, [r7, #32]
 8016e72:	e03f      	b.n	8016ef4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f7f8 fadd 	bl	800f43a <lwip_htonl>
 8016e80:	4604      	mov	r4, r0
 8016e82:	6a3b      	ldr	r3, [r7, #32]
 8016e84:	68db      	ldr	r3, [r3, #12]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7f8 fad6 	bl	800f43a <lwip_htonl>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	1ae3      	subs	r3, r4, r3
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	da24      	bge.n	8016ee0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	3370      	adds	r3, #112	@ 0x70
 8016e9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e9c:	e002      	b.n	8016ea4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016e9e:	69fb      	ldr	r3, [r7, #28]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ea4:	69fb      	ldr	r3, [r7, #28]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d011      	beq.n	8016ed0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016eac:	69fb      	ldr	r3, [r7, #28]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7f8 fac0 	bl	800f43a <lwip_htonl>
 8016eba:	4604      	mov	r4, r0
 8016ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7f8 fab9 	bl	800f43a <lwip_htonl>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	dbe6      	blt.n	8016e9e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016ed8:	69fb      	ldr	r3, [r7, #28]
 8016eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	e009      	b.n	8016ef4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016ee0:	6a3b      	ldr	r3, [r7, #32]
 8016ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ee4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016ee6:	6a3b      	ldr	r3, [r7, #32]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	623b      	str	r3, [r7, #32]
 8016eec:	e002      	b.n	8016ef4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ef0:	f7fb ff1f 	bl	8012d32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d012      	beq.n	8016f26 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7f8 fa97 	bl	800f43a <lwip_htonl>
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f12:	1ad3      	subs	r3, r2, r3
 8016f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f16:	8912      	ldrh	r2, [r2, #8]
 8016f18:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f1a:	69ba      	ldr	r2, [r7, #24]
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	f4bf aed9 	bcs.w	8016cd4 <tcp_output+0x160>
 8016f22:	e000      	b.n	8016f26 <tcp_output+0x3b2>
      break;
 8016f24:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d108      	bne.n	8016f40 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2200      	movs	r2, #0
 8016f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016f36:	e004      	b.n	8016f42 <tcp_output+0x3ce>
    goto output_done;
 8016f38:	bf00      	nop
 8016f3a:	e002      	b.n	8016f42 <tcp_output+0x3ce>
    goto output_done;
 8016f3c:	bf00      	nop
 8016f3e:	e000      	b.n	8016f42 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016f40:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	8b5b      	ldrh	r3, [r3, #26]
 8016f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016f4a:	b29a      	uxth	r2, r3
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016f50:	2300      	movs	r3, #0
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3728      	adds	r7, #40	@ 0x28
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bdb0      	pop	{r4, r5, r7, pc}
 8016f5a:	bf00      	nop

08016f5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d106      	bne.n	8016f78 <tcp_output_segment_busy+0x1c>
 8016f6a:	4b09      	ldr	r3, [pc, #36]	@ (8016f90 <tcp_output_segment_busy+0x34>)
 8016f6c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016f70:	4908      	ldr	r1, [pc, #32]	@ (8016f94 <tcp_output_segment_busy+0x38>)
 8016f72:	4809      	ldr	r0, [pc, #36]	@ (8016f98 <tcp_output_segment_busy+0x3c>)
 8016f74:	f007 fa20 	bl	801e3b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	7b9b      	ldrb	r3, [r3, #14]
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	d001      	beq.n	8016f86 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016f82:	2301      	movs	r3, #1
 8016f84:	e000      	b.n	8016f88 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016f86:	2300      	movs	r3, #0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	0802443c 	.word	0x0802443c
 8016f94:	080249d8 	.word	0x080249d8
 8016f98:	08024490 	.word	0x08024490

08016f9c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016f9c:	b5b0      	push	{r4, r5, r7, lr}
 8016f9e:	b08c      	sub	sp, #48	@ 0x30
 8016fa0:	af04      	add	r7, sp, #16
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d106      	bne.n	8016fbc <tcp_output_segment+0x20>
 8016fae:	4b64      	ldr	r3, [pc, #400]	@ (8017140 <tcp_output_segment+0x1a4>)
 8016fb0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016fb4:	4963      	ldr	r1, [pc, #396]	@ (8017144 <tcp_output_segment+0x1a8>)
 8016fb6:	4864      	ldr	r0, [pc, #400]	@ (8017148 <tcp_output_segment+0x1ac>)
 8016fb8:	f007 f9fe 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d106      	bne.n	8016fd0 <tcp_output_segment+0x34>
 8016fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8017140 <tcp_output_segment+0x1a4>)
 8016fc4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016fc8:	4960      	ldr	r1, [pc, #384]	@ (801714c <tcp_output_segment+0x1b0>)
 8016fca:	485f      	ldr	r0, [pc, #380]	@ (8017148 <tcp_output_segment+0x1ac>)
 8016fcc:	f007 f9f4 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_output_segment+0x48>
 8016fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8017140 <tcp_output_segment+0x1a4>)
 8016fd8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016fdc:	495c      	ldr	r1, [pc, #368]	@ (8017150 <tcp_output_segment+0x1b4>)
 8016fde:	485a      	ldr	r0, [pc, #360]	@ (8017148 <tcp_output_segment+0x1ac>)
 8016fe0:	f007 f9ea 	bl	801e3b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f7ff ffb9 	bl	8016f5c <tcp_output_segment_busy>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	e0a1      	b.n	8017138 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	68dc      	ldr	r4, [r3, #12]
 8016ffc:	4610      	mov	r0, r2
 8016ffe:	f7f8 fa1c 	bl	800f43a <lwip_htonl>
 8017002:	4603      	mov	r3, r0
 8017004:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	68dc      	ldr	r4, [r3, #12]
 801700e:	4610      	mov	r0, r2
 8017010:	f7f8 f9fe 	bl	800f410 <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801701c:	68ba      	ldr	r2, [r7, #8]
 801701e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017020:	441a      	add	r2, r3
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	68db      	ldr	r3, [r3, #12]
 801702a:	3314      	adds	r3, #20
 801702c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	7a9b      	ldrb	r3, [r3, #10]
 8017032:	f003 0301 	and.w	r3, r3, #1
 8017036:	2b00      	cmp	r3, #0
 8017038:	d015      	beq.n	8017066 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	3304      	adds	r3, #4
 801703e:	461a      	mov	r2, r3
 8017040:	6879      	ldr	r1, [r7, #4]
 8017042:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017046:	f7fc fa39 	bl	80134bc <tcp_eff_send_mss_netif>
 801704a:	4603      	mov	r3, r0
 801704c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801704e:	8b7b      	ldrh	r3, [r7, #26]
 8017050:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017054:	4618      	mov	r0, r3
 8017056:	f7f8 f9f0 	bl	800f43a <lwip_htonl>
 801705a:	4602      	mov	r2, r0
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	3304      	adds	r3, #4
 8017064:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801706c:	2b00      	cmp	r3, #0
 801706e:	da02      	bge.n	8017076 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	2200      	movs	r2, #0
 8017074:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801707a:	2b00      	cmp	r3, #0
 801707c:	d10c      	bne.n	8017098 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801707e:	4b35      	ldr	r3, [pc, #212]	@ (8017154 <tcp_output_segment+0x1b8>)
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	685b      	ldr	r3, [r3, #4]
 801708c:	4618      	mov	r0, r3
 801708e:	f7f8 f9d4 	bl	800f43a <lwip_htonl>
 8017092:	4602      	mov	r2, r0
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	68da      	ldr	r2, [r3, #12]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	1ad3      	subs	r3, r2, r3
 80170a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	685b      	ldr	r3, [r3, #4]
 80170aa:	8959      	ldrh	r1, [r3, #10]
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	8b3a      	ldrh	r2, [r7, #24]
 80170b2:	1a8a      	subs	r2, r1, r2
 80170b4:	b292      	uxth	r2, r2
 80170b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	8919      	ldrh	r1, [r3, #8]
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	8b3a      	ldrh	r2, [r7, #24]
 80170c4:	1a8a      	subs	r2, r1, r2
 80170c6:	b292      	uxth	r2, r2
 80170c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	68fa      	ldr	r2, [r7, #12]
 80170d0:	68d2      	ldr	r2, [r2, #12]
 80170d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	2200      	movs	r2, #0
 80170da:	741a      	strb	r2, [r3, #16]
 80170dc:	2200      	movs	r2, #0
 80170de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	68da      	ldr	r2, [r3, #12]
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	7a9b      	ldrb	r3, [r3, #10]
 80170e8:	f003 0301 	and.w	r3, r3, #1
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <tcp_output_segment+0x158>
 80170f0:	2318      	movs	r3, #24
 80170f2:	e000      	b.n	80170f6 <tcp_output_segment+0x15a>
 80170f4:	2314      	movs	r3, #20
 80170f6:	4413      	add	r3, r2
 80170f8:	69fa      	ldr	r2, [r7, #28]
 80170fa:	429a      	cmp	r2, r3
 80170fc:	d006      	beq.n	801710c <tcp_output_segment+0x170>
 80170fe:	4b10      	ldr	r3, [pc, #64]	@ (8017140 <tcp_output_segment+0x1a4>)
 8017100:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017104:	4914      	ldr	r1, [pc, #80]	@ (8017158 <tcp_output_segment+0x1bc>)
 8017106:	4810      	ldr	r0, [pc, #64]	@ (8017148 <tcp_output_segment+0x1ac>)
 8017108:	f007 f956 	bl	801e3b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6858      	ldr	r0, [r3, #4]
 8017110:	68b9      	ldr	r1, [r7, #8]
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	1d1c      	adds	r4, r3, #4
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	7add      	ldrb	r5, [r3, #11]
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	7a9b      	ldrb	r3, [r3, #10]
 801711e:	687a      	ldr	r2, [r7, #4]
 8017120:	9202      	str	r2, [sp, #8]
 8017122:	2206      	movs	r2, #6
 8017124:	9201      	str	r2, [sp, #4]
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	462b      	mov	r3, r5
 801712a:	4622      	mov	r2, r4
 801712c:	f004 fd28 	bl	801bb80 <ip4_output_if>
 8017130:	4603      	mov	r3, r0
 8017132:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017138:	4618      	mov	r0, r3
 801713a:	3720      	adds	r7, #32
 801713c:	46bd      	mov	sp, r7
 801713e:	bdb0      	pop	{r4, r5, r7, pc}
 8017140:	0802443c 	.word	0x0802443c
 8017144:	08024a00 	.word	0x08024a00
 8017148:	08024490 	.word	0x08024490
 801714c:	08024a20 	.word	0x08024a20
 8017150:	08024a40 	.word	0x08024a40
 8017154:	2001266c 	.word	0x2001266c
 8017158:	08024a64 	.word	0x08024a64

0801715c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801715c:	b5b0      	push	{r4, r5, r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d106      	bne.n	8017178 <tcp_rexmit_rto_prepare+0x1c>
 801716a:	4b31      	ldr	r3, [pc, #196]	@ (8017230 <tcp_rexmit_rto_prepare+0xd4>)
 801716c:	f240 6263 	movw	r2, #1635	@ 0x663
 8017170:	4930      	ldr	r1, [pc, #192]	@ (8017234 <tcp_rexmit_rto_prepare+0xd8>)
 8017172:	4831      	ldr	r0, [pc, #196]	@ (8017238 <tcp_rexmit_rto_prepare+0xdc>)
 8017174:	f007 f920 	bl	801e3b8 <iprintf>

  if (pcb->unacked == NULL) {
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801717c:	2b00      	cmp	r3, #0
 801717e:	d102      	bne.n	8017186 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017180:	f06f 0305 	mvn.w	r3, #5
 8017184:	e050      	b.n	8017228 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801718a:	60fb      	str	r3, [r7, #12]
 801718c:	e00b      	b.n	80171a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801718e:	68f8      	ldr	r0, [r7, #12]
 8017190:	f7ff fee4 	bl	8016f5c <tcp_output_segment_busy>
 8017194:	4603      	mov	r3, r0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d002      	beq.n	80171a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801719a:	f06f 0305 	mvn.w	r3, #5
 801719e:	e043      	b.n	8017228 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	60fb      	str	r3, [r7, #12]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d1ef      	bne.n	801718e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80171ae:	68f8      	ldr	r0, [r7, #12]
 80171b0:	f7ff fed4 	bl	8016f5c <tcp_output_segment_busy>
 80171b4:	4603      	mov	r3, r0
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d002      	beq.n	80171c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80171ba:	f06f 0305 	mvn.w	r3, #5
 80171be:	e033      	b.n	8017228 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2200      	movs	r2, #0
 80171d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	8b5b      	ldrh	r3, [r3, #26]
 80171da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80171de:	b29a      	uxth	r2, r3
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7f8 f925 	bl	800f43a <lwip_htonl>
 80171f0:	4604      	mov	r4, r0
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	891b      	ldrh	r3, [r3, #8]
 80171f6:	461d      	mov	r5, r3
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	899b      	ldrh	r3, [r3, #12]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	4618      	mov	r0, r3
 8017202:	f7f8 f905 	bl	800f410 <lwip_htons>
 8017206:	4603      	mov	r3, r0
 8017208:	b2db      	uxtb	r3, r3
 801720a:	f003 0303 	and.w	r3, r3, #3
 801720e:	2b00      	cmp	r3, #0
 8017210:	d001      	beq.n	8017216 <tcp_rexmit_rto_prepare+0xba>
 8017212:	2301      	movs	r3, #1
 8017214:	e000      	b.n	8017218 <tcp_rexmit_rto_prepare+0xbc>
 8017216:	2300      	movs	r3, #0
 8017218:	442b      	add	r3, r5
 801721a:	18e2      	adds	r2, r4, r3
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2200      	movs	r2, #0
 8017224:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017226:	2300      	movs	r3, #0
}
 8017228:	4618      	mov	r0, r3
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bdb0      	pop	{r4, r5, r7, pc}
 8017230:	0802443c 	.word	0x0802443c
 8017234:	08024a78 	.word	0x08024a78
 8017238:	08024490 	.word	0x08024490

0801723c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b082      	sub	sp, #8
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d106      	bne.n	8017258 <tcp_rexmit_rto_commit+0x1c>
 801724a:	4b0d      	ldr	r3, [pc, #52]	@ (8017280 <tcp_rexmit_rto_commit+0x44>)
 801724c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017250:	490c      	ldr	r1, [pc, #48]	@ (8017284 <tcp_rexmit_rto_commit+0x48>)
 8017252:	480d      	ldr	r0, [pc, #52]	@ (8017288 <tcp_rexmit_rto_commit+0x4c>)
 8017254:	f007 f8b0 	bl	801e3b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801725e:	2bff      	cmp	r3, #255	@ 0xff
 8017260:	d007      	beq.n	8017272 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017268:	3301      	adds	r3, #1
 801726a:	b2da      	uxtb	r2, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f7ff fc7e 	bl	8016b74 <tcp_output>
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	0802443c 	.word	0x0802443c
 8017284:	08024a9c 	.word	0x08024a9c
 8017288:	08024490 	.word	0x08024490

0801728c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d106      	bne.n	80172a8 <tcp_rexmit_rto+0x1c>
 801729a:	4b0a      	ldr	r3, [pc, #40]	@ (80172c4 <tcp_rexmit_rto+0x38>)
 801729c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80172a0:	4909      	ldr	r1, [pc, #36]	@ (80172c8 <tcp_rexmit_rto+0x3c>)
 80172a2:	480a      	ldr	r0, [pc, #40]	@ (80172cc <tcp_rexmit_rto+0x40>)
 80172a4:	f007 f888 	bl	801e3b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7ff ff57 	bl	801715c <tcp_rexmit_rto_prepare>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d102      	bne.n	80172ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f7ff ffc1 	bl	801723c <tcp_rexmit_rto_commit>
  }
}
 80172ba:	bf00      	nop
 80172bc:	3708      	adds	r7, #8
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	0802443c 	.word	0x0802443c
 80172c8:	08024ac0 	.word	0x08024ac0
 80172cc:	08024490 	.word	0x08024490

080172d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80172d0:	b590      	push	{r4, r7, lr}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d106      	bne.n	80172ec <tcp_rexmit+0x1c>
 80172de:	4b2f      	ldr	r3, [pc, #188]	@ (801739c <tcp_rexmit+0xcc>)
 80172e0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80172e4:	492e      	ldr	r1, [pc, #184]	@ (80173a0 <tcp_rexmit+0xd0>)
 80172e6:	482f      	ldr	r0, [pc, #188]	@ (80173a4 <tcp_rexmit+0xd4>)
 80172e8:	f007 f866 	bl	801e3b8 <iprintf>

  if (pcb->unacked == NULL) {
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d102      	bne.n	80172fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80172f4:	f06f 0305 	mvn.w	r3, #5
 80172f8:	e04c      	b.n	8017394 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017300:	68b8      	ldr	r0, [r7, #8]
 8017302:	f7ff fe2b 	bl	8016f5c <tcp_output_segment_busy>
 8017306:	4603      	mov	r3, r0
 8017308:	2b00      	cmp	r3, #0
 801730a:	d002      	beq.n	8017312 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801730c:	f06f 0305 	mvn.w	r3, #5
 8017310:	e040      	b.n	8017394 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	336c      	adds	r3, #108	@ 0x6c
 801731e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017320:	e002      	b.n	8017328 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d011      	beq.n	8017354 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	68db      	ldr	r3, [r3, #12]
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	4618      	mov	r0, r3
 801733a:	f7f8 f87e 	bl	800f43a <lwip_htonl>
 801733e:	4604      	mov	r4, r0
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	4618      	mov	r0, r3
 8017348:	f7f8 f877 	bl	800f43a <lwip_htonl>
 801734c:	4603      	mov	r3, r0
 801734e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017350:	2b00      	cmp	r3, #0
 8017352:	dbe6      	blt.n	8017322 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	68ba      	ldr	r2, [r7, #8]
 8017360:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d103      	bne.n	8017372 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2200      	movs	r2, #0
 801736e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017378:	2bff      	cmp	r3, #255	@ 0xff
 801737a:	d007      	beq.n	801738c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017382:	3301      	adds	r3, #1
 8017384:	b2da      	uxtb	r2, r3
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2200      	movs	r2, #0
 8017390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017392:	2300      	movs	r3, #0
}
 8017394:	4618      	mov	r0, r3
 8017396:	3714      	adds	r7, #20
 8017398:	46bd      	mov	sp, r7
 801739a:	bd90      	pop	{r4, r7, pc}
 801739c:	0802443c 	.word	0x0802443c
 80173a0:	08024adc 	.word	0x08024adc
 80173a4:	08024490 	.word	0x08024490

080173a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d106      	bne.n	80173c4 <tcp_rexmit_fast+0x1c>
 80173b6:	4b2a      	ldr	r3, [pc, #168]	@ (8017460 <tcp_rexmit_fast+0xb8>)
 80173b8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80173bc:	4929      	ldr	r1, [pc, #164]	@ (8017464 <tcp_rexmit_fast+0xbc>)
 80173be:	482a      	ldr	r0, [pc, #168]	@ (8017468 <tcp_rexmit_fast+0xc0>)
 80173c0:	f006 fffa 	bl	801e3b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d044      	beq.n	8017456 <tcp_rexmit_fast+0xae>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	8b5b      	ldrh	r3, [r3, #26]
 80173d0:	f003 0304 	and.w	r3, r3, #4
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d13e      	bne.n	8017456 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f7ff ff79 	bl	80172d0 <tcp_rexmit>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d138      	bne.n	8017456 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80173f0:	4293      	cmp	r3, r2
 80173f2:	bf28      	it	cs
 80173f4:	4613      	movcs	r3, r2
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	0fda      	lsrs	r2, r3, #31
 80173fa:	4413      	add	r3, r2
 80173fc:	105b      	asrs	r3, r3, #1
 80173fe:	b29a      	uxth	r2, r3
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801740c:	461a      	mov	r2, r3
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	429a      	cmp	r2, r3
 8017416:	d206      	bcs.n	8017426 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801741c:	005b      	lsls	r3, r3, #1
 801741e:	b29a      	uxth	r2, r3
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017430:	4619      	mov	r1, r3
 8017432:	0049      	lsls	r1, r1, #1
 8017434:	440b      	add	r3, r1
 8017436:	b29b      	uxth	r3, r3
 8017438:	4413      	add	r3, r2
 801743a:	b29a      	uxth	r2, r3
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	8b5b      	ldrh	r3, [r3, #26]
 8017446:	f043 0304 	orr.w	r3, r3, #4
 801744a:	b29a      	uxth	r2, r3
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017456:	bf00      	nop
 8017458:	3708      	adds	r7, #8
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}
 801745e:	bf00      	nop
 8017460:	0802443c 	.word	0x0802443c
 8017464:	08024af4 	.word	0x08024af4
 8017468:	08024490 	.word	0x08024490

0801746c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b086      	sub	sp, #24
 8017470:	af00      	add	r7, sp, #0
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	607b      	str	r3, [r7, #4]
 8017476:	460b      	mov	r3, r1
 8017478:	817b      	strh	r3, [r7, #10]
 801747a:	4613      	mov	r3, r2
 801747c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801747e:	897a      	ldrh	r2, [r7, #10]
 8017480:	893b      	ldrh	r3, [r7, #8]
 8017482:	4413      	add	r3, r2
 8017484:	b29b      	uxth	r3, r3
 8017486:	3314      	adds	r3, #20
 8017488:	b29b      	uxth	r3, r3
 801748a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801748e:	4619      	mov	r1, r3
 8017490:	2022      	movs	r0, #34	@ 0x22
 8017492:	f7f9 fbc5 	bl	8010c20 <pbuf_alloc>
 8017496:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d04d      	beq.n	801753a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801749e:	897b      	ldrh	r3, [r7, #10]
 80174a0:	3313      	adds	r3, #19
 80174a2:	697a      	ldr	r2, [r7, #20]
 80174a4:	8952      	ldrh	r2, [r2, #10]
 80174a6:	4293      	cmp	r3, r2
 80174a8:	db06      	blt.n	80174b8 <tcp_output_alloc_header_common+0x4c>
 80174aa:	4b26      	ldr	r3, [pc, #152]	@ (8017544 <tcp_output_alloc_header_common+0xd8>)
 80174ac:	f240 7223 	movw	r2, #1827	@ 0x723
 80174b0:	4925      	ldr	r1, [pc, #148]	@ (8017548 <tcp_output_alloc_header_common+0xdc>)
 80174b2:	4826      	ldr	r0, [pc, #152]	@ (801754c <tcp_output_alloc_header_common+0xe0>)
 80174b4:	f006 ff80 	bl	801e3b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	685b      	ldr	r3, [r3, #4]
 80174bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80174be:	8c3b      	ldrh	r3, [r7, #32]
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7f7 ffa5 	bl	800f410 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	461a      	mov	r2, r3
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80174ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7f7 ff9d 	bl	800f410 <lwip_htons>
 80174d6:	4603      	mov	r3, r0
 80174d8:	461a      	mov	r2, r3
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	687a      	ldr	r2, [r7, #4]
 80174e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f7f7 ffa8 	bl	800f43a <lwip_htonl>
 80174ea:	4602      	mov	r2, r0
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80174f0:	897b      	ldrh	r3, [r7, #10]
 80174f2:	089b      	lsrs	r3, r3, #2
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	3305      	adds	r3, #5
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	031b      	lsls	r3, r3, #12
 80174fc:	b29a      	uxth	r2, r3
 80174fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017502:	b29b      	uxth	r3, r3
 8017504:	4313      	orrs	r3, r2
 8017506:	b29b      	uxth	r3, r3
 8017508:	4618      	mov	r0, r3
 801750a:	f7f7 ff81 	bl	800f410 <lwip_htons>
 801750e:	4603      	mov	r3, r0
 8017510:	461a      	mov	r2, r3
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017516:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017518:	4618      	mov	r0, r3
 801751a:	f7f7 ff79 	bl	800f410 <lwip_htons>
 801751e:	4603      	mov	r3, r0
 8017520:	461a      	mov	r2, r3
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	2200      	movs	r2, #0
 801752a:	741a      	strb	r2, [r3, #16]
 801752c:	2200      	movs	r2, #0
 801752e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	2200      	movs	r2, #0
 8017534:	749a      	strb	r2, [r3, #18]
 8017536:	2200      	movs	r2, #0
 8017538:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801753a:	697b      	ldr	r3, [r7, #20]
}
 801753c:	4618      	mov	r0, r3
 801753e:	3718      	adds	r7, #24
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	0802443c 	.word	0x0802443c
 8017548:	08024b14 	.word	0x08024b14
 801754c:	08024490 	.word	0x08024490

08017550 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017550:	b5b0      	push	{r4, r5, r7, lr}
 8017552:	b08a      	sub	sp, #40	@ 0x28
 8017554:	af04      	add	r7, sp, #16
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	607b      	str	r3, [r7, #4]
 801755a:	460b      	mov	r3, r1
 801755c:	817b      	strh	r3, [r7, #10]
 801755e:	4613      	mov	r3, r2
 8017560:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d106      	bne.n	8017576 <tcp_output_alloc_header+0x26>
 8017568:	4b15      	ldr	r3, [pc, #84]	@ (80175c0 <tcp_output_alloc_header+0x70>)
 801756a:	f240 7242 	movw	r2, #1858	@ 0x742
 801756e:	4915      	ldr	r1, [pc, #84]	@ (80175c4 <tcp_output_alloc_header+0x74>)
 8017570:	4815      	ldr	r0, [pc, #84]	@ (80175c8 <tcp_output_alloc_header+0x78>)
 8017572:	f006 ff21 	bl	801e3b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	8adb      	ldrh	r3, [r3, #22]
 801757e:	68fa      	ldr	r2, [r7, #12]
 8017580:	8b12      	ldrh	r2, [r2, #24]
 8017582:	68f9      	ldr	r1, [r7, #12]
 8017584:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017586:	893d      	ldrh	r5, [r7, #8]
 8017588:	897c      	ldrh	r4, [r7, #10]
 801758a:	9103      	str	r1, [sp, #12]
 801758c:	2110      	movs	r1, #16
 801758e:	9102      	str	r1, [sp, #8]
 8017590:	9201      	str	r2, [sp, #4]
 8017592:	9300      	str	r3, [sp, #0]
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	462a      	mov	r2, r5
 8017598:	4621      	mov	r1, r4
 801759a:	f7ff ff67 	bl	801746c <tcp_output_alloc_header_common>
 801759e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80175a0:	697b      	ldr	r3, [r7, #20]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d006      	beq.n	80175b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175aa:	68fa      	ldr	r2, [r7, #12]
 80175ac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80175ae:	441a      	add	r2, r3
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80175b4:	697b      	ldr	r3, [r7, #20]
}
 80175b6:	4618      	mov	r0, r3
 80175b8:	3718      	adds	r7, #24
 80175ba:	46bd      	mov	sp, r7
 80175bc:	bdb0      	pop	{r4, r5, r7, pc}
 80175be:	bf00      	nop
 80175c0:	0802443c 	.word	0x0802443c
 80175c4:	08024b44 	.word	0x08024b44
 80175c8:	08024490 	.word	0x08024490

080175cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b088      	sub	sp, #32
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	60b9      	str	r1, [r7, #8]
 80175d6:	4611      	mov	r1, r2
 80175d8:	461a      	mov	r2, r3
 80175da:	460b      	mov	r3, r1
 80175dc:	71fb      	strb	r3, [r7, #7]
 80175de:	4613      	mov	r3, r2
 80175e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80175e2:	2300      	movs	r3, #0
 80175e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d106      	bne.n	80175fa <tcp_output_fill_options+0x2e>
 80175ec:	4b12      	ldr	r3, [pc, #72]	@ (8017638 <tcp_output_fill_options+0x6c>)
 80175ee:	f240 7256 	movw	r2, #1878	@ 0x756
 80175f2:	4912      	ldr	r1, [pc, #72]	@ (801763c <tcp_output_fill_options+0x70>)
 80175f4:	4812      	ldr	r0, [pc, #72]	@ (8017640 <tcp_output_fill_options+0x74>)
 80175f6:	f006 fedf 	bl	801e3b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	685b      	ldr	r3, [r3, #4]
 80175fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017600:	69bb      	ldr	r3, [r7, #24]
 8017602:	3314      	adds	r3, #20
 8017604:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017606:	8bfb      	ldrh	r3, [r7, #30]
 8017608:	009b      	lsls	r3, r3, #2
 801760a:	461a      	mov	r2, r3
 801760c:	79fb      	ldrb	r3, [r7, #7]
 801760e:	009b      	lsls	r3, r3, #2
 8017610:	f003 0304 	and.w	r3, r3, #4
 8017614:	4413      	add	r3, r2
 8017616:	3314      	adds	r3, #20
 8017618:	69ba      	ldr	r2, [r7, #24]
 801761a:	4413      	add	r3, r2
 801761c:	697a      	ldr	r2, [r7, #20]
 801761e:	429a      	cmp	r2, r3
 8017620:	d006      	beq.n	8017630 <tcp_output_fill_options+0x64>
 8017622:	4b05      	ldr	r3, [pc, #20]	@ (8017638 <tcp_output_fill_options+0x6c>)
 8017624:	f240 7275 	movw	r2, #1909	@ 0x775
 8017628:	4906      	ldr	r1, [pc, #24]	@ (8017644 <tcp_output_fill_options+0x78>)
 801762a:	4805      	ldr	r0, [pc, #20]	@ (8017640 <tcp_output_fill_options+0x74>)
 801762c:	f006 fec4 	bl	801e3b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017630:	bf00      	nop
 8017632:	3720      	adds	r7, #32
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	0802443c 	.word	0x0802443c
 801763c:	08024b6c 	.word	0x08024b6c
 8017640:	08024490 	.word	0x08024490
 8017644:	08024a64 	.word	0x08024a64

08017648 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b08a      	sub	sp, #40	@ 0x28
 801764c:	af04      	add	r7, sp, #16
 801764e:	60f8      	str	r0, [r7, #12]
 8017650:	60b9      	str	r1, [r7, #8]
 8017652:	607a      	str	r2, [r7, #4]
 8017654:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d106      	bne.n	801766a <tcp_output_control_segment+0x22>
 801765c:	4b1c      	ldr	r3, [pc, #112]	@ (80176d0 <tcp_output_control_segment+0x88>)
 801765e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017662:	491c      	ldr	r1, [pc, #112]	@ (80176d4 <tcp_output_control_segment+0x8c>)
 8017664:	481c      	ldr	r0, [pc, #112]	@ (80176d8 <tcp_output_control_segment+0x90>)
 8017666:	f006 fea7 	bl	801e3b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801766a:	683a      	ldr	r2, [r7, #0]
 801766c:	6879      	ldr	r1, [r7, #4]
 801766e:	68f8      	ldr	r0, [r7, #12]
 8017670:	f7fe faea 	bl	8015c48 <tcp_route>
 8017674:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d102      	bne.n	8017682 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801767c:	23fc      	movs	r3, #252	@ 0xfc
 801767e:	75fb      	strb	r3, [r7, #23]
 8017680:	e01c      	b.n	80176bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d006      	beq.n	8017696 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	7adb      	ldrb	r3, [r3, #11]
 801768c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	7a9b      	ldrb	r3, [r3, #10]
 8017692:	757b      	strb	r3, [r7, #21]
 8017694:	e003      	b.n	801769e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017696:	23ff      	movs	r3, #255	@ 0xff
 8017698:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801769a:	2300      	movs	r3, #0
 801769c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801769e:	7dba      	ldrb	r2, [r7, #22]
 80176a0:	693b      	ldr	r3, [r7, #16]
 80176a2:	9302      	str	r3, [sp, #8]
 80176a4:	2306      	movs	r3, #6
 80176a6:	9301      	str	r3, [sp, #4]
 80176a8:	7d7b      	ldrb	r3, [r7, #21]
 80176aa:	9300      	str	r3, [sp, #0]
 80176ac:	4613      	mov	r3, r2
 80176ae:	683a      	ldr	r2, [r7, #0]
 80176b0:	6879      	ldr	r1, [r7, #4]
 80176b2:	68b8      	ldr	r0, [r7, #8]
 80176b4:	f004 fa64 	bl	801bb80 <ip4_output_if>
 80176b8:	4603      	mov	r3, r0
 80176ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80176bc:	68b8      	ldr	r0, [r7, #8]
 80176be:	f7f9 fd93 	bl	80111e8 <pbuf_free>
  return err;
 80176c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3718      	adds	r7, #24
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	0802443c 	.word	0x0802443c
 80176d4:	08024b94 	.word	0x08024b94
 80176d8:	08024490 	.word	0x08024490

080176dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80176dc:	b590      	push	{r4, r7, lr}
 80176de:	b08b      	sub	sp, #44	@ 0x2c
 80176e0:	af04      	add	r7, sp, #16
 80176e2:	60f8      	str	r0, [r7, #12]
 80176e4:	60b9      	str	r1, [r7, #8]
 80176e6:	607a      	str	r2, [r7, #4]
 80176e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d106      	bne.n	80176fe <tcp_rst+0x22>
 80176f0:	4b1f      	ldr	r3, [pc, #124]	@ (8017770 <tcp_rst+0x94>)
 80176f2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80176f6:	491f      	ldr	r1, [pc, #124]	@ (8017774 <tcp_rst+0x98>)
 80176f8:	481f      	ldr	r0, [pc, #124]	@ (8017778 <tcp_rst+0x9c>)
 80176fa:	f006 fe5d 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80176fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017700:	2b00      	cmp	r3, #0
 8017702:	d106      	bne.n	8017712 <tcp_rst+0x36>
 8017704:	4b1a      	ldr	r3, [pc, #104]	@ (8017770 <tcp_rst+0x94>)
 8017706:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801770a:	491c      	ldr	r1, [pc, #112]	@ (801777c <tcp_rst+0xa0>)
 801770c:	481a      	ldr	r0, [pc, #104]	@ (8017778 <tcp_rst+0x9c>)
 801770e:	f006 fe53 	bl	801e3b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017712:	2300      	movs	r3, #0
 8017714:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017716:	f246 0308 	movw	r3, #24584	@ 0x6008
 801771a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801771c:	7dfb      	ldrb	r3, [r7, #23]
 801771e:	b29c      	uxth	r4, r3
 8017720:	68b8      	ldr	r0, [r7, #8]
 8017722:	f7f7 fe8a 	bl	800f43a <lwip_htonl>
 8017726:	4602      	mov	r2, r0
 8017728:	8abb      	ldrh	r3, [r7, #20]
 801772a:	9303      	str	r3, [sp, #12]
 801772c:	2314      	movs	r3, #20
 801772e:	9302      	str	r3, [sp, #8]
 8017730:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017732:	9301      	str	r3, [sp, #4]
 8017734:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017736:	9300      	str	r3, [sp, #0]
 8017738:	4613      	mov	r3, r2
 801773a:	2200      	movs	r2, #0
 801773c:	4621      	mov	r1, r4
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7ff fe94 	bl	801746c <tcp_output_alloc_header_common>
 8017744:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d00c      	beq.n	8017766 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801774c:	7dfb      	ldrb	r3, [r7, #23]
 801774e:	2200      	movs	r2, #0
 8017750:	6939      	ldr	r1, [r7, #16]
 8017752:	68f8      	ldr	r0, [r7, #12]
 8017754:	f7ff ff3a 	bl	80175cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801775a:	683a      	ldr	r2, [r7, #0]
 801775c:	6939      	ldr	r1, [r7, #16]
 801775e:	68f8      	ldr	r0, [r7, #12]
 8017760:	f7ff ff72 	bl	8017648 <tcp_output_control_segment>
 8017764:	e000      	b.n	8017768 <tcp_rst+0x8c>
    return;
 8017766:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017768:	371c      	adds	r7, #28
 801776a:	46bd      	mov	sp, r7
 801776c:	bd90      	pop	{r4, r7, pc}
 801776e:	bf00      	nop
 8017770:	0802443c 	.word	0x0802443c
 8017774:	08024bc0 	.word	0x08024bc0
 8017778:	08024490 	.word	0x08024490
 801777c:	08024bdc 	.word	0x08024bdc

08017780 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017780:	b590      	push	{r4, r7, lr}
 8017782:	b087      	sub	sp, #28
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017788:	2300      	movs	r3, #0
 801778a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801778c:	2300      	movs	r3, #0
 801778e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d106      	bne.n	80177a4 <tcp_send_empty_ack+0x24>
 8017796:	4b28      	ldr	r3, [pc, #160]	@ (8017838 <tcp_send_empty_ack+0xb8>)
 8017798:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801779c:	4927      	ldr	r1, [pc, #156]	@ (801783c <tcp_send_empty_ack+0xbc>)
 801779e:	4828      	ldr	r0, [pc, #160]	@ (8017840 <tcp_send_empty_ack+0xc0>)
 80177a0:	f006 fe0a 	bl	801e3b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177a4:	7dfb      	ldrb	r3, [r7, #23]
 80177a6:	009b      	lsls	r3, r3, #2
 80177a8:	b2db      	uxtb	r3, r3
 80177aa:	f003 0304 	and.w	r3, r3, #4
 80177ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80177b0:	7d7b      	ldrb	r3, [r7, #21]
 80177b2:	b29c      	uxth	r4, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7f7 fe3e 	bl	800f43a <lwip_htonl>
 80177be:	4603      	mov	r3, r0
 80177c0:	2200      	movs	r2, #0
 80177c2:	4621      	mov	r1, r4
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f7ff fec3 	bl	8017550 <tcp_output_alloc_header>
 80177ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177cc:	693b      	ldr	r3, [r7, #16]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d109      	bne.n	80177e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	8b5b      	ldrh	r3, [r3, #26]
 80177d6:	f043 0303 	orr.w	r3, r3, #3
 80177da:	b29a      	uxth	r2, r3
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80177e0:	f06f 0301 	mvn.w	r3, #1
 80177e4:	e023      	b.n	801782e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80177e6:	7dbb      	ldrb	r3, [r7, #22]
 80177e8:	7dfa      	ldrb	r2, [r7, #23]
 80177ea:	6939      	ldr	r1, [r7, #16]
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f7ff feed 	bl	80175cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80177f2:	687a      	ldr	r2, [r7, #4]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	3304      	adds	r3, #4
 80177f8:	6939      	ldr	r1, [r7, #16]
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f7ff ff24 	bl	8017648 <tcp_output_control_segment>
 8017800:	4603      	mov	r3, r0
 8017802:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d007      	beq.n	801781c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	8b5b      	ldrh	r3, [r3, #26]
 8017810:	f043 0303 	orr.w	r3, r3, #3
 8017814:	b29a      	uxth	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	835a      	strh	r2, [r3, #26]
 801781a:	e006      	b.n	801782a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	8b5b      	ldrh	r3, [r3, #26]
 8017820:	f023 0303 	bic.w	r3, r3, #3
 8017824:	b29a      	uxth	r2, r3
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801782a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801782e:	4618      	mov	r0, r3
 8017830:	371c      	adds	r7, #28
 8017832:	46bd      	mov	sp, r7
 8017834:	bd90      	pop	{r4, r7, pc}
 8017836:	bf00      	nop
 8017838:	0802443c 	.word	0x0802443c
 801783c:	08024bf8 	.word	0x08024bf8
 8017840:	08024490 	.word	0x08024490

08017844 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017844:	b590      	push	{r4, r7, lr}
 8017846:	b087      	sub	sp, #28
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801784c:	2300      	movs	r3, #0
 801784e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d106      	bne.n	8017864 <tcp_keepalive+0x20>
 8017856:	4b18      	ldr	r3, [pc, #96]	@ (80178b8 <tcp_keepalive+0x74>)
 8017858:	f640 0224 	movw	r2, #2084	@ 0x824
 801785c:	4917      	ldr	r1, [pc, #92]	@ (80178bc <tcp_keepalive+0x78>)
 801785e:	4818      	ldr	r0, [pc, #96]	@ (80178c0 <tcp_keepalive+0x7c>)
 8017860:	f006 fdaa 	bl	801e3b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017864:	7dfb      	ldrb	r3, [r7, #23]
 8017866:	b29c      	uxth	r4, r3
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801786c:	3b01      	subs	r3, #1
 801786e:	4618      	mov	r0, r3
 8017870:	f7f7 fde3 	bl	800f43a <lwip_htonl>
 8017874:	4603      	mov	r3, r0
 8017876:	2200      	movs	r2, #0
 8017878:	4621      	mov	r1, r4
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	f7ff fe68 	bl	8017550 <tcp_output_alloc_header>
 8017880:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d102      	bne.n	801788e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017888:	f04f 33ff 	mov.w	r3, #4294967295
 801788c:	e010      	b.n	80178b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801788e:	7dfb      	ldrb	r3, [r7, #23]
 8017890:	2200      	movs	r2, #0
 8017892:	6939      	ldr	r1, [r7, #16]
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7ff fe99 	bl	80175cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801789a:	687a      	ldr	r2, [r7, #4]
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	3304      	adds	r3, #4
 80178a0:	6939      	ldr	r1, [r7, #16]
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7ff fed0 	bl	8017648 <tcp_output_control_segment>
 80178a8:	4603      	mov	r3, r0
 80178aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80178ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	371c      	adds	r7, #28
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd90      	pop	{r4, r7, pc}
 80178b8:	0802443c 	.word	0x0802443c
 80178bc:	08024c18 	.word	0x08024c18
 80178c0:	08024490 	.word	0x08024490

080178c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80178c4:	b590      	push	{r4, r7, lr}
 80178c6:	b08b      	sub	sp, #44	@ 0x2c
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178cc:	2300      	movs	r3, #0
 80178ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d106      	bne.n	80178e6 <tcp_zero_window_probe+0x22>
 80178d8:	4b4c      	ldr	r3, [pc, #304]	@ (8017a0c <tcp_zero_window_probe+0x148>)
 80178da:	f640 024f 	movw	r2, #2127	@ 0x84f
 80178de:	494c      	ldr	r1, [pc, #304]	@ (8017a10 <tcp_zero_window_probe+0x14c>)
 80178e0:	484c      	ldr	r0, [pc, #304]	@ (8017a14 <tcp_zero_window_probe+0x150>)
 80178e2:	f006 fd69 	bl	801e3b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80178ec:	6a3b      	ldr	r3, [r7, #32]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d101      	bne.n	80178f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80178f2:	2300      	movs	r3, #0
 80178f4:	e086      	b.n	8017a04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80178fc:	2bff      	cmp	r3, #255	@ 0xff
 80178fe:	d007      	beq.n	8017910 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017906:	3301      	adds	r3, #1
 8017908:	b2da      	uxtb	r2, r3
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017910:	6a3b      	ldr	r3, [r7, #32]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	899b      	ldrh	r3, [r3, #12]
 8017916:	b29b      	uxth	r3, r3
 8017918:	4618      	mov	r0, r3
 801791a:	f7f7 fd79 	bl	800f410 <lwip_htons>
 801791e:	4603      	mov	r3, r0
 8017920:	b2db      	uxtb	r3, r3
 8017922:	f003 0301 	and.w	r3, r3, #1
 8017926:	2b00      	cmp	r3, #0
 8017928:	d005      	beq.n	8017936 <tcp_zero_window_probe+0x72>
 801792a:	6a3b      	ldr	r3, [r7, #32]
 801792c:	891b      	ldrh	r3, [r3, #8]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d101      	bne.n	8017936 <tcp_zero_window_probe+0x72>
 8017932:	2301      	movs	r3, #1
 8017934:	e000      	b.n	8017938 <tcp_zero_window_probe+0x74>
 8017936:	2300      	movs	r3, #0
 8017938:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801793a:	7ffb      	ldrb	r3, [r7, #31]
 801793c:	2b00      	cmp	r3, #0
 801793e:	bf0c      	ite	eq
 8017940:	2301      	moveq	r3, #1
 8017942:	2300      	movne	r3, #0
 8017944:	b2db      	uxtb	r3, r3
 8017946:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801794c:	b299      	uxth	r1, r3
 801794e:	6a3b      	ldr	r3, [r7, #32]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	685b      	ldr	r3, [r3, #4]
 8017954:	8bba      	ldrh	r2, [r7, #28]
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f7ff fdfa 	bl	8017550 <tcp_output_alloc_header>
 801795c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d102      	bne.n	801796a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017964:	f04f 33ff 	mov.w	r3, #4294967295
 8017968:	e04c      	b.n	8017a04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801796a:	69bb      	ldr	r3, [r7, #24]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017970:	7ffb      	ldrb	r3, [r7, #31]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d011      	beq.n	801799a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	899b      	ldrh	r3, [r3, #12]
 801797a:	b29b      	uxth	r3, r3
 801797c:	b21b      	sxth	r3, r3
 801797e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017982:	b21c      	sxth	r4, r3
 8017984:	2011      	movs	r0, #17
 8017986:	f7f7 fd43 	bl	800f410 <lwip_htons>
 801798a:	4603      	mov	r3, r0
 801798c:	b21b      	sxth	r3, r3
 801798e:	4323      	orrs	r3, r4
 8017990:	b21b      	sxth	r3, r3
 8017992:	b29a      	uxth	r2, r3
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	819a      	strh	r2, [r3, #12]
 8017998:	e010      	b.n	80179bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	3314      	adds	r3, #20
 80179a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	6858      	ldr	r0, [r3, #4]
 80179a6:	6a3b      	ldr	r3, [r7, #32]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	891a      	ldrh	r2, [r3, #8]
 80179ac:	6a3b      	ldr	r3, [r7, #32]
 80179ae:	891b      	ldrh	r3, [r3, #8]
 80179b0:	1ad3      	subs	r3, r2, r3
 80179b2:	b29b      	uxth	r3, r3
 80179b4:	2201      	movs	r2, #1
 80179b6:	6939      	ldr	r1, [r7, #16]
 80179b8:	f7f9 fe1c 	bl	80115f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80179bc:	6a3b      	ldr	r3, [r7, #32]
 80179be:	68db      	ldr	r3, [r3, #12]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7f7 fd39 	bl	800f43a <lwip_htonl>
 80179c8:	4603      	mov	r3, r0
 80179ca:	3301      	adds	r3, #1
 80179cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	1ad3      	subs	r3, r2, r3
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	da02      	bge.n	80179e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	68fa      	ldr	r2, [r7, #12]
 80179de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80179e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179e4:	2200      	movs	r2, #0
 80179e6:	69b9      	ldr	r1, [r7, #24]
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f7ff fdef 	bl	80175cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179ee:	687a      	ldr	r2, [r7, #4]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	3304      	adds	r3, #4
 80179f4:	69b9      	ldr	r1, [r7, #24]
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7ff fe26 	bl	8017648 <tcp_output_control_segment>
 80179fc:	4603      	mov	r3, r0
 80179fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	372c      	adds	r7, #44	@ 0x2c
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd90      	pop	{r4, r7, pc}
 8017a0c:	0802443c 	.word	0x0802443c
 8017a10:	08024c34 	.word	0x08024c34
 8017a14:	08024490 	.word	0x08024490

08017a18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a20:	f7fa f830 	bl	8011a84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a24:	4b0a      	ldr	r3, [pc, #40]	@ (8017a50 <tcpip_tcp_timer+0x38>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d103      	bne.n	8017a34 <tcpip_tcp_timer+0x1c>
 8017a2c:	4b09      	ldr	r3, [pc, #36]	@ (8017a54 <tcpip_tcp_timer+0x3c>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d005      	beq.n	8017a40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a34:	2200      	movs	r2, #0
 8017a36:	4908      	ldr	r1, [pc, #32]	@ (8017a58 <tcpip_tcp_timer+0x40>)
 8017a38:	20fa      	movs	r0, #250	@ 0xfa
 8017a3a:	f000 f8f3 	bl	8017c24 <sys_timeout>
 8017a3e:	e003      	b.n	8017a48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a40:	4b06      	ldr	r3, [pc, #24]	@ (8017a5c <tcpip_tcp_timer+0x44>)
 8017a42:	2200      	movs	r2, #0
 8017a44:	601a      	str	r2, [r3, #0]
  }
}
 8017a46:	bf00      	nop
 8017a48:	bf00      	nop
 8017a4a:	3708      	adds	r7, #8
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	20012678 	.word	0x20012678
 8017a54:	2001267c 	.word	0x2001267c
 8017a58:	08017a19 	.word	0x08017a19
 8017a5c:	200126c4 	.word	0x200126c4

08017a60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017a64:	4b0a      	ldr	r3, [pc, #40]	@ (8017a90 <tcp_timer_needed+0x30>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d10f      	bne.n	8017a8c <tcp_timer_needed+0x2c>
 8017a6c:	4b09      	ldr	r3, [pc, #36]	@ (8017a94 <tcp_timer_needed+0x34>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d103      	bne.n	8017a7c <tcp_timer_needed+0x1c>
 8017a74:	4b08      	ldr	r3, [pc, #32]	@ (8017a98 <tcp_timer_needed+0x38>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d007      	beq.n	8017a8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017a7c:	4b04      	ldr	r3, [pc, #16]	@ (8017a90 <tcp_timer_needed+0x30>)
 8017a7e:	2201      	movs	r2, #1
 8017a80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a82:	2200      	movs	r2, #0
 8017a84:	4905      	ldr	r1, [pc, #20]	@ (8017a9c <tcp_timer_needed+0x3c>)
 8017a86:	20fa      	movs	r0, #250	@ 0xfa
 8017a88:	f000 f8cc 	bl	8017c24 <sys_timeout>
  }
}
 8017a8c:	bf00      	nop
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	200126c4 	.word	0x200126c4
 8017a94:	20012678 	.word	0x20012678
 8017a98:	2001267c 	.word	0x2001267c
 8017a9c:	08017a19 	.word	0x08017a19

08017aa0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b086      	sub	sp, #24
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017aac:	200a      	movs	r0, #10
 8017aae:	f7f8 fc75 	bl	801039c <memp_malloc>
 8017ab2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d109      	bne.n	8017ace <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d151      	bne.n	8017b64 <sys_timeout_abs+0xc4>
 8017ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8017b6c <sys_timeout_abs+0xcc>)
 8017ac2:	22be      	movs	r2, #190	@ 0xbe
 8017ac4:	492a      	ldr	r1, [pc, #168]	@ (8017b70 <sys_timeout_abs+0xd0>)
 8017ac6:	482b      	ldr	r0, [pc, #172]	@ (8017b74 <sys_timeout_abs+0xd4>)
 8017ac8:	f006 fc76 	bl	801e3b8 <iprintf>
    return;
 8017acc:	e04a      	b.n	8017b64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017ace:	693b      	ldr	r3, [r7, #16]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017ad4:	693b      	ldr	r3, [r7, #16]
 8017ad6:	68ba      	ldr	r2, [r7, #8]
 8017ad8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017ada:	693b      	ldr	r3, [r7, #16]
 8017adc:	687a      	ldr	r2, [r7, #4]
 8017ade:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	68fa      	ldr	r2, [r7, #12]
 8017ae4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017ae6:	4b24      	ldr	r3, [pc, #144]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d103      	bne.n	8017af6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017aee:	4a22      	ldr	r2, [pc, #136]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	6013      	str	r3, [r2, #0]
    return;
 8017af4:	e037      	b.n	8017b66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017af6:	693b      	ldr	r3, [r7, #16]
 8017af8:	685a      	ldr	r2, [r3, #4]
 8017afa:	4b1f      	ldr	r3, [pc, #124]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	685b      	ldr	r3, [r3, #4]
 8017b00:	1ad3      	subs	r3, r2, r3
 8017b02:	0fdb      	lsrs	r3, r3, #31
 8017b04:	f003 0301 	and.w	r3, r3, #1
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d007      	beq.n	8017b1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b16:	4a18      	ldr	r2, [pc, #96]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017b18:	693b      	ldr	r3, [r7, #16]
 8017b1a:	6013      	str	r3, [r2, #0]
 8017b1c:	e023      	b.n	8017b66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b1e:	4b16      	ldr	r3, [pc, #88]	@ (8017b78 <sys_timeout_abs+0xd8>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	617b      	str	r3, [r7, #20]
 8017b24:	e01a      	b.n	8017b5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d00b      	beq.n	8017b46 <sys_timeout_abs+0xa6>
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	685a      	ldr	r2, [r3, #4]
 8017b32:	697b      	ldr	r3, [r7, #20]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	1ad3      	subs	r3, r2, r3
 8017b3a:	0fdb      	lsrs	r3, r3, #31
 8017b3c:	f003 0301 	and.w	r3, r3, #1
 8017b40:	b2db      	uxtb	r3, r3
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d007      	beq.n	8017b56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b46:	697b      	ldr	r3, [r7, #20]
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	693a      	ldr	r2, [r7, #16]
 8017b52:	601a      	str	r2, [r3, #0]
        break;
 8017b54:	e007      	b.n	8017b66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	617b      	str	r3, [r7, #20]
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1e1      	bne.n	8017b26 <sys_timeout_abs+0x86>
 8017b62:	e000      	b.n	8017b66 <sys_timeout_abs+0xc6>
    return;
 8017b64:	bf00      	nop
      }
    }
  }
}
 8017b66:	3718      	adds	r7, #24
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}
 8017b6c:	08024c58 	.word	0x08024c58
 8017b70:	08024c8c 	.word	0x08024c8c
 8017b74:	08024ccc 	.word	0x08024ccc
 8017b78:	200126bc 	.word	0x200126bc

08017b7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b086      	sub	sp, #24
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	4798      	blx	r3

  now = sys_now();
 8017b8e:	f7f0 fd23 	bl	80085d8 <sys_now>
 8017b92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	681a      	ldr	r2, [r3, #0]
 8017b98:	4b0f      	ldr	r3, [pc, #60]	@ (8017bd8 <lwip_cyclic_timer+0x5c>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	4413      	add	r3, r2
 8017b9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	693b      	ldr	r3, [r7, #16]
 8017ba4:	1ad3      	subs	r3, r2, r3
 8017ba6:	0fdb      	lsrs	r3, r3, #31
 8017ba8:	f003 0301 	and.w	r3, r3, #1
 8017bac:	b2db      	uxtb	r3, r3
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d009      	beq.n	8017bc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017bb2:	697b      	ldr	r3, [r7, #20]
 8017bb4:	681a      	ldr	r2, [r3, #0]
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	4413      	add	r3, r2
 8017bba:	687a      	ldr	r2, [r7, #4]
 8017bbc:	4907      	ldr	r1, [pc, #28]	@ (8017bdc <lwip_cyclic_timer+0x60>)
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7ff ff6e 	bl	8017aa0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017bc4:	e004      	b.n	8017bd0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	4904      	ldr	r1, [pc, #16]	@ (8017bdc <lwip_cyclic_timer+0x60>)
 8017bca:	68f8      	ldr	r0, [r7, #12]
 8017bcc:	f7ff ff68 	bl	8017aa0 <sys_timeout_abs>
}
 8017bd0:	bf00      	nop
 8017bd2:	3718      	adds	r7, #24
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	200126c0 	.word	0x200126c0
 8017bdc:	08017b7d 	.word	0x08017b7d

08017be0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017be6:	2301      	movs	r3, #1
 8017be8:	607b      	str	r3, [r7, #4]
 8017bea:	e00e      	b.n	8017c0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017bec:	4a0b      	ldr	r2, [pc, #44]	@ (8017c1c <sys_timeouts_init+0x3c>)
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	00db      	lsls	r3, r3, #3
 8017bf8:	4a08      	ldr	r2, [pc, #32]	@ (8017c1c <sys_timeouts_init+0x3c>)
 8017bfa:	4413      	add	r3, r2
 8017bfc:	461a      	mov	r2, r3
 8017bfe:	4908      	ldr	r1, [pc, #32]	@ (8017c20 <sys_timeouts_init+0x40>)
 8017c00:	f000 f810 	bl	8017c24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	3301      	adds	r3, #1
 8017c08:	607b      	str	r3, [r7, #4]
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2b05      	cmp	r3, #5
 8017c0e:	d9ed      	bls.n	8017bec <sys_timeouts_init+0xc>
  }
}
 8017c10:	bf00      	nop
 8017c12:	bf00      	nop
 8017c14:	3708      	adds	r7, #8
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	08025dec 	.word	0x08025dec
 8017c20:	08017b7d 	.word	0x08017b7d

08017c24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b086      	sub	sp, #24
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	60f8      	str	r0, [r7, #12]
 8017c2c:	60b9      	str	r1, [r7, #8]
 8017c2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c36:	d306      	bcc.n	8017c46 <sys_timeout+0x22>
 8017c38:	4b0a      	ldr	r3, [pc, #40]	@ (8017c64 <sys_timeout+0x40>)
 8017c3a:	f240 1229 	movw	r2, #297	@ 0x129
 8017c3e:	490a      	ldr	r1, [pc, #40]	@ (8017c68 <sys_timeout+0x44>)
 8017c40:	480a      	ldr	r0, [pc, #40]	@ (8017c6c <sys_timeout+0x48>)
 8017c42:	f006 fbb9 	bl	801e3b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c46:	f7f0 fcc7 	bl	80085d8 <sys_now>
 8017c4a:	4602      	mov	r2, r0
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	4413      	add	r3, r2
 8017c50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017c52:	687a      	ldr	r2, [r7, #4]
 8017c54:	68b9      	ldr	r1, [r7, #8]
 8017c56:	6978      	ldr	r0, [r7, #20]
 8017c58:	f7ff ff22 	bl	8017aa0 <sys_timeout_abs>
#endif
}
 8017c5c:	bf00      	nop
 8017c5e:	3718      	adds	r7, #24
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}
 8017c64:	08024c58 	.word	0x08024c58
 8017c68:	08024cf4 	.word	0x08024cf4
 8017c6c:	08024ccc 	.word	0x08024ccc

08017c70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017c76:	f7f0 fcaf 	bl	80085d8 <sys_now>
 8017c7a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017c7c:	4b17      	ldr	r3, [pc, #92]	@ (8017cdc <sys_check_timeouts+0x6c>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d022      	beq.n	8017cce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	685b      	ldr	r3, [r3, #4]
 8017c8c:	68fa      	ldr	r2, [r7, #12]
 8017c8e:	1ad3      	subs	r3, r2, r3
 8017c90:	0fdb      	lsrs	r3, r3, #31
 8017c92:	f003 0301 	and.w	r3, r3, #1
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d11a      	bne.n	8017cd2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8017cdc <sys_check_timeouts+0x6c>)
 8017ca2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	689b      	ldr	r3, [r3, #8]
 8017ca8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	68db      	ldr	r3, [r3, #12]
 8017cae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8017ce0 <sys_check_timeouts+0x70>)
 8017cb6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017cb8:	68b9      	ldr	r1, [r7, #8]
 8017cba:	200a      	movs	r0, #10
 8017cbc:	f7f8 fbe4 	bl	8010488 <memp_free>
    if (handler != NULL) {
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d0da      	beq.n	8017c7c <sys_check_timeouts+0xc>
      handler(arg);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6838      	ldr	r0, [r7, #0]
 8017cca:	4798      	blx	r3
  do {
 8017ccc:	e7d6      	b.n	8017c7c <sys_check_timeouts+0xc>
      return;
 8017cce:	bf00      	nop
 8017cd0:	e000      	b.n	8017cd4 <sys_check_timeouts+0x64>
      return;
 8017cd2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017cd4:	3710      	adds	r7, #16
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	200126bc 	.word	0x200126bc
 8017ce0:	200126c0 	.word	0x200126c0

08017ce4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017cea:	4b16      	ldr	r3, [pc, #88]	@ (8017d44 <sys_timeouts_sleeptime+0x60>)
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d102      	bne.n	8017cf8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8017cf6:	e020      	b.n	8017d3a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017cf8:	f7f0 fc6e 	bl	80085d8 <sys_now>
 8017cfc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017cfe:	4b11      	ldr	r3, [pc, #68]	@ (8017d44 <sys_timeouts_sleeptime+0x60>)
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	685a      	ldr	r2, [r3, #4]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	0fdb      	lsrs	r3, r3, #31
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d001      	beq.n	8017d18 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017d14:	2300      	movs	r3, #0
 8017d16:	e010      	b.n	8017d3a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017d18:	4b0a      	ldr	r3, [pc, #40]	@ (8017d44 <sys_timeouts_sleeptime+0x60>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	685a      	ldr	r2, [r3, #4]
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	1ad3      	subs	r3, r2, r3
 8017d22:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	da06      	bge.n	8017d38 <sys_timeouts_sleeptime+0x54>
 8017d2a:	4b07      	ldr	r3, [pc, #28]	@ (8017d48 <sys_timeouts_sleeptime+0x64>)
 8017d2c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017d30:	4906      	ldr	r1, [pc, #24]	@ (8017d4c <sys_timeouts_sleeptime+0x68>)
 8017d32:	4807      	ldr	r0, [pc, #28]	@ (8017d50 <sys_timeouts_sleeptime+0x6c>)
 8017d34:	f006 fb40 	bl	801e3b8 <iprintf>
    return ret;
 8017d38:	683b      	ldr	r3, [r7, #0]
  }
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3708      	adds	r7, #8
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	200126bc 	.word	0x200126bc
 8017d48:	08024c58 	.word	0x08024c58
 8017d4c:	08024d2c 	.word	0x08024d2c
 8017d50:	08024ccc 	.word	0x08024ccc

08017d54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d58:	f005 fa3a 	bl	801d1d0 <rand>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017d6a:	b29a      	uxth	r2, r3
 8017d6c:	4b01      	ldr	r3, [pc, #4]	@ (8017d74 <udp_init+0x20>)
 8017d6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d70:	bf00      	nop
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	20000040 	.word	0x20000040

08017d78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017d82:	4b17      	ldr	r3, [pc, #92]	@ (8017de0 <udp_new_port+0x68>)
 8017d84:	881b      	ldrh	r3, [r3, #0]
 8017d86:	1c5a      	adds	r2, r3, #1
 8017d88:	b291      	uxth	r1, r2
 8017d8a:	4a15      	ldr	r2, [pc, #84]	@ (8017de0 <udp_new_port+0x68>)
 8017d8c:	8011      	strh	r1, [r2, #0]
 8017d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d103      	bne.n	8017d9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017d96:	4b12      	ldr	r3, [pc, #72]	@ (8017de0 <udp_new_port+0x68>)
 8017d98:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017d9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d9e:	4b11      	ldr	r3, [pc, #68]	@ (8017de4 <udp_new_port+0x6c>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	603b      	str	r3, [r7, #0]
 8017da4:	e011      	b.n	8017dca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	8a5a      	ldrh	r2, [r3, #18]
 8017daa:	4b0d      	ldr	r3, [pc, #52]	@ (8017de0 <udp_new_port+0x68>)
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d108      	bne.n	8017dc4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017db2:	88fb      	ldrh	r3, [r7, #6]
 8017db4:	3301      	adds	r3, #1
 8017db6:	80fb      	strh	r3, [r7, #6]
 8017db8:	88fb      	ldrh	r3, [r7, #6]
 8017dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017dbe:	d3e0      	bcc.n	8017d82 <udp_new_port+0xa>
        return 0;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e007      	b.n	8017dd4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	603b      	str	r3, [r7, #0]
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1ea      	bne.n	8017da6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017dd0:	4b03      	ldr	r3, [pc, #12]	@ (8017de0 <udp_new_port+0x68>)
 8017dd2:	881b      	ldrh	r3, [r3, #0]
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	370c      	adds	r7, #12
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr
 8017de0:	20000040 	.word	0x20000040
 8017de4:	200126c8 	.word	0x200126c8

08017de8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b084      	sub	sp, #16
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4613      	mov	r3, r2
 8017df4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d105      	bne.n	8017e08 <udp_input_local_match+0x20>
 8017dfc:	4b27      	ldr	r3, [pc, #156]	@ (8017e9c <udp_input_local_match+0xb4>)
 8017dfe:	2287      	movs	r2, #135	@ 0x87
 8017e00:	4927      	ldr	r1, [pc, #156]	@ (8017ea0 <udp_input_local_match+0xb8>)
 8017e02:	4828      	ldr	r0, [pc, #160]	@ (8017ea4 <udp_input_local_match+0xbc>)
 8017e04:	f006 fad8 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d105      	bne.n	8017e1a <udp_input_local_match+0x32>
 8017e0e:	4b23      	ldr	r3, [pc, #140]	@ (8017e9c <udp_input_local_match+0xb4>)
 8017e10:	2288      	movs	r2, #136	@ 0x88
 8017e12:	4925      	ldr	r1, [pc, #148]	@ (8017ea8 <udp_input_local_match+0xc0>)
 8017e14:	4823      	ldr	r0, [pc, #140]	@ (8017ea4 <udp_input_local_match+0xbc>)
 8017e16:	f006 facf 	bl	801e3b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	7a1b      	ldrb	r3, [r3, #8]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00b      	beq.n	8017e3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	7a1a      	ldrb	r2, [r3, #8]
 8017e26:	4b21      	ldr	r3, [pc, #132]	@ (8017eac <udp_input_local_match+0xc4>)
 8017e28:	685b      	ldr	r3, [r3, #4]
 8017e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017e2e:	3301      	adds	r3, #1
 8017e30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d001      	beq.n	8017e3a <udp_input_local_match+0x52>
    return 0;
 8017e36:	2300      	movs	r3, #0
 8017e38:	e02b      	b.n	8017e92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e3a:	79fb      	ldrb	r3, [r7, #7]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d018      	beq.n	8017e72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d013      	beq.n	8017e6e <udp_input_local_match+0x86>
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d00f      	beq.n	8017e6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e4e:	4b17      	ldr	r3, [pc, #92]	@ (8017eac <udp_input_local_match+0xc4>)
 8017e50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e56:	d00a      	beq.n	8017e6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681a      	ldr	r2, [r3, #0]
 8017e5c:	4b13      	ldr	r3, [pc, #76]	@ (8017eac <udp_input_local_match+0xc4>)
 8017e5e:	695b      	ldr	r3, [r3, #20]
 8017e60:	405a      	eors	r2, r3
 8017e62:	68bb      	ldr	r3, [r7, #8]
 8017e64:	3308      	adds	r3, #8
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d110      	bne.n	8017e90 <udp_input_local_match+0xa8>
          return 1;
 8017e6e:	2301      	movs	r3, #1
 8017e70:	e00f      	b.n	8017e92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d009      	beq.n	8017e8c <udp_input_local_match+0xa4>
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d005      	beq.n	8017e8c <udp_input_local_match+0xa4>
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681a      	ldr	r2, [r3, #0]
 8017e84:	4b09      	ldr	r3, [pc, #36]	@ (8017eac <udp_input_local_match+0xc4>)
 8017e86:	695b      	ldr	r3, [r3, #20]
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	d101      	bne.n	8017e90 <udp_input_local_match+0xa8>
        return 1;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	e000      	b.n	8017e92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e90:	2300      	movs	r3, #0
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}
 8017e9a:	bf00      	nop
 8017e9c:	08024d40 	.word	0x08024d40
 8017ea0:	08024d70 	.word	0x08024d70
 8017ea4:	08024d94 	.word	0x08024d94
 8017ea8:	08024dbc 	.word	0x08024dbc
 8017eac:	2000edac 	.word	0x2000edac

08017eb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017eb0:	b590      	push	{r4, r7, lr}
 8017eb2:	b08d      	sub	sp, #52	@ 0x34
 8017eb4:	af02      	add	r7, sp, #8
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d105      	bne.n	8017ed0 <udp_input+0x20>
 8017ec4:	4b7c      	ldr	r3, [pc, #496]	@ (80180b8 <udp_input+0x208>)
 8017ec6:	22cf      	movs	r2, #207	@ 0xcf
 8017ec8:	497c      	ldr	r1, [pc, #496]	@ (80180bc <udp_input+0x20c>)
 8017eca:	487d      	ldr	r0, [pc, #500]	@ (80180c0 <udp_input+0x210>)
 8017ecc:	f006 fa74 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017ed0:	683b      	ldr	r3, [r7, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d105      	bne.n	8017ee2 <udp_input+0x32>
 8017ed6:	4b78      	ldr	r3, [pc, #480]	@ (80180b8 <udp_input+0x208>)
 8017ed8:	22d0      	movs	r2, #208	@ 0xd0
 8017eda:	497a      	ldr	r1, [pc, #488]	@ (80180c4 <udp_input+0x214>)
 8017edc:	4878      	ldr	r0, [pc, #480]	@ (80180c0 <udp_input+0x210>)
 8017ede:	f006 fa6b 	bl	801e3b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	895b      	ldrh	r3, [r3, #10]
 8017ee6:	2b07      	cmp	r3, #7
 8017ee8:	d803      	bhi.n	8017ef2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f7f9 f97c 	bl	80111e8 <pbuf_free>
    goto end;
 8017ef0:	e0de      	b.n	80180b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	685b      	ldr	r3, [r3, #4]
 8017ef6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017ef8:	4b73      	ldr	r3, [pc, #460]	@ (80180c8 <udp_input+0x218>)
 8017efa:	695b      	ldr	r3, [r3, #20]
 8017efc:	4a72      	ldr	r2, [pc, #456]	@ (80180c8 <udp_input+0x218>)
 8017efe:	6812      	ldr	r2, [r2, #0]
 8017f00:	4611      	mov	r1, r2
 8017f02:	4618      	mov	r0, r3
 8017f04:	f003 ff14 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	881b      	ldrh	r3, [r3, #0]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f7 fa7c 	bl	800f410 <lwip_htons>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	885b      	ldrh	r3, [r3, #2]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7f7 fa74 	bl	800f410 <lwip_htons>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017f30:	2300      	movs	r3, #0
 8017f32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f34:	2300      	movs	r3, #0
 8017f36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f38:	4b64      	ldr	r3, [pc, #400]	@ (80180cc <udp_input+0x21c>)
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f3e:	e054      	b.n	8017fea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f42:	8a5b      	ldrh	r3, [r3, #18]
 8017f44:	89fa      	ldrh	r2, [r7, #14]
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d14a      	bne.n	8017fe0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f4a:	7cfb      	ldrb	r3, [r7, #19]
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	6839      	ldr	r1, [r7, #0]
 8017f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f52:	f7ff ff49 	bl	8017de8 <udp_input_local_match>
 8017f56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d041      	beq.n	8017fe0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f5e:	7c1b      	ldrb	r3, [r3, #16]
 8017f60:	f003 0304 	and.w	r3, r3, #4
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d11d      	bne.n	8017fa4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f68:	69fb      	ldr	r3, [r7, #28]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d102      	bne.n	8017f74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f70:	61fb      	str	r3, [r7, #28]
 8017f72:	e017      	b.n	8017fa4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f74:	7cfb      	ldrb	r3, [r7, #19]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d014      	beq.n	8017fa4 <udp_input+0xf4>
 8017f7a:	4b53      	ldr	r3, [pc, #332]	@ (80180c8 <udp_input+0x218>)
 8017f7c:	695b      	ldr	r3, [r3, #20]
 8017f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f82:	d10f      	bne.n	8017fa4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	681a      	ldr	r2, [r3, #0]
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	3304      	adds	r3, #4
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d008      	beq.n	8017fa4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f94:	681a      	ldr	r2, [r3, #0]
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	3304      	adds	r3, #4
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d101      	bne.n	8017fa4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa6:	8a9b      	ldrh	r3, [r3, #20]
 8017fa8:	8a3a      	ldrh	r2, [r7, #16]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d118      	bne.n	8017fe0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d005      	beq.n	8017fc2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb8:	685a      	ldr	r2, [r3, #4]
 8017fba:	4b43      	ldr	r3, [pc, #268]	@ (80180c8 <udp_input+0x218>)
 8017fbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d10e      	bne.n	8017fe0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017fc2:	6a3b      	ldr	r3, [r7, #32]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d014      	beq.n	8017ff2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fca:	68da      	ldr	r2, [r3, #12]
 8017fcc:	6a3b      	ldr	r3, [r7, #32]
 8017fce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80180cc <udp_input+0x21c>)
 8017fd2:	681a      	ldr	r2, [r3, #0]
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80180cc <udp_input+0x21c>)
 8017fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017fde:	e008      	b.n	8017ff2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d1a7      	bne.n	8017f40 <udp_input+0x90>
 8017ff0:	e000      	b.n	8017ff4 <udp_input+0x144>
        break;
 8017ff2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d101      	bne.n	8017ffe <udp_input+0x14e>
    pcb = uncon_pcb;
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018000:	2b00      	cmp	r3, #0
 8018002:	d002      	beq.n	801800a <udp_input+0x15a>
    for_us = 1;
 8018004:	2301      	movs	r3, #1
 8018006:	76fb      	strb	r3, [r7, #27]
 8018008:	e00a      	b.n	8018020 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801800a:	683b      	ldr	r3, [r7, #0]
 801800c:	3304      	adds	r3, #4
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	4b2d      	ldr	r3, [pc, #180]	@ (80180c8 <udp_input+0x218>)
 8018012:	695b      	ldr	r3, [r3, #20]
 8018014:	429a      	cmp	r2, r3
 8018016:	bf0c      	ite	eq
 8018018:	2301      	moveq	r3, #1
 801801a:	2300      	movne	r3, #0
 801801c:	b2db      	uxtb	r3, r3
 801801e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018020:	7efb      	ldrb	r3, [r7, #27]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d041      	beq.n	80180aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018026:	2108      	movs	r1, #8
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f7f9 f857 	bl	80110dc <pbuf_remove_header>
 801802e:	4603      	mov	r3, r0
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00a      	beq.n	801804a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018034:	4b20      	ldr	r3, [pc, #128]	@ (80180b8 <udp_input+0x208>)
 8018036:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801803a:	4925      	ldr	r1, [pc, #148]	@ (80180d0 <udp_input+0x220>)
 801803c:	4820      	ldr	r0, [pc, #128]	@ (80180c0 <udp_input+0x210>)
 801803e:	f006 f9bb 	bl	801e3b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f7f9 f8d0 	bl	80111e8 <pbuf_free>
      goto end;
 8018048:	e032      	b.n	80180b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801804c:	2b00      	cmp	r3, #0
 801804e:	d012      	beq.n	8018076 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018052:	699b      	ldr	r3, [r3, #24]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d00a      	beq.n	801806e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805a:	699c      	ldr	r4, [r3, #24]
 801805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805e:	69d8      	ldr	r0, [r3, #28]
 8018060:	8a3b      	ldrh	r3, [r7, #16]
 8018062:	9300      	str	r3, [sp, #0]
 8018064:	4b1b      	ldr	r3, [pc, #108]	@ (80180d4 <udp_input+0x224>)
 8018066:	687a      	ldr	r2, [r7, #4]
 8018068:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801806a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801806c:	e021      	b.n	80180b2 <udp_input+0x202>
        pbuf_free(p);
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7f9 f8ba 	bl	80111e8 <pbuf_free>
        goto end;
 8018074:	e01c      	b.n	80180b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018076:	7cfb      	ldrb	r3, [r7, #19]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d112      	bne.n	80180a2 <udp_input+0x1f2>
 801807c:	4b12      	ldr	r3, [pc, #72]	@ (80180c8 <udp_input+0x218>)
 801807e:	695b      	ldr	r3, [r3, #20]
 8018080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018084:	2be0      	cmp	r3, #224	@ 0xe0
 8018086:	d00c      	beq.n	80180a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018088:	4b0f      	ldr	r3, [pc, #60]	@ (80180c8 <udp_input+0x218>)
 801808a:	899b      	ldrh	r3, [r3, #12]
 801808c:	3308      	adds	r3, #8
 801808e:	b29b      	uxth	r3, r3
 8018090:	b21b      	sxth	r3, r3
 8018092:	4619      	mov	r1, r3
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f7f9 f894 	bl	80111c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801809a:	2103      	movs	r1, #3
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f003 fb09 	bl	801b6b4 <icmp_dest_unreach>
      pbuf_free(p);
 80180a2:	6878      	ldr	r0, [r7, #4]
 80180a4:	f7f9 f8a0 	bl	80111e8 <pbuf_free>
  return;
 80180a8:	e003      	b.n	80180b2 <udp_input+0x202>
    pbuf_free(p);
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f7f9 f89c 	bl	80111e8 <pbuf_free>
  return;
 80180b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80180b2:	372c      	adds	r7, #44	@ 0x2c
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd90      	pop	{r4, r7, pc}
 80180b8:	08024d40 	.word	0x08024d40
 80180bc:	08024de4 	.word	0x08024de4
 80180c0:	08024d94 	.word	0x08024d94
 80180c4:	08024dfc 	.word	0x08024dfc
 80180c8:	2000edac 	.word	0x2000edac
 80180cc:	200126c8 	.word	0x200126c8
 80180d0:	08024e18 	.word	0x08024e18
 80180d4:	2000edbc 	.word	0x2000edbc

080180d8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d109      	bne.n	80180fc <udp_send+0x24>
 80180e8:	4b11      	ldr	r3, [pc, #68]	@ (8018130 <udp_send+0x58>)
 80180ea:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80180ee:	4911      	ldr	r1, [pc, #68]	@ (8018134 <udp_send+0x5c>)
 80180f0:	4811      	ldr	r0, [pc, #68]	@ (8018138 <udp_send+0x60>)
 80180f2:	f006 f961 	bl	801e3b8 <iprintf>
 80180f6:	f06f 030f 	mvn.w	r3, #15
 80180fa:	e015      	b.n	8018128 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d109      	bne.n	8018116 <udp_send+0x3e>
 8018102:	4b0b      	ldr	r3, [pc, #44]	@ (8018130 <udp_send+0x58>)
 8018104:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8018108:	490c      	ldr	r1, [pc, #48]	@ (801813c <udp_send+0x64>)
 801810a:	480b      	ldr	r0, [pc, #44]	@ (8018138 <udp_send+0x60>)
 801810c:	f006 f954 	bl	801e3b8 <iprintf>
 8018110:	f06f 030f 	mvn.w	r3, #15
 8018114:	e008      	b.n	8018128 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	1d1a      	adds	r2, r3, #4
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	8a9b      	ldrh	r3, [r3, #20]
 801811e:	6839      	ldr	r1, [r7, #0]
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f000 f80d 	bl	8018140 <udp_sendto>
 8018126:	4603      	mov	r3, r0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	08024d40 	.word	0x08024d40
 8018134:	08024e34 	.word	0x08024e34
 8018138:	08024d94 	.word	0x08024d94
 801813c:	08024e4c 	.word	0x08024e4c

08018140 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af02      	add	r7, sp, #8
 8018146:	60f8      	str	r0, [r7, #12]
 8018148:	60b9      	str	r1, [r7, #8]
 801814a:	607a      	str	r2, [r7, #4]
 801814c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d109      	bne.n	8018168 <udp_sendto+0x28>
 8018154:	4b23      	ldr	r3, [pc, #140]	@ (80181e4 <udp_sendto+0xa4>)
 8018156:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801815a:	4923      	ldr	r1, [pc, #140]	@ (80181e8 <udp_sendto+0xa8>)
 801815c:	4823      	ldr	r0, [pc, #140]	@ (80181ec <udp_sendto+0xac>)
 801815e:	f006 f92b 	bl	801e3b8 <iprintf>
 8018162:	f06f 030f 	mvn.w	r3, #15
 8018166:	e038      	b.n	80181da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d109      	bne.n	8018182 <udp_sendto+0x42>
 801816e:	4b1d      	ldr	r3, [pc, #116]	@ (80181e4 <udp_sendto+0xa4>)
 8018170:	f240 2219 	movw	r2, #537	@ 0x219
 8018174:	491e      	ldr	r1, [pc, #120]	@ (80181f0 <udp_sendto+0xb0>)
 8018176:	481d      	ldr	r0, [pc, #116]	@ (80181ec <udp_sendto+0xac>)
 8018178:	f006 f91e 	bl	801e3b8 <iprintf>
 801817c:	f06f 030f 	mvn.w	r3, #15
 8018180:	e02b      	b.n	80181da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d109      	bne.n	801819c <udp_sendto+0x5c>
 8018188:	4b16      	ldr	r3, [pc, #88]	@ (80181e4 <udp_sendto+0xa4>)
 801818a:	f240 221a 	movw	r2, #538	@ 0x21a
 801818e:	4919      	ldr	r1, [pc, #100]	@ (80181f4 <udp_sendto+0xb4>)
 8018190:	4816      	ldr	r0, [pc, #88]	@ (80181ec <udp_sendto+0xac>)
 8018192:	f006 f911 	bl	801e3b8 <iprintf>
 8018196:	f06f 030f 	mvn.w	r3, #15
 801819a:	e01e      	b.n	80181da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	7a1b      	ldrb	r3, [r3, #8]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d006      	beq.n	80181b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	7a1b      	ldrb	r3, [r3, #8]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7f8 fc8f 	bl	8010acc <netif_get_by_index>
 80181ae:	6178      	str	r0, [r7, #20]
 80181b0:	e003      	b.n	80181ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80181b2:	6878      	ldr	r0, [r7, #4]
 80181b4:	f003 fb08 	bl	801b7c8 <ip4_route>
 80181b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d102      	bne.n	80181c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80181c0:	f06f 0303 	mvn.w	r3, #3
 80181c4:	e009      	b.n	80181da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80181c6:	887a      	ldrh	r2, [r7, #2]
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	9300      	str	r3, [sp, #0]
 80181cc:	4613      	mov	r3, r2
 80181ce:	687a      	ldr	r2, [r7, #4]
 80181d0:	68b9      	ldr	r1, [r7, #8]
 80181d2:	68f8      	ldr	r0, [r7, #12]
 80181d4:	f000 f810 	bl	80181f8 <udp_sendto_if>
 80181d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80181da:	4618      	mov	r0, r3
 80181dc:	3718      	adds	r7, #24
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
 80181e2:	bf00      	nop
 80181e4:	08024d40 	.word	0x08024d40
 80181e8:	08024e64 	.word	0x08024e64
 80181ec:	08024d94 	.word	0x08024d94
 80181f0:	08024e7c 	.word	0x08024e7c
 80181f4:	08024e98 	.word	0x08024e98

080181f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b088      	sub	sp, #32
 80181fc:	af02      	add	r7, sp, #8
 80181fe:	60f8      	str	r0, [r7, #12]
 8018200:	60b9      	str	r1, [r7, #8]
 8018202:	607a      	str	r2, [r7, #4]
 8018204:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d109      	bne.n	8018220 <udp_sendto_if+0x28>
 801820c:	4b2e      	ldr	r3, [pc, #184]	@ (80182c8 <udp_sendto_if+0xd0>)
 801820e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018212:	492e      	ldr	r1, [pc, #184]	@ (80182cc <udp_sendto_if+0xd4>)
 8018214:	482e      	ldr	r0, [pc, #184]	@ (80182d0 <udp_sendto_if+0xd8>)
 8018216:	f006 f8cf 	bl	801e3b8 <iprintf>
 801821a:	f06f 030f 	mvn.w	r3, #15
 801821e:	e04f      	b.n	80182c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d109      	bne.n	801823a <udp_sendto_if+0x42>
 8018226:	4b28      	ldr	r3, [pc, #160]	@ (80182c8 <udp_sendto_if+0xd0>)
 8018228:	f240 2281 	movw	r2, #641	@ 0x281
 801822c:	4929      	ldr	r1, [pc, #164]	@ (80182d4 <udp_sendto_if+0xdc>)
 801822e:	4828      	ldr	r0, [pc, #160]	@ (80182d0 <udp_sendto_if+0xd8>)
 8018230:	f006 f8c2 	bl	801e3b8 <iprintf>
 8018234:	f06f 030f 	mvn.w	r3, #15
 8018238:	e042      	b.n	80182c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d109      	bne.n	8018254 <udp_sendto_if+0x5c>
 8018240:	4b21      	ldr	r3, [pc, #132]	@ (80182c8 <udp_sendto_if+0xd0>)
 8018242:	f240 2282 	movw	r2, #642	@ 0x282
 8018246:	4924      	ldr	r1, [pc, #144]	@ (80182d8 <udp_sendto_if+0xe0>)
 8018248:	4821      	ldr	r0, [pc, #132]	@ (80182d0 <udp_sendto_if+0xd8>)
 801824a:	f006 f8b5 	bl	801e3b8 <iprintf>
 801824e:	f06f 030f 	mvn.w	r3, #15
 8018252:	e035      	b.n	80182c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018254:	6a3b      	ldr	r3, [r7, #32]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d109      	bne.n	801826e <udp_sendto_if+0x76>
 801825a:	4b1b      	ldr	r3, [pc, #108]	@ (80182c8 <udp_sendto_if+0xd0>)
 801825c:	f240 2283 	movw	r2, #643	@ 0x283
 8018260:	491e      	ldr	r1, [pc, #120]	@ (80182dc <udp_sendto_if+0xe4>)
 8018262:	481b      	ldr	r0, [pc, #108]	@ (80182d0 <udp_sendto_if+0xd8>)
 8018264:	f006 f8a8 	bl	801e3b8 <iprintf>
 8018268:	f06f 030f 	mvn.w	r3, #15
 801826c:	e028      	b.n	80182c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d009      	beq.n	8018288 <udp_sendto_if+0x90>
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d005      	beq.n	8018288 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018284:	2be0      	cmp	r3, #224	@ 0xe0
 8018286:	d103      	bne.n	8018290 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018288:	6a3b      	ldr	r3, [r7, #32]
 801828a:	3304      	adds	r3, #4
 801828c:	617b      	str	r3, [r7, #20]
 801828e:	e00b      	b.n	80182a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	681a      	ldr	r2, [r3, #0]
 8018294:	6a3b      	ldr	r3, [r7, #32]
 8018296:	3304      	adds	r3, #4
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	429a      	cmp	r2, r3
 801829c:	d002      	beq.n	80182a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801829e:	f06f 0303 	mvn.w	r3, #3
 80182a2:	e00d      	b.n	80182c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80182a8:	887a      	ldrh	r2, [r7, #2]
 80182aa:	697b      	ldr	r3, [r7, #20]
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	6a3b      	ldr	r3, [r7, #32]
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	4613      	mov	r3, r2
 80182b4:	687a      	ldr	r2, [r7, #4]
 80182b6:	68b9      	ldr	r1, [r7, #8]
 80182b8:	68f8      	ldr	r0, [r7, #12]
 80182ba:	f000 f811 	bl	80182e0 <udp_sendto_if_src>
 80182be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80182c0:	4618      	mov	r0, r3
 80182c2:	3718      	adds	r7, #24
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	08024d40 	.word	0x08024d40
 80182cc:	08024eb4 	.word	0x08024eb4
 80182d0:	08024d94 	.word	0x08024d94
 80182d4:	08024ed0 	.word	0x08024ed0
 80182d8:	08024eec 	.word	0x08024eec
 80182dc:	08024f0c 	.word	0x08024f0c

080182e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b08c      	sub	sp, #48	@ 0x30
 80182e4:	af04      	add	r7, sp, #16
 80182e6:	60f8      	str	r0, [r7, #12]
 80182e8:	60b9      	str	r1, [r7, #8]
 80182ea:	607a      	str	r2, [r7, #4]
 80182ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d109      	bne.n	8018308 <udp_sendto_if_src+0x28>
 80182f4:	4b65      	ldr	r3, [pc, #404]	@ (801848c <udp_sendto_if_src+0x1ac>)
 80182f6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80182fa:	4965      	ldr	r1, [pc, #404]	@ (8018490 <udp_sendto_if_src+0x1b0>)
 80182fc:	4865      	ldr	r0, [pc, #404]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 80182fe:	f006 f85b 	bl	801e3b8 <iprintf>
 8018302:	f06f 030f 	mvn.w	r3, #15
 8018306:	e0bc      	b.n	8018482 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d109      	bne.n	8018322 <udp_sendto_if_src+0x42>
 801830e:	4b5f      	ldr	r3, [pc, #380]	@ (801848c <udp_sendto_if_src+0x1ac>)
 8018310:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018314:	4960      	ldr	r1, [pc, #384]	@ (8018498 <udp_sendto_if_src+0x1b8>)
 8018316:	485f      	ldr	r0, [pc, #380]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 8018318:	f006 f84e 	bl	801e3b8 <iprintf>
 801831c:	f06f 030f 	mvn.w	r3, #15
 8018320:	e0af      	b.n	8018482 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d109      	bne.n	801833c <udp_sendto_if_src+0x5c>
 8018328:	4b58      	ldr	r3, [pc, #352]	@ (801848c <udp_sendto_if_src+0x1ac>)
 801832a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801832e:	495b      	ldr	r1, [pc, #364]	@ (801849c <udp_sendto_if_src+0x1bc>)
 8018330:	4858      	ldr	r0, [pc, #352]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 8018332:	f006 f841 	bl	801e3b8 <iprintf>
 8018336:	f06f 030f 	mvn.w	r3, #15
 801833a:	e0a2      	b.n	8018482 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801833e:	2b00      	cmp	r3, #0
 8018340:	d109      	bne.n	8018356 <udp_sendto_if_src+0x76>
 8018342:	4b52      	ldr	r3, [pc, #328]	@ (801848c <udp_sendto_if_src+0x1ac>)
 8018344:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8018348:	4955      	ldr	r1, [pc, #340]	@ (80184a0 <udp_sendto_if_src+0x1c0>)
 801834a:	4852      	ldr	r0, [pc, #328]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 801834c:	f006 f834 	bl	801e3b8 <iprintf>
 8018350:	f06f 030f 	mvn.w	r3, #15
 8018354:	e095      	b.n	8018482 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018358:	2b00      	cmp	r3, #0
 801835a:	d109      	bne.n	8018370 <udp_sendto_if_src+0x90>
 801835c:	4b4b      	ldr	r3, [pc, #300]	@ (801848c <udp_sendto_if_src+0x1ac>)
 801835e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8018362:	4950      	ldr	r1, [pc, #320]	@ (80184a4 <udp_sendto_if_src+0x1c4>)
 8018364:	484b      	ldr	r0, [pc, #300]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 8018366:	f006 f827 	bl	801e3b8 <iprintf>
 801836a:	f06f 030f 	mvn.w	r3, #15
 801836e:	e088      	b.n	8018482 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	8a5b      	ldrh	r3, [r3, #18]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d10f      	bne.n	8018398 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018378:	68f9      	ldr	r1, [r7, #12]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	8a5b      	ldrh	r3, [r3, #18]
 801837e:	461a      	mov	r2, r3
 8018380:	68f8      	ldr	r0, [r7, #12]
 8018382:	f000 f893 	bl	80184ac <udp_bind>
 8018386:	4603      	mov	r3, r0
 8018388:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801838a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d002      	beq.n	8018398 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018392:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018396:	e074      	b.n	8018482 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	891b      	ldrh	r3, [r3, #8]
 801839c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80183a0:	4293      	cmp	r3, r2
 80183a2:	d902      	bls.n	80183aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80183a4:	f04f 33ff 	mov.w	r3, #4294967295
 80183a8:	e06b      	b.n	8018482 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80183aa:	2108      	movs	r1, #8
 80183ac:	68b8      	ldr	r0, [r7, #8]
 80183ae:	f7f8 fe85 	bl	80110bc <pbuf_add_header>
 80183b2:	4603      	mov	r3, r0
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d015      	beq.n	80183e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80183b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80183bc:	2108      	movs	r1, #8
 80183be:	2022      	movs	r0, #34	@ 0x22
 80183c0:	f7f8 fc2e 	bl	8010c20 <pbuf_alloc>
 80183c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d102      	bne.n	80183d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80183cc:	f04f 33ff 	mov.w	r3, #4294967295
 80183d0:	e057      	b.n	8018482 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	891b      	ldrh	r3, [r3, #8]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d006      	beq.n	80183e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80183da:	68b9      	ldr	r1, [r7, #8]
 80183dc:	69f8      	ldr	r0, [r7, #28]
 80183de:	f7f9 f827 	bl	8011430 <pbuf_chain>
 80183e2:	e001      	b.n	80183e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	895b      	ldrh	r3, [r3, #10]
 80183ec:	2b07      	cmp	r3, #7
 80183ee:	d806      	bhi.n	80183fe <udp_sendto_if_src+0x11e>
 80183f0:	4b26      	ldr	r3, [pc, #152]	@ (801848c <udp_sendto_if_src+0x1ac>)
 80183f2:	f240 320d 	movw	r2, #781	@ 0x30d
 80183f6:	492c      	ldr	r1, [pc, #176]	@ (80184a8 <udp_sendto_if_src+0x1c8>)
 80183f8:	4826      	ldr	r0, [pc, #152]	@ (8018494 <udp_sendto_if_src+0x1b4>)
 80183fa:	f005 ffdd 	bl	801e3b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80183fe:	69fb      	ldr	r3, [r7, #28]
 8018400:	685b      	ldr	r3, [r3, #4]
 8018402:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	8a5b      	ldrh	r3, [r3, #18]
 8018408:	4618      	mov	r0, r3
 801840a:	f7f7 f801 	bl	800f410 <lwip_htons>
 801840e:	4603      	mov	r3, r0
 8018410:	461a      	mov	r2, r3
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018416:	887b      	ldrh	r3, [r7, #2]
 8018418:	4618      	mov	r0, r3
 801841a:	f7f6 fff9 	bl	800f410 <lwip_htons>
 801841e:	4603      	mov	r3, r0
 8018420:	461a      	mov	r2, r3
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018426:	697b      	ldr	r3, [r7, #20]
 8018428:	2200      	movs	r2, #0
 801842a:	719a      	strb	r2, [r3, #6]
 801842c:	2200      	movs	r2, #0
 801842e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	891b      	ldrh	r3, [r3, #8]
 8018434:	4618      	mov	r0, r3
 8018436:	f7f6 ffeb 	bl	800f410 <lwip_htons>
 801843a:	4603      	mov	r3, r0
 801843c:	461a      	mov	r2, r3
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018442:	2311      	movs	r3, #17
 8018444:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	7adb      	ldrb	r3, [r3, #11]
 801844a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	7a9b      	ldrb	r3, [r3, #10]
 8018450:	7cb9      	ldrb	r1, [r7, #18]
 8018452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018454:	9202      	str	r2, [sp, #8]
 8018456:	7cfa      	ldrb	r2, [r7, #19]
 8018458:	9201      	str	r2, [sp, #4]
 801845a:	9300      	str	r3, [sp, #0]
 801845c:	460b      	mov	r3, r1
 801845e:	687a      	ldr	r2, [r7, #4]
 8018460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018462:	69f8      	ldr	r0, [r7, #28]
 8018464:	f003 fbb6 	bl	801bbd4 <ip4_output_if_src>
 8018468:	4603      	mov	r3, r0
 801846a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801846c:	69fa      	ldr	r2, [r7, #28]
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	429a      	cmp	r2, r3
 8018472:	d004      	beq.n	801847e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018474:	69f8      	ldr	r0, [r7, #28]
 8018476:	f7f8 feb7 	bl	80111e8 <pbuf_free>
    q = NULL;
 801847a:	2300      	movs	r3, #0
 801847c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801847e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018482:	4618      	mov	r0, r3
 8018484:	3720      	adds	r7, #32
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	08024d40 	.word	0x08024d40
 8018490:	08024f2c 	.word	0x08024f2c
 8018494:	08024d94 	.word	0x08024d94
 8018498:	08024f4c 	.word	0x08024f4c
 801849c:	08024f6c 	.word	0x08024f6c
 80184a0:	08024f90 	.word	0x08024f90
 80184a4:	08024fb4 	.word	0x08024fb4
 80184a8:	08024fd8 	.word	0x08024fd8

080184ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b086      	sub	sp, #24
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	60f8      	str	r0, [r7, #12]
 80184b4:	60b9      	str	r1, [r7, #8]
 80184b6:	4613      	mov	r3, r2
 80184b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d101      	bne.n	80184c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80184c0:	4b39      	ldr	r3, [pc, #228]	@ (80185a8 <udp_bind+0xfc>)
 80184c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d109      	bne.n	80184de <udp_bind+0x32>
 80184ca:	4b38      	ldr	r3, [pc, #224]	@ (80185ac <udp_bind+0x100>)
 80184cc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80184d0:	4937      	ldr	r1, [pc, #220]	@ (80185b0 <udp_bind+0x104>)
 80184d2:	4838      	ldr	r0, [pc, #224]	@ (80185b4 <udp_bind+0x108>)
 80184d4:	f005 ff70 	bl	801e3b8 <iprintf>
 80184d8:	f06f 030f 	mvn.w	r3, #15
 80184dc:	e060      	b.n	80185a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80184de:	2300      	movs	r3, #0
 80184e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80184e2:	4b35      	ldr	r3, [pc, #212]	@ (80185b8 <udp_bind+0x10c>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	617b      	str	r3, [r7, #20]
 80184e8:	e009      	b.n	80184fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80184ea:	68fa      	ldr	r2, [r7, #12]
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	429a      	cmp	r2, r3
 80184f0:	d102      	bne.n	80184f8 <udp_bind+0x4c>
      rebind = 1;
 80184f2:	2301      	movs	r3, #1
 80184f4:	74fb      	strb	r3, [r7, #19]
      break;
 80184f6:	e005      	b.n	8018504 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	68db      	ldr	r3, [r3, #12]
 80184fc:	617b      	str	r3, [r7, #20]
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d1f2      	bne.n	80184ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018504:	88fb      	ldrh	r3, [r7, #6]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d109      	bne.n	801851e <udp_bind+0x72>
    port = udp_new_port();
 801850a:	f7ff fc35 	bl	8017d78 <udp_new_port>
 801850e:	4603      	mov	r3, r0
 8018510:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018512:	88fb      	ldrh	r3, [r7, #6]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d12c      	bne.n	8018572 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018518:	f06f 0307 	mvn.w	r3, #7
 801851c:	e040      	b.n	80185a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801851e:	4b26      	ldr	r3, [pc, #152]	@ (80185b8 <udp_bind+0x10c>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	617b      	str	r3, [r7, #20]
 8018524:	e022      	b.n	801856c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018526:	68fa      	ldr	r2, [r7, #12]
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	429a      	cmp	r2, r3
 801852c:	d01b      	beq.n	8018566 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	8a5b      	ldrh	r3, [r3, #18]
 8018532:	88fa      	ldrh	r2, [r7, #6]
 8018534:	429a      	cmp	r2, r3
 8018536:	d116      	bne.n	8018566 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	681a      	ldr	r2, [r3, #0]
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018540:	429a      	cmp	r2, r3
 8018542:	d00d      	beq.n	8018560 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018544:	68bb      	ldr	r3, [r7, #8]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d00a      	beq.n	8018560 <udp_bind+0xb4>
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d006      	beq.n	8018560 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018552:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018554:	2b00      	cmp	r3, #0
 8018556:	d003      	beq.n	8018560 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018558:	697b      	ldr	r3, [r7, #20]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d102      	bne.n	8018566 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018560:	f06f 0307 	mvn.w	r3, #7
 8018564:	e01c      	b.n	80185a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018566:	697b      	ldr	r3, [r7, #20]
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	617b      	str	r3, [r7, #20]
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1d9      	bne.n	8018526 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d002      	beq.n	801857e <udp_bind+0xd2>
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	e000      	b.n	8018580 <udp_bind+0xd4>
 801857e:	2300      	movs	r3, #0
 8018580:	68fa      	ldr	r2, [r7, #12]
 8018582:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	88fa      	ldrh	r2, [r7, #6]
 8018588:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801858a:	7cfb      	ldrb	r3, [r7, #19]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d106      	bne.n	801859e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018590:	4b09      	ldr	r3, [pc, #36]	@ (80185b8 <udp_bind+0x10c>)
 8018592:	681a      	ldr	r2, [r3, #0]
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018598:	4a07      	ldr	r2, [pc, #28]	@ (80185b8 <udp_bind+0x10c>)
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801859e:	2300      	movs	r3, #0
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	3718      	adds	r7, #24
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}
 80185a8:	08025e1c 	.word	0x08025e1c
 80185ac:	08024d40 	.word	0x08024d40
 80185b0:	08025008 	.word	0x08025008
 80185b4:	08024d94 	.word	0x08024d94
 80185b8:	200126c8 	.word	0x200126c8

080185bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	4613      	mov	r3, r2
 80185c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d109      	bne.n	80185e4 <udp_connect+0x28>
 80185d0:	4b2c      	ldr	r3, [pc, #176]	@ (8018684 <udp_connect+0xc8>)
 80185d2:	f240 4235 	movw	r2, #1077	@ 0x435
 80185d6:	492c      	ldr	r1, [pc, #176]	@ (8018688 <udp_connect+0xcc>)
 80185d8:	482c      	ldr	r0, [pc, #176]	@ (801868c <udp_connect+0xd0>)
 80185da:	f005 feed 	bl	801e3b8 <iprintf>
 80185de:	f06f 030f 	mvn.w	r3, #15
 80185e2:	e04b      	b.n	801867c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d109      	bne.n	80185fe <udp_connect+0x42>
 80185ea:	4b26      	ldr	r3, [pc, #152]	@ (8018684 <udp_connect+0xc8>)
 80185ec:	f240 4236 	movw	r2, #1078	@ 0x436
 80185f0:	4927      	ldr	r1, [pc, #156]	@ (8018690 <udp_connect+0xd4>)
 80185f2:	4826      	ldr	r0, [pc, #152]	@ (801868c <udp_connect+0xd0>)
 80185f4:	f005 fee0 	bl	801e3b8 <iprintf>
 80185f8:	f06f 030f 	mvn.w	r3, #15
 80185fc:	e03e      	b.n	801867c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	8a5b      	ldrh	r3, [r3, #18]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d10f      	bne.n	8018626 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018606:	68f9      	ldr	r1, [r7, #12]
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	8a5b      	ldrh	r3, [r3, #18]
 801860c:	461a      	mov	r2, r3
 801860e:	68f8      	ldr	r0, [r7, #12]
 8018610:	f7ff ff4c 	bl	80184ac <udp_bind>
 8018614:	4603      	mov	r3, r0
 8018616:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018618:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d002      	beq.n	8018626 <udp_connect+0x6a>
      return err;
 8018620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018624:	e02a      	b.n	801867c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d002      	beq.n	8018632 <udp_connect+0x76>
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	e000      	b.n	8018634 <udp_connect+0x78>
 8018632:	2300      	movs	r3, #0
 8018634:	68fa      	ldr	r2, [r7, #12]
 8018636:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	88fa      	ldrh	r2, [r7, #6]
 801863c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	7c1b      	ldrb	r3, [r3, #16]
 8018642:	f043 0304 	orr.w	r3, r3, #4
 8018646:	b2da      	uxtb	r2, r3
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801864c:	4b11      	ldr	r3, [pc, #68]	@ (8018694 <udp_connect+0xd8>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	617b      	str	r3, [r7, #20]
 8018652:	e008      	b.n	8018666 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018654:	68fa      	ldr	r2, [r7, #12]
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	429a      	cmp	r2, r3
 801865a:	d101      	bne.n	8018660 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801865c:	2300      	movs	r3, #0
 801865e:	e00d      	b.n	801867c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	617b      	str	r3, [r7, #20]
 8018666:	697b      	ldr	r3, [r7, #20]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d1f3      	bne.n	8018654 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801866c:	4b09      	ldr	r3, [pc, #36]	@ (8018694 <udp_connect+0xd8>)
 801866e:	681a      	ldr	r2, [r3, #0]
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018674:	4a07      	ldr	r2, [pc, #28]	@ (8018694 <udp_connect+0xd8>)
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801867a:	2300      	movs	r3, #0
}
 801867c:	4618      	mov	r0, r3
 801867e:	3718      	adds	r7, #24
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}
 8018684:	08024d40 	.word	0x08024d40
 8018688:	08025020 	.word	0x08025020
 801868c:	08024d94 	.word	0x08024d94
 8018690:	0802503c 	.word	0x0802503c
 8018694:	200126c8 	.word	0x200126c8

08018698 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d107      	bne.n	80186b6 <udp_disconnect+0x1e>
 80186a6:	4b0d      	ldr	r3, [pc, #52]	@ (80186dc <udp_disconnect+0x44>)
 80186a8:	f240 426a 	movw	r2, #1130	@ 0x46a
 80186ac:	490c      	ldr	r1, [pc, #48]	@ (80186e0 <udp_disconnect+0x48>)
 80186ae:	480d      	ldr	r0, [pc, #52]	@ (80186e4 <udp_disconnect+0x4c>)
 80186b0:	f005 fe82 	bl	801e3b8 <iprintf>
 80186b4:	e00f      	b.n	80186d6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	2200      	movs	r2, #0
 80186ba:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2200      	movs	r2, #0
 80186c0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2200      	movs	r2, #0
 80186c6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	7c1b      	ldrb	r3, [r3, #16]
 80186cc:	f023 0304 	bic.w	r3, r3, #4
 80186d0:	b2da      	uxtb	r2, r3
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	741a      	strb	r2, [r3, #16]
}
 80186d6:	3708      	adds	r7, #8
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	08024d40 	.word	0x08024d40
 80186e0:	08025058 	.word	0x08025058
 80186e4:	08024d94 	.word	0x08024d94

080186e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	60f8      	str	r0, [r7, #12]
 80186f0:	60b9      	str	r1, [r7, #8]
 80186f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d107      	bne.n	801870a <udp_recv+0x22>
 80186fa:	4b08      	ldr	r3, [pc, #32]	@ (801871c <udp_recv+0x34>)
 80186fc:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018700:	4907      	ldr	r1, [pc, #28]	@ (8018720 <udp_recv+0x38>)
 8018702:	4808      	ldr	r0, [pc, #32]	@ (8018724 <udp_recv+0x3c>)
 8018704:	f005 fe58 	bl	801e3b8 <iprintf>
 8018708:	e005      	b.n	8018716 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	68ba      	ldr	r2, [r7, #8]
 801870e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	687a      	ldr	r2, [r7, #4]
 8018714:	61da      	str	r2, [r3, #28]
}
 8018716:	3710      	adds	r7, #16
 8018718:	46bd      	mov	sp, r7
 801871a:	bd80      	pop	{r7, pc}
 801871c:	08024d40 	.word	0x08024d40
 8018720:	08025074 	.word	0x08025074
 8018724:	08024d94 	.word	0x08024d94

08018728 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b084      	sub	sp, #16
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d107      	bne.n	8018746 <udp_remove+0x1e>
 8018736:	4b19      	ldr	r3, [pc, #100]	@ (801879c <udp_remove+0x74>)
 8018738:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801873c:	4918      	ldr	r1, [pc, #96]	@ (80187a0 <udp_remove+0x78>)
 801873e:	4819      	ldr	r0, [pc, #100]	@ (80187a4 <udp_remove+0x7c>)
 8018740:	f005 fe3a 	bl	801e3b8 <iprintf>
 8018744:	e026      	b.n	8018794 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018746:	4b18      	ldr	r3, [pc, #96]	@ (80187a8 <udp_remove+0x80>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	687a      	ldr	r2, [r7, #4]
 801874c:	429a      	cmp	r2, r3
 801874e:	d105      	bne.n	801875c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018750:	4b15      	ldr	r3, [pc, #84]	@ (80187a8 <udp_remove+0x80>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	68db      	ldr	r3, [r3, #12]
 8018756:	4a14      	ldr	r2, [pc, #80]	@ (80187a8 <udp_remove+0x80>)
 8018758:	6013      	str	r3, [r2, #0]
 801875a:	e017      	b.n	801878c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801875c:	4b12      	ldr	r3, [pc, #72]	@ (80187a8 <udp_remove+0x80>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	60fb      	str	r3, [r7, #12]
 8018762:	e010      	b.n	8018786 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d009      	beq.n	8018780 <udp_remove+0x58>
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	68db      	ldr	r3, [r3, #12]
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	429a      	cmp	r2, r3
 8018774:	d104      	bne.n	8018780 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	68da      	ldr	r2, [r3, #12]
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	60da      	str	r2, [r3, #12]
        break;
 801877e:	e005      	b.n	801878c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	68db      	ldr	r3, [r3, #12]
 8018784:	60fb      	str	r3, [r7, #12]
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d1eb      	bne.n	8018764 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801878c:	6879      	ldr	r1, [r7, #4]
 801878e:	2000      	movs	r0, #0
 8018790:	f7f7 fe7a 	bl	8010488 <memp_free>
}
 8018794:	3710      	adds	r7, #16
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	08024d40 	.word	0x08024d40
 80187a0:	0802508c 	.word	0x0802508c
 80187a4:	08024d94 	.word	0x08024d94
 80187a8:	200126c8 	.word	0x200126c8

080187ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b082      	sub	sp, #8
 80187b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80187b2:	2000      	movs	r0, #0
 80187b4:	f7f7 fdf2 	bl	801039c <memp_malloc>
 80187b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d007      	beq.n	80187d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80187c0:	2220      	movs	r2, #32
 80187c2:	2100      	movs	r1, #0
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f005 fe96 	bl	801e4f6 <memset>
    pcb->ttl = UDP_TTL;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	22ff      	movs	r2, #255	@ 0xff
 80187ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80187d0:	687b      	ldr	r3, [r7, #4]
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	3708      	adds	r7, #8
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}

080187da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80187da:	b580      	push	{r7, lr}
 80187dc:	b084      	sub	sp, #16
 80187de:	af00      	add	r7, sp, #0
 80187e0:	4603      	mov	r3, r0
 80187e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80187e4:	f7ff ffe2 	bl	80187ac <udp_new>
 80187e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80187ea:	68fb      	ldr	r3, [r7, #12]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3710      	adds	r7, #16
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80187f4:	b480      	push	{r7}
 80187f6:	b085      	sub	sp, #20
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d01e      	beq.n	8018842 <udp_netif_ip_addr_changed+0x4e>
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d01a      	beq.n	8018842 <udp_netif_ip_addr_changed+0x4e>
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d017      	beq.n	8018842 <udp_netif_ip_addr_changed+0x4e>
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d013      	beq.n	8018842 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801881a:	4b0d      	ldr	r3, [pc, #52]	@ (8018850 <udp_netif_ip_addr_changed+0x5c>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	60fb      	str	r3, [r7, #12]
 8018820:	e00c      	b.n	801883c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	681a      	ldr	r2, [r3, #0]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	429a      	cmp	r2, r3
 801882c:	d103      	bne.n	8018836 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	68db      	ldr	r3, [r3, #12]
 801883a:	60fb      	str	r3, [r7, #12]
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d1ef      	bne.n	8018822 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018842:	bf00      	nop
 8018844:	3714      	adds	r7, #20
 8018846:	46bd      	mov	sp, r7
 8018848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884c:	4770      	bx	lr
 801884e:	bf00      	nop
 8018850:	200126c8 	.word	0x200126c8

08018854 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018858:	4b20      	ldr	r3, [pc, #128]	@ (80188dc <dhcp_inc_pcb_refcount+0x88>)
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d133      	bne.n	80188c8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018860:	4b1f      	ldr	r3, [pc, #124]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d005      	beq.n	8018874 <dhcp_inc_pcb_refcount+0x20>
 8018868:	4b1e      	ldr	r3, [pc, #120]	@ (80188e4 <dhcp_inc_pcb_refcount+0x90>)
 801886a:	22e5      	movs	r2, #229	@ 0xe5
 801886c:	491e      	ldr	r1, [pc, #120]	@ (80188e8 <dhcp_inc_pcb_refcount+0x94>)
 801886e:	481f      	ldr	r0, [pc, #124]	@ (80188ec <dhcp_inc_pcb_refcount+0x98>)
 8018870:	f005 fda2 	bl	801e3b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018874:	f7ff ff9a 	bl	80187ac <udp_new>
 8018878:	4603      	mov	r3, r0
 801887a:	4a19      	ldr	r2, [pc, #100]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 801887c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801887e:	4b18      	ldr	r3, [pc, #96]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d102      	bne.n	801888c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018886:	f04f 33ff 	mov.w	r3, #4294967295
 801888a:	e024      	b.n	80188d6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801888c:	4b14      	ldr	r3, [pc, #80]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	7a5a      	ldrb	r2, [r3, #9]
 8018892:	4b13      	ldr	r3, [pc, #76]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f042 0220 	orr.w	r2, r2, #32
 801889a:	b2d2      	uxtb	r2, r2
 801889c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801889e:	4b10      	ldr	r3, [pc, #64]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	2244      	movs	r2, #68	@ 0x44
 80188a4:	4912      	ldr	r1, [pc, #72]	@ (80188f0 <dhcp_inc_pcb_refcount+0x9c>)
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7ff fe00 	bl	80184ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80188ac:	4b0c      	ldr	r3, [pc, #48]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2243      	movs	r2, #67	@ 0x43
 80188b2:	490f      	ldr	r1, [pc, #60]	@ (80188f0 <dhcp_inc_pcb_refcount+0x9c>)
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7ff fe81 	bl	80185bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80188ba:	4b09      	ldr	r3, [pc, #36]	@ (80188e0 <dhcp_inc_pcb_refcount+0x8c>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	2200      	movs	r2, #0
 80188c0:	490c      	ldr	r1, [pc, #48]	@ (80188f4 <dhcp_inc_pcb_refcount+0xa0>)
 80188c2:	4618      	mov	r0, r3
 80188c4:	f7ff ff10 	bl	80186e8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80188c8:	4b04      	ldr	r3, [pc, #16]	@ (80188dc <dhcp_inc_pcb_refcount+0x88>)
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	3301      	adds	r3, #1
 80188ce:	b2da      	uxtb	r2, r3
 80188d0:	4b02      	ldr	r3, [pc, #8]	@ (80188dc <dhcp_inc_pcb_refcount+0x88>)
 80188d2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80188d4:	2300      	movs	r3, #0
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	bd80      	pop	{r7, pc}
 80188da:	bf00      	nop
 80188dc:	20012704 	.word	0x20012704
 80188e0:	20012700 	.word	0x20012700
 80188e4:	080250a4 	.word	0x080250a4
 80188e8:	080250dc 	.word	0x080250dc
 80188ec:	08025104 	.word	0x08025104
 80188f0:	08025e1c 	.word	0x08025e1c
 80188f4:	0801a21d 	.word	0x0801a21d

080188f8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80188fc:	4b0e      	ldr	r3, [pc, #56]	@ (8018938 <dhcp_dec_pcb_refcount+0x40>)
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d105      	bne.n	8018910 <dhcp_dec_pcb_refcount+0x18>
 8018904:	4b0d      	ldr	r3, [pc, #52]	@ (801893c <dhcp_dec_pcb_refcount+0x44>)
 8018906:	22ff      	movs	r2, #255	@ 0xff
 8018908:	490d      	ldr	r1, [pc, #52]	@ (8018940 <dhcp_dec_pcb_refcount+0x48>)
 801890a:	480e      	ldr	r0, [pc, #56]	@ (8018944 <dhcp_dec_pcb_refcount+0x4c>)
 801890c:	f005 fd54 	bl	801e3b8 <iprintf>
  dhcp_pcb_refcount--;
 8018910:	4b09      	ldr	r3, [pc, #36]	@ (8018938 <dhcp_dec_pcb_refcount+0x40>)
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	3b01      	subs	r3, #1
 8018916:	b2da      	uxtb	r2, r3
 8018918:	4b07      	ldr	r3, [pc, #28]	@ (8018938 <dhcp_dec_pcb_refcount+0x40>)
 801891a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801891c:	4b06      	ldr	r3, [pc, #24]	@ (8018938 <dhcp_dec_pcb_refcount+0x40>)
 801891e:	781b      	ldrb	r3, [r3, #0]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d107      	bne.n	8018934 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018924:	4b08      	ldr	r3, [pc, #32]	@ (8018948 <dhcp_dec_pcb_refcount+0x50>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	4618      	mov	r0, r3
 801892a:	f7ff fefd 	bl	8018728 <udp_remove>
    dhcp_pcb = NULL;
 801892e:	4b06      	ldr	r3, [pc, #24]	@ (8018948 <dhcp_dec_pcb_refcount+0x50>)
 8018930:	2200      	movs	r2, #0
 8018932:	601a      	str	r2, [r3, #0]
  }
}
 8018934:	bf00      	nop
 8018936:	bd80      	pop	{r7, pc}
 8018938:	20012704 	.word	0x20012704
 801893c:	080250a4 	.word	0x080250a4
 8018940:	0802512c 	.word	0x0802512c
 8018944:	08025104 	.word	0x08025104
 8018948:	20012700 	.word	0x20012700

0801894c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b084      	sub	sp, #16
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018958:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801895a:	210c      	movs	r1, #12
 801895c:	68f8      	ldr	r0, [r7, #12]
 801895e:	f001 f86f 	bl	8019a40 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018962:	4b06      	ldr	r3, [pc, #24]	@ (801897c <dhcp_handle_nak+0x30>)
 8018964:	4a05      	ldr	r2, [pc, #20]	@ (801897c <dhcp_handle_nak+0x30>)
 8018966:	4905      	ldr	r1, [pc, #20]	@ (801897c <dhcp_handle_nak+0x30>)
 8018968:	6878      	ldr	r0, [r7, #4]
 801896a:	f7f7 ff2f 	bl	80107cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f000 fc68 	bl	8019244 <dhcp_discover>
}
 8018974:	bf00      	nop
 8018976:	3710      	adds	r7, #16
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	08025e1c 	.word	0x08025e1c

08018980 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801898c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801898e:	2108      	movs	r1, #8
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f001 f855 	bl	8019a40 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	331c      	adds	r3, #28
 801899a:	2200      	movs	r2, #0
 801899c:	4619      	mov	r1, r3
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f002 fb86 	bl	801b0b0 <etharp_query>
 80189a4:	4603      	mov	r3, r0
 80189a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	799b      	ldrb	r3, [r3, #6]
 80189ac:	2bff      	cmp	r3, #255	@ 0xff
 80189ae:	d005      	beq.n	80189bc <dhcp_check+0x3c>
    dhcp->tries++;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	799b      	ldrb	r3, [r3, #6]
 80189b4:	3301      	adds	r3, #1
 80189b6:	b2da      	uxtb	r2, r3
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80189bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80189c0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80189c2:	893b      	ldrh	r3, [r7, #8]
 80189c4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80189c8:	4a06      	ldr	r2, [pc, #24]	@ (80189e4 <dhcp_check+0x64>)
 80189ca:	fb82 1203 	smull	r1, r2, r2, r3
 80189ce:	1152      	asrs	r2, r2, #5
 80189d0:	17db      	asrs	r3, r3, #31
 80189d2:	1ad3      	subs	r3, r2, r3
 80189d4:	b29a      	uxth	r2, r3
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80189da:	bf00      	nop
 80189dc:	3710      	adds	r7, #16
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	10624dd3 	.word	0x10624dd3

080189e8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b084      	sub	sp, #16
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
 80189f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80189f8:	4b0c      	ldr	r3, [pc, #48]	@ (8018a2c <dhcp_handle_offer+0x44>)
 80189fa:	789b      	ldrb	r3, [r3, #2]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d011      	beq.n	8018a24 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2200      	movs	r2, #0
 8018a04:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8018a06:	4b0a      	ldr	r3, [pc, #40]	@ (8018a30 <dhcp_handle_offer+0x48>)
 8018a08:	689b      	ldr	r3, [r3, #8]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7f6 fd15 	bl	800f43a <lwip_htonl>
 8018a10:	4602      	mov	r2, r0
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	691a      	ldr	r2, [r3, #16]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f000 f808 	bl	8018a34 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018a24:	bf00      	nop
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	200126f4 	.word	0x200126f4
 8018a30:	200126cc 	.word	0x200126cc

08018a34 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018a34:	b5b0      	push	{r4, r5, r7, lr}
 8018a36:	b08a      	sub	sp, #40	@ 0x28
 8018a38:	af02      	add	r7, sp, #8
 8018a3a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d109      	bne.n	8018a56 <dhcp_select+0x22>
 8018a42:	4b71      	ldr	r3, [pc, #452]	@ (8018c08 <dhcp_select+0x1d4>)
 8018a44:	f240 1277 	movw	r2, #375	@ 0x177
 8018a48:	4970      	ldr	r1, [pc, #448]	@ (8018c0c <dhcp_select+0x1d8>)
 8018a4a:	4871      	ldr	r0, [pc, #452]	@ (8018c10 <dhcp_select+0x1dc>)
 8018a4c:	f005 fcb4 	bl	801e3b8 <iprintf>
 8018a50:	f06f 030f 	mvn.w	r3, #15
 8018a54:	e0d3      	b.n	8018bfe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a5a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018a5c:	69bb      	ldr	r3, [r7, #24]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d109      	bne.n	8018a76 <dhcp_select+0x42>
 8018a62:	4b69      	ldr	r3, [pc, #420]	@ (8018c08 <dhcp_select+0x1d4>)
 8018a64:	f240 1279 	movw	r2, #377	@ 0x179
 8018a68:	496a      	ldr	r1, [pc, #424]	@ (8018c14 <dhcp_select+0x1e0>)
 8018a6a:	4869      	ldr	r0, [pc, #420]	@ (8018c10 <dhcp_select+0x1dc>)
 8018a6c:	f005 fca4 	bl	801e3b8 <iprintf>
 8018a70:	f06f 0305 	mvn.w	r3, #5
 8018a74:	e0c3      	b.n	8018bfe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018a76:	2101      	movs	r1, #1
 8018a78:	69b8      	ldr	r0, [r7, #24]
 8018a7a:	f000 ffe1 	bl	8019a40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018a7e:	f107 030c 	add.w	r3, r7, #12
 8018a82:	2203      	movs	r2, #3
 8018a84:	69b9      	ldr	r1, [r7, #24]
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f001 fc96 	bl	801a3b8 <dhcp_create_msg>
 8018a8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	f000 8085 	beq.w	8018ba0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018a9c:	89b8      	ldrh	r0, [r7, #12]
 8018a9e:	693b      	ldr	r3, [r7, #16]
 8018aa0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018aa4:	2302      	movs	r3, #2
 8018aa6:	2239      	movs	r2, #57	@ 0x39
 8018aa8:	f000 ffe4 	bl	8019a74 <dhcp_option>
 8018aac:	4603      	mov	r3, r0
 8018aae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018ab0:	89b8      	ldrh	r0, [r7, #12]
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018abc:	461a      	mov	r2, r3
 8018abe:	f001 f833 	bl	8019b28 <dhcp_option_short>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018ac6:	89b8      	ldrh	r0, [r7, #12]
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ace:	2304      	movs	r3, #4
 8018ad0:	2232      	movs	r2, #50	@ 0x32
 8018ad2:	f000 ffcf 	bl	8019a74 <dhcp_option>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018ada:	89bc      	ldrh	r4, [r7, #12]
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018ae2:	69bb      	ldr	r3, [r7, #24]
 8018ae4:	69db      	ldr	r3, [r3, #28]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f6 fca7 	bl	800f43a <lwip_htonl>
 8018aec:	4603      	mov	r3, r0
 8018aee:	461a      	mov	r2, r3
 8018af0:	4629      	mov	r1, r5
 8018af2:	4620      	mov	r0, r4
 8018af4:	f001 f84a 	bl	8019b8c <dhcp_option_long>
 8018af8:	4603      	mov	r3, r0
 8018afa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018afc:	89b8      	ldrh	r0, [r7, #12]
 8018afe:	693b      	ldr	r3, [r7, #16]
 8018b00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b04:	2304      	movs	r3, #4
 8018b06:	2236      	movs	r2, #54	@ 0x36
 8018b08:	f000 ffb4 	bl	8019a74 <dhcp_option>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018b10:	89bc      	ldrh	r4, [r7, #12]
 8018b12:	693b      	ldr	r3, [r7, #16]
 8018b14:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018b18:	69bb      	ldr	r3, [r7, #24]
 8018b1a:	699b      	ldr	r3, [r3, #24]
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	f7f6 fc8c 	bl	800f43a <lwip_htonl>
 8018b22:	4603      	mov	r3, r0
 8018b24:	461a      	mov	r2, r3
 8018b26:	4629      	mov	r1, r5
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f001 f82f 	bl	8019b8c <dhcp_option_long>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018b32:	89b8      	ldrh	r0, [r7, #12]
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b3a:	2304      	movs	r3, #4
 8018b3c:	2237      	movs	r2, #55	@ 0x37
 8018b3e:	f000 ff99 	bl	8019a74 <dhcp_option>
 8018b42:	4603      	mov	r3, r0
 8018b44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b46:	2300      	movs	r3, #0
 8018b48:	77bb      	strb	r3, [r7, #30]
 8018b4a:	e00e      	b.n	8018b6a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018b4c:	89b8      	ldrh	r0, [r7, #12]
 8018b4e:	693b      	ldr	r3, [r7, #16]
 8018b50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b54:	7fbb      	ldrb	r3, [r7, #30]
 8018b56:	4a30      	ldr	r2, [pc, #192]	@ (8018c18 <dhcp_select+0x1e4>)
 8018b58:	5cd3      	ldrb	r3, [r2, r3]
 8018b5a:	461a      	mov	r2, r3
 8018b5c:	f000 ffbe 	bl	8019adc <dhcp_option_byte>
 8018b60:	4603      	mov	r3, r0
 8018b62:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b64:	7fbb      	ldrb	r3, [r7, #30]
 8018b66:	3301      	adds	r3, #1
 8018b68:	77bb      	strb	r3, [r7, #30]
 8018b6a:	7fbb      	ldrb	r3, [r7, #30]
 8018b6c:	2b03      	cmp	r3, #3
 8018b6e:	d9ed      	bls.n	8018b4c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018b70:	89b8      	ldrh	r0, [r7, #12]
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	33f0      	adds	r3, #240	@ 0xf0
 8018b76:	697a      	ldr	r2, [r7, #20]
 8018b78:	4619      	mov	r1, r3
 8018b7a:	f001 fcf3 	bl	801a564 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018b7e:	4b27      	ldr	r3, [pc, #156]	@ (8018c1c <dhcp_select+0x1e8>)
 8018b80:	6818      	ldr	r0, [r3, #0]
 8018b82:	4b27      	ldr	r3, [pc, #156]	@ (8018c20 <dhcp_select+0x1ec>)
 8018b84:	9301      	str	r3, [sp, #4]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	9300      	str	r3, [sp, #0]
 8018b8a:	2343      	movs	r3, #67	@ 0x43
 8018b8c:	4a25      	ldr	r2, [pc, #148]	@ (8018c24 <dhcp_select+0x1f0>)
 8018b8e:	6979      	ldr	r1, [r7, #20]
 8018b90:	f7ff fba6 	bl	80182e0 <udp_sendto_if_src>
 8018b94:	4603      	mov	r3, r0
 8018b96:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018b98:	6978      	ldr	r0, [r7, #20]
 8018b9a:	f7f8 fb25 	bl	80111e8 <pbuf_free>
 8018b9e:	e001      	b.n	8018ba4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018ba0:	23ff      	movs	r3, #255	@ 0xff
 8018ba2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018ba4:	69bb      	ldr	r3, [r7, #24]
 8018ba6:	799b      	ldrb	r3, [r3, #6]
 8018ba8:	2bff      	cmp	r3, #255	@ 0xff
 8018baa:	d005      	beq.n	8018bb8 <dhcp_select+0x184>
    dhcp->tries++;
 8018bac:	69bb      	ldr	r3, [r7, #24]
 8018bae:	799b      	ldrb	r3, [r3, #6]
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	b2da      	uxtb	r2, r3
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018bb8:	69bb      	ldr	r3, [r7, #24]
 8018bba:	799b      	ldrb	r3, [r3, #6]
 8018bbc:	2b05      	cmp	r3, #5
 8018bbe:	d80d      	bhi.n	8018bdc <dhcp_select+0x1a8>
 8018bc0:	69bb      	ldr	r3, [r7, #24]
 8018bc2:	799b      	ldrb	r3, [r3, #6]
 8018bc4:	461a      	mov	r2, r3
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	4093      	lsls	r3, r2
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	461a      	mov	r2, r3
 8018bce:	0152      	lsls	r2, r2, #5
 8018bd0:	1ad2      	subs	r2, r2, r3
 8018bd2:	0092      	lsls	r2, r2, #2
 8018bd4:	4413      	add	r3, r2
 8018bd6:	00db      	lsls	r3, r3, #3
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	e001      	b.n	8018be0 <dhcp_select+0x1ac>
 8018bdc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018be0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018be2:	89fb      	ldrh	r3, [r7, #14]
 8018be4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018be8:	4a0f      	ldr	r2, [pc, #60]	@ (8018c28 <dhcp_select+0x1f4>)
 8018bea:	fb82 1203 	smull	r1, r2, r2, r3
 8018bee:	1152      	asrs	r2, r2, #5
 8018bf0:	17db      	asrs	r3, r3, #31
 8018bf2:	1ad3      	subs	r3, r2, r3
 8018bf4:	b29a      	uxth	r2, r3
 8018bf6:	69bb      	ldr	r3, [r7, #24]
 8018bf8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3720      	adds	r7, #32
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bdb0      	pop	{r4, r5, r7, pc}
 8018c06:	bf00      	nop
 8018c08:	080250a4 	.word	0x080250a4
 8018c0c:	08025150 	.word	0x08025150
 8018c10:	08025104 	.word	0x08025104
 8018c14:	0802516c 	.word	0x0802516c
 8018c18:	20000044 	.word	0x20000044
 8018c1c:	20012700 	.word	0x20012700
 8018c20:	08025e1c 	.word	0x08025e1c
 8018c24:	08025e20 	.word	0x08025e20
 8018c28:	10624dd3 	.word	0x10624dd3

08018c2c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018c32:	4b27      	ldr	r3, [pc, #156]	@ (8018cd0 <dhcp_coarse_tmr+0xa4>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	607b      	str	r3, [r7, #4]
 8018c38:	e042      	b.n	8018cc0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c3e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d039      	beq.n	8018cba <dhcp_coarse_tmr+0x8e>
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	795b      	ldrb	r3, [r3, #5]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d035      	beq.n	8018cba <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	8a9b      	ldrh	r3, [r3, #20]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d012      	beq.n	8018c7c <dhcp_coarse_tmr+0x50>
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	8a5b      	ldrh	r3, [r3, #18]
 8018c5a:	3301      	adds	r3, #1
 8018c5c:	b29a      	uxth	r2, r3
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	825a      	strh	r2, [r3, #18]
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	8a5a      	ldrh	r2, [r3, #18]
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	8a9b      	ldrh	r3, [r3, #20]
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d106      	bne.n	8018c7c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 fe4c 	bl	801990c <dhcp_release_and_stop>
        dhcp_start(netif);
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f000 f989 	bl	8018f8c <dhcp_start>
 8018c7a:	e01e      	b.n	8018cba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	8a1b      	ldrh	r3, [r3, #16]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d00b      	beq.n	8018c9c <dhcp_coarse_tmr+0x70>
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	8a1b      	ldrh	r3, [r3, #16]
 8018c88:	1e5a      	subs	r2, r3, #1
 8018c8a:	b291      	uxth	r1, r2
 8018c8c:	683a      	ldr	r2, [r7, #0]
 8018c8e:	8211      	strh	r1, [r2, #16]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d103      	bne.n	8018c9c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f000 f8c6 	bl	8018e26 <dhcp_t2_timeout>
 8018c9a:	e00e      	b.n	8018cba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	89db      	ldrh	r3, [r3, #14]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d00a      	beq.n	8018cba <dhcp_coarse_tmr+0x8e>
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	89db      	ldrh	r3, [r3, #14]
 8018ca8:	1e5a      	subs	r2, r3, #1
 8018caa:	b291      	uxth	r1, r2
 8018cac:	683a      	ldr	r2, [r7, #0]
 8018cae:	81d1      	strh	r1, [r2, #14]
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	d102      	bne.n	8018cba <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8018cb4:	6878      	ldr	r0, [r7, #4]
 8018cb6:	f000 f888 	bl	8018dca <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	607b      	str	r3, [r7, #4]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d1b9      	bne.n	8018c3a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8018cc6:	bf00      	nop
 8018cc8:	bf00      	nop
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}
 8018cd0:	20012660 	.word	0x20012660

08018cd4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b082      	sub	sp, #8
 8018cd8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8018cda:	4b16      	ldr	r3, [pc, #88]	@ (8018d34 <dhcp_fine_tmr+0x60>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	607b      	str	r3, [r7, #4]
 8018ce0:	e020      	b.n	8018d24 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ce6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d017      	beq.n	8018d1e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	891b      	ldrh	r3, [r3, #8]
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d906      	bls.n	8018d04 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	891b      	ldrh	r3, [r3, #8]
 8018cfa:	3b01      	subs	r3, #1
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	811a      	strh	r2, [r3, #8]
 8018d02:	e00c      	b.n	8018d1e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	891b      	ldrh	r3, [r3, #8]
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d108      	bne.n	8018d1e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	891b      	ldrh	r3, [r3, #8]
 8018d10:	3b01      	subs	r3, #1
 8018d12:	b29a      	uxth	r2, r3
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f000 f80d 	bl	8018d38 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	607b      	str	r3, [r7, #4]
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d1db      	bne.n	8018ce2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8018d2a:	bf00      	nop
 8018d2c:	bf00      	nop
 8018d2e:	3708      	adds	r7, #8
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	20012660 	.word	0x20012660

08018d38 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b084      	sub	sp, #16
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d44:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	795b      	ldrb	r3, [r3, #5]
 8018d4a:	2b0c      	cmp	r3, #12
 8018d4c:	d003      	beq.n	8018d56 <dhcp_timeout+0x1e>
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	795b      	ldrb	r3, [r3, #5]
 8018d52:	2b06      	cmp	r3, #6
 8018d54:	d103      	bne.n	8018d5e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f000 fa74 	bl	8019244 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018d5c:	e031      	b.n	8018dc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	795b      	ldrb	r3, [r3, #5]
 8018d62:	2b01      	cmp	r3, #1
 8018d64:	d10e      	bne.n	8018d84 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	799b      	ldrb	r3, [r3, #6]
 8018d6a:	2b05      	cmp	r3, #5
 8018d6c:	d803      	bhi.n	8018d76 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f7ff fe60 	bl	8018a34 <dhcp_select>
}
 8018d74:	e025      	b.n	8018dc2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8018d76:	6878      	ldr	r0, [r7, #4]
 8018d78:	f000 fdc8 	bl	801990c <dhcp_release_and_stop>
      dhcp_start(netif);
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f000 f905 	bl	8018f8c <dhcp_start>
}
 8018d82:	e01e      	b.n	8018dc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	795b      	ldrb	r3, [r3, #5]
 8018d88:	2b08      	cmp	r3, #8
 8018d8a:	d10b      	bne.n	8018da4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	799b      	ldrb	r3, [r3, #6]
 8018d90:	2b01      	cmp	r3, #1
 8018d92:	d803      	bhi.n	8018d9c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8018d94:	6878      	ldr	r0, [r7, #4]
 8018d96:	f7ff fdf3 	bl	8018980 <dhcp_check>
}
 8018d9a:	e012      	b.n	8018dc2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f000 faf3 	bl	8019388 <dhcp_bind>
}
 8018da2:	e00e      	b.n	8018dc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	795b      	ldrb	r3, [r3, #5]
 8018da8:	2b03      	cmp	r3, #3
 8018daa:	d10a      	bne.n	8018dc2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	799b      	ldrb	r3, [r3, #6]
 8018db0:	2b01      	cmp	r3, #1
 8018db2:	d803      	bhi.n	8018dbc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8018db4:	6878      	ldr	r0, [r7, #4]
 8018db6:	f000 fcf5 	bl	80197a4 <dhcp_reboot>
}
 8018dba:	e002      	b.n	8018dc2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f000 fa41 	bl	8019244 <dhcp_discover>
}
 8018dc2:	bf00      	nop
 8018dc4:	3710      	adds	r7, #16
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}

08018dca <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8018dca:	b580      	push	{r7, lr}
 8018dcc:	b084      	sub	sp, #16
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	795b      	ldrb	r3, [r3, #5]
 8018ddc:	2b01      	cmp	r3, #1
 8018dde:	d007      	beq.n	8018df0 <dhcp_t1_timeout+0x26>
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	795b      	ldrb	r3, [r3, #5]
 8018de4:	2b0a      	cmp	r3, #10
 8018de6:	d003      	beq.n	8018df0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018dec:	2b05      	cmp	r3, #5
 8018dee:	d116      	bne.n	8018e1e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f000 fba3 	bl	801953c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	899b      	ldrh	r3, [r3, #12]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	8a5b      	ldrh	r3, [r3, #18]
 8018e00:	1ad3      	subs	r3, r2, r3
 8018e02:	2b01      	cmp	r3, #1
 8018e04:	dd0b      	ble.n	8018e1e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	899b      	ldrh	r3, [r3, #12]
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	8a5b      	ldrh	r3, [r3, #18]
 8018e10:	1ad3      	subs	r3, r2, r3
 8018e12:	0fda      	lsrs	r2, r3, #31
 8018e14:	4413      	add	r3, r2
 8018e16:	105b      	asrs	r3, r3, #1
 8018e18:	b29a      	uxth	r2, r3
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018e1e:	bf00      	nop
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}

08018e26 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8018e26:	b580      	push	{r7, lr}
 8018e28:	b084      	sub	sp, #16
 8018e2a:	af00      	add	r7, sp, #0
 8018e2c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e32:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	795b      	ldrb	r3, [r3, #5]
 8018e38:	2b01      	cmp	r3, #1
 8018e3a:	d00b      	beq.n	8018e54 <dhcp_t2_timeout+0x2e>
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	795b      	ldrb	r3, [r3, #5]
 8018e40:	2b0a      	cmp	r3, #10
 8018e42:	d007      	beq.n	8018e54 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e48:	2b05      	cmp	r3, #5
 8018e4a:	d003      	beq.n	8018e54 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	795b      	ldrb	r3, [r3, #5]
 8018e50:	2b04      	cmp	r3, #4
 8018e52:	d116      	bne.n	8018e82 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018e54:	6878      	ldr	r0, [r7, #4]
 8018e56:	f000 fc0b 	bl	8019670 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	8a9b      	ldrh	r3, [r3, #20]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	8a5b      	ldrh	r3, [r3, #18]
 8018e64:	1ad3      	subs	r3, r2, r3
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	dd0b      	ble.n	8018e82 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	8a9b      	ldrh	r3, [r3, #20]
 8018e6e:	461a      	mov	r2, r3
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	8a5b      	ldrh	r3, [r3, #18]
 8018e74:	1ad3      	subs	r3, r2, r3
 8018e76:	0fda      	lsrs	r2, r3, #31
 8018e78:	4413      	add	r3, r2
 8018e7a:	105b      	asrs	r3, r3, #1
 8018e7c:	b29a      	uxth	r2, r3
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018e82:	bf00      	nop
 8018e84:	3710      	adds	r7, #16
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}
	...

08018e8c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e9a:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018ea8:	4b36      	ldr	r3, [pc, #216]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018eaa:	78db      	ldrb	r3, [r3, #3]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d003      	beq.n	8018eb8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018eb0:	4b35      	ldr	r3, [pc, #212]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018eb2:	68da      	ldr	r2, [r3, #12]
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018eb8:	4b32      	ldr	r3, [pc, #200]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018eba:	791b      	ldrb	r3, [r3, #4]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d004      	beq.n	8018eca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018ec0:	4b31      	ldr	r3, [pc, #196]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018ec2:	691a      	ldr	r2, [r3, #16]
 8018ec4:	693b      	ldr	r3, [r7, #16]
 8018ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018ec8:	e004      	b.n	8018ed4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018eca:	693b      	ldr	r3, [r7, #16]
 8018ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ece:	085a      	lsrs	r2, r3, #1
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018ed6:	795b      	ldrb	r3, [r3, #5]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d004      	beq.n	8018ee6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018edc:	4b2a      	ldr	r3, [pc, #168]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018ede:	695a      	ldr	r2, [r3, #20]
 8018ee0:	693b      	ldr	r3, [r7, #16]
 8018ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8018ee4:	e007      	b.n	8018ef6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018ee6:	693b      	ldr	r3, [r7, #16]
 8018ee8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018eea:	4613      	mov	r3, r2
 8018eec:	00db      	lsls	r3, r3, #3
 8018eee:	1a9b      	subs	r3, r3, r2
 8018ef0:	08da      	lsrs	r2, r3, #3
 8018ef2:	693b      	ldr	r3, [r7, #16]
 8018ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	691a      	ldr	r2, [r3, #16]
 8018efa:	693b      	ldr	r3, [r7, #16]
 8018efc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018efe:	4b21      	ldr	r3, [pc, #132]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018f00:	799b      	ldrb	r3, [r3, #6]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00b      	beq.n	8018f1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018f06:	4b20      	ldr	r3, [pc, #128]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018f08:	699b      	ldr	r3, [r3, #24]
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7f6 fa95 	bl	800f43a <lwip_htonl>
 8018f10:	4602      	mov	r2, r0
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	2201      	movs	r2, #1
 8018f1a:	71da      	strb	r2, [r3, #7]
 8018f1c:	e002      	b.n	8018f24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	2200      	movs	r2, #0
 8018f22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018f24:	4b17      	ldr	r3, [pc, #92]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018f26:	79db      	ldrb	r3, [r3, #7]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d007      	beq.n	8018f3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018f2c:	4b16      	ldr	r3, [pc, #88]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018f2e:	69db      	ldr	r3, [r3, #28]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f7f6 fa82 	bl	800f43a <lwip_htonl>
 8018f36:	4602      	mov	r2, r0
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	75fb      	strb	r3, [r7, #23]
 8018f40:	e013      	b.n	8018f6a <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8018f42:	7dfb      	ldrb	r3, [r7, #23]
 8018f44:	3308      	adds	r3, #8
 8018f46:	4a10      	ldr	r2, [pc, #64]	@ (8018f88 <dhcp_handle_ack+0xfc>)
 8018f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7f6 fa74 	bl	800f43a <lwip_htonl>
 8018f52:	4603      	mov	r3, r0
 8018f54:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8018f56:	f107 020c 	add.w	r2, r7, #12
 8018f5a:	7dfb      	ldrb	r3, [r7, #23]
 8018f5c:	4611      	mov	r1, r2
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7f6 fa8c 	bl	800f47c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018f64:	7dfb      	ldrb	r3, [r7, #23]
 8018f66:	3301      	adds	r3, #1
 8018f68:	75fb      	strb	r3, [r7, #23]
 8018f6a:	7dfb      	ldrb	r3, [r7, #23]
 8018f6c:	2b01      	cmp	r3, #1
 8018f6e:	d805      	bhi.n	8018f7c <dhcp_handle_ack+0xf0>
 8018f70:	7dfb      	ldrb	r3, [r7, #23]
 8018f72:	3308      	adds	r3, #8
 8018f74:	4a03      	ldr	r2, [pc, #12]	@ (8018f84 <dhcp_handle_ack+0xf8>)
 8018f76:	5cd3      	ldrb	r3, [r2, r3]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d1e2      	bne.n	8018f42 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018f7c:	bf00      	nop
 8018f7e:	3718      	adds	r7, #24
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	200126f4 	.word	0x200126f4
 8018f88:	200126cc 	.word	0x200126cc

08018f8c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b084      	sub	sp, #16
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d109      	bne.n	8018fae <dhcp_start+0x22>
 8018f9a:	4b37      	ldr	r3, [pc, #220]	@ (8019078 <dhcp_start+0xec>)
 8018f9c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018fa0:	4936      	ldr	r1, [pc, #216]	@ (801907c <dhcp_start+0xf0>)
 8018fa2:	4837      	ldr	r0, [pc, #220]	@ (8019080 <dhcp_start+0xf4>)
 8018fa4:	f005 fa08 	bl	801e3b8 <iprintf>
 8018fa8:	f06f 030f 	mvn.w	r3, #15
 8018fac:	e060      	b.n	8019070 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018fb4:	f003 0301 	and.w	r3, r3, #1
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d109      	bne.n	8018fd0 <dhcp_start+0x44>
 8018fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8019078 <dhcp_start+0xec>)
 8018fbe:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018fc2:	4930      	ldr	r1, [pc, #192]	@ (8019084 <dhcp_start+0xf8>)
 8018fc4:	482e      	ldr	r0, [pc, #184]	@ (8019080 <dhcp_start+0xf4>)
 8018fc6:	f005 f9f7 	bl	801e3b8 <iprintf>
 8018fca:	f06f 030f 	mvn.w	r3, #15
 8018fce:	e04f      	b.n	8019070 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fd4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018fda:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018fde:	d202      	bcs.n	8018fe6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fe4:	e044      	b.n	8019070 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d10d      	bne.n	8019008 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018fec:	2034      	movs	r0, #52	@ 0x34
 8018fee:	f7f7 f831 	bl	8010054 <mem_malloc>
 8018ff2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d102      	bne.n	8019000 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8018ffe:	e037      	b.n	8019070 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	68fa      	ldr	r2, [r7, #12]
 8019004:	625a      	str	r2, [r3, #36]	@ 0x24
 8019006:	e005      	b.n	8019014 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	791b      	ldrb	r3, [r3, #4]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d001      	beq.n	8019014 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019010:	f7ff fc72 	bl	80188f8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019014:	2234      	movs	r2, #52	@ 0x34
 8019016:	2100      	movs	r1, #0
 8019018:	68f8      	ldr	r0, [r7, #12]
 801901a:	f005 fa6c 	bl	801e4f6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801901e:	f7ff fc19 	bl	8018854 <dhcp_inc_pcb_refcount>
 8019022:	4603      	mov	r3, r0
 8019024:	2b00      	cmp	r3, #0
 8019026:	d002      	beq.n	801902e <dhcp_start+0xa2>
    return ERR_MEM;
 8019028:	f04f 33ff 	mov.w	r3, #4294967295
 801902c:	e020      	b.n	8019070 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2201      	movs	r2, #1
 8019032:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801903a:	f003 0304 	and.w	r3, r3, #4
 801903e:	2b00      	cmp	r3, #0
 8019040:	d105      	bne.n	801904e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019042:	2102      	movs	r1, #2
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f000 fcfb 	bl	8019a40 <dhcp_set_state>
    return ERR_OK;
 801904a:	2300      	movs	r3, #0
 801904c:	e010      	b.n	8019070 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f000 f8f8 	bl	8019244 <dhcp_discover>
 8019054:	4603      	mov	r3, r0
 8019056:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019058:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d005      	beq.n	801906c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f000 fc53 	bl	801990c <dhcp_release_and_stop>
    return ERR_MEM;
 8019066:	f04f 33ff 	mov.w	r3, #4294967295
 801906a:	e001      	b.n	8019070 <dhcp_start+0xe4>
  }
  return result;
 801906c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019070:	4618      	mov	r0, r3
 8019072:	3710      	adds	r7, #16
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	080250a4 	.word	0x080250a4
 801907c:	08025188 	.word	0x08025188
 8019080:	08025104 	.word	0x08025104
 8019084:	080251cc 	.word	0x080251cc

08019088 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019094:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d025      	beq.n	80190e8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	795b      	ldrb	r3, [r3, #5]
 80190a0:	2b0a      	cmp	r3, #10
 80190a2:	d008      	beq.n	80190b6 <dhcp_network_changed+0x2e>
 80190a4:	2b0a      	cmp	r3, #10
 80190a6:	dc0d      	bgt.n	80190c4 <dhcp_network_changed+0x3c>
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d01f      	beq.n	80190ec <dhcp_network_changed+0x64>
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	db09      	blt.n	80190c4 <dhcp_network_changed+0x3c>
 80190b0:	3b03      	subs	r3, #3
 80190b2:	2b02      	cmp	r3, #2
 80190b4:	d806      	bhi.n	80190c4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	2200      	movs	r2, #0
 80190ba:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f000 fb71 	bl	80197a4 <dhcp_reboot>
      break;
 80190c2:	e014      	b.n	80190ee <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	795b      	ldrb	r3, [r3, #5]
 80190c8:	2b0c      	cmp	r3, #12
 80190ca:	d906      	bls.n	80190da <dhcp_network_changed+0x52>
 80190cc:	4b09      	ldr	r3, [pc, #36]	@ (80190f4 <dhcp_network_changed+0x6c>)
 80190ce:	f240 326d 	movw	r2, #877	@ 0x36d
 80190d2:	4909      	ldr	r1, [pc, #36]	@ (80190f8 <dhcp_network_changed+0x70>)
 80190d4:	4809      	ldr	r0, [pc, #36]	@ (80190fc <dhcp_network_changed+0x74>)
 80190d6:	f005 f96f 	bl	801e3b8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	2200      	movs	r2, #0
 80190de:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	f000 f8af 	bl	8019244 <dhcp_discover>
      break;
 80190e6:	e002      	b.n	80190ee <dhcp_network_changed+0x66>
    return;
 80190e8:	bf00      	nop
 80190ea:	e000      	b.n	80190ee <dhcp_network_changed+0x66>
      break;
 80190ec:	bf00      	nop
  }
}
 80190ee:	3710      	adds	r7, #16
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	080250a4 	.word	0x080250a4
 80190f8:	080251f0 	.word	0x080251f0
 80190fc:	08025104 	.word	0x08025104

08019100 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d107      	bne.n	8019120 <dhcp_arp_reply+0x20>
 8019110:	4b0e      	ldr	r3, [pc, #56]	@ (801914c <dhcp_arp_reply+0x4c>)
 8019112:	f240 328b 	movw	r2, #907	@ 0x38b
 8019116:	490e      	ldr	r1, [pc, #56]	@ (8019150 <dhcp_arp_reply+0x50>)
 8019118:	480e      	ldr	r0, [pc, #56]	@ (8019154 <dhcp_arp_reply+0x54>)
 801911a:	f005 f94d 	bl	801e3b8 <iprintf>
 801911e:	e012      	b.n	8019146 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019124:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d00c      	beq.n	8019146 <dhcp_arp_reply+0x46>
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	795b      	ldrb	r3, [r3, #5]
 8019130:	2b08      	cmp	r3, #8
 8019132:	d108      	bne.n	8019146 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019134:	683b      	ldr	r3, [r7, #0]
 8019136:	681a      	ldr	r2, [r3, #0]
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	69db      	ldr	r3, [r3, #28]
 801913c:	429a      	cmp	r2, r3
 801913e:	d102      	bne.n	8019146 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f000 f809 	bl	8019158 <dhcp_decline>
    }
  }
}
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}
 801914c:	080250a4 	.word	0x080250a4
 8019150:	08025188 	.word	0x08025188
 8019154:	08025104 	.word	0x08025104

08019158 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019158:	b5b0      	push	{r4, r5, r7, lr}
 801915a:	b08a      	sub	sp, #40	@ 0x28
 801915c:	af02      	add	r7, sp, #8
 801915e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019164:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019166:	210c      	movs	r1, #12
 8019168:	69b8      	ldr	r0, [r7, #24]
 801916a:	f000 fc69 	bl	8019a40 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801916e:	f107 030c 	add.w	r3, r7, #12
 8019172:	2204      	movs	r2, #4
 8019174:	69b9      	ldr	r1, [r7, #24]
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f001 f91e 	bl	801a3b8 <dhcp_create_msg>
 801917c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d035      	beq.n	80191f0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801918a:	89b8      	ldrh	r0, [r7, #12]
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019192:	2304      	movs	r3, #4
 8019194:	2232      	movs	r2, #50	@ 0x32
 8019196:	f000 fc6d 	bl	8019a74 <dhcp_option>
 801919a:	4603      	mov	r3, r0
 801919c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801919e:	89bc      	ldrh	r4, [r7, #12]
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80191a6:	69bb      	ldr	r3, [r7, #24]
 80191a8:	69db      	ldr	r3, [r3, #28]
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7f6 f945 	bl	800f43a <lwip_htonl>
 80191b0:	4603      	mov	r3, r0
 80191b2:	461a      	mov	r2, r3
 80191b4:	4629      	mov	r1, r5
 80191b6:	4620      	mov	r0, r4
 80191b8:	f000 fce8 	bl	8019b8c <dhcp_option_long>
 80191bc:	4603      	mov	r3, r0
 80191be:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80191c0:	89b8      	ldrh	r0, [r7, #12]
 80191c2:	693b      	ldr	r3, [r7, #16]
 80191c4:	33f0      	adds	r3, #240	@ 0xf0
 80191c6:	697a      	ldr	r2, [r7, #20]
 80191c8:	4619      	mov	r1, r3
 80191ca:	f001 f9cb 	bl	801a564 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80191ce:	4b19      	ldr	r3, [pc, #100]	@ (8019234 <dhcp_decline+0xdc>)
 80191d0:	6818      	ldr	r0, [r3, #0]
 80191d2:	4b19      	ldr	r3, [pc, #100]	@ (8019238 <dhcp_decline+0xe0>)
 80191d4:	9301      	str	r3, [sp, #4]
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	9300      	str	r3, [sp, #0]
 80191da:	2343      	movs	r3, #67	@ 0x43
 80191dc:	4a17      	ldr	r2, [pc, #92]	@ (801923c <dhcp_decline+0xe4>)
 80191de:	6979      	ldr	r1, [r7, #20]
 80191e0:	f7ff f87e 	bl	80182e0 <udp_sendto_if_src>
 80191e4:	4603      	mov	r3, r0
 80191e6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191e8:	6978      	ldr	r0, [r7, #20]
 80191ea:	f7f7 fffd 	bl	80111e8 <pbuf_free>
 80191ee:	e001      	b.n	80191f4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191f0:	23ff      	movs	r3, #255	@ 0xff
 80191f2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191f4:	69bb      	ldr	r3, [r7, #24]
 80191f6:	799b      	ldrb	r3, [r3, #6]
 80191f8:	2bff      	cmp	r3, #255	@ 0xff
 80191fa:	d005      	beq.n	8019208 <dhcp_decline+0xb0>
    dhcp->tries++;
 80191fc:	69bb      	ldr	r3, [r7, #24]
 80191fe:	799b      	ldrb	r3, [r3, #6]
 8019200:	3301      	adds	r3, #1
 8019202:	b2da      	uxtb	r2, r3
 8019204:	69bb      	ldr	r3, [r7, #24]
 8019206:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019208:	f242 7310 	movw	r3, #10000	@ 0x2710
 801920c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801920e:	89fb      	ldrh	r3, [r7, #14]
 8019210:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019214:	4a0a      	ldr	r2, [pc, #40]	@ (8019240 <dhcp_decline+0xe8>)
 8019216:	fb82 1203 	smull	r1, r2, r2, r3
 801921a:	1152      	asrs	r2, r2, #5
 801921c:	17db      	asrs	r3, r3, #31
 801921e:	1ad3      	subs	r3, r2, r3
 8019220:	b29a      	uxth	r2, r3
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801922a:	4618      	mov	r0, r3
 801922c:	3720      	adds	r7, #32
 801922e:	46bd      	mov	sp, r7
 8019230:	bdb0      	pop	{r4, r5, r7, pc}
 8019232:	bf00      	nop
 8019234:	20012700 	.word	0x20012700
 8019238:	08025e1c 	.word	0x08025e1c
 801923c:	08025e20 	.word	0x08025e20
 8019240:	10624dd3 	.word	0x10624dd3

08019244 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b08a      	sub	sp, #40	@ 0x28
 8019248:	af02      	add	r7, sp, #8
 801924a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019250:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8019252:	2300      	movs	r3, #0
 8019254:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019256:	69bb      	ldr	r3, [r7, #24]
 8019258:	2200      	movs	r2, #0
 801925a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801925c:	2106      	movs	r1, #6
 801925e:	69b8      	ldr	r0, [r7, #24]
 8019260:	f000 fbee 	bl	8019a40 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019264:	f107 0308 	add.w	r3, r7, #8
 8019268:	2201      	movs	r2, #1
 801926a:	69b9      	ldr	r1, [r7, #24]
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f001 f8a3 	bl	801a3b8 <dhcp_create_msg>
 8019272:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d04b      	beq.n	8019312 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019280:	8938      	ldrh	r0, [r7, #8]
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019288:	2302      	movs	r3, #2
 801928a:	2239      	movs	r2, #57	@ 0x39
 801928c:	f000 fbf2 	bl	8019a74 <dhcp_option>
 8019290:	4603      	mov	r3, r0
 8019292:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019294:	8938      	ldrh	r0, [r7, #8]
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80192a0:	461a      	mov	r2, r3
 80192a2:	f000 fc41 	bl	8019b28 <dhcp_option_short>
 80192a6:	4603      	mov	r3, r0
 80192a8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80192aa:	8938      	ldrh	r0, [r7, #8]
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192b2:	2304      	movs	r3, #4
 80192b4:	2237      	movs	r2, #55	@ 0x37
 80192b6:	f000 fbdd 	bl	8019a74 <dhcp_option>
 80192ba:	4603      	mov	r3, r0
 80192bc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192be:	2300      	movs	r3, #0
 80192c0:	77fb      	strb	r3, [r7, #31]
 80192c2:	e00e      	b.n	80192e2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80192c4:	8938      	ldrh	r0, [r7, #8]
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192cc:	7ffb      	ldrb	r3, [r7, #31]
 80192ce:	4a29      	ldr	r2, [pc, #164]	@ (8019374 <dhcp_discover+0x130>)
 80192d0:	5cd3      	ldrb	r3, [r2, r3]
 80192d2:	461a      	mov	r2, r3
 80192d4:	f000 fc02 	bl	8019adc <dhcp_option_byte>
 80192d8:	4603      	mov	r3, r0
 80192da:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192dc:	7ffb      	ldrb	r3, [r7, #31]
 80192de:	3301      	adds	r3, #1
 80192e0:	77fb      	strb	r3, [r7, #31]
 80192e2:	7ffb      	ldrb	r3, [r7, #31]
 80192e4:	2b03      	cmp	r3, #3
 80192e6:	d9ed      	bls.n	80192c4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80192e8:	8938      	ldrh	r0, [r7, #8]
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	33f0      	adds	r3, #240	@ 0xf0
 80192ee:	693a      	ldr	r2, [r7, #16]
 80192f0:	4619      	mov	r1, r3
 80192f2:	f001 f937 	bl	801a564 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80192f6:	4b20      	ldr	r3, [pc, #128]	@ (8019378 <dhcp_discover+0x134>)
 80192f8:	6818      	ldr	r0, [r3, #0]
 80192fa:	4b20      	ldr	r3, [pc, #128]	@ (801937c <dhcp_discover+0x138>)
 80192fc:	9301      	str	r3, [sp, #4]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	9300      	str	r3, [sp, #0]
 8019302:	2343      	movs	r3, #67	@ 0x43
 8019304:	4a1e      	ldr	r2, [pc, #120]	@ (8019380 <dhcp_discover+0x13c>)
 8019306:	6939      	ldr	r1, [r7, #16]
 8019308:	f7fe ffea 	bl	80182e0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801930c:	6938      	ldr	r0, [r7, #16]
 801930e:	f7f7 ff6b 	bl	80111e8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019312:	69bb      	ldr	r3, [r7, #24]
 8019314:	799b      	ldrb	r3, [r3, #6]
 8019316:	2bff      	cmp	r3, #255	@ 0xff
 8019318:	d005      	beq.n	8019326 <dhcp_discover+0xe2>
    dhcp->tries++;
 801931a:	69bb      	ldr	r3, [r7, #24]
 801931c:	799b      	ldrb	r3, [r3, #6]
 801931e:	3301      	adds	r3, #1
 8019320:	b2da      	uxtb	r2, r3
 8019322:	69bb      	ldr	r3, [r7, #24]
 8019324:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019326:	69bb      	ldr	r3, [r7, #24]
 8019328:	799b      	ldrb	r3, [r3, #6]
 801932a:	2b05      	cmp	r3, #5
 801932c:	d80d      	bhi.n	801934a <dhcp_discover+0x106>
 801932e:	69bb      	ldr	r3, [r7, #24]
 8019330:	799b      	ldrb	r3, [r3, #6]
 8019332:	461a      	mov	r2, r3
 8019334:	2301      	movs	r3, #1
 8019336:	4093      	lsls	r3, r2
 8019338:	b29b      	uxth	r3, r3
 801933a:	461a      	mov	r2, r3
 801933c:	0152      	lsls	r2, r2, #5
 801933e:	1ad2      	subs	r2, r2, r3
 8019340:	0092      	lsls	r2, r2, #2
 8019342:	4413      	add	r3, r2
 8019344:	00db      	lsls	r3, r3, #3
 8019346:	b29b      	uxth	r3, r3
 8019348:	e001      	b.n	801934e <dhcp_discover+0x10a>
 801934a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801934e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019350:	897b      	ldrh	r3, [r7, #10]
 8019352:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019356:	4a0b      	ldr	r2, [pc, #44]	@ (8019384 <dhcp_discover+0x140>)
 8019358:	fb82 1203 	smull	r1, r2, r2, r3
 801935c:	1152      	asrs	r2, r2, #5
 801935e:	17db      	asrs	r3, r3, #31
 8019360:	1ad3      	subs	r3, r2, r3
 8019362:	b29a      	uxth	r2, r3
 8019364:	69bb      	ldr	r3, [r7, #24]
 8019366:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801936c:	4618      	mov	r0, r3
 801936e:	3720      	adds	r7, #32
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	20000044 	.word	0x20000044
 8019378:	20012700 	.word	0x20012700
 801937c:	08025e1c 	.word	0x08025e1c
 8019380:	08025e20 	.word	0x08025e20
 8019384:	10624dd3 	.word	0x10624dd3

08019388 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b088      	sub	sp, #32
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d107      	bne.n	80193a6 <dhcp_bind+0x1e>
 8019396:	4b64      	ldr	r3, [pc, #400]	@ (8019528 <dhcp_bind+0x1a0>)
 8019398:	f240 4215 	movw	r2, #1045	@ 0x415
 801939c:	4963      	ldr	r1, [pc, #396]	@ (801952c <dhcp_bind+0x1a4>)
 801939e:	4864      	ldr	r0, [pc, #400]	@ (8019530 <dhcp_bind+0x1a8>)
 80193a0:	f005 f80a 	bl	801e3b8 <iprintf>
 80193a4:	e0bc      	b.n	8019520 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193aa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80193ac:	69bb      	ldr	r3, [r7, #24]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d107      	bne.n	80193c2 <dhcp_bind+0x3a>
 80193b2:	4b5d      	ldr	r3, [pc, #372]	@ (8019528 <dhcp_bind+0x1a0>)
 80193b4:	f240 4217 	movw	r2, #1047	@ 0x417
 80193b8:	495e      	ldr	r1, [pc, #376]	@ (8019534 <dhcp_bind+0x1ac>)
 80193ba:	485d      	ldr	r0, [pc, #372]	@ (8019530 <dhcp_bind+0x1a8>)
 80193bc:	f004 fffc 	bl	801e3b8 <iprintf>
 80193c0:	e0ae      	b.n	8019520 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80193c2:	69bb      	ldr	r3, [r7, #24]
 80193c4:	2200      	movs	r2, #0
 80193c6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80193c8:	69bb      	ldr	r3, [r7, #24]
 80193ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193d0:	d019      	beq.n	8019406 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80193d2:	69bb      	ldr	r3, [r7, #24]
 80193d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193d6:	331e      	adds	r3, #30
 80193d8:	4a57      	ldr	r2, [pc, #348]	@ (8019538 <dhcp_bind+0x1b0>)
 80193da:	fba2 2303 	umull	r2, r3, r2, r3
 80193de:	095b      	lsrs	r3, r3, #5
 80193e0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80193e2:	69fb      	ldr	r3, [r7, #28]
 80193e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80193e8:	d302      	bcc.n	80193f0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80193ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193ee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80193f0:	69fb      	ldr	r3, [r7, #28]
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	69bb      	ldr	r3, [r7, #24]
 80193f6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80193f8:	69bb      	ldr	r3, [r7, #24]
 80193fa:	8a9b      	ldrh	r3, [r3, #20]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d102      	bne.n	8019406 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8019400:	69bb      	ldr	r3, [r7, #24]
 8019402:	2201      	movs	r2, #1
 8019404:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801940e:	d01d      	beq.n	801944c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019410:	69bb      	ldr	r3, [r7, #24]
 8019412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019414:	331e      	adds	r3, #30
 8019416:	4a48      	ldr	r2, [pc, #288]	@ (8019538 <dhcp_bind+0x1b0>)
 8019418:	fba2 2303 	umull	r2, r3, r2, r3
 801941c:	095b      	lsrs	r3, r3, #5
 801941e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019420:	69fb      	ldr	r3, [r7, #28]
 8019422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019426:	d302      	bcc.n	801942e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801942c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801942e:	69fb      	ldr	r3, [r7, #28]
 8019430:	b29a      	uxth	r2, r3
 8019432:	69bb      	ldr	r3, [r7, #24]
 8019434:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	895b      	ldrh	r3, [r3, #10]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d102      	bne.n	8019444 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	2201      	movs	r2, #1
 8019442:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019444:	69bb      	ldr	r3, [r7, #24]
 8019446:	895a      	ldrh	r2, [r3, #10]
 8019448:	69bb      	ldr	r3, [r7, #24]
 801944a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019454:	d01d      	beq.n	8019492 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019456:	69bb      	ldr	r3, [r7, #24]
 8019458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801945a:	331e      	adds	r3, #30
 801945c:	4a36      	ldr	r2, [pc, #216]	@ (8019538 <dhcp_bind+0x1b0>)
 801945e:	fba2 2303 	umull	r2, r3, r2, r3
 8019462:	095b      	lsrs	r3, r3, #5
 8019464:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019466:	69fb      	ldr	r3, [r7, #28]
 8019468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801946c:	d302      	bcc.n	8019474 <dhcp_bind+0xec>
      timeout = 0xffff;
 801946e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019472:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019474:	69fb      	ldr	r3, [r7, #28]
 8019476:	b29a      	uxth	r2, r3
 8019478:	69bb      	ldr	r3, [r7, #24]
 801947a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801947c:	69bb      	ldr	r3, [r7, #24]
 801947e:	899b      	ldrh	r3, [r3, #12]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d102      	bne.n	801948a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8019484:	69bb      	ldr	r3, [r7, #24]
 8019486:	2201      	movs	r2, #1
 8019488:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	899a      	ldrh	r2, [r3, #12]
 801948e:	69bb      	ldr	r3, [r7, #24]
 8019490:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8019492:	69bb      	ldr	r3, [r7, #24]
 8019494:	895a      	ldrh	r2, [r3, #10]
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	899b      	ldrh	r3, [r3, #12]
 801949a:	429a      	cmp	r2, r3
 801949c:	d306      	bcc.n	80194ac <dhcp_bind+0x124>
 801949e:	69bb      	ldr	r3, [r7, #24]
 80194a0:	899b      	ldrh	r3, [r3, #12]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d002      	beq.n	80194ac <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80194a6:	69bb      	ldr	r3, [r7, #24]
 80194a8:	2200      	movs	r2, #0
 80194aa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80194ac:	69bb      	ldr	r3, [r7, #24]
 80194ae:	79db      	ldrb	r3, [r3, #7]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d003      	beq.n	80194bc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	6a1b      	ldr	r3, [r3, #32]
 80194b8:	613b      	str	r3, [r7, #16]
 80194ba:	e014      	b.n	80194e6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80194bc:	69bb      	ldr	r3, [r7, #24]
 80194be:	331c      	adds	r3, #28
 80194c0:	781b      	ldrb	r3, [r3, #0]
 80194c2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80194c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	db02      	blt.n	80194d2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80194cc:	23ff      	movs	r3, #255	@ 0xff
 80194ce:	613b      	str	r3, [r7, #16]
 80194d0:	e009      	b.n	80194e6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80194d2:	7dfb      	ldrb	r3, [r7, #23]
 80194d4:	2bbf      	cmp	r3, #191	@ 0xbf
 80194d6:	d903      	bls.n	80194e0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80194d8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80194dc:	613b      	str	r3, [r7, #16]
 80194de:	e002      	b.n	80194e6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80194e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194e4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194ea:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d108      	bne.n	8019504 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80194f2:	69bb      	ldr	r3, [r7, #24]
 80194f4:	69da      	ldr	r2, [r3, #28]
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	4013      	ands	r3, r2
 80194fa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019502:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019504:	210a      	movs	r1, #10
 8019506:	69b8      	ldr	r0, [r7, #24]
 8019508:	f000 fa9a 	bl	8019a40 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801950c:	69bb      	ldr	r3, [r7, #24]
 801950e:	f103 011c 	add.w	r1, r3, #28
 8019512:	f107 030c 	add.w	r3, r7, #12
 8019516:	f107 0210 	add.w	r2, r7, #16
 801951a:	6878      	ldr	r0, [r7, #4]
 801951c:	f7f7 f956 	bl	80107cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019520:	3720      	adds	r7, #32
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	080250a4 	.word	0x080250a4
 801952c:	08025204 	.word	0x08025204
 8019530:	08025104 	.word	0x08025104
 8019534:	08025220 	.word	0x08025220
 8019538:	88888889 	.word	0x88888889

0801953c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b08a      	sub	sp, #40	@ 0x28
 8019540:	af02      	add	r7, sp, #8
 8019542:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019548:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801954a:	2105      	movs	r1, #5
 801954c:	69b8      	ldr	r0, [r7, #24]
 801954e:	f000 fa77 	bl	8019a40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019552:	f107 030c 	add.w	r3, r7, #12
 8019556:	2203      	movs	r2, #3
 8019558:	69b9      	ldr	r1, [r7, #24]
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f000 ff2c 	bl	801a3b8 <dhcp_create_msg>
 8019560:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d04e      	beq.n	8019606 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801956e:	89b8      	ldrh	r0, [r7, #12]
 8019570:	693b      	ldr	r3, [r7, #16]
 8019572:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019576:	2302      	movs	r3, #2
 8019578:	2239      	movs	r2, #57	@ 0x39
 801957a:	f000 fa7b 	bl	8019a74 <dhcp_option>
 801957e:	4603      	mov	r3, r0
 8019580:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019582:	89b8      	ldrh	r0, [r7, #12]
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801958e:	461a      	mov	r2, r3
 8019590:	f000 faca 	bl	8019b28 <dhcp_option_short>
 8019594:	4603      	mov	r3, r0
 8019596:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019598:	89b8      	ldrh	r0, [r7, #12]
 801959a:	693b      	ldr	r3, [r7, #16]
 801959c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195a0:	2304      	movs	r3, #4
 80195a2:	2237      	movs	r2, #55	@ 0x37
 80195a4:	f000 fa66 	bl	8019a74 <dhcp_option>
 80195a8:	4603      	mov	r3, r0
 80195aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80195ac:	2300      	movs	r3, #0
 80195ae:	77bb      	strb	r3, [r7, #30]
 80195b0:	e00e      	b.n	80195d0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80195b2:	89b8      	ldrh	r0, [r7, #12]
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195ba:	7fbb      	ldrb	r3, [r7, #30]
 80195bc:	4a29      	ldr	r2, [pc, #164]	@ (8019664 <dhcp_renew+0x128>)
 80195be:	5cd3      	ldrb	r3, [r2, r3]
 80195c0:	461a      	mov	r2, r3
 80195c2:	f000 fa8b 	bl	8019adc <dhcp_option_byte>
 80195c6:	4603      	mov	r3, r0
 80195c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80195ca:	7fbb      	ldrb	r3, [r7, #30]
 80195cc:	3301      	adds	r3, #1
 80195ce:	77bb      	strb	r3, [r7, #30]
 80195d0:	7fbb      	ldrb	r3, [r7, #30]
 80195d2:	2b03      	cmp	r3, #3
 80195d4:	d9ed      	bls.n	80195b2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80195d6:	89b8      	ldrh	r0, [r7, #12]
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	33f0      	adds	r3, #240	@ 0xf0
 80195dc:	697a      	ldr	r2, [r7, #20]
 80195de:	4619      	mov	r1, r3
 80195e0:	f000 ffc0 	bl	801a564 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80195e4:	4b20      	ldr	r3, [pc, #128]	@ (8019668 <dhcp_renew+0x12c>)
 80195e6:	6818      	ldr	r0, [r3, #0]
 80195e8:	69bb      	ldr	r3, [r7, #24]
 80195ea:	f103 0218 	add.w	r2, r3, #24
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	9300      	str	r3, [sp, #0]
 80195f2:	2343      	movs	r3, #67	@ 0x43
 80195f4:	6979      	ldr	r1, [r7, #20]
 80195f6:	f7fe fdff 	bl	80181f8 <udp_sendto_if>
 80195fa:	4603      	mov	r3, r0
 80195fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80195fe:	6978      	ldr	r0, [r7, #20]
 8019600:	f7f7 fdf2 	bl	80111e8 <pbuf_free>
 8019604:	e001      	b.n	801960a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019606:	23ff      	movs	r3, #255	@ 0xff
 8019608:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801960a:	69bb      	ldr	r3, [r7, #24]
 801960c:	799b      	ldrb	r3, [r3, #6]
 801960e:	2bff      	cmp	r3, #255	@ 0xff
 8019610:	d005      	beq.n	801961e <dhcp_renew+0xe2>
    dhcp->tries++;
 8019612:	69bb      	ldr	r3, [r7, #24]
 8019614:	799b      	ldrb	r3, [r3, #6]
 8019616:	3301      	adds	r3, #1
 8019618:	b2da      	uxtb	r2, r3
 801961a:	69bb      	ldr	r3, [r7, #24]
 801961c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801961e:	69bb      	ldr	r3, [r7, #24]
 8019620:	799b      	ldrb	r3, [r3, #6]
 8019622:	2b09      	cmp	r3, #9
 8019624:	d809      	bhi.n	801963a <dhcp_renew+0xfe>
 8019626:	69bb      	ldr	r3, [r7, #24]
 8019628:	799b      	ldrb	r3, [r3, #6]
 801962a:	461a      	mov	r2, r3
 801962c:	0152      	lsls	r2, r2, #5
 801962e:	1ad2      	subs	r2, r2, r3
 8019630:	0092      	lsls	r2, r2, #2
 8019632:	4413      	add	r3, r2
 8019634:	011b      	lsls	r3, r3, #4
 8019636:	b29b      	uxth	r3, r3
 8019638:	e001      	b.n	801963e <dhcp_renew+0x102>
 801963a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801963e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019640:	89fb      	ldrh	r3, [r7, #14]
 8019642:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019646:	4a09      	ldr	r2, [pc, #36]	@ (801966c <dhcp_renew+0x130>)
 8019648:	fb82 1203 	smull	r1, r2, r2, r3
 801964c:	1152      	asrs	r2, r2, #5
 801964e:	17db      	asrs	r3, r3, #31
 8019650:	1ad3      	subs	r3, r2, r3
 8019652:	b29a      	uxth	r2, r3
 8019654:	69bb      	ldr	r3, [r7, #24]
 8019656:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019658:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801965c:	4618      	mov	r0, r3
 801965e:	3720      	adds	r7, #32
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}
 8019664:	20000044 	.word	0x20000044
 8019668:	20012700 	.word	0x20012700
 801966c:	10624dd3 	.word	0x10624dd3

08019670 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b08a      	sub	sp, #40	@ 0x28
 8019674:	af02      	add	r7, sp, #8
 8019676:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801967c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801967e:	2104      	movs	r1, #4
 8019680:	69b8      	ldr	r0, [r7, #24]
 8019682:	f000 f9dd 	bl	8019a40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019686:	f107 030c 	add.w	r3, r7, #12
 801968a:	2203      	movs	r2, #3
 801968c:	69b9      	ldr	r1, [r7, #24]
 801968e:	6878      	ldr	r0, [r7, #4]
 8019690:	f000 fe92 	bl	801a3b8 <dhcp_create_msg>
 8019694:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d04c      	beq.n	8019736 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80196a2:	89b8      	ldrh	r0, [r7, #12]
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196aa:	2302      	movs	r3, #2
 80196ac:	2239      	movs	r2, #57	@ 0x39
 80196ae:	f000 f9e1 	bl	8019a74 <dhcp_option>
 80196b2:	4603      	mov	r3, r0
 80196b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80196b6:	89b8      	ldrh	r0, [r7, #12]
 80196b8:	693b      	ldr	r3, [r7, #16]
 80196ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80196c2:	461a      	mov	r2, r3
 80196c4:	f000 fa30 	bl	8019b28 <dhcp_option_short>
 80196c8:	4603      	mov	r3, r0
 80196ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80196cc:	89b8      	ldrh	r0, [r7, #12]
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196d4:	2304      	movs	r3, #4
 80196d6:	2237      	movs	r2, #55	@ 0x37
 80196d8:	f000 f9cc 	bl	8019a74 <dhcp_option>
 80196dc:	4603      	mov	r3, r0
 80196de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196e0:	2300      	movs	r3, #0
 80196e2:	77bb      	strb	r3, [r7, #30]
 80196e4:	e00e      	b.n	8019704 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80196e6:	89b8      	ldrh	r0, [r7, #12]
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196ee:	7fbb      	ldrb	r3, [r7, #30]
 80196f0:	4a28      	ldr	r2, [pc, #160]	@ (8019794 <dhcp_rebind+0x124>)
 80196f2:	5cd3      	ldrb	r3, [r2, r3]
 80196f4:	461a      	mov	r2, r3
 80196f6:	f000 f9f1 	bl	8019adc <dhcp_option_byte>
 80196fa:	4603      	mov	r3, r0
 80196fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196fe:	7fbb      	ldrb	r3, [r7, #30]
 8019700:	3301      	adds	r3, #1
 8019702:	77bb      	strb	r3, [r7, #30]
 8019704:	7fbb      	ldrb	r3, [r7, #30]
 8019706:	2b03      	cmp	r3, #3
 8019708:	d9ed      	bls.n	80196e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801970a:	89b8      	ldrh	r0, [r7, #12]
 801970c:	693b      	ldr	r3, [r7, #16]
 801970e:	33f0      	adds	r3, #240	@ 0xf0
 8019710:	697a      	ldr	r2, [r7, #20]
 8019712:	4619      	mov	r1, r3
 8019714:	f000 ff26 	bl	801a564 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019718:	4b1f      	ldr	r3, [pc, #124]	@ (8019798 <dhcp_rebind+0x128>)
 801971a:	6818      	ldr	r0, [r3, #0]
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	9300      	str	r3, [sp, #0]
 8019720:	2343      	movs	r3, #67	@ 0x43
 8019722:	4a1e      	ldr	r2, [pc, #120]	@ (801979c <dhcp_rebind+0x12c>)
 8019724:	6979      	ldr	r1, [r7, #20]
 8019726:	f7fe fd67 	bl	80181f8 <udp_sendto_if>
 801972a:	4603      	mov	r3, r0
 801972c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801972e:	6978      	ldr	r0, [r7, #20]
 8019730:	f7f7 fd5a 	bl	80111e8 <pbuf_free>
 8019734:	e001      	b.n	801973a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019736:	23ff      	movs	r3, #255	@ 0xff
 8019738:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	799b      	ldrb	r3, [r3, #6]
 801973e:	2bff      	cmp	r3, #255	@ 0xff
 8019740:	d005      	beq.n	801974e <dhcp_rebind+0xde>
    dhcp->tries++;
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	799b      	ldrb	r3, [r3, #6]
 8019746:	3301      	adds	r3, #1
 8019748:	b2da      	uxtb	r2, r3
 801974a:	69bb      	ldr	r3, [r7, #24]
 801974c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	799b      	ldrb	r3, [r3, #6]
 8019752:	2b09      	cmp	r3, #9
 8019754:	d809      	bhi.n	801976a <dhcp_rebind+0xfa>
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	799b      	ldrb	r3, [r3, #6]
 801975a:	461a      	mov	r2, r3
 801975c:	0152      	lsls	r2, r2, #5
 801975e:	1ad2      	subs	r2, r2, r3
 8019760:	0092      	lsls	r2, r2, #2
 8019762:	4413      	add	r3, r2
 8019764:	00db      	lsls	r3, r3, #3
 8019766:	b29b      	uxth	r3, r3
 8019768:	e001      	b.n	801976e <dhcp_rebind+0xfe>
 801976a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801976e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019770:	89fb      	ldrh	r3, [r7, #14]
 8019772:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019776:	4a0a      	ldr	r2, [pc, #40]	@ (80197a0 <dhcp_rebind+0x130>)
 8019778:	fb82 1203 	smull	r1, r2, r2, r3
 801977c:	1152      	asrs	r2, r2, #5
 801977e:	17db      	asrs	r3, r3, #31
 8019780:	1ad3      	subs	r3, r2, r3
 8019782:	b29a      	uxth	r2, r3
 8019784:	69bb      	ldr	r3, [r7, #24]
 8019786:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019788:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801978c:	4618      	mov	r0, r3
 801978e:	3720      	adds	r7, #32
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	20000044 	.word	0x20000044
 8019798:	20012700 	.word	0x20012700
 801979c:	08025e20 	.word	0x08025e20
 80197a0:	10624dd3 	.word	0x10624dd3

080197a4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80197a4:	b5b0      	push	{r4, r5, r7, lr}
 80197a6:	b08a      	sub	sp, #40	@ 0x28
 80197a8:	af02      	add	r7, sp, #8
 80197aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197b0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80197b2:	2103      	movs	r1, #3
 80197b4:	69b8      	ldr	r0, [r7, #24]
 80197b6:	f000 f943 	bl	8019a40 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80197ba:	f107 030c 	add.w	r3, r7, #12
 80197be:	2203      	movs	r2, #3
 80197c0:	69b9      	ldr	r1, [r7, #24]
 80197c2:	6878      	ldr	r0, [r7, #4]
 80197c4:	f000 fdf8 	bl	801a3b8 <dhcp_create_msg>
 80197c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80197ca:	697b      	ldr	r3, [r7, #20]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d066      	beq.n	801989e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	685b      	ldr	r3, [r3, #4]
 80197d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80197d6:	89b8      	ldrh	r0, [r7, #12]
 80197d8:	693b      	ldr	r3, [r7, #16]
 80197da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197de:	2302      	movs	r3, #2
 80197e0:	2239      	movs	r2, #57	@ 0x39
 80197e2:	f000 f947 	bl	8019a74 <dhcp_option>
 80197e6:	4603      	mov	r3, r0
 80197e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80197ea:	89b8      	ldrh	r0, [r7, #12]
 80197ec:	693b      	ldr	r3, [r7, #16]
 80197ee:	33f0      	adds	r3, #240	@ 0xf0
 80197f0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80197f4:	4619      	mov	r1, r3
 80197f6:	f000 f997 	bl	8019b28 <dhcp_option_short>
 80197fa:	4603      	mov	r3, r0
 80197fc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80197fe:	89b8      	ldrh	r0, [r7, #12]
 8019800:	693b      	ldr	r3, [r7, #16]
 8019802:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019806:	2304      	movs	r3, #4
 8019808:	2232      	movs	r2, #50	@ 0x32
 801980a:	f000 f933 	bl	8019a74 <dhcp_option>
 801980e:	4603      	mov	r3, r0
 8019810:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019812:	89bc      	ldrh	r4, [r7, #12]
 8019814:	693b      	ldr	r3, [r7, #16]
 8019816:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801981a:	69bb      	ldr	r3, [r7, #24]
 801981c:	69db      	ldr	r3, [r3, #28]
 801981e:	4618      	mov	r0, r3
 8019820:	f7f5 fe0b 	bl	800f43a <lwip_htonl>
 8019824:	4603      	mov	r3, r0
 8019826:	461a      	mov	r2, r3
 8019828:	4629      	mov	r1, r5
 801982a:	4620      	mov	r0, r4
 801982c:	f000 f9ae 	bl	8019b8c <dhcp_option_long>
 8019830:	4603      	mov	r3, r0
 8019832:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019834:	89b8      	ldrh	r0, [r7, #12]
 8019836:	693b      	ldr	r3, [r7, #16]
 8019838:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801983c:	2304      	movs	r3, #4
 801983e:	2237      	movs	r2, #55	@ 0x37
 8019840:	f000 f918 	bl	8019a74 <dhcp_option>
 8019844:	4603      	mov	r3, r0
 8019846:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019848:	2300      	movs	r3, #0
 801984a:	77bb      	strb	r3, [r7, #30]
 801984c:	e00e      	b.n	801986c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801984e:	89b8      	ldrh	r0, [r7, #12]
 8019850:	693b      	ldr	r3, [r7, #16]
 8019852:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019856:	7fbb      	ldrb	r3, [r7, #30]
 8019858:	4a28      	ldr	r2, [pc, #160]	@ (80198fc <dhcp_reboot+0x158>)
 801985a:	5cd3      	ldrb	r3, [r2, r3]
 801985c:	461a      	mov	r2, r3
 801985e:	f000 f93d 	bl	8019adc <dhcp_option_byte>
 8019862:	4603      	mov	r3, r0
 8019864:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019866:	7fbb      	ldrb	r3, [r7, #30]
 8019868:	3301      	adds	r3, #1
 801986a:	77bb      	strb	r3, [r7, #30]
 801986c:	7fbb      	ldrb	r3, [r7, #30]
 801986e:	2b03      	cmp	r3, #3
 8019870:	d9ed      	bls.n	801984e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019872:	89b8      	ldrh	r0, [r7, #12]
 8019874:	693b      	ldr	r3, [r7, #16]
 8019876:	33f0      	adds	r3, #240	@ 0xf0
 8019878:	697a      	ldr	r2, [r7, #20]
 801987a:	4619      	mov	r1, r3
 801987c:	f000 fe72 	bl	801a564 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019880:	4b1f      	ldr	r3, [pc, #124]	@ (8019900 <dhcp_reboot+0x15c>)
 8019882:	6818      	ldr	r0, [r3, #0]
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	9300      	str	r3, [sp, #0]
 8019888:	2343      	movs	r3, #67	@ 0x43
 801988a:	4a1e      	ldr	r2, [pc, #120]	@ (8019904 <dhcp_reboot+0x160>)
 801988c:	6979      	ldr	r1, [r7, #20]
 801988e:	f7fe fcb3 	bl	80181f8 <udp_sendto_if>
 8019892:	4603      	mov	r3, r0
 8019894:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019896:	6978      	ldr	r0, [r7, #20]
 8019898:	f7f7 fca6 	bl	80111e8 <pbuf_free>
 801989c:	e001      	b.n	80198a2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801989e:	23ff      	movs	r3, #255	@ 0xff
 80198a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80198a2:	69bb      	ldr	r3, [r7, #24]
 80198a4:	799b      	ldrb	r3, [r3, #6]
 80198a6:	2bff      	cmp	r3, #255	@ 0xff
 80198a8:	d005      	beq.n	80198b6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80198aa:	69bb      	ldr	r3, [r7, #24]
 80198ac:	799b      	ldrb	r3, [r3, #6]
 80198ae:	3301      	adds	r3, #1
 80198b0:	b2da      	uxtb	r2, r3
 80198b2:	69bb      	ldr	r3, [r7, #24]
 80198b4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80198b6:	69bb      	ldr	r3, [r7, #24]
 80198b8:	799b      	ldrb	r3, [r3, #6]
 80198ba:	2b09      	cmp	r3, #9
 80198bc:	d809      	bhi.n	80198d2 <dhcp_reboot+0x12e>
 80198be:	69bb      	ldr	r3, [r7, #24]
 80198c0:	799b      	ldrb	r3, [r3, #6]
 80198c2:	461a      	mov	r2, r3
 80198c4:	0152      	lsls	r2, r2, #5
 80198c6:	1ad2      	subs	r2, r2, r3
 80198c8:	0092      	lsls	r2, r2, #2
 80198ca:	4413      	add	r3, r2
 80198cc:	00db      	lsls	r3, r3, #3
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	e001      	b.n	80198d6 <dhcp_reboot+0x132>
 80198d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80198d6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80198d8:	89fb      	ldrh	r3, [r7, #14]
 80198da:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80198de:	4a0a      	ldr	r2, [pc, #40]	@ (8019908 <dhcp_reboot+0x164>)
 80198e0:	fb82 1203 	smull	r1, r2, r2, r3
 80198e4:	1152      	asrs	r2, r2, #5
 80198e6:	17db      	asrs	r3, r3, #31
 80198e8:	1ad3      	subs	r3, r2, r3
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	69bb      	ldr	r3, [r7, #24]
 80198ee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80198f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3720      	adds	r7, #32
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bdb0      	pop	{r4, r5, r7, pc}
 80198fc:	20000044 	.word	0x20000044
 8019900:	20012700 	.word	0x20012700
 8019904:	08025e20 	.word	0x08025e20
 8019908:	10624dd3 	.word	0x10624dd3

0801990c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801990c:	b5b0      	push	{r4, r5, r7, lr}
 801990e:	b08a      	sub	sp, #40	@ 0x28
 8019910:	af02      	add	r7, sp, #8
 8019912:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019918:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	2b00      	cmp	r3, #0
 801991e:	f000 8084 	beq.w	8019a2a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019922:	69fb      	ldr	r3, [r7, #28]
 8019924:	795b      	ldrb	r3, [r3, #5]
 8019926:	2b00      	cmp	r3, #0
 8019928:	f000 8081 	beq.w	8019a2e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	699b      	ldr	r3, [r3, #24]
 8019930:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019932:	69fb      	ldr	r3, [r7, #28]
 8019934:	2200      	movs	r2, #0
 8019936:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	2200      	movs	r2, #0
 801993c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801993e:	69fb      	ldr	r3, [r7, #28]
 8019940:	2200      	movs	r2, #0
 8019942:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	2200      	movs	r2, #0
 8019948:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	2200      	movs	r2, #0
 801994e:	631a      	str	r2, [r3, #48]	@ 0x30
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019960:	69fb      	ldr	r3, [r7, #28]
 8019962:	2200      	movs	r2, #0
 8019964:	829a      	strh	r2, [r3, #20]
 8019966:	69fb      	ldr	r3, [r7, #28]
 8019968:	8a9a      	ldrh	r2, [r3, #20]
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	825a      	strh	r2, [r3, #18]
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	8a5a      	ldrh	r2, [r3, #18]
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	821a      	strh	r2, [r3, #16]
 8019976:	69fb      	ldr	r3, [r7, #28]
 8019978:	8a1a      	ldrh	r2, [r3, #16]
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f000 fe1e 	bl	801a5c0 <dhcp_supplied_address>
 8019984:	4603      	mov	r3, r0
 8019986:	2b00      	cmp	r3, #0
 8019988:	d03b      	beq.n	8019a02 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801998a:	f107 030e 	add.w	r3, r7, #14
 801998e:	2207      	movs	r2, #7
 8019990:	69f9      	ldr	r1, [r7, #28]
 8019992:	6878      	ldr	r0, [r7, #4]
 8019994:	f000 fd10 	bl	801a3b8 <dhcp_create_msg>
 8019998:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801999a:	69bb      	ldr	r3, [r7, #24]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d030      	beq.n	8019a02 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80199a0:	69bb      	ldr	r3, [r7, #24]
 80199a2:	685b      	ldr	r3, [r3, #4]
 80199a4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80199a6:	89f8      	ldrh	r0, [r7, #14]
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199ae:	2304      	movs	r3, #4
 80199b0:	2236      	movs	r2, #54	@ 0x36
 80199b2:	f000 f85f 	bl	8019a74 <dhcp_option>
 80199b6:	4603      	mov	r3, r0
 80199b8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80199ba:	89fc      	ldrh	r4, [r7, #14]
 80199bc:	697b      	ldr	r3, [r7, #20]
 80199be:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80199c2:	693b      	ldr	r3, [r7, #16]
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7f5 fd38 	bl	800f43a <lwip_htonl>
 80199ca:	4603      	mov	r3, r0
 80199cc:	461a      	mov	r2, r3
 80199ce:	4629      	mov	r1, r5
 80199d0:	4620      	mov	r0, r4
 80199d2:	f000 f8db 	bl	8019b8c <dhcp_option_long>
 80199d6:	4603      	mov	r3, r0
 80199d8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80199da:	89f8      	ldrh	r0, [r7, #14]
 80199dc:	697b      	ldr	r3, [r7, #20]
 80199de:	33f0      	adds	r3, #240	@ 0xf0
 80199e0:	69ba      	ldr	r2, [r7, #24]
 80199e2:	4619      	mov	r1, r3
 80199e4:	f000 fdbe 	bl	801a564 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80199e8:	4b13      	ldr	r3, [pc, #76]	@ (8019a38 <dhcp_release_and_stop+0x12c>)
 80199ea:	6818      	ldr	r0, [r3, #0]
 80199ec:	f107 0210 	add.w	r2, r7, #16
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	9300      	str	r3, [sp, #0]
 80199f4:	2343      	movs	r3, #67	@ 0x43
 80199f6:	69b9      	ldr	r1, [r7, #24]
 80199f8:	f7fe fbfe 	bl	80181f8 <udp_sendto_if>
      pbuf_free(p_out);
 80199fc:	69b8      	ldr	r0, [r7, #24]
 80199fe:	f7f7 fbf3 	bl	80111e8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019a02:	4b0e      	ldr	r3, [pc, #56]	@ (8019a3c <dhcp_release_and_stop+0x130>)
 8019a04:	4a0d      	ldr	r2, [pc, #52]	@ (8019a3c <dhcp_release_and_stop+0x130>)
 8019a06:	490d      	ldr	r1, [pc, #52]	@ (8019a3c <dhcp_release_and_stop+0x130>)
 8019a08:	6878      	ldr	r0, [r7, #4]
 8019a0a:	f7f6 fedf 	bl	80107cc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019a0e:	2100      	movs	r1, #0
 8019a10:	69f8      	ldr	r0, [r7, #28]
 8019a12:	f000 f815 	bl	8019a40 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019a16:	69fb      	ldr	r3, [r7, #28]
 8019a18:	791b      	ldrb	r3, [r3, #4]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d008      	beq.n	8019a30 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019a1e:	f7fe ff6b 	bl	80188f8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019a22:	69fb      	ldr	r3, [r7, #28]
 8019a24:	2200      	movs	r2, #0
 8019a26:	711a      	strb	r2, [r3, #4]
 8019a28:	e002      	b.n	8019a30 <dhcp_release_and_stop+0x124>
    return;
 8019a2a:	bf00      	nop
 8019a2c:	e000      	b.n	8019a30 <dhcp_release_and_stop+0x124>
    return;
 8019a2e:	bf00      	nop
  }
}
 8019a30:	3720      	adds	r7, #32
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bdb0      	pop	{r4, r5, r7, pc}
 8019a36:	bf00      	nop
 8019a38:	20012700 	.word	0x20012700
 8019a3c:	08025e1c 	.word	0x08025e1c

08019a40 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019a40:	b480      	push	{r7}
 8019a42:	b083      	sub	sp, #12
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	795b      	ldrb	r3, [r3, #5]
 8019a50:	78fa      	ldrb	r2, [r7, #3]
 8019a52:	429a      	cmp	r2, r3
 8019a54:	d008      	beq.n	8019a68 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	78fa      	ldrb	r2, [r7, #3]
 8019a5a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	2200      	movs	r2, #0
 8019a60:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2200      	movs	r2, #0
 8019a66:	811a      	strh	r2, [r3, #8]
  }
}
 8019a68:	bf00      	nop
 8019a6a:	370c      	adds	r7, #12
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a72:	4770      	bx	lr

08019a74 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b082      	sub	sp, #8
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6039      	str	r1, [r7, #0]
 8019a7c:	4611      	mov	r1, r2
 8019a7e:	461a      	mov	r2, r3
 8019a80:	4603      	mov	r3, r0
 8019a82:	80fb      	strh	r3, [r7, #6]
 8019a84:	460b      	mov	r3, r1
 8019a86:	717b      	strb	r3, [r7, #5]
 8019a88:	4613      	mov	r3, r2
 8019a8a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019a8c:	88fa      	ldrh	r2, [r7, #6]
 8019a8e:	793b      	ldrb	r3, [r7, #4]
 8019a90:	4413      	add	r3, r2
 8019a92:	3302      	adds	r3, #2
 8019a94:	2b44      	cmp	r3, #68	@ 0x44
 8019a96:	d906      	bls.n	8019aa6 <dhcp_option+0x32>
 8019a98:	4b0d      	ldr	r3, [pc, #52]	@ (8019ad0 <dhcp_option+0x5c>)
 8019a9a:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019a9e:	490d      	ldr	r1, [pc, #52]	@ (8019ad4 <dhcp_option+0x60>)
 8019aa0:	480d      	ldr	r0, [pc, #52]	@ (8019ad8 <dhcp_option+0x64>)
 8019aa2:	f004 fc89 	bl	801e3b8 <iprintf>
  options[options_out_len++] = option_type;
 8019aa6:	88fb      	ldrh	r3, [r7, #6]
 8019aa8:	1c5a      	adds	r2, r3, #1
 8019aaa:	80fa      	strh	r2, [r7, #6]
 8019aac:	461a      	mov	r2, r3
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	4413      	add	r3, r2
 8019ab2:	797a      	ldrb	r2, [r7, #5]
 8019ab4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8019ab6:	88fb      	ldrh	r3, [r7, #6]
 8019ab8:	1c5a      	adds	r2, r3, #1
 8019aba:	80fa      	strh	r2, [r7, #6]
 8019abc:	461a      	mov	r2, r3
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	4413      	add	r3, r2
 8019ac2:	793a      	ldrb	r2, [r7, #4]
 8019ac4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019ac6:	88fb      	ldrh	r3, [r7, #6]
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3708      	adds	r7, #8
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	080250a4 	.word	0x080250a4
 8019ad4:	08025238 	.word	0x08025238
 8019ad8:	08025104 	.word	0x08025104

08019adc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b082      	sub	sp, #8
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	6039      	str	r1, [r7, #0]
 8019ae6:	80fb      	strh	r3, [r7, #6]
 8019ae8:	4613      	mov	r3, r2
 8019aea:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019aec:	88fb      	ldrh	r3, [r7, #6]
 8019aee:	2b43      	cmp	r3, #67	@ 0x43
 8019af0:	d906      	bls.n	8019b00 <dhcp_option_byte+0x24>
 8019af2:	4b0a      	ldr	r3, [pc, #40]	@ (8019b1c <dhcp_option_byte+0x40>)
 8019af4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019af8:	4909      	ldr	r1, [pc, #36]	@ (8019b20 <dhcp_option_byte+0x44>)
 8019afa:	480a      	ldr	r0, [pc, #40]	@ (8019b24 <dhcp_option_byte+0x48>)
 8019afc:	f004 fc5c 	bl	801e3b8 <iprintf>
  options[options_out_len++] = value;
 8019b00:	88fb      	ldrh	r3, [r7, #6]
 8019b02:	1c5a      	adds	r2, r3, #1
 8019b04:	80fa      	strh	r2, [r7, #6]
 8019b06:	461a      	mov	r2, r3
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	4413      	add	r3, r2
 8019b0c:	797a      	ldrb	r2, [r7, #5]
 8019b0e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b10:	88fb      	ldrh	r3, [r7, #6]
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3708      	adds	r7, #8
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	080250a4 	.word	0x080250a4
 8019b20:	0802527c 	.word	0x0802527c
 8019b24:	08025104 	.word	0x08025104

08019b28 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	4603      	mov	r3, r0
 8019b30:	6039      	str	r1, [r7, #0]
 8019b32:	80fb      	strh	r3, [r7, #6]
 8019b34:	4613      	mov	r3, r2
 8019b36:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019b38:	88fb      	ldrh	r3, [r7, #6]
 8019b3a:	3302      	adds	r3, #2
 8019b3c:	2b44      	cmp	r3, #68	@ 0x44
 8019b3e:	d906      	bls.n	8019b4e <dhcp_option_short+0x26>
 8019b40:	4b0f      	ldr	r3, [pc, #60]	@ (8019b80 <dhcp_option_short+0x58>)
 8019b42:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019b46:	490f      	ldr	r1, [pc, #60]	@ (8019b84 <dhcp_option_short+0x5c>)
 8019b48:	480f      	ldr	r0, [pc, #60]	@ (8019b88 <dhcp_option_short+0x60>)
 8019b4a:	f004 fc35 	bl	801e3b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019b4e:	88bb      	ldrh	r3, [r7, #4]
 8019b50:	0a1b      	lsrs	r3, r3, #8
 8019b52:	b29a      	uxth	r2, r3
 8019b54:	88fb      	ldrh	r3, [r7, #6]
 8019b56:	1c59      	adds	r1, r3, #1
 8019b58:	80f9      	strh	r1, [r7, #6]
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	440b      	add	r3, r1
 8019b60:	b2d2      	uxtb	r2, r2
 8019b62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019b64:	88fb      	ldrh	r3, [r7, #6]
 8019b66:	1c5a      	adds	r2, r3, #1
 8019b68:	80fa      	strh	r2, [r7, #6]
 8019b6a:	461a      	mov	r2, r3
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	4413      	add	r3, r2
 8019b70:	88ba      	ldrh	r2, [r7, #4]
 8019b72:	b2d2      	uxtb	r2, r2
 8019b74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b76:	88fb      	ldrh	r3, [r7, #6]
}
 8019b78:	4618      	mov	r0, r3
 8019b7a:	3708      	adds	r7, #8
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bd80      	pop	{r7, pc}
 8019b80:	080250a4 	.word	0x080250a4
 8019b84:	080252b4 	.word	0x080252b4
 8019b88:	08025104 	.word	0x08025104

08019b8c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	607a      	str	r2, [r7, #4]
 8019b98:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019b9a:	89fb      	ldrh	r3, [r7, #14]
 8019b9c:	3304      	adds	r3, #4
 8019b9e:	2b44      	cmp	r3, #68	@ 0x44
 8019ba0:	d906      	bls.n	8019bb0 <dhcp_option_long+0x24>
 8019ba2:	4b19      	ldr	r3, [pc, #100]	@ (8019c08 <dhcp_option_long+0x7c>)
 8019ba4:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8019ba8:	4918      	ldr	r1, [pc, #96]	@ (8019c0c <dhcp_option_long+0x80>)
 8019baa:	4819      	ldr	r0, [pc, #100]	@ (8019c10 <dhcp_option_long+0x84>)
 8019bac:	f004 fc04 	bl	801e3b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	0e1a      	lsrs	r2, r3, #24
 8019bb4:	89fb      	ldrh	r3, [r7, #14]
 8019bb6:	1c59      	adds	r1, r3, #1
 8019bb8:	81f9      	strh	r1, [r7, #14]
 8019bba:	4619      	mov	r1, r3
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	440b      	add	r3, r1
 8019bc0:	b2d2      	uxtb	r2, r2
 8019bc2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	0c1a      	lsrs	r2, r3, #16
 8019bc8:	89fb      	ldrh	r3, [r7, #14]
 8019bca:	1c59      	adds	r1, r3, #1
 8019bcc:	81f9      	strh	r1, [r7, #14]
 8019bce:	4619      	mov	r1, r3
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	440b      	add	r3, r1
 8019bd4:	b2d2      	uxtb	r2, r2
 8019bd6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	0a1a      	lsrs	r2, r3, #8
 8019bdc:	89fb      	ldrh	r3, [r7, #14]
 8019bde:	1c59      	adds	r1, r3, #1
 8019be0:	81f9      	strh	r1, [r7, #14]
 8019be2:	4619      	mov	r1, r3
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	440b      	add	r3, r1
 8019be8:	b2d2      	uxtb	r2, r2
 8019bea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019bec:	89fb      	ldrh	r3, [r7, #14]
 8019bee:	1c5a      	adds	r2, r3, #1
 8019bf0:	81fa      	strh	r2, [r7, #14]
 8019bf2:	461a      	mov	r2, r3
 8019bf4:	68bb      	ldr	r3, [r7, #8]
 8019bf6:	4413      	add	r3, r2
 8019bf8:	687a      	ldr	r2, [r7, #4]
 8019bfa:	b2d2      	uxtb	r2, r2
 8019bfc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019bfe:	89fb      	ldrh	r3, [r7, #14]
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	3710      	adds	r7, #16
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	080250a4 	.word	0x080250a4
 8019c0c:	080252f0 	.word	0x080252f0
 8019c10:	08025104 	.word	0x08025104

08019c14 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b090      	sub	sp, #64	@ 0x40
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8019c22:	2300      	movs	r3, #0
 8019c24:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019c26:	220a      	movs	r2, #10
 8019c28:	2100      	movs	r1, #0
 8019c2a:	48ba      	ldr	r0, [pc, #744]	@ (8019f14 <dhcp_parse_reply+0x300>)
 8019c2c:	f004 fc63 	bl	801e4f6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	895b      	ldrh	r3, [r3, #10]
 8019c34:	2b2b      	cmp	r3, #43	@ 0x2b
 8019c36:	d802      	bhi.n	8019c3e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019c38:	f06f 0301 	mvn.w	r3, #1
 8019c3c:	e2ea      	b.n	801a214 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	685b      	ldr	r3, [r3, #4]
 8019c42:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019c44:	23f0      	movs	r3, #240	@ 0xf0
 8019c46:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	891b      	ldrh	r3, [r3, #8]
 8019c4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c52:	e00c      	b.n	8019c6e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c56:	895b      	ldrh	r3, [r3, #10]
 8019c58:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c5a:	1ad3      	subs	r3, r2, r3
 8019c5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8019c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c60:	895b      	ldrh	r3, [r3, #10]
 8019c62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019c64:	1ad3      	subs	r3, r2, r3
 8019c66:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8019c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d004      	beq.n	8019c7e <dhcp_parse_reply+0x6a>
 8019c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c76:	895b      	ldrh	r3, [r3, #10]
 8019c78:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	d2ea      	bcs.n	8019c54 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8019c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d102      	bne.n	8019c8a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8019c84:	f06f 0301 	mvn.w	r3, #1
 8019c88:	e2c4      	b.n	801a214 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8019c8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019c8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8019c8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019c90:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8019c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c94:	685b      	ldr	r3, [r3, #4]
 8019c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019c98:	e267      	b.n	801a16a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8019c9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019c9e:	4413      	add	r3, r2
 8019ca0:	781b      	ldrb	r3, [r3, #0]
 8019ca2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8019caa:	f04f 33ff 	mov.w	r3, #4294967295
 8019cae:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019cb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cb2:	3302      	adds	r3, #2
 8019cb4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8019cb6:	8bfa      	ldrh	r2, [r7, #30]
 8019cb8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	d202      	bcs.n	8019cc4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019cbe:	f06f 0301 	mvn.w	r3, #1
 8019cc2:	e2a7      	b.n	801a214 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8019cc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cc6:	3301      	adds	r3, #1
 8019cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019cca:	8952      	ldrh	r2, [r2, #10]
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	da07      	bge.n	8019ce0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019cd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019cd6:	4413      	add	r3, r2
 8019cd8:	781b      	ldrb	r3, [r3, #0]
 8019cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019cde:	e00b      	b.n	8019cf8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d004      	beq.n	8019cf2 <dhcp_parse_reply+0xde>
 8019ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	781b      	ldrb	r3, [r3, #0]
 8019cf0:	e000      	b.n	8019cf4 <dhcp_parse_reply+0xe0>
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019cfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8019d00:	7dfb      	ldrb	r3, [r7, #23]
 8019d02:	2b3b      	cmp	r3, #59	@ 0x3b
 8019d04:	f200 815a 	bhi.w	8019fbc <dhcp_parse_reply+0x3a8>
 8019d08:	a201      	add	r2, pc, #4	@ (adr r2, 8019d10 <dhcp_parse_reply+0xfc>)
 8019d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d0e:	bf00      	nop
 8019d10:	08019e01 	.word	0x08019e01
 8019d14:	08019e11 	.word	0x08019e11
 8019d18:	08019fbd 	.word	0x08019fbd
 8019d1c:	08019e33 	.word	0x08019e33
 8019d20:	08019fbd 	.word	0x08019fbd
 8019d24:	08019fbd 	.word	0x08019fbd
 8019d28:	08019e5f 	.word	0x08019e5f
 8019d2c:	08019fbd 	.word	0x08019fbd
 8019d30:	08019fbd 	.word	0x08019fbd
 8019d34:	08019fbd 	.word	0x08019fbd
 8019d38:	08019fbd 	.word	0x08019fbd
 8019d3c:	08019fbd 	.word	0x08019fbd
 8019d40:	08019fbd 	.word	0x08019fbd
 8019d44:	08019fbd 	.word	0x08019fbd
 8019d48:	08019fbd 	.word	0x08019fbd
 8019d4c:	08019fbd 	.word	0x08019fbd
 8019d50:	08019fbd 	.word	0x08019fbd
 8019d54:	08019fbd 	.word	0x08019fbd
 8019d58:	08019fbd 	.word	0x08019fbd
 8019d5c:	08019fbd 	.word	0x08019fbd
 8019d60:	08019fbd 	.word	0x08019fbd
 8019d64:	08019fbd 	.word	0x08019fbd
 8019d68:	08019fbd 	.word	0x08019fbd
 8019d6c:	08019fbd 	.word	0x08019fbd
 8019d70:	08019fbd 	.word	0x08019fbd
 8019d74:	08019fbd 	.word	0x08019fbd
 8019d78:	08019fbd 	.word	0x08019fbd
 8019d7c:	08019fbd 	.word	0x08019fbd
 8019d80:	08019fbd 	.word	0x08019fbd
 8019d84:	08019fbd 	.word	0x08019fbd
 8019d88:	08019fbd 	.word	0x08019fbd
 8019d8c:	08019fbd 	.word	0x08019fbd
 8019d90:	08019fbd 	.word	0x08019fbd
 8019d94:	08019fbd 	.word	0x08019fbd
 8019d98:	08019fbd 	.word	0x08019fbd
 8019d9c:	08019fbd 	.word	0x08019fbd
 8019da0:	08019fbd 	.word	0x08019fbd
 8019da4:	08019fbd 	.word	0x08019fbd
 8019da8:	08019fbd 	.word	0x08019fbd
 8019dac:	08019fbd 	.word	0x08019fbd
 8019db0:	08019fbd 	.word	0x08019fbd
 8019db4:	08019fbd 	.word	0x08019fbd
 8019db8:	08019fbd 	.word	0x08019fbd
 8019dbc:	08019fbd 	.word	0x08019fbd
 8019dc0:	08019fbd 	.word	0x08019fbd
 8019dc4:	08019fbd 	.word	0x08019fbd
 8019dc8:	08019fbd 	.word	0x08019fbd
 8019dcc:	08019fbd 	.word	0x08019fbd
 8019dd0:	08019fbd 	.word	0x08019fbd
 8019dd4:	08019fbd 	.word	0x08019fbd
 8019dd8:	08019fbd 	.word	0x08019fbd
 8019ddc:	08019eb5 	.word	0x08019eb5
 8019de0:	08019ed7 	.word	0x08019ed7
 8019de4:	08019f35 	.word	0x08019f35
 8019de8:	08019f57 	.word	0x08019f57
 8019dec:	08019fbd 	.word	0x08019fbd
 8019df0:	08019fbd 	.word	0x08019fbd
 8019df4:	08019fbd 	.word	0x08019fbd
 8019df8:	08019f79 	.word	0x08019f79
 8019dfc:	08019f9b 	.word	0x08019f9b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019e00:	2300      	movs	r3, #0
 8019e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8019e0e:	e0d9      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e14:	2b04      	cmp	r3, #4
 8019e16:	d009      	beq.n	8019e2c <dhcp_parse_reply+0x218>
 8019e18:	4b3f      	ldr	r3, [pc, #252]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019e1a:	f240 622e 	movw	r2, #1582	@ 0x62e
 8019e1e:	493f      	ldr	r1, [pc, #252]	@ (8019f1c <dhcp_parse_reply+0x308>)
 8019e20:	483f      	ldr	r0, [pc, #252]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019e22:	f004 fac9 	bl	801e3b8 <iprintf>
 8019e26:	f06f 0305 	mvn.w	r3, #5
 8019e2a:	e1f3      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019e2c:	2306      	movs	r3, #6
 8019e2e:	623b      	str	r3, [r7, #32]
        break;
 8019e30:	e0c8      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019e32:	2304      	movs	r3, #4
 8019e34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019e38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019e40:	429a      	cmp	r2, r3
 8019e42:	d209      	bcs.n	8019e58 <dhcp_parse_reply+0x244>
 8019e44:	4b34      	ldr	r3, [pc, #208]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019e46:	f240 6233 	movw	r2, #1587	@ 0x633
 8019e4a:	4936      	ldr	r1, [pc, #216]	@ (8019f24 <dhcp_parse_reply+0x310>)
 8019e4c:	4834      	ldr	r0, [pc, #208]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019e4e:	f004 fab3 	bl	801e3b8 <iprintf>
 8019e52:	f06f 0305 	mvn.w	r3, #5
 8019e56:	e1dd      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019e58:	2307      	movs	r3, #7
 8019e5a:	623b      	str	r3, [r7, #32]
        break;
 8019e5c:	e0b2      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8019e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e62:	f003 0303 	and.w	r3, r3, #3
 8019e66:	b2db      	uxtb	r3, r3
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d009      	beq.n	8019e80 <dhcp_parse_reply+0x26c>
 8019e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019e6e:	f240 6239 	movw	r2, #1593	@ 0x639
 8019e72:	492d      	ldr	r1, [pc, #180]	@ (8019f28 <dhcp_parse_reply+0x314>)
 8019e74:	482a      	ldr	r0, [pc, #168]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019e76:	f004 fa9f 	bl	801e3b8 <iprintf>
 8019e7a:	f06f 0305 	mvn.w	r3, #5
 8019e7e:	e1c9      	b.n	801a214 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8019e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e84:	2b08      	cmp	r3, #8
 8019e86:	bf28      	it	cs
 8019e88:	2308      	movcs	r3, #8
 8019e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019e96:	429a      	cmp	r2, r3
 8019e98:	d209      	bcs.n	8019eae <dhcp_parse_reply+0x29a>
 8019e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019e9c:	f240 623c 	movw	r2, #1596	@ 0x63c
 8019ea0:	4920      	ldr	r1, [pc, #128]	@ (8019f24 <dhcp_parse_reply+0x310>)
 8019ea2:	481f      	ldr	r0, [pc, #124]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019ea4:	f004 fa88 	bl	801e3b8 <iprintf>
 8019ea8:	f06f 0305 	mvn.w	r3, #5
 8019eac:	e1b2      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8019eae:	2308      	movs	r3, #8
 8019eb0:	623b      	str	r3, [r7, #32]
        break;
 8019eb2:	e087      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eb8:	2b04      	cmp	r3, #4
 8019eba:	d009      	beq.n	8019ed0 <dhcp_parse_reply+0x2bc>
 8019ebc:	4b16      	ldr	r3, [pc, #88]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019ebe:	f240 6241 	movw	r2, #1601	@ 0x641
 8019ec2:	4916      	ldr	r1, [pc, #88]	@ (8019f1c <dhcp_parse_reply+0x308>)
 8019ec4:	4816      	ldr	r0, [pc, #88]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019ec6:	f004 fa77 	bl	801e3b8 <iprintf>
 8019eca:	f06f 0305 	mvn.w	r3, #5
 8019ece:	e1a1      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019ed0:	2303      	movs	r3, #3
 8019ed2:	623b      	str	r3, [r7, #32]
        break;
 8019ed4:	e076      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eda:	2b01      	cmp	r3, #1
 8019edc:	d009      	beq.n	8019ef2 <dhcp_parse_reply+0x2de>
 8019ede:	4b0e      	ldr	r3, [pc, #56]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019ee0:	f240 624f 	movw	r2, #1615	@ 0x64f
 8019ee4:	4911      	ldr	r1, [pc, #68]	@ (8019f2c <dhcp_parse_reply+0x318>)
 8019ee6:	480e      	ldr	r0, [pc, #56]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019ee8:	f004 fa66 	bl	801e3b8 <iprintf>
 8019eec:	f06f 0305 	mvn.w	r3, #5
 8019ef0:	e190      	b.n	801a214 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019ef2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019ef4:	2bf0      	cmp	r3, #240	@ 0xf0
 8019ef6:	d009      	beq.n	8019f0c <dhcp_parse_reply+0x2f8>
 8019ef8:	4b07      	ldr	r3, [pc, #28]	@ (8019f18 <dhcp_parse_reply+0x304>)
 8019efa:	f240 6251 	movw	r2, #1617	@ 0x651
 8019efe:	490c      	ldr	r1, [pc, #48]	@ (8019f30 <dhcp_parse_reply+0x31c>)
 8019f00:	4807      	ldr	r0, [pc, #28]	@ (8019f20 <dhcp_parse_reply+0x30c>)
 8019f02:	f004 fa59 	bl	801e3b8 <iprintf>
 8019f06:	f06f 0305 	mvn.w	r3, #5
 8019f0a:	e183      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	623b      	str	r3, [r7, #32]
        break;
 8019f10:	e058      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
 8019f12:	bf00      	nop
 8019f14:	200126f4 	.word	0x200126f4
 8019f18:	080250a4 	.word	0x080250a4
 8019f1c:	0802532c 	.word	0x0802532c
 8019f20:	08025104 	.word	0x08025104
 8019f24:	08025338 	.word	0x08025338
 8019f28:	0802534c 	.word	0x0802534c
 8019f2c:	0802535c 	.word	0x0802535c
 8019f30:	08025368 	.word	0x08025368
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f38:	2b01      	cmp	r3, #1
 8019f3a:	d009      	beq.n	8019f50 <dhcp_parse_reply+0x33c>
 8019f3c:	4b9d      	ldr	r3, [pc, #628]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 8019f3e:	f240 6255 	movw	r2, #1621	@ 0x655
 8019f42:	499d      	ldr	r1, [pc, #628]	@ (801a1b8 <dhcp_parse_reply+0x5a4>)
 8019f44:	489d      	ldr	r0, [pc, #628]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 8019f46:	f004 fa37 	bl	801e3b8 <iprintf>
 8019f4a:	f06f 0305 	mvn.w	r3, #5
 8019f4e:	e161      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019f50:	2301      	movs	r3, #1
 8019f52:	623b      	str	r3, [r7, #32]
        break;
 8019f54:	e036      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f5a:	2b04      	cmp	r3, #4
 8019f5c:	d009      	beq.n	8019f72 <dhcp_parse_reply+0x35e>
 8019f5e:	4b95      	ldr	r3, [pc, #596]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 8019f60:	f240 6259 	movw	r2, #1625	@ 0x659
 8019f64:	4996      	ldr	r1, [pc, #600]	@ (801a1c0 <dhcp_parse_reply+0x5ac>)
 8019f66:	4895      	ldr	r0, [pc, #596]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 8019f68:	f004 fa26 	bl	801e3b8 <iprintf>
 8019f6c:	f06f 0305 	mvn.w	r3, #5
 8019f70:	e150      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019f72:	2302      	movs	r3, #2
 8019f74:	623b      	str	r3, [r7, #32]
        break;
 8019f76:	e025      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f7c:	2b04      	cmp	r3, #4
 8019f7e:	d009      	beq.n	8019f94 <dhcp_parse_reply+0x380>
 8019f80:	4b8c      	ldr	r3, [pc, #560]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 8019f82:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019f86:	498e      	ldr	r1, [pc, #568]	@ (801a1c0 <dhcp_parse_reply+0x5ac>)
 8019f88:	488c      	ldr	r0, [pc, #560]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 8019f8a:	f004 fa15 	bl	801e3b8 <iprintf>
 8019f8e:	f06f 0305 	mvn.w	r3, #5
 8019f92:	e13f      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019f94:	2304      	movs	r3, #4
 8019f96:	623b      	str	r3, [r7, #32]
        break;
 8019f98:	e014      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f9e:	2b04      	cmp	r3, #4
 8019fa0:	d009      	beq.n	8019fb6 <dhcp_parse_reply+0x3a2>
 8019fa2:	4b84      	ldr	r3, [pc, #528]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 8019fa4:	f240 6261 	movw	r2, #1633	@ 0x661
 8019fa8:	4985      	ldr	r1, [pc, #532]	@ (801a1c0 <dhcp_parse_reply+0x5ac>)
 8019faa:	4884      	ldr	r0, [pc, #528]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 8019fac:	f004 fa04 	bl	801e3b8 <iprintf>
 8019fb0:	f06f 0305 	mvn.w	r3, #5
 8019fb4:	e12e      	b.n	801a214 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019fb6:	2305      	movs	r3, #5
 8019fb8:	623b      	str	r3, [r7, #32]
        break;
 8019fba:	e003      	b.n	8019fc4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019fc2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019fc4:	7dfb      	ldrb	r3, [r7, #23]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d103      	bne.n	8019fd2 <dhcp_parse_reply+0x3be>
      offset++;
 8019fca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019fcc:	3301      	adds	r3, #1
 8019fce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019fd0:	e0a1      	b.n	801a116 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019fd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019fd8:	4413      	add	r3, r2
 8019fda:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019fde:	4293      	cmp	r3, r2
 8019fe0:	dd02      	ble.n	8019fe8 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8019fe2:	f06f 0301 	mvn.w	r3, #1
 8019fe6:	e115      	b.n	801a214 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8019fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019ff0:	4413      	add	r3, r2
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	3302      	adds	r3, #2
 8019ff6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f000 808a 	beq.w	801a116 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801a002:	2300      	movs	r3, #0
 801a004:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801a006:	6a3b      	ldr	r3, [r7, #32]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	db02      	blt.n	801a012 <dhcp_parse_reply+0x3fe>
 801a00c:	6a3b      	ldr	r3, [r7, #32]
 801a00e:	2b09      	cmp	r3, #9
 801a010:	dd06      	ble.n	801a020 <dhcp_parse_reply+0x40c>
 801a012:	4b68      	ldr	r3, [pc, #416]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 801a014:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a018:	496a      	ldr	r1, [pc, #424]	@ (801a1c4 <dhcp_parse_reply+0x5b0>)
 801a01a:	4868      	ldr	r0, [pc, #416]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 801a01c:	f004 f9cc 	bl	801e3b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a020:	4a69      	ldr	r2, [pc, #420]	@ (801a1c8 <dhcp_parse_reply+0x5b4>)
 801a022:	6a3b      	ldr	r3, [r7, #32]
 801a024:	4413      	add	r3, r2
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d174      	bne.n	801a116 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801a02c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a030:	2b04      	cmp	r3, #4
 801a032:	bf28      	it	cs
 801a034:	2304      	movcs	r3, #4
 801a036:	b2db      	uxtb	r3, r3
 801a038:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a03a:	8bfb      	ldrh	r3, [r7, #30]
 801a03c:	8aba      	ldrh	r2, [r7, #20]
 801a03e:	f107 0108 	add.w	r1, r7, #8
 801a042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a044:	f7f7 fad6 	bl	80115f4 <pbuf_copy_partial>
 801a048:	4603      	mov	r3, r0
 801a04a:	461a      	mov	r2, r3
 801a04c:	8abb      	ldrh	r3, [r7, #20]
 801a04e:	4293      	cmp	r3, r2
 801a050:	d002      	beq.n	801a058 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801a052:	f06f 0301 	mvn.w	r3, #1
 801a056:	e0dd      	b.n	801a214 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801a058:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a05c:	2b04      	cmp	r3, #4
 801a05e:	d933      	bls.n	801a0c8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a060:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a064:	f003 0303 	and.w	r3, r3, #3
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d009      	beq.n	801a082 <dhcp_parse_reply+0x46e>
 801a06e:	4b51      	ldr	r3, [pc, #324]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 801a070:	f240 6281 	movw	r2, #1665	@ 0x681
 801a074:	4955      	ldr	r1, [pc, #340]	@ (801a1cc <dhcp_parse_reply+0x5b8>)
 801a076:	4851      	ldr	r0, [pc, #324]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 801a078:	f004 f99e 	bl	801e3b8 <iprintf>
 801a07c:	f06f 0305 	mvn.w	r3, #5
 801a080:	e0c8      	b.n	801a214 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801a082:	4a51      	ldr	r2, [pc, #324]	@ (801a1c8 <dhcp_parse_reply+0x5b4>)
 801a084:	6a3b      	ldr	r3, [r7, #32]
 801a086:	4413      	add	r3, r2
 801a088:	2201      	movs	r2, #1
 801a08a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	4618      	mov	r0, r3
 801a090:	f7f5 f9d3 	bl	800f43a <lwip_htonl>
 801a094:	4602      	mov	r2, r0
 801a096:	494e      	ldr	r1, [pc, #312]	@ (801a1d0 <dhcp_parse_reply+0x5bc>)
 801a098:	6a3b      	ldr	r3, [r7, #32]
 801a09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a09e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0a2:	3b04      	subs	r3, #4
 801a0a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a0a8:	8bfb      	ldrh	r3, [r7, #30]
 801a0aa:	3304      	adds	r3, #4
 801a0ac:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a0ae:	8a7a      	ldrh	r2, [r7, #18]
 801a0b0:	8bfb      	ldrh	r3, [r7, #30]
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d202      	bcs.n	801a0bc <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801a0b6:	f06f 0301 	mvn.w	r3, #1
 801a0ba:	e0ab      	b.n	801a214 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801a0bc:	8a7b      	ldrh	r3, [r7, #18]
 801a0be:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a0c0:	6a3b      	ldr	r3, [r7, #32]
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a0c6:	e79e      	b.n	801a006 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801a0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0cc:	2b04      	cmp	r3, #4
 801a0ce:	d106      	bne.n	801a0de <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f7f5 f9b1 	bl	800f43a <lwip_htonl>
 801a0d8:	4603      	mov	r3, r0
 801a0da:	60bb      	str	r3, [r7, #8]
 801a0dc:	e011      	b.n	801a102 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a0de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	d009      	beq.n	801a0fa <dhcp_parse_reply+0x4e6>
 801a0e6:	4b33      	ldr	r3, [pc, #204]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 801a0e8:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a0ec:	4939      	ldr	r1, [pc, #228]	@ (801a1d4 <dhcp_parse_reply+0x5c0>)
 801a0ee:	4833      	ldr	r0, [pc, #204]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 801a0f0:	f004 f962 	bl	801e3b8 <iprintf>
 801a0f4:	f06f 0305 	mvn.w	r3, #5
 801a0f8:	e08c      	b.n	801a214 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801a0fa:	f107 0308 	add.w	r3, r7, #8
 801a0fe:	781b      	ldrb	r3, [r3, #0]
 801a100:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a102:	4a31      	ldr	r2, [pc, #196]	@ (801a1c8 <dhcp_parse_reply+0x5b4>)
 801a104:	6a3b      	ldr	r3, [r7, #32]
 801a106:	4413      	add	r3, r2
 801a108:	2201      	movs	r2, #1
 801a10a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a10c:	68ba      	ldr	r2, [r7, #8]
 801a10e:	4930      	ldr	r1, [pc, #192]	@ (801a1d0 <dhcp_parse_reply+0x5bc>)
 801a110:	6a3b      	ldr	r3, [r7, #32]
 801a112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a118:	895b      	ldrh	r3, [r3, #10]
 801a11a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a11c:	429a      	cmp	r2, r3
 801a11e:	d324      	bcc.n	801a16a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a122:	895b      	ldrh	r3, [r3, #10]
 801a124:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a126:	1ad3      	subs	r3, r2, r3
 801a128:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a12c:	895b      	ldrh	r3, [r3, #10]
 801a12e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a130:	1ad3      	subs	r3, r2, r3
 801a132:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a134:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a136:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a138:	429a      	cmp	r2, r3
 801a13a:	d213      	bcs.n	801a164 <dhcp_parse_reply+0x550>
        q = q->next;
 801a13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a144:	2b00      	cmp	r3, #0
 801a146:	d109      	bne.n	801a15c <dhcp_parse_reply+0x548>
 801a148:	4b1a      	ldr	r3, [pc, #104]	@ (801a1b4 <dhcp_parse_reply+0x5a0>)
 801a14a:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a14e:	4922      	ldr	r1, [pc, #136]	@ (801a1d8 <dhcp_parse_reply+0x5c4>)
 801a150:	481a      	ldr	r0, [pc, #104]	@ (801a1bc <dhcp_parse_reply+0x5a8>)
 801a152:	f004 f931 	bl	801e3b8 <iprintf>
 801a156:	f06f 0305 	mvn.w	r3, #5
 801a15a:	e05b      	b.n	801a214 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a162:	e002      	b.n	801a16a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a164:	f06f 0301 	mvn.w	r3, #1
 801a168:	e054      	b.n	801a214 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d00a      	beq.n	801a186 <dhcp_parse_reply+0x572>
 801a170:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a172:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a174:	429a      	cmp	r2, r3
 801a176:	d206      	bcs.n	801a186 <dhcp_parse_reply+0x572>
 801a178:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a17a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a17c:	4413      	add	r3, r2
 801a17e:	781b      	ldrb	r3, [r3, #0]
 801a180:	2bff      	cmp	r3, #255	@ 0xff
 801a182:	f47f ad8a 	bne.w	8019c9a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a186:	4b10      	ldr	r3, [pc, #64]	@ (801a1c8 <dhcp_parse_reply+0x5b4>)
 801a188:	781b      	ldrb	r3, [r3, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d02d      	beq.n	801a1ea <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a18e:	4b10      	ldr	r3, [pc, #64]	@ (801a1d0 <dhcp_parse_reply+0x5bc>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a194:	4b0c      	ldr	r3, [pc, #48]	@ (801a1c8 <dhcp_parse_reply+0x5b4>)
 801a196:	2200      	movs	r2, #0
 801a198:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	2b01      	cmp	r3, #1
 801a19e:	d102      	bne.n	801a1a6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1a4:	e021      	b.n	801a1ea <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	2b02      	cmp	r3, #2
 801a1aa:	d117      	bne.n	801a1dc <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a1b0:	e01b      	b.n	801a1ea <dhcp_parse_reply+0x5d6>
 801a1b2:	bf00      	nop
 801a1b4:	080250a4 	.word	0x080250a4
 801a1b8:	0802535c 	.word	0x0802535c
 801a1bc:	08025104 	.word	0x08025104
 801a1c0:	0802532c 	.word	0x0802532c
 801a1c4:	08025380 	.word	0x08025380
 801a1c8:	200126f4 	.word	0x200126f4
 801a1cc:	08025394 	.word	0x08025394
 801a1d0:	200126cc 	.word	0x200126cc
 801a1d4:	080253ac 	.word	0x080253ac
 801a1d8:	080253c0 	.word	0x080253c0
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	2b03      	cmp	r3, #3
 801a1e0:	d103      	bne.n	801a1ea <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d006      	beq.n	801a1fe <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a1f4:	236c      	movs	r3, #108	@ 0x6c
 801a1f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a1f8:	23ec      	movs	r3, #236	@ 0xec
 801a1fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a1fc:	e527      	b.n	8019c4e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a200:	2b00      	cmp	r3, #0
 801a202:	d006      	beq.n	801a212 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 801a204:	2300      	movs	r3, #0
 801a206:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a208:	232c      	movs	r3, #44	@ 0x2c
 801a20a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a20c:	236c      	movs	r3, #108	@ 0x6c
 801a20e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a210:	e51d      	b.n	8019c4e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a212:	2300      	movs	r3, #0
}
 801a214:	4618      	mov	r0, r3
 801a216:	3740      	adds	r7, #64	@ 0x40
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b08a      	sub	sp, #40	@ 0x28
 801a220:	af00      	add	r7, sp, #0
 801a222:	60f8      	str	r0, [r7, #12]
 801a224:	60b9      	str	r1, [r7, #8]
 801a226:	607a      	str	r2, [r7, #4]
 801a228:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a22a:	4b60      	ldr	r3, [pc, #384]	@ (801a3ac <dhcp_recv+0x190>)
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a234:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a23c:	69fb      	ldr	r3, [r7, #28]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f000 809d 	beq.w	801a37e <dhcp_recv+0x162>
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	791b      	ldrb	r3, [r3, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	f000 8098 	beq.w	801a37e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	895b      	ldrh	r3, [r3, #10]
 801a252:	2b2b      	cmp	r3, #43	@ 0x2b
 801a254:	f240 8095 	bls.w	801a382 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a258:	69bb      	ldr	r3, [r7, #24]
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	2b02      	cmp	r3, #2
 801a25e:	f040 8092 	bne.w	801a386 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a262:	2300      	movs	r3, #0
 801a264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a268:	e012      	b.n	801a290 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a26a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a26e:	6a3a      	ldr	r2, [r7, #32]
 801a270:	4413      	add	r3, r2
 801a272:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a27a:	69b9      	ldr	r1, [r7, #24]
 801a27c:	440b      	add	r3, r1
 801a27e:	7f1b      	ldrb	r3, [r3, #28]
 801a280:	429a      	cmp	r2, r3
 801a282:	f040 8082 	bne.w	801a38a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a28a:	3301      	adds	r3, #1
 801a28c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a290:	6a3b      	ldr	r3, [r7, #32]
 801a292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a296:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d203      	bcs.n	801a2a6 <dhcp_recv+0x8a>
 801a29e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2a2:	2b05      	cmp	r3, #5
 801a2a4:	d9e1      	bls.n	801a26a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a2a6:	69bb      	ldr	r3, [r7, #24]
 801a2a8:	685b      	ldr	r3, [r3, #4]
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7f5 f8c5 	bl	800f43a <lwip_htonl>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	69fb      	ldr	r3, [r7, #28]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d169      	bne.n	801a38e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a2ba:	69f9      	ldr	r1, [r7, #28]
 801a2bc:	6878      	ldr	r0, [r7, #4]
 801a2be:	f7ff fca9 	bl	8019c14 <dhcp_parse_reply>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d164      	bne.n	801a392 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a2c8:	4b39      	ldr	r3, [pc, #228]	@ (801a3b0 <dhcp_recv+0x194>)
 801a2ca:	785b      	ldrb	r3, [r3, #1]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d062      	beq.n	801a396 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	685b      	ldr	r3, [r3, #4]
 801a2d4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a2d6:	4b37      	ldr	r3, [pc, #220]	@ (801a3b4 <dhcp_recv+0x198>)
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a2dc:	7cfb      	ldrb	r3, [r7, #19]
 801a2de:	2b05      	cmp	r3, #5
 801a2e0:	d12a      	bne.n	801a338 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a2e2:	69fb      	ldr	r3, [r7, #28]
 801a2e4:	795b      	ldrb	r3, [r3, #5]
 801a2e6:	2b01      	cmp	r3, #1
 801a2e8:	d112      	bne.n	801a310 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a2ea:	6979      	ldr	r1, [r7, #20]
 801a2ec:	6a38      	ldr	r0, [r7, #32]
 801a2ee:	f7fe fdcd 	bl	8018e8c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a2f2:	6a3b      	ldr	r3, [r7, #32]
 801a2f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a2f8:	f003 0308 	and.w	r3, r3, #8
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d003      	beq.n	801a308 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a300:	6a38      	ldr	r0, [r7, #32]
 801a302:	f7fe fb3d 	bl	8018980 <dhcp_check>
 801a306:	e049      	b.n	801a39c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a308:	6a38      	ldr	r0, [r7, #32]
 801a30a:	f7ff f83d 	bl	8019388 <dhcp_bind>
 801a30e:	e045      	b.n	801a39c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a310:	69fb      	ldr	r3, [r7, #28]
 801a312:	795b      	ldrb	r3, [r3, #5]
 801a314:	2b03      	cmp	r3, #3
 801a316:	d007      	beq.n	801a328 <dhcp_recv+0x10c>
 801a318:	69fb      	ldr	r3, [r7, #28]
 801a31a:	795b      	ldrb	r3, [r3, #5]
 801a31c:	2b04      	cmp	r3, #4
 801a31e:	d003      	beq.n	801a328 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a320:	69fb      	ldr	r3, [r7, #28]
 801a322:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a324:	2b05      	cmp	r3, #5
 801a326:	d139      	bne.n	801a39c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a328:	6979      	ldr	r1, [r7, #20]
 801a32a:	6a38      	ldr	r0, [r7, #32]
 801a32c:	f7fe fdae 	bl	8018e8c <dhcp_handle_ack>
      dhcp_bind(netif);
 801a330:	6a38      	ldr	r0, [r7, #32]
 801a332:	f7ff f829 	bl	8019388 <dhcp_bind>
 801a336:	e031      	b.n	801a39c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a338:	7cfb      	ldrb	r3, [r7, #19]
 801a33a:	2b06      	cmp	r3, #6
 801a33c:	d113      	bne.n	801a366 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a33e:	69fb      	ldr	r3, [r7, #28]
 801a340:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a342:	2b03      	cmp	r3, #3
 801a344:	d00b      	beq.n	801a35e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	795b      	ldrb	r3, [r3, #5]
 801a34a:	2b01      	cmp	r3, #1
 801a34c:	d007      	beq.n	801a35e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a34e:	69fb      	ldr	r3, [r7, #28]
 801a350:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a352:	2b04      	cmp	r3, #4
 801a354:	d003      	beq.n	801a35e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	795b      	ldrb	r3, [r3, #5]
 801a35a:	2b05      	cmp	r3, #5
 801a35c:	d103      	bne.n	801a366 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a35e:	6a38      	ldr	r0, [r7, #32]
 801a360:	f7fe faf4 	bl	801894c <dhcp_handle_nak>
 801a364:	e01a      	b.n	801a39c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a366:	7cfb      	ldrb	r3, [r7, #19]
 801a368:	2b02      	cmp	r3, #2
 801a36a:	d116      	bne.n	801a39a <dhcp_recv+0x17e>
 801a36c:	69fb      	ldr	r3, [r7, #28]
 801a36e:	795b      	ldrb	r3, [r3, #5]
 801a370:	2b06      	cmp	r3, #6
 801a372:	d112      	bne.n	801a39a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a374:	6979      	ldr	r1, [r7, #20]
 801a376:	6a38      	ldr	r0, [r7, #32]
 801a378:	f7fe fb36 	bl	80189e8 <dhcp_handle_offer>
 801a37c:	e00e      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a37e:	bf00      	nop
 801a380:	e00c      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a382:	bf00      	nop
 801a384:	e00a      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a386:	bf00      	nop
 801a388:	e008      	b.n	801a39c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a38a:	bf00      	nop
 801a38c:	e006      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a38e:	bf00      	nop
 801a390:	e004      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a392:	bf00      	nop
 801a394:	e002      	b.n	801a39c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a396:	bf00      	nop
 801a398:	e000      	b.n	801a39c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a39a:	bf00      	nop
  pbuf_free(p);
 801a39c:	6878      	ldr	r0, [r7, #4]
 801a39e:	f7f6 ff23 	bl	80111e8 <pbuf_free>
}
 801a3a2:	bf00      	nop
 801a3a4:	3728      	adds	r7, #40	@ 0x28
 801a3a6:	46bd      	mov	sp, r7
 801a3a8:	bd80      	pop	{r7, pc}
 801a3aa:	bf00      	nop
 801a3ac:	2000edac 	.word	0x2000edac
 801a3b0:	200126f4 	.word	0x200126f4
 801a3b4:	200126cc 	.word	0x200126cc

0801a3b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b088      	sub	sp, #32
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	60f8      	str	r0, [r7, #12]
 801a3c0:	60b9      	str	r1, [r7, #8]
 801a3c2:	603b      	str	r3, [r7, #0]
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d108      	bne.n	801a3e0 <dhcp_create_msg+0x28>
 801a3ce:	4b5f      	ldr	r3, [pc, #380]	@ (801a54c <dhcp_create_msg+0x194>)
 801a3d0:	f240 7269 	movw	r2, #1897	@ 0x769
 801a3d4:	495e      	ldr	r1, [pc, #376]	@ (801a550 <dhcp_create_msg+0x198>)
 801a3d6:	485f      	ldr	r0, [pc, #380]	@ (801a554 <dhcp_create_msg+0x19c>)
 801a3d8:	f003 ffee 	bl	801e3b8 <iprintf>
 801a3dc:	2300      	movs	r3, #0
 801a3de:	e0b1      	b.n	801a544 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d108      	bne.n	801a3f8 <dhcp_create_msg+0x40>
 801a3e6:	4b59      	ldr	r3, [pc, #356]	@ (801a54c <dhcp_create_msg+0x194>)
 801a3e8:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a3ec:	495a      	ldr	r1, [pc, #360]	@ (801a558 <dhcp_create_msg+0x1a0>)
 801a3ee:	4859      	ldr	r0, [pc, #356]	@ (801a554 <dhcp_create_msg+0x19c>)
 801a3f0:	f003 ffe2 	bl	801e3b8 <iprintf>
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	e0a5      	b.n	801a544 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a3f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a3fc:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a400:	2036      	movs	r0, #54	@ 0x36
 801a402:	f7f6 fc0d 	bl	8010c20 <pbuf_alloc>
 801a406:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a408:	69bb      	ldr	r3, [r7, #24]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d101      	bne.n	801a412 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a40e:	2300      	movs	r3, #0
 801a410:	e098      	b.n	801a544 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a412:	69bb      	ldr	r3, [r7, #24]
 801a414:	895b      	ldrh	r3, [r3, #10]
 801a416:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a41a:	d206      	bcs.n	801a42a <dhcp_create_msg+0x72>
 801a41c:	4b4b      	ldr	r3, [pc, #300]	@ (801a54c <dhcp_create_msg+0x194>)
 801a41e:	f240 7271 	movw	r2, #1905	@ 0x771
 801a422:	494e      	ldr	r1, [pc, #312]	@ (801a55c <dhcp_create_msg+0x1a4>)
 801a424:	484b      	ldr	r0, [pc, #300]	@ (801a554 <dhcp_create_msg+0x19c>)
 801a426:	f003 ffc7 	bl	801e3b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a42a:	79fb      	ldrb	r3, [r7, #7]
 801a42c:	2b03      	cmp	r3, #3
 801a42e:	d103      	bne.n	801a438 <dhcp_create_msg+0x80>
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	795b      	ldrb	r3, [r3, #5]
 801a434:	2b03      	cmp	r3, #3
 801a436:	d10d      	bne.n	801a454 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	799b      	ldrb	r3, [r3, #6]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d105      	bne.n	801a44c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a440:	f002 fec6 	bl	801d1d0 <rand>
 801a444:	4603      	mov	r3, r0
 801a446:	461a      	mov	r2, r3
 801a448:	4b45      	ldr	r3, [pc, #276]	@ (801a560 <dhcp_create_msg+0x1a8>)
 801a44a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a44c:	4b44      	ldr	r3, [pc, #272]	@ (801a560 <dhcp_create_msg+0x1a8>)
 801a44e:	681a      	ldr	r2, [r3, #0]
 801a450:	68bb      	ldr	r3, [r7, #8]
 801a452:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a454:	69bb      	ldr	r3, [r7, #24]
 801a456:	685b      	ldr	r3, [r3, #4]
 801a458:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a45a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a45e:	2100      	movs	r1, #0
 801a460:	6978      	ldr	r0, [r7, #20]
 801a462:	f004 f848 	bl	801e4f6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a466:	697b      	ldr	r3, [r7, #20]
 801a468:	2201      	movs	r2, #1
 801a46a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a46c:	697b      	ldr	r3, [r7, #20]
 801a46e:	2201      	movs	r2, #1
 801a470:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	4618      	mov	r0, r3
 801a482:	f7f4 ffda 	bl	800f43a <lwip_htonl>
 801a486:	4602      	mov	r2, r0
 801a488:	697b      	ldr	r3, [r7, #20]
 801a48a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a48c:	79fb      	ldrb	r3, [r7, #7]
 801a48e:	2b08      	cmp	r3, #8
 801a490:	d010      	beq.n	801a4b4 <dhcp_create_msg+0xfc>
 801a492:	79fb      	ldrb	r3, [r7, #7]
 801a494:	2b04      	cmp	r3, #4
 801a496:	d00d      	beq.n	801a4b4 <dhcp_create_msg+0xfc>
 801a498:	79fb      	ldrb	r3, [r7, #7]
 801a49a:	2b07      	cmp	r3, #7
 801a49c:	d00a      	beq.n	801a4b4 <dhcp_create_msg+0xfc>
 801a49e:	79fb      	ldrb	r3, [r7, #7]
 801a4a0:	2b03      	cmp	r3, #3
 801a4a2:	d10c      	bne.n	801a4be <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a4a8:	2b05      	cmp	r3, #5
 801a4aa:	d003      	beq.n	801a4b4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	795b      	ldrb	r3, [r3, #5]
 801a4b0:	2b04      	cmp	r3, #4
 801a4b2:	d104      	bne.n	801a4be <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	3304      	adds	r3, #4
 801a4b8:	681a      	ldr	r2, [r3, #0]
 801a4ba:	697b      	ldr	r3, [r7, #20]
 801a4bc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a4be:	2300      	movs	r3, #0
 801a4c0:	83fb      	strh	r3, [r7, #30]
 801a4c2:	e00c      	b.n	801a4de <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a4c4:	8bfa      	ldrh	r2, [r7, #30]
 801a4c6:	8bfb      	ldrh	r3, [r7, #30]
 801a4c8:	68f9      	ldr	r1, [r7, #12]
 801a4ca:	440a      	add	r2, r1
 801a4cc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a4d0:	697a      	ldr	r2, [r7, #20]
 801a4d2:	4413      	add	r3, r2
 801a4d4:	460a      	mov	r2, r1
 801a4d6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a4d8:	8bfb      	ldrh	r3, [r7, #30]
 801a4da:	3301      	adds	r3, #1
 801a4dc:	83fb      	strh	r3, [r7, #30]
 801a4de:	8bfb      	ldrh	r3, [r7, #30]
 801a4e0:	2b05      	cmp	r3, #5
 801a4e2:	d9ef      	bls.n	801a4c4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a4e4:	697b      	ldr	r3, [r7, #20]
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a4ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a4f6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a500:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a504:	2200      	movs	r2, #0
 801a506:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a50a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a50e:	697b      	ldr	r3, [r7, #20]
 801a510:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a514:	2301      	movs	r3, #1
 801a516:	2235      	movs	r2, #53	@ 0x35
 801a518:	2000      	movs	r0, #0
 801a51a:	f7ff faab 	bl	8019a74 <dhcp_option>
 801a51e:	4603      	mov	r3, r0
 801a520:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a522:	697b      	ldr	r3, [r7, #20]
 801a524:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a528:	79fa      	ldrb	r2, [r7, #7]
 801a52a:	8a7b      	ldrh	r3, [r7, #18]
 801a52c:	4618      	mov	r0, r3
 801a52e:	f7ff fad5 	bl	8019adc <dhcp_option_byte>
 801a532:	4603      	mov	r3, r0
 801a534:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a536:	683b      	ldr	r3, [r7, #0]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d002      	beq.n	801a542 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	8a7a      	ldrh	r2, [r7, #18]
 801a540:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a542:	69bb      	ldr	r3, [r7, #24]
}
 801a544:	4618      	mov	r0, r3
 801a546:	3720      	adds	r7, #32
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}
 801a54c:	080250a4 	.word	0x080250a4
 801a550:	080253d4 	.word	0x080253d4
 801a554:	08025104 	.word	0x08025104
 801a558:	080253f4 	.word	0x080253f4
 801a55c:	08025414 	.word	0x08025414
 801a560:	20012708 	.word	0x20012708

0801a564 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b084      	sub	sp, #16
 801a568:	af00      	add	r7, sp, #0
 801a56a:	4603      	mov	r3, r0
 801a56c:	60b9      	str	r1, [r7, #8]
 801a56e:	607a      	str	r2, [r7, #4]
 801a570:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a572:	89fb      	ldrh	r3, [r7, #14]
 801a574:	1c5a      	adds	r2, r3, #1
 801a576:	81fa      	strh	r2, [r7, #14]
 801a578:	461a      	mov	r2, r3
 801a57a:	68bb      	ldr	r3, [r7, #8]
 801a57c:	4413      	add	r3, r2
 801a57e:	22ff      	movs	r2, #255	@ 0xff
 801a580:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a582:	e007      	b.n	801a594 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a584:	89fb      	ldrh	r3, [r7, #14]
 801a586:	1c5a      	adds	r2, r3, #1
 801a588:	81fa      	strh	r2, [r7, #14]
 801a58a:	461a      	mov	r2, r3
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	4413      	add	r3, r2
 801a590:	2200      	movs	r2, #0
 801a592:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a594:	89fb      	ldrh	r3, [r7, #14]
 801a596:	2b43      	cmp	r3, #67	@ 0x43
 801a598:	d904      	bls.n	801a5a4 <dhcp_option_trailer+0x40>
 801a59a:	89fb      	ldrh	r3, [r7, #14]
 801a59c:	f003 0303 	and.w	r3, r3, #3
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d002      	beq.n	801a5aa <dhcp_option_trailer+0x46>
 801a5a4:	89fb      	ldrh	r3, [r7, #14]
 801a5a6:	2b43      	cmp	r3, #67	@ 0x43
 801a5a8:	d9ec      	bls.n	801a584 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a5aa:	89fb      	ldrh	r3, [r7, #14]
 801a5ac:	33f0      	adds	r3, #240	@ 0xf0
 801a5ae:	b29b      	uxth	r3, r3
 801a5b0:	4619      	mov	r1, r3
 801a5b2:	6878      	ldr	r0, [r7, #4]
 801a5b4:	f7f6 fc92 	bl	8010edc <pbuf_realloc>
}
 801a5b8:	bf00      	nop
 801a5ba:	3710      	adds	r7, #16
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd80      	pop	{r7, pc}

0801a5c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a5c0:	b480      	push	{r7}
 801a5c2:	b085      	sub	sp, #20
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d017      	beq.n	801a5fe <dhcp_supplied_address+0x3e>
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d013      	beq.n	801a5fe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	795b      	ldrb	r3, [r3, #5]
 801a5e0:	2b0a      	cmp	r3, #10
 801a5e2:	d007      	beq.n	801a5f4 <dhcp_supplied_address+0x34>
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	795b      	ldrb	r3, [r3, #5]
 801a5e8:	2b05      	cmp	r3, #5
 801a5ea:	d003      	beq.n	801a5f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a5f0:	2b04      	cmp	r3, #4
 801a5f2:	d101      	bne.n	801a5f8 <dhcp_supplied_address+0x38>
 801a5f4:	2301      	movs	r3, #1
 801a5f6:	e000      	b.n	801a5fa <dhcp_supplied_address+0x3a>
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	b2db      	uxtb	r3, r3
 801a5fc:	e000      	b.n	801a600 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a5fe:	2300      	movs	r3, #0
}
 801a600:	4618      	mov	r0, r3
 801a602:	3714      	adds	r7, #20
 801a604:	46bd      	mov	sp, r7
 801a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60a:	4770      	bx	lr

0801a60c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a614:	4915      	ldr	r1, [pc, #84]	@ (801a66c <etharp_free_entry+0x60>)
 801a616:	687a      	ldr	r2, [r7, #4]
 801a618:	4613      	mov	r3, r2
 801a61a:	005b      	lsls	r3, r3, #1
 801a61c:	4413      	add	r3, r2
 801a61e:	00db      	lsls	r3, r3, #3
 801a620:	440b      	add	r3, r1
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d013      	beq.n	801a650 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a628:	4910      	ldr	r1, [pc, #64]	@ (801a66c <etharp_free_entry+0x60>)
 801a62a:	687a      	ldr	r2, [r7, #4]
 801a62c:	4613      	mov	r3, r2
 801a62e:	005b      	lsls	r3, r3, #1
 801a630:	4413      	add	r3, r2
 801a632:	00db      	lsls	r3, r3, #3
 801a634:	440b      	add	r3, r1
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	4618      	mov	r0, r3
 801a63a:	f7f6 fdd5 	bl	80111e8 <pbuf_free>
    arp_table[i].q = NULL;
 801a63e:	490b      	ldr	r1, [pc, #44]	@ (801a66c <etharp_free_entry+0x60>)
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	4613      	mov	r3, r2
 801a644:	005b      	lsls	r3, r3, #1
 801a646:	4413      	add	r3, r2
 801a648:	00db      	lsls	r3, r3, #3
 801a64a:	440b      	add	r3, r1
 801a64c:	2200      	movs	r2, #0
 801a64e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a650:	4906      	ldr	r1, [pc, #24]	@ (801a66c <etharp_free_entry+0x60>)
 801a652:	687a      	ldr	r2, [r7, #4]
 801a654:	4613      	mov	r3, r2
 801a656:	005b      	lsls	r3, r3, #1
 801a658:	4413      	add	r3, r2
 801a65a:	00db      	lsls	r3, r3, #3
 801a65c:	440b      	add	r3, r1
 801a65e:	3314      	adds	r3, #20
 801a660:	2200      	movs	r2, #0
 801a662:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a664:	bf00      	nop
 801a666:	3708      	adds	r7, #8
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd80      	pop	{r7, pc}
 801a66c:	2001270c 	.word	0x2001270c

0801a670 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a676:	2300      	movs	r3, #0
 801a678:	607b      	str	r3, [r7, #4]
 801a67a:	e096      	b.n	801a7aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a67c:	494f      	ldr	r1, [pc, #316]	@ (801a7bc <etharp_tmr+0x14c>)
 801a67e:	687a      	ldr	r2, [r7, #4]
 801a680:	4613      	mov	r3, r2
 801a682:	005b      	lsls	r3, r3, #1
 801a684:	4413      	add	r3, r2
 801a686:	00db      	lsls	r3, r3, #3
 801a688:	440b      	add	r3, r1
 801a68a:	3314      	adds	r3, #20
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a690:	78fb      	ldrb	r3, [r7, #3]
 801a692:	2b00      	cmp	r3, #0
 801a694:	f000 8086 	beq.w	801a7a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a698:	4948      	ldr	r1, [pc, #288]	@ (801a7bc <etharp_tmr+0x14c>)
 801a69a:	687a      	ldr	r2, [r7, #4]
 801a69c:	4613      	mov	r3, r2
 801a69e:	005b      	lsls	r3, r3, #1
 801a6a0:	4413      	add	r3, r2
 801a6a2:	00db      	lsls	r3, r3, #3
 801a6a4:	440b      	add	r3, r1
 801a6a6:	3312      	adds	r3, #18
 801a6a8:	881b      	ldrh	r3, [r3, #0]
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	b298      	uxth	r0, r3
 801a6ae:	4943      	ldr	r1, [pc, #268]	@ (801a7bc <etharp_tmr+0x14c>)
 801a6b0:	687a      	ldr	r2, [r7, #4]
 801a6b2:	4613      	mov	r3, r2
 801a6b4:	005b      	lsls	r3, r3, #1
 801a6b6:	4413      	add	r3, r2
 801a6b8:	00db      	lsls	r3, r3, #3
 801a6ba:	440b      	add	r3, r1
 801a6bc:	3312      	adds	r3, #18
 801a6be:	4602      	mov	r2, r0
 801a6c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a6c2:	493e      	ldr	r1, [pc, #248]	@ (801a7bc <etharp_tmr+0x14c>)
 801a6c4:	687a      	ldr	r2, [r7, #4]
 801a6c6:	4613      	mov	r3, r2
 801a6c8:	005b      	lsls	r3, r3, #1
 801a6ca:	4413      	add	r3, r2
 801a6cc:	00db      	lsls	r3, r3, #3
 801a6ce:	440b      	add	r3, r1
 801a6d0:	3312      	adds	r3, #18
 801a6d2:	881b      	ldrh	r3, [r3, #0]
 801a6d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a6d8:	d215      	bcs.n	801a706 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a6da:	4938      	ldr	r1, [pc, #224]	@ (801a7bc <etharp_tmr+0x14c>)
 801a6dc:	687a      	ldr	r2, [r7, #4]
 801a6de:	4613      	mov	r3, r2
 801a6e0:	005b      	lsls	r3, r3, #1
 801a6e2:	4413      	add	r3, r2
 801a6e4:	00db      	lsls	r3, r3, #3
 801a6e6:	440b      	add	r3, r1
 801a6e8:	3314      	adds	r3, #20
 801a6ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	d10e      	bne.n	801a70e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a6f0:	4932      	ldr	r1, [pc, #200]	@ (801a7bc <etharp_tmr+0x14c>)
 801a6f2:	687a      	ldr	r2, [r7, #4]
 801a6f4:	4613      	mov	r3, r2
 801a6f6:	005b      	lsls	r3, r3, #1
 801a6f8:	4413      	add	r3, r2
 801a6fa:	00db      	lsls	r3, r3, #3
 801a6fc:	440b      	add	r3, r1
 801a6fe:	3312      	adds	r3, #18
 801a700:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a702:	2b04      	cmp	r3, #4
 801a704:	d903      	bls.n	801a70e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a706:	6878      	ldr	r0, [r7, #4]
 801a708:	f7ff ff80 	bl	801a60c <etharp_free_entry>
 801a70c:	e04a      	b.n	801a7a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a70e:	492b      	ldr	r1, [pc, #172]	@ (801a7bc <etharp_tmr+0x14c>)
 801a710:	687a      	ldr	r2, [r7, #4]
 801a712:	4613      	mov	r3, r2
 801a714:	005b      	lsls	r3, r3, #1
 801a716:	4413      	add	r3, r2
 801a718:	00db      	lsls	r3, r3, #3
 801a71a:	440b      	add	r3, r1
 801a71c:	3314      	adds	r3, #20
 801a71e:	781b      	ldrb	r3, [r3, #0]
 801a720:	2b03      	cmp	r3, #3
 801a722:	d10a      	bne.n	801a73a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a724:	4925      	ldr	r1, [pc, #148]	@ (801a7bc <etharp_tmr+0x14c>)
 801a726:	687a      	ldr	r2, [r7, #4]
 801a728:	4613      	mov	r3, r2
 801a72a:	005b      	lsls	r3, r3, #1
 801a72c:	4413      	add	r3, r2
 801a72e:	00db      	lsls	r3, r3, #3
 801a730:	440b      	add	r3, r1
 801a732:	3314      	adds	r3, #20
 801a734:	2204      	movs	r2, #4
 801a736:	701a      	strb	r2, [r3, #0]
 801a738:	e034      	b.n	801a7a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a73a:	4920      	ldr	r1, [pc, #128]	@ (801a7bc <etharp_tmr+0x14c>)
 801a73c:	687a      	ldr	r2, [r7, #4]
 801a73e:	4613      	mov	r3, r2
 801a740:	005b      	lsls	r3, r3, #1
 801a742:	4413      	add	r3, r2
 801a744:	00db      	lsls	r3, r3, #3
 801a746:	440b      	add	r3, r1
 801a748:	3314      	adds	r3, #20
 801a74a:	781b      	ldrb	r3, [r3, #0]
 801a74c:	2b04      	cmp	r3, #4
 801a74e:	d10a      	bne.n	801a766 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a750:	491a      	ldr	r1, [pc, #104]	@ (801a7bc <etharp_tmr+0x14c>)
 801a752:	687a      	ldr	r2, [r7, #4]
 801a754:	4613      	mov	r3, r2
 801a756:	005b      	lsls	r3, r3, #1
 801a758:	4413      	add	r3, r2
 801a75a:	00db      	lsls	r3, r3, #3
 801a75c:	440b      	add	r3, r1
 801a75e:	3314      	adds	r3, #20
 801a760:	2202      	movs	r2, #2
 801a762:	701a      	strb	r2, [r3, #0]
 801a764:	e01e      	b.n	801a7a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a766:	4915      	ldr	r1, [pc, #84]	@ (801a7bc <etharp_tmr+0x14c>)
 801a768:	687a      	ldr	r2, [r7, #4]
 801a76a:	4613      	mov	r3, r2
 801a76c:	005b      	lsls	r3, r3, #1
 801a76e:	4413      	add	r3, r2
 801a770:	00db      	lsls	r3, r3, #3
 801a772:	440b      	add	r3, r1
 801a774:	3314      	adds	r3, #20
 801a776:	781b      	ldrb	r3, [r3, #0]
 801a778:	2b01      	cmp	r3, #1
 801a77a:	d113      	bne.n	801a7a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a77c:	490f      	ldr	r1, [pc, #60]	@ (801a7bc <etharp_tmr+0x14c>)
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	4613      	mov	r3, r2
 801a782:	005b      	lsls	r3, r3, #1
 801a784:	4413      	add	r3, r2
 801a786:	00db      	lsls	r3, r3, #3
 801a788:	440b      	add	r3, r1
 801a78a:	3308      	adds	r3, #8
 801a78c:	6818      	ldr	r0, [r3, #0]
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	4613      	mov	r3, r2
 801a792:	005b      	lsls	r3, r3, #1
 801a794:	4413      	add	r3, r2
 801a796:	00db      	lsls	r3, r3, #3
 801a798:	4a08      	ldr	r2, [pc, #32]	@ (801a7bc <etharp_tmr+0x14c>)
 801a79a:	4413      	add	r3, r2
 801a79c:	3304      	adds	r3, #4
 801a79e:	4619      	mov	r1, r3
 801a7a0:	f000 fe72 	bl	801b488 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	3301      	adds	r3, #1
 801a7a8:	607b      	str	r3, [r7, #4]
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	2b09      	cmp	r3, #9
 801a7ae:	f77f af65 	ble.w	801a67c <etharp_tmr+0xc>
      }
    }
  }
}
 801a7b2:	bf00      	nop
 801a7b4:	bf00      	nop
 801a7b6:	3708      	adds	r7, #8
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}
 801a7bc:	2001270c 	.word	0x2001270c

0801a7c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b08a      	sub	sp, #40	@ 0x28
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	60f8      	str	r0, [r7, #12]
 801a7c8:	460b      	mov	r3, r1
 801a7ca:	607a      	str	r2, [r7, #4]
 801a7cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a7ce:	230a      	movs	r3, #10
 801a7d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a7d2:	230a      	movs	r3, #10
 801a7d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a7d6:	230a      	movs	r3, #10
 801a7d8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a7de:	230a      	movs	r3, #10
 801a7e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	83bb      	strh	r3, [r7, #28]
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	837b      	strh	r3, [r7, #26]
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	843b      	strh	r3, [r7, #32]
 801a7f2:	e0ae      	b.n	801a952 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a7f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7f8:	49a6      	ldr	r1, [pc, #664]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a7fa:	4613      	mov	r3, r2
 801a7fc:	005b      	lsls	r3, r3, #1
 801a7fe:	4413      	add	r3, r2
 801a800:	00db      	lsls	r3, r3, #3
 801a802:	440b      	add	r3, r1
 801a804:	3314      	adds	r3, #20
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a80a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a80e:	2b0a      	cmp	r3, #10
 801a810:	d105      	bne.n	801a81e <etharp_find_entry+0x5e>
 801a812:	7dfb      	ldrb	r3, [r7, #23]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d102      	bne.n	801a81e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a818:	8c3b      	ldrh	r3, [r7, #32]
 801a81a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a81c:	e095      	b.n	801a94a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a81e:	7dfb      	ldrb	r3, [r7, #23]
 801a820:	2b00      	cmp	r3, #0
 801a822:	f000 8092 	beq.w	801a94a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a826:	7dfb      	ldrb	r3, [r7, #23]
 801a828:	2b01      	cmp	r3, #1
 801a82a:	d009      	beq.n	801a840 <etharp_find_entry+0x80>
 801a82c:	7dfb      	ldrb	r3, [r7, #23]
 801a82e:	2b01      	cmp	r3, #1
 801a830:	d806      	bhi.n	801a840 <etharp_find_entry+0x80>
 801a832:	4b99      	ldr	r3, [pc, #612]	@ (801aa98 <etharp_find_entry+0x2d8>)
 801a834:	f240 1223 	movw	r2, #291	@ 0x123
 801a838:	4998      	ldr	r1, [pc, #608]	@ (801aa9c <etharp_find_entry+0x2dc>)
 801a83a:	4899      	ldr	r0, [pc, #612]	@ (801aaa0 <etharp_find_entry+0x2e0>)
 801a83c:	f003 fdbc 	bl	801e3b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d020      	beq.n	801a888 <etharp_find_entry+0xc8>
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	6819      	ldr	r1, [r3, #0]
 801a84a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a84e:	4891      	ldr	r0, [pc, #580]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a850:	4613      	mov	r3, r2
 801a852:	005b      	lsls	r3, r3, #1
 801a854:	4413      	add	r3, r2
 801a856:	00db      	lsls	r3, r3, #3
 801a858:	4403      	add	r3, r0
 801a85a:	3304      	adds	r3, #4
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	4299      	cmp	r1, r3
 801a860:	d112      	bne.n	801a888 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d00c      	beq.n	801a882 <etharp_find_entry+0xc2>
 801a868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a86c:	4989      	ldr	r1, [pc, #548]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a86e:	4613      	mov	r3, r2
 801a870:	005b      	lsls	r3, r3, #1
 801a872:	4413      	add	r3, r2
 801a874:	00db      	lsls	r3, r3, #3
 801a876:	440b      	add	r3, r1
 801a878:	3308      	adds	r3, #8
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	687a      	ldr	r2, [r7, #4]
 801a87e:	429a      	cmp	r2, r3
 801a880:	d102      	bne.n	801a888 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a886:	e100      	b.n	801aa8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a888:	7dfb      	ldrb	r3, [r7, #23]
 801a88a:	2b01      	cmp	r3, #1
 801a88c:	d140      	bne.n	801a910 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a88e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a892:	4980      	ldr	r1, [pc, #512]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a894:	4613      	mov	r3, r2
 801a896:	005b      	lsls	r3, r3, #1
 801a898:	4413      	add	r3, r2
 801a89a:	00db      	lsls	r3, r3, #3
 801a89c:	440b      	add	r3, r1
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d01a      	beq.n	801a8da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a8a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8a8:	497a      	ldr	r1, [pc, #488]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a8aa:	4613      	mov	r3, r2
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	4413      	add	r3, r2
 801a8b0:	00db      	lsls	r3, r3, #3
 801a8b2:	440b      	add	r3, r1
 801a8b4:	3312      	adds	r3, #18
 801a8b6:	881b      	ldrh	r3, [r3, #0]
 801a8b8:	8bba      	ldrh	r2, [r7, #28]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d845      	bhi.n	801a94a <etharp_find_entry+0x18a>
            old_queue = i;
 801a8be:	8c3b      	ldrh	r3, [r7, #32]
 801a8c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a8c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8c6:	4973      	ldr	r1, [pc, #460]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a8c8:	4613      	mov	r3, r2
 801a8ca:	005b      	lsls	r3, r3, #1
 801a8cc:	4413      	add	r3, r2
 801a8ce:	00db      	lsls	r3, r3, #3
 801a8d0:	440b      	add	r3, r1
 801a8d2:	3312      	adds	r3, #18
 801a8d4:	881b      	ldrh	r3, [r3, #0]
 801a8d6:	83bb      	strh	r3, [r7, #28]
 801a8d8:	e037      	b.n	801a94a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a8da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8de:	496d      	ldr	r1, [pc, #436]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a8e0:	4613      	mov	r3, r2
 801a8e2:	005b      	lsls	r3, r3, #1
 801a8e4:	4413      	add	r3, r2
 801a8e6:	00db      	lsls	r3, r3, #3
 801a8e8:	440b      	add	r3, r1
 801a8ea:	3312      	adds	r3, #18
 801a8ec:	881b      	ldrh	r3, [r3, #0]
 801a8ee:	8b7a      	ldrh	r2, [r7, #26]
 801a8f0:	429a      	cmp	r2, r3
 801a8f2:	d82a      	bhi.n	801a94a <etharp_find_entry+0x18a>
            old_pending = i;
 801a8f4:	8c3b      	ldrh	r3, [r7, #32]
 801a8f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a8f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8fc:	4965      	ldr	r1, [pc, #404]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a8fe:	4613      	mov	r3, r2
 801a900:	005b      	lsls	r3, r3, #1
 801a902:	4413      	add	r3, r2
 801a904:	00db      	lsls	r3, r3, #3
 801a906:	440b      	add	r3, r1
 801a908:	3312      	adds	r3, #18
 801a90a:	881b      	ldrh	r3, [r3, #0]
 801a90c:	837b      	strh	r3, [r7, #26]
 801a90e:	e01c      	b.n	801a94a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a910:	7dfb      	ldrb	r3, [r7, #23]
 801a912:	2b01      	cmp	r3, #1
 801a914:	d919      	bls.n	801a94a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a91a:	495e      	ldr	r1, [pc, #376]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a91c:	4613      	mov	r3, r2
 801a91e:	005b      	lsls	r3, r3, #1
 801a920:	4413      	add	r3, r2
 801a922:	00db      	lsls	r3, r3, #3
 801a924:	440b      	add	r3, r1
 801a926:	3312      	adds	r3, #18
 801a928:	881b      	ldrh	r3, [r3, #0]
 801a92a:	8b3a      	ldrh	r2, [r7, #24]
 801a92c:	429a      	cmp	r2, r3
 801a92e:	d80c      	bhi.n	801a94a <etharp_find_entry+0x18a>
            old_stable = i;
 801a930:	8c3b      	ldrh	r3, [r7, #32]
 801a932:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a938:	4956      	ldr	r1, [pc, #344]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a93a:	4613      	mov	r3, r2
 801a93c:	005b      	lsls	r3, r3, #1
 801a93e:	4413      	add	r3, r2
 801a940:	00db      	lsls	r3, r3, #3
 801a942:	440b      	add	r3, r1
 801a944:	3312      	adds	r3, #18
 801a946:	881b      	ldrh	r3, [r3, #0]
 801a948:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a94a:	8c3b      	ldrh	r3, [r7, #32]
 801a94c:	3301      	adds	r3, #1
 801a94e:	b29b      	uxth	r3, r3
 801a950:	843b      	strh	r3, [r7, #32]
 801a952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a956:	2b09      	cmp	r3, #9
 801a958:	f77f af4c 	ble.w	801a7f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a95c:	7afb      	ldrb	r3, [r7, #11]
 801a95e:	f003 0302 	and.w	r3, r3, #2
 801a962:	2b00      	cmp	r3, #0
 801a964:	d108      	bne.n	801a978 <etharp_find_entry+0x1b8>
 801a966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a96a:	2b0a      	cmp	r3, #10
 801a96c:	d107      	bne.n	801a97e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a96e:	7afb      	ldrb	r3, [r7, #11]
 801a970:	f003 0301 	and.w	r3, r3, #1
 801a974:	2b00      	cmp	r3, #0
 801a976:	d102      	bne.n	801a97e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a978:	f04f 33ff 	mov.w	r3, #4294967295
 801a97c:	e085      	b.n	801aa8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a97e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a982:	2b09      	cmp	r3, #9
 801a984:	dc02      	bgt.n	801a98c <etharp_find_entry+0x1cc>
    i = empty;
 801a986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a988:	843b      	strh	r3, [r7, #32]
 801a98a:	e039      	b.n	801aa00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a98c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a990:	2b09      	cmp	r3, #9
 801a992:	dc14      	bgt.n	801a9be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a996:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a99c:	493d      	ldr	r1, [pc, #244]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801a99e:	4613      	mov	r3, r2
 801a9a0:	005b      	lsls	r3, r3, #1
 801a9a2:	4413      	add	r3, r2
 801a9a4:	00db      	lsls	r3, r3, #3
 801a9a6:	440b      	add	r3, r1
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d018      	beq.n	801a9e0 <etharp_find_entry+0x220>
 801a9ae:	4b3a      	ldr	r3, [pc, #232]	@ (801aa98 <etharp_find_entry+0x2d8>)
 801a9b0:	f240 126d 	movw	r2, #365	@ 0x16d
 801a9b4:	493b      	ldr	r1, [pc, #236]	@ (801aaa4 <etharp_find_entry+0x2e4>)
 801a9b6:	483a      	ldr	r0, [pc, #232]	@ (801aaa0 <etharp_find_entry+0x2e0>)
 801a9b8:	f003 fcfe 	bl	801e3b8 <iprintf>
 801a9bc:	e010      	b.n	801a9e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a9be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a9c2:	2b09      	cmp	r3, #9
 801a9c4:	dc02      	bgt.n	801a9cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a9c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a9c8:	843b      	strh	r3, [r7, #32]
 801a9ca:	e009      	b.n	801a9e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a9cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a9d0:	2b09      	cmp	r3, #9
 801a9d2:	dc02      	bgt.n	801a9da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a9d4:	8bfb      	ldrh	r3, [r7, #30]
 801a9d6:	843b      	strh	r3, [r7, #32]
 801a9d8:	e002      	b.n	801a9e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a9da:	f04f 33ff 	mov.w	r3, #4294967295
 801a9de:	e054      	b.n	801aa8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a9e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a9e4:	2b09      	cmp	r3, #9
 801a9e6:	dd06      	ble.n	801a9f6 <etharp_find_entry+0x236>
 801a9e8:	4b2b      	ldr	r3, [pc, #172]	@ (801aa98 <etharp_find_entry+0x2d8>)
 801a9ea:	f240 127f 	movw	r2, #383	@ 0x17f
 801a9ee:	492e      	ldr	r1, [pc, #184]	@ (801aaa8 <etharp_find_entry+0x2e8>)
 801a9f0:	482b      	ldr	r0, [pc, #172]	@ (801aaa0 <etharp_find_entry+0x2e0>)
 801a9f2:	f003 fce1 	bl	801e3b8 <iprintf>
    etharp_free_entry(i);
 801a9f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7ff fe06 	bl	801a60c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801aa00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aa04:	2b09      	cmp	r3, #9
 801aa06:	dd06      	ble.n	801aa16 <etharp_find_entry+0x256>
 801aa08:	4b23      	ldr	r3, [pc, #140]	@ (801aa98 <etharp_find_entry+0x2d8>)
 801aa0a:	f240 1283 	movw	r2, #387	@ 0x183
 801aa0e:	4926      	ldr	r1, [pc, #152]	@ (801aaa8 <etharp_find_entry+0x2e8>)
 801aa10:	4823      	ldr	r0, [pc, #140]	@ (801aaa0 <etharp_find_entry+0x2e0>)
 801aa12:	f003 fcd1 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801aa16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa1a:	491e      	ldr	r1, [pc, #120]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801aa1c:	4613      	mov	r3, r2
 801aa1e:	005b      	lsls	r3, r3, #1
 801aa20:	4413      	add	r3, r2
 801aa22:	00db      	lsls	r3, r3, #3
 801aa24:	440b      	add	r3, r1
 801aa26:	3314      	adds	r3, #20
 801aa28:	781b      	ldrb	r3, [r3, #0]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d006      	beq.n	801aa3c <etharp_find_entry+0x27c>
 801aa2e:	4b1a      	ldr	r3, [pc, #104]	@ (801aa98 <etharp_find_entry+0x2d8>)
 801aa30:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801aa34:	491d      	ldr	r1, [pc, #116]	@ (801aaac <etharp_find_entry+0x2ec>)
 801aa36:	481a      	ldr	r0, [pc, #104]	@ (801aaa0 <etharp_find_entry+0x2e0>)
 801aa38:	f003 fcbe 	bl	801e3b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d00b      	beq.n	801aa5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801aa42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	6819      	ldr	r1, [r3, #0]
 801aa4a:	4812      	ldr	r0, [pc, #72]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801aa4c:	4613      	mov	r3, r2
 801aa4e:	005b      	lsls	r3, r3, #1
 801aa50:	4413      	add	r3, r2
 801aa52:	00db      	lsls	r3, r3, #3
 801aa54:	4403      	add	r3, r0
 801aa56:	3304      	adds	r3, #4
 801aa58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801aa5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa5e:	490d      	ldr	r1, [pc, #52]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801aa60:	4613      	mov	r3, r2
 801aa62:	005b      	lsls	r3, r3, #1
 801aa64:	4413      	add	r3, r2
 801aa66:	00db      	lsls	r3, r3, #3
 801aa68:	440b      	add	r3, r1
 801aa6a:	3312      	adds	r3, #18
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aa70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa74:	4907      	ldr	r1, [pc, #28]	@ (801aa94 <etharp_find_entry+0x2d4>)
 801aa76:	4613      	mov	r3, r2
 801aa78:	005b      	lsls	r3, r3, #1
 801aa7a:	4413      	add	r3, r2
 801aa7c:	00db      	lsls	r3, r3, #3
 801aa7e:	440b      	add	r3, r1
 801aa80:	3308      	adds	r3, #8
 801aa82:	687a      	ldr	r2, [r7, #4]
 801aa84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aa86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	3728      	adds	r7, #40	@ 0x28
 801aa8e:	46bd      	mov	sp, r7
 801aa90:	bd80      	pop	{r7, pc}
 801aa92:	bf00      	nop
 801aa94:	2001270c 	.word	0x2001270c
 801aa98:	08025454 	.word	0x08025454
 801aa9c:	0802548c 	.word	0x0802548c
 801aaa0:	080254cc 	.word	0x080254cc
 801aaa4:	080254f4 	.word	0x080254f4
 801aaa8:	0802550c 	.word	0x0802550c
 801aaac:	08025520 	.word	0x08025520

0801aab0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b088      	sub	sp, #32
 801aab4:	af02      	add	r7, sp, #8
 801aab6:	60f8      	str	r0, [r7, #12]
 801aab8:	60b9      	str	r1, [r7, #8]
 801aaba:	607a      	str	r2, [r7, #4]
 801aabc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aac4:	2b06      	cmp	r3, #6
 801aac6:	d006      	beq.n	801aad6 <etharp_update_arp_entry+0x26>
 801aac8:	4b48      	ldr	r3, [pc, #288]	@ (801abec <etharp_update_arp_entry+0x13c>)
 801aaca:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801aace:	4948      	ldr	r1, [pc, #288]	@ (801abf0 <etharp_update_arp_entry+0x140>)
 801aad0:	4848      	ldr	r0, [pc, #288]	@ (801abf4 <etharp_update_arp_entry+0x144>)
 801aad2:	f003 fc71 	bl	801e3b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d012      	beq.n	801ab02 <etharp_update_arp_entry+0x52>
 801aadc:	68bb      	ldr	r3, [r7, #8]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d00e      	beq.n	801ab02 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	68f9      	ldr	r1, [r7, #12]
 801aaea:	4618      	mov	r0, r3
 801aaec:	f001 f920 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801aaf0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d105      	bne.n	801ab02 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801aaf6:	68bb      	ldr	r3, [r7, #8]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aafe:	2be0      	cmp	r3, #224	@ 0xe0
 801ab00:	d102      	bne.n	801ab08 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ab02:	f06f 030f 	mvn.w	r3, #15
 801ab06:	e06c      	b.n	801abe2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ab08:	78fb      	ldrb	r3, [r7, #3]
 801ab0a:	68fa      	ldr	r2, [r7, #12]
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	68b8      	ldr	r0, [r7, #8]
 801ab10:	f7ff fe56 	bl	801a7c0 <etharp_find_entry>
 801ab14:	4603      	mov	r3, r0
 801ab16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ab18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	da02      	bge.n	801ab26 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ab20:	8afb      	ldrh	r3, [r7, #22]
 801ab22:	b25b      	sxtb	r3, r3
 801ab24:	e05d      	b.n	801abe2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ab26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab2a:	4933      	ldr	r1, [pc, #204]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801ab2c:	4613      	mov	r3, r2
 801ab2e:	005b      	lsls	r3, r3, #1
 801ab30:	4413      	add	r3, r2
 801ab32:	00db      	lsls	r3, r3, #3
 801ab34:	440b      	add	r3, r1
 801ab36:	3314      	adds	r3, #20
 801ab38:	2202      	movs	r2, #2
 801ab3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ab3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab40:	492d      	ldr	r1, [pc, #180]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801ab42:	4613      	mov	r3, r2
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	4413      	add	r3, r2
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	440b      	add	r3, r1
 801ab4c:	3308      	adds	r3, #8
 801ab4e:	68fa      	ldr	r2, [r7, #12]
 801ab50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ab52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab56:	4613      	mov	r3, r2
 801ab58:	005b      	lsls	r3, r3, #1
 801ab5a:	4413      	add	r3, r2
 801ab5c:	00db      	lsls	r3, r3, #3
 801ab5e:	3308      	adds	r3, #8
 801ab60:	4a25      	ldr	r2, [pc, #148]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801ab62:	4413      	add	r3, r2
 801ab64:	3304      	adds	r3, #4
 801ab66:	2206      	movs	r2, #6
 801ab68:	6879      	ldr	r1, [r7, #4]
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f003 fdc5 	bl	801e6fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ab70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab74:	4920      	ldr	r1, [pc, #128]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801ab76:	4613      	mov	r3, r2
 801ab78:	005b      	lsls	r3, r3, #1
 801ab7a:	4413      	add	r3, r2
 801ab7c:	00db      	lsls	r3, r3, #3
 801ab7e:	440b      	add	r3, r1
 801ab80:	3312      	adds	r3, #18
 801ab82:	2200      	movs	r2, #0
 801ab84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ab86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab8a:	491b      	ldr	r1, [pc, #108]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801ab8c:	4613      	mov	r3, r2
 801ab8e:	005b      	lsls	r3, r3, #1
 801ab90:	4413      	add	r3, r2
 801ab92:	00db      	lsls	r3, r3, #3
 801ab94:	440b      	add	r3, r1
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d021      	beq.n	801abe0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ab9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aba0:	4915      	ldr	r1, [pc, #84]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801aba2:	4613      	mov	r3, r2
 801aba4:	005b      	lsls	r3, r3, #1
 801aba6:	4413      	add	r3, r2
 801aba8:	00db      	lsls	r3, r3, #3
 801abaa:	440b      	add	r3, r1
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801abb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801abb4:	4910      	ldr	r1, [pc, #64]	@ (801abf8 <etharp_update_arp_entry+0x148>)
 801abb6:	4613      	mov	r3, r2
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	4413      	add	r3, r2
 801abbc:	00db      	lsls	r3, r3, #3
 801abbe:	440b      	add	r3, r1
 801abc0:	2200      	movs	r2, #0
 801abc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801abca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801abce:	9300      	str	r3, [sp, #0]
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	6939      	ldr	r1, [r7, #16]
 801abd4:	68f8      	ldr	r0, [r7, #12]
 801abd6:	f002 f8e3 	bl	801cda0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801abda:	6938      	ldr	r0, [r7, #16]
 801abdc:	f7f6 fb04 	bl	80111e8 <pbuf_free>
  }
  return ERR_OK;
 801abe0:	2300      	movs	r3, #0
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	3718      	adds	r7, #24
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	08025454 	.word	0x08025454
 801abf0:	0802554c 	.word	0x0802554c
 801abf4:	080254cc 	.word	0x080254cc
 801abf8:	2001270c 	.word	0x2001270c

0801abfc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac04:	2300      	movs	r3, #0
 801ac06:	60fb      	str	r3, [r7, #12]
 801ac08:	e01e      	b.n	801ac48 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801ac0a:	4913      	ldr	r1, [pc, #76]	@ (801ac58 <etharp_cleanup_netif+0x5c>)
 801ac0c:	68fa      	ldr	r2, [r7, #12]
 801ac0e:	4613      	mov	r3, r2
 801ac10:	005b      	lsls	r3, r3, #1
 801ac12:	4413      	add	r3, r2
 801ac14:	00db      	lsls	r3, r3, #3
 801ac16:	440b      	add	r3, r1
 801ac18:	3314      	adds	r3, #20
 801ac1a:	781b      	ldrb	r3, [r3, #0]
 801ac1c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ac1e:	7afb      	ldrb	r3, [r7, #11]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d00e      	beq.n	801ac42 <etharp_cleanup_netif+0x46>
 801ac24:	490c      	ldr	r1, [pc, #48]	@ (801ac58 <etharp_cleanup_netif+0x5c>)
 801ac26:	68fa      	ldr	r2, [r7, #12]
 801ac28:	4613      	mov	r3, r2
 801ac2a:	005b      	lsls	r3, r3, #1
 801ac2c:	4413      	add	r3, r2
 801ac2e:	00db      	lsls	r3, r3, #3
 801ac30:	440b      	add	r3, r1
 801ac32:	3308      	adds	r3, #8
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	d102      	bne.n	801ac42 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ac3c:	68f8      	ldr	r0, [r7, #12]
 801ac3e:	f7ff fce5 	bl	801a60c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	3301      	adds	r3, #1
 801ac46:	60fb      	str	r3, [r7, #12]
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	2b09      	cmp	r3, #9
 801ac4c:	dddd      	ble.n	801ac0a <etharp_cleanup_netif+0xe>
    }
  }
}
 801ac4e:	bf00      	nop
 801ac50:	bf00      	nop
 801ac52:	3710      	adds	r7, #16
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bd80      	pop	{r7, pc}
 801ac58:	2001270c 	.word	0x2001270c

0801ac5c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ac5c:	b5b0      	push	{r4, r5, r7, lr}
 801ac5e:	b08a      	sub	sp, #40	@ 0x28
 801ac60:	af04      	add	r7, sp, #16
 801ac62:	6078      	str	r0, [r7, #4]
 801ac64:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d107      	bne.n	801ac7c <etharp_input+0x20>
 801ac6c:	4b3f      	ldr	r3, [pc, #252]	@ (801ad6c <etharp_input+0x110>)
 801ac6e:	f240 228a 	movw	r2, #650	@ 0x28a
 801ac72:	493f      	ldr	r1, [pc, #252]	@ (801ad70 <etharp_input+0x114>)
 801ac74:	483f      	ldr	r0, [pc, #252]	@ (801ad74 <etharp_input+0x118>)
 801ac76:	f003 fb9f 	bl	801e3b8 <iprintf>
 801ac7a:	e074      	b.n	801ad66 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	685b      	ldr	r3, [r3, #4]
 801ac80:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	881b      	ldrh	r3, [r3, #0]
 801ac86:	b29b      	uxth	r3, r3
 801ac88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ac8c:	d10c      	bne.n	801aca8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac8e:	693b      	ldr	r3, [r7, #16]
 801ac90:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac92:	2b06      	cmp	r3, #6
 801ac94:	d108      	bne.n	801aca8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ac96:	693b      	ldr	r3, [r7, #16]
 801ac98:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac9a:	2b04      	cmp	r3, #4
 801ac9c:	d104      	bne.n	801aca8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ac9e:	693b      	ldr	r3, [r7, #16]
 801aca0:	885b      	ldrh	r3, [r3, #2]
 801aca2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801aca4:	2b08      	cmp	r3, #8
 801aca6:	d003      	beq.n	801acb0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7f6 fa9d 	bl	80111e8 <pbuf_free>
    return;
 801acae:	e05a      	b.n	801ad66 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801acb0:	693b      	ldr	r3, [r7, #16]
 801acb2:	330e      	adds	r3, #14
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	3318      	adds	r3, #24
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	3304      	adds	r3, #4
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d102      	bne.n	801acd0 <etharp_input+0x74>
    for_us = 0;
 801acca:	2300      	movs	r3, #0
 801accc:	75fb      	strb	r3, [r7, #23]
 801acce:	e009      	b.n	801ace4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801acd0:	68ba      	ldr	r2, [r7, #8]
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	3304      	adds	r3, #4
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	429a      	cmp	r2, r3
 801acda:	bf0c      	ite	eq
 801acdc:	2301      	moveq	r3, #1
 801acde:	2300      	movne	r3, #0
 801ace0:	b2db      	uxtb	r3, r3
 801ace2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ace4:	693b      	ldr	r3, [r7, #16]
 801ace6:	f103 0208 	add.w	r2, r3, #8
 801acea:	7dfb      	ldrb	r3, [r7, #23]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d001      	beq.n	801acf4 <etharp_input+0x98>
 801acf0:	2301      	movs	r3, #1
 801acf2:	e000      	b.n	801acf6 <etharp_input+0x9a>
 801acf4:	2302      	movs	r3, #2
 801acf6:	f107 010c 	add.w	r1, r7, #12
 801acfa:	6838      	ldr	r0, [r7, #0]
 801acfc:	f7ff fed8 	bl	801aab0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	88db      	ldrh	r3, [r3, #6]
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ad0a:	d003      	beq.n	801ad14 <etharp_input+0xb8>
 801ad0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ad10:	d01e      	beq.n	801ad50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ad12:	e025      	b.n	801ad60 <etharp_input+0x104>
      if (for_us) {
 801ad14:	7dfb      	ldrb	r3, [r7, #23]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d021      	beq.n	801ad5e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801ad20:	693b      	ldr	r3, [r7, #16]
 801ad22:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801ad2c:	683b      	ldr	r3, [r7, #0]
 801ad2e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ad30:	693a      	ldr	r2, [r7, #16]
 801ad32:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ad34:	2102      	movs	r1, #2
 801ad36:	9103      	str	r1, [sp, #12]
 801ad38:	f107 010c 	add.w	r1, r7, #12
 801ad3c:	9102      	str	r1, [sp, #8]
 801ad3e:	9201      	str	r2, [sp, #4]
 801ad40:	9300      	str	r3, [sp, #0]
 801ad42:	462b      	mov	r3, r5
 801ad44:	4622      	mov	r2, r4
 801ad46:	4601      	mov	r1, r0
 801ad48:	6838      	ldr	r0, [r7, #0]
 801ad4a:	f000 faef 	bl	801b32c <etharp_raw>
      break;
 801ad4e:	e006      	b.n	801ad5e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801ad50:	f107 030c 	add.w	r3, r7, #12
 801ad54:	4619      	mov	r1, r3
 801ad56:	6838      	ldr	r0, [r7, #0]
 801ad58:	f7fe f9d2 	bl	8019100 <dhcp_arp_reply>
      break;
 801ad5c:	e000      	b.n	801ad60 <etharp_input+0x104>
      break;
 801ad5e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ad60:	6878      	ldr	r0, [r7, #4]
 801ad62:	f7f6 fa41 	bl	80111e8 <pbuf_free>
}
 801ad66:	3718      	adds	r7, #24
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ad6c:	08025454 	.word	0x08025454
 801ad70:	080255a4 	.word	0x080255a4
 801ad74:	080254cc 	.word	0x080254cc

0801ad78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b086      	sub	sp, #24
 801ad7c:	af02      	add	r7, sp, #8
 801ad7e:	60f8      	str	r0, [r7, #12]
 801ad80:	60b9      	str	r1, [r7, #8]
 801ad82:	4613      	mov	r3, r2
 801ad84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad86:	79fa      	ldrb	r2, [r7, #7]
 801ad88:	4944      	ldr	r1, [pc, #272]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ad8a:	4613      	mov	r3, r2
 801ad8c:	005b      	lsls	r3, r3, #1
 801ad8e:	4413      	add	r3, r2
 801ad90:	00db      	lsls	r3, r3, #3
 801ad92:	440b      	add	r3, r1
 801ad94:	3314      	adds	r3, #20
 801ad96:	781b      	ldrb	r3, [r3, #0]
 801ad98:	2b01      	cmp	r3, #1
 801ad9a:	d806      	bhi.n	801adaa <etharp_output_to_arp_index+0x32>
 801ad9c:	4b40      	ldr	r3, [pc, #256]	@ (801aea0 <etharp_output_to_arp_index+0x128>)
 801ad9e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801ada2:	4940      	ldr	r1, [pc, #256]	@ (801aea4 <etharp_output_to_arp_index+0x12c>)
 801ada4:	4840      	ldr	r0, [pc, #256]	@ (801aea8 <etharp_output_to_arp_index+0x130>)
 801ada6:	f003 fb07 	bl	801e3b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801adaa:	79fa      	ldrb	r2, [r7, #7]
 801adac:	493b      	ldr	r1, [pc, #236]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801adae:	4613      	mov	r3, r2
 801adb0:	005b      	lsls	r3, r3, #1
 801adb2:	4413      	add	r3, r2
 801adb4:	00db      	lsls	r3, r3, #3
 801adb6:	440b      	add	r3, r1
 801adb8:	3314      	adds	r3, #20
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	2b02      	cmp	r3, #2
 801adbe:	d153      	bne.n	801ae68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801adc0:	79fa      	ldrb	r2, [r7, #7]
 801adc2:	4936      	ldr	r1, [pc, #216]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801adc4:	4613      	mov	r3, r2
 801adc6:	005b      	lsls	r3, r3, #1
 801adc8:	4413      	add	r3, r2
 801adca:	00db      	lsls	r3, r3, #3
 801adcc:	440b      	add	r3, r1
 801adce:	3312      	adds	r3, #18
 801add0:	881b      	ldrh	r3, [r3, #0]
 801add2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801add6:	d919      	bls.n	801ae0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801add8:	79fa      	ldrb	r2, [r7, #7]
 801adda:	4613      	mov	r3, r2
 801addc:	005b      	lsls	r3, r3, #1
 801adde:	4413      	add	r3, r2
 801ade0:	00db      	lsls	r3, r3, #3
 801ade2:	4a2e      	ldr	r2, [pc, #184]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ade4:	4413      	add	r3, r2
 801ade6:	3304      	adds	r3, #4
 801ade8:	4619      	mov	r1, r3
 801adea:	68f8      	ldr	r0, [r7, #12]
 801adec:	f000 fb4c 	bl	801b488 <etharp_request>
 801adf0:	4603      	mov	r3, r0
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d138      	bne.n	801ae68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801adf6:	79fa      	ldrb	r2, [r7, #7]
 801adf8:	4928      	ldr	r1, [pc, #160]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801adfa:	4613      	mov	r3, r2
 801adfc:	005b      	lsls	r3, r3, #1
 801adfe:	4413      	add	r3, r2
 801ae00:	00db      	lsls	r3, r3, #3
 801ae02:	440b      	add	r3, r1
 801ae04:	3314      	adds	r3, #20
 801ae06:	2203      	movs	r2, #3
 801ae08:	701a      	strb	r2, [r3, #0]
 801ae0a:	e02d      	b.n	801ae68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801ae0c:	79fa      	ldrb	r2, [r7, #7]
 801ae0e:	4923      	ldr	r1, [pc, #140]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ae10:	4613      	mov	r3, r2
 801ae12:	005b      	lsls	r3, r3, #1
 801ae14:	4413      	add	r3, r2
 801ae16:	00db      	lsls	r3, r3, #3
 801ae18:	440b      	add	r3, r1
 801ae1a:	3312      	adds	r3, #18
 801ae1c:	881b      	ldrh	r3, [r3, #0]
 801ae1e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801ae22:	d321      	bcc.n	801ae68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ae24:	79fa      	ldrb	r2, [r7, #7]
 801ae26:	4613      	mov	r3, r2
 801ae28:	005b      	lsls	r3, r3, #1
 801ae2a:	4413      	add	r3, r2
 801ae2c:	00db      	lsls	r3, r3, #3
 801ae2e:	4a1b      	ldr	r2, [pc, #108]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ae30:	4413      	add	r3, r2
 801ae32:	1d19      	adds	r1, r3, #4
 801ae34:	79fa      	ldrb	r2, [r7, #7]
 801ae36:	4613      	mov	r3, r2
 801ae38:	005b      	lsls	r3, r3, #1
 801ae3a:	4413      	add	r3, r2
 801ae3c:	00db      	lsls	r3, r3, #3
 801ae3e:	3308      	adds	r3, #8
 801ae40:	4a16      	ldr	r2, [pc, #88]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ae42:	4413      	add	r3, r2
 801ae44:	3304      	adds	r3, #4
 801ae46:	461a      	mov	r2, r3
 801ae48:	68f8      	ldr	r0, [r7, #12]
 801ae4a:	f000 fafb 	bl	801b444 <etharp_request_dst>
 801ae4e:	4603      	mov	r3, r0
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d109      	bne.n	801ae68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ae54:	79fa      	ldrb	r2, [r7, #7]
 801ae56:	4911      	ldr	r1, [pc, #68]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ae58:	4613      	mov	r3, r2
 801ae5a:	005b      	lsls	r3, r3, #1
 801ae5c:	4413      	add	r3, r2
 801ae5e:	00db      	lsls	r3, r3, #3
 801ae60:	440b      	add	r3, r1
 801ae62:	3314      	adds	r3, #20
 801ae64:	2203      	movs	r2, #3
 801ae66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801ae6e:	79fa      	ldrb	r2, [r7, #7]
 801ae70:	4613      	mov	r3, r2
 801ae72:	005b      	lsls	r3, r3, #1
 801ae74:	4413      	add	r3, r2
 801ae76:	00db      	lsls	r3, r3, #3
 801ae78:	3308      	adds	r3, #8
 801ae7a:	4a08      	ldr	r2, [pc, #32]	@ (801ae9c <etharp_output_to_arp_index+0x124>)
 801ae7c:	4413      	add	r3, r2
 801ae7e:	3304      	adds	r3, #4
 801ae80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae84:	9200      	str	r2, [sp, #0]
 801ae86:	460a      	mov	r2, r1
 801ae88:	68b9      	ldr	r1, [r7, #8]
 801ae8a:	68f8      	ldr	r0, [r7, #12]
 801ae8c:	f001 ff88 	bl	801cda0 <ethernet_output>
 801ae90:	4603      	mov	r3, r0
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3710      	adds	r7, #16
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
 801ae9a:	bf00      	nop
 801ae9c:	2001270c 	.word	0x2001270c
 801aea0:	08025454 	.word	0x08025454
 801aea4:	080255c4 	.word	0x080255c4
 801aea8:	080254cc 	.word	0x080254cc

0801aeac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b08a      	sub	sp, #40	@ 0x28
 801aeb0:	af02      	add	r7, sp, #8
 801aeb2:	60f8      	str	r0, [r7, #12]
 801aeb4:	60b9      	str	r1, [r7, #8]
 801aeb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d106      	bne.n	801aed0 <etharp_output+0x24>
 801aec2:	4b73      	ldr	r3, [pc, #460]	@ (801b090 <etharp_output+0x1e4>)
 801aec4:	f240 321e 	movw	r2, #798	@ 0x31e
 801aec8:	4972      	ldr	r1, [pc, #456]	@ (801b094 <etharp_output+0x1e8>)
 801aeca:	4873      	ldr	r0, [pc, #460]	@ (801b098 <etharp_output+0x1ec>)
 801aecc:	f003 fa74 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d106      	bne.n	801aee4 <etharp_output+0x38>
 801aed6:	4b6e      	ldr	r3, [pc, #440]	@ (801b090 <etharp_output+0x1e4>)
 801aed8:	f240 321f 	movw	r2, #799	@ 0x31f
 801aedc:	496f      	ldr	r1, [pc, #444]	@ (801b09c <etharp_output+0x1f0>)
 801aede:	486e      	ldr	r0, [pc, #440]	@ (801b098 <etharp_output+0x1ec>)
 801aee0:	f003 fa6a 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d106      	bne.n	801aef8 <etharp_output+0x4c>
 801aeea:	4b69      	ldr	r3, [pc, #420]	@ (801b090 <etharp_output+0x1e4>)
 801aeec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801aef0:	496b      	ldr	r1, [pc, #428]	@ (801b0a0 <etharp_output+0x1f4>)
 801aef2:	4869      	ldr	r0, [pc, #420]	@ (801b098 <etharp_output+0x1ec>)
 801aef4:	f003 fa60 	bl	801e3b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	68f9      	ldr	r1, [r7, #12]
 801aefe:	4618      	mov	r0, r3
 801af00:	f000 ff16 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801af04:	4603      	mov	r3, r0
 801af06:	2b00      	cmp	r3, #0
 801af08:	d002      	beq.n	801af10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801af0a:	4b66      	ldr	r3, [pc, #408]	@ (801b0a4 <etharp_output+0x1f8>)
 801af0c:	61fb      	str	r3, [r7, #28]
 801af0e:	e0af      	b.n	801b070 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801af18:	2be0      	cmp	r3, #224	@ 0xe0
 801af1a:	d118      	bne.n	801af4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801af1c:	2301      	movs	r3, #1
 801af1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801af20:	2300      	movs	r3, #0
 801af22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801af24:	235e      	movs	r3, #94	@ 0x5e
 801af26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	3301      	adds	r3, #1
 801af2c:	781b      	ldrb	r3, [r3, #0]
 801af2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801af32:	b2db      	uxtb	r3, r3
 801af34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	3302      	adds	r3, #2
 801af3a:	781b      	ldrb	r3, [r3, #0]
 801af3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	3303      	adds	r3, #3
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801af46:	f107 0310 	add.w	r3, r7, #16
 801af4a:	61fb      	str	r3, [r7, #28]
 801af4c:	e090      	b.n	801b070 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	681a      	ldr	r2, [r3, #0]
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	3304      	adds	r3, #4
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	405a      	eors	r2, r3
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	3308      	adds	r3, #8
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	4013      	ands	r3, r2
 801af62:	2b00      	cmp	r3, #0
 801af64:	d012      	beq.n	801af8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801af6c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801af70:	4293      	cmp	r3, r2
 801af72:	d00b      	beq.n	801af8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	330c      	adds	r3, #12
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d003      	beq.n	801af86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	330c      	adds	r3, #12
 801af82:	61bb      	str	r3, [r7, #24]
 801af84:	e002      	b.n	801af8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801af86:	f06f 0303 	mvn.w	r3, #3
 801af8a:	e07d      	b.n	801b088 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801af8c:	4b46      	ldr	r3, [pc, #280]	@ (801b0a8 <etharp_output+0x1fc>)
 801af8e:	781b      	ldrb	r3, [r3, #0]
 801af90:	4619      	mov	r1, r3
 801af92:	4a46      	ldr	r2, [pc, #280]	@ (801b0ac <etharp_output+0x200>)
 801af94:	460b      	mov	r3, r1
 801af96:	005b      	lsls	r3, r3, #1
 801af98:	440b      	add	r3, r1
 801af9a:	00db      	lsls	r3, r3, #3
 801af9c:	4413      	add	r3, r2
 801af9e:	3314      	adds	r3, #20
 801afa0:	781b      	ldrb	r3, [r3, #0]
 801afa2:	2b01      	cmp	r3, #1
 801afa4:	d925      	bls.n	801aff2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801afa6:	4b40      	ldr	r3, [pc, #256]	@ (801b0a8 <etharp_output+0x1fc>)
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	4619      	mov	r1, r3
 801afac:	4a3f      	ldr	r2, [pc, #252]	@ (801b0ac <etharp_output+0x200>)
 801afae:	460b      	mov	r3, r1
 801afb0:	005b      	lsls	r3, r3, #1
 801afb2:	440b      	add	r3, r1
 801afb4:	00db      	lsls	r3, r3, #3
 801afb6:	4413      	add	r3, r2
 801afb8:	3308      	adds	r3, #8
 801afba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801afbc:	68fa      	ldr	r2, [r7, #12]
 801afbe:	429a      	cmp	r2, r3
 801afc0:	d117      	bne.n	801aff2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801afc2:	69bb      	ldr	r3, [r7, #24]
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	4b38      	ldr	r3, [pc, #224]	@ (801b0a8 <etharp_output+0x1fc>)
 801afc8:	781b      	ldrb	r3, [r3, #0]
 801afca:	4618      	mov	r0, r3
 801afcc:	4937      	ldr	r1, [pc, #220]	@ (801b0ac <etharp_output+0x200>)
 801afce:	4603      	mov	r3, r0
 801afd0:	005b      	lsls	r3, r3, #1
 801afd2:	4403      	add	r3, r0
 801afd4:	00db      	lsls	r3, r3, #3
 801afd6:	440b      	add	r3, r1
 801afd8:	3304      	adds	r3, #4
 801afda:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801afdc:	429a      	cmp	r2, r3
 801afde:	d108      	bne.n	801aff2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801afe0:	4b31      	ldr	r3, [pc, #196]	@ (801b0a8 <etharp_output+0x1fc>)
 801afe2:	781b      	ldrb	r3, [r3, #0]
 801afe4:	461a      	mov	r2, r3
 801afe6:	68b9      	ldr	r1, [r7, #8]
 801afe8:	68f8      	ldr	r0, [r7, #12]
 801afea:	f7ff fec5 	bl	801ad78 <etharp_output_to_arp_index>
 801afee:	4603      	mov	r3, r0
 801aff0:	e04a      	b.n	801b088 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aff2:	2300      	movs	r3, #0
 801aff4:	75fb      	strb	r3, [r7, #23]
 801aff6:	e031      	b.n	801b05c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aff8:	7dfa      	ldrb	r2, [r7, #23]
 801affa:	492c      	ldr	r1, [pc, #176]	@ (801b0ac <etharp_output+0x200>)
 801affc:	4613      	mov	r3, r2
 801affe:	005b      	lsls	r3, r3, #1
 801b000:	4413      	add	r3, r2
 801b002:	00db      	lsls	r3, r3, #3
 801b004:	440b      	add	r3, r1
 801b006:	3314      	adds	r3, #20
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	2b01      	cmp	r3, #1
 801b00c:	d923      	bls.n	801b056 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b00e:	7dfa      	ldrb	r2, [r7, #23]
 801b010:	4926      	ldr	r1, [pc, #152]	@ (801b0ac <etharp_output+0x200>)
 801b012:	4613      	mov	r3, r2
 801b014:	005b      	lsls	r3, r3, #1
 801b016:	4413      	add	r3, r2
 801b018:	00db      	lsls	r3, r3, #3
 801b01a:	440b      	add	r3, r1
 801b01c:	3308      	adds	r3, #8
 801b01e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	429a      	cmp	r2, r3
 801b024:	d117      	bne.n	801b056 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b026:	69bb      	ldr	r3, [r7, #24]
 801b028:	6819      	ldr	r1, [r3, #0]
 801b02a:	7dfa      	ldrb	r2, [r7, #23]
 801b02c:	481f      	ldr	r0, [pc, #124]	@ (801b0ac <etharp_output+0x200>)
 801b02e:	4613      	mov	r3, r2
 801b030:	005b      	lsls	r3, r3, #1
 801b032:	4413      	add	r3, r2
 801b034:	00db      	lsls	r3, r3, #3
 801b036:	4403      	add	r3, r0
 801b038:	3304      	adds	r3, #4
 801b03a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b03c:	4299      	cmp	r1, r3
 801b03e:	d10a      	bne.n	801b056 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b040:	4a19      	ldr	r2, [pc, #100]	@ (801b0a8 <etharp_output+0x1fc>)
 801b042:	7dfb      	ldrb	r3, [r7, #23]
 801b044:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b046:	7dfb      	ldrb	r3, [r7, #23]
 801b048:	461a      	mov	r2, r3
 801b04a:	68b9      	ldr	r1, [r7, #8]
 801b04c:	68f8      	ldr	r0, [r7, #12]
 801b04e:	f7ff fe93 	bl	801ad78 <etharp_output_to_arp_index>
 801b052:	4603      	mov	r3, r0
 801b054:	e018      	b.n	801b088 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b056:	7dfb      	ldrb	r3, [r7, #23]
 801b058:	3301      	adds	r3, #1
 801b05a:	75fb      	strb	r3, [r7, #23]
 801b05c:	7dfb      	ldrb	r3, [r7, #23]
 801b05e:	2b09      	cmp	r3, #9
 801b060:	d9ca      	bls.n	801aff8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b062:	68ba      	ldr	r2, [r7, #8]
 801b064:	69b9      	ldr	r1, [r7, #24]
 801b066:	68f8      	ldr	r0, [r7, #12]
 801b068:	f000 f822 	bl	801b0b0 <etharp_query>
 801b06c:	4603      	mov	r3, r0
 801b06e:	e00b      	b.n	801b088 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b076:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b07a:	9300      	str	r3, [sp, #0]
 801b07c:	69fb      	ldr	r3, [r7, #28]
 801b07e:	68b9      	ldr	r1, [r7, #8]
 801b080:	68f8      	ldr	r0, [r7, #12]
 801b082:	f001 fe8d 	bl	801cda0 <ethernet_output>
 801b086:	4603      	mov	r3, r0
}
 801b088:	4618      	mov	r0, r3
 801b08a:	3720      	adds	r7, #32
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd80      	pop	{r7, pc}
 801b090:	08025454 	.word	0x08025454
 801b094:	080255a4 	.word	0x080255a4
 801b098:	080254cc 	.word	0x080254cc
 801b09c:	080255f4 	.word	0x080255f4
 801b0a0:	08025594 	.word	0x08025594
 801b0a4:	08025e24 	.word	0x08025e24
 801b0a8:	200127fc 	.word	0x200127fc
 801b0ac:	2001270c 	.word	0x2001270c

0801b0b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b08c      	sub	sp, #48	@ 0x30
 801b0b4:	af02      	add	r7, sp, #8
 801b0b6:	60f8      	str	r0, [r7, #12]
 801b0b8:	60b9      	str	r1, [r7, #8]
 801b0ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	332a      	adds	r3, #42	@ 0x2a
 801b0c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b0c2:	23ff      	movs	r3, #255	@ 0xff
 801b0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	68f9      	ldr	r1, [r7, #12]
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	f000 fe2c 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d10c      	bne.n	801b0f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b0de:	68bb      	ldr	r3, [r7, #8]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0e6:	2be0      	cmp	r3, #224	@ 0xe0
 801b0e8:	d006      	beq.n	801b0f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b0ea:	68bb      	ldr	r3, [r7, #8]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d003      	beq.n	801b0f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d102      	bne.n	801b0fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b0f8:	f06f 030f 	mvn.w	r3, #15
 801b0fc:	e101      	b.n	801b302 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b0fe:	68fa      	ldr	r2, [r7, #12]
 801b100:	2101      	movs	r1, #1
 801b102:	68b8      	ldr	r0, [r7, #8]
 801b104:	f7ff fb5c 	bl	801a7c0 <etharp_find_entry>
 801b108:	4603      	mov	r3, r0
 801b10a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b10c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b110:	2b00      	cmp	r3, #0
 801b112:	da02      	bge.n	801b11a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b114:	8a7b      	ldrh	r3, [r7, #18]
 801b116:	b25b      	sxtb	r3, r3
 801b118:	e0f3      	b.n	801b302 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b11a:	8a7b      	ldrh	r3, [r7, #18]
 801b11c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b11e:	d906      	bls.n	801b12e <etharp_query+0x7e>
 801b120:	4b7a      	ldr	r3, [pc, #488]	@ (801b30c <etharp_query+0x25c>)
 801b122:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b126:	497a      	ldr	r1, [pc, #488]	@ (801b310 <etharp_query+0x260>)
 801b128:	487a      	ldr	r0, [pc, #488]	@ (801b314 <etharp_query+0x264>)
 801b12a:	f003 f945 	bl	801e3b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b12e:	8a7b      	ldrh	r3, [r7, #18]
 801b130:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b132:	7c7a      	ldrb	r2, [r7, #17]
 801b134:	4978      	ldr	r1, [pc, #480]	@ (801b318 <etharp_query+0x268>)
 801b136:	4613      	mov	r3, r2
 801b138:	005b      	lsls	r3, r3, #1
 801b13a:	4413      	add	r3, r2
 801b13c:	00db      	lsls	r3, r3, #3
 801b13e:	440b      	add	r3, r1
 801b140:	3314      	adds	r3, #20
 801b142:	781b      	ldrb	r3, [r3, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d115      	bne.n	801b174 <etharp_query+0xc4>
    is_new_entry = 1;
 801b148:	2301      	movs	r3, #1
 801b14a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b14c:	7c7a      	ldrb	r2, [r7, #17]
 801b14e:	4972      	ldr	r1, [pc, #456]	@ (801b318 <etharp_query+0x268>)
 801b150:	4613      	mov	r3, r2
 801b152:	005b      	lsls	r3, r3, #1
 801b154:	4413      	add	r3, r2
 801b156:	00db      	lsls	r3, r3, #3
 801b158:	440b      	add	r3, r1
 801b15a:	3314      	adds	r3, #20
 801b15c:	2201      	movs	r2, #1
 801b15e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b160:	7c7a      	ldrb	r2, [r7, #17]
 801b162:	496d      	ldr	r1, [pc, #436]	@ (801b318 <etharp_query+0x268>)
 801b164:	4613      	mov	r3, r2
 801b166:	005b      	lsls	r3, r3, #1
 801b168:	4413      	add	r3, r2
 801b16a:	00db      	lsls	r3, r3, #3
 801b16c:	440b      	add	r3, r1
 801b16e:	3308      	adds	r3, #8
 801b170:	68fa      	ldr	r2, [r7, #12]
 801b172:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b174:	7c7a      	ldrb	r2, [r7, #17]
 801b176:	4968      	ldr	r1, [pc, #416]	@ (801b318 <etharp_query+0x268>)
 801b178:	4613      	mov	r3, r2
 801b17a:	005b      	lsls	r3, r3, #1
 801b17c:	4413      	add	r3, r2
 801b17e:	00db      	lsls	r3, r3, #3
 801b180:	440b      	add	r3, r1
 801b182:	3314      	adds	r3, #20
 801b184:	781b      	ldrb	r3, [r3, #0]
 801b186:	2b01      	cmp	r3, #1
 801b188:	d011      	beq.n	801b1ae <etharp_query+0xfe>
 801b18a:	7c7a      	ldrb	r2, [r7, #17]
 801b18c:	4962      	ldr	r1, [pc, #392]	@ (801b318 <etharp_query+0x268>)
 801b18e:	4613      	mov	r3, r2
 801b190:	005b      	lsls	r3, r3, #1
 801b192:	4413      	add	r3, r2
 801b194:	00db      	lsls	r3, r3, #3
 801b196:	440b      	add	r3, r1
 801b198:	3314      	adds	r3, #20
 801b19a:	781b      	ldrb	r3, [r3, #0]
 801b19c:	2b01      	cmp	r3, #1
 801b19e:	d806      	bhi.n	801b1ae <etharp_query+0xfe>
 801b1a0:	4b5a      	ldr	r3, [pc, #360]	@ (801b30c <etharp_query+0x25c>)
 801b1a2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b1a6:	495d      	ldr	r1, [pc, #372]	@ (801b31c <etharp_query+0x26c>)
 801b1a8:	485a      	ldr	r0, [pc, #360]	@ (801b314 <etharp_query+0x264>)
 801b1aa:	f003 f905 	bl	801e3b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b1ae:	6a3b      	ldr	r3, [r7, #32]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d102      	bne.n	801b1ba <etharp_query+0x10a>
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d10c      	bne.n	801b1d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b1ba:	68b9      	ldr	r1, [r7, #8]
 801b1bc:	68f8      	ldr	r0, [r7, #12]
 801b1be:	f000 f963 	bl	801b488 <etharp_request>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d102      	bne.n	801b1d4 <etharp_query+0x124>
      return result;
 801b1ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b1d2:	e096      	b.n	801b302 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d106      	bne.n	801b1e8 <etharp_query+0x138>
 801b1da:	4b4c      	ldr	r3, [pc, #304]	@ (801b30c <etharp_query+0x25c>)
 801b1dc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b1e0:	494f      	ldr	r1, [pc, #316]	@ (801b320 <etharp_query+0x270>)
 801b1e2:	484c      	ldr	r0, [pc, #304]	@ (801b314 <etharp_query+0x264>)
 801b1e4:	f003 f8e8 	bl	801e3b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b1e8:	7c7a      	ldrb	r2, [r7, #17]
 801b1ea:	494b      	ldr	r1, [pc, #300]	@ (801b318 <etharp_query+0x268>)
 801b1ec:	4613      	mov	r3, r2
 801b1ee:	005b      	lsls	r3, r3, #1
 801b1f0:	4413      	add	r3, r2
 801b1f2:	00db      	lsls	r3, r3, #3
 801b1f4:	440b      	add	r3, r1
 801b1f6:	3314      	adds	r3, #20
 801b1f8:	781b      	ldrb	r3, [r3, #0]
 801b1fa:	2b01      	cmp	r3, #1
 801b1fc:	d917      	bls.n	801b22e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b1fe:	4a49      	ldr	r2, [pc, #292]	@ (801b324 <etharp_query+0x274>)
 801b200:	7c7b      	ldrb	r3, [r7, #17]
 801b202:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b204:	7c7a      	ldrb	r2, [r7, #17]
 801b206:	4613      	mov	r3, r2
 801b208:	005b      	lsls	r3, r3, #1
 801b20a:	4413      	add	r3, r2
 801b20c:	00db      	lsls	r3, r3, #3
 801b20e:	3308      	adds	r3, #8
 801b210:	4a41      	ldr	r2, [pc, #260]	@ (801b318 <etharp_query+0x268>)
 801b212:	4413      	add	r3, r2
 801b214:	3304      	adds	r3, #4
 801b216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b21a:	9200      	str	r2, [sp, #0]
 801b21c:	697a      	ldr	r2, [r7, #20]
 801b21e:	6879      	ldr	r1, [r7, #4]
 801b220:	68f8      	ldr	r0, [r7, #12]
 801b222:	f001 fdbd 	bl	801cda0 <ethernet_output>
 801b226:	4603      	mov	r3, r0
 801b228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b22c:	e067      	b.n	801b2fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b22e:	7c7a      	ldrb	r2, [r7, #17]
 801b230:	4939      	ldr	r1, [pc, #228]	@ (801b318 <etharp_query+0x268>)
 801b232:	4613      	mov	r3, r2
 801b234:	005b      	lsls	r3, r3, #1
 801b236:	4413      	add	r3, r2
 801b238:	00db      	lsls	r3, r3, #3
 801b23a:	440b      	add	r3, r1
 801b23c:	3314      	adds	r3, #20
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	2b01      	cmp	r3, #1
 801b242:	d15c      	bne.n	801b2fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b244:	2300      	movs	r3, #0
 801b246:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b24c:	e01c      	b.n	801b288 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b24e:	69fb      	ldr	r3, [r7, #28]
 801b250:	895a      	ldrh	r2, [r3, #10]
 801b252:	69fb      	ldr	r3, [r7, #28]
 801b254:	891b      	ldrh	r3, [r3, #8]
 801b256:	429a      	cmp	r2, r3
 801b258:	d10a      	bne.n	801b270 <etharp_query+0x1c0>
 801b25a:	69fb      	ldr	r3, [r7, #28]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d006      	beq.n	801b270 <etharp_query+0x1c0>
 801b262:	4b2a      	ldr	r3, [pc, #168]	@ (801b30c <etharp_query+0x25c>)
 801b264:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b268:	492f      	ldr	r1, [pc, #188]	@ (801b328 <etharp_query+0x278>)
 801b26a:	482a      	ldr	r0, [pc, #168]	@ (801b314 <etharp_query+0x264>)
 801b26c:	f003 f8a4 	bl	801e3b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b270:	69fb      	ldr	r3, [r7, #28]
 801b272:	7b1b      	ldrb	r3, [r3, #12]
 801b274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d002      	beq.n	801b282 <etharp_query+0x1d2>
        copy_needed = 1;
 801b27c:	2301      	movs	r3, #1
 801b27e:	61bb      	str	r3, [r7, #24]
        break;
 801b280:	e005      	b.n	801b28e <etharp_query+0x1de>
      }
      p = p->next;
 801b282:	69fb      	ldr	r3, [r7, #28]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b288:	69fb      	ldr	r3, [r7, #28]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d1df      	bne.n	801b24e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b28e:	69bb      	ldr	r3, [r7, #24]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d007      	beq.n	801b2a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b294:	687a      	ldr	r2, [r7, #4]
 801b296:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b29a:	200e      	movs	r0, #14
 801b29c:	f7f6 fb54 	bl	8011948 <pbuf_clone>
 801b2a0:	61f8      	str	r0, [r7, #28]
 801b2a2:	e004      	b.n	801b2ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b2a8:	69f8      	ldr	r0, [r7, #28]
 801b2aa:	f7f6 f843 	bl	8011334 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b2ae:	69fb      	ldr	r3, [r7, #28]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d021      	beq.n	801b2f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b2b4:	7c7a      	ldrb	r2, [r7, #17]
 801b2b6:	4918      	ldr	r1, [pc, #96]	@ (801b318 <etharp_query+0x268>)
 801b2b8:	4613      	mov	r3, r2
 801b2ba:	005b      	lsls	r3, r3, #1
 801b2bc:	4413      	add	r3, r2
 801b2be:	00db      	lsls	r3, r3, #3
 801b2c0:	440b      	add	r3, r1
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d00a      	beq.n	801b2de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b2c8:	7c7a      	ldrb	r2, [r7, #17]
 801b2ca:	4913      	ldr	r1, [pc, #76]	@ (801b318 <etharp_query+0x268>)
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	005b      	lsls	r3, r3, #1
 801b2d0:	4413      	add	r3, r2
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	440b      	add	r3, r1
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	4618      	mov	r0, r3
 801b2da:	f7f5 ff85 	bl	80111e8 <pbuf_free>
      }
      arp_table[i].q = p;
 801b2de:	7c7a      	ldrb	r2, [r7, #17]
 801b2e0:	490d      	ldr	r1, [pc, #52]	@ (801b318 <etharp_query+0x268>)
 801b2e2:	4613      	mov	r3, r2
 801b2e4:	005b      	lsls	r3, r3, #1
 801b2e6:	4413      	add	r3, r2
 801b2e8:	00db      	lsls	r3, r3, #3
 801b2ea:	440b      	add	r3, r1
 801b2ec:	69fa      	ldr	r2, [r7, #28]
 801b2ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b2f6:	e002      	b.n	801b2fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b2f8:	23ff      	movs	r3, #255	@ 0xff
 801b2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b2fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b302:	4618      	mov	r0, r3
 801b304:	3728      	adds	r7, #40	@ 0x28
 801b306:	46bd      	mov	sp, r7
 801b308:	bd80      	pop	{r7, pc}
 801b30a:	bf00      	nop
 801b30c:	08025454 	.word	0x08025454
 801b310:	08025600 	.word	0x08025600
 801b314:	080254cc 	.word	0x080254cc
 801b318:	2001270c 	.word	0x2001270c
 801b31c:	08025610 	.word	0x08025610
 801b320:	080255f4 	.word	0x080255f4
 801b324:	200127fc 	.word	0x200127fc
 801b328:	08025638 	.word	0x08025638

0801b32c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b08a      	sub	sp, #40	@ 0x28
 801b330:	af02      	add	r7, sp, #8
 801b332:	60f8      	str	r0, [r7, #12]
 801b334:	60b9      	str	r1, [r7, #8]
 801b336:	607a      	str	r2, [r7, #4]
 801b338:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b33a:	2300      	movs	r3, #0
 801b33c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d106      	bne.n	801b352 <etharp_raw+0x26>
 801b344:	4b3a      	ldr	r3, [pc, #232]	@ (801b430 <etharp_raw+0x104>)
 801b346:	f240 4257 	movw	r2, #1111	@ 0x457
 801b34a:	493a      	ldr	r1, [pc, #232]	@ (801b434 <etharp_raw+0x108>)
 801b34c:	483a      	ldr	r0, [pc, #232]	@ (801b438 <etharp_raw+0x10c>)
 801b34e:	f003 f833 	bl	801e3b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b352:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b356:	211c      	movs	r1, #28
 801b358:	200e      	movs	r0, #14
 801b35a:	f7f5 fc61 	bl	8010c20 <pbuf_alloc>
 801b35e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b360:	69bb      	ldr	r3, [r7, #24]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d102      	bne.n	801b36c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b366:	f04f 33ff 	mov.w	r3, #4294967295
 801b36a:	e05d      	b.n	801b428 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b36c:	69bb      	ldr	r3, [r7, #24]
 801b36e:	895b      	ldrh	r3, [r3, #10]
 801b370:	2b1b      	cmp	r3, #27
 801b372:	d806      	bhi.n	801b382 <etharp_raw+0x56>
 801b374:	4b2e      	ldr	r3, [pc, #184]	@ (801b430 <etharp_raw+0x104>)
 801b376:	f240 4262 	movw	r2, #1122	@ 0x462
 801b37a:	4930      	ldr	r1, [pc, #192]	@ (801b43c <etharp_raw+0x110>)
 801b37c:	482e      	ldr	r0, [pc, #184]	@ (801b438 <etharp_raw+0x10c>)
 801b37e:	f003 f81b 	bl	801e3b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b382:	69bb      	ldr	r3, [r7, #24]
 801b384:	685b      	ldr	r3, [r3, #4]
 801b386:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b388:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7f4 f840 	bl	800f410 <lwip_htons>
 801b390:	4603      	mov	r3, r0
 801b392:	461a      	mov	r2, r3
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b39e:	2b06      	cmp	r3, #6
 801b3a0:	d006      	beq.n	801b3b0 <etharp_raw+0x84>
 801b3a2:	4b23      	ldr	r3, [pc, #140]	@ (801b430 <etharp_raw+0x104>)
 801b3a4:	f240 4269 	movw	r2, #1129	@ 0x469
 801b3a8:	4925      	ldr	r1, [pc, #148]	@ (801b440 <etharp_raw+0x114>)
 801b3aa:	4823      	ldr	r0, [pc, #140]	@ (801b438 <etharp_raw+0x10c>)
 801b3ac:	f003 f804 	bl	801e3b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	3308      	adds	r3, #8
 801b3b4:	2206      	movs	r2, #6
 801b3b6:	6839      	ldr	r1, [r7, #0]
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f003 f99e 	bl	801e6fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b3be:	697b      	ldr	r3, [r7, #20]
 801b3c0:	3312      	adds	r3, #18
 801b3c2:	2206      	movs	r2, #6
 801b3c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f003 f997 	bl	801e6fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	330e      	adds	r3, #14
 801b3d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b3d2:	6812      	ldr	r2, [r2, #0]
 801b3d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	3318      	adds	r3, #24
 801b3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b3dc:	6812      	ldr	r2, [r2, #0]
 801b3de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b3e0:	697b      	ldr	r3, [r7, #20]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	701a      	strb	r2, [r3, #0]
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	f042 0201 	orr.w	r2, r2, #1
 801b3ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b3ee:	697b      	ldr	r3, [r7, #20]
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	f042 0208 	orr.w	r2, r2, #8
 801b3f6:	709a      	strb	r2, [r3, #2]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b3fc:	697b      	ldr	r3, [r7, #20]
 801b3fe:	2206      	movs	r2, #6
 801b400:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	2204      	movs	r2, #4
 801b406:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b408:	f640 0306 	movw	r3, #2054	@ 0x806
 801b40c:	9300      	str	r3, [sp, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	68ba      	ldr	r2, [r7, #8]
 801b412:	69b9      	ldr	r1, [r7, #24]
 801b414:	68f8      	ldr	r0, [r7, #12]
 801b416:	f001 fcc3 	bl	801cda0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b41a:	69b8      	ldr	r0, [r7, #24]
 801b41c:	f7f5 fee4 	bl	80111e8 <pbuf_free>
  p = NULL;
 801b420:	2300      	movs	r3, #0
 801b422:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b424:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b428:	4618      	mov	r0, r3
 801b42a:	3720      	adds	r7, #32
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}
 801b430:	08025454 	.word	0x08025454
 801b434:	080255a4 	.word	0x080255a4
 801b438:	080254cc 	.word	0x080254cc
 801b43c:	08025654 	.word	0x08025654
 801b440:	08025688 	.word	0x08025688

0801b444 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b088      	sub	sp, #32
 801b448:	af04      	add	r7, sp, #16
 801b44a:	60f8      	str	r0, [r7, #12]
 801b44c:	60b9      	str	r1, [r7, #8]
 801b44e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b460:	2201      	movs	r2, #1
 801b462:	9203      	str	r2, [sp, #12]
 801b464:	68ba      	ldr	r2, [r7, #8]
 801b466:	9202      	str	r2, [sp, #8]
 801b468:	4a06      	ldr	r2, [pc, #24]	@ (801b484 <etharp_request_dst+0x40>)
 801b46a:	9201      	str	r2, [sp, #4]
 801b46c:	9300      	str	r3, [sp, #0]
 801b46e:	4603      	mov	r3, r0
 801b470:	687a      	ldr	r2, [r7, #4]
 801b472:	68f8      	ldr	r0, [r7, #12]
 801b474:	f7ff ff5a 	bl	801b32c <etharp_raw>
 801b478:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b47a:	4618      	mov	r0, r3
 801b47c:	3710      	adds	r7, #16
 801b47e:	46bd      	mov	sp, r7
 801b480:	bd80      	pop	{r7, pc}
 801b482:	bf00      	nop
 801b484:	08025e2c 	.word	0x08025e2c

0801b488 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b082      	sub	sp, #8
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b492:	4a05      	ldr	r2, [pc, #20]	@ (801b4a8 <etharp_request+0x20>)
 801b494:	6839      	ldr	r1, [r7, #0]
 801b496:	6878      	ldr	r0, [r7, #4]
 801b498:	f7ff ffd4 	bl	801b444 <etharp_request_dst>
 801b49c:	4603      	mov	r3, r0
}
 801b49e:	4618      	mov	r0, r3
 801b4a0:	3708      	adds	r7, #8
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	bd80      	pop	{r7, pc}
 801b4a6:	bf00      	nop
 801b4a8:	08025e24 	.word	0x08025e24

0801b4ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b4ac:	b580      	push	{r7, lr}
 801b4ae:	b08e      	sub	sp, #56	@ 0x38
 801b4b0:	af04      	add	r7, sp, #16
 801b4b2:	6078      	str	r0, [r7, #4]
 801b4b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b4b6:	4b79      	ldr	r3, [pc, #484]	@ (801b69c <icmp_input+0x1f0>)
 801b4b8:	689b      	ldr	r3, [r3, #8]
 801b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4be:	781b      	ldrb	r3, [r3, #0]
 801b4c0:	f003 030f 	and.w	r3, r3, #15
 801b4c4:	b2db      	uxtb	r3, r3
 801b4c6:	009b      	lsls	r3, r3, #2
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b4cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b4ce:	2b13      	cmp	r3, #19
 801b4d0:	f240 80cd 	bls.w	801b66e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	895b      	ldrh	r3, [r3, #10]
 801b4d8:	2b03      	cmp	r3, #3
 801b4da:	f240 80ca 	bls.w	801b672 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	685b      	ldr	r3, [r3, #4]
 801b4e2:	781b      	ldrb	r3, [r3, #0]
 801b4e4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b4e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	f000 80b7 	beq.w	801b660 <icmp_input+0x1b4>
 801b4f2:	2b08      	cmp	r3, #8
 801b4f4:	f040 80b7 	bne.w	801b666 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b4f8:	4b69      	ldr	r3, [pc, #420]	@ (801b6a0 <icmp_input+0x1f4>)
 801b4fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b4fc:	4b67      	ldr	r3, [pc, #412]	@ (801b69c <icmp_input+0x1f0>)
 801b4fe:	695b      	ldr	r3, [r3, #20]
 801b500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b504:	2be0      	cmp	r3, #224	@ 0xe0
 801b506:	f000 80bb 	beq.w	801b680 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b50a:	4b64      	ldr	r3, [pc, #400]	@ (801b69c <icmp_input+0x1f0>)
 801b50c:	695b      	ldr	r3, [r3, #20]
 801b50e:	4a63      	ldr	r2, [pc, #396]	@ (801b69c <icmp_input+0x1f0>)
 801b510:	6812      	ldr	r2, [r2, #0]
 801b512:	4611      	mov	r1, r2
 801b514:	4618      	mov	r0, r3
 801b516:	f000 fc0b 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801b51a:	4603      	mov	r3, r0
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	f040 80b1 	bne.w	801b684 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	891b      	ldrh	r3, [r3, #8]
 801b526:	2b07      	cmp	r3, #7
 801b528:	f240 80a5 	bls.w	801b676 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b52c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b52e:	330e      	adds	r3, #14
 801b530:	4619      	mov	r1, r3
 801b532:	6878      	ldr	r0, [r7, #4]
 801b534:	f7f5 fdc2 	bl	80110bc <pbuf_add_header>
 801b538:	4603      	mov	r3, r0
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d04b      	beq.n	801b5d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	891a      	ldrh	r2, [r3, #8]
 801b542:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b544:	4413      	add	r3, r2
 801b546:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	891b      	ldrh	r3, [r3, #8]
 801b54c:	8b7a      	ldrh	r2, [r7, #26]
 801b54e:	429a      	cmp	r2, r3
 801b550:	f0c0 809a 	bcc.w	801b688 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b554:	8b7b      	ldrh	r3, [r7, #26]
 801b556:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b55a:	4619      	mov	r1, r3
 801b55c:	200e      	movs	r0, #14
 801b55e:	f7f5 fb5f 	bl	8010c20 <pbuf_alloc>
 801b562:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b564:	697b      	ldr	r3, [r7, #20]
 801b566:	2b00      	cmp	r3, #0
 801b568:	f000 8090 	beq.w	801b68c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b56c:	697b      	ldr	r3, [r7, #20]
 801b56e:	895b      	ldrh	r3, [r3, #10]
 801b570:	461a      	mov	r2, r3
 801b572:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b574:	3308      	adds	r3, #8
 801b576:	429a      	cmp	r2, r3
 801b578:	d203      	bcs.n	801b582 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b57a:	6978      	ldr	r0, [r7, #20]
 801b57c:	f7f5 fe34 	bl	80111e8 <pbuf_free>
          goto icmperr;
 801b580:	e085      	b.n	801b68e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	685b      	ldr	r3, [r3, #4]
 801b586:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b588:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b58a:	4618      	mov	r0, r3
 801b58c:	f003 f8b5 	bl	801e6fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b590:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b592:	4619      	mov	r1, r3
 801b594:	6978      	ldr	r0, [r7, #20]
 801b596:	f7f5 fda1 	bl	80110dc <pbuf_remove_header>
 801b59a:	4603      	mov	r3, r0
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d009      	beq.n	801b5b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b5a0:	4b40      	ldr	r3, [pc, #256]	@ (801b6a4 <icmp_input+0x1f8>)
 801b5a2:	22b6      	movs	r2, #182	@ 0xb6
 801b5a4:	4940      	ldr	r1, [pc, #256]	@ (801b6a8 <icmp_input+0x1fc>)
 801b5a6:	4841      	ldr	r0, [pc, #260]	@ (801b6ac <icmp_input+0x200>)
 801b5a8:	f002 ff06 	bl	801e3b8 <iprintf>
          pbuf_free(r);
 801b5ac:	6978      	ldr	r0, [r7, #20]
 801b5ae:	f7f5 fe1b 	bl	80111e8 <pbuf_free>
          goto icmperr;
 801b5b2:	e06c      	b.n	801b68e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b5b4:	6879      	ldr	r1, [r7, #4]
 801b5b6:	6978      	ldr	r0, [r7, #20]
 801b5b8:	f7f5 ff4a 	bl	8011450 <pbuf_copy>
 801b5bc:	4603      	mov	r3, r0
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d003      	beq.n	801b5ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b5c2:	6978      	ldr	r0, [r7, #20]
 801b5c4:	f7f5 fe10 	bl	80111e8 <pbuf_free>
          goto icmperr;
 801b5c8:	e061      	b.n	801b68e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f7f5 fe0c 	bl	80111e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b5d0:	697b      	ldr	r3, [r7, #20]
 801b5d2:	607b      	str	r3, [r7, #4]
 801b5d4:	e00f      	b.n	801b5f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b5d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5d8:	330e      	adds	r3, #14
 801b5da:	4619      	mov	r1, r3
 801b5dc:	6878      	ldr	r0, [r7, #4]
 801b5de:	f7f5 fd7d 	bl	80110dc <pbuf_remove_header>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d006      	beq.n	801b5f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b5e8:	4b2e      	ldr	r3, [pc, #184]	@ (801b6a4 <icmp_input+0x1f8>)
 801b5ea:	22c7      	movs	r2, #199	@ 0xc7
 801b5ec:	4930      	ldr	r1, [pc, #192]	@ (801b6b0 <icmp_input+0x204>)
 801b5ee:	482f      	ldr	r0, [pc, #188]	@ (801b6ac <icmp_input+0x200>)
 801b5f0:	f002 fee2 	bl	801e3b8 <iprintf>
          goto icmperr;
 801b5f4:	e04b      	b.n	801b68e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b5fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5fe:	4619      	mov	r1, r3
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f7f5 fd5b 	bl	80110bc <pbuf_add_header>
 801b606:	4603      	mov	r3, r0
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d12b      	bne.n	801b664 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	685b      	ldr	r3, [r3, #4]
 801b610:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b612:	69fb      	ldr	r3, [r7, #28]
 801b614:	681a      	ldr	r2, [r3, #0]
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b61a:	4b20      	ldr	r3, [pc, #128]	@ (801b69c <icmp_input+0x1f0>)
 801b61c:	691a      	ldr	r2, [r3, #16]
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b622:	693b      	ldr	r3, [r7, #16]
 801b624:	2200      	movs	r2, #0
 801b626:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	2200      	movs	r2, #0
 801b62c:	709a      	strb	r2, [r3, #2]
 801b62e:	2200      	movs	r2, #0
 801b630:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	22ff      	movs	r2, #255	@ 0xff
 801b636:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	2200      	movs	r2, #0
 801b63c:	729a      	strb	r2, [r3, #10]
 801b63e:	2200      	movs	r2, #0
 801b640:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b642:	683b      	ldr	r3, [r7, #0]
 801b644:	9302      	str	r3, [sp, #8]
 801b646:	2301      	movs	r3, #1
 801b648:	9301      	str	r3, [sp, #4]
 801b64a:	2300      	movs	r3, #0
 801b64c:	9300      	str	r3, [sp, #0]
 801b64e:	23ff      	movs	r3, #255	@ 0xff
 801b650:	2200      	movs	r2, #0
 801b652:	69f9      	ldr	r1, [r7, #28]
 801b654:	6878      	ldr	r0, [r7, #4]
 801b656:	f000 fa93 	bl	801bb80 <ip4_output_if>
 801b65a:	4603      	mov	r3, r0
 801b65c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b65e:	e001      	b.n	801b664 <icmp_input+0x1b8>
      break;
 801b660:	bf00      	nop
 801b662:	e000      	b.n	801b666 <icmp_input+0x1ba>
      break;
 801b664:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f7f5 fdbe 	bl	80111e8 <pbuf_free>
  return;
 801b66c:	e013      	b.n	801b696 <icmp_input+0x1ea>
    goto lenerr;
 801b66e:	bf00      	nop
 801b670:	e002      	b.n	801b678 <icmp_input+0x1cc>
    goto lenerr;
 801b672:	bf00      	nop
 801b674:	e000      	b.n	801b678 <icmp_input+0x1cc>
        goto lenerr;
 801b676:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f7f5 fdb5 	bl	80111e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b67e:	e00a      	b.n	801b696 <icmp_input+0x1ea>
        goto icmperr;
 801b680:	bf00      	nop
 801b682:	e004      	b.n	801b68e <icmp_input+0x1e2>
        goto icmperr;
 801b684:	bf00      	nop
 801b686:	e002      	b.n	801b68e <icmp_input+0x1e2>
          goto icmperr;
 801b688:	bf00      	nop
 801b68a:	e000      	b.n	801b68e <icmp_input+0x1e2>
          goto icmperr;
 801b68c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b68e:	6878      	ldr	r0, [r7, #4]
 801b690:	f7f5 fdaa 	bl	80111e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b694:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b696:	3728      	adds	r7, #40	@ 0x28
 801b698:	46bd      	mov	sp, r7
 801b69a:	bd80      	pop	{r7, pc}
 801b69c:	2000edac 	.word	0x2000edac
 801b6a0:	2000edc0 	.word	0x2000edc0
 801b6a4:	080256cc 	.word	0x080256cc
 801b6a8:	08025704 	.word	0x08025704
 801b6ac:	0802573c 	.word	0x0802573c
 801b6b0:	08025764 	.word	0x08025764

0801b6b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b082      	sub	sp, #8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
 801b6bc:	460b      	mov	r3, r1
 801b6be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b6c0:	78fb      	ldrb	r3, [r7, #3]
 801b6c2:	461a      	mov	r2, r3
 801b6c4:	2103      	movs	r1, #3
 801b6c6:	6878      	ldr	r0, [r7, #4]
 801b6c8:	f000 f814 	bl	801b6f4 <icmp_send_response>
}
 801b6cc:	bf00      	nop
 801b6ce:	3708      	adds	r7, #8
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}

0801b6d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b082      	sub	sp, #8
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	460b      	mov	r3, r1
 801b6de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b6e0:	78fb      	ldrb	r3, [r7, #3]
 801b6e2:	461a      	mov	r2, r3
 801b6e4:	210b      	movs	r1, #11
 801b6e6:	6878      	ldr	r0, [r7, #4]
 801b6e8:	f000 f804 	bl	801b6f4 <icmp_send_response>
}
 801b6ec:	bf00      	nop
 801b6ee:	3708      	adds	r7, #8
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	bd80      	pop	{r7, pc}

0801b6f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b08c      	sub	sp, #48	@ 0x30
 801b6f8:	af04      	add	r7, sp, #16
 801b6fa:	6078      	str	r0, [r7, #4]
 801b6fc:	460b      	mov	r3, r1
 801b6fe:	70fb      	strb	r3, [r7, #3]
 801b700:	4613      	mov	r3, r2
 801b702:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b704:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b708:	2124      	movs	r1, #36	@ 0x24
 801b70a:	2022      	movs	r0, #34	@ 0x22
 801b70c:	f7f5 fa88 	bl	8010c20 <pbuf_alloc>
 801b710:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b712:	69fb      	ldr	r3, [r7, #28]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d04c      	beq.n	801b7b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b718:	69fb      	ldr	r3, [r7, #28]
 801b71a:	895b      	ldrh	r3, [r3, #10]
 801b71c:	2b23      	cmp	r3, #35	@ 0x23
 801b71e:	d806      	bhi.n	801b72e <icmp_send_response+0x3a>
 801b720:	4b26      	ldr	r3, [pc, #152]	@ (801b7bc <icmp_send_response+0xc8>)
 801b722:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b726:	4926      	ldr	r1, [pc, #152]	@ (801b7c0 <icmp_send_response+0xcc>)
 801b728:	4826      	ldr	r0, [pc, #152]	@ (801b7c4 <icmp_send_response+0xd0>)
 801b72a:	f002 fe45 	bl	801e3b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	685b      	ldr	r3, [r3, #4]
 801b732:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b734:	69fb      	ldr	r3, [r7, #28]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b73a:	697b      	ldr	r3, [r7, #20]
 801b73c:	78fa      	ldrb	r2, [r7, #3]
 801b73e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	78ba      	ldrb	r2, [r7, #2]
 801b744:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	2200      	movs	r2, #0
 801b74a:	711a      	strb	r2, [r3, #4]
 801b74c:	2200      	movs	r2, #0
 801b74e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	2200      	movs	r2, #0
 801b754:	719a      	strb	r2, [r3, #6]
 801b756:	2200      	movs	r2, #0
 801b758:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b75a:	69fb      	ldr	r3, [r7, #28]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	f103 0008 	add.w	r0, r3, #8
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	685b      	ldr	r3, [r3, #4]
 801b766:	221c      	movs	r2, #28
 801b768:	4619      	mov	r1, r3
 801b76a:	f002 ffc6 	bl	801e6fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b76e:	69bb      	ldr	r3, [r7, #24]
 801b770:	68db      	ldr	r3, [r3, #12]
 801b772:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b774:	f107 030c 	add.w	r3, r7, #12
 801b778:	4618      	mov	r0, r3
 801b77a:	f000 f825 	bl	801b7c8 <ip4_route>
 801b77e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b780:	693b      	ldr	r3, [r7, #16]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d011      	beq.n	801b7aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	2200      	movs	r2, #0
 801b78a:	709a      	strb	r2, [r3, #2]
 801b78c:	2200      	movs	r2, #0
 801b78e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b790:	f107 020c 	add.w	r2, r7, #12
 801b794:	693b      	ldr	r3, [r7, #16]
 801b796:	9302      	str	r3, [sp, #8]
 801b798:	2301      	movs	r3, #1
 801b79a:	9301      	str	r3, [sp, #4]
 801b79c:	2300      	movs	r3, #0
 801b79e:	9300      	str	r3, [sp, #0]
 801b7a0:	23ff      	movs	r3, #255	@ 0xff
 801b7a2:	2100      	movs	r1, #0
 801b7a4:	69f8      	ldr	r0, [r7, #28]
 801b7a6:	f000 f9eb 	bl	801bb80 <ip4_output_if>
  }
  pbuf_free(q);
 801b7aa:	69f8      	ldr	r0, [r7, #28]
 801b7ac:	f7f5 fd1c 	bl	80111e8 <pbuf_free>
 801b7b0:	e000      	b.n	801b7b4 <icmp_send_response+0xc0>
    return;
 801b7b2:	bf00      	nop
}
 801b7b4:	3720      	adds	r7, #32
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}
 801b7ba:	bf00      	nop
 801b7bc:	080256cc 	.word	0x080256cc
 801b7c0:	08025798 	.word	0x08025798
 801b7c4:	0802573c 	.word	0x0802573c

0801b7c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b7c8:	b480      	push	{r7}
 801b7ca:	b085      	sub	sp, #20
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b7d0:	4b33      	ldr	r3, [pc, #204]	@ (801b8a0 <ip4_route+0xd8>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	60fb      	str	r3, [r7, #12]
 801b7d6:	e036      	b.n	801b846 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7de:	f003 0301 	and.w	r3, r3, #1
 801b7e2:	b2db      	uxtb	r3, r3
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d02b      	beq.n	801b840 <ip4_route+0x78>
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7ee:	089b      	lsrs	r3, r3, #2
 801b7f0:	f003 0301 	and.w	r3, r3, #1
 801b7f4:	b2db      	uxtb	r3, r3
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d022      	beq.n	801b840 <ip4_route+0x78>
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	3304      	adds	r3, #4
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d01d      	beq.n	801b840 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681a      	ldr	r2, [r3, #0]
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	3304      	adds	r3, #4
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	405a      	eors	r2, r3
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	3308      	adds	r3, #8
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	4013      	ands	r3, r2
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d101      	bne.n	801b820 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	e038      	b.n	801b892 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b826:	f003 0302 	and.w	r3, r3, #2
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d108      	bne.n	801b840 <ip4_route+0x78>
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	681a      	ldr	r2, [r3, #0]
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	330c      	adds	r3, #12
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	429a      	cmp	r2, r3
 801b83a:	d101      	bne.n	801b840 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	e028      	b.n	801b892 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	60fb      	str	r3, [r7, #12]
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d1c5      	bne.n	801b7d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b84c:	4b15      	ldr	r3, [pc, #84]	@ (801b8a4 <ip4_route+0xdc>)
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d01a      	beq.n	801b88a <ip4_route+0xc2>
 801b854:	4b13      	ldr	r3, [pc, #76]	@ (801b8a4 <ip4_route+0xdc>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b85c:	f003 0301 	and.w	r3, r3, #1
 801b860:	2b00      	cmp	r3, #0
 801b862:	d012      	beq.n	801b88a <ip4_route+0xc2>
 801b864:	4b0f      	ldr	r3, [pc, #60]	@ (801b8a4 <ip4_route+0xdc>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b86c:	f003 0304 	and.w	r3, r3, #4
 801b870:	2b00      	cmp	r3, #0
 801b872:	d00a      	beq.n	801b88a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b874:	4b0b      	ldr	r3, [pc, #44]	@ (801b8a4 <ip4_route+0xdc>)
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	3304      	adds	r3, #4
 801b87a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d004      	beq.n	801b88a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	b2db      	uxtb	r3, r3
 801b886:	2b7f      	cmp	r3, #127	@ 0x7f
 801b888:	d101      	bne.n	801b88e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b88a:	2300      	movs	r3, #0
 801b88c:	e001      	b.n	801b892 <ip4_route+0xca>
  }

  return netif_default;
 801b88e:	4b05      	ldr	r3, [pc, #20]	@ (801b8a4 <ip4_route+0xdc>)
 801b890:	681b      	ldr	r3, [r3, #0]
}
 801b892:	4618      	mov	r0, r3
 801b894:	3714      	adds	r7, #20
 801b896:	46bd      	mov	sp, r7
 801b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89c:	4770      	bx	lr
 801b89e:	bf00      	nop
 801b8a0:	20012660 	.word	0x20012660
 801b8a4:	20012664 	.word	0x20012664

0801b8a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b8b6:	f003 0301 	and.w	r3, r3, #1
 801b8ba:	b2db      	uxtb	r3, r3
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d016      	beq.n	801b8ee <ip4_input_accept+0x46>
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	3304      	adds	r3, #4
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d011      	beq.n	801b8ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8ca:	4b0b      	ldr	r3, [pc, #44]	@ (801b8f8 <ip4_input_accept+0x50>)
 801b8cc:	695a      	ldr	r2, [r3, #20]
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	3304      	adds	r3, #4
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	d008      	beq.n	801b8ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b8d8:	4b07      	ldr	r3, [pc, #28]	@ (801b8f8 <ip4_input_accept+0x50>)
 801b8da:	695b      	ldr	r3, [r3, #20]
 801b8dc:	6879      	ldr	r1, [r7, #4]
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f000 fa26 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801b8e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d001      	beq.n	801b8ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	e000      	b.n	801b8f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b8ee:	2300      	movs	r3, #0
}
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	3708      	adds	r7, #8
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	2000edac 	.word	0x2000edac

0801b8fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b088      	sub	sp, #32
 801b900:	af00      	add	r7, sp, #0
 801b902:	6078      	str	r0, [r7, #4]
 801b904:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b906:	2301      	movs	r3, #1
 801b908:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b910:	69fb      	ldr	r3, [r7, #28]
 801b912:	781b      	ldrb	r3, [r3, #0]
 801b914:	091b      	lsrs	r3, r3, #4
 801b916:	b2db      	uxtb	r3, r3
 801b918:	2b04      	cmp	r3, #4
 801b91a:	d004      	beq.n	801b926 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b91c:	6878      	ldr	r0, [r7, #4]
 801b91e:	f7f5 fc63 	bl	80111e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b922:	2300      	movs	r3, #0
 801b924:	e123      	b.n	801bb6e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	781b      	ldrb	r3, [r3, #0]
 801b92a:	f003 030f 	and.w	r3, r3, #15
 801b92e:	b2db      	uxtb	r3, r3
 801b930:	009b      	lsls	r3, r3, #2
 801b932:	b2db      	uxtb	r3, r3
 801b934:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b936:	69fb      	ldr	r3, [r7, #28]
 801b938:	885b      	ldrh	r3, [r3, #2]
 801b93a:	b29b      	uxth	r3, r3
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7f3 fd67 	bl	800f410 <lwip_htons>
 801b942:	4603      	mov	r3, r0
 801b944:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	891b      	ldrh	r3, [r3, #8]
 801b94a:	8a3a      	ldrh	r2, [r7, #16]
 801b94c:	429a      	cmp	r2, r3
 801b94e:	d204      	bcs.n	801b95a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b950:	8a3b      	ldrh	r3, [r7, #16]
 801b952:	4619      	mov	r1, r3
 801b954:	6878      	ldr	r0, [r7, #4]
 801b956:	f7f5 fac1 	bl	8010edc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	895b      	ldrh	r3, [r3, #10]
 801b95e:	8a7a      	ldrh	r2, [r7, #18]
 801b960:	429a      	cmp	r2, r3
 801b962:	d807      	bhi.n	801b974 <ip4_input+0x78>
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	891b      	ldrh	r3, [r3, #8]
 801b968:	8a3a      	ldrh	r2, [r7, #16]
 801b96a:	429a      	cmp	r2, r3
 801b96c:	d802      	bhi.n	801b974 <ip4_input+0x78>
 801b96e:	8a7b      	ldrh	r3, [r7, #18]
 801b970:	2b13      	cmp	r3, #19
 801b972:	d804      	bhi.n	801b97e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b974:	6878      	ldr	r0, [r7, #4]
 801b976:	f7f5 fc37 	bl	80111e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b97a:	2300      	movs	r3, #0
 801b97c:	e0f7      	b.n	801bb6e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b97e:	69fb      	ldr	r3, [r7, #28]
 801b980:	691b      	ldr	r3, [r3, #16]
 801b982:	4a7d      	ldr	r2, [pc, #500]	@ (801bb78 <ip4_input+0x27c>)
 801b984:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b986:	69fb      	ldr	r3, [r7, #28]
 801b988:	68db      	ldr	r3, [r3, #12]
 801b98a:	4a7b      	ldr	r2, [pc, #492]	@ (801bb78 <ip4_input+0x27c>)
 801b98c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b98e:	4b7a      	ldr	r3, [pc, #488]	@ (801bb78 <ip4_input+0x27c>)
 801b990:	695b      	ldr	r3, [r3, #20]
 801b992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b996:	2be0      	cmp	r3, #224	@ 0xe0
 801b998:	d112      	bne.n	801b9c0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b99a:	683b      	ldr	r3, [r7, #0]
 801b99c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b9a0:	f003 0301 	and.w	r3, r3, #1
 801b9a4:	b2db      	uxtb	r3, r3
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d007      	beq.n	801b9ba <ip4_input+0xbe>
 801b9aa:	683b      	ldr	r3, [r7, #0]
 801b9ac:	3304      	adds	r3, #4
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d002      	beq.n	801b9ba <ip4_input+0xbe>
      netif = inp;
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	61bb      	str	r3, [r7, #24]
 801b9b8:	e02a      	b.n	801ba10 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	61bb      	str	r3, [r7, #24]
 801b9be:	e027      	b.n	801ba10 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b9c0:	6838      	ldr	r0, [r7, #0]
 801b9c2:	f7ff ff71 	bl	801b8a8 <ip4_input_accept>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d002      	beq.n	801b9d2 <ip4_input+0xd6>
      netif = inp;
 801b9cc:	683b      	ldr	r3, [r7, #0]
 801b9ce:	61bb      	str	r3, [r7, #24]
 801b9d0:	e01e      	b.n	801ba10 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b9d6:	4b68      	ldr	r3, [pc, #416]	@ (801bb78 <ip4_input+0x27c>)
 801b9d8:	695b      	ldr	r3, [r3, #20]
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	2b7f      	cmp	r3, #127	@ 0x7f
 801b9de:	d017      	beq.n	801ba10 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b9e0:	4b66      	ldr	r3, [pc, #408]	@ (801bb7c <ip4_input+0x280>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	61bb      	str	r3, [r7, #24]
 801b9e6:	e00e      	b.n	801ba06 <ip4_input+0x10a>
          if (netif == inp) {
 801b9e8:	69ba      	ldr	r2, [r7, #24]
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	429a      	cmp	r2, r3
 801b9ee:	d006      	beq.n	801b9fe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b9f0:	69b8      	ldr	r0, [r7, #24]
 801b9f2:	f7ff ff59 	bl	801b8a8 <ip4_input_accept>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d108      	bne.n	801ba0e <ip4_input+0x112>
 801b9fc:	e000      	b.n	801ba00 <ip4_input+0x104>
            continue;
 801b9fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ba00:	69bb      	ldr	r3, [r7, #24]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	61bb      	str	r3, [r7, #24]
 801ba06:	69bb      	ldr	r3, [r7, #24]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d1ed      	bne.n	801b9e8 <ip4_input+0xec>
 801ba0c:	e000      	b.n	801ba10 <ip4_input+0x114>
            break;
 801ba0e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ba10:	69bb      	ldr	r3, [r7, #24]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d111      	bne.n	801ba3a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ba16:	69fb      	ldr	r3, [r7, #28]
 801ba18:	7a5b      	ldrb	r3, [r3, #9]
 801ba1a:	2b11      	cmp	r3, #17
 801ba1c:	d10d      	bne.n	801ba3a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ba1e:	8a7b      	ldrh	r3, [r7, #18]
 801ba20:	69fa      	ldr	r2, [r7, #28]
 801ba22:	4413      	add	r3, r2
 801ba24:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	885b      	ldrh	r3, [r3, #2]
 801ba2a:	b29b      	uxth	r3, r3
 801ba2c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801ba30:	d103      	bne.n	801ba3a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ba36:	2300      	movs	r3, #0
 801ba38:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d017      	beq.n	801ba70 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ba40:	4b4d      	ldr	r3, [pc, #308]	@ (801bb78 <ip4_input+0x27c>)
 801ba42:	691b      	ldr	r3, [r3, #16]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d013      	beq.n	801ba70 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba48:	4b4b      	ldr	r3, [pc, #300]	@ (801bb78 <ip4_input+0x27c>)
 801ba4a:	691b      	ldr	r3, [r3, #16]
 801ba4c:	6839      	ldr	r1, [r7, #0]
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f000 f96e 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801ba54:	4603      	mov	r3, r0
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d105      	bne.n	801ba66 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ba5a:	4b47      	ldr	r3, [pc, #284]	@ (801bb78 <ip4_input+0x27c>)
 801ba5c:	691b      	ldr	r3, [r3, #16]
 801ba5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba62:	2be0      	cmp	r3, #224	@ 0xe0
 801ba64:	d104      	bne.n	801ba70 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f7f5 fbbe 	bl	80111e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	e07e      	b.n	801bb6e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ba70:	69bb      	ldr	r3, [r7, #24]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d104      	bne.n	801ba80 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f7f5 fbb6 	bl	80111e8 <pbuf_free>
    return ERR_OK;
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	e076      	b.n	801bb6e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ba80:	69fb      	ldr	r3, [r7, #28]
 801ba82:	88db      	ldrh	r3, [r3, #6]
 801ba84:	b29b      	uxth	r3, r3
 801ba86:	461a      	mov	r2, r3
 801ba88:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801ba8c:	4013      	ands	r3, r2
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d00b      	beq.n	801baaa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ba92:	6878      	ldr	r0, [r7, #4]
 801ba94:	f000 fdbc 	bl	801c610 <ip4_reass>
 801ba98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d101      	bne.n	801baa4 <ip4_input+0x1a8>
      return ERR_OK;
 801baa0:	2300      	movs	r3, #0
 801baa2:	e064      	b.n	801bb6e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	685b      	ldr	r3, [r3, #4]
 801baa8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801baaa:	4a33      	ldr	r2, [pc, #204]	@ (801bb78 <ip4_input+0x27c>)
 801baac:	69bb      	ldr	r3, [r7, #24]
 801baae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bab0:	4a31      	ldr	r2, [pc, #196]	@ (801bb78 <ip4_input+0x27c>)
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bab6:	4a30      	ldr	r2, [pc, #192]	@ (801bb78 <ip4_input+0x27c>)
 801bab8:	69fb      	ldr	r3, [r7, #28]
 801baba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801babc:	69fb      	ldr	r3, [r7, #28]
 801babe:	781b      	ldrb	r3, [r3, #0]
 801bac0:	f003 030f 	and.w	r3, r3, #15
 801bac4:	b2db      	uxtb	r3, r3
 801bac6:	009b      	lsls	r3, r3, #2
 801bac8:	b2db      	uxtb	r3, r3
 801baca:	461a      	mov	r2, r3
 801bacc:	4b2a      	ldr	r3, [pc, #168]	@ (801bb78 <ip4_input+0x27c>)
 801bace:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bad0:	8a7b      	ldrh	r3, [r7, #18]
 801bad2:	4619      	mov	r1, r3
 801bad4:	6878      	ldr	r0, [r7, #4]
 801bad6:	f7f5 fb01 	bl	80110dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bada:	69fb      	ldr	r3, [r7, #28]
 801badc:	7a5b      	ldrb	r3, [r3, #9]
 801bade:	2b11      	cmp	r3, #17
 801bae0:	d006      	beq.n	801baf0 <ip4_input+0x1f4>
 801bae2:	2b11      	cmp	r3, #17
 801bae4:	dc13      	bgt.n	801bb0e <ip4_input+0x212>
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d00c      	beq.n	801bb04 <ip4_input+0x208>
 801baea:	2b06      	cmp	r3, #6
 801baec:	d005      	beq.n	801bafa <ip4_input+0x1fe>
 801baee:	e00e      	b.n	801bb0e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801baf0:	6839      	ldr	r1, [r7, #0]
 801baf2:	6878      	ldr	r0, [r7, #4]
 801baf4:	f7fc f9dc 	bl	8017eb0 <udp_input>
        break;
 801baf8:	e026      	b.n	801bb48 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bafa:	6839      	ldr	r1, [r7, #0]
 801bafc:	6878      	ldr	r0, [r7, #4]
 801bafe:	f7f7 fd9b 	bl	8013638 <tcp_input>
        break;
 801bb02:	e021      	b.n	801bb48 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bb04:	6839      	ldr	r1, [r7, #0]
 801bb06:	6878      	ldr	r0, [r7, #4]
 801bb08:	f7ff fcd0 	bl	801b4ac <icmp_input>
        break;
 801bb0c:	e01c      	b.n	801bb48 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bb0e:	4b1a      	ldr	r3, [pc, #104]	@ (801bb78 <ip4_input+0x27c>)
 801bb10:	695b      	ldr	r3, [r3, #20]
 801bb12:	69b9      	ldr	r1, [r7, #24]
 801bb14:	4618      	mov	r0, r3
 801bb16:	f000 f90b 	bl	801bd30 <ip4_addr_isbroadcast_u32>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d10f      	bne.n	801bb40 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bb20:	4b15      	ldr	r3, [pc, #84]	@ (801bb78 <ip4_input+0x27c>)
 801bb22:	695b      	ldr	r3, [r3, #20]
 801bb24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bb28:	2be0      	cmp	r3, #224	@ 0xe0
 801bb2a:	d009      	beq.n	801bb40 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bb2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bb30:	4619      	mov	r1, r3
 801bb32:	6878      	ldr	r0, [r7, #4]
 801bb34:	f7f5 fb45 	bl	80111c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bb38:	2102      	movs	r1, #2
 801bb3a:	6878      	ldr	r0, [r7, #4]
 801bb3c:	f7ff fdba 	bl	801b6b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bb40:	6878      	ldr	r0, [r7, #4]
 801bb42:	f7f5 fb51 	bl	80111e8 <pbuf_free>
        break;
 801bb46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bb48:	4b0b      	ldr	r3, [pc, #44]	@ (801bb78 <ip4_input+0x27c>)
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bb4e:	4b0a      	ldr	r3, [pc, #40]	@ (801bb78 <ip4_input+0x27c>)
 801bb50:	2200      	movs	r2, #0
 801bb52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bb54:	4b08      	ldr	r3, [pc, #32]	@ (801bb78 <ip4_input+0x27c>)
 801bb56:	2200      	movs	r2, #0
 801bb58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bb5a:	4b07      	ldr	r3, [pc, #28]	@ (801bb78 <ip4_input+0x27c>)
 801bb5c:	2200      	movs	r2, #0
 801bb5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bb60:	4b05      	ldr	r3, [pc, #20]	@ (801bb78 <ip4_input+0x27c>)
 801bb62:	2200      	movs	r2, #0
 801bb64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bb66:	4b04      	ldr	r3, [pc, #16]	@ (801bb78 <ip4_input+0x27c>)
 801bb68:	2200      	movs	r2, #0
 801bb6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bb6c:	2300      	movs	r3, #0
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3720      	adds	r7, #32
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}
 801bb76:	bf00      	nop
 801bb78:	2000edac 	.word	0x2000edac
 801bb7c:	20012660 	.word	0x20012660

0801bb80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b08a      	sub	sp, #40	@ 0x28
 801bb84:	af04      	add	r7, sp, #16
 801bb86:	60f8      	str	r0, [r7, #12]
 801bb88:	60b9      	str	r1, [r7, #8]
 801bb8a:	607a      	str	r2, [r7, #4]
 801bb8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d009      	beq.n	801bbac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d003      	beq.n	801bba6 <ip4_output_if+0x26>
 801bb9e:	68bb      	ldr	r3, [r7, #8]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d102      	bne.n	801bbac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bba8:	3304      	adds	r3, #4
 801bbaa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bbac:	78fa      	ldrb	r2, [r7, #3]
 801bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbb0:	9302      	str	r3, [sp, #8]
 801bbb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bbb6:	9301      	str	r3, [sp, #4]
 801bbb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bbbc:	9300      	str	r3, [sp, #0]
 801bbbe:	4613      	mov	r3, r2
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	6979      	ldr	r1, [r7, #20]
 801bbc4:	68f8      	ldr	r0, [r7, #12]
 801bbc6:	f000 f805 	bl	801bbd4 <ip4_output_if_src>
 801bbca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801bbcc:	4618      	mov	r0, r3
 801bbce:	3718      	adds	r7, #24
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	bd80      	pop	{r7, pc}

0801bbd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b088      	sub	sp, #32
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	60f8      	str	r0, [r7, #12]
 801bbdc:	60b9      	str	r1, [r7, #8]
 801bbde:	607a      	str	r2, [r7, #4]
 801bbe0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	7b9b      	ldrb	r3, [r3, #14]
 801bbe6:	2b01      	cmp	r3, #1
 801bbe8:	d006      	beq.n	801bbf8 <ip4_output_if_src+0x24>
 801bbea:	4b4b      	ldr	r3, [pc, #300]	@ (801bd18 <ip4_output_if_src+0x144>)
 801bbec:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801bbf0:	494a      	ldr	r1, [pc, #296]	@ (801bd1c <ip4_output_if_src+0x148>)
 801bbf2:	484b      	ldr	r0, [pc, #300]	@ (801bd20 <ip4_output_if_src+0x14c>)
 801bbf4:	f002 fbe0 	bl	801e3b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d060      	beq.n	801bcc0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801bbfe:	2314      	movs	r3, #20
 801bc00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801bc02:	2114      	movs	r1, #20
 801bc04:	68f8      	ldr	r0, [r7, #12]
 801bc06:	f7f5 fa59 	bl	80110bc <pbuf_add_header>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d002      	beq.n	801bc16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bc10:	f06f 0301 	mvn.w	r3, #1
 801bc14:	e07c      	b.n	801bd10 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	685b      	ldr	r3, [r3, #4]
 801bc1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	895b      	ldrh	r3, [r3, #10]
 801bc20:	2b13      	cmp	r3, #19
 801bc22:	d806      	bhi.n	801bc32 <ip4_output_if_src+0x5e>
 801bc24:	4b3c      	ldr	r3, [pc, #240]	@ (801bd18 <ip4_output_if_src+0x144>)
 801bc26:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bc2a:	493e      	ldr	r1, [pc, #248]	@ (801bd24 <ip4_output_if_src+0x150>)
 801bc2c:	483c      	ldr	r0, [pc, #240]	@ (801bd20 <ip4_output_if_src+0x14c>)
 801bc2e:	f002 fbc3 	bl	801e3b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	78fa      	ldrb	r2, [r7, #3]
 801bc36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801bc38:	69fb      	ldr	r3, [r7, #28]
 801bc3a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bc3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	681a      	ldr	r2, [r3, #0]
 801bc44:	69fb      	ldr	r3, [r7, #28]
 801bc46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bc48:	8b7b      	ldrh	r3, [r7, #26]
 801bc4a:	089b      	lsrs	r3, r3, #2
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	b2db      	uxtb	r3, r3
 801bc50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc54:	b2da      	uxtb	r2, r3
 801bc56:	69fb      	ldr	r3, [r7, #28]
 801bc58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801bc5a:	69fb      	ldr	r3, [r7, #28]
 801bc5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bc60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	891b      	ldrh	r3, [r3, #8]
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7f3 fbd2 	bl	800f410 <lwip_htons>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	461a      	mov	r2, r3
 801bc70:	69fb      	ldr	r3, [r7, #28]
 801bc72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bc74:	69fb      	ldr	r3, [r7, #28]
 801bc76:	2200      	movs	r2, #0
 801bc78:	719a      	strb	r2, [r3, #6]
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bc7e:	4b2a      	ldr	r3, [pc, #168]	@ (801bd28 <ip4_output_if_src+0x154>)
 801bc80:	881b      	ldrh	r3, [r3, #0]
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7f3 fbc4 	bl	800f410 <lwip_htons>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	461a      	mov	r2, r3
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bc90:	4b25      	ldr	r3, [pc, #148]	@ (801bd28 <ip4_output_if_src+0x154>)
 801bc92:	881b      	ldrh	r3, [r3, #0]
 801bc94:	3301      	adds	r3, #1
 801bc96:	b29a      	uxth	r2, r3
 801bc98:	4b23      	ldr	r3, [pc, #140]	@ (801bd28 <ip4_output_if_src+0x154>)
 801bc9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bc9c:	68bb      	ldr	r3, [r7, #8]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d104      	bne.n	801bcac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bca2:	4b22      	ldr	r3, [pc, #136]	@ (801bd2c <ip4_output_if_src+0x158>)
 801bca4:	681a      	ldr	r2, [r3, #0]
 801bca6:	69fb      	ldr	r3, [r7, #28]
 801bca8:	60da      	str	r2, [r3, #12]
 801bcaa:	e003      	b.n	801bcb4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bcac:	68bb      	ldr	r3, [r7, #8]
 801bcae:	681a      	ldr	r2, [r3, #0]
 801bcb0:	69fb      	ldr	r3, [r7, #28]
 801bcb2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bcb4:	69fb      	ldr	r3, [r7, #28]
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	729a      	strb	r2, [r3, #10]
 801bcba:	2200      	movs	r2, #0
 801bcbc:	72da      	strb	r2, [r3, #11]
 801bcbe:	e00f      	b.n	801bce0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	895b      	ldrh	r3, [r3, #10]
 801bcc4:	2b13      	cmp	r3, #19
 801bcc6:	d802      	bhi.n	801bcce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bcc8:	f06f 0301 	mvn.w	r3, #1
 801bccc:	e020      	b.n	801bd10 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	685b      	ldr	r3, [r3, #4]
 801bcd2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	691b      	ldr	r3, [r3, #16]
 801bcd8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bcda:	f107 0314 	add.w	r3, r7, #20
 801bcde:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d00c      	beq.n	801bd02 <ip4_output_if_src+0x12e>
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	891a      	ldrh	r2, [r3, #8]
 801bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d906      	bls.n	801bd02 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bcf4:	687a      	ldr	r2, [r7, #4]
 801bcf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f000 fe7d 	bl	801c9f8 <ip4_frag>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	e006      	b.n	801bd10 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd04:	695b      	ldr	r3, [r3, #20]
 801bd06:	687a      	ldr	r2, [r7, #4]
 801bd08:	68f9      	ldr	r1, [r7, #12]
 801bd0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bd0c:	4798      	blx	r3
 801bd0e:	4603      	mov	r3, r0
}
 801bd10:	4618      	mov	r0, r3
 801bd12:	3720      	adds	r7, #32
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	080257c4 	.word	0x080257c4
 801bd1c:	080257f8 	.word	0x080257f8
 801bd20:	08025804 	.word	0x08025804
 801bd24:	0802582c 	.word	0x0802582c
 801bd28:	200127fe 	.word	0x200127fe
 801bd2c:	08025e1c 	.word	0x08025e1c

0801bd30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bd30:	b480      	push	{r7}
 801bd32:	b085      	sub	sp, #20
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd44:	d002      	beq.n	801bd4c <ip4_addr_isbroadcast_u32+0x1c>
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d101      	bne.n	801bd50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	e02a      	b.n	801bda6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bd50:	683b      	ldr	r3, [r7, #0]
 801bd52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd56:	f003 0302 	and.w	r3, r3, #2
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d101      	bne.n	801bd62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bd5e:	2300      	movs	r3, #0
 801bd60:	e021      	b.n	801bda6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bd62:	683b      	ldr	r3, [r7, #0]
 801bd64:	3304      	adds	r3, #4
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	687a      	ldr	r2, [r7, #4]
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	d101      	bne.n	801bd72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	e019      	b.n	801bda6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	3304      	adds	r3, #4
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	405a      	eors	r2, r3
 801bd7c:	683b      	ldr	r3, [r7, #0]
 801bd7e:	3308      	adds	r3, #8
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	4013      	ands	r3, r2
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d10d      	bne.n	801bda4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	3308      	adds	r3, #8
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	43da      	mvns	r2, r3
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801bd94:	683b      	ldr	r3, [r7, #0]
 801bd96:	3308      	adds	r3, #8
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d101      	bne.n	801bda4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801bda0:	2301      	movs	r3, #1
 801bda2:	e000      	b.n	801bda6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801bda4:	2300      	movs	r3, #0
  }
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3714      	adds	r7, #20
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb0:	4770      	bx	lr
	...

0801bdb4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b08a      	sub	sp, #40	@ 0x28
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801bdbe:	f107 030c 	add.w	r3, r7, #12
 801bdc2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	781b      	ldrb	r3, [r3, #0]
 801bdc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801bdcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bdd0:	3301      	adds	r3, #1
 801bdd2:	4a89      	ldr	r2, [pc, #548]	@ (801bff8 <ip4addr_aton+0x244>)
 801bdd4:	4413      	add	r3, r2
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	f003 0304 	and.w	r3, r3, #4
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d101      	bne.n	801bde4 <ip4addr_aton+0x30>
      return 0;
 801bde0:	2300      	movs	r3, #0
 801bde2:	e105      	b.n	801bff0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801bde4:	2300      	movs	r3, #0
 801bde6:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801bde8:	230a      	movs	r3, #10
 801bdea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801bdee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bdf2:	2b30      	cmp	r3, #48	@ 0x30
 801bdf4:	d11c      	bne.n	801be30 <ip4addr_aton+0x7c>
      c = *++cp;
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	3301      	adds	r3, #1
 801bdfa:	607b      	str	r3, [r7, #4]
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	781b      	ldrb	r3, [r3, #0]
 801be00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801be04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be08:	2b78      	cmp	r3, #120	@ 0x78
 801be0a:	d003      	beq.n	801be14 <ip4addr_aton+0x60>
 801be0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be10:	2b58      	cmp	r3, #88	@ 0x58
 801be12:	d10a      	bne.n	801be2a <ip4addr_aton+0x76>
        base = 16;
 801be14:	2310      	movs	r3, #16
 801be16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	3301      	adds	r3, #1
 801be1e:	607b      	str	r3, [r7, #4]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	781b      	ldrb	r3, [r3, #0]
 801be24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801be28:	e002      	b.n	801be30 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801be2a:	2308      	movs	r3, #8
 801be2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801be30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be34:	3301      	adds	r3, #1
 801be36:	4a70      	ldr	r2, [pc, #448]	@ (801bff8 <ip4addr_aton+0x244>)
 801be38:	4413      	add	r3, r2
 801be3a:	781b      	ldrb	r3, [r3, #0]
 801be3c:	f003 0304 	and.w	r3, r3, #4
 801be40:	2b00      	cmp	r3, #0
 801be42:	d011      	beq.n	801be68 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801be44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be4a:	fb03 f202 	mul.w	r2, r3, r2
 801be4e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be52:	4413      	add	r3, r2
 801be54:	3b30      	subs	r3, #48	@ 0x30
 801be56:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	3301      	adds	r3, #1
 801be5c:	607b      	str	r3, [r7, #4]
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	781b      	ldrb	r3, [r3, #0]
 801be62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801be66:	e7e3      	b.n	801be30 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801be68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be6c:	2b10      	cmp	r3, #16
 801be6e:	d127      	bne.n	801bec0 <ip4addr_aton+0x10c>
 801be70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be74:	3301      	adds	r3, #1
 801be76:	4a60      	ldr	r2, [pc, #384]	@ (801bff8 <ip4addr_aton+0x244>)
 801be78:	4413      	add	r3, r2
 801be7a:	781b      	ldrb	r3, [r3, #0]
 801be7c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801be80:	2b00      	cmp	r3, #0
 801be82:	d01d      	beq.n	801bec0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801be84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be86:	011b      	lsls	r3, r3, #4
 801be88:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801be8c:	f102 010a 	add.w	r1, r2, #10
 801be90:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801be94:	3201      	adds	r2, #1
 801be96:	4858      	ldr	r0, [pc, #352]	@ (801bff8 <ip4addr_aton+0x244>)
 801be98:	4402      	add	r2, r0
 801be9a:	7812      	ldrb	r2, [r2, #0]
 801be9c:	f002 0203 	and.w	r2, r2, #3
 801bea0:	2a02      	cmp	r2, #2
 801bea2:	d101      	bne.n	801bea8 <ip4addr_aton+0xf4>
 801bea4:	2261      	movs	r2, #97	@ 0x61
 801bea6:	e000      	b.n	801beaa <ip4addr_aton+0xf6>
 801bea8:	2241      	movs	r2, #65	@ 0x41
 801beaa:	1a8a      	subs	r2, r1, r2
 801beac:	4313      	orrs	r3, r2
 801beae:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	3301      	adds	r3, #1
 801beb4:	607b      	str	r3, [r7, #4]
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	781b      	ldrb	r3, [r3, #0]
 801beba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801bebe:	e7b7      	b.n	801be30 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801bec0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bec4:	2b2e      	cmp	r3, #46	@ 0x2e
 801bec6:	d114      	bne.n	801bef2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801bec8:	f107 030c 	add.w	r3, r7, #12
 801becc:	330c      	adds	r3, #12
 801bece:	69fa      	ldr	r2, [r7, #28]
 801bed0:	429a      	cmp	r2, r3
 801bed2:	d301      	bcc.n	801bed8 <ip4addr_aton+0x124>
        return 0;
 801bed4:	2300      	movs	r3, #0
 801bed6:	e08b      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801bed8:	69fb      	ldr	r3, [r7, #28]
 801beda:	1d1a      	adds	r2, r3, #4
 801bedc:	61fa      	str	r2, [r7, #28]
 801bede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bee0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	3301      	adds	r3, #1
 801bee6:	607b      	str	r3, [r7, #4]
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	781b      	ldrb	r3, [r3, #0]
 801beec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801bef0:	e76c      	b.n	801bdcc <ip4addr_aton+0x18>
    } else {
      break;
 801bef2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801bef4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bef8:	2b00      	cmp	r3, #0
 801befa:	d00b      	beq.n	801bf14 <ip4addr_aton+0x160>
 801befc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bf00:	3301      	adds	r3, #1
 801bf02:	4a3d      	ldr	r2, [pc, #244]	@ (801bff8 <ip4addr_aton+0x244>)
 801bf04:	4413      	add	r3, r2
 801bf06:	781b      	ldrb	r3, [r3, #0]
 801bf08:	f003 0308 	and.w	r3, r3, #8
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d101      	bne.n	801bf14 <ip4addr_aton+0x160>
    return 0;
 801bf10:	2300      	movs	r3, #0
 801bf12:	e06d      	b.n	801bff0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801bf14:	f107 030c 	add.w	r3, r7, #12
 801bf18:	69fa      	ldr	r2, [r7, #28]
 801bf1a:	1ad3      	subs	r3, r2, r3
 801bf1c:	109b      	asrs	r3, r3, #2
 801bf1e:	3301      	adds	r3, #1
 801bf20:	2b04      	cmp	r3, #4
 801bf22:	d853      	bhi.n	801bfcc <ip4addr_aton+0x218>
 801bf24:	a201      	add	r2, pc, #4	@ (adr r2, 801bf2c <ip4addr_aton+0x178>)
 801bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf2a:	bf00      	nop
 801bf2c:	0801bf41 	.word	0x0801bf41
 801bf30:	0801bfdb 	.word	0x0801bfdb
 801bf34:	0801bf45 	.word	0x0801bf45
 801bf38:	0801bf67 	.word	0x0801bf67
 801bf3c:	0801bf95 	.word	0x0801bf95

    case 0:
      return 0;       /* initial nondigit */
 801bf40:	2300      	movs	r3, #0
 801bf42:	e055      	b.n	801bff0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf4a:	d301      	bcc.n	801bf50 <ip4addr_aton+0x19c>
        return 0;
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	e04f      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	2bff      	cmp	r3, #255	@ 0xff
 801bf54:	d901      	bls.n	801bf5a <ip4addr_aton+0x1a6>
        return 0;
 801bf56:	2300      	movs	r3, #0
 801bf58:	e04a      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	061b      	lsls	r3, r3, #24
 801bf5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf60:	4313      	orrs	r3, r2
 801bf62:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bf64:	e03a      	b.n	801bfdc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801bf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf6c:	d301      	bcc.n	801bf72 <ip4addr_aton+0x1be>
        return 0;
 801bf6e:	2300      	movs	r3, #0
 801bf70:	e03e      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	2bff      	cmp	r3, #255	@ 0xff
 801bf76:	d802      	bhi.n	801bf7e <ip4addr_aton+0x1ca>
 801bf78:	693b      	ldr	r3, [r7, #16]
 801bf7a:	2bff      	cmp	r3, #255	@ 0xff
 801bf7c:	d901      	bls.n	801bf82 <ip4addr_aton+0x1ce>
        return 0;
 801bf7e:	2300      	movs	r3, #0
 801bf80:	e036      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	061a      	lsls	r2, r3, #24
 801bf86:	693b      	ldr	r3, [r7, #16]
 801bf88:	041b      	lsls	r3, r3, #16
 801bf8a:	4313      	orrs	r3, r2
 801bf8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf8e:	4313      	orrs	r3, r2
 801bf90:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bf92:	e023      	b.n	801bfdc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf96:	2bff      	cmp	r3, #255	@ 0xff
 801bf98:	d901      	bls.n	801bf9e <ip4addr_aton+0x1ea>
        return 0;
 801bf9a:	2300      	movs	r3, #0
 801bf9c:	e028      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	2bff      	cmp	r3, #255	@ 0xff
 801bfa2:	d805      	bhi.n	801bfb0 <ip4addr_aton+0x1fc>
 801bfa4:	693b      	ldr	r3, [r7, #16]
 801bfa6:	2bff      	cmp	r3, #255	@ 0xff
 801bfa8:	d802      	bhi.n	801bfb0 <ip4addr_aton+0x1fc>
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	2bff      	cmp	r3, #255	@ 0xff
 801bfae:	d901      	bls.n	801bfb4 <ip4addr_aton+0x200>
        return 0;
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	e01d      	b.n	801bff0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	061a      	lsls	r2, r3, #24
 801bfb8:	693b      	ldr	r3, [r7, #16]
 801bfba:	041b      	lsls	r3, r3, #16
 801bfbc:	431a      	orrs	r2, r3
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	021b      	lsls	r3, r3, #8
 801bfc2:	4313      	orrs	r3, r2
 801bfc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfc6:	4313      	orrs	r3, r2
 801bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bfca:	e007      	b.n	801bfdc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801bfcc:	4b0b      	ldr	r3, [pc, #44]	@ (801bffc <ip4addr_aton+0x248>)
 801bfce:	22f9      	movs	r2, #249	@ 0xf9
 801bfd0:	490b      	ldr	r1, [pc, #44]	@ (801c000 <ip4addr_aton+0x24c>)
 801bfd2:	480c      	ldr	r0, [pc, #48]	@ (801c004 <ip4addr_aton+0x250>)
 801bfd4:	f002 f9f0 	bl	801e3b8 <iprintf>
      break;
 801bfd8:	e000      	b.n	801bfdc <ip4addr_aton+0x228>
      break;
 801bfda:	bf00      	nop
  }
  if (addr) {
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d005      	beq.n	801bfee <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801bfe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bfe4:	f7f3 fa29 	bl	800f43a <lwip_htonl>
 801bfe8:	4602      	mov	r2, r0
 801bfea:	683b      	ldr	r3, [r7, #0]
 801bfec:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801bfee:	2301      	movs	r3, #1
}
 801bff0:	4618      	mov	r0, r3
 801bff2:	3728      	adds	r7, #40	@ 0x28
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	08025ec6 	.word	0x08025ec6
 801bffc:	0802585c 	.word	0x0802585c
 801c000:	08025898 	.word	0x08025898
 801c004:	080258a4 	.word	0x080258a4

0801c008 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b084      	sub	sp, #16
 801c00c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c00e:	2300      	movs	r3, #0
 801c010:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c012:	4b12      	ldr	r3, [pc, #72]	@ (801c05c <ip_reass_tmr+0x54>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c018:	e018      	b.n	801c04c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	7fdb      	ldrb	r3, [r3, #31]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d00b      	beq.n	801c03a <ip_reass_tmr+0x32>
      r->timer--;
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	7fdb      	ldrb	r3, [r3, #31]
 801c026:	3b01      	subs	r3, #1
 801c028:	b2da      	uxtb	r2, r3
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	60fb      	str	r3, [r7, #12]
 801c038:	e008      	b.n	801c04c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c044:	68b9      	ldr	r1, [r7, #8]
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f000 f80a 	bl	801c060 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d1e3      	bne.n	801c01a <ip_reass_tmr+0x12>
    }
  }
}
 801c052:	bf00      	nop
 801c054:	bf00      	nop
 801c056:	3710      	adds	r7, #16
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	20012800 	.word	0x20012800

0801c060 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b088      	sub	sp, #32
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
 801c068:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c06a:	2300      	movs	r3, #0
 801c06c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c06e:	683a      	ldr	r2, [r7, #0]
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	429a      	cmp	r2, r3
 801c074:	d105      	bne.n	801c082 <ip_reass_free_complete_datagram+0x22>
 801c076:	4b45      	ldr	r3, [pc, #276]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c078:	22ab      	movs	r2, #171	@ 0xab
 801c07a:	4945      	ldr	r1, [pc, #276]	@ (801c190 <ip_reass_free_complete_datagram+0x130>)
 801c07c:	4845      	ldr	r0, [pc, #276]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c07e:	f002 f99b 	bl	801e3b8 <iprintf>
  if (prev != NULL) {
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d00a      	beq.n	801c09e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c088:	683b      	ldr	r3, [r7, #0]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	687a      	ldr	r2, [r7, #4]
 801c08e:	429a      	cmp	r2, r3
 801c090:	d005      	beq.n	801c09e <ip_reass_free_complete_datagram+0x3e>
 801c092:	4b3e      	ldr	r3, [pc, #248]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c094:	22ad      	movs	r2, #173	@ 0xad
 801c096:	4940      	ldr	r1, [pc, #256]	@ (801c198 <ip_reass_free_complete_datagram+0x138>)
 801c098:	483e      	ldr	r0, [pc, #248]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c09a:	f002 f98d 	bl	801e3b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	685b      	ldr	r3, [r3, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	889b      	ldrh	r3, [r3, #4]
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d12a      	bne.n	801c106 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c0b6:	697b      	ldr	r3, [r7, #20]
 801c0b8:	681a      	ldr	r2, [r3, #0]
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c0be:	69bb      	ldr	r3, [r7, #24]
 801c0c0:	6858      	ldr	r0, [r3, #4]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	3308      	adds	r3, #8
 801c0c6:	2214      	movs	r2, #20
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	f002 fb16 	bl	801e6fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c0ce:	2101      	movs	r1, #1
 801c0d0:	69b8      	ldr	r0, [r7, #24]
 801c0d2:	f7ff faff 	bl	801b6d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c0d6:	69b8      	ldr	r0, [r7, #24]
 801c0d8:	f7f5 f914 	bl	8011304 <pbuf_clen>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c0e0:	8bfa      	ldrh	r2, [r7, #30]
 801c0e2:	8a7b      	ldrh	r3, [r7, #18]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0ea:	db05      	blt.n	801c0f8 <ip_reass_free_complete_datagram+0x98>
 801c0ec:	4b27      	ldr	r3, [pc, #156]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c0ee:	22bc      	movs	r2, #188	@ 0xbc
 801c0f0:	492a      	ldr	r1, [pc, #168]	@ (801c19c <ip_reass_free_complete_datagram+0x13c>)
 801c0f2:	4828      	ldr	r0, [pc, #160]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c0f4:	f002 f960 	bl	801e3b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c0f8:	8bfa      	ldrh	r2, [r7, #30]
 801c0fa:	8a7b      	ldrh	r3, [r7, #18]
 801c0fc:	4413      	add	r3, r2
 801c0fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c100:	69b8      	ldr	r0, [r7, #24]
 801c102:	f7f5 f871 	bl	80111e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c10c:	e01f      	b.n	801c14e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c114:	69bb      	ldr	r3, [r7, #24]
 801c116:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c11e:	68f8      	ldr	r0, [r7, #12]
 801c120:	f7f5 f8f0 	bl	8011304 <pbuf_clen>
 801c124:	4603      	mov	r3, r0
 801c126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c128:	8bfa      	ldrh	r2, [r7, #30]
 801c12a:	8a7b      	ldrh	r3, [r7, #18]
 801c12c:	4413      	add	r3, r2
 801c12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c132:	db05      	blt.n	801c140 <ip_reass_free_complete_datagram+0xe0>
 801c134:	4b15      	ldr	r3, [pc, #84]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c136:	22cc      	movs	r2, #204	@ 0xcc
 801c138:	4918      	ldr	r1, [pc, #96]	@ (801c19c <ip_reass_free_complete_datagram+0x13c>)
 801c13a:	4816      	ldr	r0, [pc, #88]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c13c:	f002 f93c 	bl	801e3b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c140:	8bfa      	ldrh	r2, [r7, #30]
 801c142:	8a7b      	ldrh	r3, [r7, #18]
 801c144:	4413      	add	r3, r2
 801c146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c148:	68f8      	ldr	r0, [r7, #12]
 801c14a:	f7f5 f84d 	bl	80111e8 <pbuf_free>
  while (p != NULL) {
 801c14e:	69bb      	ldr	r3, [r7, #24]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d1dc      	bne.n	801c10e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c154:	6839      	ldr	r1, [r7, #0]
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	f000 f8c2 	bl	801c2e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c15c:	4b10      	ldr	r3, [pc, #64]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	8bfa      	ldrh	r2, [r7, #30]
 801c162:	429a      	cmp	r2, r3
 801c164:	d905      	bls.n	801c172 <ip_reass_free_complete_datagram+0x112>
 801c166:	4b09      	ldr	r3, [pc, #36]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c168:	22d2      	movs	r2, #210	@ 0xd2
 801c16a:	490e      	ldr	r1, [pc, #56]	@ (801c1a4 <ip_reass_free_complete_datagram+0x144>)
 801c16c:	4809      	ldr	r0, [pc, #36]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c16e:	f002 f923 	bl	801e3b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c172:	4b0b      	ldr	r3, [pc, #44]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c174:	881a      	ldrh	r2, [r3, #0]
 801c176:	8bfb      	ldrh	r3, [r7, #30]
 801c178:	1ad3      	subs	r3, r2, r3
 801c17a:	b29a      	uxth	r2, r3
 801c17c:	4b08      	ldr	r3, [pc, #32]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c17e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c180:	8bfb      	ldrh	r3, [r7, #30]
}
 801c182:	4618      	mov	r0, r3
 801c184:	3720      	adds	r7, #32
 801c186:	46bd      	mov	sp, r7
 801c188:	bd80      	pop	{r7, pc}
 801c18a:	bf00      	nop
 801c18c:	080258cc 	.word	0x080258cc
 801c190:	08025908 	.word	0x08025908
 801c194:	08025914 	.word	0x08025914
 801c198:	0802593c 	.word	0x0802593c
 801c19c:	08025950 	.word	0x08025950
 801c1a0:	20012804 	.word	0x20012804
 801c1a4:	08025970 	.word	0x08025970

0801c1a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b08a      	sub	sp, #40	@ 0x28
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
 801c1b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c1be:	2300      	movs	r3, #0
 801c1c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c1c6:	4b28      	ldr	r3, [pc, #160]	@ (801c268 <ip_reass_remove_oldest_datagram+0xc0>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c1cc:	e030      	b.n	801c230 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1d0:	695a      	ldr	r2, [r3, #20]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	68db      	ldr	r3, [r3, #12]
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d10c      	bne.n	801c1f4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1dc:	699a      	ldr	r2, [r3, #24]
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	691b      	ldr	r3, [r3, #16]
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d106      	bne.n	801c1f4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e8:	899a      	ldrh	r2, [r3, #12]
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	889b      	ldrh	r3, [r3, #4]
 801c1ee:	b29b      	uxth	r3, r3
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d014      	beq.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c1f4:	693b      	ldr	r3, [r7, #16]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c1fa:	6a3b      	ldr	r3, [r7, #32]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d104      	bne.n	801c20a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c202:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c204:	69fb      	ldr	r3, [r7, #28]
 801c206:	61bb      	str	r3, [r7, #24]
 801c208:	e009      	b.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c20c:	7fda      	ldrb	r2, [r3, #31]
 801c20e:	6a3b      	ldr	r3, [r7, #32]
 801c210:	7fdb      	ldrb	r3, [r3, #31]
 801c212:	429a      	cmp	r2, r3
 801c214:	d803      	bhi.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c218:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c21a:	69fb      	ldr	r3, [r7, #28]
 801c21c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d001      	beq.n	801c22a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c228:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c232:	2b00      	cmp	r3, #0
 801c234:	d1cb      	bne.n	801c1ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c236:	6a3b      	ldr	r3, [r7, #32]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d008      	beq.n	801c24e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c23c:	69b9      	ldr	r1, [r7, #24]
 801c23e:	6a38      	ldr	r0, [r7, #32]
 801c240:	f7ff ff0e 	bl	801c060 <ip_reass_free_complete_datagram>
 801c244:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c246:	697a      	ldr	r2, [r7, #20]
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	4413      	add	r3, r2
 801c24c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c24e:	697a      	ldr	r2, [r7, #20]
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	429a      	cmp	r2, r3
 801c254:	da02      	bge.n	801c25c <ip_reass_remove_oldest_datagram+0xb4>
 801c256:	693b      	ldr	r3, [r7, #16]
 801c258:	2b01      	cmp	r3, #1
 801c25a:	dcac      	bgt.n	801c1b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c25c:	697b      	ldr	r3, [r7, #20]
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3728      	adds	r7, #40	@ 0x28
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	20012800 	.word	0x20012800

0801c26c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
 801c274:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c276:	2004      	movs	r0, #4
 801c278:	f7f4 f890 	bl	801039c <memp_malloc>
 801c27c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d110      	bne.n	801c2a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c284:	6839      	ldr	r1, [r7, #0]
 801c286:	6878      	ldr	r0, [r7, #4]
 801c288:	f7ff ff8e 	bl	801c1a8 <ip_reass_remove_oldest_datagram>
 801c28c:	4602      	mov	r2, r0
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	4293      	cmp	r3, r2
 801c292:	dc03      	bgt.n	801c29c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c294:	2004      	movs	r0, #4
 801c296:	f7f4 f881 	bl	801039c <memp_malloc>
 801c29a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d101      	bne.n	801c2a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	e016      	b.n	801c2d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c2a6:	2220      	movs	r2, #32
 801c2a8:	2100      	movs	r1, #0
 801c2aa:	68f8      	ldr	r0, [r7, #12]
 801c2ac:	f002 f923 	bl	801e4f6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	220f      	movs	r2, #15
 801c2b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c2b6:	4b09      	ldr	r3, [pc, #36]	@ (801c2dc <ip_reass_enqueue_new_datagram+0x70>)
 801c2b8:	681a      	ldr	r2, [r3, #0]
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c2be:	4a07      	ldr	r2, [pc, #28]	@ (801c2dc <ip_reass_enqueue_new_datagram+0x70>)
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	3308      	adds	r3, #8
 801c2c8:	2214      	movs	r2, #20
 801c2ca:	6879      	ldr	r1, [r7, #4]
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	f002 fa14 	bl	801e6fa <memcpy>
  return ipr;
 801c2d2:	68fb      	ldr	r3, [r7, #12]
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	3710      	adds	r7, #16
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}
 801c2dc:	20012800 	.word	0x20012800

0801c2e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
 801c2e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c2ea:	4b10      	ldr	r3, [pc, #64]	@ (801c32c <ip_reass_dequeue_datagram+0x4c>)
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	687a      	ldr	r2, [r7, #4]
 801c2f0:	429a      	cmp	r2, r3
 801c2f2:	d104      	bne.n	801c2fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	4a0c      	ldr	r2, [pc, #48]	@ (801c32c <ip_reass_dequeue_datagram+0x4c>)
 801c2fa:	6013      	str	r3, [r2, #0]
 801c2fc:	e00d      	b.n	801c31a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d106      	bne.n	801c312 <ip_reass_dequeue_datagram+0x32>
 801c304:	4b0a      	ldr	r3, [pc, #40]	@ (801c330 <ip_reass_dequeue_datagram+0x50>)
 801c306:	f240 1245 	movw	r2, #325	@ 0x145
 801c30a:	490a      	ldr	r1, [pc, #40]	@ (801c334 <ip_reass_dequeue_datagram+0x54>)
 801c30c:	480a      	ldr	r0, [pc, #40]	@ (801c338 <ip_reass_dequeue_datagram+0x58>)
 801c30e:	f002 f853 	bl	801e3b8 <iprintf>
    prev->next = ipr->next;
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	681a      	ldr	r2, [r3, #0]
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c31a:	6879      	ldr	r1, [r7, #4]
 801c31c:	2004      	movs	r0, #4
 801c31e:	f7f4 f8b3 	bl	8010488 <memp_free>
}
 801c322:	bf00      	nop
 801c324:	3708      	adds	r7, #8
 801c326:	46bd      	mov	sp, r7
 801c328:	bd80      	pop	{r7, pc}
 801c32a:	bf00      	nop
 801c32c:	20012800 	.word	0x20012800
 801c330:	080258cc 	.word	0x080258cc
 801c334:	08025994 	.word	0x08025994
 801c338:	08025914 	.word	0x08025914

0801c33c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b08c      	sub	sp, #48	@ 0x30
 801c340:	af00      	add	r7, sp, #0
 801c342:	60f8      	str	r0, [r7, #12]
 801c344:	60b9      	str	r1, [r7, #8]
 801c346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c348:	2300      	movs	r3, #0
 801c34a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c34c:	2301      	movs	r3, #1
 801c34e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	685b      	ldr	r3, [r3, #4]
 801c354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c356:	69fb      	ldr	r3, [r7, #28]
 801c358:	885b      	ldrh	r3, [r3, #2]
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	4618      	mov	r0, r3
 801c35e:	f7f3 f857 	bl	800f410 <lwip_htons>
 801c362:	4603      	mov	r3, r0
 801c364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c366:	69fb      	ldr	r3, [r7, #28]
 801c368:	781b      	ldrb	r3, [r3, #0]
 801c36a:	f003 030f 	and.w	r3, r3, #15
 801c36e:	b2db      	uxtb	r3, r3
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c374:	7e7b      	ldrb	r3, [r7, #25]
 801c376:	b29b      	uxth	r3, r3
 801c378:	8b7a      	ldrh	r2, [r7, #26]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d202      	bcs.n	801c384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c37e:	f04f 33ff 	mov.w	r3, #4294967295
 801c382:	e135      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c384:	7e7b      	ldrb	r3, [r7, #25]
 801c386:	b29b      	uxth	r3, r3
 801c388:	8b7a      	ldrh	r2, [r7, #26]
 801c38a:	1ad3      	subs	r3, r2, r3
 801c38c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c38e:	69fb      	ldr	r3, [r7, #28]
 801c390:	88db      	ldrh	r3, [r3, #6]
 801c392:	b29b      	uxth	r3, r3
 801c394:	4618      	mov	r0, r3
 801c396:	f7f3 f83b 	bl	800f410 <lwip_htons>
 801c39a:	4603      	mov	r3, r0
 801c39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	00db      	lsls	r3, r3, #3
 801c3a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	701a      	strb	r2, [r3, #0]
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	705a      	strb	r2, [r3, #1]
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	709a      	strb	r2, [r3, #2]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3c0:	8afa      	ldrh	r2, [r7, #22]
 801c3c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c3c4:	8afa      	ldrh	r2, [r7, #22]
 801c3c6:	8b7b      	ldrh	r3, [r7, #26]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	b29a      	uxth	r2, r3
 801c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3d2:	88db      	ldrh	r3, [r3, #6]
 801c3d4:	b29b      	uxth	r3, r3
 801c3d6:	8afa      	ldrh	r2, [r7, #22]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d902      	bls.n	801c3e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c3e0:	e106      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3e8:	e068      	b.n	801c4bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ec:	685b      	ldr	r3, [r3, #4]
 801c3ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3f2:	889b      	ldrh	r3, [r3, #4]
 801c3f4:	b29a      	uxth	r2, r3
 801c3f6:	693b      	ldr	r3, [r7, #16]
 801c3f8:	889b      	ldrh	r3, [r3, #4]
 801c3fa:	b29b      	uxth	r3, r3
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d235      	bcs.n	801c46c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d020      	beq.n	801c44e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c40e:	889b      	ldrh	r3, [r3, #4]
 801c410:	b29a      	uxth	r2, r3
 801c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c414:	88db      	ldrh	r3, [r3, #6]
 801c416:	b29b      	uxth	r3, r3
 801c418:	429a      	cmp	r2, r3
 801c41a:	d307      	bcc.n	801c42c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c41e:	88db      	ldrh	r3, [r3, #6]
 801c420:	b29a      	uxth	r2, r3
 801c422:	693b      	ldr	r3, [r7, #16]
 801c424:	889b      	ldrh	r3, [r3, #4]
 801c426:	b29b      	uxth	r3, r3
 801c428:	429a      	cmp	r2, r3
 801c42a:	d902      	bls.n	801c432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c42c:	f04f 33ff 	mov.w	r3, #4294967295
 801c430:	e0de      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c434:	68ba      	ldr	r2, [r7, #8]
 801c436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c43a:	88db      	ldrh	r3, [r3, #6]
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c440:	889b      	ldrh	r3, [r3, #4]
 801c442:	b29b      	uxth	r3, r3
 801c444:	429a      	cmp	r2, r3
 801c446:	d03d      	beq.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c448:	2300      	movs	r3, #0
 801c44a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c44c:	e03a      	b.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c450:	88db      	ldrh	r3, [r3, #6]
 801c452:	b29a      	uxth	r2, r3
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	889b      	ldrh	r3, [r3, #4]
 801c458:	b29b      	uxth	r3, r3
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d902      	bls.n	801c464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c45e:	f04f 33ff 	mov.w	r3, #4294967295
 801c462:	e0c5      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	68ba      	ldr	r2, [r7, #8]
 801c468:	605a      	str	r2, [r3, #4]
      break;
 801c46a:	e02b      	b.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c46e:	889b      	ldrh	r3, [r3, #4]
 801c470:	b29a      	uxth	r2, r3
 801c472:	693b      	ldr	r3, [r7, #16]
 801c474:	889b      	ldrh	r3, [r3, #4]
 801c476:	b29b      	uxth	r3, r3
 801c478:	429a      	cmp	r2, r3
 801c47a:	d102      	bne.n	801c482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c47c:	f04f 33ff 	mov.w	r3, #4294967295
 801c480:	e0b6      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c484:	889b      	ldrh	r3, [r3, #4]
 801c486:	b29a      	uxth	r2, r3
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	88db      	ldrh	r3, [r3, #6]
 801c48c:	b29b      	uxth	r3, r3
 801c48e:	429a      	cmp	r2, r3
 801c490:	d202      	bcs.n	801c498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c492:	f04f 33ff 	mov.w	r3, #4294967295
 801c496:	e0ab      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d009      	beq.n	801c4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4a0:	88db      	ldrh	r3, [r3, #6]
 801c4a2:	b29a      	uxth	r2, r3
 801c4a4:	693b      	ldr	r3, [r7, #16]
 801c4a6:	889b      	ldrh	r3, [r3, #4]
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	429a      	cmp	r2, r3
 801c4ac:	d001      	beq.n	801c4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c4b8:	693b      	ldr	r3, [r7, #16]
 801c4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d193      	bne.n	801c3ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c4c2:	e000      	b.n	801c4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c4c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d12d      	bne.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d01c      	beq.n	801c50c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4d4:	88db      	ldrh	r3, [r3, #6]
 801c4d6:	b29a      	uxth	r2, r3
 801c4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4da:	889b      	ldrh	r3, [r3, #4]
 801c4dc:	b29b      	uxth	r3, r3
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	d906      	bls.n	801c4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c4e2:	4b45      	ldr	r3, [pc, #276]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c4e4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c4e8:	4944      	ldr	r1, [pc, #272]	@ (801c5fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c4ea:	4845      	ldr	r0, [pc, #276]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c4ec:	f001 ff64 	bl	801e3b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4f2:	68ba      	ldr	r2, [r7, #8]
 801c4f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4f8:	88db      	ldrh	r3, [r3, #6]
 801c4fa:	b29a      	uxth	r2, r3
 801c4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4fe:	889b      	ldrh	r3, [r3, #4]
 801c500:	b29b      	uxth	r3, r3
 801c502:	429a      	cmp	r2, r3
 801c504:	d010      	beq.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c506:	2300      	movs	r3, #0
 801c508:	623b      	str	r3, [r7, #32]
 801c50a:	e00d      	b.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d006      	beq.n	801c522 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c514:	4b38      	ldr	r3, [pc, #224]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c516:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c51a:	493a      	ldr	r1, [pc, #232]	@ (801c604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c51c:	4838      	ldr	r0, [pc, #224]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c51e:	f001 ff4b 	bl	801e3b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	68ba      	ldr	r2, [r7, #8]
 801c526:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d105      	bne.n	801c53a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	7f9b      	ldrb	r3, [r3, #30]
 801c532:	f003 0301 	and.w	r3, r3, #1
 801c536:	2b00      	cmp	r3, #0
 801c538:	d059      	beq.n	801c5ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c53a:	6a3b      	ldr	r3, [r7, #32]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d04f      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	685b      	ldr	r3, [r3, #4]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d006      	beq.n	801c556 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	685b      	ldr	r3, [r3, #4]
 801c54e:	889b      	ldrh	r3, [r3, #4]
 801c550:	b29b      	uxth	r3, r3
 801c552:	2b00      	cmp	r3, #0
 801c554:	d002      	beq.n	801c55c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c556:	2300      	movs	r3, #0
 801c558:	623b      	str	r3, [r7, #32]
 801c55a:	e041      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c55e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c566:	e012      	b.n	801c58e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c56a:	685b      	ldr	r3, [r3, #4]
 801c56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c570:	88db      	ldrh	r3, [r3, #6]
 801c572:	b29a      	uxth	r2, r3
 801c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c576:	889b      	ldrh	r3, [r3, #4]
 801c578:	b29b      	uxth	r3, r3
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d002      	beq.n	801c584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c57e:	2300      	movs	r3, #0
 801c580:	623b      	str	r3, [r7, #32]
            break;
 801c582:	e007      	b.n	801c594 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c586:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c590:	2b00      	cmp	r3, #0
 801c592:	d1e9      	bne.n	801c568 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c594:	6a3b      	ldr	r3, [r7, #32]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d022      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	685b      	ldr	r3, [r3, #4]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d106      	bne.n	801c5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c5a2:	4b15      	ldr	r3, [pc, #84]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5a4:	f240 12df 	movw	r2, #479	@ 0x1df
 801c5a8:	4917      	ldr	r1, [pc, #92]	@ (801c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5aa:	4815      	ldr	r0, [pc, #84]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5ac:	f001 ff04 	bl	801e3b8 <iprintf>
          LWIP_ASSERT("sanity check",
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	685b      	ldr	r3, [r3, #4]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5b8:	429a      	cmp	r2, r3
 801c5ba:	d106      	bne.n	801c5ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c5bc:	4b0e      	ldr	r3, [pc, #56]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c5c2:	4911      	ldr	r1, [pc, #68]	@ (801c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5c4:	480e      	ldr	r0, [pc, #56]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5c6:	f001 fef7 	bl	801e3b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d006      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c5d2:	4b09      	ldr	r3, [pc, #36]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5d4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c5d8:	490c      	ldr	r1, [pc, #48]	@ (801c60c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c5da:	4809      	ldr	r0, [pc, #36]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5dc:	f001 feec 	bl	801e3b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c5e0:	6a3b      	ldr	r3, [r7, #32]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	bf14      	ite	ne
 801c5e6:	2301      	movne	r3, #1
 801c5e8:	2300      	moveq	r3, #0
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	e000      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c5ee:	2300      	movs	r3, #0
}
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	3730      	adds	r7, #48	@ 0x30
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	080258cc 	.word	0x080258cc
 801c5fc:	080259b0 	.word	0x080259b0
 801c600:	08025914 	.word	0x08025914
 801c604:	080259d0 	.word	0x080259d0
 801c608:	08025a08 	.word	0x08025a08
 801c60c:	08025a18 	.word	0x08025a18

0801c610 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b08e      	sub	sp, #56	@ 0x38
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	685b      	ldr	r3, [r3, #4]
 801c61c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c620:	781b      	ldrb	r3, [r3, #0]
 801c622:	f003 030f 	and.w	r3, r3, #15
 801c626:	b2db      	uxtb	r3, r3
 801c628:	009b      	lsls	r3, r3, #2
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	2b14      	cmp	r3, #20
 801c62e:	f040 8171 	bne.w	801c914 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c634:	88db      	ldrh	r3, [r3, #6]
 801c636:	b29b      	uxth	r3, r3
 801c638:	4618      	mov	r0, r3
 801c63a:	f7f2 fee9 	bl	800f410 <lwip_htons>
 801c63e:	4603      	mov	r3, r0
 801c640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c644:	b29b      	uxth	r3, r3
 801c646:	00db      	lsls	r3, r3, #3
 801c648:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c64c:	885b      	ldrh	r3, [r3, #2]
 801c64e:	b29b      	uxth	r3, r3
 801c650:	4618      	mov	r0, r3
 801c652:	f7f2 fedd 	bl	800f410 <lwip_htons>
 801c656:	4603      	mov	r3, r0
 801c658:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c65c:	781b      	ldrb	r3, [r3, #0]
 801c65e:	f003 030f 	and.w	r3, r3, #15
 801c662:	b2db      	uxtb	r3, r3
 801c664:	009b      	lsls	r3, r3, #2
 801c666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c66a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c66e:	b29b      	uxth	r3, r3
 801c670:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c672:	429a      	cmp	r2, r3
 801c674:	f0c0 8150 	bcc.w	801c918 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c680:	1ad3      	subs	r3, r2, r3
 801c682:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7f4 fe3d 	bl	8011304 <pbuf_clen>
 801c68a:	4603      	mov	r3, r0
 801c68c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c68e:	4b8c      	ldr	r3, [pc, #560]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c690:	881b      	ldrh	r3, [r3, #0]
 801c692:	461a      	mov	r2, r3
 801c694:	8c3b      	ldrh	r3, [r7, #32]
 801c696:	4413      	add	r3, r2
 801c698:	2b0a      	cmp	r3, #10
 801c69a:	dd10      	ble.n	801c6be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c69c:	8c3b      	ldrh	r3, [r7, #32]
 801c69e:	4619      	mov	r1, r3
 801c6a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6a2:	f7ff fd81 	bl	801c1a8 <ip_reass_remove_oldest_datagram>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	f000 8137 	beq.w	801c91c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c6ae:	4b84      	ldr	r3, [pc, #528]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c6b0:	881b      	ldrh	r3, [r3, #0]
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	8c3b      	ldrh	r3, [r7, #32]
 801c6b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c6b8:	2b0a      	cmp	r3, #10
 801c6ba:	f300 812f 	bgt.w	801c91c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6be:	4b81      	ldr	r3, [pc, #516]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6c4:	e015      	b.n	801c6f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6c8:	695a      	ldr	r2, [r3, #20]
 801c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6cc:	68db      	ldr	r3, [r3, #12]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d10c      	bne.n	801c6ec <ip4_reass+0xdc>
 801c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6d4:	699a      	ldr	r2, [r3, #24]
 801c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d8:	691b      	ldr	r3, [r3, #16]
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	d106      	bne.n	801c6ec <ip4_reass+0xdc>
 801c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6e0:	899a      	ldrh	r2, [r3, #12]
 801c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6e4:	889b      	ldrh	r3, [r3, #4]
 801c6e6:	b29b      	uxth	r3, r3
 801c6e8:	429a      	cmp	r2, r3
 801c6ea:	d006      	beq.n	801c6fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d1e6      	bne.n	801c6c6 <ip4_reass+0xb6>
 801c6f8:	e000      	b.n	801c6fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c6fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d109      	bne.n	801c716 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c702:	8c3b      	ldrh	r3, [r7, #32]
 801c704:	4619      	mov	r1, r3
 801c706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c708:	f7ff fdb0 	bl	801c26c <ip_reass_enqueue_new_datagram>
 801c70c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c710:	2b00      	cmp	r3, #0
 801c712:	d11c      	bne.n	801c74e <ip4_reass+0x13e>
      goto nullreturn;
 801c714:	e105      	b.n	801c922 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c718:	88db      	ldrh	r3, [r3, #6]
 801c71a:	b29b      	uxth	r3, r3
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f2 fe77 	bl	800f410 <lwip_htons>
 801c722:	4603      	mov	r3, r0
 801c724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d110      	bne.n	801c74e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c72e:	89db      	ldrh	r3, [r3, #14]
 801c730:	4618      	mov	r0, r3
 801c732:	f7f2 fe6d 	bl	800f410 <lwip_htons>
 801c736:	4603      	mov	r3, r0
 801c738:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d006      	beq.n	801c74e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c742:	3308      	adds	r3, #8
 801c744:	2214      	movs	r2, #20
 801c746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c748:	4618      	mov	r0, r3
 801c74a:	f001 ffd6 	bl	801e6fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c750:	88db      	ldrh	r3, [r3, #6]
 801c752:	b29b      	uxth	r3, r3
 801c754:	f003 0320 	and.w	r3, r3, #32
 801c758:	2b00      	cmp	r3, #0
 801c75a:	bf0c      	ite	eq
 801c75c:	2301      	moveq	r3, #1
 801c75e:	2300      	movne	r3, #0
 801c760:	b2db      	uxtb	r3, r3
 801c762:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c764:	69fb      	ldr	r3, [r7, #28]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d00e      	beq.n	801c788 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c76a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c76c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c76e:	4413      	add	r3, r2
 801c770:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c772:	8b7a      	ldrh	r2, [r7, #26]
 801c774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c776:	429a      	cmp	r2, r3
 801c778:	f0c0 80a0 	bcc.w	801c8bc <ip4_reass+0x2ac>
 801c77c:	8b7b      	ldrh	r3, [r7, #26]
 801c77e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c782:	4293      	cmp	r3, r2
 801c784:	f200 809a 	bhi.w	801c8bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c788:	69fa      	ldr	r2, [r7, #28]
 801c78a:	6879      	ldr	r1, [r7, #4]
 801c78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c78e:	f7ff fdd5 	bl	801c33c <ip_reass_chain_frag_into_datagram_and_validate>
 801c792:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c794:	697b      	ldr	r3, [r7, #20]
 801c796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c79a:	f000 809b 	beq.w	801c8d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c79e:	4b48      	ldr	r3, [pc, #288]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c7a0:	881a      	ldrh	r2, [r3, #0]
 801c7a2:	8c3b      	ldrh	r3, [r7, #32]
 801c7a4:	4413      	add	r3, r2
 801c7a6:	b29a      	uxth	r2, r3
 801c7a8:	4b45      	ldr	r3, [pc, #276]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c7aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c7ac:	69fb      	ldr	r3, [r7, #28]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d00d      	beq.n	801c7ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c7b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7b6:	4413      	add	r3, r2
 801c7b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7bc:	8a7a      	ldrh	r2, [r7, #18]
 801c7be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c2:	7f9b      	ldrb	r3, [r3, #30]
 801c7c4:	f043 0301 	orr.w	r3, r3, #1
 801c7c8:	b2da      	uxtb	r2, r3
 801c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	d171      	bne.n	801c8b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d6:	8b9b      	ldrh	r3, [r3, #28]
 801c7d8:	3314      	adds	r3, #20
 801c7da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7de:	685b      	ldr	r3, [r3, #4]
 801c7e0:	685b      	ldr	r3, [r3, #4]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	685b      	ldr	r3, [r3, #4]
 801c7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7f0:	3308      	adds	r3, #8
 801c7f2:	2214      	movs	r2, #20
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c7f8:	f001 ff7f 	bl	801e6fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c7fc:	8a3b      	ldrh	r3, [r7, #16]
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7f2 fe06 	bl	800f410 <lwip_htons>
 801c804:	4603      	mov	r3, r0
 801c806:	461a      	mov	r2, r3
 801c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c80a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c80e:	2200      	movs	r2, #0
 801c810:	719a      	strb	r2, [r3, #6]
 801c812:	2200      	movs	r2, #0
 801c814:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c818:	2200      	movs	r2, #0
 801c81a:	729a      	strb	r2, [r3, #10]
 801c81c:	2200      	movs	r2, #0
 801c81e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c822:	685b      	ldr	r3, [r3, #4]
 801c824:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c826:	e00d      	b.n	801c844 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c82e:	2114      	movs	r1, #20
 801c830:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c832:	f7f4 fc53 	bl	80110dc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c836:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7f4 fda3 	bl	8011384 <pbuf_cat>
      r = iprh->next_pbuf;
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c846:	2b00      	cmp	r3, #0
 801c848:	d1ee      	bne.n	801c828 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c84a:	4b1e      	ldr	r3, [pc, #120]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c850:	429a      	cmp	r2, r3
 801c852:	d102      	bne.n	801c85a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c854:	2300      	movs	r3, #0
 801c856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c858:	e010      	b.n	801c87c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c85a:	4b1a      	ldr	r3, [pc, #104]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c860:	e007      	b.n	801c872 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c868:	429a      	cmp	r2, r3
 801c86a:	d006      	beq.n	801c87a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c874:	2b00      	cmp	r3, #0
 801c876:	d1f4      	bne.n	801c862 <ip4_reass+0x252>
 801c878:	e000      	b.n	801c87c <ip4_reass+0x26c>
          break;
 801c87a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c87c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c87e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c880:	f7ff fd2e 	bl	801c2e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c884:	6878      	ldr	r0, [r7, #4]
 801c886:	f7f4 fd3d 	bl	8011304 <pbuf_clen>
 801c88a:	4603      	mov	r3, r0
 801c88c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c88e:	4b0c      	ldr	r3, [pc, #48]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c890:	881b      	ldrh	r3, [r3, #0]
 801c892:	8c3a      	ldrh	r2, [r7, #32]
 801c894:	429a      	cmp	r2, r3
 801c896:	d906      	bls.n	801c8a6 <ip4_reass+0x296>
 801c898:	4b0b      	ldr	r3, [pc, #44]	@ (801c8c8 <ip4_reass+0x2b8>)
 801c89a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c89e:	490b      	ldr	r1, [pc, #44]	@ (801c8cc <ip4_reass+0x2bc>)
 801c8a0:	480b      	ldr	r0, [pc, #44]	@ (801c8d0 <ip4_reass+0x2c0>)
 801c8a2:	f001 fd89 	bl	801e3b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c8a6:	4b06      	ldr	r3, [pc, #24]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c8a8:	881a      	ldrh	r2, [r3, #0]
 801c8aa:	8c3b      	ldrh	r3, [r7, #32]
 801c8ac:	1ad3      	subs	r3, r2, r3
 801c8ae:	b29a      	uxth	r2, r3
 801c8b0:	4b03      	ldr	r3, [pc, #12]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c8b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	e038      	b.n	801c92a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	e036      	b.n	801c92a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c8bc:	bf00      	nop
 801c8be:	e00a      	b.n	801c8d6 <ip4_reass+0x2c6>
 801c8c0:	20012804 	.word	0x20012804
 801c8c4:	20012800 	.word	0x20012800
 801c8c8:	080258cc 	.word	0x080258cc
 801c8cc:	08025a3c 	.word	0x08025a3c
 801c8d0:	08025914 	.word	0x08025914
    goto nullreturn_ipr;
 801c8d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d106      	bne.n	801c8ea <ip4_reass+0x2da>
 801c8dc:	4b15      	ldr	r3, [pc, #84]	@ (801c934 <ip4_reass+0x324>)
 801c8de:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c8e2:	4915      	ldr	r1, [pc, #84]	@ (801c938 <ip4_reass+0x328>)
 801c8e4:	4815      	ldr	r0, [pc, #84]	@ (801c93c <ip4_reass+0x32c>)
 801c8e6:	f001 fd67 	bl	801e3b8 <iprintf>
  if (ipr->p == NULL) {
 801c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8ec:	685b      	ldr	r3, [r3, #4]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d116      	bne.n	801c920 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c8f2:	4b13      	ldr	r3, [pc, #76]	@ (801c940 <ip4_reass+0x330>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d006      	beq.n	801c90a <ip4_reass+0x2fa>
 801c8fc:	4b0d      	ldr	r3, [pc, #52]	@ (801c934 <ip4_reass+0x324>)
 801c8fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c902:	4910      	ldr	r1, [pc, #64]	@ (801c944 <ip4_reass+0x334>)
 801c904:	480d      	ldr	r0, [pc, #52]	@ (801c93c <ip4_reass+0x32c>)
 801c906:	f001 fd57 	bl	801e3b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c90a:	2100      	movs	r1, #0
 801c90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c90e:	f7ff fce7 	bl	801c2e0 <ip_reass_dequeue_datagram>
 801c912:	e006      	b.n	801c922 <ip4_reass+0x312>
    goto nullreturn;
 801c914:	bf00      	nop
 801c916:	e004      	b.n	801c922 <ip4_reass+0x312>
    goto nullreturn;
 801c918:	bf00      	nop
 801c91a:	e002      	b.n	801c922 <ip4_reass+0x312>
      goto nullreturn;
 801c91c:	bf00      	nop
 801c91e:	e000      	b.n	801c922 <ip4_reass+0x312>
  }

nullreturn:
 801c920:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c922:	6878      	ldr	r0, [r7, #4]
 801c924:	f7f4 fc60 	bl	80111e8 <pbuf_free>
  return NULL;
 801c928:	2300      	movs	r3, #0
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	3738      	adds	r7, #56	@ 0x38
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	080258cc 	.word	0x080258cc
 801c938:	08025a58 	.word	0x08025a58
 801c93c:	08025914 	.word	0x08025914
 801c940:	20012800 	.word	0x20012800
 801c944:	08025a64 	.word	0x08025a64

0801c948 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c94c:	2005      	movs	r0, #5
 801c94e:	f7f3 fd25 	bl	801039c <memp_malloc>
 801c952:	4603      	mov	r3, r0
}
 801c954:	4618      	mov	r0, r3
 801c956:	bd80      	pop	{r7, pc}

0801c958 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d106      	bne.n	801c974 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c966:	4b07      	ldr	r3, [pc, #28]	@ (801c984 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c968:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c96c:	4906      	ldr	r1, [pc, #24]	@ (801c988 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c96e:	4807      	ldr	r0, [pc, #28]	@ (801c98c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c970:	f001 fd22 	bl	801e3b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c974:	6879      	ldr	r1, [r7, #4]
 801c976:	2005      	movs	r0, #5
 801c978:	f7f3 fd86 	bl	8010488 <memp_free>
}
 801c97c:	bf00      	nop
 801c97e:	3708      	adds	r7, #8
 801c980:	46bd      	mov	sp, r7
 801c982:	bd80      	pop	{r7, pc}
 801c984:	080258cc 	.word	0x080258cc
 801c988:	08025a84 	.word	0x08025a84
 801c98c:	08025914 	.word	0x08025914

0801c990 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b084      	sub	sp, #16
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d106      	bne.n	801c9b0 <ipfrag_free_pbuf_custom+0x20>
 801c9a2:	4b11      	ldr	r3, [pc, #68]	@ (801c9e8 <ipfrag_free_pbuf_custom+0x58>)
 801c9a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c9a8:	4910      	ldr	r1, [pc, #64]	@ (801c9ec <ipfrag_free_pbuf_custom+0x5c>)
 801c9aa:	4811      	ldr	r0, [pc, #68]	@ (801c9f0 <ipfrag_free_pbuf_custom+0x60>)
 801c9ac:	f001 fd04 	bl	801e3b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c9b0:	68fa      	ldr	r2, [r7, #12]
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	429a      	cmp	r2, r3
 801c9b6:	d006      	beq.n	801c9c6 <ipfrag_free_pbuf_custom+0x36>
 801c9b8:	4b0b      	ldr	r3, [pc, #44]	@ (801c9e8 <ipfrag_free_pbuf_custom+0x58>)
 801c9ba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c9be:	490d      	ldr	r1, [pc, #52]	@ (801c9f4 <ipfrag_free_pbuf_custom+0x64>)
 801c9c0:	480b      	ldr	r0, [pc, #44]	@ (801c9f0 <ipfrag_free_pbuf_custom+0x60>)
 801c9c2:	f001 fcf9 	bl	801e3b8 <iprintf>
  if (pcr->original != NULL) {
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d004      	beq.n	801c9d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	695b      	ldr	r3, [r3, #20]
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7f4 fc08 	bl	80111e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c9d8:	68f8      	ldr	r0, [r7, #12]
 801c9da:	f7ff ffbd 	bl	801c958 <ip_frag_free_pbuf_custom_ref>
}
 801c9de:	bf00      	nop
 801c9e0:	3710      	adds	r7, #16
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	bd80      	pop	{r7, pc}
 801c9e6:	bf00      	nop
 801c9e8:	080258cc 	.word	0x080258cc
 801c9ec:	08025a90 	.word	0x08025a90
 801c9f0:	08025914 	.word	0x08025914
 801c9f4:	08025a9c 	.word	0x08025a9c

0801c9f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b094      	sub	sp, #80	@ 0x50
 801c9fc:	af02      	add	r7, sp, #8
 801c9fe:	60f8      	str	r0, [r7, #12]
 801ca00:	60b9      	str	r1, [r7, #8]
 801ca02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ca04:	2300      	movs	r3, #0
 801ca06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ca0a:	68bb      	ldr	r3, [r7, #8]
 801ca0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ca0e:	3b14      	subs	r3, #20
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	da00      	bge.n	801ca16 <ip4_frag+0x1e>
 801ca14:	3307      	adds	r3, #7
 801ca16:	10db      	asrs	r3, r3, #3
 801ca18:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ca1a:	2314      	movs	r3, #20
 801ca1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	685b      	ldr	r3, [r3, #4]
 801ca22:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	f003 030f 	and.w	r3, r3, #15
 801ca30:	b2db      	uxtb	r3, r3
 801ca32:	009b      	lsls	r3, r3, #2
 801ca34:	b2db      	uxtb	r3, r3
 801ca36:	2b14      	cmp	r3, #20
 801ca38:	d002      	beq.n	801ca40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ca3a:	f06f 0305 	mvn.w	r3, #5
 801ca3e:	e110      	b.n	801cc62 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	895b      	ldrh	r3, [r3, #10]
 801ca44:	2b13      	cmp	r3, #19
 801ca46:	d809      	bhi.n	801ca5c <ip4_frag+0x64>
 801ca48:	4b88      	ldr	r3, [pc, #544]	@ (801cc6c <ip4_frag+0x274>)
 801ca4a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ca4e:	4988      	ldr	r1, [pc, #544]	@ (801cc70 <ip4_frag+0x278>)
 801ca50:	4888      	ldr	r0, [pc, #544]	@ (801cc74 <ip4_frag+0x27c>)
 801ca52:	f001 fcb1 	bl	801e3b8 <iprintf>
 801ca56:	f06f 0305 	mvn.w	r3, #5
 801ca5a:	e102      	b.n	801cc62 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ca5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca5e:	88db      	ldrh	r3, [r3, #6]
 801ca60:	b29b      	uxth	r3, r3
 801ca62:	4618      	mov	r0, r3
 801ca64:	f7f2 fcd4 	bl	800f410 <lwip_htons>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ca6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca72:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ca76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	891b      	ldrh	r3, [r3, #8]
 801ca82:	3b14      	subs	r3, #20
 801ca84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ca88:	e0e1      	b.n	801cc4e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ca8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	b29b      	uxth	r3, r3
 801ca90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ca94:	4293      	cmp	r3, r2
 801ca96:	bf28      	it	cs
 801ca98:	4613      	movcs	r3, r2
 801ca9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ca9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801caa0:	2114      	movs	r1, #20
 801caa2:	200e      	movs	r0, #14
 801caa4:	f7f4 f8bc 	bl	8010c20 <pbuf_alloc>
 801caa8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caac:	2b00      	cmp	r3, #0
 801caae:	f000 80d5 	beq.w	801cc5c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cab4:	895b      	ldrh	r3, [r3, #10]
 801cab6:	2b13      	cmp	r3, #19
 801cab8:	d806      	bhi.n	801cac8 <ip4_frag+0xd0>
 801caba:	4b6c      	ldr	r3, [pc, #432]	@ (801cc6c <ip4_frag+0x274>)
 801cabc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cac0:	496d      	ldr	r1, [pc, #436]	@ (801cc78 <ip4_frag+0x280>)
 801cac2:	486c      	ldr	r0, [pc, #432]	@ (801cc74 <ip4_frag+0x27c>)
 801cac4:	f001 fc78 	bl	801e3b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caca:	685b      	ldr	r3, [r3, #4]
 801cacc:	2214      	movs	r2, #20
 801cace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cad0:	4618      	mov	r0, r3
 801cad2:	f001 fe12 	bl	801e6fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cad8:	685b      	ldr	r3, [r3, #4]
 801cada:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cadc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cade:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cae2:	e064      	b.n	801cbae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	895a      	ldrh	r2, [r3, #10]
 801cae8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801caea:	1ad3      	subs	r3, r2, r3
 801caec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	895b      	ldrh	r3, [r3, #10]
 801caf2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801caf4:	429a      	cmp	r2, r3
 801caf6:	d906      	bls.n	801cb06 <ip4_frag+0x10e>
 801caf8:	4b5c      	ldr	r3, [pc, #368]	@ (801cc6c <ip4_frag+0x274>)
 801cafa:	f240 322d 	movw	r2, #813	@ 0x32d
 801cafe:	495f      	ldr	r1, [pc, #380]	@ (801cc7c <ip4_frag+0x284>)
 801cb00:	485c      	ldr	r0, [pc, #368]	@ (801cc74 <ip4_frag+0x27c>)
 801cb02:	f001 fc59 	bl	801e3b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cb06:	8bfa      	ldrh	r2, [r7, #30]
 801cb08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb0c:	4293      	cmp	r3, r2
 801cb0e:	bf28      	it	cs
 801cb10:	4613      	movcs	r3, r2
 801cb12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cb16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d105      	bne.n	801cb2a <ip4_frag+0x132>
        poff = 0;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	60fb      	str	r3, [r7, #12]
        continue;
 801cb28:	e041      	b.n	801cbae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cb2a:	f7ff ff0d 	bl	801c948 <ip_frag_alloc_pbuf_custom_ref>
 801cb2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cb30:	69bb      	ldr	r3, [r7, #24]
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d103      	bne.n	801cb3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cb36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb38:	f7f4 fb56 	bl	80111e8 <pbuf_free>
        goto memerr;
 801cb3c:	e08f      	b.n	801cc5e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb46:	4413      	add	r3, r2
 801cb48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cb4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cb50:	9201      	str	r2, [sp, #4]
 801cb52:	9300      	str	r3, [sp, #0]
 801cb54:	4603      	mov	r3, r0
 801cb56:	2241      	movs	r2, #65	@ 0x41
 801cb58:	2000      	movs	r0, #0
 801cb5a:	f7f4 f98b 	bl	8010e74 <pbuf_alloced_custom>
 801cb5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cb60:	697b      	ldr	r3, [r7, #20]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d106      	bne.n	801cb74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cb66:	69b8      	ldr	r0, [r7, #24]
 801cb68:	f7ff fef6 	bl	801c958 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cb6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb6e:	f7f4 fb3b 	bl	80111e8 <pbuf_free>
        goto memerr;
 801cb72:	e074      	b.n	801cc5e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cb74:	68f8      	ldr	r0, [r7, #12]
 801cb76:	f7f4 fbdd 	bl	8011334 <pbuf_ref>
      pcr->original = p;
 801cb7a:	69bb      	ldr	r3, [r7, #24]
 801cb7c:	68fa      	ldr	r2, [r7, #12]
 801cb7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cb80:	69bb      	ldr	r3, [r7, #24]
 801cb82:	4a3f      	ldr	r2, [pc, #252]	@ (801cc80 <ip4_frag+0x288>)
 801cb84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cb86:	6979      	ldr	r1, [r7, #20]
 801cb88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb8a:	f7f4 fbfb 	bl	8011384 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cb8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cb92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb96:	1ad3      	subs	r3, r2, r3
 801cb98:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cb9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d004      	beq.n	801cbae <ip4_frag+0x1b6>
        poff = 0;
 801cba4:	2300      	movs	r3, #0
 801cba6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cbae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d196      	bne.n	801cae4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cbb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cbb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbbc:	4413      	add	r3, r2
 801cbbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cbc0:	68bb      	ldr	r3, [r7, #8]
 801cbc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cbc4:	f1a3 0213 	sub.w	r2, r3, #19
 801cbc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	bfcc      	ite	gt
 801cbd0:	2301      	movgt	r3, #1
 801cbd2:	2300      	movle	r3, #0
 801cbd4:	b2db      	uxtb	r3, r3
 801cbd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cbe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cbe2:	6a3b      	ldr	r3, [r7, #32]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d002      	beq.n	801cbee <ip4_frag+0x1f6>
 801cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d003      	beq.n	801cbf6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cbee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cbf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cbf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	f7f2 fc09 	bl	800f410 <lwip_htons>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	461a      	mov	r2, r3
 801cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cc06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc08:	3314      	adds	r3, #20
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f7f2 fbff 	bl	800f410 <lwip_htons>
 801cc12:	4603      	mov	r3, r0
 801cc14:	461a      	mov	r2, r3
 801cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	729a      	strb	r2, [r3, #10]
 801cc20:	2200      	movs	r2, #0
 801cc22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cc24:	68bb      	ldr	r3, [r7, #8]
 801cc26:	695b      	ldr	r3, [r3, #20]
 801cc28:	687a      	ldr	r2, [r7, #4]
 801cc2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc2c:	68b8      	ldr	r0, [r7, #8]
 801cc2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cc30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc32:	f7f4 fad9 	bl	80111e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cc36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc3c:	1ad3      	subs	r3, r2, r3
 801cc3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cc42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cc46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc48:	4413      	add	r3, r2
 801cc4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cc4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	f47f af19 	bne.w	801ca8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cc58:	2300      	movs	r3, #0
 801cc5a:	e002      	b.n	801cc62 <ip4_frag+0x26a>
      goto memerr;
 801cc5c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cc5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc62:	4618      	mov	r0, r3
 801cc64:	3748      	adds	r7, #72	@ 0x48
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	bf00      	nop
 801cc6c:	080258cc 	.word	0x080258cc
 801cc70:	08025aa8 	.word	0x08025aa8
 801cc74:	08025914 	.word	0x08025914
 801cc78:	08025ac4 	.word	0x08025ac4
 801cc7c:	08025ae4 	.word	0x08025ae4
 801cc80:	0801c991 	.word	0x0801c991

0801cc84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b086      	sub	sp, #24
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
 801cc8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cc8e:	230e      	movs	r3, #14
 801cc90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	895b      	ldrh	r3, [r3, #10]
 801cc96:	2b0e      	cmp	r3, #14
 801cc98:	d96e      	bls.n	801cd78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	7bdb      	ldrb	r3, [r3, #15]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d106      	bne.n	801ccb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801cca8:	3301      	adds	r3, #1
 801ccaa:	b2da      	uxtb	r2, r3
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	685b      	ldr	r3, [r3, #4]
 801ccb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ccb6:	693b      	ldr	r3, [r7, #16]
 801ccb8:	7b1a      	ldrb	r2, [r3, #12]
 801ccba:	7b5b      	ldrb	r3, [r3, #13]
 801ccbc:	021b      	lsls	r3, r3, #8
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ccc2:	693b      	ldr	r3, [r7, #16]
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	f003 0301 	and.w	r3, r3, #1
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d023      	beq.n	801cd16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ccce:	693b      	ldr	r3, [r7, #16]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b01      	cmp	r3, #1
 801ccd4:	d10f      	bne.n	801ccf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	785b      	ldrb	r3, [r3, #1]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d11b      	bne.n	801cd16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ccde:	693b      	ldr	r3, [r7, #16]
 801cce0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cce2:	2b5e      	cmp	r3, #94	@ 0x5e
 801cce4:	d117      	bne.n	801cd16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	7b5b      	ldrb	r3, [r3, #13]
 801ccea:	f043 0310 	orr.w	r3, r3, #16
 801ccee:	b2da      	uxtb	r2, r3
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	735a      	strb	r2, [r3, #13]
 801ccf4:	e00f      	b.n	801cd16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	2206      	movs	r2, #6
 801ccfa:	4928      	ldr	r1, [pc, #160]	@ (801cd9c <ethernet_input+0x118>)
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f001 fbd0 	bl	801e4a2 <memcmp>
 801cd02:	4603      	mov	r3, r0
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d106      	bne.n	801cd16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	7b5b      	ldrb	r3, [r3, #13]
 801cd0c:	f043 0308 	orr.w	r3, r3, #8
 801cd10:	b2da      	uxtb	r2, r3
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cd16:	89fb      	ldrh	r3, [r7, #14]
 801cd18:	2b08      	cmp	r3, #8
 801cd1a:	d003      	beq.n	801cd24 <ethernet_input+0xa0>
 801cd1c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cd20:	d014      	beq.n	801cd4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cd22:	e032      	b.n	801cd8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cd2a:	f003 0308 	and.w	r3, r3, #8
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d024      	beq.n	801cd7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd32:	8afb      	ldrh	r3, [r7, #22]
 801cd34:	4619      	mov	r1, r3
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f7f4 f9d0 	bl	80110dc <pbuf_remove_header>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d11e      	bne.n	801cd80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cd42:	6839      	ldr	r1, [r7, #0]
 801cd44:	6878      	ldr	r0, [r7, #4]
 801cd46:	f7fe fdd9 	bl	801b8fc <ip4_input>
      break;
 801cd4a:	e013      	b.n	801cd74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd4c:	683b      	ldr	r3, [r7, #0]
 801cd4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cd52:	f003 0308 	and.w	r3, r3, #8
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d014      	beq.n	801cd84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd5a:	8afb      	ldrh	r3, [r7, #22]
 801cd5c:	4619      	mov	r1, r3
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7f4 f9bc 	bl	80110dc <pbuf_remove_header>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d10e      	bne.n	801cd88 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cd6a:	6839      	ldr	r1, [r7, #0]
 801cd6c:	6878      	ldr	r0, [r7, #4]
 801cd6e:	f7fd ff75 	bl	801ac5c <etharp_input>
      break;
 801cd72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cd74:	2300      	movs	r3, #0
 801cd76:	e00c      	b.n	801cd92 <ethernet_input+0x10e>
    goto free_and_return;
 801cd78:	bf00      	nop
 801cd7a:	e006      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd7c:	bf00      	nop
 801cd7e:	e004      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd80:	bf00      	nop
 801cd82:	e002      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd84:	bf00      	nop
 801cd86:	e000      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cd8a:	6878      	ldr	r0, [r7, #4]
 801cd8c:	f7f4 fa2c 	bl	80111e8 <pbuf_free>
  return ERR_OK;
 801cd90:	2300      	movs	r3, #0
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3718      	adds	r7, #24
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	08025e24 	.word	0x08025e24

0801cda0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b086      	sub	sp, #24
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	60f8      	str	r0, [r7, #12]
 801cda8:	60b9      	str	r1, [r7, #8]
 801cdaa:	607a      	str	r2, [r7, #4]
 801cdac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cdae:	8c3b      	ldrh	r3, [r7, #32]
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7f2 fb2d 	bl	800f410 <lwip_htons>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cdba:	210e      	movs	r1, #14
 801cdbc:	68b8      	ldr	r0, [r7, #8]
 801cdbe:	f7f4 f97d 	bl	80110bc <pbuf_add_header>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d125      	bne.n	801ce14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cdc8:	68bb      	ldr	r3, [r7, #8]
 801cdca:	685b      	ldr	r3, [r3, #4]
 801cdcc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cdce:	693b      	ldr	r3, [r7, #16]
 801cdd0:	8afa      	ldrh	r2, [r7, #22]
 801cdd2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cdd4:	693b      	ldr	r3, [r7, #16]
 801cdd6:	2206      	movs	r2, #6
 801cdd8:	6839      	ldr	r1, [r7, #0]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f001 fc8d 	bl	801e6fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cde0:	693b      	ldr	r3, [r7, #16]
 801cde2:	3306      	adds	r3, #6
 801cde4:	2206      	movs	r2, #6
 801cde6:	6879      	ldr	r1, [r7, #4]
 801cde8:	4618      	mov	r0, r3
 801cdea:	f001 fc86 	bl	801e6fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cdf4:	2b06      	cmp	r3, #6
 801cdf6:	d006      	beq.n	801ce06 <ethernet_output+0x66>
 801cdf8:	4b0a      	ldr	r3, [pc, #40]	@ (801ce24 <ethernet_output+0x84>)
 801cdfa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cdfe:	490a      	ldr	r1, [pc, #40]	@ (801ce28 <ethernet_output+0x88>)
 801ce00:	480a      	ldr	r0, [pc, #40]	@ (801ce2c <ethernet_output+0x8c>)
 801ce02:	f001 fad9 	bl	801e3b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	699b      	ldr	r3, [r3, #24]
 801ce0a:	68b9      	ldr	r1, [r7, #8]
 801ce0c:	68f8      	ldr	r0, [r7, #12]
 801ce0e:	4798      	blx	r3
 801ce10:	4603      	mov	r3, r0
 801ce12:	e002      	b.n	801ce1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ce14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ce16:	f06f 0301 	mvn.w	r3, #1
}
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	3718      	adds	r7, #24
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
 801ce22:	bf00      	nop
 801ce24:	08025af4 	.word	0x08025af4
 801ce28:	08025b2c 	.word	0x08025b2c
 801ce2c:	08025b60 	.word	0x08025b60

0801ce30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	2104      	movs	r1, #4
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7ec f9ff 	bl	8009244 <osMessageQueueNew>
 801ce46:	4602      	mov	r2, r0
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d102      	bne.n	801ce5a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ce54:	f04f 33ff 	mov.w	r3, #4294967295
 801ce58:	e000      	b.n	801ce5c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ce5a:	2300      	movs	r3, #0
}
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	3708      	adds	r7, #8
 801ce60:	46bd      	mov	sp, r7
 801ce62:	bd80      	pop	{r7, pc}

0801ce64 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ce64:	b580      	push	{r7, lr}
 801ce66:	b082      	sub	sp, #8
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7ec fb19 	bl	80094a8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	f7ec fb34 	bl	80094e8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ce80:	bf00      	nop
 801ce82:	3708      	adds	r7, #8
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}

0801ce88 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b084      	sub	sp, #16
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
 801ce90:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	6818      	ldr	r0, [r3, #0]
 801ce96:	4639      	mov	r1, r7
 801ce98:	2300      	movs	r3, #0
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	f7ec fa46 	bl	800932c <osMessageQueuePut>
 801cea0:	4603      	mov	r3, r0
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d102      	bne.n	801ceac <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801cea6:	2300      	movs	r3, #0
 801cea8:	73fb      	strb	r3, [r7, #15]
 801ceaa:	e001      	b.n	801ceb0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ceac:	23ff      	movs	r3, #255	@ 0xff
 801ceae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ceb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	3710      	adds	r7, #16
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	bd80      	pop	{r7, pc}

0801cebc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b086      	sub	sp, #24
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	60f8      	str	r0, [r7, #12]
 801cec4:	60b9      	str	r1, [r7, #8]
 801cec6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801cec8:	f7eb fea8 	bl	8008c1c <osKernelGetTickCount>
 801cecc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d013      	beq.n	801cefc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	6818      	ldr	r0, [r3, #0]
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	2200      	movs	r2, #0
 801cedc:	68b9      	ldr	r1, [r7, #8]
 801cede:	f7ec fa85 	bl	80093ec <osMessageQueueGet>
 801cee2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cee4:	693b      	ldr	r3, [r7, #16]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d105      	bne.n	801cef6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ceea:	f7eb fe97 	bl	8008c1c <osKernelGetTickCount>
 801ceee:	4602      	mov	r2, r0
 801cef0:	697b      	ldr	r3, [r7, #20]
 801cef2:	1ad3      	subs	r3, r2, r3
 801cef4:	e00f      	b.n	801cf16 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cef6:	f04f 33ff 	mov.w	r3, #4294967295
 801cefa:	e00c      	b.n	801cf16 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	6818      	ldr	r0, [r3, #0]
 801cf00:	f04f 33ff 	mov.w	r3, #4294967295
 801cf04:	2200      	movs	r2, #0
 801cf06:	68b9      	ldr	r1, [r7, #8]
 801cf08:	f7ec fa70 	bl	80093ec <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cf0c:	f7eb fe86 	bl	8008c1c <osKernelGetTickCount>
 801cf10:	4602      	mov	r2, r0
 801cf12:	697b      	ldr	r3, [r7, #20]
 801cf14:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	3718      	adds	r7, #24
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	bd80      	pop	{r7, pc}

0801cf1e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801cf1e:	b580      	push	{r7, lr}
 801cf20:	b082      	sub	sp, #8
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	6078      	str	r0, [r7, #4]
 801cf26:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	6818      	ldr	r0, [r3, #0]
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	2200      	movs	r2, #0
 801cf30:	6839      	ldr	r1, [r7, #0]
 801cf32:	f7ec fa5b 	bl	80093ec <osMessageQueueGet>
 801cf36:	4603      	mov	r3, r0
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d101      	bne.n	801cf40 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	e001      	b.n	801cf44 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801cf40:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801cf44:	4618      	mov	r0, r3
 801cf46:	3708      	adds	r7, #8
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}

0801cf4c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cf4c:	b480      	push	{r7}
 801cf4e:	b083      	sub	sp, #12
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d101      	bne.n	801cf60 <sys_mbox_valid+0x14>
    return 0;
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	e000      	b.n	801cf62 <sys_mbox_valid+0x16>
  else
    return 1;
 801cf60:	2301      	movs	r3, #1
}
 801cf62:	4618      	mov	r0, r3
 801cf64:	370c      	adds	r7, #12
 801cf66:	46bd      	mov	sp, r7
 801cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6c:	4770      	bx	lr

0801cf6e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801cf6e:	b480      	push	{r7}
 801cf70:	b083      	sub	sp, #12
 801cf72:	af00      	add	r7, sp, #0
 801cf74:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	2200      	movs	r2, #0
 801cf7a:	601a      	str	r2, [r3, #0]
}
 801cf7c:	bf00      	nop
 801cf7e:	370c      	adds	r7, #12
 801cf80:	46bd      	mov	sp, r7
 801cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf86:	4770      	bx	lr

0801cf88 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b082      	sub	sp, #8
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	6078      	str	r0, [r7, #4]
 801cf90:	460b      	mov	r3, r1
 801cf92:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801cf94:	78fb      	ldrb	r3, [r7, #3]
 801cf96:	2200      	movs	r2, #0
 801cf98:	4619      	mov	r1, r3
 801cf9a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801cf9e:	f7ec f80e 	bl	8008fbe <osSemaphoreNew>
 801cfa2:	4602      	mov	r2, r0
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d102      	bne.n	801cfb6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cfb0:	f04f 33ff 	mov.w	r3, #4294967295
 801cfb4:	e009      	b.n	801cfca <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801cfb6:	78fb      	ldrb	r3, [r7, #3]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d105      	bne.n	801cfc8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	2100      	movs	r1, #0
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f7ec f884 	bl	80090d0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801cfc8:	2300      	movs	r3, #0
}
 801cfca:	4618      	mov	r0, r3
 801cfcc:	3708      	adds	r7, #8
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	bd80      	pop	{r7, pc}

0801cfd2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801cfd2:	b580      	push	{r7, lr}
 801cfd4:	b084      	sub	sp, #16
 801cfd6:	af00      	add	r7, sp, #0
 801cfd8:	6078      	str	r0, [r7, #4]
 801cfda:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801cfdc:	f7eb fe1e 	bl	8008c1c <osKernelGetTickCount>
 801cfe0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801cfe2:	683b      	ldr	r3, [r7, #0]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d011      	beq.n	801d00c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	6839      	ldr	r1, [r7, #0]
 801cfee:	4618      	mov	r0, r3
 801cff0:	f7ec f86e 	bl	80090d0 <osSemaphoreAcquire>
 801cff4:	4603      	mov	r3, r0
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d105      	bne.n	801d006 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801cffa:	f7eb fe0f 	bl	8008c1c <osKernelGetTickCount>
 801cffe:	4602      	mov	r2, r0
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	1ad3      	subs	r3, r2, r3
 801d004:	e012      	b.n	801d02c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d006:	f04f 33ff 	mov.w	r3, #4294967295
 801d00a:	e00f      	b.n	801d02c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801d00c:	bf00      	nop
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	f04f 31ff 	mov.w	r1, #4294967295
 801d016:	4618      	mov	r0, r3
 801d018:	f7ec f85a 	bl	80090d0 <osSemaphoreAcquire>
 801d01c:	4603      	mov	r3, r0
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d1f5      	bne.n	801d00e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d022:	f7eb fdfb 	bl	8008c1c <osKernelGetTickCount>
 801d026:	4602      	mov	r2, r0
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d02c:	4618      	mov	r0, r3
 801d02e:	3710      	adds	r7, #16
 801d030:	46bd      	mov	sp, r7
 801d032:	bd80      	pop	{r7, pc}

0801d034 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b082      	sub	sp, #8
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	4618      	mov	r0, r3
 801d042:	f7ec f897 	bl	8009174 <osSemaphoreRelease>
}
 801d046:	bf00      	nop
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}

0801d04e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d04e:	b580      	push	{r7, lr}
 801d050:	b082      	sub	sp, #8
 801d052:	af00      	add	r7, sp, #0
 801d054:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	4618      	mov	r0, r3
 801d05c:	f7ec f8ce 	bl	80091fc <osSemaphoreDelete>
}
 801d060:	bf00      	nop
 801d062:	3708      	adds	r7, #8
 801d064:	46bd      	mov	sp, r7
 801d066:	bd80      	pop	{r7, pc}

0801d068 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d068:	b480      	push	{r7}
 801d06a:	b083      	sub	sp, #12
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d101      	bne.n	801d07c <sys_sem_valid+0x14>
    return 0;
 801d078:	2300      	movs	r3, #0
 801d07a:	e000      	b.n	801d07e <sys_sem_valid+0x16>
  else
    return 1;
 801d07c:	2301      	movs	r3, #1
}
 801d07e:	4618      	mov	r0, r3
 801d080:	370c      	adds	r7, #12
 801d082:	46bd      	mov	sp, r7
 801d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d088:	4770      	bx	lr

0801d08a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d08a:	b480      	push	{r7}
 801d08c:	b083      	sub	sp, #12
 801d08e:	af00      	add	r7, sp, #0
 801d090:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	2200      	movs	r2, #0
 801d096:	601a      	str	r2, [r3, #0]
}
 801d098:	bf00      	nop
 801d09a:	370c      	adds	r7, #12
 801d09c:	46bd      	mov	sp, r7
 801d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0a2:	4770      	bx	lr

0801d0a4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d0a8:	2000      	movs	r0, #0
 801d0aa:	f7eb fe7a 	bl	8008da2 <osMutexNew>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	4a01      	ldr	r2, [pc, #4]	@ (801d0b8 <sys_init+0x14>)
 801d0b2:	6013      	str	r3, [r2, #0]
#endif
}
 801d0b4:	bf00      	nop
 801d0b6:	bd80      	pop	{r7, pc}
 801d0b8:	20012808 	.word	0x20012808

0801d0bc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b082      	sub	sp, #8
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d0c4:	2000      	movs	r0, #0
 801d0c6:	f7eb fe6c 	bl	8008da2 <osMutexNew>
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d102      	bne.n	801d0de <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d0d8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0dc:	e000      	b.n	801d0e0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d0de:	2300      	movs	r3, #0
}
 801d0e0:	4618      	mov	r0, r3
 801d0e2:	3708      	adds	r7, #8
 801d0e4:	46bd      	mov	sp, r7
 801d0e6:	bd80      	pop	{r7, pc}

0801d0e8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b082      	sub	sp, #8
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	f04f 31ff 	mov.w	r1, #4294967295
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7eb fed8 	bl	8008eae <osMutexAcquire>
#endif
}
 801d0fe:	bf00      	nop
 801d100:	3708      	adds	r7, #8
 801d102:	46bd      	mov	sp, r7
 801d104:	bd80      	pop	{r7, pc}

0801d106 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d106:	b580      	push	{r7, lr}
 801d108:	b082      	sub	sp, #8
 801d10a:	af00      	add	r7, sp, #0
 801d10c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	4618      	mov	r0, r3
 801d114:	f7eb ff16 	bl	8008f44 <osMutexRelease>
}
 801d118:	bf00      	nop
 801d11a:	3708      	adds	r7, #8
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}

0801d120 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b08e      	sub	sp, #56	@ 0x38
 801d124:	af00      	add	r7, sp, #0
 801d126:	60f8      	str	r0, [r7, #12]
 801d128:	60b9      	str	r1, [r7, #8]
 801d12a:	607a      	str	r2, [r7, #4]
 801d12c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d12e:	f107 0314 	add.w	r3, r7, #20
 801d132:	2224      	movs	r2, #36	@ 0x24
 801d134:	2100      	movs	r1, #0
 801d136:	4618      	mov	r0, r3
 801d138:	f001 f9dd 	bl	801e4f6 <memset>
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	617b      	str	r3, [r7, #20]
 801d140:	683b      	ldr	r3, [r7, #0]
 801d142:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d146:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d148:	f107 0314 	add.w	r3, r7, #20
 801d14c:	461a      	mov	r2, r3
 801d14e:	6879      	ldr	r1, [r7, #4]
 801d150:	68b8      	ldr	r0, [r7, #8]
 801d152:	f7eb fd78 	bl	8008c46 <osThreadNew>
 801d156:	4603      	mov	r3, r0
#endif
}
 801d158:	4618      	mov	r0, r3
 801d15a:	3738      	adds	r7, #56	@ 0x38
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bd80      	pop	{r7, pc}

0801d160 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d160:	b580      	push	{r7, lr}
 801d162:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d164:	4b04      	ldr	r3, [pc, #16]	@ (801d178 <sys_arch_protect+0x18>)
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	f04f 31ff 	mov.w	r1, #4294967295
 801d16c:	4618      	mov	r0, r3
 801d16e:	f7eb fe9e 	bl	8008eae <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d172:	2301      	movs	r3, #1
}
 801d174:	4618      	mov	r0, r3
 801d176:	bd80      	pop	{r7, pc}
 801d178:	20012808 	.word	0x20012808

0801d17c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b082      	sub	sp, #8
 801d180:	af00      	add	r7, sp, #0
 801d182:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d184:	4b04      	ldr	r3, [pc, #16]	@ (801d198 <sys_arch_unprotect+0x1c>)
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	4618      	mov	r0, r3
 801d18a:	f7eb fedb 	bl	8008f44 <osMutexRelease>
}
 801d18e:	bf00      	nop
 801d190:	3708      	adds	r7, #8
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}
 801d196:	bf00      	nop
 801d198:	20012808 	.word	0x20012808

0801d19c <__itoa>:
 801d19c:	1e93      	subs	r3, r2, #2
 801d19e:	2b22      	cmp	r3, #34	@ 0x22
 801d1a0:	b510      	push	{r4, lr}
 801d1a2:	460c      	mov	r4, r1
 801d1a4:	d904      	bls.n	801d1b0 <__itoa+0x14>
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	700b      	strb	r3, [r1, #0]
 801d1aa:	461c      	mov	r4, r3
 801d1ac:	4620      	mov	r0, r4
 801d1ae:	bd10      	pop	{r4, pc}
 801d1b0:	2a0a      	cmp	r2, #10
 801d1b2:	d109      	bne.n	801d1c8 <__itoa+0x2c>
 801d1b4:	2800      	cmp	r0, #0
 801d1b6:	da07      	bge.n	801d1c8 <__itoa+0x2c>
 801d1b8:	232d      	movs	r3, #45	@ 0x2d
 801d1ba:	700b      	strb	r3, [r1, #0]
 801d1bc:	4240      	negs	r0, r0
 801d1be:	2101      	movs	r1, #1
 801d1c0:	4421      	add	r1, r4
 801d1c2:	f000 f8c9 	bl	801d358 <__utoa>
 801d1c6:	e7f1      	b.n	801d1ac <__itoa+0x10>
 801d1c8:	2100      	movs	r1, #0
 801d1ca:	e7f9      	b.n	801d1c0 <__itoa+0x24>

0801d1cc <itoa>:
 801d1cc:	f7ff bfe6 	b.w	801d19c <__itoa>

0801d1d0 <rand>:
 801d1d0:	4b16      	ldr	r3, [pc, #88]	@ (801d22c <rand+0x5c>)
 801d1d2:	b510      	push	{r4, lr}
 801d1d4:	681c      	ldr	r4, [r3, #0]
 801d1d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d1d8:	b9b3      	cbnz	r3, 801d208 <rand+0x38>
 801d1da:	2018      	movs	r0, #24
 801d1dc:	f002 f956 	bl	801f48c <malloc>
 801d1e0:	4602      	mov	r2, r0
 801d1e2:	6320      	str	r0, [r4, #48]	@ 0x30
 801d1e4:	b920      	cbnz	r0, 801d1f0 <rand+0x20>
 801d1e6:	4b12      	ldr	r3, [pc, #72]	@ (801d230 <rand+0x60>)
 801d1e8:	4812      	ldr	r0, [pc, #72]	@ (801d234 <rand+0x64>)
 801d1ea:	2152      	movs	r1, #82	@ 0x52
 801d1ec:	f001 fa9a 	bl	801e724 <__assert_func>
 801d1f0:	4911      	ldr	r1, [pc, #68]	@ (801d238 <rand+0x68>)
 801d1f2:	4b12      	ldr	r3, [pc, #72]	@ (801d23c <rand+0x6c>)
 801d1f4:	e9c0 1300 	strd	r1, r3, [r0]
 801d1f8:	4b11      	ldr	r3, [pc, #68]	@ (801d240 <rand+0x70>)
 801d1fa:	6083      	str	r3, [r0, #8]
 801d1fc:	230b      	movs	r3, #11
 801d1fe:	8183      	strh	r3, [r0, #12]
 801d200:	2100      	movs	r1, #0
 801d202:	2001      	movs	r0, #1
 801d204:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d208:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d20a:	480e      	ldr	r0, [pc, #56]	@ (801d244 <rand+0x74>)
 801d20c:	690b      	ldr	r3, [r1, #16]
 801d20e:	694c      	ldr	r4, [r1, #20]
 801d210:	4a0d      	ldr	r2, [pc, #52]	@ (801d248 <rand+0x78>)
 801d212:	4358      	muls	r0, r3
 801d214:	fb02 0004 	mla	r0, r2, r4, r0
 801d218:	fba3 3202 	umull	r3, r2, r3, r2
 801d21c:	3301      	adds	r3, #1
 801d21e:	eb40 0002 	adc.w	r0, r0, r2
 801d222:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d226:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d22a:	bd10      	pop	{r4, pc}
 801d22c:	20000054 	.word	0x20000054
 801d230:	08025e32 	.word	0x08025e32
 801d234:	08025e49 	.word	0x08025e49
 801d238:	abcd330e 	.word	0xabcd330e
 801d23c:	e66d1234 	.word	0xe66d1234
 801d240:	0005deec 	.word	0x0005deec
 801d244:	5851f42d 	.word	0x5851f42d
 801d248:	4c957f2d 	.word	0x4c957f2d

0801d24c <_strtol_l.constprop.0>:
 801d24c:	2b24      	cmp	r3, #36	@ 0x24
 801d24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d252:	4686      	mov	lr, r0
 801d254:	4690      	mov	r8, r2
 801d256:	d801      	bhi.n	801d25c <_strtol_l.constprop.0+0x10>
 801d258:	2b01      	cmp	r3, #1
 801d25a:	d106      	bne.n	801d26a <_strtol_l.constprop.0+0x1e>
 801d25c:	f001 fa18 	bl	801e690 <__errno>
 801d260:	2316      	movs	r3, #22
 801d262:	6003      	str	r3, [r0, #0]
 801d264:	2000      	movs	r0, #0
 801d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d26a:	4834      	ldr	r0, [pc, #208]	@ (801d33c <_strtol_l.constprop.0+0xf0>)
 801d26c:	460d      	mov	r5, r1
 801d26e:	462a      	mov	r2, r5
 801d270:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d274:	5d06      	ldrb	r6, [r0, r4]
 801d276:	f016 0608 	ands.w	r6, r6, #8
 801d27a:	d1f8      	bne.n	801d26e <_strtol_l.constprop.0+0x22>
 801d27c:	2c2d      	cmp	r4, #45	@ 0x2d
 801d27e:	d12d      	bne.n	801d2dc <_strtol_l.constprop.0+0x90>
 801d280:	782c      	ldrb	r4, [r5, #0]
 801d282:	2601      	movs	r6, #1
 801d284:	1c95      	adds	r5, r2, #2
 801d286:	f033 0210 	bics.w	r2, r3, #16
 801d28a:	d109      	bne.n	801d2a0 <_strtol_l.constprop.0+0x54>
 801d28c:	2c30      	cmp	r4, #48	@ 0x30
 801d28e:	d12a      	bne.n	801d2e6 <_strtol_l.constprop.0+0x9a>
 801d290:	782a      	ldrb	r2, [r5, #0]
 801d292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d296:	2a58      	cmp	r2, #88	@ 0x58
 801d298:	d125      	bne.n	801d2e6 <_strtol_l.constprop.0+0x9a>
 801d29a:	786c      	ldrb	r4, [r5, #1]
 801d29c:	2310      	movs	r3, #16
 801d29e:	3502      	adds	r5, #2
 801d2a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d2a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	fbbc f9f3 	udiv	r9, ip, r3
 801d2ae:	4610      	mov	r0, r2
 801d2b0:	fb03 ca19 	mls	sl, r3, r9, ip
 801d2b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d2b8:	2f09      	cmp	r7, #9
 801d2ba:	d81b      	bhi.n	801d2f4 <_strtol_l.constprop.0+0xa8>
 801d2bc:	463c      	mov	r4, r7
 801d2be:	42a3      	cmp	r3, r4
 801d2c0:	dd27      	ble.n	801d312 <_strtol_l.constprop.0+0xc6>
 801d2c2:	1c57      	adds	r7, r2, #1
 801d2c4:	d007      	beq.n	801d2d6 <_strtol_l.constprop.0+0x8a>
 801d2c6:	4581      	cmp	r9, r0
 801d2c8:	d320      	bcc.n	801d30c <_strtol_l.constprop.0+0xc0>
 801d2ca:	d101      	bne.n	801d2d0 <_strtol_l.constprop.0+0x84>
 801d2cc:	45a2      	cmp	sl, r4
 801d2ce:	db1d      	blt.n	801d30c <_strtol_l.constprop.0+0xc0>
 801d2d0:	fb00 4003 	mla	r0, r0, r3, r4
 801d2d4:	2201      	movs	r2, #1
 801d2d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d2da:	e7eb      	b.n	801d2b4 <_strtol_l.constprop.0+0x68>
 801d2dc:	2c2b      	cmp	r4, #43	@ 0x2b
 801d2de:	bf04      	itt	eq
 801d2e0:	782c      	ldrbeq	r4, [r5, #0]
 801d2e2:	1c95      	addeq	r5, r2, #2
 801d2e4:	e7cf      	b.n	801d286 <_strtol_l.constprop.0+0x3a>
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d1da      	bne.n	801d2a0 <_strtol_l.constprop.0+0x54>
 801d2ea:	2c30      	cmp	r4, #48	@ 0x30
 801d2ec:	bf0c      	ite	eq
 801d2ee:	2308      	moveq	r3, #8
 801d2f0:	230a      	movne	r3, #10
 801d2f2:	e7d5      	b.n	801d2a0 <_strtol_l.constprop.0+0x54>
 801d2f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d2f8:	2f19      	cmp	r7, #25
 801d2fa:	d801      	bhi.n	801d300 <_strtol_l.constprop.0+0xb4>
 801d2fc:	3c37      	subs	r4, #55	@ 0x37
 801d2fe:	e7de      	b.n	801d2be <_strtol_l.constprop.0+0x72>
 801d300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d304:	2f19      	cmp	r7, #25
 801d306:	d804      	bhi.n	801d312 <_strtol_l.constprop.0+0xc6>
 801d308:	3c57      	subs	r4, #87	@ 0x57
 801d30a:	e7d8      	b.n	801d2be <_strtol_l.constprop.0+0x72>
 801d30c:	f04f 32ff 	mov.w	r2, #4294967295
 801d310:	e7e1      	b.n	801d2d6 <_strtol_l.constprop.0+0x8a>
 801d312:	1c53      	adds	r3, r2, #1
 801d314:	d108      	bne.n	801d328 <_strtol_l.constprop.0+0xdc>
 801d316:	2322      	movs	r3, #34	@ 0x22
 801d318:	f8ce 3000 	str.w	r3, [lr]
 801d31c:	4660      	mov	r0, ip
 801d31e:	f1b8 0f00 	cmp.w	r8, #0
 801d322:	d0a0      	beq.n	801d266 <_strtol_l.constprop.0+0x1a>
 801d324:	1e69      	subs	r1, r5, #1
 801d326:	e006      	b.n	801d336 <_strtol_l.constprop.0+0xea>
 801d328:	b106      	cbz	r6, 801d32c <_strtol_l.constprop.0+0xe0>
 801d32a:	4240      	negs	r0, r0
 801d32c:	f1b8 0f00 	cmp.w	r8, #0
 801d330:	d099      	beq.n	801d266 <_strtol_l.constprop.0+0x1a>
 801d332:	2a00      	cmp	r2, #0
 801d334:	d1f6      	bne.n	801d324 <_strtol_l.constprop.0+0xd8>
 801d336:	f8c8 1000 	str.w	r1, [r8]
 801d33a:	e794      	b.n	801d266 <_strtol_l.constprop.0+0x1a>
 801d33c:	08025ec7 	.word	0x08025ec7

0801d340 <_strtol_r>:
 801d340:	f7ff bf84 	b.w	801d24c <_strtol_l.constprop.0>

0801d344 <strtol>:
 801d344:	4613      	mov	r3, r2
 801d346:	460a      	mov	r2, r1
 801d348:	4601      	mov	r1, r0
 801d34a:	4802      	ldr	r0, [pc, #8]	@ (801d354 <strtol+0x10>)
 801d34c:	6800      	ldr	r0, [r0, #0]
 801d34e:	f7ff bf7d 	b.w	801d24c <_strtol_l.constprop.0>
 801d352:	bf00      	nop
 801d354:	20000054 	.word	0x20000054

0801d358 <__utoa>:
 801d358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d35a:	4c1f      	ldr	r4, [pc, #124]	@ (801d3d8 <__utoa+0x80>)
 801d35c:	b08b      	sub	sp, #44	@ 0x2c
 801d35e:	4605      	mov	r5, r0
 801d360:	460b      	mov	r3, r1
 801d362:	466e      	mov	r6, sp
 801d364:	f104 0c20 	add.w	ip, r4, #32
 801d368:	6820      	ldr	r0, [r4, #0]
 801d36a:	6861      	ldr	r1, [r4, #4]
 801d36c:	4637      	mov	r7, r6
 801d36e:	c703      	stmia	r7!, {r0, r1}
 801d370:	3408      	adds	r4, #8
 801d372:	4564      	cmp	r4, ip
 801d374:	463e      	mov	r6, r7
 801d376:	d1f7      	bne.n	801d368 <__utoa+0x10>
 801d378:	7921      	ldrb	r1, [r4, #4]
 801d37a:	7139      	strb	r1, [r7, #4]
 801d37c:	1e91      	subs	r1, r2, #2
 801d37e:	6820      	ldr	r0, [r4, #0]
 801d380:	6038      	str	r0, [r7, #0]
 801d382:	2922      	cmp	r1, #34	@ 0x22
 801d384:	f04f 0100 	mov.w	r1, #0
 801d388:	d904      	bls.n	801d394 <__utoa+0x3c>
 801d38a:	7019      	strb	r1, [r3, #0]
 801d38c:	460b      	mov	r3, r1
 801d38e:	4618      	mov	r0, r3
 801d390:	b00b      	add	sp, #44	@ 0x2c
 801d392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d394:	1e58      	subs	r0, r3, #1
 801d396:	4684      	mov	ip, r0
 801d398:	fbb5 f7f2 	udiv	r7, r5, r2
 801d39c:	fb02 5617 	mls	r6, r2, r7, r5
 801d3a0:	3628      	adds	r6, #40	@ 0x28
 801d3a2:	446e      	add	r6, sp
 801d3a4:	460c      	mov	r4, r1
 801d3a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801d3aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801d3ae:	462e      	mov	r6, r5
 801d3b0:	42b2      	cmp	r2, r6
 801d3b2:	f101 0101 	add.w	r1, r1, #1
 801d3b6:	463d      	mov	r5, r7
 801d3b8:	d9ee      	bls.n	801d398 <__utoa+0x40>
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	545a      	strb	r2, [r3, r1]
 801d3be:	1919      	adds	r1, r3, r4
 801d3c0:	1aa5      	subs	r5, r4, r2
 801d3c2:	42aa      	cmp	r2, r5
 801d3c4:	dae3      	bge.n	801d38e <__utoa+0x36>
 801d3c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801d3ca:	780e      	ldrb	r6, [r1, #0]
 801d3cc:	7006      	strb	r6, [r0, #0]
 801d3ce:	3201      	adds	r2, #1
 801d3d0:	f801 5901 	strb.w	r5, [r1], #-1
 801d3d4:	e7f4      	b.n	801d3c0 <__utoa+0x68>
 801d3d6:	bf00      	nop
 801d3d8:	08025ea1 	.word	0x08025ea1

0801d3dc <__cvt>:
 801d3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3e0:	ec57 6b10 	vmov	r6, r7, d0
 801d3e4:	2f00      	cmp	r7, #0
 801d3e6:	460c      	mov	r4, r1
 801d3e8:	4619      	mov	r1, r3
 801d3ea:	463b      	mov	r3, r7
 801d3ec:	bfbb      	ittet	lt
 801d3ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d3f2:	461f      	movlt	r7, r3
 801d3f4:	2300      	movge	r3, #0
 801d3f6:	232d      	movlt	r3, #45	@ 0x2d
 801d3f8:	700b      	strb	r3, [r1, #0]
 801d3fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d3fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d400:	4691      	mov	r9, r2
 801d402:	f023 0820 	bic.w	r8, r3, #32
 801d406:	bfbc      	itt	lt
 801d408:	4632      	movlt	r2, r6
 801d40a:	4616      	movlt	r6, r2
 801d40c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d410:	d005      	beq.n	801d41e <__cvt+0x42>
 801d412:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d416:	d100      	bne.n	801d41a <__cvt+0x3e>
 801d418:	3401      	adds	r4, #1
 801d41a:	2102      	movs	r1, #2
 801d41c:	e000      	b.n	801d420 <__cvt+0x44>
 801d41e:	2103      	movs	r1, #3
 801d420:	ab03      	add	r3, sp, #12
 801d422:	9301      	str	r3, [sp, #4]
 801d424:	ab02      	add	r3, sp, #8
 801d426:	9300      	str	r3, [sp, #0]
 801d428:	ec47 6b10 	vmov	d0, r6, r7
 801d42c:	4653      	mov	r3, sl
 801d42e:	4622      	mov	r2, r4
 801d430:	f001 fa1e 	bl	801e870 <_dtoa_r>
 801d434:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d438:	4605      	mov	r5, r0
 801d43a:	d119      	bne.n	801d470 <__cvt+0x94>
 801d43c:	f019 0f01 	tst.w	r9, #1
 801d440:	d00e      	beq.n	801d460 <__cvt+0x84>
 801d442:	eb00 0904 	add.w	r9, r0, r4
 801d446:	2200      	movs	r2, #0
 801d448:	2300      	movs	r3, #0
 801d44a:	4630      	mov	r0, r6
 801d44c:	4639      	mov	r1, r7
 801d44e:	f7e3 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 801d452:	b108      	cbz	r0, 801d458 <__cvt+0x7c>
 801d454:	f8cd 900c 	str.w	r9, [sp, #12]
 801d458:	2230      	movs	r2, #48	@ 0x30
 801d45a:	9b03      	ldr	r3, [sp, #12]
 801d45c:	454b      	cmp	r3, r9
 801d45e:	d31e      	bcc.n	801d49e <__cvt+0xc2>
 801d460:	9b03      	ldr	r3, [sp, #12]
 801d462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d464:	1b5b      	subs	r3, r3, r5
 801d466:	4628      	mov	r0, r5
 801d468:	6013      	str	r3, [r2, #0]
 801d46a:	b004      	add	sp, #16
 801d46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d470:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d474:	eb00 0904 	add.w	r9, r0, r4
 801d478:	d1e5      	bne.n	801d446 <__cvt+0x6a>
 801d47a:	7803      	ldrb	r3, [r0, #0]
 801d47c:	2b30      	cmp	r3, #48	@ 0x30
 801d47e:	d10a      	bne.n	801d496 <__cvt+0xba>
 801d480:	2200      	movs	r2, #0
 801d482:	2300      	movs	r3, #0
 801d484:	4630      	mov	r0, r6
 801d486:	4639      	mov	r1, r7
 801d488:	f7e3 fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801d48c:	b918      	cbnz	r0, 801d496 <__cvt+0xba>
 801d48e:	f1c4 0401 	rsb	r4, r4, #1
 801d492:	f8ca 4000 	str.w	r4, [sl]
 801d496:	f8da 3000 	ldr.w	r3, [sl]
 801d49a:	4499      	add	r9, r3
 801d49c:	e7d3      	b.n	801d446 <__cvt+0x6a>
 801d49e:	1c59      	adds	r1, r3, #1
 801d4a0:	9103      	str	r1, [sp, #12]
 801d4a2:	701a      	strb	r2, [r3, #0]
 801d4a4:	e7d9      	b.n	801d45a <__cvt+0x7e>

0801d4a6 <__exponent>:
 801d4a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4a8:	2900      	cmp	r1, #0
 801d4aa:	bfba      	itte	lt
 801d4ac:	4249      	neglt	r1, r1
 801d4ae:	232d      	movlt	r3, #45	@ 0x2d
 801d4b0:	232b      	movge	r3, #43	@ 0x2b
 801d4b2:	2909      	cmp	r1, #9
 801d4b4:	7002      	strb	r2, [r0, #0]
 801d4b6:	7043      	strb	r3, [r0, #1]
 801d4b8:	dd29      	ble.n	801d50e <__exponent+0x68>
 801d4ba:	f10d 0307 	add.w	r3, sp, #7
 801d4be:	461d      	mov	r5, r3
 801d4c0:	270a      	movs	r7, #10
 801d4c2:	461a      	mov	r2, r3
 801d4c4:	fbb1 f6f7 	udiv	r6, r1, r7
 801d4c8:	fb07 1416 	mls	r4, r7, r6, r1
 801d4cc:	3430      	adds	r4, #48	@ 0x30
 801d4ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d4d2:	460c      	mov	r4, r1
 801d4d4:	2c63      	cmp	r4, #99	@ 0x63
 801d4d6:	f103 33ff 	add.w	r3, r3, #4294967295
 801d4da:	4631      	mov	r1, r6
 801d4dc:	dcf1      	bgt.n	801d4c2 <__exponent+0x1c>
 801d4de:	3130      	adds	r1, #48	@ 0x30
 801d4e0:	1e94      	subs	r4, r2, #2
 801d4e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d4e6:	1c41      	adds	r1, r0, #1
 801d4e8:	4623      	mov	r3, r4
 801d4ea:	42ab      	cmp	r3, r5
 801d4ec:	d30a      	bcc.n	801d504 <__exponent+0x5e>
 801d4ee:	f10d 0309 	add.w	r3, sp, #9
 801d4f2:	1a9b      	subs	r3, r3, r2
 801d4f4:	42ac      	cmp	r4, r5
 801d4f6:	bf88      	it	hi
 801d4f8:	2300      	movhi	r3, #0
 801d4fa:	3302      	adds	r3, #2
 801d4fc:	4403      	add	r3, r0
 801d4fe:	1a18      	subs	r0, r3, r0
 801d500:	b003      	add	sp, #12
 801d502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d504:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d508:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d50c:	e7ed      	b.n	801d4ea <__exponent+0x44>
 801d50e:	2330      	movs	r3, #48	@ 0x30
 801d510:	3130      	adds	r1, #48	@ 0x30
 801d512:	7083      	strb	r3, [r0, #2]
 801d514:	70c1      	strb	r1, [r0, #3]
 801d516:	1d03      	adds	r3, r0, #4
 801d518:	e7f1      	b.n	801d4fe <__exponent+0x58>
	...

0801d51c <_printf_float>:
 801d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d520:	b08d      	sub	sp, #52	@ 0x34
 801d522:	460c      	mov	r4, r1
 801d524:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d528:	4616      	mov	r6, r2
 801d52a:	461f      	mov	r7, r3
 801d52c:	4605      	mov	r5, r0
 801d52e:	f001 f80f 	bl	801e550 <_localeconv_r>
 801d532:	6803      	ldr	r3, [r0, #0]
 801d534:	9304      	str	r3, [sp, #16]
 801d536:	4618      	mov	r0, r3
 801d538:	f7e2 fe9a 	bl	8000270 <strlen>
 801d53c:	2300      	movs	r3, #0
 801d53e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d540:	f8d8 3000 	ldr.w	r3, [r8]
 801d544:	9005      	str	r0, [sp, #20]
 801d546:	3307      	adds	r3, #7
 801d548:	f023 0307 	bic.w	r3, r3, #7
 801d54c:	f103 0208 	add.w	r2, r3, #8
 801d550:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d554:	f8d4 b000 	ldr.w	fp, [r4]
 801d558:	f8c8 2000 	str.w	r2, [r8]
 801d55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d560:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d564:	9307      	str	r3, [sp, #28]
 801d566:	f8cd 8018 	str.w	r8, [sp, #24]
 801d56a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d56e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d572:	4b9c      	ldr	r3, [pc, #624]	@ (801d7e4 <_printf_float+0x2c8>)
 801d574:	f04f 32ff 	mov.w	r2, #4294967295
 801d578:	f7e3 fad8 	bl	8000b2c <__aeabi_dcmpun>
 801d57c:	bb70      	cbnz	r0, 801d5dc <_printf_float+0xc0>
 801d57e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d582:	4b98      	ldr	r3, [pc, #608]	@ (801d7e4 <_printf_float+0x2c8>)
 801d584:	f04f 32ff 	mov.w	r2, #4294967295
 801d588:	f7e3 fab2 	bl	8000af0 <__aeabi_dcmple>
 801d58c:	bb30      	cbnz	r0, 801d5dc <_printf_float+0xc0>
 801d58e:	2200      	movs	r2, #0
 801d590:	2300      	movs	r3, #0
 801d592:	4640      	mov	r0, r8
 801d594:	4649      	mov	r1, r9
 801d596:	f7e3 faa1 	bl	8000adc <__aeabi_dcmplt>
 801d59a:	b110      	cbz	r0, 801d5a2 <_printf_float+0x86>
 801d59c:	232d      	movs	r3, #45	@ 0x2d
 801d59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d5a2:	4a91      	ldr	r2, [pc, #580]	@ (801d7e8 <_printf_float+0x2cc>)
 801d5a4:	4b91      	ldr	r3, [pc, #580]	@ (801d7ec <_printf_float+0x2d0>)
 801d5a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d5aa:	bf94      	ite	ls
 801d5ac:	4690      	movls	r8, r2
 801d5ae:	4698      	movhi	r8, r3
 801d5b0:	2303      	movs	r3, #3
 801d5b2:	6123      	str	r3, [r4, #16]
 801d5b4:	f02b 0304 	bic.w	r3, fp, #4
 801d5b8:	6023      	str	r3, [r4, #0]
 801d5ba:	f04f 0900 	mov.w	r9, #0
 801d5be:	9700      	str	r7, [sp, #0]
 801d5c0:	4633      	mov	r3, r6
 801d5c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d5c4:	4621      	mov	r1, r4
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f000 f9d2 	bl	801d970 <_printf_common>
 801d5cc:	3001      	adds	r0, #1
 801d5ce:	f040 808d 	bne.w	801d6ec <_printf_float+0x1d0>
 801d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 801d5d6:	b00d      	add	sp, #52	@ 0x34
 801d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5dc:	4642      	mov	r2, r8
 801d5de:	464b      	mov	r3, r9
 801d5e0:	4640      	mov	r0, r8
 801d5e2:	4649      	mov	r1, r9
 801d5e4:	f7e3 faa2 	bl	8000b2c <__aeabi_dcmpun>
 801d5e8:	b140      	cbz	r0, 801d5fc <_printf_float+0xe0>
 801d5ea:	464b      	mov	r3, r9
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	bfbc      	itt	lt
 801d5f0:	232d      	movlt	r3, #45	@ 0x2d
 801d5f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d5f6:	4a7e      	ldr	r2, [pc, #504]	@ (801d7f0 <_printf_float+0x2d4>)
 801d5f8:	4b7e      	ldr	r3, [pc, #504]	@ (801d7f4 <_printf_float+0x2d8>)
 801d5fa:	e7d4      	b.n	801d5a6 <_printf_float+0x8a>
 801d5fc:	6863      	ldr	r3, [r4, #4]
 801d5fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d602:	9206      	str	r2, [sp, #24]
 801d604:	1c5a      	adds	r2, r3, #1
 801d606:	d13b      	bne.n	801d680 <_printf_float+0x164>
 801d608:	2306      	movs	r3, #6
 801d60a:	6063      	str	r3, [r4, #4]
 801d60c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d610:	2300      	movs	r3, #0
 801d612:	6022      	str	r2, [r4, #0]
 801d614:	9303      	str	r3, [sp, #12]
 801d616:	ab0a      	add	r3, sp, #40	@ 0x28
 801d618:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d61c:	ab09      	add	r3, sp, #36	@ 0x24
 801d61e:	9300      	str	r3, [sp, #0]
 801d620:	6861      	ldr	r1, [r4, #4]
 801d622:	ec49 8b10 	vmov	d0, r8, r9
 801d626:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d62a:	4628      	mov	r0, r5
 801d62c:	f7ff fed6 	bl	801d3dc <__cvt>
 801d630:	9b06      	ldr	r3, [sp, #24]
 801d632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d634:	2b47      	cmp	r3, #71	@ 0x47
 801d636:	4680      	mov	r8, r0
 801d638:	d129      	bne.n	801d68e <_printf_float+0x172>
 801d63a:	1cc8      	adds	r0, r1, #3
 801d63c:	db02      	blt.n	801d644 <_printf_float+0x128>
 801d63e:	6863      	ldr	r3, [r4, #4]
 801d640:	4299      	cmp	r1, r3
 801d642:	dd41      	ble.n	801d6c8 <_printf_float+0x1ac>
 801d644:	f1aa 0a02 	sub.w	sl, sl, #2
 801d648:	fa5f fa8a 	uxtb.w	sl, sl
 801d64c:	3901      	subs	r1, #1
 801d64e:	4652      	mov	r2, sl
 801d650:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d654:	9109      	str	r1, [sp, #36]	@ 0x24
 801d656:	f7ff ff26 	bl	801d4a6 <__exponent>
 801d65a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d65c:	1813      	adds	r3, r2, r0
 801d65e:	2a01      	cmp	r2, #1
 801d660:	4681      	mov	r9, r0
 801d662:	6123      	str	r3, [r4, #16]
 801d664:	dc02      	bgt.n	801d66c <_printf_float+0x150>
 801d666:	6822      	ldr	r2, [r4, #0]
 801d668:	07d2      	lsls	r2, r2, #31
 801d66a:	d501      	bpl.n	801d670 <_printf_float+0x154>
 801d66c:	3301      	adds	r3, #1
 801d66e:	6123      	str	r3, [r4, #16]
 801d670:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d674:	2b00      	cmp	r3, #0
 801d676:	d0a2      	beq.n	801d5be <_printf_float+0xa2>
 801d678:	232d      	movs	r3, #45	@ 0x2d
 801d67a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d67e:	e79e      	b.n	801d5be <_printf_float+0xa2>
 801d680:	9a06      	ldr	r2, [sp, #24]
 801d682:	2a47      	cmp	r2, #71	@ 0x47
 801d684:	d1c2      	bne.n	801d60c <_printf_float+0xf0>
 801d686:	2b00      	cmp	r3, #0
 801d688:	d1c0      	bne.n	801d60c <_printf_float+0xf0>
 801d68a:	2301      	movs	r3, #1
 801d68c:	e7bd      	b.n	801d60a <_printf_float+0xee>
 801d68e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d692:	d9db      	bls.n	801d64c <_printf_float+0x130>
 801d694:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d698:	d118      	bne.n	801d6cc <_printf_float+0x1b0>
 801d69a:	2900      	cmp	r1, #0
 801d69c:	6863      	ldr	r3, [r4, #4]
 801d69e:	dd0b      	ble.n	801d6b8 <_printf_float+0x19c>
 801d6a0:	6121      	str	r1, [r4, #16]
 801d6a2:	b913      	cbnz	r3, 801d6aa <_printf_float+0x18e>
 801d6a4:	6822      	ldr	r2, [r4, #0]
 801d6a6:	07d0      	lsls	r0, r2, #31
 801d6a8:	d502      	bpl.n	801d6b0 <_printf_float+0x194>
 801d6aa:	3301      	adds	r3, #1
 801d6ac:	440b      	add	r3, r1
 801d6ae:	6123      	str	r3, [r4, #16]
 801d6b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d6b2:	f04f 0900 	mov.w	r9, #0
 801d6b6:	e7db      	b.n	801d670 <_printf_float+0x154>
 801d6b8:	b913      	cbnz	r3, 801d6c0 <_printf_float+0x1a4>
 801d6ba:	6822      	ldr	r2, [r4, #0]
 801d6bc:	07d2      	lsls	r2, r2, #31
 801d6be:	d501      	bpl.n	801d6c4 <_printf_float+0x1a8>
 801d6c0:	3302      	adds	r3, #2
 801d6c2:	e7f4      	b.n	801d6ae <_printf_float+0x192>
 801d6c4:	2301      	movs	r3, #1
 801d6c6:	e7f2      	b.n	801d6ae <_printf_float+0x192>
 801d6c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6ce:	4299      	cmp	r1, r3
 801d6d0:	db05      	blt.n	801d6de <_printf_float+0x1c2>
 801d6d2:	6823      	ldr	r3, [r4, #0]
 801d6d4:	6121      	str	r1, [r4, #16]
 801d6d6:	07d8      	lsls	r0, r3, #31
 801d6d8:	d5ea      	bpl.n	801d6b0 <_printf_float+0x194>
 801d6da:	1c4b      	adds	r3, r1, #1
 801d6dc:	e7e7      	b.n	801d6ae <_printf_float+0x192>
 801d6de:	2900      	cmp	r1, #0
 801d6e0:	bfd4      	ite	le
 801d6e2:	f1c1 0202 	rsble	r2, r1, #2
 801d6e6:	2201      	movgt	r2, #1
 801d6e8:	4413      	add	r3, r2
 801d6ea:	e7e0      	b.n	801d6ae <_printf_float+0x192>
 801d6ec:	6823      	ldr	r3, [r4, #0]
 801d6ee:	055a      	lsls	r2, r3, #21
 801d6f0:	d407      	bmi.n	801d702 <_printf_float+0x1e6>
 801d6f2:	6923      	ldr	r3, [r4, #16]
 801d6f4:	4642      	mov	r2, r8
 801d6f6:	4631      	mov	r1, r6
 801d6f8:	4628      	mov	r0, r5
 801d6fa:	47b8      	blx	r7
 801d6fc:	3001      	adds	r0, #1
 801d6fe:	d12b      	bne.n	801d758 <_printf_float+0x23c>
 801d700:	e767      	b.n	801d5d2 <_printf_float+0xb6>
 801d702:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d706:	f240 80dd 	bls.w	801d8c4 <_printf_float+0x3a8>
 801d70a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d70e:	2200      	movs	r2, #0
 801d710:	2300      	movs	r3, #0
 801d712:	f7e3 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 801d716:	2800      	cmp	r0, #0
 801d718:	d033      	beq.n	801d782 <_printf_float+0x266>
 801d71a:	4a37      	ldr	r2, [pc, #220]	@ (801d7f8 <_printf_float+0x2dc>)
 801d71c:	2301      	movs	r3, #1
 801d71e:	4631      	mov	r1, r6
 801d720:	4628      	mov	r0, r5
 801d722:	47b8      	blx	r7
 801d724:	3001      	adds	r0, #1
 801d726:	f43f af54 	beq.w	801d5d2 <_printf_float+0xb6>
 801d72a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d72e:	4543      	cmp	r3, r8
 801d730:	db02      	blt.n	801d738 <_printf_float+0x21c>
 801d732:	6823      	ldr	r3, [r4, #0]
 801d734:	07d8      	lsls	r0, r3, #31
 801d736:	d50f      	bpl.n	801d758 <_printf_float+0x23c>
 801d738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d73c:	4631      	mov	r1, r6
 801d73e:	4628      	mov	r0, r5
 801d740:	47b8      	blx	r7
 801d742:	3001      	adds	r0, #1
 801d744:	f43f af45 	beq.w	801d5d2 <_printf_float+0xb6>
 801d748:	f04f 0900 	mov.w	r9, #0
 801d74c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d750:	f104 0a1a 	add.w	sl, r4, #26
 801d754:	45c8      	cmp	r8, r9
 801d756:	dc09      	bgt.n	801d76c <_printf_float+0x250>
 801d758:	6823      	ldr	r3, [r4, #0]
 801d75a:	079b      	lsls	r3, r3, #30
 801d75c:	f100 8103 	bmi.w	801d966 <_printf_float+0x44a>
 801d760:	68e0      	ldr	r0, [r4, #12]
 801d762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d764:	4298      	cmp	r0, r3
 801d766:	bfb8      	it	lt
 801d768:	4618      	movlt	r0, r3
 801d76a:	e734      	b.n	801d5d6 <_printf_float+0xba>
 801d76c:	2301      	movs	r3, #1
 801d76e:	4652      	mov	r2, sl
 801d770:	4631      	mov	r1, r6
 801d772:	4628      	mov	r0, r5
 801d774:	47b8      	blx	r7
 801d776:	3001      	adds	r0, #1
 801d778:	f43f af2b 	beq.w	801d5d2 <_printf_float+0xb6>
 801d77c:	f109 0901 	add.w	r9, r9, #1
 801d780:	e7e8      	b.n	801d754 <_printf_float+0x238>
 801d782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d784:	2b00      	cmp	r3, #0
 801d786:	dc39      	bgt.n	801d7fc <_printf_float+0x2e0>
 801d788:	4a1b      	ldr	r2, [pc, #108]	@ (801d7f8 <_printf_float+0x2dc>)
 801d78a:	2301      	movs	r3, #1
 801d78c:	4631      	mov	r1, r6
 801d78e:	4628      	mov	r0, r5
 801d790:	47b8      	blx	r7
 801d792:	3001      	adds	r0, #1
 801d794:	f43f af1d 	beq.w	801d5d2 <_printf_float+0xb6>
 801d798:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d79c:	ea59 0303 	orrs.w	r3, r9, r3
 801d7a0:	d102      	bne.n	801d7a8 <_printf_float+0x28c>
 801d7a2:	6823      	ldr	r3, [r4, #0]
 801d7a4:	07d9      	lsls	r1, r3, #31
 801d7a6:	d5d7      	bpl.n	801d758 <_printf_float+0x23c>
 801d7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7ac:	4631      	mov	r1, r6
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	47b8      	blx	r7
 801d7b2:	3001      	adds	r0, #1
 801d7b4:	f43f af0d 	beq.w	801d5d2 <_printf_float+0xb6>
 801d7b8:	f04f 0a00 	mov.w	sl, #0
 801d7bc:	f104 0b1a 	add.w	fp, r4, #26
 801d7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7c2:	425b      	negs	r3, r3
 801d7c4:	4553      	cmp	r3, sl
 801d7c6:	dc01      	bgt.n	801d7cc <_printf_float+0x2b0>
 801d7c8:	464b      	mov	r3, r9
 801d7ca:	e793      	b.n	801d6f4 <_printf_float+0x1d8>
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	465a      	mov	r2, fp
 801d7d0:	4631      	mov	r1, r6
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	47b8      	blx	r7
 801d7d6:	3001      	adds	r0, #1
 801d7d8:	f43f aefb 	beq.w	801d5d2 <_printf_float+0xb6>
 801d7dc:	f10a 0a01 	add.w	sl, sl, #1
 801d7e0:	e7ee      	b.n	801d7c0 <_printf_float+0x2a4>
 801d7e2:	bf00      	nop
 801d7e4:	7fefffff 	.word	0x7fefffff
 801d7e8:	08025fc7 	.word	0x08025fc7
 801d7ec:	08025fcb 	.word	0x08025fcb
 801d7f0:	08025fcf 	.word	0x08025fcf
 801d7f4:	08025fd3 	.word	0x08025fd3
 801d7f8:	08025fd7 	.word	0x08025fd7
 801d7fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d7fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d802:	4553      	cmp	r3, sl
 801d804:	bfa8      	it	ge
 801d806:	4653      	movge	r3, sl
 801d808:	2b00      	cmp	r3, #0
 801d80a:	4699      	mov	r9, r3
 801d80c:	dc36      	bgt.n	801d87c <_printf_float+0x360>
 801d80e:	f04f 0b00 	mov.w	fp, #0
 801d812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d816:	f104 021a 	add.w	r2, r4, #26
 801d81a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d81c:	9306      	str	r3, [sp, #24]
 801d81e:	eba3 0309 	sub.w	r3, r3, r9
 801d822:	455b      	cmp	r3, fp
 801d824:	dc31      	bgt.n	801d88a <_printf_float+0x36e>
 801d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d828:	459a      	cmp	sl, r3
 801d82a:	dc3a      	bgt.n	801d8a2 <_printf_float+0x386>
 801d82c:	6823      	ldr	r3, [r4, #0]
 801d82e:	07da      	lsls	r2, r3, #31
 801d830:	d437      	bmi.n	801d8a2 <_printf_float+0x386>
 801d832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d834:	ebaa 0903 	sub.w	r9, sl, r3
 801d838:	9b06      	ldr	r3, [sp, #24]
 801d83a:	ebaa 0303 	sub.w	r3, sl, r3
 801d83e:	4599      	cmp	r9, r3
 801d840:	bfa8      	it	ge
 801d842:	4699      	movge	r9, r3
 801d844:	f1b9 0f00 	cmp.w	r9, #0
 801d848:	dc33      	bgt.n	801d8b2 <_printf_float+0x396>
 801d84a:	f04f 0800 	mov.w	r8, #0
 801d84e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d852:	f104 0b1a 	add.w	fp, r4, #26
 801d856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d858:	ebaa 0303 	sub.w	r3, sl, r3
 801d85c:	eba3 0309 	sub.w	r3, r3, r9
 801d860:	4543      	cmp	r3, r8
 801d862:	f77f af79 	ble.w	801d758 <_printf_float+0x23c>
 801d866:	2301      	movs	r3, #1
 801d868:	465a      	mov	r2, fp
 801d86a:	4631      	mov	r1, r6
 801d86c:	4628      	mov	r0, r5
 801d86e:	47b8      	blx	r7
 801d870:	3001      	adds	r0, #1
 801d872:	f43f aeae 	beq.w	801d5d2 <_printf_float+0xb6>
 801d876:	f108 0801 	add.w	r8, r8, #1
 801d87a:	e7ec      	b.n	801d856 <_printf_float+0x33a>
 801d87c:	4642      	mov	r2, r8
 801d87e:	4631      	mov	r1, r6
 801d880:	4628      	mov	r0, r5
 801d882:	47b8      	blx	r7
 801d884:	3001      	adds	r0, #1
 801d886:	d1c2      	bne.n	801d80e <_printf_float+0x2f2>
 801d888:	e6a3      	b.n	801d5d2 <_printf_float+0xb6>
 801d88a:	2301      	movs	r3, #1
 801d88c:	4631      	mov	r1, r6
 801d88e:	4628      	mov	r0, r5
 801d890:	9206      	str	r2, [sp, #24]
 801d892:	47b8      	blx	r7
 801d894:	3001      	adds	r0, #1
 801d896:	f43f ae9c 	beq.w	801d5d2 <_printf_float+0xb6>
 801d89a:	9a06      	ldr	r2, [sp, #24]
 801d89c:	f10b 0b01 	add.w	fp, fp, #1
 801d8a0:	e7bb      	b.n	801d81a <_printf_float+0x2fe>
 801d8a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d8a6:	4631      	mov	r1, r6
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	47b8      	blx	r7
 801d8ac:	3001      	adds	r0, #1
 801d8ae:	d1c0      	bne.n	801d832 <_printf_float+0x316>
 801d8b0:	e68f      	b.n	801d5d2 <_printf_float+0xb6>
 801d8b2:	9a06      	ldr	r2, [sp, #24]
 801d8b4:	464b      	mov	r3, r9
 801d8b6:	4442      	add	r2, r8
 801d8b8:	4631      	mov	r1, r6
 801d8ba:	4628      	mov	r0, r5
 801d8bc:	47b8      	blx	r7
 801d8be:	3001      	adds	r0, #1
 801d8c0:	d1c3      	bne.n	801d84a <_printf_float+0x32e>
 801d8c2:	e686      	b.n	801d5d2 <_printf_float+0xb6>
 801d8c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d8c8:	f1ba 0f01 	cmp.w	sl, #1
 801d8cc:	dc01      	bgt.n	801d8d2 <_printf_float+0x3b6>
 801d8ce:	07db      	lsls	r3, r3, #31
 801d8d0:	d536      	bpl.n	801d940 <_printf_float+0x424>
 801d8d2:	2301      	movs	r3, #1
 801d8d4:	4642      	mov	r2, r8
 801d8d6:	4631      	mov	r1, r6
 801d8d8:	4628      	mov	r0, r5
 801d8da:	47b8      	blx	r7
 801d8dc:	3001      	adds	r0, #1
 801d8de:	f43f ae78 	beq.w	801d5d2 <_printf_float+0xb6>
 801d8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d8e6:	4631      	mov	r1, r6
 801d8e8:	4628      	mov	r0, r5
 801d8ea:	47b8      	blx	r7
 801d8ec:	3001      	adds	r0, #1
 801d8ee:	f43f ae70 	beq.w	801d5d2 <_printf_float+0xb6>
 801d8f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d8fe:	f7e3 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 801d902:	b9c0      	cbnz	r0, 801d936 <_printf_float+0x41a>
 801d904:	4653      	mov	r3, sl
 801d906:	f108 0201 	add.w	r2, r8, #1
 801d90a:	4631      	mov	r1, r6
 801d90c:	4628      	mov	r0, r5
 801d90e:	47b8      	blx	r7
 801d910:	3001      	adds	r0, #1
 801d912:	d10c      	bne.n	801d92e <_printf_float+0x412>
 801d914:	e65d      	b.n	801d5d2 <_printf_float+0xb6>
 801d916:	2301      	movs	r3, #1
 801d918:	465a      	mov	r2, fp
 801d91a:	4631      	mov	r1, r6
 801d91c:	4628      	mov	r0, r5
 801d91e:	47b8      	blx	r7
 801d920:	3001      	adds	r0, #1
 801d922:	f43f ae56 	beq.w	801d5d2 <_printf_float+0xb6>
 801d926:	f108 0801 	add.w	r8, r8, #1
 801d92a:	45d0      	cmp	r8, sl
 801d92c:	dbf3      	blt.n	801d916 <_printf_float+0x3fa>
 801d92e:	464b      	mov	r3, r9
 801d930:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d934:	e6df      	b.n	801d6f6 <_printf_float+0x1da>
 801d936:	f04f 0800 	mov.w	r8, #0
 801d93a:	f104 0b1a 	add.w	fp, r4, #26
 801d93e:	e7f4      	b.n	801d92a <_printf_float+0x40e>
 801d940:	2301      	movs	r3, #1
 801d942:	4642      	mov	r2, r8
 801d944:	e7e1      	b.n	801d90a <_printf_float+0x3ee>
 801d946:	2301      	movs	r3, #1
 801d948:	464a      	mov	r2, r9
 801d94a:	4631      	mov	r1, r6
 801d94c:	4628      	mov	r0, r5
 801d94e:	47b8      	blx	r7
 801d950:	3001      	adds	r0, #1
 801d952:	f43f ae3e 	beq.w	801d5d2 <_printf_float+0xb6>
 801d956:	f108 0801 	add.w	r8, r8, #1
 801d95a:	68e3      	ldr	r3, [r4, #12]
 801d95c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d95e:	1a5b      	subs	r3, r3, r1
 801d960:	4543      	cmp	r3, r8
 801d962:	dcf0      	bgt.n	801d946 <_printf_float+0x42a>
 801d964:	e6fc      	b.n	801d760 <_printf_float+0x244>
 801d966:	f04f 0800 	mov.w	r8, #0
 801d96a:	f104 0919 	add.w	r9, r4, #25
 801d96e:	e7f4      	b.n	801d95a <_printf_float+0x43e>

0801d970 <_printf_common>:
 801d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d974:	4616      	mov	r6, r2
 801d976:	4698      	mov	r8, r3
 801d978:	688a      	ldr	r2, [r1, #8]
 801d97a:	690b      	ldr	r3, [r1, #16]
 801d97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d980:	4293      	cmp	r3, r2
 801d982:	bfb8      	it	lt
 801d984:	4613      	movlt	r3, r2
 801d986:	6033      	str	r3, [r6, #0]
 801d988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d98c:	4607      	mov	r7, r0
 801d98e:	460c      	mov	r4, r1
 801d990:	b10a      	cbz	r2, 801d996 <_printf_common+0x26>
 801d992:	3301      	adds	r3, #1
 801d994:	6033      	str	r3, [r6, #0]
 801d996:	6823      	ldr	r3, [r4, #0]
 801d998:	0699      	lsls	r1, r3, #26
 801d99a:	bf42      	ittt	mi
 801d99c:	6833      	ldrmi	r3, [r6, #0]
 801d99e:	3302      	addmi	r3, #2
 801d9a0:	6033      	strmi	r3, [r6, #0]
 801d9a2:	6825      	ldr	r5, [r4, #0]
 801d9a4:	f015 0506 	ands.w	r5, r5, #6
 801d9a8:	d106      	bne.n	801d9b8 <_printf_common+0x48>
 801d9aa:	f104 0a19 	add.w	sl, r4, #25
 801d9ae:	68e3      	ldr	r3, [r4, #12]
 801d9b0:	6832      	ldr	r2, [r6, #0]
 801d9b2:	1a9b      	subs	r3, r3, r2
 801d9b4:	42ab      	cmp	r3, r5
 801d9b6:	dc26      	bgt.n	801da06 <_printf_common+0x96>
 801d9b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d9bc:	6822      	ldr	r2, [r4, #0]
 801d9be:	3b00      	subs	r3, #0
 801d9c0:	bf18      	it	ne
 801d9c2:	2301      	movne	r3, #1
 801d9c4:	0692      	lsls	r2, r2, #26
 801d9c6:	d42b      	bmi.n	801da20 <_printf_common+0xb0>
 801d9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d9cc:	4641      	mov	r1, r8
 801d9ce:	4638      	mov	r0, r7
 801d9d0:	47c8      	blx	r9
 801d9d2:	3001      	adds	r0, #1
 801d9d4:	d01e      	beq.n	801da14 <_printf_common+0xa4>
 801d9d6:	6823      	ldr	r3, [r4, #0]
 801d9d8:	6922      	ldr	r2, [r4, #16]
 801d9da:	f003 0306 	and.w	r3, r3, #6
 801d9de:	2b04      	cmp	r3, #4
 801d9e0:	bf02      	ittt	eq
 801d9e2:	68e5      	ldreq	r5, [r4, #12]
 801d9e4:	6833      	ldreq	r3, [r6, #0]
 801d9e6:	1aed      	subeq	r5, r5, r3
 801d9e8:	68a3      	ldr	r3, [r4, #8]
 801d9ea:	bf0c      	ite	eq
 801d9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d9f0:	2500      	movne	r5, #0
 801d9f2:	4293      	cmp	r3, r2
 801d9f4:	bfc4      	itt	gt
 801d9f6:	1a9b      	subgt	r3, r3, r2
 801d9f8:	18ed      	addgt	r5, r5, r3
 801d9fa:	2600      	movs	r6, #0
 801d9fc:	341a      	adds	r4, #26
 801d9fe:	42b5      	cmp	r5, r6
 801da00:	d11a      	bne.n	801da38 <_printf_common+0xc8>
 801da02:	2000      	movs	r0, #0
 801da04:	e008      	b.n	801da18 <_printf_common+0xa8>
 801da06:	2301      	movs	r3, #1
 801da08:	4652      	mov	r2, sl
 801da0a:	4641      	mov	r1, r8
 801da0c:	4638      	mov	r0, r7
 801da0e:	47c8      	blx	r9
 801da10:	3001      	adds	r0, #1
 801da12:	d103      	bne.n	801da1c <_printf_common+0xac>
 801da14:	f04f 30ff 	mov.w	r0, #4294967295
 801da18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da1c:	3501      	adds	r5, #1
 801da1e:	e7c6      	b.n	801d9ae <_printf_common+0x3e>
 801da20:	18e1      	adds	r1, r4, r3
 801da22:	1c5a      	adds	r2, r3, #1
 801da24:	2030      	movs	r0, #48	@ 0x30
 801da26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801da2a:	4422      	add	r2, r4
 801da2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801da30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801da34:	3302      	adds	r3, #2
 801da36:	e7c7      	b.n	801d9c8 <_printf_common+0x58>
 801da38:	2301      	movs	r3, #1
 801da3a:	4622      	mov	r2, r4
 801da3c:	4641      	mov	r1, r8
 801da3e:	4638      	mov	r0, r7
 801da40:	47c8      	blx	r9
 801da42:	3001      	adds	r0, #1
 801da44:	d0e6      	beq.n	801da14 <_printf_common+0xa4>
 801da46:	3601      	adds	r6, #1
 801da48:	e7d9      	b.n	801d9fe <_printf_common+0x8e>
	...

0801da4c <_printf_i>:
 801da4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da50:	7e0f      	ldrb	r7, [r1, #24]
 801da52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801da54:	2f78      	cmp	r7, #120	@ 0x78
 801da56:	4691      	mov	r9, r2
 801da58:	4680      	mov	r8, r0
 801da5a:	460c      	mov	r4, r1
 801da5c:	469a      	mov	sl, r3
 801da5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801da62:	d807      	bhi.n	801da74 <_printf_i+0x28>
 801da64:	2f62      	cmp	r7, #98	@ 0x62
 801da66:	d80a      	bhi.n	801da7e <_printf_i+0x32>
 801da68:	2f00      	cmp	r7, #0
 801da6a:	f000 80d2 	beq.w	801dc12 <_printf_i+0x1c6>
 801da6e:	2f58      	cmp	r7, #88	@ 0x58
 801da70:	f000 80b9 	beq.w	801dbe6 <_printf_i+0x19a>
 801da74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801da7c:	e03a      	b.n	801daf4 <_printf_i+0xa8>
 801da7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801da82:	2b15      	cmp	r3, #21
 801da84:	d8f6      	bhi.n	801da74 <_printf_i+0x28>
 801da86:	a101      	add	r1, pc, #4	@ (adr r1, 801da8c <_printf_i+0x40>)
 801da88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da8c:	0801dae5 	.word	0x0801dae5
 801da90:	0801daf9 	.word	0x0801daf9
 801da94:	0801da75 	.word	0x0801da75
 801da98:	0801da75 	.word	0x0801da75
 801da9c:	0801da75 	.word	0x0801da75
 801daa0:	0801da75 	.word	0x0801da75
 801daa4:	0801daf9 	.word	0x0801daf9
 801daa8:	0801da75 	.word	0x0801da75
 801daac:	0801da75 	.word	0x0801da75
 801dab0:	0801da75 	.word	0x0801da75
 801dab4:	0801da75 	.word	0x0801da75
 801dab8:	0801dbf9 	.word	0x0801dbf9
 801dabc:	0801db23 	.word	0x0801db23
 801dac0:	0801dbb3 	.word	0x0801dbb3
 801dac4:	0801da75 	.word	0x0801da75
 801dac8:	0801da75 	.word	0x0801da75
 801dacc:	0801dc1b 	.word	0x0801dc1b
 801dad0:	0801da75 	.word	0x0801da75
 801dad4:	0801db23 	.word	0x0801db23
 801dad8:	0801da75 	.word	0x0801da75
 801dadc:	0801da75 	.word	0x0801da75
 801dae0:	0801dbbb 	.word	0x0801dbbb
 801dae4:	6833      	ldr	r3, [r6, #0]
 801dae6:	1d1a      	adds	r2, r3, #4
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	6032      	str	r2, [r6, #0]
 801daec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801daf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801daf4:	2301      	movs	r3, #1
 801daf6:	e09d      	b.n	801dc34 <_printf_i+0x1e8>
 801daf8:	6833      	ldr	r3, [r6, #0]
 801dafa:	6820      	ldr	r0, [r4, #0]
 801dafc:	1d19      	adds	r1, r3, #4
 801dafe:	6031      	str	r1, [r6, #0]
 801db00:	0606      	lsls	r6, r0, #24
 801db02:	d501      	bpl.n	801db08 <_printf_i+0xbc>
 801db04:	681d      	ldr	r5, [r3, #0]
 801db06:	e003      	b.n	801db10 <_printf_i+0xc4>
 801db08:	0645      	lsls	r5, r0, #25
 801db0a:	d5fb      	bpl.n	801db04 <_printf_i+0xb8>
 801db0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801db10:	2d00      	cmp	r5, #0
 801db12:	da03      	bge.n	801db1c <_printf_i+0xd0>
 801db14:	232d      	movs	r3, #45	@ 0x2d
 801db16:	426d      	negs	r5, r5
 801db18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db1c:	4859      	ldr	r0, [pc, #356]	@ (801dc84 <_printf_i+0x238>)
 801db1e:	230a      	movs	r3, #10
 801db20:	e011      	b.n	801db46 <_printf_i+0xfa>
 801db22:	6821      	ldr	r1, [r4, #0]
 801db24:	6833      	ldr	r3, [r6, #0]
 801db26:	0608      	lsls	r0, r1, #24
 801db28:	f853 5b04 	ldr.w	r5, [r3], #4
 801db2c:	d402      	bmi.n	801db34 <_printf_i+0xe8>
 801db2e:	0649      	lsls	r1, r1, #25
 801db30:	bf48      	it	mi
 801db32:	b2ad      	uxthmi	r5, r5
 801db34:	2f6f      	cmp	r7, #111	@ 0x6f
 801db36:	4853      	ldr	r0, [pc, #332]	@ (801dc84 <_printf_i+0x238>)
 801db38:	6033      	str	r3, [r6, #0]
 801db3a:	bf14      	ite	ne
 801db3c:	230a      	movne	r3, #10
 801db3e:	2308      	moveq	r3, #8
 801db40:	2100      	movs	r1, #0
 801db42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801db46:	6866      	ldr	r6, [r4, #4]
 801db48:	60a6      	str	r6, [r4, #8]
 801db4a:	2e00      	cmp	r6, #0
 801db4c:	bfa2      	ittt	ge
 801db4e:	6821      	ldrge	r1, [r4, #0]
 801db50:	f021 0104 	bicge.w	r1, r1, #4
 801db54:	6021      	strge	r1, [r4, #0]
 801db56:	b90d      	cbnz	r5, 801db5c <_printf_i+0x110>
 801db58:	2e00      	cmp	r6, #0
 801db5a:	d04b      	beq.n	801dbf4 <_printf_i+0x1a8>
 801db5c:	4616      	mov	r6, r2
 801db5e:	fbb5 f1f3 	udiv	r1, r5, r3
 801db62:	fb03 5711 	mls	r7, r3, r1, r5
 801db66:	5dc7      	ldrb	r7, [r0, r7]
 801db68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801db6c:	462f      	mov	r7, r5
 801db6e:	42bb      	cmp	r3, r7
 801db70:	460d      	mov	r5, r1
 801db72:	d9f4      	bls.n	801db5e <_printf_i+0x112>
 801db74:	2b08      	cmp	r3, #8
 801db76:	d10b      	bne.n	801db90 <_printf_i+0x144>
 801db78:	6823      	ldr	r3, [r4, #0]
 801db7a:	07df      	lsls	r7, r3, #31
 801db7c:	d508      	bpl.n	801db90 <_printf_i+0x144>
 801db7e:	6923      	ldr	r3, [r4, #16]
 801db80:	6861      	ldr	r1, [r4, #4]
 801db82:	4299      	cmp	r1, r3
 801db84:	bfde      	ittt	le
 801db86:	2330      	movle	r3, #48	@ 0x30
 801db88:	f806 3c01 	strble.w	r3, [r6, #-1]
 801db8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801db90:	1b92      	subs	r2, r2, r6
 801db92:	6122      	str	r2, [r4, #16]
 801db94:	f8cd a000 	str.w	sl, [sp]
 801db98:	464b      	mov	r3, r9
 801db9a:	aa03      	add	r2, sp, #12
 801db9c:	4621      	mov	r1, r4
 801db9e:	4640      	mov	r0, r8
 801dba0:	f7ff fee6 	bl	801d970 <_printf_common>
 801dba4:	3001      	adds	r0, #1
 801dba6:	d14a      	bne.n	801dc3e <_printf_i+0x1f2>
 801dba8:	f04f 30ff 	mov.w	r0, #4294967295
 801dbac:	b004      	add	sp, #16
 801dbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbb2:	6823      	ldr	r3, [r4, #0]
 801dbb4:	f043 0320 	orr.w	r3, r3, #32
 801dbb8:	6023      	str	r3, [r4, #0]
 801dbba:	4833      	ldr	r0, [pc, #204]	@ (801dc88 <_printf_i+0x23c>)
 801dbbc:	2778      	movs	r7, #120	@ 0x78
 801dbbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dbc2:	6823      	ldr	r3, [r4, #0]
 801dbc4:	6831      	ldr	r1, [r6, #0]
 801dbc6:	061f      	lsls	r7, r3, #24
 801dbc8:	f851 5b04 	ldr.w	r5, [r1], #4
 801dbcc:	d402      	bmi.n	801dbd4 <_printf_i+0x188>
 801dbce:	065f      	lsls	r7, r3, #25
 801dbd0:	bf48      	it	mi
 801dbd2:	b2ad      	uxthmi	r5, r5
 801dbd4:	6031      	str	r1, [r6, #0]
 801dbd6:	07d9      	lsls	r1, r3, #31
 801dbd8:	bf44      	itt	mi
 801dbda:	f043 0320 	orrmi.w	r3, r3, #32
 801dbde:	6023      	strmi	r3, [r4, #0]
 801dbe0:	b11d      	cbz	r5, 801dbea <_printf_i+0x19e>
 801dbe2:	2310      	movs	r3, #16
 801dbe4:	e7ac      	b.n	801db40 <_printf_i+0xf4>
 801dbe6:	4827      	ldr	r0, [pc, #156]	@ (801dc84 <_printf_i+0x238>)
 801dbe8:	e7e9      	b.n	801dbbe <_printf_i+0x172>
 801dbea:	6823      	ldr	r3, [r4, #0]
 801dbec:	f023 0320 	bic.w	r3, r3, #32
 801dbf0:	6023      	str	r3, [r4, #0]
 801dbf2:	e7f6      	b.n	801dbe2 <_printf_i+0x196>
 801dbf4:	4616      	mov	r6, r2
 801dbf6:	e7bd      	b.n	801db74 <_printf_i+0x128>
 801dbf8:	6833      	ldr	r3, [r6, #0]
 801dbfa:	6825      	ldr	r5, [r4, #0]
 801dbfc:	6961      	ldr	r1, [r4, #20]
 801dbfe:	1d18      	adds	r0, r3, #4
 801dc00:	6030      	str	r0, [r6, #0]
 801dc02:	062e      	lsls	r6, r5, #24
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	d501      	bpl.n	801dc0c <_printf_i+0x1c0>
 801dc08:	6019      	str	r1, [r3, #0]
 801dc0a:	e002      	b.n	801dc12 <_printf_i+0x1c6>
 801dc0c:	0668      	lsls	r0, r5, #25
 801dc0e:	d5fb      	bpl.n	801dc08 <_printf_i+0x1bc>
 801dc10:	8019      	strh	r1, [r3, #0]
 801dc12:	2300      	movs	r3, #0
 801dc14:	6123      	str	r3, [r4, #16]
 801dc16:	4616      	mov	r6, r2
 801dc18:	e7bc      	b.n	801db94 <_printf_i+0x148>
 801dc1a:	6833      	ldr	r3, [r6, #0]
 801dc1c:	1d1a      	adds	r2, r3, #4
 801dc1e:	6032      	str	r2, [r6, #0]
 801dc20:	681e      	ldr	r6, [r3, #0]
 801dc22:	6862      	ldr	r2, [r4, #4]
 801dc24:	2100      	movs	r1, #0
 801dc26:	4630      	mov	r0, r6
 801dc28:	f7e2 fad2 	bl	80001d0 <memchr>
 801dc2c:	b108      	cbz	r0, 801dc32 <_printf_i+0x1e6>
 801dc2e:	1b80      	subs	r0, r0, r6
 801dc30:	6060      	str	r0, [r4, #4]
 801dc32:	6863      	ldr	r3, [r4, #4]
 801dc34:	6123      	str	r3, [r4, #16]
 801dc36:	2300      	movs	r3, #0
 801dc38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc3c:	e7aa      	b.n	801db94 <_printf_i+0x148>
 801dc3e:	6923      	ldr	r3, [r4, #16]
 801dc40:	4632      	mov	r2, r6
 801dc42:	4649      	mov	r1, r9
 801dc44:	4640      	mov	r0, r8
 801dc46:	47d0      	blx	sl
 801dc48:	3001      	adds	r0, #1
 801dc4a:	d0ad      	beq.n	801dba8 <_printf_i+0x15c>
 801dc4c:	6823      	ldr	r3, [r4, #0]
 801dc4e:	079b      	lsls	r3, r3, #30
 801dc50:	d413      	bmi.n	801dc7a <_printf_i+0x22e>
 801dc52:	68e0      	ldr	r0, [r4, #12]
 801dc54:	9b03      	ldr	r3, [sp, #12]
 801dc56:	4298      	cmp	r0, r3
 801dc58:	bfb8      	it	lt
 801dc5a:	4618      	movlt	r0, r3
 801dc5c:	e7a6      	b.n	801dbac <_printf_i+0x160>
 801dc5e:	2301      	movs	r3, #1
 801dc60:	4632      	mov	r2, r6
 801dc62:	4649      	mov	r1, r9
 801dc64:	4640      	mov	r0, r8
 801dc66:	47d0      	blx	sl
 801dc68:	3001      	adds	r0, #1
 801dc6a:	d09d      	beq.n	801dba8 <_printf_i+0x15c>
 801dc6c:	3501      	adds	r5, #1
 801dc6e:	68e3      	ldr	r3, [r4, #12]
 801dc70:	9903      	ldr	r1, [sp, #12]
 801dc72:	1a5b      	subs	r3, r3, r1
 801dc74:	42ab      	cmp	r3, r5
 801dc76:	dcf2      	bgt.n	801dc5e <_printf_i+0x212>
 801dc78:	e7eb      	b.n	801dc52 <_printf_i+0x206>
 801dc7a:	2500      	movs	r5, #0
 801dc7c:	f104 0619 	add.w	r6, r4, #25
 801dc80:	e7f5      	b.n	801dc6e <_printf_i+0x222>
 801dc82:	bf00      	nop
 801dc84:	08025fd9 	.word	0x08025fd9
 801dc88:	08025fea 	.word	0x08025fea

0801dc8c <_scanf_float>:
 801dc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc90:	b087      	sub	sp, #28
 801dc92:	4617      	mov	r7, r2
 801dc94:	9303      	str	r3, [sp, #12]
 801dc96:	688b      	ldr	r3, [r1, #8]
 801dc98:	1e5a      	subs	r2, r3, #1
 801dc9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801dc9e:	bf81      	itttt	hi
 801dca0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801dca4:	eb03 0b05 	addhi.w	fp, r3, r5
 801dca8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dcac:	608b      	strhi	r3, [r1, #8]
 801dcae:	680b      	ldr	r3, [r1, #0]
 801dcb0:	460a      	mov	r2, r1
 801dcb2:	f04f 0500 	mov.w	r5, #0
 801dcb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801dcba:	f842 3b1c 	str.w	r3, [r2], #28
 801dcbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801dcc2:	4680      	mov	r8, r0
 801dcc4:	460c      	mov	r4, r1
 801dcc6:	bf98      	it	ls
 801dcc8:	f04f 0b00 	movls.w	fp, #0
 801dccc:	9201      	str	r2, [sp, #4]
 801dcce:	4616      	mov	r6, r2
 801dcd0:	46aa      	mov	sl, r5
 801dcd2:	46a9      	mov	r9, r5
 801dcd4:	9502      	str	r5, [sp, #8]
 801dcd6:	68a2      	ldr	r2, [r4, #8]
 801dcd8:	b152      	cbz	r2, 801dcf0 <_scanf_float+0x64>
 801dcda:	683b      	ldr	r3, [r7, #0]
 801dcdc:	781b      	ldrb	r3, [r3, #0]
 801dcde:	2b4e      	cmp	r3, #78	@ 0x4e
 801dce0:	d864      	bhi.n	801ddac <_scanf_float+0x120>
 801dce2:	2b40      	cmp	r3, #64	@ 0x40
 801dce4:	d83c      	bhi.n	801dd60 <_scanf_float+0xd4>
 801dce6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801dcea:	b2c8      	uxtb	r0, r1
 801dcec:	280e      	cmp	r0, #14
 801dcee:	d93a      	bls.n	801dd66 <_scanf_float+0xda>
 801dcf0:	f1b9 0f00 	cmp.w	r9, #0
 801dcf4:	d003      	beq.n	801dcfe <_scanf_float+0x72>
 801dcf6:	6823      	ldr	r3, [r4, #0]
 801dcf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801dcfc:	6023      	str	r3, [r4, #0]
 801dcfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd02:	f1ba 0f01 	cmp.w	sl, #1
 801dd06:	f200 8117 	bhi.w	801df38 <_scanf_float+0x2ac>
 801dd0a:	9b01      	ldr	r3, [sp, #4]
 801dd0c:	429e      	cmp	r6, r3
 801dd0e:	f200 8108 	bhi.w	801df22 <_scanf_float+0x296>
 801dd12:	2001      	movs	r0, #1
 801dd14:	b007      	add	sp, #28
 801dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801dd1e:	2a0d      	cmp	r2, #13
 801dd20:	d8e6      	bhi.n	801dcf0 <_scanf_float+0x64>
 801dd22:	a101      	add	r1, pc, #4	@ (adr r1, 801dd28 <_scanf_float+0x9c>)
 801dd24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801dd28:	0801de6f 	.word	0x0801de6f
 801dd2c:	0801dcf1 	.word	0x0801dcf1
 801dd30:	0801dcf1 	.word	0x0801dcf1
 801dd34:	0801dcf1 	.word	0x0801dcf1
 801dd38:	0801decf 	.word	0x0801decf
 801dd3c:	0801dea7 	.word	0x0801dea7
 801dd40:	0801dcf1 	.word	0x0801dcf1
 801dd44:	0801dcf1 	.word	0x0801dcf1
 801dd48:	0801de7d 	.word	0x0801de7d
 801dd4c:	0801dcf1 	.word	0x0801dcf1
 801dd50:	0801dcf1 	.word	0x0801dcf1
 801dd54:	0801dcf1 	.word	0x0801dcf1
 801dd58:	0801dcf1 	.word	0x0801dcf1
 801dd5c:	0801de35 	.word	0x0801de35
 801dd60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801dd64:	e7db      	b.n	801dd1e <_scanf_float+0x92>
 801dd66:	290e      	cmp	r1, #14
 801dd68:	d8c2      	bhi.n	801dcf0 <_scanf_float+0x64>
 801dd6a:	a001      	add	r0, pc, #4	@ (adr r0, 801dd70 <_scanf_float+0xe4>)
 801dd6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801dd70:	0801de25 	.word	0x0801de25
 801dd74:	0801dcf1 	.word	0x0801dcf1
 801dd78:	0801de25 	.word	0x0801de25
 801dd7c:	0801debb 	.word	0x0801debb
 801dd80:	0801dcf1 	.word	0x0801dcf1
 801dd84:	0801ddcd 	.word	0x0801ddcd
 801dd88:	0801de0b 	.word	0x0801de0b
 801dd8c:	0801de0b 	.word	0x0801de0b
 801dd90:	0801de0b 	.word	0x0801de0b
 801dd94:	0801de0b 	.word	0x0801de0b
 801dd98:	0801de0b 	.word	0x0801de0b
 801dd9c:	0801de0b 	.word	0x0801de0b
 801dda0:	0801de0b 	.word	0x0801de0b
 801dda4:	0801de0b 	.word	0x0801de0b
 801dda8:	0801de0b 	.word	0x0801de0b
 801ddac:	2b6e      	cmp	r3, #110	@ 0x6e
 801ddae:	d809      	bhi.n	801ddc4 <_scanf_float+0x138>
 801ddb0:	2b60      	cmp	r3, #96	@ 0x60
 801ddb2:	d8b2      	bhi.n	801dd1a <_scanf_float+0x8e>
 801ddb4:	2b54      	cmp	r3, #84	@ 0x54
 801ddb6:	d07b      	beq.n	801deb0 <_scanf_float+0x224>
 801ddb8:	2b59      	cmp	r3, #89	@ 0x59
 801ddba:	d199      	bne.n	801dcf0 <_scanf_float+0x64>
 801ddbc:	2d07      	cmp	r5, #7
 801ddbe:	d197      	bne.n	801dcf0 <_scanf_float+0x64>
 801ddc0:	2508      	movs	r5, #8
 801ddc2:	e02c      	b.n	801de1e <_scanf_float+0x192>
 801ddc4:	2b74      	cmp	r3, #116	@ 0x74
 801ddc6:	d073      	beq.n	801deb0 <_scanf_float+0x224>
 801ddc8:	2b79      	cmp	r3, #121	@ 0x79
 801ddca:	e7f6      	b.n	801ddba <_scanf_float+0x12e>
 801ddcc:	6821      	ldr	r1, [r4, #0]
 801ddce:	05c8      	lsls	r0, r1, #23
 801ddd0:	d51b      	bpl.n	801de0a <_scanf_float+0x17e>
 801ddd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801ddd6:	6021      	str	r1, [r4, #0]
 801ddd8:	f109 0901 	add.w	r9, r9, #1
 801dddc:	f1bb 0f00 	cmp.w	fp, #0
 801dde0:	d003      	beq.n	801ddea <_scanf_float+0x15e>
 801dde2:	3201      	adds	r2, #1
 801dde4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dde8:	60a2      	str	r2, [r4, #8]
 801ddea:	68a3      	ldr	r3, [r4, #8]
 801ddec:	3b01      	subs	r3, #1
 801ddee:	60a3      	str	r3, [r4, #8]
 801ddf0:	6923      	ldr	r3, [r4, #16]
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	6123      	str	r3, [r4, #16]
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	3b01      	subs	r3, #1
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	607b      	str	r3, [r7, #4]
 801ddfe:	f340 8087 	ble.w	801df10 <_scanf_float+0x284>
 801de02:	683b      	ldr	r3, [r7, #0]
 801de04:	3301      	adds	r3, #1
 801de06:	603b      	str	r3, [r7, #0]
 801de08:	e765      	b.n	801dcd6 <_scanf_float+0x4a>
 801de0a:	eb1a 0105 	adds.w	r1, sl, r5
 801de0e:	f47f af6f 	bne.w	801dcf0 <_scanf_float+0x64>
 801de12:	6822      	ldr	r2, [r4, #0]
 801de14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801de18:	6022      	str	r2, [r4, #0]
 801de1a:	460d      	mov	r5, r1
 801de1c:	468a      	mov	sl, r1
 801de1e:	f806 3b01 	strb.w	r3, [r6], #1
 801de22:	e7e2      	b.n	801ddea <_scanf_float+0x15e>
 801de24:	6822      	ldr	r2, [r4, #0]
 801de26:	0610      	lsls	r0, r2, #24
 801de28:	f57f af62 	bpl.w	801dcf0 <_scanf_float+0x64>
 801de2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801de30:	6022      	str	r2, [r4, #0]
 801de32:	e7f4      	b.n	801de1e <_scanf_float+0x192>
 801de34:	f1ba 0f00 	cmp.w	sl, #0
 801de38:	d10e      	bne.n	801de58 <_scanf_float+0x1cc>
 801de3a:	f1b9 0f00 	cmp.w	r9, #0
 801de3e:	d10e      	bne.n	801de5e <_scanf_float+0x1d2>
 801de40:	6822      	ldr	r2, [r4, #0]
 801de42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801de46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801de4a:	d108      	bne.n	801de5e <_scanf_float+0x1d2>
 801de4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801de50:	6022      	str	r2, [r4, #0]
 801de52:	f04f 0a01 	mov.w	sl, #1
 801de56:	e7e2      	b.n	801de1e <_scanf_float+0x192>
 801de58:	f1ba 0f02 	cmp.w	sl, #2
 801de5c:	d055      	beq.n	801df0a <_scanf_float+0x27e>
 801de5e:	2d01      	cmp	r5, #1
 801de60:	d002      	beq.n	801de68 <_scanf_float+0x1dc>
 801de62:	2d04      	cmp	r5, #4
 801de64:	f47f af44 	bne.w	801dcf0 <_scanf_float+0x64>
 801de68:	3501      	adds	r5, #1
 801de6a:	b2ed      	uxtb	r5, r5
 801de6c:	e7d7      	b.n	801de1e <_scanf_float+0x192>
 801de6e:	f1ba 0f01 	cmp.w	sl, #1
 801de72:	f47f af3d 	bne.w	801dcf0 <_scanf_float+0x64>
 801de76:	f04f 0a02 	mov.w	sl, #2
 801de7a:	e7d0      	b.n	801de1e <_scanf_float+0x192>
 801de7c:	b97d      	cbnz	r5, 801de9e <_scanf_float+0x212>
 801de7e:	f1b9 0f00 	cmp.w	r9, #0
 801de82:	f47f af38 	bne.w	801dcf6 <_scanf_float+0x6a>
 801de86:	6822      	ldr	r2, [r4, #0]
 801de88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801de8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801de90:	f040 8108 	bne.w	801e0a4 <_scanf_float+0x418>
 801de94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801de98:	6022      	str	r2, [r4, #0]
 801de9a:	2501      	movs	r5, #1
 801de9c:	e7bf      	b.n	801de1e <_scanf_float+0x192>
 801de9e:	2d03      	cmp	r5, #3
 801dea0:	d0e2      	beq.n	801de68 <_scanf_float+0x1dc>
 801dea2:	2d05      	cmp	r5, #5
 801dea4:	e7de      	b.n	801de64 <_scanf_float+0x1d8>
 801dea6:	2d02      	cmp	r5, #2
 801dea8:	f47f af22 	bne.w	801dcf0 <_scanf_float+0x64>
 801deac:	2503      	movs	r5, #3
 801deae:	e7b6      	b.n	801de1e <_scanf_float+0x192>
 801deb0:	2d06      	cmp	r5, #6
 801deb2:	f47f af1d 	bne.w	801dcf0 <_scanf_float+0x64>
 801deb6:	2507      	movs	r5, #7
 801deb8:	e7b1      	b.n	801de1e <_scanf_float+0x192>
 801deba:	6822      	ldr	r2, [r4, #0]
 801debc:	0591      	lsls	r1, r2, #22
 801debe:	f57f af17 	bpl.w	801dcf0 <_scanf_float+0x64>
 801dec2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801dec6:	6022      	str	r2, [r4, #0]
 801dec8:	f8cd 9008 	str.w	r9, [sp, #8]
 801decc:	e7a7      	b.n	801de1e <_scanf_float+0x192>
 801dece:	6822      	ldr	r2, [r4, #0]
 801ded0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801ded4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ded8:	d006      	beq.n	801dee8 <_scanf_float+0x25c>
 801deda:	0550      	lsls	r0, r2, #21
 801dedc:	f57f af08 	bpl.w	801dcf0 <_scanf_float+0x64>
 801dee0:	f1b9 0f00 	cmp.w	r9, #0
 801dee4:	f000 80de 	beq.w	801e0a4 <_scanf_float+0x418>
 801dee8:	0591      	lsls	r1, r2, #22
 801deea:	bf58      	it	pl
 801deec:	9902      	ldrpl	r1, [sp, #8]
 801deee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801def2:	bf58      	it	pl
 801def4:	eba9 0101 	subpl.w	r1, r9, r1
 801def8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801defc:	bf58      	it	pl
 801defe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801df02:	6022      	str	r2, [r4, #0]
 801df04:	f04f 0900 	mov.w	r9, #0
 801df08:	e789      	b.n	801de1e <_scanf_float+0x192>
 801df0a:	f04f 0a03 	mov.w	sl, #3
 801df0e:	e786      	b.n	801de1e <_scanf_float+0x192>
 801df10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801df14:	4639      	mov	r1, r7
 801df16:	4640      	mov	r0, r8
 801df18:	4798      	blx	r3
 801df1a:	2800      	cmp	r0, #0
 801df1c:	f43f aedb 	beq.w	801dcd6 <_scanf_float+0x4a>
 801df20:	e6e6      	b.n	801dcf0 <_scanf_float+0x64>
 801df22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801df2a:	463a      	mov	r2, r7
 801df2c:	4640      	mov	r0, r8
 801df2e:	4798      	blx	r3
 801df30:	6923      	ldr	r3, [r4, #16]
 801df32:	3b01      	subs	r3, #1
 801df34:	6123      	str	r3, [r4, #16]
 801df36:	e6e8      	b.n	801dd0a <_scanf_float+0x7e>
 801df38:	1e6b      	subs	r3, r5, #1
 801df3a:	2b06      	cmp	r3, #6
 801df3c:	d824      	bhi.n	801df88 <_scanf_float+0x2fc>
 801df3e:	2d02      	cmp	r5, #2
 801df40:	d836      	bhi.n	801dfb0 <_scanf_float+0x324>
 801df42:	9b01      	ldr	r3, [sp, #4]
 801df44:	429e      	cmp	r6, r3
 801df46:	f67f aee4 	bls.w	801dd12 <_scanf_float+0x86>
 801df4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801df52:	463a      	mov	r2, r7
 801df54:	4640      	mov	r0, r8
 801df56:	4798      	blx	r3
 801df58:	6923      	ldr	r3, [r4, #16]
 801df5a:	3b01      	subs	r3, #1
 801df5c:	6123      	str	r3, [r4, #16]
 801df5e:	e7f0      	b.n	801df42 <_scanf_float+0x2b6>
 801df60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801df68:	463a      	mov	r2, r7
 801df6a:	4640      	mov	r0, r8
 801df6c:	4798      	blx	r3
 801df6e:	6923      	ldr	r3, [r4, #16]
 801df70:	3b01      	subs	r3, #1
 801df72:	6123      	str	r3, [r4, #16]
 801df74:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df78:	fa5f fa8a 	uxtb.w	sl, sl
 801df7c:	f1ba 0f02 	cmp.w	sl, #2
 801df80:	d1ee      	bne.n	801df60 <_scanf_float+0x2d4>
 801df82:	3d03      	subs	r5, #3
 801df84:	b2ed      	uxtb	r5, r5
 801df86:	1b76      	subs	r6, r6, r5
 801df88:	6823      	ldr	r3, [r4, #0]
 801df8a:	05da      	lsls	r2, r3, #23
 801df8c:	d530      	bpl.n	801dff0 <_scanf_float+0x364>
 801df8e:	055b      	lsls	r3, r3, #21
 801df90:	d511      	bpl.n	801dfb6 <_scanf_float+0x32a>
 801df92:	9b01      	ldr	r3, [sp, #4]
 801df94:	429e      	cmp	r6, r3
 801df96:	f67f aebc 	bls.w	801dd12 <_scanf_float+0x86>
 801df9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dfa2:	463a      	mov	r2, r7
 801dfa4:	4640      	mov	r0, r8
 801dfa6:	4798      	blx	r3
 801dfa8:	6923      	ldr	r3, [r4, #16]
 801dfaa:	3b01      	subs	r3, #1
 801dfac:	6123      	str	r3, [r4, #16]
 801dfae:	e7f0      	b.n	801df92 <_scanf_float+0x306>
 801dfb0:	46aa      	mov	sl, r5
 801dfb2:	46b3      	mov	fp, r6
 801dfb4:	e7de      	b.n	801df74 <_scanf_float+0x2e8>
 801dfb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dfba:	6923      	ldr	r3, [r4, #16]
 801dfbc:	2965      	cmp	r1, #101	@ 0x65
 801dfbe:	f103 33ff 	add.w	r3, r3, #4294967295
 801dfc2:	f106 35ff 	add.w	r5, r6, #4294967295
 801dfc6:	6123      	str	r3, [r4, #16]
 801dfc8:	d00c      	beq.n	801dfe4 <_scanf_float+0x358>
 801dfca:	2945      	cmp	r1, #69	@ 0x45
 801dfcc:	d00a      	beq.n	801dfe4 <_scanf_float+0x358>
 801dfce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dfd2:	463a      	mov	r2, r7
 801dfd4:	4640      	mov	r0, r8
 801dfd6:	4798      	blx	r3
 801dfd8:	6923      	ldr	r3, [r4, #16]
 801dfda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dfde:	3b01      	subs	r3, #1
 801dfe0:	1eb5      	subs	r5, r6, #2
 801dfe2:	6123      	str	r3, [r4, #16]
 801dfe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dfe8:	463a      	mov	r2, r7
 801dfea:	4640      	mov	r0, r8
 801dfec:	4798      	blx	r3
 801dfee:	462e      	mov	r6, r5
 801dff0:	6822      	ldr	r2, [r4, #0]
 801dff2:	f012 0210 	ands.w	r2, r2, #16
 801dff6:	d001      	beq.n	801dffc <_scanf_float+0x370>
 801dff8:	2000      	movs	r0, #0
 801dffa:	e68b      	b.n	801dd14 <_scanf_float+0x88>
 801dffc:	7032      	strb	r2, [r6, #0]
 801dffe:	6823      	ldr	r3, [r4, #0]
 801e000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e008:	d11c      	bne.n	801e044 <_scanf_float+0x3b8>
 801e00a:	9b02      	ldr	r3, [sp, #8]
 801e00c:	454b      	cmp	r3, r9
 801e00e:	eba3 0209 	sub.w	r2, r3, r9
 801e012:	d123      	bne.n	801e05c <_scanf_float+0x3d0>
 801e014:	9901      	ldr	r1, [sp, #4]
 801e016:	2200      	movs	r2, #0
 801e018:	4640      	mov	r0, r8
 801e01a:	f002 fda1 	bl	8020b60 <_strtod_r>
 801e01e:	9b03      	ldr	r3, [sp, #12]
 801e020:	6821      	ldr	r1, [r4, #0]
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	f011 0f02 	tst.w	r1, #2
 801e028:	ec57 6b10 	vmov	r6, r7, d0
 801e02c:	f103 0204 	add.w	r2, r3, #4
 801e030:	d01f      	beq.n	801e072 <_scanf_float+0x3e6>
 801e032:	9903      	ldr	r1, [sp, #12]
 801e034:	600a      	str	r2, [r1, #0]
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	e9c3 6700 	strd	r6, r7, [r3]
 801e03c:	68e3      	ldr	r3, [r4, #12]
 801e03e:	3301      	adds	r3, #1
 801e040:	60e3      	str	r3, [r4, #12]
 801e042:	e7d9      	b.n	801dff8 <_scanf_float+0x36c>
 801e044:	9b04      	ldr	r3, [sp, #16]
 801e046:	2b00      	cmp	r3, #0
 801e048:	d0e4      	beq.n	801e014 <_scanf_float+0x388>
 801e04a:	9905      	ldr	r1, [sp, #20]
 801e04c:	230a      	movs	r3, #10
 801e04e:	3101      	adds	r1, #1
 801e050:	4640      	mov	r0, r8
 801e052:	f7ff f975 	bl	801d340 <_strtol_r>
 801e056:	9b04      	ldr	r3, [sp, #16]
 801e058:	9e05      	ldr	r6, [sp, #20]
 801e05a:	1ac2      	subs	r2, r0, r3
 801e05c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e060:	429e      	cmp	r6, r3
 801e062:	bf28      	it	cs
 801e064:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e068:	4910      	ldr	r1, [pc, #64]	@ (801e0ac <_scanf_float+0x420>)
 801e06a:	4630      	mov	r0, r6
 801e06c:	f000 f9b6 	bl	801e3dc <siprintf>
 801e070:	e7d0      	b.n	801e014 <_scanf_float+0x388>
 801e072:	f011 0f04 	tst.w	r1, #4
 801e076:	9903      	ldr	r1, [sp, #12]
 801e078:	600a      	str	r2, [r1, #0]
 801e07a:	d1dc      	bne.n	801e036 <_scanf_float+0x3aa>
 801e07c:	681d      	ldr	r5, [r3, #0]
 801e07e:	4632      	mov	r2, r6
 801e080:	463b      	mov	r3, r7
 801e082:	4630      	mov	r0, r6
 801e084:	4639      	mov	r1, r7
 801e086:	f7e2 fd51 	bl	8000b2c <__aeabi_dcmpun>
 801e08a:	b128      	cbz	r0, 801e098 <_scanf_float+0x40c>
 801e08c:	4808      	ldr	r0, [pc, #32]	@ (801e0b0 <_scanf_float+0x424>)
 801e08e:	f000 fb43 	bl	801e718 <nanf>
 801e092:	ed85 0a00 	vstr	s0, [r5]
 801e096:	e7d1      	b.n	801e03c <_scanf_float+0x3b0>
 801e098:	4630      	mov	r0, r6
 801e09a:	4639      	mov	r1, r7
 801e09c:	f7e2 fda4 	bl	8000be8 <__aeabi_d2f>
 801e0a0:	6028      	str	r0, [r5, #0]
 801e0a2:	e7cb      	b.n	801e03c <_scanf_float+0x3b0>
 801e0a4:	f04f 0900 	mov.w	r9, #0
 801e0a8:	e629      	b.n	801dcfe <_scanf_float+0x72>
 801e0aa:	bf00      	nop
 801e0ac:	08025ffb 	.word	0x08025ffb
 801e0b0:	0802603b 	.word	0x0802603b

0801e0b4 <__sflush_r>:
 801e0b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0bc:	0716      	lsls	r6, r2, #28
 801e0be:	4605      	mov	r5, r0
 801e0c0:	460c      	mov	r4, r1
 801e0c2:	d454      	bmi.n	801e16e <__sflush_r+0xba>
 801e0c4:	684b      	ldr	r3, [r1, #4]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	dc02      	bgt.n	801e0d0 <__sflush_r+0x1c>
 801e0ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	dd48      	ble.n	801e162 <__sflush_r+0xae>
 801e0d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e0d2:	2e00      	cmp	r6, #0
 801e0d4:	d045      	beq.n	801e162 <__sflush_r+0xae>
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e0dc:	682f      	ldr	r7, [r5, #0]
 801e0de:	6a21      	ldr	r1, [r4, #32]
 801e0e0:	602b      	str	r3, [r5, #0]
 801e0e2:	d030      	beq.n	801e146 <__sflush_r+0x92>
 801e0e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e0e6:	89a3      	ldrh	r3, [r4, #12]
 801e0e8:	0759      	lsls	r1, r3, #29
 801e0ea:	d505      	bpl.n	801e0f8 <__sflush_r+0x44>
 801e0ec:	6863      	ldr	r3, [r4, #4]
 801e0ee:	1ad2      	subs	r2, r2, r3
 801e0f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e0f2:	b10b      	cbz	r3, 801e0f8 <__sflush_r+0x44>
 801e0f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e0f6:	1ad2      	subs	r2, r2, r3
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e0fc:	6a21      	ldr	r1, [r4, #32]
 801e0fe:	4628      	mov	r0, r5
 801e100:	47b0      	blx	r6
 801e102:	1c43      	adds	r3, r0, #1
 801e104:	89a3      	ldrh	r3, [r4, #12]
 801e106:	d106      	bne.n	801e116 <__sflush_r+0x62>
 801e108:	6829      	ldr	r1, [r5, #0]
 801e10a:	291d      	cmp	r1, #29
 801e10c:	d82b      	bhi.n	801e166 <__sflush_r+0xb2>
 801e10e:	4a2a      	ldr	r2, [pc, #168]	@ (801e1b8 <__sflush_r+0x104>)
 801e110:	410a      	asrs	r2, r1
 801e112:	07d6      	lsls	r6, r2, #31
 801e114:	d427      	bmi.n	801e166 <__sflush_r+0xb2>
 801e116:	2200      	movs	r2, #0
 801e118:	6062      	str	r2, [r4, #4]
 801e11a:	04d9      	lsls	r1, r3, #19
 801e11c:	6922      	ldr	r2, [r4, #16]
 801e11e:	6022      	str	r2, [r4, #0]
 801e120:	d504      	bpl.n	801e12c <__sflush_r+0x78>
 801e122:	1c42      	adds	r2, r0, #1
 801e124:	d101      	bne.n	801e12a <__sflush_r+0x76>
 801e126:	682b      	ldr	r3, [r5, #0]
 801e128:	b903      	cbnz	r3, 801e12c <__sflush_r+0x78>
 801e12a:	6560      	str	r0, [r4, #84]	@ 0x54
 801e12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e12e:	602f      	str	r7, [r5, #0]
 801e130:	b1b9      	cbz	r1, 801e162 <__sflush_r+0xae>
 801e132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e136:	4299      	cmp	r1, r3
 801e138:	d002      	beq.n	801e140 <__sflush_r+0x8c>
 801e13a:	4628      	mov	r0, r5
 801e13c:	f001 f95c 	bl	801f3f8 <_free_r>
 801e140:	2300      	movs	r3, #0
 801e142:	6363      	str	r3, [r4, #52]	@ 0x34
 801e144:	e00d      	b.n	801e162 <__sflush_r+0xae>
 801e146:	2301      	movs	r3, #1
 801e148:	4628      	mov	r0, r5
 801e14a:	47b0      	blx	r6
 801e14c:	4602      	mov	r2, r0
 801e14e:	1c50      	adds	r0, r2, #1
 801e150:	d1c9      	bne.n	801e0e6 <__sflush_r+0x32>
 801e152:	682b      	ldr	r3, [r5, #0]
 801e154:	2b00      	cmp	r3, #0
 801e156:	d0c6      	beq.n	801e0e6 <__sflush_r+0x32>
 801e158:	2b1d      	cmp	r3, #29
 801e15a:	d001      	beq.n	801e160 <__sflush_r+0xac>
 801e15c:	2b16      	cmp	r3, #22
 801e15e:	d11e      	bne.n	801e19e <__sflush_r+0xea>
 801e160:	602f      	str	r7, [r5, #0]
 801e162:	2000      	movs	r0, #0
 801e164:	e022      	b.n	801e1ac <__sflush_r+0xf8>
 801e166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e16a:	b21b      	sxth	r3, r3
 801e16c:	e01b      	b.n	801e1a6 <__sflush_r+0xf2>
 801e16e:	690f      	ldr	r7, [r1, #16]
 801e170:	2f00      	cmp	r7, #0
 801e172:	d0f6      	beq.n	801e162 <__sflush_r+0xae>
 801e174:	0793      	lsls	r3, r2, #30
 801e176:	680e      	ldr	r6, [r1, #0]
 801e178:	bf08      	it	eq
 801e17a:	694b      	ldreq	r3, [r1, #20]
 801e17c:	600f      	str	r7, [r1, #0]
 801e17e:	bf18      	it	ne
 801e180:	2300      	movne	r3, #0
 801e182:	eba6 0807 	sub.w	r8, r6, r7
 801e186:	608b      	str	r3, [r1, #8]
 801e188:	f1b8 0f00 	cmp.w	r8, #0
 801e18c:	dde9      	ble.n	801e162 <__sflush_r+0xae>
 801e18e:	6a21      	ldr	r1, [r4, #32]
 801e190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e192:	4643      	mov	r3, r8
 801e194:	463a      	mov	r2, r7
 801e196:	4628      	mov	r0, r5
 801e198:	47b0      	blx	r6
 801e19a:	2800      	cmp	r0, #0
 801e19c:	dc08      	bgt.n	801e1b0 <__sflush_r+0xfc>
 801e19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1a6:	81a3      	strh	r3, [r4, #12]
 801e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b0:	4407      	add	r7, r0
 801e1b2:	eba8 0800 	sub.w	r8, r8, r0
 801e1b6:	e7e7      	b.n	801e188 <__sflush_r+0xd4>
 801e1b8:	dfbffffe 	.word	0xdfbffffe

0801e1bc <_fflush_r>:
 801e1bc:	b538      	push	{r3, r4, r5, lr}
 801e1be:	690b      	ldr	r3, [r1, #16]
 801e1c0:	4605      	mov	r5, r0
 801e1c2:	460c      	mov	r4, r1
 801e1c4:	b913      	cbnz	r3, 801e1cc <_fflush_r+0x10>
 801e1c6:	2500      	movs	r5, #0
 801e1c8:	4628      	mov	r0, r5
 801e1ca:	bd38      	pop	{r3, r4, r5, pc}
 801e1cc:	b118      	cbz	r0, 801e1d6 <_fflush_r+0x1a>
 801e1ce:	6a03      	ldr	r3, [r0, #32]
 801e1d0:	b90b      	cbnz	r3, 801e1d6 <_fflush_r+0x1a>
 801e1d2:	f000 f8bb 	bl	801e34c <__sinit>
 801e1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d0f3      	beq.n	801e1c6 <_fflush_r+0xa>
 801e1de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e1e0:	07d0      	lsls	r0, r2, #31
 801e1e2:	d404      	bmi.n	801e1ee <_fflush_r+0x32>
 801e1e4:	0599      	lsls	r1, r3, #22
 801e1e6:	d402      	bmi.n	801e1ee <_fflush_r+0x32>
 801e1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e1ea:	f000 fa7c 	bl	801e6e6 <__retarget_lock_acquire_recursive>
 801e1ee:	4628      	mov	r0, r5
 801e1f0:	4621      	mov	r1, r4
 801e1f2:	f7ff ff5f 	bl	801e0b4 <__sflush_r>
 801e1f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e1f8:	07da      	lsls	r2, r3, #31
 801e1fa:	4605      	mov	r5, r0
 801e1fc:	d4e4      	bmi.n	801e1c8 <_fflush_r+0xc>
 801e1fe:	89a3      	ldrh	r3, [r4, #12]
 801e200:	059b      	lsls	r3, r3, #22
 801e202:	d4e1      	bmi.n	801e1c8 <_fflush_r+0xc>
 801e204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e206:	f000 fa6f 	bl	801e6e8 <__retarget_lock_release_recursive>
 801e20a:	e7dd      	b.n	801e1c8 <_fflush_r+0xc>

0801e20c <fflush>:
 801e20c:	4601      	mov	r1, r0
 801e20e:	b920      	cbnz	r0, 801e21a <fflush+0xe>
 801e210:	4a04      	ldr	r2, [pc, #16]	@ (801e224 <fflush+0x18>)
 801e212:	4905      	ldr	r1, [pc, #20]	@ (801e228 <fflush+0x1c>)
 801e214:	4805      	ldr	r0, [pc, #20]	@ (801e22c <fflush+0x20>)
 801e216:	f000 b8b1 	b.w	801e37c <_fwalk_sglue>
 801e21a:	4b05      	ldr	r3, [pc, #20]	@ (801e230 <fflush+0x24>)
 801e21c:	6818      	ldr	r0, [r3, #0]
 801e21e:	f7ff bfcd 	b.w	801e1bc <_fflush_r>
 801e222:	bf00      	nop
 801e224:	20000048 	.word	0x20000048
 801e228:	0801e1bd 	.word	0x0801e1bd
 801e22c:	20000058 	.word	0x20000058
 801e230:	20000054 	.word	0x20000054

0801e234 <std>:
 801e234:	2300      	movs	r3, #0
 801e236:	b510      	push	{r4, lr}
 801e238:	4604      	mov	r4, r0
 801e23a:	e9c0 3300 	strd	r3, r3, [r0]
 801e23e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e242:	6083      	str	r3, [r0, #8]
 801e244:	8181      	strh	r1, [r0, #12]
 801e246:	6643      	str	r3, [r0, #100]	@ 0x64
 801e248:	81c2      	strh	r2, [r0, #14]
 801e24a:	6183      	str	r3, [r0, #24]
 801e24c:	4619      	mov	r1, r3
 801e24e:	2208      	movs	r2, #8
 801e250:	305c      	adds	r0, #92	@ 0x5c
 801e252:	f000 f950 	bl	801e4f6 <memset>
 801e256:	4b0d      	ldr	r3, [pc, #52]	@ (801e28c <std+0x58>)
 801e258:	6263      	str	r3, [r4, #36]	@ 0x24
 801e25a:	4b0d      	ldr	r3, [pc, #52]	@ (801e290 <std+0x5c>)
 801e25c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e25e:	4b0d      	ldr	r3, [pc, #52]	@ (801e294 <std+0x60>)
 801e260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e262:	4b0d      	ldr	r3, [pc, #52]	@ (801e298 <std+0x64>)
 801e264:	6323      	str	r3, [r4, #48]	@ 0x30
 801e266:	4b0d      	ldr	r3, [pc, #52]	@ (801e29c <std+0x68>)
 801e268:	6224      	str	r4, [r4, #32]
 801e26a:	429c      	cmp	r4, r3
 801e26c:	d006      	beq.n	801e27c <std+0x48>
 801e26e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e272:	4294      	cmp	r4, r2
 801e274:	d002      	beq.n	801e27c <std+0x48>
 801e276:	33d0      	adds	r3, #208	@ 0xd0
 801e278:	429c      	cmp	r4, r3
 801e27a:	d105      	bne.n	801e288 <std+0x54>
 801e27c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e284:	f000 ba2e 	b.w	801e6e4 <__retarget_lock_init_recursive>
 801e288:	bd10      	pop	{r4, pc}
 801e28a:	bf00      	nop
 801e28c:	0801e41d 	.word	0x0801e41d
 801e290:	0801e43f 	.word	0x0801e43f
 801e294:	0801e477 	.word	0x0801e477
 801e298:	0801e49b 	.word	0x0801e49b
 801e29c:	2001280c 	.word	0x2001280c

0801e2a0 <stdio_exit_handler>:
 801e2a0:	4a02      	ldr	r2, [pc, #8]	@ (801e2ac <stdio_exit_handler+0xc>)
 801e2a2:	4903      	ldr	r1, [pc, #12]	@ (801e2b0 <stdio_exit_handler+0x10>)
 801e2a4:	4803      	ldr	r0, [pc, #12]	@ (801e2b4 <stdio_exit_handler+0x14>)
 801e2a6:	f000 b869 	b.w	801e37c <_fwalk_sglue>
 801e2aa:	bf00      	nop
 801e2ac:	20000048 	.word	0x20000048
 801e2b0:	0801e1bd 	.word	0x0801e1bd
 801e2b4:	20000058 	.word	0x20000058

0801e2b8 <cleanup_stdio>:
 801e2b8:	6841      	ldr	r1, [r0, #4]
 801e2ba:	4b0c      	ldr	r3, [pc, #48]	@ (801e2ec <cleanup_stdio+0x34>)
 801e2bc:	4299      	cmp	r1, r3
 801e2be:	b510      	push	{r4, lr}
 801e2c0:	4604      	mov	r4, r0
 801e2c2:	d001      	beq.n	801e2c8 <cleanup_stdio+0x10>
 801e2c4:	f7ff ff7a 	bl	801e1bc <_fflush_r>
 801e2c8:	68a1      	ldr	r1, [r4, #8]
 801e2ca:	4b09      	ldr	r3, [pc, #36]	@ (801e2f0 <cleanup_stdio+0x38>)
 801e2cc:	4299      	cmp	r1, r3
 801e2ce:	d002      	beq.n	801e2d6 <cleanup_stdio+0x1e>
 801e2d0:	4620      	mov	r0, r4
 801e2d2:	f7ff ff73 	bl	801e1bc <_fflush_r>
 801e2d6:	68e1      	ldr	r1, [r4, #12]
 801e2d8:	4b06      	ldr	r3, [pc, #24]	@ (801e2f4 <cleanup_stdio+0x3c>)
 801e2da:	4299      	cmp	r1, r3
 801e2dc:	d004      	beq.n	801e2e8 <cleanup_stdio+0x30>
 801e2de:	4620      	mov	r0, r4
 801e2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2e4:	f7ff bf6a 	b.w	801e1bc <_fflush_r>
 801e2e8:	bd10      	pop	{r4, pc}
 801e2ea:	bf00      	nop
 801e2ec:	2001280c 	.word	0x2001280c
 801e2f0:	20012874 	.word	0x20012874
 801e2f4:	200128dc 	.word	0x200128dc

0801e2f8 <global_stdio_init.part.0>:
 801e2f8:	b510      	push	{r4, lr}
 801e2fa:	4b0b      	ldr	r3, [pc, #44]	@ (801e328 <global_stdio_init.part.0+0x30>)
 801e2fc:	4c0b      	ldr	r4, [pc, #44]	@ (801e32c <global_stdio_init.part.0+0x34>)
 801e2fe:	4a0c      	ldr	r2, [pc, #48]	@ (801e330 <global_stdio_init.part.0+0x38>)
 801e300:	601a      	str	r2, [r3, #0]
 801e302:	4620      	mov	r0, r4
 801e304:	2200      	movs	r2, #0
 801e306:	2104      	movs	r1, #4
 801e308:	f7ff ff94 	bl	801e234 <std>
 801e30c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e310:	2201      	movs	r2, #1
 801e312:	2109      	movs	r1, #9
 801e314:	f7ff ff8e 	bl	801e234 <std>
 801e318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e31c:	2202      	movs	r2, #2
 801e31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e322:	2112      	movs	r1, #18
 801e324:	f7ff bf86 	b.w	801e234 <std>
 801e328:	20012944 	.word	0x20012944
 801e32c:	2001280c 	.word	0x2001280c
 801e330:	0801e2a1 	.word	0x0801e2a1

0801e334 <__sfp_lock_acquire>:
 801e334:	4801      	ldr	r0, [pc, #4]	@ (801e33c <__sfp_lock_acquire+0x8>)
 801e336:	f000 b9d6 	b.w	801e6e6 <__retarget_lock_acquire_recursive>
 801e33a:	bf00      	nop
 801e33c:	2001294d 	.word	0x2001294d

0801e340 <__sfp_lock_release>:
 801e340:	4801      	ldr	r0, [pc, #4]	@ (801e348 <__sfp_lock_release+0x8>)
 801e342:	f000 b9d1 	b.w	801e6e8 <__retarget_lock_release_recursive>
 801e346:	bf00      	nop
 801e348:	2001294d 	.word	0x2001294d

0801e34c <__sinit>:
 801e34c:	b510      	push	{r4, lr}
 801e34e:	4604      	mov	r4, r0
 801e350:	f7ff fff0 	bl	801e334 <__sfp_lock_acquire>
 801e354:	6a23      	ldr	r3, [r4, #32]
 801e356:	b11b      	cbz	r3, 801e360 <__sinit+0x14>
 801e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e35c:	f7ff bff0 	b.w	801e340 <__sfp_lock_release>
 801e360:	4b04      	ldr	r3, [pc, #16]	@ (801e374 <__sinit+0x28>)
 801e362:	6223      	str	r3, [r4, #32]
 801e364:	4b04      	ldr	r3, [pc, #16]	@ (801e378 <__sinit+0x2c>)
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d1f5      	bne.n	801e358 <__sinit+0xc>
 801e36c:	f7ff ffc4 	bl	801e2f8 <global_stdio_init.part.0>
 801e370:	e7f2      	b.n	801e358 <__sinit+0xc>
 801e372:	bf00      	nop
 801e374:	0801e2b9 	.word	0x0801e2b9
 801e378:	20012944 	.word	0x20012944

0801e37c <_fwalk_sglue>:
 801e37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e380:	4607      	mov	r7, r0
 801e382:	4688      	mov	r8, r1
 801e384:	4614      	mov	r4, r2
 801e386:	2600      	movs	r6, #0
 801e388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e38c:	f1b9 0901 	subs.w	r9, r9, #1
 801e390:	d505      	bpl.n	801e39e <_fwalk_sglue+0x22>
 801e392:	6824      	ldr	r4, [r4, #0]
 801e394:	2c00      	cmp	r4, #0
 801e396:	d1f7      	bne.n	801e388 <_fwalk_sglue+0xc>
 801e398:	4630      	mov	r0, r6
 801e39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e39e:	89ab      	ldrh	r3, [r5, #12]
 801e3a0:	2b01      	cmp	r3, #1
 801e3a2:	d907      	bls.n	801e3b4 <_fwalk_sglue+0x38>
 801e3a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e3a8:	3301      	adds	r3, #1
 801e3aa:	d003      	beq.n	801e3b4 <_fwalk_sglue+0x38>
 801e3ac:	4629      	mov	r1, r5
 801e3ae:	4638      	mov	r0, r7
 801e3b0:	47c0      	blx	r8
 801e3b2:	4306      	orrs	r6, r0
 801e3b4:	3568      	adds	r5, #104	@ 0x68
 801e3b6:	e7e9      	b.n	801e38c <_fwalk_sglue+0x10>

0801e3b8 <iprintf>:
 801e3b8:	b40f      	push	{r0, r1, r2, r3}
 801e3ba:	b507      	push	{r0, r1, r2, lr}
 801e3bc:	4906      	ldr	r1, [pc, #24]	@ (801e3d8 <iprintf+0x20>)
 801e3be:	ab04      	add	r3, sp, #16
 801e3c0:	6808      	ldr	r0, [r1, #0]
 801e3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3c6:	6881      	ldr	r1, [r0, #8]
 801e3c8:	9301      	str	r3, [sp, #4]
 801e3ca:	f002 fd51 	bl	8020e70 <_vfiprintf_r>
 801e3ce:	b003      	add	sp, #12
 801e3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e3d4:	b004      	add	sp, #16
 801e3d6:	4770      	bx	lr
 801e3d8:	20000054 	.word	0x20000054

0801e3dc <siprintf>:
 801e3dc:	b40e      	push	{r1, r2, r3}
 801e3de:	b500      	push	{lr}
 801e3e0:	b09c      	sub	sp, #112	@ 0x70
 801e3e2:	ab1d      	add	r3, sp, #116	@ 0x74
 801e3e4:	9002      	str	r0, [sp, #8]
 801e3e6:	9006      	str	r0, [sp, #24]
 801e3e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3ec:	4809      	ldr	r0, [pc, #36]	@ (801e414 <siprintf+0x38>)
 801e3ee:	9107      	str	r1, [sp, #28]
 801e3f0:	9104      	str	r1, [sp, #16]
 801e3f2:	4909      	ldr	r1, [pc, #36]	@ (801e418 <siprintf+0x3c>)
 801e3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3f8:	9105      	str	r1, [sp, #20]
 801e3fa:	6800      	ldr	r0, [r0, #0]
 801e3fc:	9301      	str	r3, [sp, #4]
 801e3fe:	a902      	add	r1, sp, #8
 801e400:	f002 fc10 	bl	8020c24 <_svfiprintf_r>
 801e404:	9b02      	ldr	r3, [sp, #8]
 801e406:	2200      	movs	r2, #0
 801e408:	701a      	strb	r2, [r3, #0]
 801e40a:	b01c      	add	sp, #112	@ 0x70
 801e40c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e410:	b003      	add	sp, #12
 801e412:	4770      	bx	lr
 801e414:	20000054 	.word	0x20000054
 801e418:	ffff0208 	.word	0xffff0208

0801e41c <__sread>:
 801e41c:	b510      	push	{r4, lr}
 801e41e:	460c      	mov	r4, r1
 801e420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e424:	f000 f910 	bl	801e648 <_read_r>
 801e428:	2800      	cmp	r0, #0
 801e42a:	bfab      	itete	ge
 801e42c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e42e:	89a3      	ldrhlt	r3, [r4, #12]
 801e430:	181b      	addge	r3, r3, r0
 801e432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e436:	bfac      	ite	ge
 801e438:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e43a:	81a3      	strhlt	r3, [r4, #12]
 801e43c:	bd10      	pop	{r4, pc}

0801e43e <__swrite>:
 801e43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e442:	461f      	mov	r7, r3
 801e444:	898b      	ldrh	r3, [r1, #12]
 801e446:	05db      	lsls	r3, r3, #23
 801e448:	4605      	mov	r5, r0
 801e44a:	460c      	mov	r4, r1
 801e44c:	4616      	mov	r6, r2
 801e44e:	d505      	bpl.n	801e45c <__swrite+0x1e>
 801e450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e454:	2302      	movs	r3, #2
 801e456:	2200      	movs	r2, #0
 801e458:	f000 f8e4 	bl	801e624 <_lseek_r>
 801e45c:	89a3      	ldrh	r3, [r4, #12]
 801e45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e466:	81a3      	strh	r3, [r4, #12]
 801e468:	4632      	mov	r2, r6
 801e46a:	463b      	mov	r3, r7
 801e46c:	4628      	mov	r0, r5
 801e46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e472:	f000 b8fb 	b.w	801e66c <_write_r>

0801e476 <__sseek>:
 801e476:	b510      	push	{r4, lr}
 801e478:	460c      	mov	r4, r1
 801e47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e47e:	f000 f8d1 	bl	801e624 <_lseek_r>
 801e482:	1c43      	adds	r3, r0, #1
 801e484:	89a3      	ldrh	r3, [r4, #12]
 801e486:	bf15      	itete	ne
 801e488:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e48a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e48e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e492:	81a3      	strheq	r3, [r4, #12]
 801e494:	bf18      	it	ne
 801e496:	81a3      	strhne	r3, [r4, #12]
 801e498:	bd10      	pop	{r4, pc}

0801e49a <__sclose>:
 801e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e49e:	f000 b85b 	b.w	801e558 <_close_r>

0801e4a2 <memcmp>:
 801e4a2:	b510      	push	{r4, lr}
 801e4a4:	3901      	subs	r1, #1
 801e4a6:	4402      	add	r2, r0
 801e4a8:	4290      	cmp	r0, r2
 801e4aa:	d101      	bne.n	801e4b0 <memcmp+0xe>
 801e4ac:	2000      	movs	r0, #0
 801e4ae:	e005      	b.n	801e4bc <memcmp+0x1a>
 801e4b0:	7803      	ldrb	r3, [r0, #0]
 801e4b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e4b6:	42a3      	cmp	r3, r4
 801e4b8:	d001      	beq.n	801e4be <memcmp+0x1c>
 801e4ba:	1b18      	subs	r0, r3, r4
 801e4bc:	bd10      	pop	{r4, pc}
 801e4be:	3001      	adds	r0, #1
 801e4c0:	e7f2      	b.n	801e4a8 <memcmp+0x6>

0801e4c2 <memmove>:
 801e4c2:	4288      	cmp	r0, r1
 801e4c4:	b510      	push	{r4, lr}
 801e4c6:	eb01 0402 	add.w	r4, r1, r2
 801e4ca:	d902      	bls.n	801e4d2 <memmove+0x10>
 801e4cc:	4284      	cmp	r4, r0
 801e4ce:	4623      	mov	r3, r4
 801e4d0:	d807      	bhi.n	801e4e2 <memmove+0x20>
 801e4d2:	1e43      	subs	r3, r0, #1
 801e4d4:	42a1      	cmp	r1, r4
 801e4d6:	d008      	beq.n	801e4ea <memmove+0x28>
 801e4d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e4e0:	e7f8      	b.n	801e4d4 <memmove+0x12>
 801e4e2:	4402      	add	r2, r0
 801e4e4:	4601      	mov	r1, r0
 801e4e6:	428a      	cmp	r2, r1
 801e4e8:	d100      	bne.n	801e4ec <memmove+0x2a>
 801e4ea:	bd10      	pop	{r4, pc}
 801e4ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e4f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e4f4:	e7f7      	b.n	801e4e6 <memmove+0x24>

0801e4f6 <memset>:
 801e4f6:	4402      	add	r2, r0
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	4293      	cmp	r3, r2
 801e4fc:	d100      	bne.n	801e500 <memset+0xa>
 801e4fe:	4770      	bx	lr
 801e500:	f803 1b01 	strb.w	r1, [r3], #1
 801e504:	e7f9      	b.n	801e4fa <memset+0x4>

0801e506 <strncmp>:
 801e506:	b510      	push	{r4, lr}
 801e508:	b16a      	cbz	r2, 801e526 <strncmp+0x20>
 801e50a:	3901      	subs	r1, #1
 801e50c:	1884      	adds	r4, r0, r2
 801e50e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e512:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e516:	429a      	cmp	r2, r3
 801e518:	d103      	bne.n	801e522 <strncmp+0x1c>
 801e51a:	42a0      	cmp	r0, r4
 801e51c:	d001      	beq.n	801e522 <strncmp+0x1c>
 801e51e:	2a00      	cmp	r2, #0
 801e520:	d1f5      	bne.n	801e50e <strncmp+0x8>
 801e522:	1ad0      	subs	r0, r2, r3
 801e524:	bd10      	pop	{r4, pc}
 801e526:	4610      	mov	r0, r2
 801e528:	e7fc      	b.n	801e524 <strncmp+0x1e>

0801e52a <strncpy>:
 801e52a:	b510      	push	{r4, lr}
 801e52c:	3901      	subs	r1, #1
 801e52e:	4603      	mov	r3, r0
 801e530:	b132      	cbz	r2, 801e540 <strncpy+0x16>
 801e532:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e536:	f803 4b01 	strb.w	r4, [r3], #1
 801e53a:	3a01      	subs	r2, #1
 801e53c:	2c00      	cmp	r4, #0
 801e53e:	d1f7      	bne.n	801e530 <strncpy+0x6>
 801e540:	441a      	add	r2, r3
 801e542:	2100      	movs	r1, #0
 801e544:	4293      	cmp	r3, r2
 801e546:	d100      	bne.n	801e54a <strncpy+0x20>
 801e548:	bd10      	pop	{r4, pc}
 801e54a:	f803 1b01 	strb.w	r1, [r3], #1
 801e54e:	e7f9      	b.n	801e544 <strncpy+0x1a>

0801e550 <_localeconv_r>:
 801e550:	4800      	ldr	r0, [pc, #0]	@ (801e554 <_localeconv_r+0x4>)
 801e552:	4770      	bx	lr
 801e554:	20000194 	.word	0x20000194

0801e558 <_close_r>:
 801e558:	b538      	push	{r3, r4, r5, lr}
 801e55a:	4d06      	ldr	r5, [pc, #24]	@ (801e574 <_close_r+0x1c>)
 801e55c:	2300      	movs	r3, #0
 801e55e:	4604      	mov	r4, r0
 801e560:	4608      	mov	r0, r1
 801e562:	602b      	str	r3, [r5, #0]
 801e564:	f7e3 fc38 	bl	8001dd8 <_close>
 801e568:	1c43      	adds	r3, r0, #1
 801e56a:	d102      	bne.n	801e572 <_close_r+0x1a>
 801e56c:	682b      	ldr	r3, [r5, #0]
 801e56e:	b103      	cbz	r3, 801e572 <_close_r+0x1a>
 801e570:	6023      	str	r3, [r4, #0]
 801e572:	bd38      	pop	{r3, r4, r5, pc}
 801e574:	20012948 	.word	0x20012948

0801e578 <_reclaim_reent>:
 801e578:	4b29      	ldr	r3, [pc, #164]	@ (801e620 <_reclaim_reent+0xa8>)
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	4283      	cmp	r3, r0
 801e57e:	b570      	push	{r4, r5, r6, lr}
 801e580:	4604      	mov	r4, r0
 801e582:	d04b      	beq.n	801e61c <_reclaim_reent+0xa4>
 801e584:	69c3      	ldr	r3, [r0, #28]
 801e586:	b1ab      	cbz	r3, 801e5b4 <_reclaim_reent+0x3c>
 801e588:	68db      	ldr	r3, [r3, #12]
 801e58a:	b16b      	cbz	r3, 801e5a8 <_reclaim_reent+0x30>
 801e58c:	2500      	movs	r5, #0
 801e58e:	69e3      	ldr	r3, [r4, #28]
 801e590:	68db      	ldr	r3, [r3, #12]
 801e592:	5959      	ldr	r1, [r3, r5]
 801e594:	2900      	cmp	r1, #0
 801e596:	d13b      	bne.n	801e610 <_reclaim_reent+0x98>
 801e598:	3504      	adds	r5, #4
 801e59a:	2d80      	cmp	r5, #128	@ 0x80
 801e59c:	d1f7      	bne.n	801e58e <_reclaim_reent+0x16>
 801e59e:	69e3      	ldr	r3, [r4, #28]
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	68d9      	ldr	r1, [r3, #12]
 801e5a4:	f000 ff28 	bl	801f3f8 <_free_r>
 801e5a8:	69e3      	ldr	r3, [r4, #28]
 801e5aa:	6819      	ldr	r1, [r3, #0]
 801e5ac:	b111      	cbz	r1, 801e5b4 <_reclaim_reent+0x3c>
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f000 ff22 	bl	801f3f8 <_free_r>
 801e5b4:	6961      	ldr	r1, [r4, #20]
 801e5b6:	b111      	cbz	r1, 801e5be <_reclaim_reent+0x46>
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f000 ff1d 	bl	801f3f8 <_free_r>
 801e5be:	69e1      	ldr	r1, [r4, #28]
 801e5c0:	b111      	cbz	r1, 801e5c8 <_reclaim_reent+0x50>
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	f000 ff18 	bl	801f3f8 <_free_r>
 801e5c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e5ca:	b111      	cbz	r1, 801e5d2 <_reclaim_reent+0x5a>
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f000 ff13 	bl	801f3f8 <_free_r>
 801e5d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5d4:	b111      	cbz	r1, 801e5dc <_reclaim_reent+0x64>
 801e5d6:	4620      	mov	r0, r4
 801e5d8:	f000 ff0e 	bl	801f3f8 <_free_r>
 801e5dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e5de:	b111      	cbz	r1, 801e5e6 <_reclaim_reent+0x6e>
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f000 ff09 	bl	801f3f8 <_free_r>
 801e5e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e5e8:	b111      	cbz	r1, 801e5f0 <_reclaim_reent+0x78>
 801e5ea:	4620      	mov	r0, r4
 801e5ec:	f000 ff04 	bl	801f3f8 <_free_r>
 801e5f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e5f2:	b111      	cbz	r1, 801e5fa <_reclaim_reent+0x82>
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f000 feff 	bl	801f3f8 <_free_r>
 801e5fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e5fc:	b111      	cbz	r1, 801e604 <_reclaim_reent+0x8c>
 801e5fe:	4620      	mov	r0, r4
 801e600:	f000 fefa 	bl	801f3f8 <_free_r>
 801e604:	6a23      	ldr	r3, [r4, #32]
 801e606:	b14b      	cbz	r3, 801e61c <_reclaim_reent+0xa4>
 801e608:	4620      	mov	r0, r4
 801e60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e60e:	4718      	bx	r3
 801e610:	680e      	ldr	r6, [r1, #0]
 801e612:	4620      	mov	r0, r4
 801e614:	f000 fef0 	bl	801f3f8 <_free_r>
 801e618:	4631      	mov	r1, r6
 801e61a:	e7bb      	b.n	801e594 <_reclaim_reent+0x1c>
 801e61c:	bd70      	pop	{r4, r5, r6, pc}
 801e61e:	bf00      	nop
 801e620:	20000054 	.word	0x20000054

0801e624 <_lseek_r>:
 801e624:	b538      	push	{r3, r4, r5, lr}
 801e626:	4d07      	ldr	r5, [pc, #28]	@ (801e644 <_lseek_r+0x20>)
 801e628:	4604      	mov	r4, r0
 801e62a:	4608      	mov	r0, r1
 801e62c:	4611      	mov	r1, r2
 801e62e:	2200      	movs	r2, #0
 801e630:	602a      	str	r2, [r5, #0]
 801e632:	461a      	mov	r2, r3
 801e634:	f7e3 fbf7 	bl	8001e26 <_lseek>
 801e638:	1c43      	adds	r3, r0, #1
 801e63a:	d102      	bne.n	801e642 <_lseek_r+0x1e>
 801e63c:	682b      	ldr	r3, [r5, #0]
 801e63e:	b103      	cbz	r3, 801e642 <_lseek_r+0x1e>
 801e640:	6023      	str	r3, [r4, #0]
 801e642:	bd38      	pop	{r3, r4, r5, pc}
 801e644:	20012948 	.word	0x20012948

0801e648 <_read_r>:
 801e648:	b538      	push	{r3, r4, r5, lr}
 801e64a:	4d07      	ldr	r5, [pc, #28]	@ (801e668 <_read_r+0x20>)
 801e64c:	4604      	mov	r4, r0
 801e64e:	4608      	mov	r0, r1
 801e650:	4611      	mov	r1, r2
 801e652:	2200      	movs	r2, #0
 801e654:	602a      	str	r2, [r5, #0]
 801e656:	461a      	mov	r2, r3
 801e658:	f7e3 fba1 	bl	8001d9e <_read>
 801e65c:	1c43      	adds	r3, r0, #1
 801e65e:	d102      	bne.n	801e666 <_read_r+0x1e>
 801e660:	682b      	ldr	r3, [r5, #0]
 801e662:	b103      	cbz	r3, 801e666 <_read_r+0x1e>
 801e664:	6023      	str	r3, [r4, #0]
 801e666:	bd38      	pop	{r3, r4, r5, pc}
 801e668:	20012948 	.word	0x20012948

0801e66c <_write_r>:
 801e66c:	b538      	push	{r3, r4, r5, lr}
 801e66e:	4d07      	ldr	r5, [pc, #28]	@ (801e68c <_write_r+0x20>)
 801e670:	4604      	mov	r4, r0
 801e672:	4608      	mov	r0, r1
 801e674:	4611      	mov	r1, r2
 801e676:	2200      	movs	r2, #0
 801e678:	602a      	str	r2, [r5, #0]
 801e67a:	461a      	mov	r2, r3
 801e67c:	f7e2 fe64 	bl	8001348 <_write>
 801e680:	1c43      	adds	r3, r0, #1
 801e682:	d102      	bne.n	801e68a <_write_r+0x1e>
 801e684:	682b      	ldr	r3, [r5, #0]
 801e686:	b103      	cbz	r3, 801e68a <_write_r+0x1e>
 801e688:	6023      	str	r3, [r4, #0]
 801e68a:	bd38      	pop	{r3, r4, r5, pc}
 801e68c:	20012948 	.word	0x20012948

0801e690 <__errno>:
 801e690:	4b01      	ldr	r3, [pc, #4]	@ (801e698 <__errno+0x8>)
 801e692:	6818      	ldr	r0, [r3, #0]
 801e694:	4770      	bx	lr
 801e696:	bf00      	nop
 801e698:	20000054 	.word	0x20000054

0801e69c <__libc_init_array>:
 801e69c:	b570      	push	{r4, r5, r6, lr}
 801e69e:	4d0d      	ldr	r5, [pc, #52]	@ (801e6d4 <__libc_init_array+0x38>)
 801e6a0:	4c0d      	ldr	r4, [pc, #52]	@ (801e6d8 <__libc_init_array+0x3c>)
 801e6a2:	1b64      	subs	r4, r4, r5
 801e6a4:	10a4      	asrs	r4, r4, #2
 801e6a6:	2600      	movs	r6, #0
 801e6a8:	42a6      	cmp	r6, r4
 801e6aa:	d109      	bne.n	801e6c0 <__libc_init_array+0x24>
 801e6ac:	4d0b      	ldr	r5, [pc, #44]	@ (801e6dc <__libc_init_array+0x40>)
 801e6ae:	4c0c      	ldr	r4, [pc, #48]	@ (801e6e0 <__libc_init_array+0x44>)
 801e6b0:	f003 fa26 	bl	8021b00 <_init>
 801e6b4:	1b64      	subs	r4, r4, r5
 801e6b6:	10a4      	asrs	r4, r4, #2
 801e6b8:	2600      	movs	r6, #0
 801e6ba:	42a6      	cmp	r6, r4
 801e6bc:	d105      	bne.n	801e6ca <__libc_init_array+0x2e>
 801e6be:	bd70      	pop	{r4, r5, r6, pc}
 801e6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801e6c4:	4798      	blx	r3
 801e6c6:	3601      	adds	r6, #1
 801e6c8:	e7ee      	b.n	801e6a8 <__libc_init_array+0xc>
 801e6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801e6ce:	4798      	blx	r3
 801e6d0:	3601      	adds	r6, #1
 801e6d2:	e7f2      	b.n	801e6ba <__libc_init_array+0x1e>
 801e6d4:	080262e4 	.word	0x080262e4
 801e6d8:	080262e4 	.word	0x080262e4
 801e6dc:	080262e4 	.word	0x080262e4
 801e6e0:	080262e8 	.word	0x080262e8

0801e6e4 <__retarget_lock_init_recursive>:
 801e6e4:	4770      	bx	lr

0801e6e6 <__retarget_lock_acquire_recursive>:
 801e6e6:	4770      	bx	lr

0801e6e8 <__retarget_lock_release_recursive>:
 801e6e8:	4770      	bx	lr

0801e6ea <strcpy>:
 801e6ea:	4603      	mov	r3, r0
 801e6ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e6f0:	f803 2b01 	strb.w	r2, [r3], #1
 801e6f4:	2a00      	cmp	r2, #0
 801e6f6:	d1f9      	bne.n	801e6ec <strcpy+0x2>
 801e6f8:	4770      	bx	lr

0801e6fa <memcpy>:
 801e6fa:	440a      	add	r2, r1
 801e6fc:	4291      	cmp	r1, r2
 801e6fe:	f100 33ff 	add.w	r3, r0, #4294967295
 801e702:	d100      	bne.n	801e706 <memcpy+0xc>
 801e704:	4770      	bx	lr
 801e706:	b510      	push	{r4, lr}
 801e708:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e70c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e710:	4291      	cmp	r1, r2
 801e712:	d1f9      	bne.n	801e708 <memcpy+0xe>
 801e714:	bd10      	pop	{r4, pc}
	...

0801e718 <nanf>:
 801e718:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e720 <nanf+0x8>
 801e71c:	4770      	bx	lr
 801e71e:	bf00      	nop
 801e720:	7fc00000 	.word	0x7fc00000

0801e724 <__assert_func>:
 801e724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e726:	4614      	mov	r4, r2
 801e728:	461a      	mov	r2, r3
 801e72a:	4b09      	ldr	r3, [pc, #36]	@ (801e750 <__assert_func+0x2c>)
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	4605      	mov	r5, r0
 801e730:	68d8      	ldr	r0, [r3, #12]
 801e732:	b954      	cbnz	r4, 801e74a <__assert_func+0x26>
 801e734:	4b07      	ldr	r3, [pc, #28]	@ (801e754 <__assert_func+0x30>)
 801e736:	461c      	mov	r4, r3
 801e738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e73c:	9100      	str	r1, [sp, #0]
 801e73e:	462b      	mov	r3, r5
 801e740:	4905      	ldr	r1, [pc, #20]	@ (801e758 <__assert_func+0x34>)
 801e742:	f002 fcad 	bl	80210a0 <fiprintf>
 801e746:	f002 fd6b 	bl	8021220 <abort>
 801e74a:	4b04      	ldr	r3, [pc, #16]	@ (801e75c <__assert_func+0x38>)
 801e74c:	e7f4      	b.n	801e738 <__assert_func+0x14>
 801e74e:	bf00      	nop
 801e750:	20000054 	.word	0x20000054
 801e754:	0802603b 	.word	0x0802603b
 801e758:	0802600d 	.word	0x0802600d
 801e75c:	08026000 	.word	0x08026000

0801e760 <quorem>:
 801e760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e764:	6903      	ldr	r3, [r0, #16]
 801e766:	690c      	ldr	r4, [r1, #16]
 801e768:	42a3      	cmp	r3, r4
 801e76a:	4607      	mov	r7, r0
 801e76c:	db7e      	blt.n	801e86c <quorem+0x10c>
 801e76e:	3c01      	subs	r4, #1
 801e770:	f101 0814 	add.w	r8, r1, #20
 801e774:	00a3      	lsls	r3, r4, #2
 801e776:	f100 0514 	add.w	r5, r0, #20
 801e77a:	9300      	str	r3, [sp, #0]
 801e77c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e780:	9301      	str	r3, [sp, #4]
 801e782:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e78a:	3301      	adds	r3, #1
 801e78c:	429a      	cmp	r2, r3
 801e78e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e792:	fbb2 f6f3 	udiv	r6, r2, r3
 801e796:	d32e      	bcc.n	801e7f6 <quorem+0x96>
 801e798:	f04f 0a00 	mov.w	sl, #0
 801e79c:	46c4      	mov	ip, r8
 801e79e:	46ae      	mov	lr, r5
 801e7a0:	46d3      	mov	fp, sl
 801e7a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e7a6:	b298      	uxth	r0, r3
 801e7a8:	fb06 a000 	mla	r0, r6, r0, sl
 801e7ac:	0c02      	lsrs	r2, r0, #16
 801e7ae:	0c1b      	lsrs	r3, r3, #16
 801e7b0:	fb06 2303 	mla	r3, r6, r3, r2
 801e7b4:	f8de 2000 	ldr.w	r2, [lr]
 801e7b8:	b280      	uxth	r0, r0
 801e7ba:	b292      	uxth	r2, r2
 801e7bc:	1a12      	subs	r2, r2, r0
 801e7be:	445a      	add	r2, fp
 801e7c0:	f8de 0000 	ldr.w	r0, [lr]
 801e7c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e7c8:	b29b      	uxth	r3, r3
 801e7ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e7ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e7d2:	b292      	uxth	r2, r2
 801e7d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e7d8:	45e1      	cmp	r9, ip
 801e7da:	f84e 2b04 	str.w	r2, [lr], #4
 801e7de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e7e2:	d2de      	bcs.n	801e7a2 <quorem+0x42>
 801e7e4:	9b00      	ldr	r3, [sp, #0]
 801e7e6:	58eb      	ldr	r3, [r5, r3]
 801e7e8:	b92b      	cbnz	r3, 801e7f6 <quorem+0x96>
 801e7ea:	9b01      	ldr	r3, [sp, #4]
 801e7ec:	3b04      	subs	r3, #4
 801e7ee:	429d      	cmp	r5, r3
 801e7f0:	461a      	mov	r2, r3
 801e7f2:	d32f      	bcc.n	801e854 <quorem+0xf4>
 801e7f4:	613c      	str	r4, [r7, #16]
 801e7f6:	4638      	mov	r0, r7
 801e7f8:	f001 f9c2 	bl	801fb80 <__mcmp>
 801e7fc:	2800      	cmp	r0, #0
 801e7fe:	db25      	blt.n	801e84c <quorem+0xec>
 801e800:	4629      	mov	r1, r5
 801e802:	2000      	movs	r0, #0
 801e804:	f858 2b04 	ldr.w	r2, [r8], #4
 801e808:	f8d1 c000 	ldr.w	ip, [r1]
 801e80c:	fa1f fe82 	uxth.w	lr, r2
 801e810:	fa1f f38c 	uxth.w	r3, ip
 801e814:	eba3 030e 	sub.w	r3, r3, lr
 801e818:	4403      	add	r3, r0
 801e81a:	0c12      	lsrs	r2, r2, #16
 801e81c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e820:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e824:	b29b      	uxth	r3, r3
 801e826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e82a:	45c1      	cmp	r9, r8
 801e82c:	f841 3b04 	str.w	r3, [r1], #4
 801e830:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e834:	d2e6      	bcs.n	801e804 <quorem+0xa4>
 801e836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e83a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e83e:	b922      	cbnz	r2, 801e84a <quorem+0xea>
 801e840:	3b04      	subs	r3, #4
 801e842:	429d      	cmp	r5, r3
 801e844:	461a      	mov	r2, r3
 801e846:	d30b      	bcc.n	801e860 <quorem+0x100>
 801e848:	613c      	str	r4, [r7, #16]
 801e84a:	3601      	adds	r6, #1
 801e84c:	4630      	mov	r0, r6
 801e84e:	b003      	add	sp, #12
 801e850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e854:	6812      	ldr	r2, [r2, #0]
 801e856:	3b04      	subs	r3, #4
 801e858:	2a00      	cmp	r2, #0
 801e85a:	d1cb      	bne.n	801e7f4 <quorem+0x94>
 801e85c:	3c01      	subs	r4, #1
 801e85e:	e7c6      	b.n	801e7ee <quorem+0x8e>
 801e860:	6812      	ldr	r2, [r2, #0]
 801e862:	3b04      	subs	r3, #4
 801e864:	2a00      	cmp	r2, #0
 801e866:	d1ef      	bne.n	801e848 <quorem+0xe8>
 801e868:	3c01      	subs	r4, #1
 801e86a:	e7ea      	b.n	801e842 <quorem+0xe2>
 801e86c:	2000      	movs	r0, #0
 801e86e:	e7ee      	b.n	801e84e <quorem+0xee>

0801e870 <_dtoa_r>:
 801e870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e874:	69c7      	ldr	r7, [r0, #28]
 801e876:	b099      	sub	sp, #100	@ 0x64
 801e878:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e87c:	ec55 4b10 	vmov	r4, r5, d0
 801e880:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e882:	9109      	str	r1, [sp, #36]	@ 0x24
 801e884:	4683      	mov	fp, r0
 801e886:	920e      	str	r2, [sp, #56]	@ 0x38
 801e888:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e88a:	b97f      	cbnz	r7, 801e8ac <_dtoa_r+0x3c>
 801e88c:	2010      	movs	r0, #16
 801e88e:	f000 fdfd 	bl	801f48c <malloc>
 801e892:	4602      	mov	r2, r0
 801e894:	f8cb 001c 	str.w	r0, [fp, #28]
 801e898:	b920      	cbnz	r0, 801e8a4 <_dtoa_r+0x34>
 801e89a:	4ba7      	ldr	r3, [pc, #668]	@ (801eb38 <_dtoa_r+0x2c8>)
 801e89c:	21ef      	movs	r1, #239	@ 0xef
 801e89e:	48a7      	ldr	r0, [pc, #668]	@ (801eb3c <_dtoa_r+0x2cc>)
 801e8a0:	f7ff ff40 	bl	801e724 <__assert_func>
 801e8a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e8a8:	6007      	str	r7, [r0, #0]
 801e8aa:	60c7      	str	r7, [r0, #12]
 801e8ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e8b0:	6819      	ldr	r1, [r3, #0]
 801e8b2:	b159      	cbz	r1, 801e8cc <_dtoa_r+0x5c>
 801e8b4:	685a      	ldr	r2, [r3, #4]
 801e8b6:	604a      	str	r2, [r1, #4]
 801e8b8:	2301      	movs	r3, #1
 801e8ba:	4093      	lsls	r3, r2
 801e8bc:	608b      	str	r3, [r1, #8]
 801e8be:	4658      	mov	r0, fp
 801e8c0:	f000 feda 	bl	801f678 <_Bfree>
 801e8c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e8c8:	2200      	movs	r2, #0
 801e8ca:	601a      	str	r2, [r3, #0]
 801e8cc:	1e2b      	subs	r3, r5, #0
 801e8ce:	bfb9      	ittee	lt
 801e8d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e8d4:	9303      	strlt	r3, [sp, #12]
 801e8d6:	2300      	movge	r3, #0
 801e8d8:	6033      	strge	r3, [r6, #0]
 801e8da:	9f03      	ldr	r7, [sp, #12]
 801e8dc:	4b98      	ldr	r3, [pc, #608]	@ (801eb40 <_dtoa_r+0x2d0>)
 801e8de:	bfbc      	itt	lt
 801e8e0:	2201      	movlt	r2, #1
 801e8e2:	6032      	strlt	r2, [r6, #0]
 801e8e4:	43bb      	bics	r3, r7
 801e8e6:	d112      	bne.n	801e90e <_dtoa_r+0x9e>
 801e8e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e8ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e8ee:	6013      	str	r3, [r2, #0]
 801e8f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e8f4:	4323      	orrs	r3, r4
 801e8f6:	f000 854d 	beq.w	801f394 <_dtoa_r+0xb24>
 801e8fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e8fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801eb54 <_dtoa_r+0x2e4>
 801e900:	2b00      	cmp	r3, #0
 801e902:	f000 854f 	beq.w	801f3a4 <_dtoa_r+0xb34>
 801e906:	f10a 0303 	add.w	r3, sl, #3
 801e90a:	f000 bd49 	b.w	801f3a0 <_dtoa_r+0xb30>
 801e90e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e912:	2200      	movs	r2, #0
 801e914:	ec51 0b17 	vmov	r0, r1, d7
 801e918:	2300      	movs	r3, #0
 801e91a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e91e:	f7e2 f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 801e922:	4680      	mov	r8, r0
 801e924:	b158      	cbz	r0, 801e93e <_dtoa_r+0xce>
 801e926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e928:	2301      	movs	r3, #1
 801e92a:	6013      	str	r3, [r2, #0]
 801e92c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e92e:	b113      	cbz	r3, 801e936 <_dtoa_r+0xc6>
 801e930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e932:	4b84      	ldr	r3, [pc, #528]	@ (801eb44 <_dtoa_r+0x2d4>)
 801e934:	6013      	str	r3, [r2, #0]
 801e936:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801eb58 <_dtoa_r+0x2e8>
 801e93a:	f000 bd33 	b.w	801f3a4 <_dtoa_r+0xb34>
 801e93e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e942:	aa16      	add	r2, sp, #88	@ 0x58
 801e944:	a917      	add	r1, sp, #92	@ 0x5c
 801e946:	4658      	mov	r0, fp
 801e948:	f001 fa3a 	bl	801fdc0 <__d2b>
 801e94c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e950:	4681      	mov	r9, r0
 801e952:	2e00      	cmp	r6, #0
 801e954:	d077      	beq.n	801ea46 <_dtoa_r+0x1d6>
 801e956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e958:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e95c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e964:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e968:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e96c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e970:	4619      	mov	r1, r3
 801e972:	2200      	movs	r2, #0
 801e974:	4b74      	ldr	r3, [pc, #464]	@ (801eb48 <_dtoa_r+0x2d8>)
 801e976:	f7e1 fc87 	bl	8000288 <__aeabi_dsub>
 801e97a:	a369      	add	r3, pc, #420	@ (adr r3, 801eb20 <_dtoa_r+0x2b0>)
 801e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e980:	f7e1 fe3a 	bl	80005f8 <__aeabi_dmul>
 801e984:	a368      	add	r3, pc, #416	@ (adr r3, 801eb28 <_dtoa_r+0x2b8>)
 801e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e98a:	f7e1 fc7f 	bl	800028c <__adddf3>
 801e98e:	4604      	mov	r4, r0
 801e990:	4630      	mov	r0, r6
 801e992:	460d      	mov	r5, r1
 801e994:	f7e1 fdc6 	bl	8000524 <__aeabi_i2d>
 801e998:	a365      	add	r3, pc, #404	@ (adr r3, 801eb30 <_dtoa_r+0x2c0>)
 801e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e99e:	f7e1 fe2b 	bl	80005f8 <__aeabi_dmul>
 801e9a2:	4602      	mov	r2, r0
 801e9a4:	460b      	mov	r3, r1
 801e9a6:	4620      	mov	r0, r4
 801e9a8:	4629      	mov	r1, r5
 801e9aa:	f7e1 fc6f 	bl	800028c <__adddf3>
 801e9ae:	4604      	mov	r4, r0
 801e9b0:	460d      	mov	r5, r1
 801e9b2:	f7e2 f8d1 	bl	8000b58 <__aeabi_d2iz>
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	4607      	mov	r7, r0
 801e9ba:	2300      	movs	r3, #0
 801e9bc:	4620      	mov	r0, r4
 801e9be:	4629      	mov	r1, r5
 801e9c0:	f7e2 f88c 	bl	8000adc <__aeabi_dcmplt>
 801e9c4:	b140      	cbz	r0, 801e9d8 <_dtoa_r+0x168>
 801e9c6:	4638      	mov	r0, r7
 801e9c8:	f7e1 fdac 	bl	8000524 <__aeabi_i2d>
 801e9cc:	4622      	mov	r2, r4
 801e9ce:	462b      	mov	r3, r5
 801e9d0:	f7e2 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 801e9d4:	b900      	cbnz	r0, 801e9d8 <_dtoa_r+0x168>
 801e9d6:	3f01      	subs	r7, #1
 801e9d8:	2f16      	cmp	r7, #22
 801e9da:	d851      	bhi.n	801ea80 <_dtoa_r+0x210>
 801e9dc:	4b5b      	ldr	r3, [pc, #364]	@ (801eb4c <_dtoa_r+0x2dc>)
 801e9de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e9ea:	f7e2 f877 	bl	8000adc <__aeabi_dcmplt>
 801e9ee:	2800      	cmp	r0, #0
 801e9f0:	d048      	beq.n	801ea84 <_dtoa_r+0x214>
 801e9f2:	3f01      	subs	r7, #1
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	9312      	str	r3, [sp, #72]	@ 0x48
 801e9f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e9fa:	1b9b      	subs	r3, r3, r6
 801e9fc:	1e5a      	subs	r2, r3, #1
 801e9fe:	bf44      	itt	mi
 801ea00:	f1c3 0801 	rsbmi	r8, r3, #1
 801ea04:	2300      	movmi	r3, #0
 801ea06:	9208      	str	r2, [sp, #32]
 801ea08:	bf54      	ite	pl
 801ea0a:	f04f 0800 	movpl.w	r8, #0
 801ea0e:	9308      	strmi	r3, [sp, #32]
 801ea10:	2f00      	cmp	r7, #0
 801ea12:	db39      	blt.n	801ea88 <_dtoa_r+0x218>
 801ea14:	9b08      	ldr	r3, [sp, #32]
 801ea16:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ea18:	443b      	add	r3, r7
 801ea1a:	9308      	str	r3, [sp, #32]
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea22:	2b09      	cmp	r3, #9
 801ea24:	d864      	bhi.n	801eaf0 <_dtoa_r+0x280>
 801ea26:	2b05      	cmp	r3, #5
 801ea28:	bfc4      	itt	gt
 801ea2a:	3b04      	subgt	r3, #4
 801ea2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ea2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea30:	f1a3 0302 	sub.w	r3, r3, #2
 801ea34:	bfcc      	ite	gt
 801ea36:	2400      	movgt	r4, #0
 801ea38:	2401      	movle	r4, #1
 801ea3a:	2b03      	cmp	r3, #3
 801ea3c:	d863      	bhi.n	801eb06 <_dtoa_r+0x296>
 801ea3e:	e8df f003 	tbb	[pc, r3]
 801ea42:	372a      	.short	0x372a
 801ea44:	5535      	.short	0x5535
 801ea46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ea4a:	441e      	add	r6, r3
 801ea4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ea50:	2b20      	cmp	r3, #32
 801ea52:	bfc1      	itttt	gt
 801ea54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ea58:	409f      	lslgt	r7, r3
 801ea5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ea5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ea62:	bfd6      	itet	le
 801ea64:	f1c3 0320 	rsble	r3, r3, #32
 801ea68:	ea47 0003 	orrgt.w	r0, r7, r3
 801ea6c:	fa04 f003 	lslle.w	r0, r4, r3
 801ea70:	f7e1 fd48 	bl	8000504 <__aeabi_ui2d>
 801ea74:	2201      	movs	r2, #1
 801ea76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ea7a:	3e01      	subs	r6, #1
 801ea7c:	9214      	str	r2, [sp, #80]	@ 0x50
 801ea7e:	e777      	b.n	801e970 <_dtoa_r+0x100>
 801ea80:	2301      	movs	r3, #1
 801ea82:	e7b8      	b.n	801e9f6 <_dtoa_r+0x186>
 801ea84:	9012      	str	r0, [sp, #72]	@ 0x48
 801ea86:	e7b7      	b.n	801e9f8 <_dtoa_r+0x188>
 801ea88:	427b      	negs	r3, r7
 801ea8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea8c:	2300      	movs	r3, #0
 801ea8e:	eba8 0807 	sub.w	r8, r8, r7
 801ea92:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ea94:	e7c4      	b.n	801ea20 <_dtoa_r+0x1b0>
 801ea96:	2300      	movs	r3, #0
 801ea98:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	dc35      	bgt.n	801eb0c <_dtoa_r+0x29c>
 801eaa0:	2301      	movs	r3, #1
 801eaa2:	9300      	str	r3, [sp, #0]
 801eaa4:	9307      	str	r3, [sp, #28]
 801eaa6:	461a      	mov	r2, r3
 801eaa8:	920e      	str	r2, [sp, #56]	@ 0x38
 801eaaa:	e00b      	b.n	801eac4 <_dtoa_r+0x254>
 801eaac:	2301      	movs	r3, #1
 801eaae:	e7f3      	b.n	801ea98 <_dtoa_r+0x228>
 801eab0:	2300      	movs	r3, #0
 801eab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eab6:	18fb      	adds	r3, r7, r3
 801eab8:	9300      	str	r3, [sp, #0]
 801eaba:	3301      	adds	r3, #1
 801eabc:	2b01      	cmp	r3, #1
 801eabe:	9307      	str	r3, [sp, #28]
 801eac0:	bfb8      	it	lt
 801eac2:	2301      	movlt	r3, #1
 801eac4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801eac8:	2100      	movs	r1, #0
 801eaca:	2204      	movs	r2, #4
 801eacc:	f102 0514 	add.w	r5, r2, #20
 801ead0:	429d      	cmp	r5, r3
 801ead2:	d91f      	bls.n	801eb14 <_dtoa_r+0x2a4>
 801ead4:	6041      	str	r1, [r0, #4]
 801ead6:	4658      	mov	r0, fp
 801ead8:	f000 fd8e 	bl	801f5f8 <_Balloc>
 801eadc:	4682      	mov	sl, r0
 801eade:	2800      	cmp	r0, #0
 801eae0:	d13c      	bne.n	801eb5c <_dtoa_r+0x2ec>
 801eae2:	4b1b      	ldr	r3, [pc, #108]	@ (801eb50 <_dtoa_r+0x2e0>)
 801eae4:	4602      	mov	r2, r0
 801eae6:	f240 11af 	movw	r1, #431	@ 0x1af
 801eaea:	e6d8      	b.n	801e89e <_dtoa_r+0x2e>
 801eaec:	2301      	movs	r3, #1
 801eaee:	e7e0      	b.n	801eab2 <_dtoa_r+0x242>
 801eaf0:	2401      	movs	r4, #1
 801eaf2:	2300      	movs	r3, #0
 801eaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801eaf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801eaf8:	f04f 33ff 	mov.w	r3, #4294967295
 801eafc:	9300      	str	r3, [sp, #0]
 801eafe:	9307      	str	r3, [sp, #28]
 801eb00:	2200      	movs	r2, #0
 801eb02:	2312      	movs	r3, #18
 801eb04:	e7d0      	b.n	801eaa8 <_dtoa_r+0x238>
 801eb06:	2301      	movs	r3, #1
 801eb08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb0a:	e7f5      	b.n	801eaf8 <_dtoa_r+0x288>
 801eb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb0e:	9300      	str	r3, [sp, #0]
 801eb10:	9307      	str	r3, [sp, #28]
 801eb12:	e7d7      	b.n	801eac4 <_dtoa_r+0x254>
 801eb14:	3101      	adds	r1, #1
 801eb16:	0052      	lsls	r2, r2, #1
 801eb18:	e7d8      	b.n	801eacc <_dtoa_r+0x25c>
 801eb1a:	bf00      	nop
 801eb1c:	f3af 8000 	nop.w
 801eb20:	636f4361 	.word	0x636f4361
 801eb24:	3fd287a7 	.word	0x3fd287a7
 801eb28:	8b60c8b3 	.word	0x8b60c8b3
 801eb2c:	3fc68a28 	.word	0x3fc68a28
 801eb30:	509f79fb 	.word	0x509f79fb
 801eb34:	3fd34413 	.word	0x3fd34413
 801eb38:	08025e32 	.word	0x08025e32
 801eb3c:	08026049 	.word	0x08026049
 801eb40:	7ff00000 	.word	0x7ff00000
 801eb44:	08025fd8 	.word	0x08025fd8
 801eb48:	3ff80000 	.word	0x3ff80000
 801eb4c:	08026140 	.word	0x08026140
 801eb50:	080260a1 	.word	0x080260a1
 801eb54:	08026045 	.word	0x08026045
 801eb58:	08025fd7 	.word	0x08025fd7
 801eb5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801eb60:	6018      	str	r0, [r3, #0]
 801eb62:	9b07      	ldr	r3, [sp, #28]
 801eb64:	2b0e      	cmp	r3, #14
 801eb66:	f200 80a4 	bhi.w	801ecb2 <_dtoa_r+0x442>
 801eb6a:	2c00      	cmp	r4, #0
 801eb6c:	f000 80a1 	beq.w	801ecb2 <_dtoa_r+0x442>
 801eb70:	2f00      	cmp	r7, #0
 801eb72:	dd33      	ble.n	801ebdc <_dtoa_r+0x36c>
 801eb74:	4bad      	ldr	r3, [pc, #692]	@ (801ee2c <_dtoa_r+0x5bc>)
 801eb76:	f007 020f 	and.w	r2, r7, #15
 801eb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eb7e:	ed93 7b00 	vldr	d7, [r3]
 801eb82:	05f8      	lsls	r0, r7, #23
 801eb84:	ed8d 7b04 	vstr	d7, [sp, #16]
 801eb88:	ea4f 1427 	mov.w	r4, r7, asr #4
 801eb8c:	d516      	bpl.n	801ebbc <_dtoa_r+0x34c>
 801eb8e:	4ba8      	ldr	r3, [pc, #672]	@ (801ee30 <_dtoa_r+0x5c0>)
 801eb90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eb94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801eb98:	f7e1 fe58 	bl	800084c <__aeabi_ddiv>
 801eb9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eba0:	f004 040f 	and.w	r4, r4, #15
 801eba4:	2603      	movs	r6, #3
 801eba6:	4da2      	ldr	r5, [pc, #648]	@ (801ee30 <_dtoa_r+0x5c0>)
 801eba8:	b954      	cbnz	r4, 801ebc0 <_dtoa_r+0x350>
 801ebaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ebae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebb2:	f7e1 fe4b 	bl	800084c <__aeabi_ddiv>
 801ebb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebba:	e028      	b.n	801ec0e <_dtoa_r+0x39e>
 801ebbc:	2602      	movs	r6, #2
 801ebbe:	e7f2      	b.n	801eba6 <_dtoa_r+0x336>
 801ebc0:	07e1      	lsls	r1, r4, #31
 801ebc2:	d508      	bpl.n	801ebd6 <_dtoa_r+0x366>
 801ebc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ebc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ebcc:	f7e1 fd14 	bl	80005f8 <__aeabi_dmul>
 801ebd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ebd4:	3601      	adds	r6, #1
 801ebd6:	1064      	asrs	r4, r4, #1
 801ebd8:	3508      	adds	r5, #8
 801ebda:	e7e5      	b.n	801eba8 <_dtoa_r+0x338>
 801ebdc:	f000 80d2 	beq.w	801ed84 <_dtoa_r+0x514>
 801ebe0:	427c      	negs	r4, r7
 801ebe2:	4b92      	ldr	r3, [pc, #584]	@ (801ee2c <_dtoa_r+0x5bc>)
 801ebe4:	4d92      	ldr	r5, [pc, #584]	@ (801ee30 <_dtoa_r+0x5c0>)
 801ebe6:	f004 020f 	and.w	r2, r4, #15
 801ebea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ebf6:	f7e1 fcff 	bl	80005f8 <__aeabi_dmul>
 801ebfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ebfe:	1124      	asrs	r4, r4, #4
 801ec00:	2300      	movs	r3, #0
 801ec02:	2602      	movs	r6, #2
 801ec04:	2c00      	cmp	r4, #0
 801ec06:	f040 80b2 	bne.w	801ed6e <_dtoa_r+0x4fe>
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d1d3      	bne.n	801ebb6 <_dtoa_r+0x346>
 801ec0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ec10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	f000 80b7 	beq.w	801ed88 <_dtoa_r+0x518>
 801ec1a:	4b86      	ldr	r3, [pc, #536]	@ (801ee34 <_dtoa_r+0x5c4>)
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	4620      	mov	r0, r4
 801ec20:	4629      	mov	r1, r5
 801ec22:	f7e1 ff5b 	bl	8000adc <__aeabi_dcmplt>
 801ec26:	2800      	cmp	r0, #0
 801ec28:	f000 80ae 	beq.w	801ed88 <_dtoa_r+0x518>
 801ec2c:	9b07      	ldr	r3, [sp, #28]
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	f000 80aa 	beq.w	801ed88 <_dtoa_r+0x518>
 801ec34:	9b00      	ldr	r3, [sp, #0]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	dd37      	ble.n	801ecaa <_dtoa_r+0x43a>
 801ec3a:	1e7b      	subs	r3, r7, #1
 801ec3c:	9304      	str	r3, [sp, #16]
 801ec3e:	4620      	mov	r0, r4
 801ec40:	4b7d      	ldr	r3, [pc, #500]	@ (801ee38 <_dtoa_r+0x5c8>)
 801ec42:	2200      	movs	r2, #0
 801ec44:	4629      	mov	r1, r5
 801ec46:	f7e1 fcd7 	bl	80005f8 <__aeabi_dmul>
 801ec4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec4e:	9c00      	ldr	r4, [sp, #0]
 801ec50:	3601      	adds	r6, #1
 801ec52:	4630      	mov	r0, r6
 801ec54:	f7e1 fc66 	bl	8000524 <__aeabi_i2d>
 801ec58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ec5c:	f7e1 fccc 	bl	80005f8 <__aeabi_dmul>
 801ec60:	4b76      	ldr	r3, [pc, #472]	@ (801ee3c <_dtoa_r+0x5cc>)
 801ec62:	2200      	movs	r2, #0
 801ec64:	f7e1 fb12 	bl	800028c <__adddf3>
 801ec68:	4605      	mov	r5, r0
 801ec6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ec6e:	2c00      	cmp	r4, #0
 801ec70:	f040 808d 	bne.w	801ed8e <_dtoa_r+0x51e>
 801ec74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec78:	4b71      	ldr	r3, [pc, #452]	@ (801ee40 <_dtoa_r+0x5d0>)
 801ec7a:	2200      	movs	r2, #0
 801ec7c:	f7e1 fb04 	bl	8000288 <__aeabi_dsub>
 801ec80:	4602      	mov	r2, r0
 801ec82:	460b      	mov	r3, r1
 801ec84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ec88:	462a      	mov	r2, r5
 801ec8a:	4633      	mov	r3, r6
 801ec8c:	f7e1 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 801ec90:	2800      	cmp	r0, #0
 801ec92:	f040 828b 	bne.w	801f1ac <_dtoa_r+0x93c>
 801ec96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec9a:	462a      	mov	r2, r5
 801ec9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801eca0:	f7e1 ff1c 	bl	8000adc <__aeabi_dcmplt>
 801eca4:	2800      	cmp	r0, #0
 801eca6:	f040 8128 	bne.w	801eefa <_dtoa_r+0x68a>
 801ecaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801ecae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ecb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	f2c0 815a 	blt.w	801ef6e <_dtoa_r+0x6fe>
 801ecba:	2f0e      	cmp	r7, #14
 801ecbc:	f300 8157 	bgt.w	801ef6e <_dtoa_r+0x6fe>
 801ecc0:	4b5a      	ldr	r3, [pc, #360]	@ (801ee2c <_dtoa_r+0x5bc>)
 801ecc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ecc6:	ed93 7b00 	vldr	d7, [r3]
 801ecca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	ed8d 7b00 	vstr	d7, [sp]
 801ecd2:	da03      	bge.n	801ecdc <_dtoa_r+0x46c>
 801ecd4:	9b07      	ldr	r3, [sp, #28]
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	f340 8101 	ble.w	801eede <_dtoa_r+0x66e>
 801ecdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ece0:	4656      	mov	r6, sl
 801ece2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ece6:	4620      	mov	r0, r4
 801ece8:	4629      	mov	r1, r5
 801ecea:	f7e1 fdaf 	bl	800084c <__aeabi_ddiv>
 801ecee:	f7e1 ff33 	bl	8000b58 <__aeabi_d2iz>
 801ecf2:	4680      	mov	r8, r0
 801ecf4:	f7e1 fc16 	bl	8000524 <__aeabi_i2d>
 801ecf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ecfc:	f7e1 fc7c 	bl	80005f8 <__aeabi_dmul>
 801ed00:	4602      	mov	r2, r0
 801ed02:	460b      	mov	r3, r1
 801ed04:	4620      	mov	r0, r4
 801ed06:	4629      	mov	r1, r5
 801ed08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ed0c:	f7e1 fabc 	bl	8000288 <__aeabi_dsub>
 801ed10:	f806 4b01 	strb.w	r4, [r6], #1
 801ed14:	9d07      	ldr	r5, [sp, #28]
 801ed16:	eba6 040a 	sub.w	r4, r6, sl
 801ed1a:	42a5      	cmp	r5, r4
 801ed1c:	4602      	mov	r2, r0
 801ed1e:	460b      	mov	r3, r1
 801ed20:	f040 8117 	bne.w	801ef52 <_dtoa_r+0x6e2>
 801ed24:	f7e1 fab2 	bl	800028c <__adddf3>
 801ed28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed2c:	4604      	mov	r4, r0
 801ed2e:	460d      	mov	r5, r1
 801ed30:	f7e1 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 801ed34:	2800      	cmp	r0, #0
 801ed36:	f040 80f9 	bne.w	801ef2c <_dtoa_r+0x6bc>
 801ed3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed3e:	4620      	mov	r0, r4
 801ed40:	4629      	mov	r1, r5
 801ed42:	f7e1 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 801ed46:	b118      	cbz	r0, 801ed50 <_dtoa_r+0x4e0>
 801ed48:	f018 0f01 	tst.w	r8, #1
 801ed4c:	f040 80ee 	bne.w	801ef2c <_dtoa_r+0x6bc>
 801ed50:	4649      	mov	r1, r9
 801ed52:	4658      	mov	r0, fp
 801ed54:	f000 fc90 	bl	801f678 <_Bfree>
 801ed58:	2300      	movs	r3, #0
 801ed5a:	7033      	strb	r3, [r6, #0]
 801ed5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed5e:	3701      	adds	r7, #1
 801ed60:	601f      	str	r7, [r3, #0]
 801ed62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	f000 831d 	beq.w	801f3a4 <_dtoa_r+0xb34>
 801ed6a:	601e      	str	r6, [r3, #0]
 801ed6c:	e31a      	b.n	801f3a4 <_dtoa_r+0xb34>
 801ed6e:	07e2      	lsls	r2, r4, #31
 801ed70:	d505      	bpl.n	801ed7e <_dtoa_r+0x50e>
 801ed72:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ed76:	f7e1 fc3f 	bl	80005f8 <__aeabi_dmul>
 801ed7a:	3601      	adds	r6, #1
 801ed7c:	2301      	movs	r3, #1
 801ed7e:	1064      	asrs	r4, r4, #1
 801ed80:	3508      	adds	r5, #8
 801ed82:	e73f      	b.n	801ec04 <_dtoa_r+0x394>
 801ed84:	2602      	movs	r6, #2
 801ed86:	e742      	b.n	801ec0e <_dtoa_r+0x39e>
 801ed88:	9c07      	ldr	r4, [sp, #28]
 801ed8a:	9704      	str	r7, [sp, #16]
 801ed8c:	e761      	b.n	801ec52 <_dtoa_r+0x3e2>
 801ed8e:	4b27      	ldr	r3, [pc, #156]	@ (801ee2c <_dtoa_r+0x5bc>)
 801ed90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ed92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ed96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ed9a:	4454      	add	r4, sl
 801ed9c:	2900      	cmp	r1, #0
 801ed9e:	d053      	beq.n	801ee48 <_dtoa_r+0x5d8>
 801eda0:	4928      	ldr	r1, [pc, #160]	@ (801ee44 <_dtoa_r+0x5d4>)
 801eda2:	2000      	movs	r0, #0
 801eda4:	f7e1 fd52 	bl	800084c <__aeabi_ddiv>
 801eda8:	4633      	mov	r3, r6
 801edaa:	462a      	mov	r2, r5
 801edac:	f7e1 fa6c 	bl	8000288 <__aeabi_dsub>
 801edb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801edb4:	4656      	mov	r6, sl
 801edb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edba:	f7e1 fecd 	bl	8000b58 <__aeabi_d2iz>
 801edbe:	4605      	mov	r5, r0
 801edc0:	f7e1 fbb0 	bl	8000524 <__aeabi_i2d>
 801edc4:	4602      	mov	r2, r0
 801edc6:	460b      	mov	r3, r1
 801edc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edcc:	f7e1 fa5c 	bl	8000288 <__aeabi_dsub>
 801edd0:	3530      	adds	r5, #48	@ 0x30
 801edd2:	4602      	mov	r2, r0
 801edd4:	460b      	mov	r3, r1
 801edd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801edda:	f806 5b01 	strb.w	r5, [r6], #1
 801edde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ede2:	f7e1 fe7b 	bl	8000adc <__aeabi_dcmplt>
 801ede6:	2800      	cmp	r0, #0
 801ede8:	d171      	bne.n	801eece <_dtoa_r+0x65e>
 801edea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801edee:	4911      	ldr	r1, [pc, #68]	@ (801ee34 <_dtoa_r+0x5c4>)
 801edf0:	2000      	movs	r0, #0
 801edf2:	f7e1 fa49 	bl	8000288 <__aeabi_dsub>
 801edf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801edfa:	f7e1 fe6f 	bl	8000adc <__aeabi_dcmplt>
 801edfe:	2800      	cmp	r0, #0
 801ee00:	f040 8095 	bne.w	801ef2e <_dtoa_r+0x6be>
 801ee04:	42a6      	cmp	r6, r4
 801ee06:	f43f af50 	beq.w	801ecaa <_dtoa_r+0x43a>
 801ee0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ee0e:	4b0a      	ldr	r3, [pc, #40]	@ (801ee38 <_dtoa_r+0x5c8>)
 801ee10:	2200      	movs	r2, #0
 801ee12:	f7e1 fbf1 	bl	80005f8 <__aeabi_dmul>
 801ee16:	4b08      	ldr	r3, [pc, #32]	@ (801ee38 <_dtoa_r+0x5c8>)
 801ee18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ee1c:	2200      	movs	r2, #0
 801ee1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee22:	f7e1 fbe9 	bl	80005f8 <__aeabi_dmul>
 801ee26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee2a:	e7c4      	b.n	801edb6 <_dtoa_r+0x546>
 801ee2c:	08026140 	.word	0x08026140
 801ee30:	08026118 	.word	0x08026118
 801ee34:	3ff00000 	.word	0x3ff00000
 801ee38:	40240000 	.word	0x40240000
 801ee3c:	401c0000 	.word	0x401c0000
 801ee40:	40140000 	.word	0x40140000
 801ee44:	3fe00000 	.word	0x3fe00000
 801ee48:	4631      	mov	r1, r6
 801ee4a:	4628      	mov	r0, r5
 801ee4c:	f7e1 fbd4 	bl	80005f8 <__aeabi_dmul>
 801ee50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ee54:	9415      	str	r4, [sp, #84]	@ 0x54
 801ee56:	4656      	mov	r6, sl
 801ee58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee5c:	f7e1 fe7c 	bl	8000b58 <__aeabi_d2iz>
 801ee60:	4605      	mov	r5, r0
 801ee62:	f7e1 fb5f 	bl	8000524 <__aeabi_i2d>
 801ee66:	4602      	mov	r2, r0
 801ee68:	460b      	mov	r3, r1
 801ee6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee6e:	f7e1 fa0b 	bl	8000288 <__aeabi_dsub>
 801ee72:	3530      	adds	r5, #48	@ 0x30
 801ee74:	f806 5b01 	strb.w	r5, [r6], #1
 801ee78:	4602      	mov	r2, r0
 801ee7a:	460b      	mov	r3, r1
 801ee7c:	42a6      	cmp	r6, r4
 801ee7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ee82:	f04f 0200 	mov.w	r2, #0
 801ee86:	d124      	bne.n	801eed2 <_dtoa_r+0x662>
 801ee88:	4bac      	ldr	r3, [pc, #688]	@ (801f13c <_dtoa_r+0x8cc>)
 801ee8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ee8e:	f7e1 f9fd 	bl	800028c <__adddf3>
 801ee92:	4602      	mov	r2, r0
 801ee94:	460b      	mov	r3, r1
 801ee96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee9a:	f7e1 fe3d 	bl	8000b18 <__aeabi_dcmpgt>
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	d145      	bne.n	801ef2e <_dtoa_r+0x6be>
 801eea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801eea6:	49a5      	ldr	r1, [pc, #660]	@ (801f13c <_dtoa_r+0x8cc>)
 801eea8:	2000      	movs	r0, #0
 801eeaa:	f7e1 f9ed 	bl	8000288 <__aeabi_dsub>
 801eeae:	4602      	mov	r2, r0
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eeb6:	f7e1 fe11 	bl	8000adc <__aeabi_dcmplt>
 801eeba:	2800      	cmp	r0, #0
 801eebc:	f43f aef5 	beq.w	801ecaa <_dtoa_r+0x43a>
 801eec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801eec2:	1e73      	subs	r3, r6, #1
 801eec4:	9315      	str	r3, [sp, #84]	@ 0x54
 801eec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801eeca:	2b30      	cmp	r3, #48	@ 0x30
 801eecc:	d0f8      	beq.n	801eec0 <_dtoa_r+0x650>
 801eece:	9f04      	ldr	r7, [sp, #16]
 801eed0:	e73e      	b.n	801ed50 <_dtoa_r+0x4e0>
 801eed2:	4b9b      	ldr	r3, [pc, #620]	@ (801f140 <_dtoa_r+0x8d0>)
 801eed4:	f7e1 fb90 	bl	80005f8 <__aeabi_dmul>
 801eed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eedc:	e7bc      	b.n	801ee58 <_dtoa_r+0x5e8>
 801eede:	d10c      	bne.n	801eefa <_dtoa_r+0x68a>
 801eee0:	4b98      	ldr	r3, [pc, #608]	@ (801f144 <_dtoa_r+0x8d4>)
 801eee2:	2200      	movs	r2, #0
 801eee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eee8:	f7e1 fb86 	bl	80005f8 <__aeabi_dmul>
 801eeec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eef0:	f7e1 fe08 	bl	8000b04 <__aeabi_dcmpge>
 801eef4:	2800      	cmp	r0, #0
 801eef6:	f000 8157 	beq.w	801f1a8 <_dtoa_r+0x938>
 801eefa:	2400      	movs	r4, #0
 801eefc:	4625      	mov	r5, r4
 801eefe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef00:	43db      	mvns	r3, r3
 801ef02:	9304      	str	r3, [sp, #16]
 801ef04:	4656      	mov	r6, sl
 801ef06:	2700      	movs	r7, #0
 801ef08:	4621      	mov	r1, r4
 801ef0a:	4658      	mov	r0, fp
 801ef0c:	f000 fbb4 	bl	801f678 <_Bfree>
 801ef10:	2d00      	cmp	r5, #0
 801ef12:	d0dc      	beq.n	801eece <_dtoa_r+0x65e>
 801ef14:	b12f      	cbz	r7, 801ef22 <_dtoa_r+0x6b2>
 801ef16:	42af      	cmp	r7, r5
 801ef18:	d003      	beq.n	801ef22 <_dtoa_r+0x6b2>
 801ef1a:	4639      	mov	r1, r7
 801ef1c:	4658      	mov	r0, fp
 801ef1e:	f000 fbab 	bl	801f678 <_Bfree>
 801ef22:	4629      	mov	r1, r5
 801ef24:	4658      	mov	r0, fp
 801ef26:	f000 fba7 	bl	801f678 <_Bfree>
 801ef2a:	e7d0      	b.n	801eece <_dtoa_r+0x65e>
 801ef2c:	9704      	str	r7, [sp, #16]
 801ef2e:	4633      	mov	r3, r6
 801ef30:	461e      	mov	r6, r3
 801ef32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ef36:	2a39      	cmp	r2, #57	@ 0x39
 801ef38:	d107      	bne.n	801ef4a <_dtoa_r+0x6da>
 801ef3a:	459a      	cmp	sl, r3
 801ef3c:	d1f8      	bne.n	801ef30 <_dtoa_r+0x6c0>
 801ef3e:	9a04      	ldr	r2, [sp, #16]
 801ef40:	3201      	adds	r2, #1
 801ef42:	9204      	str	r2, [sp, #16]
 801ef44:	2230      	movs	r2, #48	@ 0x30
 801ef46:	f88a 2000 	strb.w	r2, [sl]
 801ef4a:	781a      	ldrb	r2, [r3, #0]
 801ef4c:	3201      	adds	r2, #1
 801ef4e:	701a      	strb	r2, [r3, #0]
 801ef50:	e7bd      	b.n	801eece <_dtoa_r+0x65e>
 801ef52:	4b7b      	ldr	r3, [pc, #492]	@ (801f140 <_dtoa_r+0x8d0>)
 801ef54:	2200      	movs	r2, #0
 801ef56:	f7e1 fb4f 	bl	80005f8 <__aeabi_dmul>
 801ef5a:	2200      	movs	r2, #0
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	4604      	mov	r4, r0
 801ef60:	460d      	mov	r5, r1
 801ef62:	f7e1 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef66:	2800      	cmp	r0, #0
 801ef68:	f43f aebb 	beq.w	801ece2 <_dtoa_r+0x472>
 801ef6c:	e6f0      	b.n	801ed50 <_dtoa_r+0x4e0>
 801ef6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ef70:	2a00      	cmp	r2, #0
 801ef72:	f000 80db 	beq.w	801f12c <_dtoa_r+0x8bc>
 801ef76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef78:	2a01      	cmp	r2, #1
 801ef7a:	f300 80bf 	bgt.w	801f0fc <_dtoa_r+0x88c>
 801ef7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ef80:	2a00      	cmp	r2, #0
 801ef82:	f000 80b7 	beq.w	801f0f4 <_dtoa_r+0x884>
 801ef86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ef8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ef8c:	4646      	mov	r6, r8
 801ef8e:	9a08      	ldr	r2, [sp, #32]
 801ef90:	2101      	movs	r1, #1
 801ef92:	441a      	add	r2, r3
 801ef94:	4658      	mov	r0, fp
 801ef96:	4498      	add	r8, r3
 801ef98:	9208      	str	r2, [sp, #32]
 801ef9a:	f000 fc6b 	bl	801f874 <__i2b>
 801ef9e:	4605      	mov	r5, r0
 801efa0:	b15e      	cbz	r6, 801efba <_dtoa_r+0x74a>
 801efa2:	9b08      	ldr	r3, [sp, #32]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	dd08      	ble.n	801efba <_dtoa_r+0x74a>
 801efa8:	42b3      	cmp	r3, r6
 801efaa:	9a08      	ldr	r2, [sp, #32]
 801efac:	bfa8      	it	ge
 801efae:	4633      	movge	r3, r6
 801efb0:	eba8 0803 	sub.w	r8, r8, r3
 801efb4:	1af6      	subs	r6, r6, r3
 801efb6:	1ad3      	subs	r3, r2, r3
 801efb8:	9308      	str	r3, [sp, #32]
 801efba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801efbc:	b1f3      	cbz	r3, 801effc <_dtoa_r+0x78c>
 801efbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	f000 80b7 	beq.w	801f134 <_dtoa_r+0x8c4>
 801efc6:	b18c      	cbz	r4, 801efec <_dtoa_r+0x77c>
 801efc8:	4629      	mov	r1, r5
 801efca:	4622      	mov	r2, r4
 801efcc:	4658      	mov	r0, fp
 801efce:	f000 fd11 	bl	801f9f4 <__pow5mult>
 801efd2:	464a      	mov	r2, r9
 801efd4:	4601      	mov	r1, r0
 801efd6:	4605      	mov	r5, r0
 801efd8:	4658      	mov	r0, fp
 801efda:	f000 fc61 	bl	801f8a0 <__multiply>
 801efde:	4649      	mov	r1, r9
 801efe0:	9004      	str	r0, [sp, #16]
 801efe2:	4658      	mov	r0, fp
 801efe4:	f000 fb48 	bl	801f678 <_Bfree>
 801efe8:	9b04      	ldr	r3, [sp, #16]
 801efea:	4699      	mov	r9, r3
 801efec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801efee:	1b1a      	subs	r2, r3, r4
 801eff0:	d004      	beq.n	801effc <_dtoa_r+0x78c>
 801eff2:	4649      	mov	r1, r9
 801eff4:	4658      	mov	r0, fp
 801eff6:	f000 fcfd 	bl	801f9f4 <__pow5mult>
 801effa:	4681      	mov	r9, r0
 801effc:	2101      	movs	r1, #1
 801effe:	4658      	mov	r0, fp
 801f000:	f000 fc38 	bl	801f874 <__i2b>
 801f004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f006:	4604      	mov	r4, r0
 801f008:	2b00      	cmp	r3, #0
 801f00a:	f000 81cf 	beq.w	801f3ac <_dtoa_r+0xb3c>
 801f00e:	461a      	mov	r2, r3
 801f010:	4601      	mov	r1, r0
 801f012:	4658      	mov	r0, fp
 801f014:	f000 fcee 	bl	801f9f4 <__pow5mult>
 801f018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f01a:	2b01      	cmp	r3, #1
 801f01c:	4604      	mov	r4, r0
 801f01e:	f300 8095 	bgt.w	801f14c <_dtoa_r+0x8dc>
 801f022:	9b02      	ldr	r3, [sp, #8]
 801f024:	2b00      	cmp	r3, #0
 801f026:	f040 8087 	bne.w	801f138 <_dtoa_r+0x8c8>
 801f02a:	9b03      	ldr	r3, [sp, #12]
 801f02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f030:	2b00      	cmp	r3, #0
 801f032:	f040 8089 	bne.w	801f148 <_dtoa_r+0x8d8>
 801f036:	9b03      	ldr	r3, [sp, #12]
 801f038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f03c:	0d1b      	lsrs	r3, r3, #20
 801f03e:	051b      	lsls	r3, r3, #20
 801f040:	b12b      	cbz	r3, 801f04e <_dtoa_r+0x7de>
 801f042:	9b08      	ldr	r3, [sp, #32]
 801f044:	3301      	adds	r3, #1
 801f046:	9308      	str	r3, [sp, #32]
 801f048:	f108 0801 	add.w	r8, r8, #1
 801f04c:	2301      	movs	r3, #1
 801f04e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f052:	2b00      	cmp	r3, #0
 801f054:	f000 81b0 	beq.w	801f3b8 <_dtoa_r+0xb48>
 801f058:	6923      	ldr	r3, [r4, #16]
 801f05a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f05e:	6918      	ldr	r0, [r3, #16]
 801f060:	f000 fbbc 	bl	801f7dc <__hi0bits>
 801f064:	f1c0 0020 	rsb	r0, r0, #32
 801f068:	9b08      	ldr	r3, [sp, #32]
 801f06a:	4418      	add	r0, r3
 801f06c:	f010 001f 	ands.w	r0, r0, #31
 801f070:	d077      	beq.n	801f162 <_dtoa_r+0x8f2>
 801f072:	f1c0 0320 	rsb	r3, r0, #32
 801f076:	2b04      	cmp	r3, #4
 801f078:	dd6b      	ble.n	801f152 <_dtoa_r+0x8e2>
 801f07a:	9b08      	ldr	r3, [sp, #32]
 801f07c:	f1c0 001c 	rsb	r0, r0, #28
 801f080:	4403      	add	r3, r0
 801f082:	4480      	add	r8, r0
 801f084:	4406      	add	r6, r0
 801f086:	9308      	str	r3, [sp, #32]
 801f088:	f1b8 0f00 	cmp.w	r8, #0
 801f08c:	dd05      	ble.n	801f09a <_dtoa_r+0x82a>
 801f08e:	4649      	mov	r1, r9
 801f090:	4642      	mov	r2, r8
 801f092:	4658      	mov	r0, fp
 801f094:	f000 fd08 	bl	801faa8 <__lshift>
 801f098:	4681      	mov	r9, r0
 801f09a:	9b08      	ldr	r3, [sp, #32]
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	dd05      	ble.n	801f0ac <_dtoa_r+0x83c>
 801f0a0:	4621      	mov	r1, r4
 801f0a2:	461a      	mov	r2, r3
 801f0a4:	4658      	mov	r0, fp
 801f0a6:	f000 fcff 	bl	801faa8 <__lshift>
 801f0aa:	4604      	mov	r4, r0
 801f0ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d059      	beq.n	801f166 <_dtoa_r+0x8f6>
 801f0b2:	4621      	mov	r1, r4
 801f0b4:	4648      	mov	r0, r9
 801f0b6:	f000 fd63 	bl	801fb80 <__mcmp>
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	da53      	bge.n	801f166 <_dtoa_r+0x8f6>
 801f0be:	1e7b      	subs	r3, r7, #1
 801f0c0:	9304      	str	r3, [sp, #16]
 801f0c2:	4649      	mov	r1, r9
 801f0c4:	2300      	movs	r3, #0
 801f0c6:	220a      	movs	r2, #10
 801f0c8:	4658      	mov	r0, fp
 801f0ca:	f000 faf7 	bl	801f6bc <__multadd>
 801f0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0d0:	4681      	mov	r9, r0
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	f000 8172 	beq.w	801f3bc <_dtoa_r+0xb4c>
 801f0d8:	2300      	movs	r3, #0
 801f0da:	4629      	mov	r1, r5
 801f0dc:	220a      	movs	r2, #10
 801f0de:	4658      	mov	r0, fp
 801f0e0:	f000 faec 	bl	801f6bc <__multadd>
 801f0e4:	9b00      	ldr	r3, [sp, #0]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	4605      	mov	r5, r0
 801f0ea:	dc67      	bgt.n	801f1bc <_dtoa_r+0x94c>
 801f0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0ee:	2b02      	cmp	r3, #2
 801f0f0:	dc41      	bgt.n	801f176 <_dtoa_r+0x906>
 801f0f2:	e063      	b.n	801f1bc <_dtoa_r+0x94c>
 801f0f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f0f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f0fa:	e746      	b.n	801ef8a <_dtoa_r+0x71a>
 801f0fc:	9b07      	ldr	r3, [sp, #28]
 801f0fe:	1e5c      	subs	r4, r3, #1
 801f100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f102:	42a3      	cmp	r3, r4
 801f104:	bfbf      	itttt	lt
 801f106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f108:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f10a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f10c:	1ae3      	sublt	r3, r4, r3
 801f10e:	bfb4      	ite	lt
 801f110:	18d2      	addlt	r2, r2, r3
 801f112:	1b1c      	subge	r4, r3, r4
 801f114:	9b07      	ldr	r3, [sp, #28]
 801f116:	bfbc      	itt	lt
 801f118:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f11a:	2400      	movlt	r4, #0
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	bfb5      	itete	lt
 801f120:	eba8 0603 	sublt.w	r6, r8, r3
 801f124:	9b07      	ldrge	r3, [sp, #28]
 801f126:	2300      	movlt	r3, #0
 801f128:	4646      	movge	r6, r8
 801f12a:	e730      	b.n	801ef8e <_dtoa_r+0x71e>
 801f12c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f12e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f130:	4646      	mov	r6, r8
 801f132:	e735      	b.n	801efa0 <_dtoa_r+0x730>
 801f134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f136:	e75c      	b.n	801eff2 <_dtoa_r+0x782>
 801f138:	2300      	movs	r3, #0
 801f13a:	e788      	b.n	801f04e <_dtoa_r+0x7de>
 801f13c:	3fe00000 	.word	0x3fe00000
 801f140:	40240000 	.word	0x40240000
 801f144:	40140000 	.word	0x40140000
 801f148:	9b02      	ldr	r3, [sp, #8]
 801f14a:	e780      	b.n	801f04e <_dtoa_r+0x7de>
 801f14c:	2300      	movs	r3, #0
 801f14e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f150:	e782      	b.n	801f058 <_dtoa_r+0x7e8>
 801f152:	d099      	beq.n	801f088 <_dtoa_r+0x818>
 801f154:	9a08      	ldr	r2, [sp, #32]
 801f156:	331c      	adds	r3, #28
 801f158:	441a      	add	r2, r3
 801f15a:	4498      	add	r8, r3
 801f15c:	441e      	add	r6, r3
 801f15e:	9208      	str	r2, [sp, #32]
 801f160:	e792      	b.n	801f088 <_dtoa_r+0x818>
 801f162:	4603      	mov	r3, r0
 801f164:	e7f6      	b.n	801f154 <_dtoa_r+0x8e4>
 801f166:	9b07      	ldr	r3, [sp, #28]
 801f168:	9704      	str	r7, [sp, #16]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	dc20      	bgt.n	801f1b0 <_dtoa_r+0x940>
 801f16e:	9300      	str	r3, [sp, #0]
 801f170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f172:	2b02      	cmp	r3, #2
 801f174:	dd1e      	ble.n	801f1b4 <_dtoa_r+0x944>
 801f176:	9b00      	ldr	r3, [sp, #0]
 801f178:	2b00      	cmp	r3, #0
 801f17a:	f47f aec0 	bne.w	801eefe <_dtoa_r+0x68e>
 801f17e:	4621      	mov	r1, r4
 801f180:	2205      	movs	r2, #5
 801f182:	4658      	mov	r0, fp
 801f184:	f000 fa9a 	bl	801f6bc <__multadd>
 801f188:	4601      	mov	r1, r0
 801f18a:	4604      	mov	r4, r0
 801f18c:	4648      	mov	r0, r9
 801f18e:	f000 fcf7 	bl	801fb80 <__mcmp>
 801f192:	2800      	cmp	r0, #0
 801f194:	f77f aeb3 	ble.w	801eefe <_dtoa_r+0x68e>
 801f198:	4656      	mov	r6, sl
 801f19a:	2331      	movs	r3, #49	@ 0x31
 801f19c:	f806 3b01 	strb.w	r3, [r6], #1
 801f1a0:	9b04      	ldr	r3, [sp, #16]
 801f1a2:	3301      	adds	r3, #1
 801f1a4:	9304      	str	r3, [sp, #16]
 801f1a6:	e6ae      	b.n	801ef06 <_dtoa_r+0x696>
 801f1a8:	9c07      	ldr	r4, [sp, #28]
 801f1aa:	9704      	str	r7, [sp, #16]
 801f1ac:	4625      	mov	r5, r4
 801f1ae:	e7f3      	b.n	801f198 <_dtoa_r+0x928>
 801f1b0:	9b07      	ldr	r3, [sp, #28]
 801f1b2:	9300      	str	r3, [sp, #0]
 801f1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	f000 8104 	beq.w	801f3c4 <_dtoa_r+0xb54>
 801f1bc:	2e00      	cmp	r6, #0
 801f1be:	dd05      	ble.n	801f1cc <_dtoa_r+0x95c>
 801f1c0:	4629      	mov	r1, r5
 801f1c2:	4632      	mov	r2, r6
 801f1c4:	4658      	mov	r0, fp
 801f1c6:	f000 fc6f 	bl	801faa8 <__lshift>
 801f1ca:	4605      	mov	r5, r0
 801f1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d05a      	beq.n	801f288 <_dtoa_r+0xa18>
 801f1d2:	6869      	ldr	r1, [r5, #4]
 801f1d4:	4658      	mov	r0, fp
 801f1d6:	f000 fa0f 	bl	801f5f8 <_Balloc>
 801f1da:	4606      	mov	r6, r0
 801f1dc:	b928      	cbnz	r0, 801f1ea <_dtoa_r+0x97a>
 801f1de:	4b84      	ldr	r3, [pc, #528]	@ (801f3f0 <_dtoa_r+0xb80>)
 801f1e0:	4602      	mov	r2, r0
 801f1e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f1e6:	f7ff bb5a 	b.w	801e89e <_dtoa_r+0x2e>
 801f1ea:	692a      	ldr	r2, [r5, #16]
 801f1ec:	3202      	adds	r2, #2
 801f1ee:	0092      	lsls	r2, r2, #2
 801f1f0:	f105 010c 	add.w	r1, r5, #12
 801f1f4:	300c      	adds	r0, #12
 801f1f6:	f7ff fa80 	bl	801e6fa <memcpy>
 801f1fa:	2201      	movs	r2, #1
 801f1fc:	4631      	mov	r1, r6
 801f1fe:	4658      	mov	r0, fp
 801f200:	f000 fc52 	bl	801faa8 <__lshift>
 801f204:	f10a 0301 	add.w	r3, sl, #1
 801f208:	9307      	str	r3, [sp, #28]
 801f20a:	9b00      	ldr	r3, [sp, #0]
 801f20c:	4453      	add	r3, sl
 801f20e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f210:	9b02      	ldr	r3, [sp, #8]
 801f212:	f003 0301 	and.w	r3, r3, #1
 801f216:	462f      	mov	r7, r5
 801f218:	930a      	str	r3, [sp, #40]	@ 0x28
 801f21a:	4605      	mov	r5, r0
 801f21c:	9b07      	ldr	r3, [sp, #28]
 801f21e:	4621      	mov	r1, r4
 801f220:	3b01      	subs	r3, #1
 801f222:	4648      	mov	r0, r9
 801f224:	9300      	str	r3, [sp, #0]
 801f226:	f7ff fa9b 	bl	801e760 <quorem>
 801f22a:	4639      	mov	r1, r7
 801f22c:	9002      	str	r0, [sp, #8]
 801f22e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f232:	4648      	mov	r0, r9
 801f234:	f000 fca4 	bl	801fb80 <__mcmp>
 801f238:	462a      	mov	r2, r5
 801f23a:	9008      	str	r0, [sp, #32]
 801f23c:	4621      	mov	r1, r4
 801f23e:	4658      	mov	r0, fp
 801f240:	f000 fcba 	bl	801fbb8 <__mdiff>
 801f244:	68c2      	ldr	r2, [r0, #12]
 801f246:	4606      	mov	r6, r0
 801f248:	bb02      	cbnz	r2, 801f28c <_dtoa_r+0xa1c>
 801f24a:	4601      	mov	r1, r0
 801f24c:	4648      	mov	r0, r9
 801f24e:	f000 fc97 	bl	801fb80 <__mcmp>
 801f252:	4602      	mov	r2, r0
 801f254:	4631      	mov	r1, r6
 801f256:	4658      	mov	r0, fp
 801f258:	920e      	str	r2, [sp, #56]	@ 0x38
 801f25a:	f000 fa0d 	bl	801f678 <_Bfree>
 801f25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f262:	9e07      	ldr	r6, [sp, #28]
 801f264:	ea43 0102 	orr.w	r1, r3, r2
 801f268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f26a:	4319      	orrs	r1, r3
 801f26c:	d110      	bne.n	801f290 <_dtoa_r+0xa20>
 801f26e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f272:	d029      	beq.n	801f2c8 <_dtoa_r+0xa58>
 801f274:	9b08      	ldr	r3, [sp, #32]
 801f276:	2b00      	cmp	r3, #0
 801f278:	dd02      	ble.n	801f280 <_dtoa_r+0xa10>
 801f27a:	9b02      	ldr	r3, [sp, #8]
 801f27c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f280:	9b00      	ldr	r3, [sp, #0]
 801f282:	f883 8000 	strb.w	r8, [r3]
 801f286:	e63f      	b.n	801ef08 <_dtoa_r+0x698>
 801f288:	4628      	mov	r0, r5
 801f28a:	e7bb      	b.n	801f204 <_dtoa_r+0x994>
 801f28c:	2201      	movs	r2, #1
 801f28e:	e7e1      	b.n	801f254 <_dtoa_r+0x9e4>
 801f290:	9b08      	ldr	r3, [sp, #32]
 801f292:	2b00      	cmp	r3, #0
 801f294:	db04      	blt.n	801f2a0 <_dtoa_r+0xa30>
 801f296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f298:	430b      	orrs	r3, r1
 801f29a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f29c:	430b      	orrs	r3, r1
 801f29e:	d120      	bne.n	801f2e2 <_dtoa_r+0xa72>
 801f2a0:	2a00      	cmp	r2, #0
 801f2a2:	dded      	ble.n	801f280 <_dtoa_r+0xa10>
 801f2a4:	4649      	mov	r1, r9
 801f2a6:	2201      	movs	r2, #1
 801f2a8:	4658      	mov	r0, fp
 801f2aa:	f000 fbfd 	bl	801faa8 <__lshift>
 801f2ae:	4621      	mov	r1, r4
 801f2b0:	4681      	mov	r9, r0
 801f2b2:	f000 fc65 	bl	801fb80 <__mcmp>
 801f2b6:	2800      	cmp	r0, #0
 801f2b8:	dc03      	bgt.n	801f2c2 <_dtoa_r+0xa52>
 801f2ba:	d1e1      	bne.n	801f280 <_dtoa_r+0xa10>
 801f2bc:	f018 0f01 	tst.w	r8, #1
 801f2c0:	d0de      	beq.n	801f280 <_dtoa_r+0xa10>
 801f2c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f2c6:	d1d8      	bne.n	801f27a <_dtoa_r+0xa0a>
 801f2c8:	9a00      	ldr	r2, [sp, #0]
 801f2ca:	2339      	movs	r3, #57	@ 0x39
 801f2cc:	7013      	strb	r3, [r2, #0]
 801f2ce:	4633      	mov	r3, r6
 801f2d0:	461e      	mov	r6, r3
 801f2d2:	3b01      	subs	r3, #1
 801f2d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f2d8:	2a39      	cmp	r2, #57	@ 0x39
 801f2da:	d052      	beq.n	801f382 <_dtoa_r+0xb12>
 801f2dc:	3201      	adds	r2, #1
 801f2de:	701a      	strb	r2, [r3, #0]
 801f2e0:	e612      	b.n	801ef08 <_dtoa_r+0x698>
 801f2e2:	2a00      	cmp	r2, #0
 801f2e4:	dd07      	ble.n	801f2f6 <_dtoa_r+0xa86>
 801f2e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f2ea:	d0ed      	beq.n	801f2c8 <_dtoa_r+0xa58>
 801f2ec:	9a00      	ldr	r2, [sp, #0]
 801f2ee:	f108 0301 	add.w	r3, r8, #1
 801f2f2:	7013      	strb	r3, [r2, #0]
 801f2f4:	e608      	b.n	801ef08 <_dtoa_r+0x698>
 801f2f6:	9b07      	ldr	r3, [sp, #28]
 801f2f8:	9a07      	ldr	r2, [sp, #28]
 801f2fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f300:	4293      	cmp	r3, r2
 801f302:	d028      	beq.n	801f356 <_dtoa_r+0xae6>
 801f304:	4649      	mov	r1, r9
 801f306:	2300      	movs	r3, #0
 801f308:	220a      	movs	r2, #10
 801f30a:	4658      	mov	r0, fp
 801f30c:	f000 f9d6 	bl	801f6bc <__multadd>
 801f310:	42af      	cmp	r7, r5
 801f312:	4681      	mov	r9, r0
 801f314:	f04f 0300 	mov.w	r3, #0
 801f318:	f04f 020a 	mov.w	r2, #10
 801f31c:	4639      	mov	r1, r7
 801f31e:	4658      	mov	r0, fp
 801f320:	d107      	bne.n	801f332 <_dtoa_r+0xac2>
 801f322:	f000 f9cb 	bl	801f6bc <__multadd>
 801f326:	4607      	mov	r7, r0
 801f328:	4605      	mov	r5, r0
 801f32a:	9b07      	ldr	r3, [sp, #28]
 801f32c:	3301      	adds	r3, #1
 801f32e:	9307      	str	r3, [sp, #28]
 801f330:	e774      	b.n	801f21c <_dtoa_r+0x9ac>
 801f332:	f000 f9c3 	bl	801f6bc <__multadd>
 801f336:	4629      	mov	r1, r5
 801f338:	4607      	mov	r7, r0
 801f33a:	2300      	movs	r3, #0
 801f33c:	220a      	movs	r2, #10
 801f33e:	4658      	mov	r0, fp
 801f340:	f000 f9bc 	bl	801f6bc <__multadd>
 801f344:	4605      	mov	r5, r0
 801f346:	e7f0      	b.n	801f32a <_dtoa_r+0xaba>
 801f348:	9b00      	ldr	r3, [sp, #0]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	bfcc      	ite	gt
 801f34e:	461e      	movgt	r6, r3
 801f350:	2601      	movle	r6, #1
 801f352:	4456      	add	r6, sl
 801f354:	2700      	movs	r7, #0
 801f356:	4649      	mov	r1, r9
 801f358:	2201      	movs	r2, #1
 801f35a:	4658      	mov	r0, fp
 801f35c:	f000 fba4 	bl	801faa8 <__lshift>
 801f360:	4621      	mov	r1, r4
 801f362:	4681      	mov	r9, r0
 801f364:	f000 fc0c 	bl	801fb80 <__mcmp>
 801f368:	2800      	cmp	r0, #0
 801f36a:	dcb0      	bgt.n	801f2ce <_dtoa_r+0xa5e>
 801f36c:	d102      	bne.n	801f374 <_dtoa_r+0xb04>
 801f36e:	f018 0f01 	tst.w	r8, #1
 801f372:	d1ac      	bne.n	801f2ce <_dtoa_r+0xa5e>
 801f374:	4633      	mov	r3, r6
 801f376:	461e      	mov	r6, r3
 801f378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f37c:	2a30      	cmp	r2, #48	@ 0x30
 801f37e:	d0fa      	beq.n	801f376 <_dtoa_r+0xb06>
 801f380:	e5c2      	b.n	801ef08 <_dtoa_r+0x698>
 801f382:	459a      	cmp	sl, r3
 801f384:	d1a4      	bne.n	801f2d0 <_dtoa_r+0xa60>
 801f386:	9b04      	ldr	r3, [sp, #16]
 801f388:	3301      	adds	r3, #1
 801f38a:	9304      	str	r3, [sp, #16]
 801f38c:	2331      	movs	r3, #49	@ 0x31
 801f38e:	f88a 3000 	strb.w	r3, [sl]
 801f392:	e5b9      	b.n	801ef08 <_dtoa_r+0x698>
 801f394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f3f4 <_dtoa_r+0xb84>
 801f39a:	b11b      	cbz	r3, 801f3a4 <_dtoa_r+0xb34>
 801f39c:	f10a 0308 	add.w	r3, sl, #8
 801f3a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f3a2:	6013      	str	r3, [r2, #0]
 801f3a4:	4650      	mov	r0, sl
 801f3a6:	b019      	add	sp, #100	@ 0x64
 801f3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3ae:	2b01      	cmp	r3, #1
 801f3b0:	f77f ae37 	ble.w	801f022 <_dtoa_r+0x7b2>
 801f3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3b8:	2001      	movs	r0, #1
 801f3ba:	e655      	b.n	801f068 <_dtoa_r+0x7f8>
 801f3bc:	9b00      	ldr	r3, [sp, #0]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f77f aed6 	ble.w	801f170 <_dtoa_r+0x900>
 801f3c4:	4656      	mov	r6, sl
 801f3c6:	4621      	mov	r1, r4
 801f3c8:	4648      	mov	r0, r9
 801f3ca:	f7ff f9c9 	bl	801e760 <quorem>
 801f3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f3d2:	f806 8b01 	strb.w	r8, [r6], #1
 801f3d6:	9b00      	ldr	r3, [sp, #0]
 801f3d8:	eba6 020a 	sub.w	r2, r6, sl
 801f3dc:	4293      	cmp	r3, r2
 801f3de:	ddb3      	ble.n	801f348 <_dtoa_r+0xad8>
 801f3e0:	4649      	mov	r1, r9
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	220a      	movs	r2, #10
 801f3e6:	4658      	mov	r0, fp
 801f3e8:	f000 f968 	bl	801f6bc <__multadd>
 801f3ec:	4681      	mov	r9, r0
 801f3ee:	e7ea      	b.n	801f3c6 <_dtoa_r+0xb56>
 801f3f0:	080260a1 	.word	0x080260a1
 801f3f4:	0802603c 	.word	0x0802603c

0801f3f8 <_free_r>:
 801f3f8:	b538      	push	{r3, r4, r5, lr}
 801f3fa:	4605      	mov	r5, r0
 801f3fc:	2900      	cmp	r1, #0
 801f3fe:	d041      	beq.n	801f484 <_free_r+0x8c>
 801f400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f404:	1f0c      	subs	r4, r1, #4
 801f406:	2b00      	cmp	r3, #0
 801f408:	bfb8      	it	lt
 801f40a:	18e4      	addlt	r4, r4, r3
 801f40c:	f000 f8e8 	bl	801f5e0 <__malloc_lock>
 801f410:	4a1d      	ldr	r2, [pc, #116]	@ (801f488 <_free_r+0x90>)
 801f412:	6813      	ldr	r3, [r2, #0]
 801f414:	b933      	cbnz	r3, 801f424 <_free_r+0x2c>
 801f416:	6063      	str	r3, [r4, #4]
 801f418:	6014      	str	r4, [r2, #0]
 801f41a:	4628      	mov	r0, r5
 801f41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f420:	f000 b8e4 	b.w	801f5ec <__malloc_unlock>
 801f424:	42a3      	cmp	r3, r4
 801f426:	d908      	bls.n	801f43a <_free_r+0x42>
 801f428:	6820      	ldr	r0, [r4, #0]
 801f42a:	1821      	adds	r1, r4, r0
 801f42c:	428b      	cmp	r3, r1
 801f42e:	bf01      	itttt	eq
 801f430:	6819      	ldreq	r1, [r3, #0]
 801f432:	685b      	ldreq	r3, [r3, #4]
 801f434:	1809      	addeq	r1, r1, r0
 801f436:	6021      	streq	r1, [r4, #0]
 801f438:	e7ed      	b.n	801f416 <_free_r+0x1e>
 801f43a:	461a      	mov	r2, r3
 801f43c:	685b      	ldr	r3, [r3, #4]
 801f43e:	b10b      	cbz	r3, 801f444 <_free_r+0x4c>
 801f440:	42a3      	cmp	r3, r4
 801f442:	d9fa      	bls.n	801f43a <_free_r+0x42>
 801f444:	6811      	ldr	r1, [r2, #0]
 801f446:	1850      	adds	r0, r2, r1
 801f448:	42a0      	cmp	r0, r4
 801f44a:	d10b      	bne.n	801f464 <_free_r+0x6c>
 801f44c:	6820      	ldr	r0, [r4, #0]
 801f44e:	4401      	add	r1, r0
 801f450:	1850      	adds	r0, r2, r1
 801f452:	4283      	cmp	r3, r0
 801f454:	6011      	str	r1, [r2, #0]
 801f456:	d1e0      	bne.n	801f41a <_free_r+0x22>
 801f458:	6818      	ldr	r0, [r3, #0]
 801f45a:	685b      	ldr	r3, [r3, #4]
 801f45c:	6053      	str	r3, [r2, #4]
 801f45e:	4408      	add	r0, r1
 801f460:	6010      	str	r0, [r2, #0]
 801f462:	e7da      	b.n	801f41a <_free_r+0x22>
 801f464:	d902      	bls.n	801f46c <_free_r+0x74>
 801f466:	230c      	movs	r3, #12
 801f468:	602b      	str	r3, [r5, #0]
 801f46a:	e7d6      	b.n	801f41a <_free_r+0x22>
 801f46c:	6820      	ldr	r0, [r4, #0]
 801f46e:	1821      	adds	r1, r4, r0
 801f470:	428b      	cmp	r3, r1
 801f472:	bf04      	itt	eq
 801f474:	6819      	ldreq	r1, [r3, #0]
 801f476:	685b      	ldreq	r3, [r3, #4]
 801f478:	6063      	str	r3, [r4, #4]
 801f47a:	bf04      	itt	eq
 801f47c:	1809      	addeq	r1, r1, r0
 801f47e:	6021      	streq	r1, [r4, #0]
 801f480:	6054      	str	r4, [r2, #4]
 801f482:	e7ca      	b.n	801f41a <_free_r+0x22>
 801f484:	bd38      	pop	{r3, r4, r5, pc}
 801f486:	bf00      	nop
 801f488:	20012954 	.word	0x20012954

0801f48c <malloc>:
 801f48c:	4b02      	ldr	r3, [pc, #8]	@ (801f498 <malloc+0xc>)
 801f48e:	4601      	mov	r1, r0
 801f490:	6818      	ldr	r0, [r3, #0]
 801f492:	f000 b825 	b.w	801f4e0 <_malloc_r>
 801f496:	bf00      	nop
 801f498:	20000054 	.word	0x20000054

0801f49c <sbrk_aligned>:
 801f49c:	b570      	push	{r4, r5, r6, lr}
 801f49e:	4e0f      	ldr	r6, [pc, #60]	@ (801f4dc <sbrk_aligned+0x40>)
 801f4a0:	460c      	mov	r4, r1
 801f4a2:	6831      	ldr	r1, [r6, #0]
 801f4a4:	4605      	mov	r5, r0
 801f4a6:	b911      	cbnz	r1, 801f4ae <sbrk_aligned+0x12>
 801f4a8:	f001 fea0 	bl	80211ec <_sbrk_r>
 801f4ac:	6030      	str	r0, [r6, #0]
 801f4ae:	4621      	mov	r1, r4
 801f4b0:	4628      	mov	r0, r5
 801f4b2:	f001 fe9b 	bl	80211ec <_sbrk_r>
 801f4b6:	1c43      	adds	r3, r0, #1
 801f4b8:	d103      	bne.n	801f4c2 <sbrk_aligned+0x26>
 801f4ba:	f04f 34ff 	mov.w	r4, #4294967295
 801f4be:	4620      	mov	r0, r4
 801f4c0:	bd70      	pop	{r4, r5, r6, pc}
 801f4c2:	1cc4      	adds	r4, r0, #3
 801f4c4:	f024 0403 	bic.w	r4, r4, #3
 801f4c8:	42a0      	cmp	r0, r4
 801f4ca:	d0f8      	beq.n	801f4be <sbrk_aligned+0x22>
 801f4cc:	1a21      	subs	r1, r4, r0
 801f4ce:	4628      	mov	r0, r5
 801f4d0:	f001 fe8c 	bl	80211ec <_sbrk_r>
 801f4d4:	3001      	adds	r0, #1
 801f4d6:	d1f2      	bne.n	801f4be <sbrk_aligned+0x22>
 801f4d8:	e7ef      	b.n	801f4ba <sbrk_aligned+0x1e>
 801f4da:	bf00      	nop
 801f4dc:	20012950 	.word	0x20012950

0801f4e0 <_malloc_r>:
 801f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4e4:	1ccd      	adds	r5, r1, #3
 801f4e6:	f025 0503 	bic.w	r5, r5, #3
 801f4ea:	3508      	adds	r5, #8
 801f4ec:	2d0c      	cmp	r5, #12
 801f4ee:	bf38      	it	cc
 801f4f0:	250c      	movcc	r5, #12
 801f4f2:	2d00      	cmp	r5, #0
 801f4f4:	4606      	mov	r6, r0
 801f4f6:	db01      	blt.n	801f4fc <_malloc_r+0x1c>
 801f4f8:	42a9      	cmp	r1, r5
 801f4fa:	d904      	bls.n	801f506 <_malloc_r+0x26>
 801f4fc:	230c      	movs	r3, #12
 801f4fe:	6033      	str	r3, [r6, #0]
 801f500:	2000      	movs	r0, #0
 801f502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f5dc <_malloc_r+0xfc>
 801f50a:	f000 f869 	bl	801f5e0 <__malloc_lock>
 801f50e:	f8d8 3000 	ldr.w	r3, [r8]
 801f512:	461c      	mov	r4, r3
 801f514:	bb44      	cbnz	r4, 801f568 <_malloc_r+0x88>
 801f516:	4629      	mov	r1, r5
 801f518:	4630      	mov	r0, r6
 801f51a:	f7ff ffbf 	bl	801f49c <sbrk_aligned>
 801f51e:	1c43      	adds	r3, r0, #1
 801f520:	4604      	mov	r4, r0
 801f522:	d158      	bne.n	801f5d6 <_malloc_r+0xf6>
 801f524:	f8d8 4000 	ldr.w	r4, [r8]
 801f528:	4627      	mov	r7, r4
 801f52a:	2f00      	cmp	r7, #0
 801f52c:	d143      	bne.n	801f5b6 <_malloc_r+0xd6>
 801f52e:	2c00      	cmp	r4, #0
 801f530:	d04b      	beq.n	801f5ca <_malloc_r+0xea>
 801f532:	6823      	ldr	r3, [r4, #0]
 801f534:	4639      	mov	r1, r7
 801f536:	4630      	mov	r0, r6
 801f538:	eb04 0903 	add.w	r9, r4, r3
 801f53c:	f001 fe56 	bl	80211ec <_sbrk_r>
 801f540:	4581      	cmp	r9, r0
 801f542:	d142      	bne.n	801f5ca <_malloc_r+0xea>
 801f544:	6821      	ldr	r1, [r4, #0]
 801f546:	1a6d      	subs	r5, r5, r1
 801f548:	4629      	mov	r1, r5
 801f54a:	4630      	mov	r0, r6
 801f54c:	f7ff ffa6 	bl	801f49c <sbrk_aligned>
 801f550:	3001      	adds	r0, #1
 801f552:	d03a      	beq.n	801f5ca <_malloc_r+0xea>
 801f554:	6823      	ldr	r3, [r4, #0]
 801f556:	442b      	add	r3, r5
 801f558:	6023      	str	r3, [r4, #0]
 801f55a:	f8d8 3000 	ldr.w	r3, [r8]
 801f55e:	685a      	ldr	r2, [r3, #4]
 801f560:	bb62      	cbnz	r2, 801f5bc <_malloc_r+0xdc>
 801f562:	f8c8 7000 	str.w	r7, [r8]
 801f566:	e00f      	b.n	801f588 <_malloc_r+0xa8>
 801f568:	6822      	ldr	r2, [r4, #0]
 801f56a:	1b52      	subs	r2, r2, r5
 801f56c:	d420      	bmi.n	801f5b0 <_malloc_r+0xd0>
 801f56e:	2a0b      	cmp	r2, #11
 801f570:	d917      	bls.n	801f5a2 <_malloc_r+0xc2>
 801f572:	1961      	adds	r1, r4, r5
 801f574:	42a3      	cmp	r3, r4
 801f576:	6025      	str	r5, [r4, #0]
 801f578:	bf18      	it	ne
 801f57a:	6059      	strne	r1, [r3, #4]
 801f57c:	6863      	ldr	r3, [r4, #4]
 801f57e:	bf08      	it	eq
 801f580:	f8c8 1000 	streq.w	r1, [r8]
 801f584:	5162      	str	r2, [r4, r5]
 801f586:	604b      	str	r3, [r1, #4]
 801f588:	4630      	mov	r0, r6
 801f58a:	f000 f82f 	bl	801f5ec <__malloc_unlock>
 801f58e:	f104 000b 	add.w	r0, r4, #11
 801f592:	1d23      	adds	r3, r4, #4
 801f594:	f020 0007 	bic.w	r0, r0, #7
 801f598:	1ac2      	subs	r2, r0, r3
 801f59a:	bf1c      	itt	ne
 801f59c:	1a1b      	subne	r3, r3, r0
 801f59e:	50a3      	strne	r3, [r4, r2]
 801f5a0:	e7af      	b.n	801f502 <_malloc_r+0x22>
 801f5a2:	6862      	ldr	r2, [r4, #4]
 801f5a4:	42a3      	cmp	r3, r4
 801f5a6:	bf0c      	ite	eq
 801f5a8:	f8c8 2000 	streq.w	r2, [r8]
 801f5ac:	605a      	strne	r2, [r3, #4]
 801f5ae:	e7eb      	b.n	801f588 <_malloc_r+0xa8>
 801f5b0:	4623      	mov	r3, r4
 801f5b2:	6864      	ldr	r4, [r4, #4]
 801f5b4:	e7ae      	b.n	801f514 <_malloc_r+0x34>
 801f5b6:	463c      	mov	r4, r7
 801f5b8:	687f      	ldr	r7, [r7, #4]
 801f5ba:	e7b6      	b.n	801f52a <_malloc_r+0x4a>
 801f5bc:	461a      	mov	r2, r3
 801f5be:	685b      	ldr	r3, [r3, #4]
 801f5c0:	42a3      	cmp	r3, r4
 801f5c2:	d1fb      	bne.n	801f5bc <_malloc_r+0xdc>
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	6053      	str	r3, [r2, #4]
 801f5c8:	e7de      	b.n	801f588 <_malloc_r+0xa8>
 801f5ca:	230c      	movs	r3, #12
 801f5cc:	6033      	str	r3, [r6, #0]
 801f5ce:	4630      	mov	r0, r6
 801f5d0:	f000 f80c 	bl	801f5ec <__malloc_unlock>
 801f5d4:	e794      	b.n	801f500 <_malloc_r+0x20>
 801f5d6:	6005      	str	r5, [r0, #0]
 801f5d8:	e7d6      	b.n	801f588 <_malloc_r+0xa8>
 801f5da:	bf00      	nop
 801f5dc:	20012954 	.word	0x20012954

0801f5e0 <__malloc_lock>:
 801f5e0:	4801      	ldr	r0, [pc, #4]	@ (801f5e8 <__malloc_lock+0x8>)
 801f5e2:	f7ff b880 	b.w	801e6e6 <__retarget_lock_acquire_recursive>
 801f5e6:	bf00      	nop
 801f5e8:	2001294c 	.word	0x2001294c

0801f5ec <__malloc_unlock>:
 801f5ec:	4801      	ldr	r0, [pc, #4]	@ (801f5f4 <__malloc_unlock+0x8>)
 801f5ee:	f7ff b87b 	b.w	801e6e8 <__retarget_lock_release_recursive>
 801f5f2:	bf00      	nop
 801f5f4:	2001294c 	.word	0x2001294c

0801f5f8 <_Balloc>:
 801f5f8:	b570      	push	{r4, r5, r6, lr}
 801f5fa:	69c6      	ldr	r6, [r0, #28]
 801f5fc:	4604      	mov	r4, r0
 801f5fe:	460d      	mov	r5, r1
 801f600:	b976      	cbnz	r6, 801f620 <_Balloc+0x28>
 801f602:	2010      	movs	r0, #16
 801f604:	f7ff ff42 	bl	801f48c <malloc>
 801f608:	4602      	mov	r2, r0
 801f60a:	61e0      	str	r0, [r4, #28]
 801f60c:	b920      	cbnz	r0, 801f618 <_Balloc+0x20>
 801f60e:	4b18      	ldr	r3, [pc, #96]	@ (801f670 <_Balloc+0x78>)
 801f610:	4818      	ldr	r0, [pc, #96]	@ (801f674 <_Balloc+0x7c>)
 801f612:	216b      	movs	r1, #107	@ 0x6b
 801f614:	f7ff f886 	bl	801e724 <__assert_func>
 801f618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f61c:	6006      	str	r6, [r0, #0]
 801f61e:	60c6      	str	r6, [r0, #12]
 801f620:	69e6      	ldr	r6, [r4, #28]
 801f622:	68f3      	ldr	r3, [r6, #12]
 801f624:	b183      	cbz	r3, 801f648 <_Balloc+0x50>
 801f626:	69e3      	ldr	r3, [r4, #28]
 801f628:	68db      	ldr	r3, [r3, #12]
 801f62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f62e:	b9b8      	cbnz	r0, 801f660 <_Balloc+0x68>
 801f630:	2101      	movs	r1, #1
 801f632:	fa01 f605 	lsl.w	r6, r1, r5
 801f636:	1d72      	adds	r2, r6, #5
 801f638:	0092      	lsls	r2, r2, #2
 801f63a:	4620      	mov	r0, r4
 801f63c:	f001 fdf7 	bl	802122e <_calloc_r>
 801f640:	b160      	cbz	r0, 801f65c <_Balloc+0x64>
 801f642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f646:	e00e      	b.n	801f666 <_Balloc+0x6e>
 801f648:	2221      	movs	r2, #33	@ 0x21
 801f64a:	2104      	movs	r1, #4
 801f64c:	4620      	mov	r0, r4
 801f64e:	f001 fdee 	bl	802122e <_calloc_r>
 801f652:	69e3      	ldr	r3, [r4, #28]
 801f654:	60f0      	str	r0, [r6, #12]
 801f656:	68db      	ldr	r3, [r3, #12]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d1e4      	bne.n	801f626 <_Balloc+0x2e>
 801f65c:	2000      	movs	r0, #0
 801f65e:	bd70      	pop	{r4, r5, r6, pc}
 801f660:	6802      	ldr	r2, [r0, #0]
 801f662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f666:	2300      	movs	r3, #0
 801f668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f66c:	e7f7      	b.n	801f65e <_Balloc+0x66>
 801f66e:	bf00      	nop
 801f670:	08025e32 	.word	0x08025e32
 801f674:	080260b2 	.word	0x080260b2

0801f678 <_Bfree>:
 801f678:	b570      	push	{r4, r5, r6, lr}
 801f67a:	69c6      	ldr	r6, [r0, #28]
 801f67c:	4605      	mov	r5, r0
 801f67e:	460c      	mov	r4, r1
 801f680:	b976      	cbnz	r6, 801f6a0 <_Bfree+0x28>
 801f682:	2010      	movs	r0, #16
 801f684:	f7ff ff02 	bl	801f48c <malloc>
 801f688:	4602      	mov	r2, r0
 801f68a:	61e8      	str	r0, [r5, #28]
 801f68c:	b920      	cbnz	r0, 801f698 <_Bfree+0x20>
 801f68e:	4b09      	ldr	r3, [pc, #36]	@ (801f6b4 <_Bfree+0x3c>)
 801f690:	4809      	ldr	r0, [pc, #36]	@ (801f6b8 <_Bfree+0x40>)
 801f692:	218f      	movs	r1, #143	@ 0x8f
 801f694:	f7ff f846 	bl	801e724 <__assert_func>
 801f698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f69c:	6006      	str	r6, [r0, #0]
 801f69e:	60c6      	str	r6, [r0, #12]
 801f6a0:	b13c      	cbz	r4, 801f6b2 <_Bfree+0x3a>
 801f6a2:	69eb      	ldr	r3, [r5, #28]
 801f6a4:	6862      	ldr	r2, [r4, #4]
 801f6a6:	68db      	ldr	r3, [r3, #12]
 801f6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f6ac:	6021      	str	r1, [r4, #0]
 801f6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f6b2:	bd70      	pop	{r4, r5, r6, pc}
 801f6b4:	08025e32 	.word	0x08025e32
 801f6b8:	080260b2 	.word	0x080260b2

0801f6bc <__multadd>:
 801f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6c0:	690d      	ldr	r5, [r1, #16]
 801f6c2:	4607      	mov	r7, r0
 801f6c4:	460c      	mov	r4, r1
 801f6c6:	461e      	mov	r6, r3
 801f6c8:	f101 0c14 	add.w	ip, r1, #20
 801f6cc:	2000      	movs	r0, #0
 801f6ce:	f8dc 3000 	ldr.w	r3, [ip]
 801f6d2:	b299      	uxth	r1, r3
 801f6d4:	fb02 6101 	mla	r1, r2, r1, r6
 801f6d8:	0c1e      	lsrs	r6, r3, #16
 801f6da:	0c0b      	lsrs	r3, r1, #16
 801f6dc:	fb02 3306 	mla	r3, r2, r6, r3
 801f6e0:	b289      	uxth	r1, r1
 801f6e2:	3001      	adds	r0, #1
 801f6e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f6e8:	4285      	cmp	r5, r0
 801f6ea:	f84c 1b04 	str.w	r1, [ip], #4
 801f6ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f6f2:	dcec      	bgt.n	801f6ce <__multadd+0x12>
 801f6f4:	b30e      	cbz	r6, 801f73a <__multadd+0x7e>
 801f6f6:	68a3      	ldr	r3, [r4, #8]
 801f6f8:	42ab      	cmp	r3, r5
 801f6fa:	dc19      	bgt.n	801f730 <__multadd+0x74>
 801f6fc:	6861      	ldr	r1, [r4, #4]
 801f6fe:	4638      	mov	r0, r7
 801f700:	3101      	adds	r1, #1
 801f702:	f7ff ff79 	bl	801f5f8 <_Balloc>
 801f706:	4680      	mov	r8, r0
 801f708:	b928      	cbnz	r0, 801f716 <__multadd+0x5a>
 801f70a:	4602      	mov	r2, r0
 801f70c:	4b0c      	ldr	r3, [pc, #48]	@ (801f740 <__multadd+0x84>)
 801f70e:	480d      	ldr	r0, [pc, #52]	@ (801f744 <__multadd+0x88>)
 801f710:	21ba      	movs	r1, #186	@ 0xba
 801f712:	f7ff f807 	bl	801e724 <__assert_func>
 801f716:	6922      	ldr	r2, [r4, #16]
 801f718:	3202      	adds	r2, #2
 801f71a:	f104 010c 	add.w	r1, r4, #12
 801f71e:	0092      	lsls	r2, r2, #2
 801f720:	300c      	adds	r0, #12
 801f722:	f7fe ffea 	bl	801e6fa <memcpy>
 801f726:	4621      	mov	r1, r4
 801f728:	4638      	mov	r0, r7
 801f72a:	f7ff ffa5 	bl	801f678 <_Bfree>
 801f72e:	4644      	mov	r4, r8
 801f730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f734:	3501      	adds	r5, #1
 801f736:	615e      	str	r6, [r3, #20]
 801f738:	6125      	str	r5, [r4, #16]
 801f73a:	4620      	mov	r0, r4
 801f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f740:	080260a1 	.word	0x080260a1
 801f744:	080260b2 	.word	0x080260b2

0801f748 <__s2b>:
 801f748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f74c:	460c      	mov	r4, r1
 801f74e:	4615      	mov	r5, r2
 801f750:	461f      	mov	r7, r3
 801f752:	2209      	movs	r2, #9
 801f754:	3308      	adds	r3, #8
 801f756:	4606      	mov	r6, r0
 801f758:	fb93 f3f2 	sdiv	r3, r3, r2
 801f75c:	2100      	movs	r1, #0
 801f75e:	2201      	movs	r2, #1
 801f760:	429a      	cmp	r2, r3
 801f762:	db09      	blt.n	801f778 <__s2b+0x30>
 801f764:	4630      	mov	r0, r6
 801f766:	f7ff ff47 	bl	801f5f8 <_Balloc>
 801f76a:	b940      	cbnz	r0, 801f77e <__s2b+0x36>
 801f76c:	4602      	mov	r2, r0
 801f76e:	4b19      	ldr	r3, [pc, #100]	@ (801f7d4 <__s2b+0x8c>)
 801f770:	4819      	ldr	r0, [pc, #100]	@ (801f7d8 <__s2b+0x90>)
 801f772:	21d3      	movs	r1, #211	@ 0xd3
 801f774:	f7fe ffd6 	bl	801e724 <__assert_func>
 801f778:	0052      	lsls	r2, r2, #1
 801f77a:	3101      	adds	r1, #1
 801f77c:	e7f0      	b.n	801f760 <__s2b+0x18>
 801f77e:	9b08      	ldr	r3, [sp, #32]
 801f780:	6143      	str	r3, [r0, #20]
 801f782:	2d09      	cmp	r5, #9
 801f784:	f04f 0301 	mov.w	r3, #1
 801f788:	6103      	str	r3, [r0, #16]
 801f78a:	dd16      	ble.n	801f7ba <__s2b+0x72>
 801f78c:	f104 0909 	add.w	r9, r4, #9
 801f790:	46c8      	mov	r8, r9
 801f792:	442c      	add	r4, r5
 801f794:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f798:	4601      	mov	r1, r0
 801f79a:	3b30      	subs	r3, #48	@ 0x30
 801f79c:	220a      	movs	r2, #10
 801f79e:	4630      	mov	r0, r6
 801f7a0:	f7ff ff8c 	bl	801f6bc <__multadd>
 801f7a4:	45a0      	cmp	r8, r4
 801f7a6:	d1f5      	bne.n	801f794 <__s2b+0x4c>
 801f7a8:	f1a5 0408 	sub.w	r4, r5, #8
 801f7ac:	444c      	add	r4, r9
 801f7ae:	1b2d      	subs	r5, r5, r4
 801f7b0:	1963      	adds	r3, r4, r5
 801f7b2:	42bb      	cmp	r3, r7
 801f7b4:	db04      	blt.n	801f7c0 <__s2b+0x78>
 801f7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f7ba:	340a      	adds	r4, #10
 801f7bc:	2509      	movs	r5, #9
 801f7be:	e7f6      	b.n	801f7ae <__s2b+0x66>
 801f7c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f7c4:	4601      	mov	r1, r0
 801f7c6:	3b30      	subs	r3, #48	@ 0x30
 801f7c8:	220a      	movs	r2, #10
 801f7ca:	4630      	mov	r0, r6
 801f7cc:	f7ff ff76 	bl	801f6bc <__multadd>
 801f7d0:	e7ee      	b.n	801f7b0 <__s2b+0x68>
 801f7d2:	bf00      	nop
 801f7d4:	080260a1 	.word	0x080260a1
 801f7d8:	080260b2 	.word	0x080260b2

0801f7dc <__hi0bits>:
 801f7dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f7e0:	4603      	mov	r3, r0
 801f7e2:	bf36      	itet	cc
 801f7e4:	0403      	lslcc	r3, r0, #16
 801f7e6:	2000      	movcs	r0, #0
 801f7e8:	2010      	movcc	r0, #16
 801f7ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f7ee:	bf3c      	itt	cc
 801f7f0:	021b      	lslcc	r3, r3, #8
 801f7f2:	3008      	addcc	r0, #8
 801f7f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f7f8:	bf3c      	itt	cc
 801f7fa:	011b      	lslcc	r3, r3, #4
 801f7fc:	3004      	addcc	r0, #4
 801f7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f802:	bf3c      	itt	cc
 801f804:	009b      	lslcc	r3, r3, #2
 801f806:	3002      	addcc	r0, #2
 801f808:	2b00      	cmp	r3, #0
 801f80a:	db05      	blt.n	801f818 <__hi0bits+0x3c>
 801f80c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f810:	f100 0001 	add.w	r0, r0, #1
 801f814:	bf08      	it	eq
 801f816:	2020      	moveq	r0, #32
 801f818:	4770      	bx	lr

0801f81a <__lo0bits>:
 801f81a:	6803      	ldr	r3, [r0, #0]
 801f81c:	4602      	mov	r2, r0
 801f81e:	f013 0007 	ands.w	r0, r3, #7
 801f822:	d00b      	beq.n	801f83c <__lo0bits+0x22>
 801f824:	07d9      	lsls	r1, r3, #31
 801f826:	d421      	bmi.n	801f86c <__lo0bits+0x52>
 801f828:	0798      	lsls	r0, r3, #30
 801f82a:	bf49      	itett	mi
 801f82c:	085b      	lsrmi	r3, r3, #1
 801f82e:	089b      	lsrpl	r3, r3, #2
 801f830:	2001      	movmi	r0, #1
 801f832:	6013      	strmi	r3, [r2, #0]
 801f834:	bf5c      	itt	pl
 801f836:	6013      	strpl	r3, [r2, #0]
 801f838:	2002      	movpl	r0, #2
 801f83a:	4770      	bx	lr
 801f83c:	b299      	uxth	r1, r3
 801f83e:	b909      	cbnz	r1, 801f844 <__lo0bits+0x2a>
 801f840:	0c1b      	lsrs	r3, r3, #16
 801f842:	2010      	movs	r0, #16
 801f844:	b2d9      	uxtb	r1, r3
 801f846:	b909      	cbnz	r1, 801f84c <__lo0bits+0x32>
 801f848:	3008      	adds	r0, #8
 801f84a:	0a1b      	lsrs	r3, r3, #8
 801f84c:	0719      	lsls	r1, r3, #28
 801f84e:	bf04      	itt	eq
 801f850:	091b      	lsreq	r3, r3, #4
 801f852:	3004      	addeq	r0, #4
 801f854:	0799      	lsls	r1, r3, #30
 801f856:	bf04      	itt	eq
 801f858:	089b      	lsreq	r3, r3, #2
 801f85a:	3002      	addeq	r0, #2
 801f85c:	07d9      	lsls	r1, r3, #31
 801f85e:	d403      	bmi.n	801f868 <__lo0bits+0x4e>
 801f860:	085b      	lsrs	r3, r3, #1
 801f862:	f100 0001 	add.w	r0, r0, #1
 801f866:	d003      	beq.n	801f870 <__lo0bits+0x56>
 801f868:	6013      	str	r3, [r2, #0]
 801f86a:	4770      	bx	lr
 801f86c:	2000      	movs	r0, #0
 801f86e:	4770      	bx	lr
 801f870:	2020      	movs	r0, #32
 801f872:	4770      	bx	lr

0801f874 <__i2b>:
 801f874:	b510      	push	{r4, lr}
 801f876:	460c      	mov	r4, r1
 801f878:	2101      	movs	r1, #1
 801f87a:	f7ff febd 	bl	801f5f8 <_Balloc>
 801f87e:	4602      	mov	r2, r0
 801f880:	b928      	cbnz	r0, 801f88e <__i2b+0x1a>
 801f882:	4b05      	ldr	r3, [pc, #20]	@ (801f898 <__i2b+0x24>)
 801f884:	4805      	ldr	r0, [pc, #20]	@ (801f89c <__i2b+0x28>)
 801f886:	f240 1145 	movw	r1, #325	@ 0x145
 801f88a:	f7fe ff4b 	bl	801e724 <__assert_func>
 801f88e:	2301      	movs	r3, #1
 801f890:	6144      	str	r4, [r0, #20]
 801f892:	6103      	str	r3, [r0, #16]
 801f894:	bd10      	pop	{r4, pc}
 801f896:	bf00      	nop
 801f898:	080260a1 	.word	0x080260a1
 801f89c:	080260b2 	.word	0x080260b2

0801f8a0 <__multiply>:
 801f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8a4:	4614      	mov	r4, r2
 801f8a6:	690a      	ldr	r2, [r1, #16]
 801f8a8:	6923      	ldr	r3, [r4, #16]
 801f8aa:	429a      	cmp	r2, r3
 801f8ac:	bfa8      	it	ge
 801f8ae:	4623      	movge	r3, r4
 801f8b0:	460f      	mov	r7, r1
 801f8b2:	bfa4      	itt	ge
 801f8b4:	460c      	movge	r4, r1
 801f8b6:	461f      	movge	r7, r3
 801f8b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f8bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f8c0:	68a3      	ldr	r3, [r4, #8]
 801f8c2:	6861      	ldr	r1, [r4, #4]
 801f8c4:	eb0a 0609 	add.w	r6, sl, r9
 801f8c8:	42b3      	cmp	r3, r6
 801f8ca:	b085      	sub	sp, #20
 801f8cc:	bfb8      	it	lt
 801f8ce:	3101      	addlt	r1, #1
 801f8d0:	f7ff fe92 	bl	801f5f8 <_Balloc>
 801f8d4:	b930      	cbnz	r0, 801f8e4 <__multiply+0x44>
 801f8d6:	4602      	mov	r2, r0
 801f8d8:	4b44      	ldr	r3, [pc, #272]	@ (801f9ec <__multiply+0x14c>)
 801f8da:	4845      	ldr	r0, [pc, #276]	@ (801f9f0 <__multiply+0x150>)
 801f8dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f8e0:	f7fe ff20 	bl	801e724 <__assert_func>
 801f8e4:	f100 0514 	add.w	r5, r0, #20
 801f8e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f8ec:	462b      	mov	r3, r5
 801f8ee:	2200      	movs	r2, #0
 801f8f0:	4543      	cmp	r3, r8
 801f8f2:	d321      	bcc.n	801f938 <__multiply+0x98>
 801f8f4:	f107 0114 	add.w	r1, r7, #20
 801f8f8:	f104 0214 	add.w	r2, r4, #20
 801f8fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f900:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f904:	9302      	str	r3, [sp, #8]
 801f906:	1b13      	subs	r3, r2, r4
 801f908:	3b15      	subs	r3, #21
 801f90a:	f023 0303 	bic.w	r3, r3, #3
 801f90e:	3304      	adds	r3, #4
 801f910:	f104 0715 	add.w	r7, r4, #21
 801f914:	42ba      	cmp	r2, r7
 801f916:	bf38      	it	cc
 801f918:	2304      	movcc	r3, #4
 801f91a:	9301      	str	r3, [sp, #4]
 801f91c:	9b02      	ldr	r3, [sp, #8]
 801f91e:	9103      	str	r1, [sp, #12]
 801f920:	428b      	cmp	r3, r1
 801f922:	d80c      	bhi.n	801f93e <__multiply+0x9e>
 801f924:	2e00      	cmp	r6, #0
 801f926:	dd03      	ble.n	801f930 <__multiply+0x90>
 801f928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d05b      	beq.n	801f9e8 <__multiply+0x148>
 801f930:	6106      	str	r6, [r0, #16]
 801f932:	b005      	add	sp, #20
 801f934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f938:	f843 2b04 	str.w	r2, [r3], #4
 801f93c:	e7d8      	b.n	801f8f0 <__multiply+0x50>
 801f93e:	f8b1 a000 	ldrh.w	sl, [r1]
 801f942:	f1ba 0f00 	cmp.w	sl, #0
 801f946:	d024      	beq.n	801f992 <__multiply+0xf2>
 801f948:	f104 0e14 	add.w	lr, r4, #20
 801f94c:	46a9      	mov	r9, r5
 801f94e:	f04f 0c00 	mov.w	ip, #0
 801f952:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f956:	f8d9 3000 	ldr.w	r3, [r9]
 801f95a:	fa1f fb87 	uxth.w	fp, r7
 801f95e:	b29b      	uxth	r3, r3
 801f960:	fb0a 330b 	mla	r3, sl, fp, r3
 801f964:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f968:	f8d9 7000 	ldr.w	r7, [r9]
 801f96c:	4463      	add	r3, ip
 801f96e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f972:	fb0a c70b 	mla	r7, sl, fp, ip
 801f976:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f97a:	b29b      	uxth	r3, r3
 801f97c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f980:	4572      	cmp	r2, lr
 801f982:	f849 3b04 	str.w	r3, [r9], #4
 801f986:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f98a:	d8e2      	bhi.n	801f952 <__multiply+0xb2>
 801f98c:	9b01      	ldr	r3, [sp, #4]
 801f98e:	f845 c003 	str.w	ip, [r5, r3]
 801f992:	9b03      	ldr	r3, [sp, #12]
 801f994:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f998:	3104      	adds	r1, #4
 801f99a:	f1b9 0f00 	cmp.w	r9, #0
 801f99e:	d021      	beq.n	801f9e4 <__multiply+0x144>
 801f9a0:	682b      	ldr	r3, [r5, #0]
 801f9a2:	f104 0c14 	add.w	ip, r4, #20
 801f9a6:	46ae      	mov	lr, r5
 801f9a8:	f04f 0a00 	mov.w	sl, #0
 801f9ac:	f8bc b000 	ldrh.w	fp, [ip]
 801f9b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f9b4:	fb09 770b 	mla	r7, r9, fp, r7
 801f9b8:	4457      	add	r7, sl
 801f9ba:	b29b      	uxth	r3, r3
 801f9bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f9c0:	f84e 3b04 	str.w	r3, [lr], #4
 801f9c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f9c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f9cc:	f8be 3000 	ldrh.w	r3, [lr]
 801f9d0:	fb09 330a 	mla	r3, r9, sl, r3
 801f9d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f9d8:	4562      	cmp	r2, ip
 801f9da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f9de:	d8e5      	bhi.n	801f9ac <__multiply+0x10c>
 801f9e0:	9f01      	ldr	r7, [sp, #4]
 801f9e2:	51eb      	str	r3, [r5, r7]
 801f9e4:	3504      	adds	r5, #4
 801f9e6:	e799      	b.n	801f91c <__multiply+0x7c>
 801f9e8:	3e01      	subs	r6, #1
 801f9ea:	e79b      	b.n	801f924 <__multiply+0x84>
 801f9ec:	080260a1 	.word	0x080260a1
 801f9f0:	080260b2 	.word	0x080260b2

0801f9f4 <__pow5mult>:
 801f9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f9f8:	4615      	mov	r5, r2
 801f9fa:	f012 0203 	ands.w	r2, r2, #3
 801f9fe:	4607      	mov	r7, r0
 801fa00:	460e      	mov	r6, r1
 801fa02:	d007      	beq.n	801fa14 <__pow5mult+0x20>
 801fa04:	4c25      	ldr	r4, [pc, #148]	@ (801fa9c <__pow5mult+0xa8>)
 801fa06:	3a01      	subs	r2, #1
 801fa08:	2300      	movs	r3, #0
 801fa0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fa0e:	f7ff fe55 	bl	801f6bc <__multadd>
 801fa12:	4606      	mov	r6, r0
 801fa14:	10ad      	asrs	r5, r5, #2
 801fa16:	d03d      	beq.n	801fa94 <__pow5mult+0xa0>
 801fa18:	69fc      	ldr	r4, [r7, #28]
 801fa1a:	b97c      	cbnz	r4, 801fa3c <__pow5mult+0x48>
 801fa1c:	2010      	movs	r0, #16
 801fa1e:	f7ff fd35 	bl	801f48c <malloc>
 801fa22:	4602      	mov	r2, r0
 801fa24:	61f8      	str	r0, [r7, #28]
 801fa26:	b928      	cbnz	r0, 801fa34 <__pow5mult+0x40>
 801fa28:	4b1d      	ldr	r3, [pc, #116]	@ (801faa0 <__pow5mult+0xac>)
 801fa2a:	481e      	ldr	r0, [pc, #120]	@ (801faa4 <__pow5mult+0xb0>)
 801fa2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801fa30:	f7fe fe78 	bl	801e724 <__assert_func>
 801fa34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fa38:	6004      	str	r4, [r0, #0]
 801fa3a:	60c4      	str	r4, [r0, #12]
 801fa3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801fa40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fa44:	b94c      	cbnz	r4, 801fa5a <__pow5mult+0x66>
 801fa46:	f240 2171 	movw	r1, #625	@ 0x271
 801fa4a:	4638      	mov	r0, r7
 801fa4c:	f7ff ff12 	bl	801f874 <__i2b>
 801fa50:	2300      	movs	r3, #0
 801fa52:	f8c8 0008 	str.w	r0, [r8, #8]
 801fa56:	4604      	mov	r4, r0
 801fa58:	6003      	str	r3, [r0, #0]
 801fa5a:	f04f 0900 	mov.w	r9, #0
 801fa5e:	07eb      	lsls	r3, r5, #31
 801fa60:	d50a      	bpl.n	801fa78 <__pow5mult+0x84>
 801fa62:	4631      	mov	r1, r6
 801fa64:	4622      	mov	r2, r4
 801fa66:	4638      	mov	r0, r7
 801fa68:	f7ff ff1a 	bl	801f8a0 <__multiply>
 801fa6c:	4631      	mov	r1, r6
 801fa6e:	4680      	mov	r8, r0
 801fa70:	4638      	mov	r0, r7
 801fa72:	f7ff fe01 	bl	801f678 <_Bfree>
 801fa76:	4646      	mov	r6, r8
 801fa78:	106d      	asrs	r5, r5, #1
 801fa7a:	d00b      	beq.n	801fa94 <__pow5mult+0xa0>
 801fa7c:	6820      	ldr	r0, [r4, #0]
 801fa7e:	b938      	cbnz	r0, 801fa90 <__pow5mult+0x9c>
 801fa80:	4622      	mov	r2, r4
 801fa82:	4621      	mov	r1, r4
 801fa84:	4638      	mov	r0, r7
 801fa86:	f7ff ff0b 	bl	801f8a0 <__multiply>
 801fa8a:	6020      	str	r0, [r4, #0]
 801fa8c:	f8c0 9000 	str.w	r9, [r0]
 801fa90:	4604      	mov	r4, r0
 801fa92:	e7e4      	b.n	801fa5e <__pow5mult+0x6a>
 801fa94:	4630      	mov	r0, r6
 801fa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa9a:	bf00      	nop
 801fa9c:	0802610c 	.word	0x0802610c
 801faa0:	08025e32 	.word	0x08025e32
 801faa4:	080260b2 	.word	0x080260b2

0801faa8 <__lshift>:
 801faa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801faac:	460c      	mov	r4, r1
 801faae:	6849      	ldr	r1, [r1, #4]
 801fab0:	6923      	ldr	r3, [r4, #16]
 801fab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fab6:	68a3      	ldr	r3, [r4, #8]
 801fab8:	4607      	mov	r7, r0
 801faba:	4691      	mov	r9, r2
 801fabc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fac0:	f108 0601 	add.w	r6, r8, #1
 801fac4:	42b3      	cmp	r3, r6
 801fac6:	db0b      	blt.n	801fae0 <__lshift+0x38>
 801fac8:	4638      	mov	r0, r7
 801faca:	f7ff fd95 	bl	801f5f8 <_Balloc>
 801face:	4605      	mov	r5, r0
 801fad0:	b948      	cbnz	r0, 801fae6 <__lshift+0x3e>
 801fad2:	4602      	mov	r2, r0
 801fad4:	4b28      	ldr	r3, [pc, #160]	@ (801fb78 <__lshift+0xd0>)
 801fad6:	4829      	ldr	r0, [pc, #164]	@ (801fb7c <__lshift+0xd4>)
 801fad8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801fadc:	f7fe fe22 	bl	801e724 <__assert_func>
 801fae0:	3101      	adds	r1, #1
 801fae2:	005b      	lsls	r3, r3, #1
 801fae4:	e7ee      	b.n	801fac4 <__lshift+0x1c>
 801fae6:	2300      	movs	r3, #0
 801fae8:	f100 0114 	add.w	r1, r0, #20
 801faec:	f100 0210 	add.w	r2, r0, #16
 801faf0:	4618      	mov	r0, r3
 801faf2:	4553      	cmp	r3, sl
 801faf4:	db33      	blt.n	801fb5e <__lshift+0xb6>
 801faf6:	6920      	ldr	r0, [r4, #16]
 801faf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fafc:	f104 0314 	add.w	r3, r4, #20
 801fb00:	f019 091f 	ands.w	r9, r9, #31
 801fb04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fb08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fb0c:	d02b      	beq.n	801fb66 <__lshift+0xbe>
 801fb0e:	f1c9 0e20 	rsb	lr, r9, #32
 801fb12:	468a      	mov	sl, r1
 801fb14:	2200      	movs	r2, #0
 801fb16:	6818      	ldr	r0, [r3, #0]
 801fb18:	fa00 f009 	lsl.w	r0, r0, r9
 801fb1c:	4310      	orrs	r0, r2
 801fb1e:	f84a 0b04 	str.w	r0, [sl], #4
 801fb22:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb26:	459c      	cmp	ip, r3
 801fb28:	fa22 f20e 	lsr.w	r2, r2, lr
 801fb2c:	d8f3      	bhi.n	801fb16 <__lshift+0x6e>
 801fb2e:	ebac 0304 	sub.w	r3, ip, r4
 801fb32:	3b15      	subs	r3, #21
 801fb34:	f023 0303 	bic.w	r3, r3, #3
 801fb38:	3304      	adds	r3, #4
 801fb3a:	f104 0015 	add.w	r0, r4, #21
 801fb3e:	4584      	cmp	ip, r0
 801fb40:	bf38      	it	cc
 801fb42:	2304      	movcc	r3, #4
 801fb44:	50ca      	str	r2, [r1, r3]
 801fb46:	b10a      	cbz	r2, 801fb4c <__lshift+0xa4>
 801fb48:	f108 0602 	add.w	r6, r8, #2
 801fb4c:	3e01      	subs	r6, #1
 801fb4e:	4638      	mov	r0, r7
 801fb50:	612e      	str	r6, [r5, #16]
 801fb52:	4621      	mov	r1, r4
 801fb54:	f7ff fd90 	bl	801f678 <_Bfree>
 801fb58:	4628      	mov	r0, r5
 801fb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb5e:	f842 0f04 	str.w	r0, [r2, #4]!
 801fb62:	3301      	adds	r3, #1
 801fb64:	e7c5      	b.n	801faf2 <__lshift+0x4a>
 801fb66:	3904      	subs	r1, #4
 801fb68:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb6c:	f841 2f04 	str.w	r2, [r1, #4]!
 801fb70:	459c      	cmp	ip, r3
 801fb72:	d8f9      	bhi.n	801fb68 <__lshift+0xc0>
 801fb74:	e7ea      	b.n	801fb4c <__lshift+0xa4>
 801fb76:	bf00      	nop
 801fb78:	080260a1 	.word	0x080260a1
 801fb7c:	080260b2 	.word	0x080260b2

0801fb80 <__mcmp>:
 801fb80:	690a      	ldr	r2, [r1, #16]
 801fb82:	4603      	mov	r3, r0
 801fb84:	6900      	ldr	r0, [r0, #16]
 801fb86:	1a80      	subs	r0, r0, r2
 801fb88:	b530      	push	{r4, r5, lr}
 801fb8a:	d10e      	bne.n	801fbaa <__mcmp+0x2a>
 801fb8c:	3314      	adds	r3, #20
 801fb8e:	3114      	adds	r1, #20
 801fb90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801fb94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fb98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fb9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fba0:	4295      	cmp	r5, r2
 801fba2:	d003      	beq.n	801fbac <__mcmp+0x2c>
 801fba4:	d205      	bcs.n	801fbb2 <__mcmp+0x32>
 801fba6:	f04f 30ff 	mov.w	r0, #4294967295
 801fbaa:	bd30      	pop	{r4, r5, pc}
 801fbac:	42a3      	cmp	r3, r4
 801fbae:	d3f3      	bcc.n	801fb98 <__mcmp+0x18>
 801fbb0:	e7fb      	b.n	801fbaa <__mcmp+0x2a>
 801fbb2:	2001      	movs	r0, #1
 801fbb4:	e7f9      	b.n	801fbaa <__mcmp+0x2a>
	...

0801fbb8 <__mdiff>:
 801fbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbbc:	4689      	mov	r9, r1
 801fbbe:	4606      	mov	r6, r0
 801fbc0:	4611      	mov	r1, r2
 801fbc2:	4648      	mov	r0, r9
 801fbc4:	4614      	mov	r4, r2
 801fbc6:	f7ff ffdb 	bl	801fb80 <__mcmp>
 801fbca:	1e05      	subs	r5, r0, #0
 801fbcc:	d112      	bne.n	801fbf4 <__mdiff+0x3c>
 801fbce:	4629      	mov	r1, r5
 801fbd0:	4630      	mov	r0, r6
 801fbd2:	f7ff fd11 	bl	801f5f8 <_Balloc>
 801fbd6:	4602      	mov	r2, r0
 801fbd8:	b928      	cbnz	r0, 801fbe6 <__mdiff+0x2e>
 801fbda:	4b3f      	ldr	r3, [pc, #252]	@ (801fcd8 <__mdiff+0x120>)
 801fbdc:	f240 2137 	movw	r1, #567	@ 0x237
 801fbe0:	483e      	ldr	r0, [pc, #248]	@ (801fcdc <__mdiff+0x124>)
 801fbe2:	f7fe fd9f 	bl	801e724 <__assert_func>
 801fbe6:	2301      	movs	r3, #1
 801fbe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fbec:	4610      	mov	r0, r2
 801fbee:	b003      	add	sp, #12
 801fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf4:	bfbc      	itt	lt
 801fbf6:	464b      	movlt	r3, r9
 801fbf8:	46a1      	movlt	r9, r4
 801fbfa:	4630      	mov	r0, r6
 801fbfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fc00:	bfba      	itte	lt
 801fc02:	461c      	movlt	r4, r3
 801fc04:	2501      	movlt	r5, #1
 801fc06:	2500      	movge	r5, #0
 801fc08:	f7ff fcf6 	bl	801f5f8 <_Balloc>
 801fc0c:	4602      	mov	r2, r0
 801fc0e:	b918      	cbnz	r0, 801fc18 <__mdiff+0x60>
 801fc10:	4b31      	ldr	r3, [pc, #196]	@ (801fcd8 <__mdiff+0x120>)
 801fc12:	f240 2145 	movw	r1, #581	@ 0x245
 801fc16:	e7e3      	b.n	801fbe0 <__mdiff+0x28>
 801fc18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801fc1c:	6926      	ldr	r6, [r4, #16]
 801fc1e:	60c5      	str	r5, [r0, #12]
 801fc20:	f109 0310 	add.w	r3, r9, #16
 801fc24:	f109 0514 	add.w	r5, r9, #20
 801fc28:	f104 0e14 	add.w	lr, r4, #20
 801fc2c:	f100 0b14 	add.w	fp, r0, #20
 801fc30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801fc34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801fc38:	9301      	str	r3, [sp, #4]
 801fc3a:	46d9      	mov	r9, fp
 801fc3c:	f04f 0c00 	mov.w	ip, #0
 801fc40:	9b01      	ldr	r3, [sp, #4]
 801fc42:	f85e 0b04 	ldr.w	r0, [lr], #4
 801fc46:	f853 af04 	ldr.w	sl, [r3, #4]!
 801fc4a:	9301      	str	r3, [sp, #4]
 801fc4c:	fa1f f38a 	uxth.w	r3, sl
 801fc50:	4619      	mov	r1, r3
 801fc52:	b283      	uxth	r3, r0
 801fc54:	1acb      	subs	r3, r1, r3
 801fc56:	0c00      	lsrs	r0, r0, #16
 801fc58:	4463      	add	r3, ip
 801fc5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801fc5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801fc62:	b29b      	uxth	r3, r3
 801fc64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801fc68:	4576      	cmp	r6, lr
 801fc6a:	f849 3b04 	str.w	r3, [r9], #4
 801fc6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fc72:	d8e5      	bhi.n	801fc40 <__mdiff+0x88>
 801fc74:	1b33      	subs	r3, r6, r4
 801fc76:	3b15      	subs	r3, #21
 801fc78:	f023 0303 	bic.w	r3, r3, #3
 801fc7c:	3415      	adds	r4, #21
 801fc7e:	3304      	adds	r3, #4
 801fc80:	42a6      	cmp	r6, r4
 801fc82:	bf38      	it	cc
 801fc84:	2304      	movcc	r3, #4
 801fc86:	441d      	add	r5, r3
 801fc88:	445b      	add	r3, fp
 801fc8a:	461e      	mov	r6, r3
 801fc8c:	462c      	mov	r4, r5
 801fc8e:	4544      	cmp	r4, r8
 801fc90:	d30e      	bcc.n	801fcb0 <__mdiff+0xf8>
 801fc92:	f108 0103 	add.w	r1, r8, #3
 801fc96:	1b49      	subs	r1, r1, r5
 801fc98:	f021 0103 	bic.w	r1, r1, #3
 801fc9c:	3d03      	subs	r5, #3
 801fc9e:	45a8      	cmp	r8, r5
 801fca0:	bf38      	it	cc
 801fca2:	2100      	movcc	r1, #0
 801fca4:	440b      	add	r3, r1
 801fca6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fcaa:	b191      	cbz	r1, 801fcd2 <__mdiff+0x11a>
 801fcac:	6117      	str	r7, [r2, #16]
 801fcae:	e79d      	b.n	801fbec <__mdiff+0x34>
 801fcb0:	f854 1b04 	ldr.w	r1, [r4], #4
 801fcb4:	46e6      	mov	lr, ip
 801fcb6:	0c08      	lsrs	r0, r1, #16
 801fcb8:	fa1c fc81 	uxtah	ip, ip, r1
 801fcbc:	4471      	add	r1, lr
 801fcbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801fcc2:	b289      	uxth	r1, r1
 801fcc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801fcc8:	f846 1b04 	str.w	r1, [r6], #4
 801fccc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fcd0:	e7dd      	b.n	801fc8e <__mdiff+0xd6>
 801fcd2:	3f01      	subs	r7, #1
 801fcd4:	e7e7      	b.n	801fca6 <__mdiff+0xee>
 801fcd6:	bf00      	nop
 801fcd8:	080260a1 	.word	0x080260a1
 801fcdc:	080260b2 	.word	0x080260b2

0801fce0 <__ulp>:
 801fce0:	b082      	sub	sp, #8
 801fce2:	ed8d 0b00 	vstr	d0, [sp]
 801fce6:	9a01      	ldr	r2, [sp, #4]
 801fce8:	4b0f      	ldr	r3, [pc, #60]	@ (801fd28 <__ulp+0x48>)
 801fcea:	4013      	ands	r3, r2
 801fcec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	dc08      	bgt.n	801fd06 <__ulp+0x26>
 801fcf4:	425b      	negs	r3, r3
 801fcf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801fcfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 801fcfe:	da04      	bge.n	801fd0a <__ulp+0x2a>
 801fd00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801fd04:	4113      	asrs	r3, r2
 801fd06:	2200      	movs	r2, #0
 801fd08:	e008      	b.n	801fd1c <__ulp+0x3c>
 801fd0a:	f1a2 0314 	sub.w	r3, r2, #20
 801fd0e:	2b1e      	cmp	r3, #30
 801fd10:	bfda      	itte	le
 801fd12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801fd16:	40da      	lsrle	r2, r3
 801fd18:	2201      	movgt	r2, #1
 801fd1a:	2300      	movs	r3, #0
 801fd1c:	4619      	mov	r1, r3
 801fd1e:	4610      	mov	r0, r2
 801fd20:	ec41 0b10 	vmov	d0, r0, r1
 801fd24:	b002      	add	sp, #8
 801fd26:	4770      	bx	lr
 801fd28:	7ff00000 	.word	0x7ff00000

0801fd2c <__b2d>:
 801fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd30:	6906      	ldr	r6, [r0, #16]
 801fd32:	f100 0814 	add.w	r8, r0, #20
 801fd36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801fd3a:	1f37      	subs	r7, r6, #4
 801fd3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801fd40:	4610      	mov	r0, r2
 801fd42:	f7ff fd4b 	bl	801f7dc <__hi0bits>
 801fd46:	f1c0 0320 	rsb	r3, r0, #32
 801fd4a:	280a      	cmp	r0, #10
 801fd4c:	600b      	str	r3, [r1, #0]
 801fd4e:	491b      	ldr	r1, [pc, #108]	@ (801fdbc <__b2d+0x90>)
 801fd50:	dc15      	bgt.n	801fd7e <__b2d+0x52>
 801fd52:	f1c0 0c0b 	rsb	ip, r0, #11
 801fd56:	fa22 f30c 	lsr.w	r3, r2, ip
 801fd5a:	45b8      	cmp	r8, r7
 801fd5c:	ea43 0501 	orr.w	r5, r3, r1
 801fd60:	bf34      	ite	cc
 801fd62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fd66:	2300      	movcs	r3, #0
 801fd68:	3015      	adds	r0, #21
 801fd6a:	fa02 f000 	lsl.w	r0, r2, r0
 801fd6e:	fa23 f30c 	lsr.w	r3, r3, ip
 801fd72:	4303      	orrs	r3, r0
 801fd74:	461c      	mov	r4, r3
 801fd76:	ec45 4b10 	vmov	d0, r4, r5
 801fd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd7e:	45b8      	cmp	r8, r7
 801fd80:	bf3a      	itte	cc
 801fd82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fd86:	f1a6 0708 	subcc.w	r7, r6, #8
 801fd8a:	2300      	movcs	r3, #0
 801fd8c:	380b      	subs	r0, #11
 801fd8e:	d012      	beq.n	801fdb6 <__b2d+0x8a>
 801fd90:	f1c0 0120 	rsb	r1, r0, #32
 801fd94:	fa23 f401 	lsr.w	r4, r3, r1
 801fd98:	4082      	lsls	r2, r0
 801fd9a:	4322      	orrs	r2, r4
 801fd9c:	4547      	cmp	r7, r8
 801fd9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801fda2:	bf8c      	ite	hi
 801fda4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801fda8:	2200      	movls	r2, #0
 801fdaa:	4083      	lsls	r3, r0
 801fdac:	40ca      	lsrs	r2, r1
 801fdae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801fdb2:	4313      	orrs	r3, r2
 801fdb4:	e7de      	b.n	801fd74 <__b2d+0x48>
 801fdb6:	ea42 0501 	orr.w	r5, r2, r1
 801fdba:	e7db      	b.n	801fd74 <__b2d+0x48>
 801fdbc:	3ff00000 	.word	0x3ff00000

0801fdc0 <__d2b>:
 801fdc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fdc4:	460f      	mov	r7, r1
 801fdc6:	2101      	movs	r1, #1
 801fdc8:	ec59 8b10 	vmov	r8, r9, d0
 801fdcc:	4616      	mov	r6, r2
 801fdce:	f7ff fc13 	bl	801f5f8 <_Balloc>
 801fdd2:	4604      	mov	r4, r0
 801fdd4:	b930      	cbnz	r0, 801fde4 <__d2b+0x24>
 801fdd6:	4602      	mov	r2, r0
 801fdd8:	4b23      	ldr	r3, [pc, #140]	@ (801fe68 <__d2b+0xa8>)
 801fdda:	4824      	ldr	r0, [pc, #144]	@ (801fe6c <__d2b+0xac>)
 801fddc:	f240 310f 	movw	r1, #783	@ 0x30f
 801fde0:	f7fe fca0 	bl	801e724 <__assert_func>
 801fde4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fde8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fdec:	b10d      	cbz	r5, 801fdf2 <__d2b+0x32>
 801fdee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fdf2:	9301      	str	r3, [sp, #4]
 801fdf4:	f1b8 0300 	subs.w	r3, r8, #0
 801fdf8:	d023      	beq.n	801fe42 <__d2b+0x82>
 801fdfa:	4668      	mov	r0, sp
 801fdfc:	9300      	str	r3, [sp, #0]
 801fdfe:	f7ff fd0c 	bl	801f81a <__lo0bits>
 801fe02:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fe06:	b1d0      	cbz	r0, 801fe3e <__d2b+0x7e>
 801fe08:	f1c0 0320 	rsb	r3, r0, #32
 801fe0c:	fa02 f303 	lsl.w	r3, r2, r3
 801fe10:	430b      	orrs	r3, r1
 801fe12:	40c2      	lsrs	r2, r0
 801fe14:	6163      	str	r3, [r4, #20]
 801fe16:	9201      	str	r2, [sp, #4]
 801fe18:	9b01      	ldr	r3, [sp, #4]
 801fe1a:	61a3      	str	r3, [r4, #24]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	bf0c      	ite	eq
 801fe20:	2201      	moveq	r2, #1
 801fe22:	2202      	movne	r2, #2
 801fe24:	6122      	str	r2, [r4, #16]
 801fe26:	b1a5      	cbz	r5, 801fe52 <__d2b+0x92>
 801fe28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801fe2c:	4405      	add	r5, r0
 801fe2e:	603d      	str	r5, [r7, #0]
 801fe30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801fe34:	6030      	str	r0, [r6, #0]
 801fe36:	4620      	mov	r0, r4
 801fe38:	b003      	add	sp, #12
 801fe3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe3e:	6161      	str	r1, [r4, #20]
 801fe40:	e7ea      	b.n	801fe18 <__d2b+0x58>
 801fe42:	a801      	add	r0, sp, #4
 801fe44:	f7ff fce9 	bl	801f81a <__lo0bits>
 801fe48:	9b01      	ldr	r3, [sp, #4]
 801fe4a:	6163      	str	r3, [r4, #20]
 801fe4c:	3020      	adds	r0, #32
 801fe4e:	2201      	movs	r2, #1
 801fe50:	e7e8      	b.n	801fe24 <__d2b+0x64>
 801fe52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fe56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801fe5a:	6038      	str	r0, [r7, #0]
 801fe5c:	6918      	ldr	r0, [r3, #16]
 801fe5e:	f7ff fcbd 	bl	801f7dc <__hi0bits>
 801fe62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fe66:	e7e5      	b.n	801fe34 <__d2b+0x74>
 801fe68:	080260a1 	.word	0x080260a1
 801fe6c:	080260b2 	.word	0x080260b2

0801fe70 <__ratio>:
 801fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe74:	b085      	sub	sp, #20
 801fe76:	e9cd 1000 	strd	r1, r0, [sp]
 801fe7a:	a902      	add	r1, sp, #8
 801fe7c:	f7ff ff56 	bl	801fd2c <__b2d>
 801fe80:	9800      	ldr	r0, [sp, #0]
 801fe82:	a903      	add	r1, sp, #12
 801fe84:	ec55 4b10 	vmov	r4, r5, d0
 801fe88:	f7ff ff50 	bl	801fd2c <__b2d>
 801fe8c:	9b01      	ldr	r3, [sp, #4]
 801fe8e:	6919      	ldr	r1, [r3, #16]
 801fe90:	9b00      	ldr	r3, [sp, #0]
 801fe92:	691b      	ldr	r3, [r3, #16]
 801fe94:	1ac9      	subs	r1, r1, r3
 801fe96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801fe9a:	1a9b      	subs	r3, r3, r2
 801fe9c:	ec5b ab10 	vmov	sl, fp, d0
 801fea0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	bfce      	itee	gt
 801fea8:	462a      	movgt	r2, r5
 801feaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801feae:	465a      	movle	r2, fp
 801feb0:	462f      	mov	r7, r5
 801feb2:	46d9      	mov	r9, fp
 801feb4:	bfcc      	ite	gt
 801feb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801feba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801febe:	464b      	mov	r3, r9
 801fec0:	4652      	mov	r2, sl
 801fec2:	4620      	mov	r0, r4
 801fec4:	4639      	mov	r1, r7
 801fec6:	f7e0 fcc1 	bl	800084c <__aeabi_ddiv>
 801feca:	ec41 0b10 	vmov	d0, r0, r1
 801fece:	b005      	add	sp, #20
 801fed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fed4 <__copybits>:
 801fed4:	3901      	subs	r1, #1
 801fed6:	b570      	push	{r4, r5, r6, lr}
 801fed8:	1149      	asrs	r1, r1, #5
 801feda:	6914      	ldr	r4, [r2, #16]
 801fedc:	3101      	adds	r1, #1
 801fede:	f102 0314 	add.w	r3, r2, #20
 801fee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801feea:	1f05      	subs	r5, r0, #4
 801feec:	42a3      	cmp	r3, r4
 801feee:	d30c      	bcc.n	801ff0a <__copybits+0x36>
 801fef0:	1aa3      	subs	r3, r4, r2
 801fef2:	3b11      	subs	r3, #17
 801fef4:	f023 0303 	bic.w	r3, r3, #3
 801fef8:	3211      	adds	r2, #17
 801fefa:	42a2      	cmp	r2, r4
 801fefc:	bf88      	it	hi
 801fefe:	2300      	movhi	r3, #0
 801ff00:	4418      	add	r0, r3
 801ff02:	2300      	movs	r3, #0
 801ff04:	4288      	cmp	r0, r1
 801ff06:	d305      	bcc.n	801ff14 <__copybits+0x40>
 801ff08:	bd70      	pop	{r4, r5, r6, pc}
 801ff0a:	f853 6b04 	ldr.w	r6, [r3], #4
 801ff0e:	f845 6f04 	str.w	r6, [r5, #4]!
 801ff12:	e7eb      	b.n	801feec <__copybits+0x18>
 801ff14:	f840 3b04 	str.w	r3, [r0], #4
 801ff18:	e7f4      	b.n	801ff04 <__copybits+0x30>

0801ff1a <__any_on>:
 801ff1a:	f100 0214 	add.w	r2, r0, #20
 801ff1e:	6900      	ldr	r0, [r0, #16]
 801ff20:	114b      	asrs	r3, r1, #5
 801ff22:	4298      	cmp	r0, r3
 801ff24:	b510      	push	{r4, lr}
 801ff26:	db11      	blt.n	801ff4c <__any_on+0x32>
 801ff28:	dd0a      	ble.n	801ff40 <__any_on+0x26>
 801ff2a:	f011 011f 	ands.w	r1, r1, #31
 801ff2e:	d007      	beq.n	801ff40 <__any_on+0x26>
 801ff30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ff34:	fa24 f001 	lsr.w	r0, r4, r1
 801ff38:	fa00 f101 	lsl.w	r1, r0, r1
 801ff3c:	428c      	cmp	r4, r1
 801ff3e:	d10b      	bne.n	801ff58 <__any_on+0x3e>
 801ff40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ff44:	4293      	cmp	r3, r2
 801ff46:	d803      	bhi.n	801ff50 <__any_on+0x36>
 801ff48:	2000      	movs	r0, #0
 801ff4a:	bd10      	pop	{r4, pc}
 801ff4c:	4603      	mov	r3, r0
 801ff4e:	e7f7      	b.n	801ff40 <__any_on+0x26>
 801ff50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ff54:	2900      	cmp	r1, #0
 801ff56:	d0f5      	beq.n	801ff44 <__any_on+0x2a>
 801ff58:	2001      	movs	r0, #1
 801ff5a:	e7f6      	b.n	801ff4a <__any_on+0x30>

0801ff5c <sulp>:
 801ff5c:	b570      	push	{r4, r5, r6, lr}
 801ff5e:	4604      	mov	r4, r0
 801ff60:	460d      	mov	r5, r1
 801ff62:	ec45 4b10 	vmov	d0, r4, r5
 801ff66:	4616      	mov	r6, r2
 801ff68:	f7ff feba 	bl	801fce0 <__ulp>
 801ff6c:	ec51 0b10 	vmov	r0, r1, d0
 801ff70:	b17e      	cbz	r6, 801ff92 <sulp+0x36>
 801ff72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ff76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	dd09      	ble.n	801ff92 <sulp+0x36>
 801ff7e:	051b      	lsls	r3, r3, #20
 801ff80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801ff84:	2400      	movs	r4, #0
 801ff86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801ff8a:	4622      	mov	r2, r4
 801ff8c:	462b      	mov	r3, r5
 801ff8e:	f7e0 fb33 	bl	80005f8 <__aeabi_dmul>
 801ff92:	ec41 0b10 	vmov	d0, r0, r1
 801ff96:	bd70      	pop	{r4, r5, r6, pc}

0801ff98 <_strtod_l>:
 801ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff9c:	b09f      	sub	sp, #124	@ 0x7c
 801ff9e:	460c      	mov	r4, r1
 801ffa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	921a      	str	r2, [sp, #104]	@ 0x68
 801ffa6:	9005      	str	r0, [sp, #20]
 801ffa8:	f04f 0a00 	mov.w	sl, #0
 801ffac:	f04f 0b00 	mov.w	fp, #0
 801ffb0:	460a      	mov	r2, r1
 801ffb2:	9219      	str	r2, [sp, #100]	@ 0x64
 801ffb4:	7811      	ldrb	r1, [r2, #0]
 801ffb6:	292b      	cmp	r1, #43	@ 0x2b
 801ffb8:	d04a      	beq.n	8020050 <_strtod_l+0xb8>
 801ffba:	d838      	bhi.n	802002e <_strtod_l+0x96>
 801ffbc:	290d      	cmp	r1, #13
 801ffbe:	d832      	bhi.n	8020026 <_strtod_l+0x8e>
 801ffc0:	2908      	cmp	r1, #8
 801ffc2:	d832      	bhi.n	802002a <_strtod_l+0x92>
 801ffc4:	2900      	cmp	r1, #0
 801ffc6:	d03b      	beq.n	8020040 <_strtod_l+0xa8>
 801ffc8:	2200      	movs	r2, #0
 801ffca:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ffcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801ffce:	782a      	ldrb	r2, [r5, #0]
 801ffd0:	2a30      	cmp	r2, #48	@ 0x30
 801ffd2:	f040 80b3 	bne.w	802013c <_strtod_l+0x1a4>
 801ffd6:	786a      	ldrb	r2, [r5, #1]
 801ffd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ffdc:	2a58      	cmp	r2, #88	@ 0x58
 801ffde:	d16e      	bne.n	80200be <_strtod_l+0x126>
 801ffe0:	9302      	str	r3, [sp, #8]
 801ffe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffe4:	9301      	str	r3, [sp, #4]
 801ffe6:	ab1a      	add	r3, sp, #104	@ 0x68
 801ffe8:	9300      	str	r3, [sp, #0]
 801ffea:	4a8e      	ldr	r2, [pc, #568]	@ (8020224 <_strtod_l+0x28c>)
 801ffec:	9805      	ldr	r0, [sp, #20]
 801ffee:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fff0:	a919      	add	r1, sp, #100	@ 0x64
 801fff2:	f001 f997 	bl	8021324 <__gethex>
 801fff6:	f010 060f 	ands.w	r6, r0, #15
 801fffa:	4604      	mov	r4, r0
 801fffc:	d005      	beq.n	802000a <_strtod_l+0x72>
 801fffe:	2e06      	cmp	r6, #6
 8020000:	d128      	bne.n	8020054 <_strtod_l+0xbc>
 8020002:	3501      	adds	r5, #1
 8020004:	2300      	movs	r3, #0
 8020006:	9519      	str	r5, [sp, #100]	@ 0x64
 8020008:	930b      	str	r3, [sp, #44]	@ 0x2c
 802000a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802000c:	2b00      	cmp	r3, #0
 802000e:	f040 858e 	bne.w	8020b2e <_strtod_l+0xb96>
 8020012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020014:	b1cb      	cbz	r3, 802004a <_strtod_l+0xb2>
 8020016:	4652      	mov	r2, sl
 8020018:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802001c:	ec43 2b10 	vmov	d0, r2, r3
 8020020:	b01f      	add	sp, #124	@ 0x7c
 8020022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020026:	2920      	cmp	r1, #32
 8020028:	d1ce      	bne.n	801ffc8 <_strtod_l+0x30>
 802002a:	3201      	adds	r2, #1
 802002c:	e7c1      	b.n	801ffb2 <_strtod_l+0x1a>
 802002e:	292d      	cmp	r1, #45	@ 0x2d
 8020030:	d1ca      	bne.n	801ffc8 <_strtod_l+0x30>
 8020032:	2101      	movs	r1, #1
 8020034:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020036:	1c51      	adds	r1, r2, #1
 8020038:	9119      	str	r1, [sp, #100]	@ 0x64
 802003a:	7852      	ldrb	r2, [r2, #1]
 802003c:	2a00      	cmp	r2, #0
 802003e:	d1c5      	bne.n	801ffcc <_strtod_l+0x34>
 8020040:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020042:	9419      	str	r4, [sp, #100]	@ 0x64
 8020044:	2b00      	cmp	r3, #0
 8020046:	f040 8570 	bne.w	8020b2a <_strtod_l+0xb92>
 802004a:	4652      	mov	r2, sl
 802004c:	465b      	mov	r3, fp
 802004e:	e7e5      	b.n	802001c <_strtod_l+0x84>
 8020050:	2100      	movs	r1, #0
 8020052:	e7ef      	b.n	8020034 <_strtod_l+0x9c>
 8020054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020056:	b13a      	cbz	r2, 8020068 <_strtod_l+0xd0>
 8020058:	2135      	movs	r1, #53	@ 0x35
 802005a:	a81c      	add	r0, sp, #112	@ 0x70
 802005c:	f7ff ff3a 	bl	801fed4 <__copybits>
 8020060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020062:	9805      	ldr	r0, [sp, #20]
 8020064:	f7ff fb08 	bl	801f678 <_Bfree>
 8020068:	3e01      	subs	r6, #1
 802006a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802006c:	2e04      	cmp	r6, #4
 802006e:	d806      	bhi.n	802007e <_strtod_l+0xe6>
 8020070:	e8df f006 	tbb	[pc, r6]
 8020074:	201d0314 	.word	0x201d0314
 8020078:	14          	.byte	0x14
 8020079:	00          	.byte	0x00
 802007a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802007e:	05e1      	lsls	r1, r4, #23
 8020080:	bf48      	it	mi
 8020082:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8020086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802008a:	0d1b      	lsrs	r3, r3, #20
 802008c:	051b      	lsls	r3, r3, #20
 802008e:	2b00      	cmp	r3, #0
 8020090:	d1bb      	bne.n	802000a <_strtod_l+0x72>
 8020092:	f7fe fafd 	bl	801e690 <__errno>
 8020096:	2322      	movs	r3, #34	@ 0x22
 8020098:	6003      	str	r3, [r0, #0]
 802009a:	e7b6      	b.n	802000a <_strtod_l+0x72>
 802009c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80200a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80200a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80200a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80200ac:	e7e7      	b.n	802007e <_strtod_l+0xe6>
 80200ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802022c <_strtod_l+0x294>
 80200b2:	e7e4      	b.n	802007e <_strtod_l+0xe6>
 80200b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80200b8:	f04f 3aff 	mov.w	sl, #4294967295
 80200bc:	e7df      	b.n	802007e <_strtod_l+0xe6>
 80200be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200c0:	1c5a      	adds	r2, r3, #1
 80200c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80200c4:	785b      	ldrb	r3, [r3, #1]
 80200c6:	2b30      	cmp	r3, #48	@ 0x30
 80200c8:	d0f9      	beq.n	80200be <_strtod_l+0x126>
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d09d      	beq.n	802000a <_strtod_l+0x72>
 80200ce:	2301      	movs	r3, #1
 80200d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80200d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80200d6:	2300      	movs	r3, #0
 80200d8:	9308      	str	r3, [sp, #32]
 80200da:	930a      	str	r3, [sp, #40]	@ 0x28
 80200dc:	461f      	mov	r7, r3
 80200de:	220a      	movs	r2, #10
 80200e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80200e2:	7805      	ldrb	r5, [r0, #0]
 80200e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80200e8:	b2d9      	uxtb	r1, r3
 80200ea:	2909      	cmp	r1, #9
 80200ec:	d928      	bls.n	8020140 <_strtod_l+0x1a8>
 80200ee:	494e      	ldr	r1, [pc, #312]	@ (8020228 <_strtod_l+0x290>)
 80200f0:	2201      	movs	r2, #1
 80200f2:	f7fe fa08 	bl	801e506 <strncmp>
 80200f6:	2800      	cmp	r0, #0
 80200f8:	d032      	beq.n	8020160 <_strtod_l+0x1c8>
 80200fa:	2000      	movs	r0, #0
 80200fc:	462a      	mov	r2, r5
 80200fe:	4681      	mov	r9, r0
 8020100:	463d      	mov	r5, r7
 8020102:	4603      	mov	r3, r0
 8020104:	2a65      	cmp	r2, #101	@ 0x65
 8020106:	d001      	beq.n	802010c <_strtod_l+0x174>
 8020108:	2a45      	cmp	r2, #69	@ 0x45
 802010a:	d114      	bne.n	8020136 <_strtod_l+0x19e>
 802010c:	b91d      	cbnz	r5, 8020116 <_strtod_l+0x17e>
 802010e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020110:	4302      	orrs	r2, r0
 8020112:	d095      	beq.n	8020040 <_strtod_l+0xa8>
 8020114:	2500      	movs	r5, #0
 8020116:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020118:	1c62      	adds	r2, r4, #1
 802011a:	9219      	str	r2, [sp, #100]	@ 0x64
 802011c:	7862      	ldrb	r2, [r4, #1]
 802011e:	2a2b      	cmp	r2, #43	@ 0x2b
 8020120:	d077      	beq.n	8020212 <_strtod_l+0x27a>
 8020122:	2a2d      	cmp	r2, #45	@ 0x2d
 8020124:	d07b      	beq.n	802021e <_strtod_l+0x286>
 8020126:	f04f 0c00 	mov.w	ip, #0
 802012a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802012e:	2909      	cmp	r1, #9
 8020130:	f240 8082 	bls.w	8020238 <_strtod_l+0x2a0>
 8020134:	9419      	str	r4, [sp, #100]	@ 0x64
 8020136:	f04f 0800 	mov.w	r8, #0
 802013a:	e0a2      	b.n	8020282 <_strtod_l+0x2ea>
 802013c:	2300      	movs	r3, #0
 802013e:	e7c7      	b.n	80200d0 <_strtod_l+0x138>
 8020140:	2f08      	cmp	r7, #8
 8020142:	bfd5      	itete	le
 8020144:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8020146:	9908      	ldrgt	r1, [sp, #32]
 8020148:	fb02 3301 	mlale	r3, r2, r1, r3
 802014c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020150:	f100 0001 	add.w	r0, r0, #1
 8020154:	bfd4      	ite	le
 8020156:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020158:	9308      	strgt	r3, [sp, #32]
 802015a:	3701      	adds	r7, #1
 802015c:	9019      	str	r0, [sp, #100]	@ 0x64
 802015e:	e7bf      	b.n	80200e0 <_strtod_l+0x148>
 8020160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020162:	1c5a      	adds	r2, r3, #1
 8020164:	9219      	str	r2, [sp, #100]	@ 0x64
 8020166:	785a      	ldrb	r2, [r3, #1]
 8020168:	b37f      	cbz	r7, 80201ca <_strtod_l+0x232>
 802016a:	4681      	mov	r9, r0
 802016c:	463d      	mov	r5, r7
 802016e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8020172:	2b09      	cmp	r3, #9
 8020174:	d912      	bls.n	802019c <_strtod_l+0x204>
 8020176:	2301      	movs	r3, #1
 8020178:	e7c4      	b.n	8020104 <_strtod_l+0x16c>
 802017a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802017c:	1c5a      	adds	r2, r3, #1
 802017e:	9219      	str	r2, [sp, #100]	@ 0x64
 8020180:	785a      	ldrb	r2, [r3, #1]
 8020182:	3001      	adds	r0, #1
 8020184:	2a30      	cmp	r2, #48	@ 0x30
 8020186:	d0f8      	beq.n	802017a <_strtod_l+0x1e2>
 8020188:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802018c:	2b08      	cmp	r3, #8
 802018e:	f200 84d3 	bhi.w	8020b38 <_strtod_l+0xba0>
 8020192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020194:	930c      	str	r3, [sp, #48]	@ 0x30
 8020196:	4681      	mov	r9, r0
 8020198:	2000      	movs	r0, #0
 802019a:	4605      	mov	r5, r0
 802019c:	3a30      	subs	r2, #48	@ 0x30
 802019e:	f100 0301 	add.w	r3, r0, #1
 80201a2:	d02a      	beq.n	80201fa <_strtod_l+0x262>
 80201a4:	4499      	add	r9, r3
 80201a6:	eb00 0c05 	add.w	ip, r0, r5
 80201aa:	462b      	mov	r3, r5
 80201ac:	210a      	movs	r1, #10
 80201ae:	4563      	cmp	r3, ip
 80201b0:	d10d      	bne.n	80201ce <_strtod_l+0x236>
 80201b2:	1c69      	adds	r1, r5, #1
 80201b4:	4401      	add	r1, r0
 80201b6:	4428      	add	r0, r5
 80201b8:	2808      	cmp	r0, #8
 80201ba:	dc16      	bgt.n	80201ea <_strtod_l+0x252>
 80201bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80201be:	230a      	movs	r3, #10
 80201c0:	fb03 2300 	mla	r3, r3, r0, r2
 80201c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80201c6:	2300      	movs	r3, #0
 80201c8:	e018      	b.n	80201fc <_strtod_l+0x264>
 80201ca:	4638      	mov	r0, r7
 80201cc:	e7da      	b.n	8020184 <_strtod_l+0x1ec>
 80201ce:	2b08      	cmp	r3, #8
 80201d0:	f103 0301 	add.w	r3, r3, #1
 80201d4:	dc03      	bgt.n	80201de <_strtod_l+0x246>
 80201d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80201d8:	434e      	muls	r6, r1
 80201da:	960a      	str	r6, [sp, #40]	@ 0x28
 80201dc:	e7e7      	b.n	80201ae <_strtod_l+0x216>
 80201de:	2b10      	cmp	r3, #16
 80201e0:	bfde      	ittt	le
 80201e2:	9e08      	ldrle	r6, [sp, #32]
 80201e4:	434e      	mulle	r6, r1
 80201e6:	9608      	strle	r6, [sp, #32]
 80201e8:	e7e1      	b.n	80201ae <_strtod_l+0x216>
 80201ea:	280f      	cmp	r0, #15
 80201ec:	dceb      	bgt.n	80201c6 <_strtod_l+0x22e>
 80201ee:	9808      	ldr	r0, [sp, #32]
 80201f0:	230a      	movs	r3, #10
 80201f2:	fb03 2300 	mla	r3, r3, r0, r2
 80201f6:	9308      	str	r3, [sp, #32]
 80201f8:	e7e5      	b.n	80201c6 <_strtod_l+0x22e>
 80201fa:	4629      	mov	r1, r5
 80201fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80201fe:	1c50      	adds	r0, r2, #1
 8020200:	9019      	str	r0, [sp, #100]	@ 0x64
 8020202:	7852      	ldrb	r2, [r2, #1]
 8020204:	4618      	mov	r0, r3
 8020206:	460d      	mov	r5, r1
 8020208:	e7b1      	b.n	802016e <_strtod_l+0x1d6>
 802020a:	f04f 0900 	mov.w	r9, #0
 802020e:	2301      	movs	r3, #1
 8020210:	e77d      	b.n	802010e <_strtod_l+0x176>
 8020212:	f04f 0c00 	mov.w	ip, #0
 8020216:	1ca2      	adds	r2, r4, #2
 8020218:	9219      	str	r2, [sp, #100]	@ 0x64
 802021a:	78a2      	ldrb	r2, [r4, #2]
 802021c:	e785      	b.n	802012a <_strtod_l+0x192>
 802021e:	f04f 0c01 	mov.w	ip, #1
 8020222:	e7f8      	b.n	8020216 <_strtod_l+0x27e>
 8020224:	08026220 	.word	0x08026220
 8020228:	08026208 	.word	0x08026208
 802022c:	7ff00000 	.word	0x7ff00000
 8020230:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020232:	1c51      	adds	r1, r2, #1
 8020234:	9119      	str	r1, [sp, #100]	@ 0x64
 8020236:	7852      	ldrb	r2, [r2, #1]
 8020238:	2a30      	cmp	r2, #48	@ 0x30
 802023a:	d0f9      	beq.n	8020230 <_strtod_l+0x298>
 802023c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020240:	2908      	cmp	r1, #8
 8020242:	f63f af78 	bhi.w	8020136 <_strtod_l+0x19e>
 8020246:	3a30      	subs	r2, #48	@ 0x30
 8020248:	920e      	str	r2, [sp, #56]	@ 0x38
 802024a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802024c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802024e:	f04f 080a 	mov.w	r8, #10
 8020252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020254:	1c56      	adds	r6, r2, #1
 8020256:	9619      	str	r6, [sp, #100]	@ 0x64
 8020258:	7852      	ldrb	r2, [r2, #1]
 802025a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802025e:	f1be 0f09 	cmp.w	lr, #9
 8020262:	d939      	bls.n	80202d8 <_strtod_l+0x340>
 8020264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020266:	1a76      	subs	r6, r6, r1
 8020268:	2e08      	cmp	r6, #8
 802026a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802026e:	dc03      	bgt.n	8020278 <_strtod_l+0x2e0>
 8020270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020272:	4588      	cmp	r8, r1
 8020274:	bfa8      	it	ge
 8020276:	4688      	movge	r8, r1
 8020278:	f1bc 0f00 	cmp.w	ip, #0
 802027c:	d001      	beq.n	8020282 <_strtod_l+0x2ea>
 802027e:	f1c8 0800 	rsb	r8, r8, #0
 8020282:	2d00      	cmp	r5, #0
 8020284:	d14e      	bne.n	8020324 <_strtod_l+0x38c>
 8020286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020288:	4308      	orrs	r0, r1
 802028a:	f47f aebe 	bne.w	802000a <_strtod_l+0x72>
 802028e:	2b00      	cmp	r3, #0
 8020290:	f47f aed6 	bne.w	8020040 <_strtod_l+0xa8>
 8020294:	2a69      	cmp	r2, #105	@ 0x69
 8020296:	d028      	beq.n	80202ea <_strtod_l+0x352>
 8020298:	dc25      	bgt.n	80202e6 <_strtod_l+0x34e>
 802029a:	2a49      	cmp	r2, #73	@ 0x49
 802029c:	d025      	beq.n	80202ea <_strtod_l+0x352>
 802029e:	2a4e      	cmp	r2, #78	@ 0x4e
 80202a0:	f47f aece 	bne.w	8020040 <_strtod_l+0xa8>
 80202a4:	499b      	ldr	r1, [pc, #620]	@ (8020514 <_strtod_l+0x57c>)
 80202a6:	a819      	add	r0, sp, #100	@ 0x64
 80202a8:	f001 fa5e 	bl	8021768 <__match>
 80202ac:	2800      	cmp	r0, #0
 80202ae:	f43f aec7 	beq.w	8020040 <_strtod_l+0xa8>
 80202b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	2b28      	cmp	r3, #40	@ 0x28
 80202b8:	d12e      	bne.n	8020318 <_strtod_l+0x380>
 80202ba:	4997      	ldr	r1, [pc, #604]	@ (8020518 <_strtod_l+0x580>)
 80202bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80202be:	a819      	add	r0, sp, #100	@ 0x64
 80202c0:	f001 fa66 	bl	8021790 <__hexnan>
 80202c4:	2805      	cmp	r0, #5
 80202c6:	d127      	bne.n	8020318 <_strtod_l+0x380>
 80202c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80202ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80202ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80202d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80202d6:	e698      	b.n	802000a <_strtod_l+0x72>
 80202d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80202da:	fb08 2101 	mla	r1, r8, r1, r2
 80202de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80202e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80202e4:	e7b5      	b.n	8020252 <_strtod_l+0x2ba>
 80202e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80202e8:	e7da      	b.n	80202a0 <_strtod_l+0x308>
 80202ea:	498c      	ldr	r1, [pc, #560]	@ (802051c <_strtod_l+0x584>)
 80202ec:	a819      	add	r0, sp, #100	@ 0x64
 80202ee:	f001 fa3b 	bl	8021768 <__match>
 80202f2:	2800      	cmp	r0, #0
 80202f4:	f43f aea4 	beq.w	8020040 <_strtod_l+0xa8>
 80202f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80202fa:	4989      	ldr	r1, [pc, #548]	@ (8020520 <_strtod_l+0x588>)
 80202fc:	3b01      	subs	r3, #1
 80202fe:	a819      	add	r0, sp, #100	@ 0x64
 8020300:	9319      	str	r3, [sp, #100]	@ 0x64
 8020302:	f001 fa31 	bl	8021768 <__match>
 8020306:	b910      	cbnz	r0, 802030e <_strtod_l+0x376>
 8020308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802030a:	3301      	adds	r3, #1
 802030c:	9319      	str	r3, [sp, #100]	@ 0x64
 802030e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020530 <_strtod_l+0x598>
 8020312:	f04f 0a00 	mov.w	sl, #0
 8020316:	e678      	b.n	802000a <_strtod_l+0x72>
 8020318:	4882      	ldr	r0, [pc, #520]	@ (8020524 <_strtod_l+0x58c>)
 802031a:	f000 ff79 	bl	8021210 <nan>
 802031e:	ec5b ab10 	vmov	sl, fp, d0
 8020322:	e672      	b.n	802000a <_strtod_l+0x72>
 8020324:	eba8 0309 	sub.w	r3, r8, r9
 8020328:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802032a:	9309      	str	r3, [sp, #36]	@ 0x24
 802032c:	2f00      	cmp	r7, #0
 802032e:	bf08      	it	eq
 8020330:	462f      	moveq	r7, r5
 8020332:	2d10      	cmp	r5, #16
 8020334:	462c      	mov	r4, r5
 8020336:	bfa8      	it	ge
 8020338:	2410      	movge	r4, #16
 802033a:	f7e0 f8e3 	bl	8000504 <__aeabi_ui2d>
 802033e:	2d09      	cmp	r5, #9
 8020340:	4682      	mov	sl, r0
 8020342:	468b      	mov	fp, r1
 8020344:	dc13      	bgt.n	802036e <_strtod_l+0x3d6>
 8020346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020348:	2b00      	cmp	r3, #0
 802034a:	f43f ae5e 	beq.w	802000a <_strtod_l+0x72>
 802034e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020350:	dd78      	ble.n	8020444 <_strtod_l+0x4ac>
 8020352:	2b16      	cmp	r3, #22
 8020354:	dc5f      	bgt.n	8020416 <_strtod_l+0x47e>
 8020356:	4974      	ldr	r1, [pc, #464]	@ (8020528 <_strtod_l+0x590>)
 8020358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802035c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020360:	4652      	mov	r2, sl
 8020362:	465b      	mov	r3, fp
 8020364:	f7e0 f948 	bl	80005f8 <__aeabi_dmul>
 8020368:	4682      	mov	sl, r0
 802036a:	468b      	mov	fp, r1
 802036c:	e64d      	b.n	802000a <_strtod_l+0x72>
 802036e:	4b6e      	ldr	r3, [pc, #440]	@ (8020528 <_strtod_l+0x590>)
 8020370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020374:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020378:	f7e0 f93e 	bl	80005f8 <__aeabi_dmul>
 802037c:	4682      	mov	sl, r0
 802037e:	9808      	ldr	r0, [sp, #32]
 8020380:	468b      	mov	fp, r1
 8020382:	f7e0 f8bf 	bl	8000504 <__aeabi_ui2d>
 8020386:	4602      	mov	r2, r0
 8020388:	460b      	mov	r3, r1
 802038a:	4650      	mov	r0, sl
 802038c:	4659      	mov	r1, fp
 802038e:	f7df ff7d 	bl	800028c <__adddf3>
 8020392:	2d0f      	cmp	r5, #15
 8020394:	4682      	mov	sl, r0
 8020396:	468b      	mov	fp, r1
 8020398:	ddd5      	ble.n	8020346 <_strtod_l+0x3ae>
 802039a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802039c:	1b2c      	subs	r4, r5, r4
 802039e:	441c      	add	r4, r3
 80203a0:	2c00      	cmp	r4, #0
 80203a2:	f340 8096 	ble.w	80204d2 <_strtod_l+0x53a>
 80203a6:	f014 030f 	ands.w	r3, r4, #15
 80203aa:	d00a      	beq.n	80203c2 <_strtod_l+0x42a>
 80203ac:	495e      	ldr	r1, [pc, #376]	@ (8020528 <_strtod_l+0x590>)
 80203ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80203b2:	4652      	mov	r2, sl
 80203b4:	465b      	mov	r3, fp
 80203b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80203ba:	f7e0 f91d 	bl	80005f8 <__aeabi_dmul>
 80203be:	4682      	mov	sl, r0
 80203c0:	468b      	mov	fp, r1
 80203c2:	f034 040f 	bics.w	r4, r4, #15
 80203c6:	d073      	beq.n	80204b0 <_strtod_l+0x518>
 80203c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80203cc:	dd48      	ble.n	8020460 <_strtod_l+0x4c8>
 80203ce:	2400      	movs	r4, #0
 80203d0:	46a0      	mov	r8, r4
 80203d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80203d4:	46a1      	mov	r9, r4
 80203d6:	9a05      	ldr	r2, [sp, #20]
 80203d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020530 <_strtod_l+0x598>
 80203dc:	2322      	movs	r3, #34	@ 0x22
 80203de:	6013      	str	r3, [r2, #0]
 80203e0:	f04f 0a00 	mov.w	sl, #0
 80203e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	f43f ae0f 	beq.w	802000a <_strtod_l+0x72>
 80203ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80203ee:	9805      	ldr	r0, [sp, #20]
 80203f0:	f7ff f942 	bl	801f678 <_Bfree>
 80203f4:	9805      	ldr	r0, [sp, #20]
 80203f6:	4649      	mov	r1, r9
 80203f8:	f7ff f93e 	bl	801f678 <_Bfree>
 80203fc:	9805      	ldr	r0, [sp, #20]
 80203fe:	4641      	mov	r1, r8
 8020400:	f7ff f93a 	bl	801f678 <_Bfree>
 8020404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020406:	9805      	ldr	r0, [sp, #20]
 8020408:	f7ff f936 	bl	801f678 <_Bfree>
 802040c:	9805      	ldr	r0, [sp, #20]
 802040e:	4621      	mov	r1, r4
 8020410:	f7ff f932 	bl	801f678 <_Bfree>
 8020414:	e5f9      	b.n	802000a <_strtod_l+0x72>
 8020416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020418:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802041c:	4293      	cmp	r3, r2
 802041e:	dbbc      	blt.n	802039a <_strtod_l+0x402>
 8020420:	4c41      	ldr	r4, [pc, #260]	@ (8020528 <_strtod_l+0x590>)
 8020422:	f1c5 050f 	rsb	r5, r5, #15
 8020426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802042a:	4652      	mov	r2, sl
 802042c:	465b      	mov	r3, fp
 802042e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020432:	f7e0 f8e1 	bl	80005f8 <__aeabi_dmul>
 8020436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020438:	1b5d      	subs	r5, r3, r5
 802043a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802043e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020442:	e78f      	b.n	8020364 <_strtod_l+0x3cc>
 8020444:	3316      	adds	r3, #22
 8020446:	dba8      	blt.n	802039a <_strtod_l+0x402>
 8020448:	4b37      	ldr	r3, [pc, #220]	@ (8020528 <_strtod_l+0x590>)
 802044a:	eba9 0808 	sub.w	r8, r9, r8
 802044e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020452:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020456:	4650      	mov	r0, sl
 8020458:	4659      	mov	r1, fp
 802045a:	f7e0 f9f7 	bl	800084c <__aeabi_ddiv>
 802045e:	e783      	b.n	8020368 <_strtod_l+0x3d0>
 8020460:	4b32      	ldr	r3, [pc, #200]	@ (802052c <_strtod_l+0x594>)
 8020462:	9308      	str	r3, [sp, #32]
 8020464:	2300      	movs	r3, #0
 8020466:	1124      	asrs	r4, r4, #4
 8020468:	4650      	mov	r0, sl
 802046a:	4659      	mov	r1, fp
 802046c:	461e      	mov	r6, r3
 802046e:	2c01      	cmp	r4, #1
 8020470:	dc21      	bgt.n	80204b6 <_strtod_l+0x51e>
 8020472:	b10b      	cbz	r3, 8020478 <_strtod_l+0x4e0>
 8020474:	4682      	mov	sl, r0
 8020476:	468b      	mov	fp, r1
 8020478:	492c      	ldr	r1, [pc, #176]	@ (802052c <_strtod_l+0x594>)
 802047a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802047e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020482:	4652      	mov	r2, sl
 8020484:	465b      	mov	r3, fp
 8020486:	e9d1 0100 	ldrd	r0, r1, [r1]
 802048a:	f7e0 f8b5 	bl	80005f8 <__aeabi_dmul>
 802048e:	4b28      	ldr	r3, [pc, #160]	@ (8020530 <_strtod_l+0x598>)
 8020490:	460a      	mov	r2, r1
 8020492:	400b      	ands	r3, r1
 8020494:	4927      	ldr	r1, [pc, #156]	@ (8020534 <_strtod_l+0x59c>)
 8020496:	428b      	cmp	r3, r1
 8020498:	4682      	mov	sl, r0
 802049a:	d898      	bhi.n	80203ce <_strtod_l+0x436>
 802049c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80204a0:	428b      	cmp	r3, r1
 80204a2:	bf86      	itte	hi
 80204a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020538 <_strtod_l+0x5a0>
 80204a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80204ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80204b0:	2300      	movs	r3, #0
 80204b2:	9308      	str	r3, [sp, #32]
 80204b4:	e07a      	b.n	80205ac <_strtod_l+0x614>
 80204b6:	07e2      	lsls	r2, r4, #31
 80204b8:	d505      	bpl.n	80204c6 <_strtod_l+0x52e>
 80204ba:	9b08      	ldr	r3, [sp, #32]
 80204bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c0:	f7e0 f89a 	bl	80005f8 <__aeabi_dmul>
 80204c4:	2301      	movs	r3, #1
 80204c6:	9a08      	ldr	r2, [sp, #32]
 80204c8:	3208      	adds	r2, #8
 80204ca:	3601      	adds	r6, #1
 80204cc:	1064      	asrs	r4, r4, #1
 80204ce:	9208      	str	r2, [sp, #32]
 80204d0:	e7cd      	b.n	802046e <_strtod_l+0x4d6>
 80204d2:	d0ed      	beq.n	80204b0 <_strtod_l+0x518>
 80204d4:	4264      	negs	r4, r4
 80204d6:	f014 020f 	ands.w	r2, r4, #15
 80204da:	d00a      	beq.n	80204f2 <_strtod_l+0x55a>
 80204dc:	4b12      	ldr	r3, [pc, #72]	@ (8020528 <_strtod_l+0x590>)
 80204de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80204e2:	4650      	mov	r0, sl
 80204e4:	4659      	mov	r1, fp
 80204e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ea:	f7e0 f9af 	bl	800084c <__aeabi_ddiv>
 80204ee:	4682      	mov	sl, r0
 80204f0:	468b      	mov	fp, r1
 80204f2:	1124      	asrs	r4, r4, #4
 80204f4:	d0dc      	beq.n	80204b0 <_strtod_l+0x518>
 80204f6:	2c1f      	cmp	r4, #31
 80204f8:	dd20      	ble.n	802053c <_strtod_l+0x5a4>
 80204fa:	2400      	movs	r4, #0
 80204fc:	46a0      	mov	r8, r4
 80204fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8020500:	46a1      	mov	r9, r4
 8020502:	9a05      	ldr	r2, [sp, #20]
 8020504:	2322      	movs	r3, #34	@ 0x22
 8020506:	f04f 0a00 	mov.w	sl, #0
 802050a:	f04f 0b00 	mov.w	fp, #0
 802050e:	6013      	str	r3, [r2, #0]
 8020510:	e768      	b.n	80203e4 <_strtod_l+0x44c>
 8020512:	bf00      	nop
 8020514:	08025fd4 	.word	0x08025fd4
 8020518:	0802620c 	.word	0x0802620c
 802051c:	08025fcc 	.word	0x08025fcc
 8020520:	0802603f 	.word	0x0802603f
 8020524:	0802603b 	.word	0x0802603b
 8020528:	08026140 	.word	0x08026140
 802052c:	08026118 	.word	0x08026118
 8020530:	7ff00000 	.word	0x7ff00000
 8020534:	7ca00000 	.word	0x7ca00000
 8020538:	7fefffff 	.word	0x7fefffff
 802053c:	f014 0310 	ands.w	r3, r4, #16
 8020540:	bf18      	it	ne
 8020542:	236a      	movne	r3, #106	@ 0x6a
 8020544:	4ea9      	ldr	r6, [pc, #676]	@ (80207ec <_strtod_l+0x854>)
 8020546:	9308      	str	r3, [sp, #32]
 8020548:	4650      	mov	r0, sl
 802054a:	4659      	mov	r1, fp
 802054c:	2300      	movs	r3, #0
 802054e:	07e2      	lsls	r2, r4, #31
 8020550:	d504      	bpl.n	802055c <_strtod_l+0x5c4>
 8020552:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020556:	f7e0 f84f 	bl	80005f8 <__aeabi_dmul>
 802055a:	2301      	movs	r3, #1
 802055c:	1064      	asrs	r4, r4, #1
 802055e:	f106 0608 	add.w	r6, r6, #8
 8020562:	d1f4      	bne.n	802054e <_strtod_l+0x5b6>
 8020564:	b10b      	cbz	r3, 802056a <_strtod_l+0x5d2>
 8020566:	4682      	mov	sl, r0
 8020568:	468b      	mov	fp, r1
 802056a:	9b08      	ldr	r3, [sp, #32]
 802056c:	b1b3      	cbz	r3, 802059c <_strtod_l+0x604>
 802056e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020572:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020576:	2b00      	cmp	r3, #0
 8020578:	4659      	mov	r1, fp
 802057a:	dd0f      	ble.n	802059c <_strtod_l+0x604>
 802057c:	2b1f      	cmp	r3, #31
 802057e:	dd55      	ble.n	802062c <_strtod_l+0x694>
 8020580:	2b34      	cmp	r3, #52	@ 0x34
 8020582:	bfde      	ittt	le
 8020584:	f04f 33ff 	movle.w	r3, #4294967295
 8020588:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802058c:	4093      	lslle	r3, r2
 802058e:	f04f 0a00 	mov.w	sl, #0
 8020592:	bfcc      	ite	gt
 8020594:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020598:	ea03 0b01 	andle.w	fp, r3, r1
 802059c:	2200      	movs	r2, #0
 802059e:	2300      	movs	r3, #0
 80205a0:	4650      	mov	r0, sl
 80205a2:	4659      	mov	r1, fp
 80205a4:	f7e0 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80205a8:	2800      	cmp	r0, #0
 80205aa:	d1a6      	bne.n	80204fa <_strtod_l+0x562>
 80205ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205ae:	9300      	str	r3, [sp, #0]
 80205b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80205b2:	9805      	ldr	r0, [sp, #20]
 80205b4:	462b      	mov	r3, r5
 80205b6:	463a      	mov	r2, r7
 80205b8:	f7ff f8c6 	bl	801f748 <__s2b>
 80205bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80205be:	2800      	cmp	r0, #0
 80205c0:	f43f af05 	beq.w	80203ce <_strtod_l+0x436>
 80205c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80205c6:	2a00      	cmp	r2, #0
 80205c8:	eba9 0308 	sub.w	r3, r9, r8
 80205cc:	bfa8      	it	ge
 80205ce:	2300      	movge	r3, #0
 80205d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80205d2:	2400      	movs	r4, #0
 80205d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80205d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80205da:	46a0      	mov	r8, r4
 80205dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205de:	9805      	ldr	r0, [sp, #20]
 80205e0:	6859      	ldr	r1, [r3, #4]
 80205e2:	f7ff f809 	bl	801f5f8 <_Balloc>
 80205e6:	4681      	mov	r9, r0
 80205e8:	2800      	cmp	r0, #0
 80205ea:	f43f aef4 	beq.w	80203d6 <_strtod_l+0x43e>
 80205ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205f0:	691a      	ldr	r2, [r3, #16]
 80205f2:	3202      	adds	r2, #2
 80205f4:	f103 010c 	add.w	r1, r3, #12
 80205f8:	0092      	lsls	r2, r2, #2
 80205fa:	300c      	adds	r0, #12
 80205fc:	f7fe f87d 	bl	801e6fa <memcpy>
 8020600:	ec4b ab10 	vmov	d0, sl, fp
 8020604:	9805      	ldr	r0, [sp, #20]
 8020606:	aa1c      	add	r2, sp, #112	@ 0x70
 8020608:	a91b      	add	r1, sp, #108	@ 0x6c
 802060a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802060e:	f7ff fbd7 	bl	801fdc0 <__d2b>
 8020612:	901a      	str	r0, [sp, #104]	@ 0x68
 8020614:	2800      	cmp	r0, #0
 8020616:	f43f aede 	beq.w	80203d6 <_strtod_l+0x43e>
 802061a:	9805      	ldr	r0, [sp, #20]
 802061c:	2101      	movs	r1, #1
 802061e:	f7ff f929 	bl	801f874 <__i2b>
 8020622:	4680      	mov	r8, r0
 8020624:	b948      	cbnz	r0, 802063a <_strtod_l+0x6a2>
 8020626:	f04f 0800 	mov.w	r8, #0
 802062a:	e6d4      	b.n	80203d6 <_strtod_l+0x43e>
 802062c:	f04f 32ff 	mov.w	r2, #4294967295
 8020630:	fa02 f303 	lsl.w	r3, r2, r3
 8020634:	ea03 0a0a 	and.w	sl, r3, sl
 8020638:	e7b0      	b.n	802059c <_strtod_l+0x604>
 802063a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802063c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802063e:	2d00      	cmp	r5, #0
 8020640:	bfab      	itete	ge
 8020642:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020644:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020646:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020648:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802064a:	bfac      	ite	ge
 802064c:	18ef      	addge	r7, r5, r3
 802064e:	1b5e      	sublt	r6, r3, r5
 8020650:	9b08      	ldr	r3, [sp, #32]
 8020652:	1aed      	subs	r5, r5, r3
 8020654:	4415      	add	r5, r2
 8020656:	4b66      	ldr	r3, [pc, #408]	@ (80207f0 <_strtod_l+0x858>)
 8020658:	3d01      	subs	r5, #1
 802065a:	429d      	cmp	r5, r3
 802065c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020660:	da50      	bge.n	8020704 <_strtod_l+0x76c>
 8020662:	1b5b      	subs	r3, r3, r5
 8020664:	2b1f      	cmp	r3, #31
 8020666:	eba2 0203 	sub.w	r2, r2, r3
 802066a:	f04f 0101 	mov.w	r1, #1
 802066e:	dc3d      	bgt.n	80206ec <_strtod_l+0x754>
 8020670:	fa01 f303 	lsl.w	r3, r1, r3
 8020674:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020676:	2300      	movs	r3, #0
 8020678:	9310      	str	r3, [sp, #64]	@ 0x40
 802067a:	18bd      	adds	r5, r7, r2
 802067c:	9b08      	ldr	r3, [sp, #32]
 802067e:	42af      	cmp	r7, r5
 8020680:	4416      	add	r6, r2
 8020682:	441e      	add	r6, r3
 8020684:	463b      	mov	r3, r7
 8020686:	bfa8      	it	ge
 8020688:	462b      	movge	r3, r5
 802068a:	42b3      	cmp	r3, r6
 802068c:	bfa8      	it	ge
 802068e:	4633      	movge	r3, r6
 8020690:	2b00      	cmp	r3, #0
 8020692:	bfc2      	ittt	gt
 8020694:	1aed      	subgt	r5, r5, r3
 8020696:	1af6      	subgt	r6, r6, r3
 8020698:	1aff      	subgt	r7, r7, r3
 802069a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802069c:	2b00      	cmp	r3, #0
 802069e:	dd16      	ble.n	80206ce <_strtod_l+0x736>
 80206a0:	4641      	mov	r1, r8
 80206a2:	9805      	ldr	r0, [sp, #20]
 80206a4:	461a      	mov	r2, r3
 80206a6:	f7ff f9a5 	bl	801f9f4 <__pow5mult>
 80206aa:	4680      	mov	r8, r0
 80206ac:	2800      	cmp	r0, #0
 80206ae:	d0ba      	beq.n	8020626 <_strtod_l+0x68e>
 80206b0:	4601      	mov	r1, r0
 80206b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80206b4:	9805      	ldr	r0, [sp, #20]
 80206b6:	f7ff f8f3 	bl	801f8a0 <__multiply>
 80206ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80206bc:	2800      	cmp	r0, #0
 80206be:	f43f ae8a 	beq.w	80203d6 <_strtod_l+0x43e>
 80206c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80206c4:	9805      	ldr	r0, [sp, #20]
 80206c6:	f7fe ffd7 	bl	801f678 <_Bfree>
 80206ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80206cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80206ce:	2d00      	cmp	r5, #0
 80206d0:	dc1d      	bgt.n	802070e <_strtod_l+0x776>
 80206d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	dd23      	ble.n	8020720 <_strtod_l+0x788>
 80206d8:	4649      	mov	r1, r9
 80206da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80206dc:	9805      	ldr	r0, [sp, #20]
 80206de:	f7ff f989 	bl	801f9f4 <__pow5mult>
 80206e2:	4681      	mov	r9, r0
 80206e4:	b9e0      	cbnz	r0, 8020720 <_strtod_l+0x788>
 80206e6:	f04f 0900 	mov.w	r9, #0
 80206ea:	e674      	b.n	80203d6 <_strtod_l+0x43e>
 80206ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80206f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80206f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80206f8:	35e2      	adds	r5, #226	@ 0xe2
 80206fa:	fa01 f305 	lsl.w	r3, r1, r5
 80206fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8020700:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020702:	e7ba      	b.n	802067a <_strtod_l+0x6e2>
 8020704:	2300      	movs	r3, #0
 8020706:	9310      	str	r3, [sp, #64]	@ 0x40
 8020708:	2301      	movs	r3, #1
 802070a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802070c:	e7b5      	b.n	802067a <_strtod_l+0x6e2>
 802070e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020710:	9805      	ldr	r0, [sp, #20]
 8020712:	462a      	mov	r2, r5
 8020714:	f7ff f9c8 	bl	801faa8 <__lshift>
 8020718:	901a      	str	r0, [sp, #104]	@ 0x68
 802071a:	2800      	cmp	r0, #0
 802071c:	d1d9      	bne.n	80206d2 <_strtod_l+0x73a>
 802071e:	e65a      	b.n	80203d6 <_strtod_l+0x43e>
 8020720:	2e00      	cmp	r6, #0
 8020722:	dd07      	ble.n	8020734 <_strtod_l+0x79c>
 8020724:	4649      	mov	r1, r9
 8020726:	9805      	ldr	r0, [sp, #20]
 8020728:	4632      	mov	r2, r6
 802072a:	f7ff f9bd 	bl	801faa8 <__lshift>
 802072e:	4681      	mov	r9, r0
 8020730:	2800      	cmp	r0, #0
 8020732:	d0d8      	beq.n	80206e6 <_strtod_l+0x74e>
 8020734:	2f00      	cmp	r7, #0
 8020736:	dd08      	ble.n	802074a <_strtod_l+0x7b2>
 8020738:	4641      	mov	r1, r8
 802073a:	9805      	ldr	r0, [sp, #20]
 802073c:	463a      	mov	r2, r7
 802073e:	f7ff f9b3 	bl	801faa8 <__lshift>
 8020742:	4680      	mov	r8, r0
 8020744:	2800      	cmp	r0, #0
 8020746:	f43f ae46 	beq.w	80203d6 <_strtod_l+0x43e>
 802074a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802074c:	9805      	ldr	r0, [sp, #20]
 802074e:	464a      	mov	r2, r9
 8020750:	f7ff fa32 	bl	801fbb8 <__mdiff>
 8020754:	4604      	mov	r4, r0
 8020756:	2800      	cmp	r0, #0
 8020758:	f43f ae3d 	beq.w	80203d6 <_strtod_l+0x43e>
 802075c:	68c3      	ldr	r3, [r0, #12]
 802075e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020760:	2300      	movs	r3, #0
 8020762:	60c3      	str	r3, [r0, #12]
 8020764:	4641      	mov	r1, r8
 8020766:	f7ff fa0b 	bl	801fb80 <__mcmp>
 802076a:	2800      	cmp	r0, #0
 802076c:	da46      	bge.n	80207fc <_strtod_l+0x864>
 802076e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020770:	ea53 030a 	orrs.w	r3, r3, sl
 8020774:	d16c      	bne.n	8020850 <_strtod_l+0x8b8>
 8020776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802077a:	2b00      	cmp	r3, #0
 802077c:	d168      	bne.n	8020850 <_strtod_l+0x8b8>
 802077e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020782:	0d1b      	lsrs	r3, r3, #20
 8020784:	051b      	lsls	r3, r3, #20
 8020786:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802078a:	d961      	bls.n	8020850 <_strtod_l+0x8b8>
 802078c:	6963      	ldr	r3, [r4, #20]
 802078e:	b913      	cbnz	r3, 8020796 <_strtod_l+0x7fe>
 8020790:	6923      	ldr	r3, [r4, #16]
 8020792:	2b01      	cmp	r3, #1
 8020794:	dd5c      	ble.n	8020850 <_strtod_l+0x8b8>
 8020796:	4621      	mov	r1, r4
 8020798:	2201      	movs	r2, #1
 802079a:	9805      	ldr	r0, [sp, #20]
 802079c:	f7ff f984 	bl	801faa8 <__lshift>
 80207a0:	4641      	mov	r1, r8
 80207a2:	4604      	mov	r4, r0
 80207a4:	f7ff f9ec 	bl	801fb80 <__mcmp>
 80207a8:	2800      	cmp	r0, #0
 80207aa:	dd51      	ble.n	8020850 <_strtod_l+0x8b8>
 80207ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80207b0:	9a08      	ldr	r2, [sp, #32]
 80207b2:	0d1b      	lsrs	r3, r3, #20
 80207b4:	051b      	lsls	r3, r3, #20
 80207b6:	2a00      	cmp	r2, #0
 80207b8:	d06b      	beq.n	8020892 <_strtod_l+0x8fa>
 80207ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80207be:	d868      	bhi.n	8020892 <_strtod_l+0x8fa>
 80207c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80207c4:	f67f ae9d 	bls.w	8020502 <_strtod_l+0x56a>
 80207c8:	4b0a      	ldr	r3, [pc, #40]	@ (80207f4 <_strtod_l+0x85c>)
 80207ca:	4650      	mov	r0, sl
 80207cc:	4659      	mov	r1, fp
 80207ce:	2200      	movs	r2, #0
 80207d0:	f7df ff12 	bl	80005f8 <__aeabi_dmul>
 80207d4:	4b08      	ldr	r3, [pc, #32]	@ (80207f8 <_strtod_l+0x860>)
 80207d6:	400b      	ands	r3, r1
 80207d8:	4682      	mov	sl, r0
 80207da:	468b      	mov	fp, r1
 80207dc:	2b00      	cmp	r3, #0
 80207de:	f47f ae05 	bne.w	80203ec <_strtod_l+0x454>
 80207e2:	9a05      	ldr	r2, [sp, #20]
 80207e4:	2322      	movs	r3, #34	@ 0x22
 80207e6:	6013      	str	r3, [r2, #0]
 80207e8:	e600      	b.n	80203ec <_strtod_l+0x454>
 80207ea:	bf00      	nop
 80207ec:	08026238 	.word	0x08026238
 80207f0:	fffffc02 	.word	0xfffffc02
 80207f4:	39500000 	.word	0x39500000
 80207f8:	7ff00000 	.word	0x7ff00000
 80207fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020800:	d165      	bne.n	80208ce <_strtod_l+0x936>
 8020802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020808:	b35a      	cbz	r2, 8020862 <_strtod_l+0x8ca>
 802080a:	4a9f      	ldr	r2, [pc, #636]	@ (8020a88 <_strtod_l+0xaf0>)
 802080c:	4293      	cmp	r3, r2
 802080e:	d12b      	bne.n	8020868 <_strtod_l+0x8d0>
 8020810:	9b08      	ldr	r3, [sp, #32]
 8020812:	4651      	mov	r1, sl
 8020814:	b303      	cbz	r3, 8020858 <_strtod_l+0x8c0>
 8020816:	4b9d      	ldr	r3, [pc, #628]	@ (8020a8c <_strtod_l+0xaf4>)
 8020818:	465a      	mov	r2, fp
 802081a:	4013      	ands	r3, r2
 802081c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020820:	f04f 32ff 	mov.w	r2, #4294967295
 8020824:	d81b      	bhi.n	802085e <_strtod_l+0x8c6>
 8020826:	0d1b      	lsrs	r3, r3, #20
 8020828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802082c:	fa02 f303 	lsl.w	r3, r2, r3
 8020830:	4299      	cmp	r1, r3
 8020832:	d119      	bne.n	8020868 <_strtod_l+0x8d0>
 8020834:	4b96      	ldr	r3, [pc, #600]	@ (8020a90 <_strtod_l+0xaf8>)
 8020836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020838:	429a      	cmp	r2, r3
 802083a:	d102      	bne.n	8020842 <_strtod_l+0x8aa>
 802083c:	3101      	adds	r1, #1
 802083e:	f43f adca 	beq.w	80203d6 <_strtod_l+0x43e>
 8020842:	4b92      	ldr	r3, [pc, #584]	@ (8020a8c <_strtod_l+0xaf4>)
 8020844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020846:	401a      	ands	r2, r3
 8020848:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802084c:	f04f 0a00 	mov.w	sl, #0
 8020850:	9b08      	ldr	r3, [sp, #32]
 8020852:	2b00      	cmp	r3, #0
 8020854:	d1b8      	bne.n	80207c8 <_strtod_l+0x830>
 8020856:	e5c9      	b.n	80203ec <_strtod_l+0x454>
 8020858:	f04f 33ff 	mov.w	r3, #4294967295
 802085c:	e7e8      	b.n	8020830 <_strtod_l+0x898>
 802085e:	4613      	mov	r3, r2
 8020860:	e7e6      	b.n	8020830 <_strtod_l+0x898>
 8020862:	ea53 030a 	orrs.w	r3, r3, sl
 8020866:	d0a1      	beq.n	80207ac <_strtod_l+0x814>
 8020868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802086a:	b1db      	cbz	r3, 80208a4 <_strtod_l+0x90c>
 802086c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802086e:	4213      	tst	r3, r2
 8020870:	d0ee      	beq.n	8020850 <_strtod_l+0x8b8>
 8020872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020874:	9a08      	ldr	r2, [sp, #32]
 8020876:	4650      	mov	r0, sl
 8020878:	4659      	mov	r1, fp
 802087a:	b1bb      	cbz	r3, 80208ac <_strtod_l+0x914>
 802087c:	f7ff fb6e 	bl	801ff5c <sulp>
 8020880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020884:	ec53 2b10 	vmov	r2, r3, d0
 8020888:	f7df fd00 	bl	800028c <__adddf3>
 802088c:	4682      	mov	sl, r0
 802088e:	468b      	mov	fp, r1
 8020890:	e7de      	b.n	8020850 <_strtod_l+0x8b8>
 8020892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802089a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802089e:	f04f 3aff 	mov.w	sl, #4294967295
 80208a2:	e7d5      	b.n	8020850 <_strtod_l+0x8b8>
 80208a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80208a6:	ea13 0f0a 	tst.w	r3, sl
 80208aa:	e7e1      	b.n	8020870 <_strtod_l+0x8d8>
 80208ac:	f7ff fb56 	bl	801ff5c <sulp>
 80208b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80208b4:	ec53 2b10 	vmov	r2, r3, d0
 80208b8:	f7df fce6 	bl	8000288 <__aeabi_dsub>
 80208bc:	2200      	movs	r2, #0
 80208be:	2300      	movs	r3, #0
 80208c0:	4682      	mov	sl, r0
 80208c2:	468b      	mov	fp, r1
 80208c4:	f7e0 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 80208c8:	2800      	cmp	r0, #0
 80208ca:	d0c1      	beq.n	8020850 <_strtod_l+0x8b8>
 80208cc:	e619      	b.n	8020502 <_strtod_l+0x56a>
 80208ce:	4641      	mov	r1, r8
 80208d0:	4620      	mov	r0, r4
 80208d2:	f7ff facd 	bl	801fe70 <__ratio>
 80208d6:	ec57 6b10 	vmov	r6, r7, d0
 80208da:	2200      	movs	r2, #0
 80208dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80208e0:	4630      	mov	r0, r6
 80208e2:	4639      	mov	r1, r7
 80208e4:	f7e0 f904 	bl	8000af0 <__aeabi_dcmple>
 80208e8:	2800      	cmp	r0, #0
 80208ea:	d06f      	beq.n	80209cc <_strtod_l+0xa34>
 80208ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	d17a      	bne.n	80209e8 <_strtod_l+0xa50>
 80208f2:	f1ba 0f00 	cmp.w	sl, #0
 80208f6:	d158      	bne.n	80209aa <_strtod_l+0xa12>
 80208f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d15a      	bne.n	80209b8 <_strtod_l+0xa20>
 8020902:	4b64      	ldr	r3, [pc, #400]	@ (8020a94 <_strtod_l+0xafc>)
 8020904:	2200      	movs	r2, #0
 8020906:	4630      	mov	r0, r6
 8020908:	4639      	mov	r1, r7
 802090a:	f7e0 f8e7 	bl	8000adc <__aeabi_dcmplt>
 802090e:	2800      	cmp	r0, #0
 8020910:	d159      	bne.n	80209c6 <_strtod_l+0xa2e>
 8020912:	4630      	mov	r0, r6
 8020914:	4639      	mov	r1, r7
 8020916:	4b60      	ldr	r3, [pc, #384]	@ (8020a98 <_strtod_l+0xb00>)
 8020918:	2200      	movs	r2, #0
 802091a:	f7df fe6d 	bl	80005f8 <__aeabi_dmul>
 802091e:	4606      	mov	r6, r0
 8020920:	460f      	mov	r7, r1
 8020922:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020926:	9606      	str	r6, [sp, #24]
 8020928:	9307      	str	r3, [sp, #28]
 802092a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802092e:	4d57      	ldr	r5, [pc, #348]	@ (8020a8c <_strtod_l+0xaf4>)
 8020930:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020936:	401d      	ands	r5, r3
 8020938:	4b58      	ldr	r3, [pc, #352]	@ (8020a9c <_strtod_l+0xb04>)
 802093a:	429d      	cmp	r5, r3
 802093c:	f040 80b2 	bne.w	8020aa4 <_strtod_l+0xb0c>
 8020940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020942:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020946:	ec4b ab10 	vmov	d0, sl, fp
 802094a:	f7ff f9c9 	bl	801fce0 <__ulp>
 802094e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020952:	ec51 0b10 	vmov	r0, r1, d0
 8020956:	f7df fe4f 	bl	80005f8 <__aeabi_dmul>
 802095a:	4652      	mov	r2, sl
 802095c:	465b      	mov	r3, fp
 802095e:	f7df fc95 	bl	800028c <__adddf3>
 8020962:	460b      	mov	r3, r1
 8020964:	4949      	ldr	r1, [pc, #292]	@ (8020a8c <_strtod_l+0xaf4>)
 8020966:	4a4e      	ldr	r2, [pc, #312]	@ (8020aa0 <_strtod_l+0xb08>)
 8020968:	4019      	ands	r1, r3
 802096a:	4291      	cmp	r1, r2
 802096c:	4682      	mov	sl, r0
 802096e:	d942      	bls.n	80209f6 <_strtod_l+0xa5e>
 8020970:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020972:	4b47      	ldr	r3, [pc, #284]	@ (8020a90 <_strtod_l+0xaf8>)
 8020974:	429a      	cmp	r2, r3
 8020976:	d103      	bne.n	8020980 <_strtod_l+0x9e8>
 8020978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802097a:	3301      	adds	r3, #1
 802097c:	f43f ad2b 	beq.w	80203d6 <_strtod_l+0x43e>
 8020980:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020a90 <_strtod_l+0xaf8>
 8020984:	f04f 3aff 	mov.w	sl, #4294967295
 8020988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802098a:	9805      	ldr	r0, [sp, #20]
 802098c:	f7fe fe74 	bl	801f678 <_Bfree>
 8020990:	9805      	ldr	r0, [sp, #20]
 8020992:	4649      	mov	r1, r9
 8020994:	f7fe fe70 	bl	801f678 <_Bfree>
 8020998:	9805      	ldr	r0, [sp, #20]
 802099a:	4641      	mov	r1, r8
 802099c:	f7fe fe6c 	bl	801f678 <_Bfree>
 80209a0:	9805      	ldr	r0, [sp, #20]
 80209a2:	4621      	mov	r1, r4
 80209a4:	f7fe fe68 	bl	801f678 <_Bfree>
 80209a8:	e618      	b.n	80205dc <_strtod_l+0x644>
 80209aa:	f1ba 0f01 	cmp.w	sl, #1
 80209ae:	d103      	bne.n	80209b8 <_strtod_l+0xa20>
 80209b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	f43f ada5 	beq.w	8020502 <_strtod_l+0x56a>
 80209b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020a68 <_strtod_l+0xad0>
 80209bc:	4f35      	ldr	r7, [pc, #212]	@ (8020a94 <_strtod_l+0xafc>)
 80209be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80209c2:	2600      	movs	r6, #0
 80209c4:	e7b1      	b.n	802092a <_strtod_l+0x992>
 80209c6:	4f34      	ldr	r7, [pc, #208]	@ (8020a98 <_strtod_l+0xb00>)
 80209c8:	2600      	movs	r6, #0
 80209ca:	e7aa      	b.n	8020922 <_strtod_l+0x98a>
 80209cc:	4b32      	ldr	r3, [pc, #200]	@ (8020a98 <_strtod_l+0xb00>)
 80209ce:	4630      	mov	r0, r6
 80209d0:	4639      	mov	r1, r7
 80209d2:	2200      	movs	r2, #0
 80209d4:	f7df fe10 	bl	80005f8 <__aeabi_dmul>
 80209d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80209da:	4606      	mov	r6, r0
 80209dc:	460f      	mov	r7, r1
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d09f      	beq.n	8020922 <_strtod_l+0x98a>
 80209e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80209e6:	e7a0      	b.n	802092a <_strtod_l+0x992>
 80209e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020a70 <_strtod_l+0xad8>
 80209ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80209f0:	ec57 6b17 	vmov	r6, r7, d7
 80209f4:	e799      	b.n	802092a <_strtod_l+0x992>
 80209f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80209fa:	9b08      	ldr	r3, [sp, #32]
 80209fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	d1c1      	bne.n	8020988 <_strtod_l+0x9f0>
 8020a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020a08:	0d1b      	lsrs	r3, r3, #20
 8020a0a:	051b      	lsls	r3, r3, #20
 8020a0c:	429d      	cmp	r5, r3
 8020a0e:	d1bb      	bne.n	8020988 <_strtod_l+0x9f0>
 8020a10:	4630      	mov	r0, r6
 8020a12:	4639      	mov	r1, r7
 8020a14:	f7e0 f950 	bl	8000cb8 <__aeabi_d2lz>
 8020a18:	f7df fdc0 	bl	800059c <__aeabi_l2d>
 8020a1c:	4602      	mov	r2, r0
 8020a1e:	460b      	mov	r3, r1
 8020a20:	4630      	mov	r0, r6
 8020a22:	4639      	mov	r1, r7
 8020a24:	f7df fc30 	bl	8000288 <__aeabi_dsub>
 8020a28:	460b      	mov	r3, r1
 8020a2a:	4602      	mov	r2, r0
 8020a2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020a30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a36:	ea46 060a 	orr.w	r6, r6, sl
 8020a3a:	431e      	orrs	r6, r3
 8020a3c:	d06f      	beq.n	8020b1e <_strtod_l+0xb86>
 8020a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020a78 <_strtod_l+0xae0>)
 8020a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a44:	f7e0 f84a 	bl	8000adc <__aeabi_dcmplt>
 8020a48:	2800      	cmp	r0, #0
 8020a4a:	f47f accf 	bne.w	80203ec <_strtod_l+0x454>
 8020a4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8020a80 <_strtod_l+0xae8>)
 8020a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020a58:	f7e0 f85e 	bl	8000b18 <__aeabi_dcmpgt>
 8020a5c:	2800      	cmp	r0, #0
 8020a5e:	d093      	beq.n	8020988 <_strtod_l+0x9f0>
 8020a60:	e4c4      	b.n	80203ec <_strtod_l+0x454>
 8020a62:	bf00      	nop
 8020a64:	f3af 8000 	nop.w
 8020a68:	00000000 	.word	0x00000000
 8020a6c:	bff00000 	.word	0xbff00000
 8020a70:	00000000 	.word	0x00000000
 8020a74:	3ff00000 	.word	0x3ff00000
 8020a78:	94a03595 	.word	0x94a03595
 8020a7c:	3fdfffff 	.word	0x3fdfffff
 8020a80:	35afe535 	.word	0x35afe535
 8020a84:	3fe00000 	.word	0x3fe00000
 8020a88:	000fffff 	.word	0x000fffff
 8020a8c:	7ff00000 	.word	0x7ff00000
 8020a90:	7fefffff 	.word	0x7fefffff
 8020a94:	3ff00000 	.word	0x3ff00000
 8020a98:	3fe00000 	.word	0x3fe00000
 8020a9c:	7fe00000 	.word	0x7fe00000
 8020aa0:	7c9fffff 	.word	0x7c9fffff
 8020aa4:	9b08      	ldr	r3, [sp, #32]
 8020aa6:	b323      	cbz	r3, 8020af2 <_strtod_l+0xb5a>
 8020aa8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8020aac:	d821      	bhi.n	8020af2 <_strtod_l+0xb5a>
 8020aae:	a328      	add	r3, pc, #160	@ (adr r3, 8020b50 <_strtod_l+0xbb8>)
 8020ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ab4:	4630      	mov	r0, r6
 8020ab6:	4639      	mov	r1, r7
 8020ab8:	f7e0 f81a 	bl	8000af0 <__aeabi_dcmple>
 8020abc:	b1a0      	cbz	r0, 8020ae8 <_strtod_l+0xb50>
 8020abe:	4639      	mov	r1, r7
 8020ac0:	4630      	mov	r0, r6
 8020ac2:	f7e0 f871 	bl	8000ba8 <__aeabi_d2uiz>
 8020ac6:	2801      	cmp	r0, #1
 8020ac8:	bf38      	it	cc
 8020aca:	2001      	movcc	r0, #1
 8020acc:	f7df fd1a 	bl	8000504 <__aeabi_ui2d>
 8020ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ad2:	4606      	mov	r6, r0
 8020ad4:	460f      	mov	r7, r1
 8020ad6:	b9fb      	cbnz	r3, 8020b18 <_strtod_l+0xb80>
 8020ad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020adc:	9014      	str	r0, [sp, #80]	@ 0x50
 8020ade:	9315      	str	r3, [sp, #84]	@ 0x54
 8020ae0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020aea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020aee:	1b5b      	subs	r3, r3, r5
 8020af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8020af2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020af6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020afa:	f7ff f8f1 	bl	801fce0 <__ulp>
 8020afe:	4650      	mov	r0, sl
 8020b00:	ec53 2b10 	vmov	r2, r3, d0
 8020b04:	4659      	mov	r1, fp
 8020b06:	f7df fd77 	bl	80005f8 <__aeabi_dmul>
 8020b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020b0e:	f7df fbbd 	bl	800028c <__adddf3>
 8020b12:	4682      	mov	sl, r0
 8020b14:	468b      	mov	fp, r1
 8020b16:	e770      	b.n	80209fa <_strtod_l+0xa62>
 8020b18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020b1c:	e7e0      	b.n	8020ae0 <_strtod_l+0xb48>
 8020b1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020b58 <_strtod_l+0xbc0>)
 8020b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b24:	f7df ffda 	bl	8000adc <__aeabi_dcmplt>
 8020b28:	e798      	b.n	8020a5c <_strtod_l+0xac4>
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020b2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020b32:	6013      	str	r3, [r2, #0]
 8020b34:	f7ff ba6d 	b.w	8020012 <_strtod_l+0x7a>
 8020b38:	2a65      	cmp	r2, #101	@ 0x65
 8020b3a:	f43f ab66 	beq.w	802020a <_strtod_l+0x272>
 8020b3e:	2a45      	cmp	r2, #69	@ 0x45
 8020b40:	f43f ab63 	beq.w	802020a <_strtod_l+0x272>
 8020b44:	2301      	movs	r3, #1
 8020b46:	f7ff bb9e 	b.w	8020286 <_strtod_l+0x2ee>
 8020b4a:	bf00      	nop
 8020b4c:	f3af 8000 	nop.w
 8020b50:	ffc00000 	.word	0xffc00000
 8020b54:	41dfffff 	.word	0x41dfffff
 8020b58:	94a03595 	.word	0x94a03595
 8020b5c:	3fcfffff 	.word	0x3fcfffff

08020b60 <_strtod_r>:
 8020b60:	4b01      	ldr	r3, [pc, #4]	@ (8020b68 <_strtod_r+0x8>)
 8020b62:	f7ff ba19 	b.w	801ff98 <_strtod_l>
 8020b66:	bf00      	nop
 8020b68:	200000a4 	.word	0x200000a4

08020b6c <__ssputs_r>:
 8020b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b70:	688e      	ldr	r6, [r1, #8]
 8020b72:	461f      	mov	r7, r3
 8020b74:	42be      	cmp	r6, r7
 8020b76:	680b      	ldr	r3, [r1, #0]
 8020b78:	4682      	mov	sl, r0
 8020b7a:	460c      	mov	r4, r1
 8020b7c:	4690      	mov	r8, r2
 8020b7e:	d82d      	bhi.n	8020bdc <__ssputs_r+0x70>
 8020b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020b84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020b88:	d026      	beq.n	8020bd8 <__ssputs_r+0x6c>
 8020b8a:	6965      	ldr	r5, [r4, #20]
 8020b8c:	6909      	ldr	r1, [r1, #16]
 8020b8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b92:	eba3 0901 	sub.w	r9, r3, r1
 8020b96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020b9a:	1c7b      	adds	r3, r7, #1
 8020b9c:	444b      	add	r3, r9
 8020b9e:	106d      	asrs	r5, r5, #1
 8020ba0:	429d      	cmp	r5, r3
 8020ba2:	bf38      	it	cc
 8020ba4:	461d      	movcc	r5, r3
 8020ba6:	0553      	lsls	r3, r2, #21
 8020ba8:	d527      	bpl.n	8020bfa <__ssputs_r+0x8e>
 8020baa:	4629      	mov	r1, r5
 8020bac:	f7fe fc98 	bl	801f4e0 <_malloc_r>
 8020bb0:	4606      	mov	r6, r0
 8020bb2:	b360      	cbz	r0, 8020c0e <__ssputs_r+0xa2>
 8020bb4:	6921      	ldr	r1, [r4, #16]
 8020bb6:	464a      	mov	r2, r9
 8020bb8:	f7fd fd9f 	bl	801e6fa <memcpy>
 8020bbc:	89a3      	ldrh	r3, [r4, #12]
 8020bbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020bc6:	81a3      	strh	r3, [r4, #12]
 8020bc8:	6126      	str	r6, [r4, #16]
 8020bca:	6165      	str	r5, [r4, #20]
 8020bcc:	444e      	add	r6, r9
 8020bce:	eba5 0509 	sub.w	r5, r5, r9
 8020bd2:	6026      	str	r6, [r4, #0]
 8020bd4:	60a5      	str	r5, [r4, #8]
 8020bd6:	463e      	mov	r6, r7
 8020bd8:	42be      	cmp	r6, r7
 8020bda:	d900      	bls.n	8020bde <__ssputs_r+0x72>
 8020bdc:	463e      	mov	r6, r7
 8020bde:	6820      	ldr	r0, [r4, #0]
 8020be0:	4632      	mov	r2, r6
 8020be2:	4641      	mov	r1, r8
 8020be4:	f7fd fc6d 	bl	801e4c2 <memmove>
 8020be8:	68a3      	ldr	r3, [r4, #8]
 8020bea:	1b9b      	subs	r3, r3, r6
 8020bec:	60a3      	str	r3, [r4, #8]
 8020bee:	6823      	ldr	r3, [r4, #0]
 8020bf0:	4433      	add	r3, r6
 8020bf2:	6023      	str	r3, [r4, #0]
 8020bf4:	2000      	movs	r0, #0
 8020bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bfa:	462a      	mov	r2, r5
 8020bfc:	f000 fe75 	bl	80218ea <_realloc_r>
 8020c00:	4606      	mov	r6, r0
 8020c02:	2800      	cmp	r0, #0
 8020c04:	d1e0      	bne.n	8020bc8 <__ssputs_r+0x5c>
 8020c06:	6921      	ldr	r1, [r4, #16]
 8020c08:	4650      	mov	r0, sl
 8020c0a:	f7fe fbf5 	bl	801f3f8 <_free_r>
 8020c0e:	230c      	movs	r3, #12
 8020c10:	f8ca 3000 	str.w	r3, [sl]
 8020c14:	89a3      	ldrh	r3, [r4, #12]
 8020c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c1a:	81a3      	strh	r3, [r4, #12]
 8020c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c20:	e7e9      	b.n	8020bf6 <__ssputs_r+0x8a>
	...

08020c24 <_svfiprintf_r>:
 8020c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c28:	4698      	mov	r8, r3
 8020c2a:	898b      	ldrh	r3, [r1, #12]
 8020c2c:	061b      	lsls	r3, r3, #24
 8020c2e:	b09d      	sub	sp, #116	@ 0x74
 8020c30:	4607      	mov	r7, r0
 8020c32:	460d      	mov	r5, r1
 8020c34:	4614      	mov	r4, r2
 8020c36:	d510      	bpl.n	8020c5a <_svfiprintf_r+0x36>
 8020c38:	690b      	ldr	r3, [r1, #16]
 8020c3a:	b973      	cbnz	r3, 8020c5a <_svfiprintf_r+0x36>
 8020c3c:	2140      	movs	r1, #64	@ 0x40
 8020c3e:	f7fe fc4f 	bl	801f4e0 <_malloc_r>
 8020c42:	6028      	str	r0, [r5, #0]
 8020c44:	6128      	str	r0, [r5, #16]
 8020c46:	b930      	cbnz	r0, 8020c56 <_svfiprintf_r+0x32>
 8020c48:	230c      	movs	r3, #12
 8020c4a:	603b      	str	r3, [r7, #0]
 8020c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c50:	b01d      	add	sp, #116	@ 0x74
 8020c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c56:	2340      	movs	r3, #64	@ 0x40
 8020c58:	616b      	str	r3, [r5, #20]
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c5e:	2320      	movs	r3, #32
 8020c60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c68:	2330      	movs	r3, #48	@ 0x30
 8020c6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020e08 <_svfiprintf_r+0x1e4>
 8020c6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020c72:	f04f 0901 	mov.w	r9, #1
 8020c76:	4623      	mov	r3, r4
 8020c78:	469a      	mov	sl, r3
 8020c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020c7e:	b10a      	cbz	r2, 8020c84 <_svfiprintf_r+0x60>
 8020c80:	2a25      	cmp	r2, #37	@ 0x25
 8020c82:	d1f9      	bne.n	8020c78 <_svfiprintf_r+0x54>
 8020c84:	ebba 0b04 	subs.w	fp, sl, r4
 8020c88:	d00b      	beq.n	8020ca2 <_svfiprintf_r+0x7e>
 8020c8a:	465b      	mov	r3, fp
 8020c8c:	4622      	mov	r2, r4
 8020c8e:	4629      	mov	r1, r5
 8020c90:	4638      	mov	r0, r7
 8020c92:	f7ff ff6b 	bl	8020b6c <__ssputs_r>
 8020c96:	3001      	adds	r0, #1
 8020c98:	f000 80a7 	beq.w	8020dea <_svfiprintf_r+0x1c6>
 8020c9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c9e:	445a      	add	r2, fp
 8020ca0:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	f000 809f 	beq.w	8020dea <_svfiprintf_r+0x1c6>
 8020cac:	2300      	movs	r3, #0
 8020cae:	f04f 32ff 	mov.w	r2, #4294967295
 8020cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020cb6:	f10a 0a01 	add.w	sl, sl, #1
 8020cba:	9304      	str	r3, [sp, #16]
 8020cbc:	9307      	str	r3, [sp, #28]
 8020cbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020cc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8020cc4:	4654      	mov	r4, sl
 8020cc6:	2205      	movs	r2, #5
 8020cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ccc:	484e      	ldr	r0, [pc, #312]	@ (8020e08 <_svfiprintf_r+0x1e4>)
 8020cce:	f7df fa7f 	bl	80001d0 <memchr>
 8020cd2:	9a04      	ldr	r2, [sp, #16]
 8020cd4:	b9d8      	cbnz	r0, 8020d0e <_svfiprintf_r+0xea>
 8020cd6:	06d0      	lsls	r0, r2, #27
 8020cd8:	bf44      	itt	mi
 8020cda:	2320      	movmi	r3, #32
 8020cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020ce0:	0711      	lsls	r1, r2, #28
 8020ce2:	bf44      	itt	mi
 8020ce4:	232b      	movmi	r3, #43	@ 0x2b
 8020ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020cea:	f89a 3000 	ldrb.w	r3, [sl]
 8020cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8020cf0:	d015      	beq.n	8020d1e <_svfiprintf_r+0xfa>
 8020cf2:	9a07      	ldr	r2, [sp, #28]
 8020cf4:	4654      	mov	r4, sl
 8020cf6:	2000      	movs	r0, #0
 8020cf8:	f04f 0c0a 	mov.w	ip, #10
 8020cfc:	4621      	mov	r1, r4
 8020cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d02:	3b30      	subs	r3, #48	@ 0x30
 8020d04:	2b09      	cmp	r3, #9
 8020d06:	d94b      	bls.n	8020da0 <_svfiprintf_r+0x17c>
 8020d08:	b1b0      	cbz	r0, 8020d38 <_svfiprintf_r+0x114>
 8020d0a:	9207      	str	r2, [sp, #28]
 8020d0c:	e014      	b.n	8020d38 <_svfiprintf_r+0x114>
 8020d0e:	eba0 0308 	sub.w	r3, r0, r8
 8020d12:	fa09 f303 	lsl.w	r3, r9, r3
 8020d16:	4313      	orrs	r3, r2
 8020d18:	9304      	str	r3, [sp, #16]
 8020d1a:	46a2      	mov	sl, r4
 8020d1c:	e7d2      	b.n	8020cc4 <_svfiprintf_r+0xa0>
 8020d1e:	9b03      	ldr	r3, [sp, #12]
 8020d20:	1d19      	adds	r1, r3, #4
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	9103      	str	r1, [sp, #12]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	bfbb      	ittet	lt
 8020d2a:	425b      	neglt	r3, r3
 8020d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8020d30:	9307      	strge	r3, [sp, #28]
 8020d32:	9307      	strlt	r3, [sp, #28]
 8020d34:	bfb8      	it	lt
 8020d36:	9204      	strlt	r2, [sp, #16]
 8020d38:	7823      	ldrb	r3, [r4, #0]
 8020d3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8020d3c:	d10a      	bne.n	8020d54 <_svfiprintf_r+0x130>
 8020d3e:	7863      	ldrb	r3, [r4, #1]
 8020d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8020d42:	d132      	bne.n	8020daa <_svfiprintf_r+0x186>
 8020d44:	9b03      	ldr	r3, [sp, #12]
 8020d46:	1d1a      	adds	r2, r3, #4
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	9203      	str	r2, [sp, #12]
 8020d4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020d50:	3402      	adds	r4, #2
 8020d52:	9305      	str	r3, [sp, #20]
 8020d54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020e18 <_svfiprintf_r+0x1f4>
 8020d58:	7821      	ldrb	r1, [r4, #0]
 8020d5a:	2203      	movs	r2, #3
 8020d5c:	4650      	mov	r0, sl
 8020d5e:	f7df fa37 	bl	80001d0 <memchr>
 8020d62:	b138      	cbz	r0, 8020d74 <_svfiprintf_r+0x150>
 8020d64:	9b04      	ldr	r3, [sp, #16]
 8020d66:	eba0 000a 	sub.w	r0, r0, sl
 8020d6a:	2240      	movs	r2, #64	@ 0x40
 8020d6c:	4082      	lsls	r2, r0
 8020d6e:	4313      	orrs	r3, r2
 8020d70:	3401      	adds	r4, #1
 8020d72:	9304      	str	r3, [sp, #16]
 8020d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d78:	4824      	ldr	r0, [pc, #144]	@ (8020e0c <_svfiprintf_r+0x1e8>)
 8020d7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020d7e:	2206      	movs	r2, #6
 8020d80:	f7df fa26 	bl	80001d0 <memchr>
 8020d84:	2800      	cmp	r0, #0
 8020d86:	d036      	beq.n	8020df6 <_svfiprintf_r+0x1d2>
 8020d88:	4b21      	ldr	r3, [pc, #132]	@ (8020e10 <_svfiprintf_r+0x1ec>)
 8020d8a:	bb1b      	cbnz	r3, 8020dd4 <_svfiprintf_r+0x1b0>
 8020d8c:	9b03      	ldr	r3, [sp, #12]
 8020d8e:	3307      	adds	r3, #7
 8020d90:	f023 0307 	bic.w	r3, r3, #7
 8020d94:	3308      	adds	r3, #8
 8020d96:	9303      	str	r3, [sp, #12]
 8020d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d9a:	4433      	add	r3, r6
 8020d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d9e:	e76a      	b.n	8020c76 <_svfiprintf_r+0x52>
 8020da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8020da4:	460c      	mov	r4, r1
 8020da6:	2001      	movs	r0, #1
 8020da8:	e7a8      	b.n	8020cfc <_svfiprintf_r+0xd8>
 8020daa:	2300      	movs	r3, #0
 8020dac:	3401      	adds	r4, #1
 8020dae:	9305      	str	r3, [sp, #20]
 8020db0:	4619      	mov	r1, r3
 8020db2:	f04f 0c0a 	mov.w	ip, #10
 8020db6:	4620      	mov	r0, r4
 8020db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020dbc:	3a30      	subs	r2, #48	@ 0x30
 8020dbe:	2a09      	cmp	r2, #9
 8020dc0:	d903      	bls.n	8020dca <_svfiprintf_r+0x1a6>
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d0c6      	beq.n	8020d54 <_svfiprintf_r+0x130>
 8020dc6:	9105      	str	r1, [sp, #20]
 8020dc8:	e7c4      	b.n	8020d54 <_svfiprintf_r+0x130>
 8020dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8020dce:	4604      	mov	r4, r0
 8020dd0:	2301      	movs	r3, #1
 8020dd2:	e7f0      	b.n	8020db6 <_svfiprintf_r+0x192>
 8020dd4:	ab03      	add	r3, sp, #12
 8020dd6:	9300      	str	r3, [sp, #0]
 8020dd8:	462a      	mov	r2, r5
 8020dda:	4b0e      	ldr	r3, [pc, #56]	@ (8020e14 <_svfiprintf_r+0x1f0>)
 8020ddc:	a904      	add	r1, sp, #16
 8020dde:	4638      	mov	r0, r7
 8020de0:	f7fc fb9c 	bl	801d51c <_printf_float>
 8020de4:	1c42      	adds	r2, r0, #1
 8020de6:	4606      	mov	r6, r0
 8020de8:	d1d6      	bne.n	8020d98 <_svfiprintf_r+0x174>
 8020dea:	89ab      	ldrh	r3, [r5, #12]
 8020dec:	065b      	lsls	r3, r3, #25
 8020dee:	f53f af2d 	bmi.w	8020c4c <_svfiprintf_r+0x28>
 8020df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020df4:	e72c      	b.n	8020c50 <_svfiprintf_r+0x2c>
 8020df6:	ab03      	add	r3, sp, #12
 8020df8:	9300      	str	r3, [sp, #0]
 8020dfa:	462a      	mov	r2, r5
 8020dfc:	4b05      	ldr	r3, [pc, #20]	@ (8020e14 <_svfiprintf_r+0x1f0>)
 8020dfe:	a904      	add	r1, sp, #16
 8020e00:	4638      	mov	r0, r7
 8020e02:	f7fc fe23 	bl	801da4c <_printf_i>
 8020e06:	e7ed      	b.n	8020de4 <_svfiprintf_r+0x1c0>
 8020e08:	08026260 	.word	0x08026260
 8020e0c:	0802626a 	.word	0x0802626a
 8020e10:	0801d51d 	.word	0x0801d51d
 8020e14:	08020b6d 	.word	0x08020b6d
 8020e18:	08026266 	.word	0x08026266

08020e1c <__sfputc_r>:
 8020e1c:	6893      	ldr	r3, [r2, #8]
 8020e1e:	3b01      	subs	r3, #1
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	b410      	push	{r4}
 8020e24:	6093      	str	r3, [r2, #8]
 8020e26:	da08      	bge.n	8020e3a <__sfputc_r+0x1e>
 8020e28:	6994      	ldr	r4, [r2, #24]
 8020e2a:	42a3      	cmp	r3, r4
 8020e2c:	db01      	blt.n	8020e32 <__sfputc_r+0x16>
 8020e2e:	290a      	cmp	r1, #10
 8020e30:	d103      	bne.n	8020e3a <__sfputc_r+0x1e>
 8020e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020e36:	f000 b945 	b.w	80210c4 <__swbuf_r>
 8020e3a:	6813      	ldr	r3, [r2, #0]
 8020e3c:	1c58      	adds	r0, r3, #1
 8020e3e:	6010      	str	r0, [r2, #0]
 8020e40:	7019      	strb	r1, [r3, #0]
 8020e42:	4608      	mov	r0, r1
 8020e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020e48:	4770      	bx	lr

08020e4a <__sfputs_r>:
 8020e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e4c:	4606      	mov	r6, r0
 8020e4e:	460f      	mov	r7, r1
 8020e50:	4614      	mov	r4, r2
 8020e52:	18d5      	adds	r5, r2, r3
 8020e54:	42ac      	cmp	r4, r5
 8020e56:	d101      	bne.n	8020e5c <__sfputs_r+0x12>
 8020e58:	2000      	movs	r0, #0
 8020e5a:	e007      	b.n	8020e6c <__sfputs_r+0x22>
 8020e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e60:	463a      	mov	r2, r7
 8020e62:	4630      	mov	r0, r6
 8020e64:	f7ff ffda 	bl	8020e1c <__sfputc_r>
 8020e68:	1c43      	adds	r3, r0, #1
 8020e6a:	d1f3      	bne.n	8020e54 <__sfputs_r+0xa>
 8020e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020e70 <_vfiprintf_r>:
 8020e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e74:	460d      	mov	r5, r1
 8020e76:	b09d      	sub	sp, #116	@ 0x74
 8020e78:	4614      	mov	r4, r2
 8020e7a:	4698      	mov	r8, r3
 8020e7c:	4606      	mov	r6, r0
 8020e7e:	b118      	cbz	r0, 8020e88 <_vfiprintf_r+0x18>
 8020e80:	6a03      	ldr	r3, [r0, #32]
 8020e82:	b90b      	cbnz	r3, 8020e88 <_vfiprintf_r+0x18>
 8020e84:	f7fd fa62 	bl	801e34c <__sinit>
 8020e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020e8a:	07d9      	lsls	r1, r3, #31
 8020e8c:	d405      	bmi.n	8020e9a <_vfiprintf_r+0x2a>
 8020e8e:	89ab      	ldrh	r3, [r5, #12]
 8020e90:	059a      	lsls	r2, r3, #22
 8020e92:	d402      	bmi.n	8020e9a <_vfiprintf_r+0x2a>
 8020e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020e96:	f7fd fc26 	bl	801e6e6 <__retarget_lock_acquire_recursive>
 8020e9a:	89ab      	ldrh	r3, [r5, #12]
 8020e9c:	071b      	lsls	r3, r3, #28
 8020e9e:	d501      	bpl.n	8020ea4 <_vfiprintf_r+0x34>
 8020ea0:	692b      	ldr	r3, [r5, #16]
 8020ea2:	b99b      	cbnz	r3, 8020ecc <_vfiprintf_r+0x5c>
 8020ea4:	4629      	mov	r1, r5
 8020ea6:	4630      	mov	r0, r6
 8020ea8:	f000 f94a 	bl	8021140 <__swsetup_r>
 8020eac:	b170      	cbz	r0, 8020ecc <_vfiprintf_r+0x5c>
 8020eae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020eb0:	07dc      	lsls	r4, r3, #31
 8020eb2:	d504      	bpl.n	8020ebe <_vfiprintf_r+0x4e>
 8020eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8020eb8:	b01d      	add	sp, #116	@ 0x74
 8020eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ebe:	89ab      	ldrh	r3, [r5, #12]
 8020ec0:	0598      	lsls	r0, r3, #22
 8020ec2:	d4f7      	bmi.n	8020eb4 <_vfiprintf_r+0x44>
 8020ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ec6:	f7fd fc0f 	bl	801e6e8 <__retarget_lock_release_recursive>
 8020eca:	e7f3      	b.n	8020eb4 <_vfiprintf_r+0x44>
 8020ecc:	2300      	movs	r3, #0
 8020ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ed0:	2320      	movs	r3, #32
 8020ed2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8020eda:	2330      	movs	r3, #48	@ 0x30
 8020edc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802108c <_vfiprintf_r+0x21c>
 8020ee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020ee4:	f04f 0901 	mov.w	r9, #1
 8020ee8:	4623      	mov	r3, r4
 8020eea:	469a      	mov	sl, r3
 8020eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ef0:	b10a      	cbz	r2, 8020ef6 <_vfiprintf_r+0x86>
 8020ef2:	2a25      	cmp	r2, #37	@ 0x25
 8020ef4:	d1f9      	bne.n	8020eea <_vfiprintf_r+0x7a>
 8020ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8020efa:	d00b      	beq.n	8020f14 <_vfiprintf_r+0xa4>
 8020efc:	465b      	mov	r3, fp
 8020efe:	4622      	mov	r2, r4
 8020f00:	4629      	mov	r1, r5
 8020f02:	4630      	mov	r0, r6
 8020f04:	f7ff ffa1 	bl	8020e4a <__sfputs_r>
 8020f08:	3001      	adds	r0, #1
 8020f0a:	f000 80a7 	beq.w	802105c <_vfiprintf_r+0x1ec>
 8020f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020f10:	445a      	add	r2, fp
 8020f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8020f14:	f89a 3000 	ldrb.w	r3, [sl]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	f000 809f 	beq.w	802105c <_vfiprintf_r+0x1ec>
 8020f1e:	2300      	movs	r3, #0
 8020f20:	f04f 32ff 	mov.w	r2, #4294967295
 8020f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020f28:	f10a 0a01 	add.w	sl, sl, #1
 8020f2c:	9304      	str	r3, [sp, #16]
 8020f2e:	9307      	str	r3, [sp, #28]
 8020f30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8020f36:	4654      	mov	r4, sl
 8020f38:	2205      	movs	r2, #5
 8020f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f3e:	4853      	ldr	r0, [pc, #332]	@ (802108c <_vfiprintf_r+0x21c>)
 8020f40:	f7df f946 	bl	80001d0 <memchr>
 8020f44:	9a04      	ldr	r2, [sp, #16]
 8020f46:	b9d8      	cbnz	r0, 8020f80 <_vfiprintf_r+0x110>
 8020f48:	06d1      	lsls	r1, r2, #27
 8020f4a:	bf44      	itt	mi
 8020f4c:	2320      	movmi	r3, #32
 8020f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020f52:	0713      	lsls	r3, r2, #28
 8020f54:	bf44      	itt	mi
 8020f56:	232b      	movmi	r3, #43	@ 0x2b
 8020f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8020f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8020f62:	d015      	beq.n	8020f90 <_vfiprintf_r+0x120>
 8020f64:	9a07      	ldr	r2, [sp, #28]
 8020f66:	4654      	mov	r4, sl
 8020f68:	2000      	movs	r0, #0
 8020f6a:	f04f 0c0a 	mov.w	ip, #10
 8020f6e:	4621      	mov	r1, r4
 8020f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020f74:	3b30      	subs	r3, #48	@ 0x30
 8020f76:	2b09      	cmp	r3, #9
 8020f78:	d94b      	bls.n	8021012 <_vfiprintf_r+0x1a2>
 8020f7a:	b1b0      	cbz	r0, 8020faa <_vfiprintf_r+0x13a>
 8020f7c:	9207      	str	r2, [sp, #28]
 8020f7e:	e014      	b.n	8020faa <_vfiprintf_r+0x13a>
 8020f80:	eba0 0308 	sub.w	r3, r0, r8
 8020f84:	fa09 f303 	lsl.w	r3, r9, r3
 8020f88:	4313      	orrs	r3, r2
 8020f8a:	9304      	str	r3, [sp, #16]
 8020f8c:	46a2      	mov	sl, r4
 8020f8e:	e7d2      	b.n	8020f36 <_vfiprintf_r+0xc6>
 8020f90:	9b03      	ldr	r3, [sp, #12]
 8020f92:	1d19      	adds	r1, r3, #4
 8020f94:	681b      	ldr	r3, [r3, #0]
 8020f96:	9103      	str	r1, [sp, #12]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	bfbb      	ittet	lt
 8020f9c:	425b      	neglt	r3, r3
 8020f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8020fa2:	9307      	strge	r3, [sp, #28]
 8020fa4:	9307      	strlt	r3, [sp, #28]
 8020fa6:	bfb8      	it	lt
 8020fa8:	9204      	strlt	r2, [sp, #16]
 8020faa:	7823      	ldrb	r3, [r4, #0]
 8020fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8020fae:	d10a      	bne.n	8020fc6 <_vfiprintf_r+0x156>
 8020fb0:	7863      	ldrb	r3, [r4, #1]
 8020fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8020fb4:	d132      	bne.n	802101c <_vfiprintf_r+0x1ac>
 8020fb6:	9b03      	ldr	r3, [sp, #12]
 8020fb8:	1d1a      	adds	r2, r3, #4
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	9203      	str	r2, [sp, #12]
 8020fbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020fc2:	3402      	adds	r4, #2
 8020fc4:	9305      	str	r3, [sp, #20]
 8020fc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802109c <_vfiprintf_r+0x22c>
 8020fca:	7821      	ldrb	r1, [r4, #0]
 8020fcc:	2203      	movs	r2, #3
 8020fce:	4650      	mov	r0, sl
 8020fd0:	f7df f8fe 	bl	80001d0 <memchr>
 8020fd4:	b138      	cbz	r0, 8020fe6 <_vfiprintf_r+0x176>
 8020fd6:	9b04      	ldr	r3, [sp, #16]
 8020fd8:	eba0 000a 	sub.w	r0, r0, sl
 8020fdc:	2240      	movs	r2, #64	@ 0x40
 8020fde:	4082      	lsls	r2, r0
 8020fe0:	4313      	orrs	r3, r2
 8020fe2:	3401      	adds	r4, #1
 8020fe4:	9304      	str	r3, [sp, #16]
 8020fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020fea:	4829      	ldr	r0, [pc, #164]	@ (8021090 <_vfiprintf_r+0x220>)
 8020fec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020ff0:	2206      	movs	r2, #6
 8020ff2:	f7df f8ed 	bl	80001d0 <memchr>
 8020ff6:	2800      	cmp	r0, #0
 8020ff8:	d03f      	beq.n	802107a <_vfiprintf_r+0x20a>
 8020ffa:	4b26      	ldr	r3, [pc, #152]	@ (8021094 <_vfiprintf_r+0x224>)
 8020ffc:	bb1b      	cbnz	r3, 8021046 <_vfiprintf_r+0x1d6>
 8020ffe:	9b03      	ldr	r3, [sp, #12]
 8021000:	3307      	adds	r3, #7
 8021002:	f023 0307 	bic.w	r3, r3, #7
 8021006:	3308      	adds	r3, #8
 8021008:	9303      	str	r3, [sp, #12]
 802100a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802100c:	443b      	add	r3, r7
 802100e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021010:	e76a      	b.n	8020ee8 <_vfiprintf_r+0x78>
 8021012:	fb0c 3202 	mla	r2, ip, r2, r3
 8021016:	460c      	mov	r4, r1
 8021018:	2001      	movs	r0, #1
 802101a:	e7a8      	b.n	8020f6e <_vfiprintf_r+0xfe>
 802101c:	2300      	movs	r3, #0
 802101e:	3401      	adds	r4, #1
 8021020:	9305      	str	r3, [sp, #20]
 8021022:	4619      	mov	r1, r3
 8021024:	f04f 0c0a 	mov.w	ip, #10
 8021028:	4620      	mov	r0, r4
 802102a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802102e:	3a30      	subs	r2, #48	@ 0x30
 8021030:	2a09      	cmp	r2, #9
 8021032:	d903      	bls.n	802103c <_vfiprintf_r+0x1cc>
 8021034:	2b00      	cmp	r3, #0
 8021036:	d0c6      	beq.n	8020fc6 <_vfiprintf_r+0x156>
 8021038:	9105      	str	r1, [sp, #20]
 802103a:	e7c4      	b.n	8020fc6 <_vfiprintf_r+0x156>
 802103c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021040:	4604      	mov	r4, r0
 8021042:	2301      	movs	r3, #1
 8021044:	e7f0      	b.n	8021028 <_vfiprintf_r+0x1b8>
 8021046:	ab03      	add	r3, sp, #12
 8021048:	9300      	str	r3, [sp, #0]
 802104a:	462a      	mov	r2, r5
 802104c:	4b12      	ldr	r3, [pc, #72]	@ (8021098 <_vfiprintf_r+0x228>)
 802104e:	a904      	add	r1, sp, #16
 8021050:	4630      	mov	r0, r6
 8021052:	f7fc fa63 	bl	801d51c <_printf_float>
 8021056:	4607      	mov	r7, r0
 8021058:	1c78      	adds	r0, r7, #1
 802105a:	d1d6      	bne.n	802100a <_vfiprintf_r+0x19a>
 802105c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802105e:	07d9      	lsls	r1, r3, #31
 8021060:	d405      	bmi.n	802106e <_vfiprintf_r+0x1fe>
 8021062:	89ab      	ldrh	r3, [r5, #12]
 8021064:	059a      	lsls	r2, r3, #22
 8021066:	d402      	bmi.n	802106e <_vfiprintf_r+0x1fe>
 8021068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802106a:	f7fd fb3d 	bl	801e6e8 <__retarget_lock_release_recursive>
 802106e:	89ab      	ldrh	r3, [r5, #12]
 8021070:	065b      	lsls	r3, r3, #25
 8021072:	f53f af1f 	bmi.w	8020eb4 <_vfiprintf_r+0x44>
 8021076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021078:	e71e      	b.n	8020eb8 <_vfiprintf_r+0x48>
 802107a:	ab03      	add	r3, sp, #12
 802107c:	9300      	str	r3, [sp, #0]
 802107e:	462a      	mov	r2, r5
 8021080:	4b05      	ldr	r3, [pc, #20]	@ (8021098 <_vfiprintf_r+0x228>)
 8021082:	a904      	add	r1, sp, #16
 8021084:	4630      	mov	r0, r6
 8021086:	f7fc fce1 	bl	801da4c <_printf_i>
 802108a:	e7e4      	b.n	8021056 <_vfiprintf_r+0x1e6>
 802108c:	08026260 	.word	0x08026260
 8021090:	0802626a 	.word	0x0802626a
 8021094:	0801d51d 	.word	0x0801d51d
 8021098:	08020e4b 	.word	0x08020e4b
 802109c:	08026266 	.word	0x08026266

080210a0 <fiprintf>:
 80210a0:	b40e      	push	{r1, r2, r3}
 80210a2:	b503      	push	{r0, r1, lr}
 80210a4:	4601      	mov	r1, r0
 80210a6:	ab03      	add	r3, sp, #12
 80210a8:	4805      	ldr	r0, [pc, #20]	@ (80210c0 <fiprintf+0x20>)
 80210aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80210ae:	6800      	ldr	r0, [r0, #0]
 80210b0:	9301      	str	r3, [sp, #4]
 80210b2:	f7ff fedd 	bl	8020e70 <_vfiprintf_r>
 80210b6:	b002      	add	sp, #8
 80210b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80210bc:	b003      	add	sp, #12
 80210be:	4770      	bx	lr
 80210c0:	20000054 	.word	0x20000054

080210c4 <__swbuf_r>:
 80210c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210c6:	460e      	mov	r6, r1
 80210c8:	4614      	mov	r4, r2
 80210ca:	4605      	mov	r5, r0
 80210cc:	b118      	cbz	r0, 80210d6 <__swbuf_r+0x12>
 80210ce:	6a03      	ldr	r3, [r0, #32]
 80210d0:	b90b      	cbnz	r3, 80210d6 <__swbuf_r+0x12>
 80210d2:	f7fd f93b 	bl	801e34c <__sinit>
 80210d6:	69a3      	ldr	r3, [r4, #24]
 80210d8:	60a3      	str	r3, [r4, #8]
 80210da:	89a3      	ldrh	r3, [r4, #12]
 80210dc:	071a      	lsls	r2, r3, #28
 80210de:	d501      	bpl.n	80210e4 <__swbuf_r+0x20>
 80210e0:	6923      	ldr	r3, [r4, #16]
 80210e2:	b943      	cbnz	r3, 80210f6 <__swbuf_r+0x32>
 80210e4:	4621      	mov	r1, r4
 80210e6:	4628      	mov	r0, r5
 80210e8:	f000 f82a 	bl	8021140 <__swsetup_r>
 80210ec:	b118      	cbz	r0, 80210f6 <__swbuf_r+0x32>
 80210ee:	f04f 37ff 	mov.w	r7, #4294967295
 80210f2:	4638      	mov	r0, r7
 80210f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210f6:	6823      	ldr	r3, [r4, #0]
 80210f8:	6922      	ldr	r2, [r4, #16]
 80210fa:	1a98      	subs	r0, r3, r2
 80210fc:	6963      	ldr	r3, [r4, #20]
 80210fe:	b2f6      	uxtb	r6, r6
 8021100:	4283      	cmp	r3, r0
 8021102:	4637      	mov	r7, r6
 8021104:	dc05      	bgt.n	8021112 <__swbuf_r+0x4e>
 8021106:	4621      	mov	r1, r4
 8021108:	4628      	mov	r0, r5
 802110a:	f7fd f857 	bl	801e1bc <_fflush_r>
 802110e:	2800      	cmp	r0, #0
 8021110:	d1ed      	bne.n	80210ee <__swbuf_r+0x2a>
 8021112:	68a3      	ldr	r3, [r4, #8]
 8021114:	3b01      	subs	r3, #1
 8021116:	60a3      	str	r3, [r4, #8]
 8021118:	6823      	ldr	r3, [r4, #0]
 802111a:	1c5a      	adds	r2, r3, #1
 802111c:	6022      	str	r2, [r4, #0]
 802111e:	701e      	strb	r6, [r3, #0]
 8021120:	6962      	ldr	r2, [r4, #20]
 8021122:	1c43      	adds	r3, r0, #1
 8021124:	429a      	cmp	r2, r3
 8021126:	d004      	beq.n	8021132 <__swbuf_r+0x6e>
 8021128:	89a3      	ldrh	r3, [r4, #12]
 802112a:	07db      	lsls	r3, r3, #31
 802112c:	d5e1      	bpl.n	80210f2 <__swbuf_r+0x2e>
 802112e:	2e0a      	cmp	r6, #10
 8021130:	d1df      	bne.n	80210f2 <__swbuf_r+0x2e>
 8021132:	4621      	mov	r1, r4
 8021134:	4628      	mov	r0, r5
 8021136:	f7fd f841 	bl	801e1bc <_fflush_r>
 802113a:	2800      	cmp	r0, #0
 802113c:	d0d9      	beq.n	80210f2 <__swbuf_r+0x2e>
 802113e:	e7d6      	b.n	80210ee <__swbuf_r+0x2a>

08021140 <__swsetup_r>:
 8021140:	b538      	push	{r3, r4, r5, lr}
 8021142:	4b29      	ldr	r3, [pc, #164]	@ (80211e8 <__swsetup_r+0xa8>)
 8021144:	4605      	mov	r5, r0
 8021146:	6818      	ldr	r0, [r3, #0]
 8021148:	460c      	mov	r4, r1
 802114a:	b118      	cbz	r0, 8021154 <__swsetup_r+0x14>
 802114c:	6a03      	ldr	r3, [r0, #32]
 802114e:	b90b      	cbnz	r3, 8021154 <__swsetup_r+0x14>
 8021150:	f7fd f8fc 	bl	801e34c <__sinit>
 8021154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021158:	0719      	lsls	r1, r3, #28
 802115a:	d422      	bmi.n	80211a2 <__swsetup_r+0x62>
 802115c:	06da      	lsls	r2, r3, #27
 802115e:	d407      	bmi.n	8021170 <__swsetup_r+0x30>
 8021160:	2209      	movs	r2, #9
 8021162:	602a      	str	r2, [r5, #0]
 8021164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021168:	81a3      	strh	r3, [r4, #12]
 802116a:	f04f 30ff 	mov.w	r0, #4294967295
 802116e:	e033      	b.n	80211d8 <__swsetup_r+0x98>
 8021170:	0758      	lsls	r0, r3, #29
 8021172:	d512      	bpl.n	802119a <__swsetup_r+0x5a>
 8021174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021176:	b141      	cbz	r1, 802118a <__swsetup_r+0x4a>
 8021178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802117c:	4299      	cmp	r1, r3
 802117e:	d002      	beq.n	8021186 <__swsetup_r+0x46>
 8021180:	4628      	mov	r0, r5
 8021182:	f7fe f939 	bl	801f3f8 <_free_r>
 8021186:	2300      	movs	r3, #0
 8021188:	6363      	str	r3, [r4, #52]	@ 0x34
 802118a:	89a3      	ldrh	r3, [r4, #12]
 802118c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021190:	81a3      	strh	r3, [r4, #12]
 8021192:	2300      	movs	r3, #0
 8021194:	6063      	str	r3, [r4, #4]
 8021196:	6923      	ldr	r3, [r4, #16]
 8021198:	6023      	str	r3, [r4, #0]
 802119a:	89a3      	ldrh	r3, [r4, #12]
 802119c:	f043 0308 	orr.w	r3, r3, #8
 80211a0:	81a3      	strh	r3, [r4, #12]
 80211a2:	6923      	ldr	r3, [r4, #16]
 80211a4:	b94b      	cbnz	r3, 80211ba <__swsetup_r+0x7a>
 80211a6:	89a3      	ldrh	r3, [r4, #12]
 80211a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80211ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80211b0:	d003      	beq.n	80211ba <__swsetup_r+0x7a>
 80211b2:	4621      	mov	r1, r4
 80211b4:	4628      	mov	r0, r5
 80211b6:	f000 fbf9 	bl	80219ac <__smakebuf_r>
 80211ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211be:	f013 0201 	ands.w	r2, r3, #1
 80211c2:	d00a      	beq.n	80211da <__swsetup_r+0x9a>
 80211c4:	2200      	movs	r2, #0
 80211c6:	60a2      	str	r2, [r4, #8]
 80211c8:	6962      	ldr	r2, [r4, #20]
 80211ca:	4252      	negs	r2, r2
 80211cc:	61a2      	str	r2, [r4, #24]
 80211ce:	6922      	ldr	r2, [r4, #16]
 80211d0:	b942      	cbnz	r2, 80211e4 <__swsetup_r+0xa4>
 80211d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80211d6:	d1c5      	bne.n	8021164 <__swsetup_r+0x24>
 80211d8:	bd38      	pop	{r3, r4, r5, pc}
 80211da:	0799      	lsls	r1, r3, #30
 80211dc:	bf58      	it	pl
 80211de:	6962      	ldrpl	r2, [r4, #20]
 80211e0:	60a2      	str	r2, [r4, #8]
 80211e2:	e7f4      	b.n	80211ce <__swsetup_r+0x8e>
 80211e4:	2000      	movs	r0, #0
 80211e6:	e7f7      	b.n	80211d8 <__swsetup_r+0x98>
 80211e8:	20000054 	.word	0x20000054

080211ec <_sbrk_r>:
 80211ec:	b538      	push	{r3, r4, r5, lr}
 80211ee:	4d06      	ldr	r5, [pc, #24]	@ (8021208 <_sbrk_r+0x1c>)
 80211f0:	2300      	movs	r3, #0
 80211f2:	4604      	mov	r4, r0
 80211f4:	4608      	mov	r0, r1
 80211f6:	602b      	str	r3, [r5, #0]
 80211f8:	f7e0 fe22 	bl	8001e40 <_sbrk>
 80211fc:	1c43      	adds	r3, r0, #1
 80211fe:	d102      	bne.n	8021206 <_sbrk_r+0x1a>
 8021200:	682b      	ldr	r3, [r5, #0]
 8021202:	b103      	cbz	r3, 8021206 <_sbrk_r+0x1a>
 8021204:	6023      	str	r3, [r4, #0]
 8021206:	bd38      	pop	{r3, r4, r5, pc}
 8021208:	20012948 	.word	0x20012948
 802120c:	00000000 	.word	0x00000000

08021210 <nan>:
 8021210:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021218 <nan+0x8>
 8021214:	4770      	bx	lr
 8021216:	bf00      	nop
 8021218:	00000000 	.word	0x00000000
 802121c:	7ff80000 	.word	0x7ff80000

08021220 <abort>:
 8021220:	b508      	push	{r3, lr}
 8021222:	2006      	movs	r0, #6
 8021224:	f000 fc26 	bl	8021a74 <raise>
 8021228:	2001      	movs	r0, #1
 802122a:	f7e0 fdad 	bl	8001d88 <_exit>

0802122e <_calloc_r>:
 802122e:	b570      	push	{r4, r5, r6, lr}
 8021230:	fba1 5402 	umull	r5, r4, r1, r2
 8021234:	b93c      	cbnz	r4, 8021246 <_calloc_r+0x18>
 8021236:	4629      	mov	r1, r5
 8021238:	f7fe f952 	bl	801f4e0 <_malloc_r>
 802123c:	4606      	mov	r6, r0
 802123e:	b928      	cbnz	r0, 802124c <_calloc_r+0x1e>
 8021240:	2600      	movs	r6, #0
 8021242:	4630      	mov	r0, r6
 8021244:	bd70      	pop	{r4, r5, r6, pc}
 8021246:	220c      	movs	r2, #12
 8021248:	6002      	str	r2, [r0, #0]
 802124a:	e7f9      	b.n	8021240 <_calloc_r+0x12>
 802124c:	462a      	mov	r2, r5
 802124e:	4621      	mov	r1, r4
 8021250:	f7fd f951 	bl	801e4f6 <memset>
 8021254:	e7f5      	b.n	8021242 <_calloc_r+0x14>

08021256 <rshift>:
 8021256:	6903      	ldr	r3, [r0, #16]
 8021258:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021260:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021264:	f100 0414 	add.w	r4, r0, #20
 8021268:	dd45      	ble.n	80212f6 <rshift+0xa0>
 802126a:	f011 011f 	ands.w	r1, r1, #31
 802126e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021272:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021276:	d10c      	bne.n	8021292 <rshift+0x3c>
 8021278:	f100 0710 	add.w	r7, r0, #16
 802127c:	4629      	mov	r1, r5
 802127e:	42b1      	cmp	r1, r6
 8021280:	d334      	bcc.n	80212ec <rshift+0x96>
 8021282:	1a9b      	subs	r3, r3, r2
 8021284:	009b      	lsls	r3, r3, #2
 8021286:	1eea      	subs	r2, r5, #3
 8021288:	4296      	cmp	r6, r2
 802128a:	bf38      	it	cc
 802128c:	2300      	movcc	r3, #0
 802128e:	4423      	add	r3, r4
 8021290:	e015      	b.n	80212be <rshift+0x68>
 8021292:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021296:	f1c1 0820 	rsb	r8, r1, #32
 802129a:	40cf      	lsrs	r7, r1
 802129c:	f105 0e04 	add.w	lr, r5, #4
 80212a0:	46a1      	mov	r9, r4
 80212a2:	4576      	cmp	r6, lr
 80212a4:	46f4      	mov	ip, lr
 80212a6:	d815      	bhi.n	80212d4 <rshift+0x7e>
 80212a8:	1a9a      	subs	r2, r3, r2
 80212aa:	0092      	lsls	r2, r2, #2
 80212ac:	3a04      	subs	r2, #4
 80212ae:	3501      	adds	r5, #1
 80212b0:	42ae      	cmp	r6, r5
 80212b2:	bf38      	it	cc
 80212b4:	2200      	movcc	r2, #0
 80212b6:	18a3      	adds	r3, r4, r2
 80212b8:	50a7      	str	r7, [r4, r2]
 80212ba:	b107      	cbz	r7, 80212be <rshift+0x68>
 80212bc:	3304      	adds	r3, #4
 80212be:	1b1a      	subs	r2, r3, r4
 80212c0:	42a3      	cmp	r3, r4
 80212c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80212c6:	bf08      	it	eq
 80212c8:	2300      	moveq	r3, #0
 80212ca:	6102      	str	r2, [r0, #16]
 80212cc:	bf08      	it	eq
 80212ce:	6143      	streq	r3, [r0, #20]
 80212d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80212d4:	f8dc c000 	ldr.w	ip, [ip]
 80212d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80212dc:	ea4c 0707 	orr.w	r7, ip, r7
 80212e0:	f849 7b04 	str.w	r7, [r9], #4
 80212e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80212e8:	40cf      	lsrs	r7, r1
 80212ea:	e7da      	b.n	80212a2 <rshift+0x4c>
 80212ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80212f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80212f4:	e7c3      	b.n	802127e <rshift+0x28>
 80212f6:	4623      	mov	r3, r4
 80212f8:	e7e1      	b.n	80212be <rshift+0x68>

080212fa <__hexdig_fun>:
 80212fa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80212fe:	2b09      	cmp	r3, #9
 8021300:	d802      	bhi.n	8021308 <__hexdig_fun+0xe>
 8021302:	3820      	subs	r0, #32
 8021304:	b2c0      	uxtb	r0, r0
 8021306:	4770      	bx	lr
 8021308:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802130c:	2b05      	cmp	r3, #5
 802130e:	d801      	bhi.n	8021314 <__hexdig_fun+0x1a>
 8021310:	3847      	subs	r0, #71	@ 0x47
 8021312:	e7f7      	b.n	8021304 <__hexdig_fun+0xa>
 8021314:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021318:	2b05      	cmp	r3, #5
 802131a:	d801      	bhi.n	8021320 <__hexdig_fun+0x26>
 802131c:	3827      	subs	r0, #39	@ 0x27
 802131e:	e7f1      	b.n	8021304 <__hexdig_fun+0xa>
 8021320:	2000      	movs	r0, #0
 8021322:	4770      	bx	lr

08021324 <__gethex>:
 8021324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021328:	b085      	sub	sp, #20
 802132a:	468a      	mov	sl, r1
 802132c:	9302      	str	r3, [sp, #8]
 802132e:	680b      	ldr	r3, [r1, #0]
 8021330:	9001      	str	r0, [sp, #4]
 8021332:	4690      	mov	r8, r2
 8021334:	1c9c      	adds	r4, r3, #2
 8021336:	46a1      	mov	r9, r4
 8021338:	f814 0b01 	ldrb.w	r0, [r4], #1
 802133c:	2830      	cmp	r0, #48	@ 0x30
 802133e:	d0fa      	beq.n	8021336 <__gethex+0x12>
 8021340:	eba9 0303 	sub.w	r3, r9, r3
 8021344:	f1a3 0b02 	sub.w	fp, r3, #2
 8021348:	f7ff ffd7 	bl	80212fa <__hexdig_fun>
 802134c:	4605      	mov	r5, r0
 802134e:	2800      	cmp	r0, #0
 8021350:	d168      	bne.n	8021424 <__gethex+0x100>
 8021352:	49a0      	ldr	r1, [pc, #640]	@ (80215d4 <__gethex+0x2b0>)
 8021354:	2201      	movs	r2, #1
 8021356:	4648      	mov	r0, r9
 8021358:	f7fd f8d5 	bl	801e506 <strncmp>
 802135c:	4607      	mov	r7, r0
 802135e:	2800      	cmp	r0, #0
 8021360:	d167      	bne.n	8021432 <__gethex+0x10e>
 8021362:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021366:	4626      	mov	r6, r4
 8021368:	f7ff ffc7 	bl	80212fa <__hexdig_fun>
 802136c:	2800      	cmp	r0, #0
 802136e:	d062      	beq.n	8021436 <__gethex+0x112>
 8021370:	4623      	mov	r3, r4
 8021372:	7818      	ldrb	r0, [r3, #0]
 8021374:	2830      	cmp	r0, #48	@ 0x30
 8021376:	4699      	mov	r9, r3
 8021378:	f103 0301 	add.w	r3, r3, #1
 802137c:	d0f9      	beq.n	8021372 <__gethex+0x4e>
 802137e:	f7ff ffbc 	bl	80212fa <__hexdig_fun>
 8021382:	fab0 f580 	clz	r5, r0
 8021386:	096d      	lsrs	r5, r5, #5
 8021388:	f04f 0b01 	mov.w	fp, #1
 802138c:	464a      	mov	r2, r9
 802138e:	4616      	mov	r6, r2
 8021390:	3201      	adds	r2, #1
 8021392:	7830      	ldrb	r0, [r6, #0]
 8021394:	f7ff ffb1 	bl	80212fa <__hexdig_fun>
 8021398:	2800      	cmp	r0, #0
 802139a:	d1f8      	bne.n	802138e <__gethex+0x6a>
 802139c:	498d      	ldr	r1, [pc, #564]	@ (80215d4 <__gethex+0x2b0>)
 802139e:	2201      	movs	r2, #1
 80213a0:	4630      	mov	r0, r6
 80213a2:	f7fd f8b0 	bl	801e506 <strncmp>
 80213a6:	2800      	cmp	r0, #0
 80213a8:	d13f      	bne.n	802142a <__gethex+0x106>
 80213aa:	b944      	cbnz	r4, 80213be <__gethex+0x9a>
 80213ac:	1c74      	adds	r4, r6, #1
 80213ae:	4622      	mov	r2, r4
 80213b0:	4616      	mov	r6, r2
 80213b2:	3201      	adds	r2, #1
 80213b4:	7830      	ldrb	r0, [r6, #0]
 80213b6:	f7ff ffa0 	bl	80212fa <__hexdig_fun>
 80213ba:	2800      	cmp	r0, #0
 80213bc:	d1f8      	bne.n	80213b0 <__gethex+0x8c>
 80213be:	1ba4      	subs	r4, r4, r6
 80213c0:	00a7      	lsls	r7, r4, #2
 80213c2:	7833      	ldrb	r3, [r6, #0]
 80213c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80213c8:	2b50      	cmp	r3, #80	@ 0x50
 80213ca:	d13e      	bne.n	802144a <__gethex+0x126>
 80213cc:	7873      	ldrb	r3, [r6, #1]
 80213ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80213d0:	d033      	beq.n	802143a <__gethex+0x116>
 80213d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80213d4:	d034      	beq.n	8021440 <__gethex+0x11c>
 80213d6:	1c71      	adds	r1, r6, #1
 80213d8:	2400      	movs	r4, #0
 80213da:	7808      	ldrb	r0, [r1, #0]
 80213dc:	f7ff ff8d 	bl	80212fa <__hexdig_fun>
 80213e0:	1e43      	subs	r3, r0, #1
 80213e2:	b2db      	uxtb	r3, r3
 80213e4:	2b18      	cmp	r3, #24
 80213e6:	d830      	bhi.n	802144a <__gethex+0x126>
 80213e8:	f1a0 0210 	sub.w	r2, r0, #16
 80213ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80213f0:	f7ff ff83 	bl	80212fa <__hexdig_fun>
 80213f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80213f8:	fa5f fc8c 	uxtb.w	ip, ip
 80213fc:	f1bc 0f18 	cmp.w	ip, #24
 8021400:	f04f 030a 	mov.w	r3, #10
 8021404:	d91e      	bls.n	8021444 <__gethex+0x120>
 8021406:	b104      	cbz	r4, 802140a <__gethex+0xe6>
 8021408:	4252      	negs	r2, r2
 802140a:	4417      	add	r7, r2
 802140c:	f8ca 1000 	str.w	r1, [sl]
 8021410:	b1ed      	cbz	r5, 802144e <__gethex+0x12a>
 8021412:	f1bb 0f00 	cmp.w	fp, #0
 8021416:	bf0c      	ite	eq
 8021418:	2506      	moveq	r5, #6
 802141a:	2500      	movne	r5, #0
 802141c:	4628      	mov	r0, r5
 802141e:	b005      	add	sp, #20
 8021420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021424:	2500      	movs	r5, #0
 8021426:	462c      	mov	r4, r5
 8021428:	e7b0      	b.n	802138c <__gethex+0x68>
 802142a:	2c00      	cmp	r4, #0
 802142c:	d1c7      	bne.n	80213be <__gethex+0x9a>
 802142e:	4627      	mov	r7, r4
 8021430:	e7c7      	b.n	80213c2 <__gethex+0x9e>
 8021432:	464e      	mov	r6, r9
 8021434:	462f      	mov	r7, r5
 8021436:	2501      	movs	r5, #1
 8021438:	e7c3      	b.n	80213c2 <__gethex+0x9e>
 802143a:	2400      	movs	r4, #0
 802143c:	1cb1      	adds	r1, r6, #2
 802143e:	e7cc      	b.n	80213da <__gethex+0xb6>
 8021440:	2401      	movs	r4, #1
 8021442:	e7fb      	b.n	802143c <__gethex+0x118>
 8021444:	fb03 0002 	mla	r0, r3, r2, r0
 8021448:	e7ce      	b.n	80213e8 <__gethex+0xc4>
 802144a:	4631      	mov	r1, r6
 802144c:	e7de      	b.n	802140c <__gethex+0xe8>
 802144e:	eba6 0309 	sub.w	r3, r6, r9
 8021452:	3b01      	subs	r3, #1
 8021454:	4629      	mov	r1, r5
 8021456:	2b07      	cmp	r3, #7
 8021458:	dc0a      	bgt.n	8021470 <__gethex+0x14c>
 802145a:	9801      	ldr	r0, [sp, #4]
 802145c:	f7fe f8cc 	bl	801f5f8 <_Balloc>
 8021460:	4604      	mov	r4, r0
 8021462:	b940      	cbnz	r0, 8021476 <__gethex+0x152>
 8021464:	4b5c      	ldr	r3, [pc, #368]	@ (80215d8 <__gethex+0x2b4>)
 8021466:	4602      	mov	r2, r0
 8021468:	21e4      	movs	r1, #228	@ 0xe4
 802146a:	485c      	ldr	r0, [pc, #368]	@ (80215dc <__gethex+0x2b8>)
 802146c:	f7fd f95a 	bl	801e724 <__assert_func>
 8021470:	3101      	adds	r1, #1
 8021472:	105b      	asrs	r3, r3, #1
 8021474:	e7ef      	b.n	8021456 <__gethex+0x132>
 8021476:	f100 0a14 	add.w	sl, r0, #20
 802147a:	2300      	movs	r3, #0
 802147c:	4655      	mov	r5, sl
 802147e:	469b      	mov	fp, r3
 8021480:	45b1      	cmp	r9, r6
 8021482:	d337      	bcc.n	80214f4 <__gethex+0x1d0>
 8021484:	f845 bb04 	str.w	fp, [r5], #4
 8021488:	eba5 050a 	sub.w	r5, r5, sl
 802148c:	10ad      	asrs	r5, r5, #2
 802148e:	6125      	str	r5, [r4, #16]
 8021490:	4658      	mov	r0, fp
 8021492:	f7fe f9a3 	bl	801f7dc <__hi0bits>
 8021496:	016d      	lsls	r5, r5, #5
 8021498:	f8d8 6000 	ldr.w	r6, [r8]
 802149c:	1a2d      	subs	r5, r5, r0
 802149e:	42b5      	cmp	r5, r6
 80214a0:	dd54      	ble.n	802154c <__gethex+0x228>
 80214a2:	1bad      	subs	r5, r5, r6
 80214a4:	4629      	mov	r1, r5
 80214a6:	4620      	mov	r0, r4
 80214a8:	f7fe fd37 	bl	801ff1a <__any_on>
 80214ac:	4681      	mov	r9, r0
 80214ae:	b178      	cbz	r0, 80214d0 <__gethex+0x1ac>
 80214b0:	1e6b      	subs	r3, r5, #1
 80214b2:	1159      	asrs	r1, r3, #5
 80214b4:	f003 021f 	and.w	r2, r3, #31
 80214b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80214bc:	f04f 0901 	mov.w	r9, #1
 80214c0:	fa09 f202 	lsl.w	r2, r9, r2
 80214c4:	420a      	tst	r2, r1
 80214c6:	d003      	beq.n	80214d0 <__gethex+0x1ac>
 80214c8:	454b      	cmp	r3, r9
 80214ca:	dc36      	bgt.n	802153a <__gethex+0x216>
 80214cc:	f04f 0902 	mov.w	r9, #2
 80214d0:	4629      	mov	r1, r5
 80214d2:	4620      	mov	r0, r4
 80214d4:	f7ff febf 	bl	8021256 <rshift>
 80214d8:	442f      	add	r7, r5
 80214da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80214de:	42bb      	cmp	r3, r7
 80214e0:	da42      	bge.n	8021568 <__gethex+0x244>
 80214e2:	9801      	ldr	r0, [sp, #4]
 80214e4:	4621      	mov	r1, r4
 80214e6:	f7fe f8c7 	bl	801f678 <_Bfree>
 80214ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214ec:	2300      	movs	r3, #0
 80214ee:	6013      	str	r3, [r2, #0]
 80214f0:	25a3      	movs	r5, #163	@ 0xa3
 80214f2:	e793      	b.n	802141c <__gethex+0xf8>
 80214f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80214f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80214fa:	d012      	beq.n	8021522 <__gethex+0x1fe>
 80214fc:	2b20      	cmp	r3, #32
 80214fe:	d104      	bne.n	802150a <__gethex+0x1e6>
 8021500:	f845 bb04 	str.w	fp, [r5], #4
 8021504:	f04f 0b00 	mov.w	fp, #0
 8021508:	465b      	mov	r3, fp
 802150a:	7830      	ldrb	r0, [r6, #0]
 802150c:	9303      	str	r3, [sp, #12]
 802150e:	f7ff fef4 	bl	80212fa <__hexdig_fun>
 8021512:	9b03      	ldr	r3, [sp, #12]
 8021514:	f000 000f 	and.w	r0, r0, #15
 8021518:	4098      	lsls	r0, r3
 802151a:	ea4b 0b00 	orr.w	fp, fp, r0
 802151e:	3304      	adds	r3, #4
 8021520:	e7ae      	b.n	8021480 <__gethex+0x15c>
 8021522:	45b1      	cmp	r9, r6
 8021524:	d8ea      	bhi.n	80214fc <__gethex+0x1d8>
 8021526:	492b      	ldr	r1, [pc, #172]	@ (80215d4 <__gethex+0x2b0>)
 8021528:	9303      	str	r3, [sp, #12]
 802152a:	2201      	movs	r2, #1
 802152c:	4630      	mov	r0, r6
 802152e:	f7fc ffea 	bl	801e506 <strncmp>
 8021532:	9b03      	ldr	r3, [sp, #12]
 8021534:	2800      	cmp	r0, #0
 8021536:	d1e1      	bne.n	80214fc <__gethex+0x1d8>
 8021538:	e7a2      	b.n	8021480 <__gethex+0x15c>
 802153a:	1ea9      	subs	r1, r5, #2
 802153c:	4620      	mov	r0, r4
 802153e:	f7fe fcec 	bl	801ff1a <__any_on>
 8021542:	2800      	cmp	r0, #0
 8021544:	d0c2      	beq.n	80214cc <__gethex+0x1a8>
 8021546:	f04f 0903 	mov.w	r9, #3
 802154a:	e7c1      	b.n	80214d0 <__gethex+0x1ac>
 802154c:	da09      	bge.n	8021562 <__gethex+0x23e>
 802154e:	1b75      	subs	r5, r6, r5
 8021550:	4621      	mov	r1, r4
 8021552:	9801      	ldr	r0, [sp, #4]
 8021554:	462a      	mov	r2, r5
 8021556:	f7fe faa7 	bl	801faa8 <__lshift>
 802155a:	1b7f      	subs	r7, r7, r5
 802155c:	4604      	mov	r4, r0
 802155e:	f100 0a14 	add.w	sl, r0, #20
 8021562:	f04f 0900 	mov.w	r9, #0
 8021566:	e7b8      	b.n	80214da <__gethex+0x1b6>
 8021568:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802156c:	42bd      	cmp	r5, r7
 802156e:	dd6f      	ble.n	8021650 <__gethex+0x32c>
 8021570:	1bed      	subs	r5, r5, r7
 8021572:	42ae      	cmp	r6, r5
 8021574:	dc34      	bgt.n	80215e0 <__gethex+0x2bc>
 8021576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802157a:	2b02      	cmp	r3, #2
 802157c:	d022      	beq.n	80215c4 <__gethex+0x2a0>
 802157e:	2b03      	cmp	r3, #3
 8021580:	d024      	beq.n	80215cc <__gethex+0x2a8>
 8021582:	2b01      	cmp	r3, #1
 8021584:	d115      	bne.n	80215b2 <__gethex+0x28e>
 8021586:	42ae      	cmp	r6, r5
 8021588:	d113      	bne.n	80215b2 <__gethex+0x28e>
 802158a:	2e01      	cmp	r6, #1
 802158c:	d10b      	bne.n	80215a6 <__gethex+0x282>
 802158e:	9a02      	ldr	r2, [sp, #8]
 8021590:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021594:	6013      	str	r3, [r2, #0]
 8021596:	2301      	movs	r3, #1
 8021598:	6123      	str	r3, [r4, #16]
 802159a:	f8ca 3000 	str.w	r3, [sl]
 802159e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80215a0:	2562      	movs	r5, #98	@ 0x62
 80215a2:	601c      	str	r4, [r3, #0]
 80215a4:	e73a      	b.n	802141c <__gethex+0xf8>
 80215a6:	1e71      	subs	r1, r6, #1
 80215a8:	4620      	mov	r0, r4
 80215aa:	f7fe fcb6 	bl	801ff1a <__any_on>
 80215ae:	2800      	cmp	r0, #0
 80215b0:	d1ed      	bne.n	802158e <__gethex+0x26a>
 80215b2:	9801      	ldr	r0, [sp, #4]
 80215b4:	4621      	mov	r1, r4
 80215b6:	f7fe f85f 	bl	801f678 <_Bfree>
 80215ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80215bc:	2300      	movs	r3, #0
 80215be:	6013      	str	r3, [r2, #0]
 80215c0:	2550      	movs	r5, #80	@ 0x50
 80215c2:	e72b      	b.n	802141c <__gethex+0xf8>
 80215c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d1f3      	bne.n	80215b2 <__gethex+0x28e>
 80215ca:	e7e0      	b.n	802158e <__gethex+0x26a>
 80215cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d1dd      	bne.n	802158e <__gethex+0x26a>
 80215d2:	e7ee      	b.n	80215b2 <__gethex+0x28e>
 80215d4:	08026208 	.word	0x08026208
 80215d8:	080260a1 	.word	0x080260a1
 80215dc:	08026279 	.word	0x08026279
 80215e0:	1e6f      	subs	r7, r5, #1
 80215e2:	f1b9 0f00 	cmp.w	r9, #0
 80215e6:	d130      	bne.n	802164a <__gethex+0x326>
 80215e8:	b127      	cbz	r7, 80215f4 <__gethex+0x2d0>
 80215ea:	4639      	mov	r1, r7
 80215ec:	4620      	mov	r0, r4
 80215ee:	f7fe fc94 	bl	801ff1a <__any_on>
 80215f2:	4681      	mov	r9, r0
 80215f4:	117a      	asrs	r2, r7, #5
 80215f6:	2301      	movs	r3, #1
 80215f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80215fc:	f007 071f 	and.w	r7, r7, #31
 8021600:	40bb      	lsls	r3, r7
 8021602:	4213      	tst	r3, r2
 8021604:	4629      	mov	r1, r5
 8021606:	4620      	mov	r0, r4
 8021608:	bf18      	it	ne
 802160a:	f049 0902 	orrne.w	r9, r9, #2
 802160e:	f7ff fe22 	bl	8021256 <rshift>
 8021612:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021616:	1b76      	subs	r6, r6, r5
 8021618:	2502      	movs	r5, #2
 802161a:	f1b9 0f00 	cmp.w	r9, #0
 802161e:	d047      	beq.n	80216b0 <__gethex+0x38c>
 8021620:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021624:	2b02      	cmp	r3, #2
 8021626:	d015      	beq.n	8021654 <__gethex+0x330>
 8021628:	2b03      	cmp	r3, #3
 802162a:	d017      	beq.n	802165c <__gethex+0x338>
 802162c:	2b01      	cmp	r3, #1
 802162e:	d109      	bne.n	8021644 <__gethex+0x320>
 8021630:	f019 0f02 	tst.w	r9, #2
 8021634:	d006      	beq.n	8021644 <__gethex+0x320>
 8021636:	f8da 3000 	ldr.w	r3, [sl]
 802163a:	ea49 0903 	orr.w	r9, r9, r3
 802163e:	f019 0f01 	tst.w	r9, #1
 8021642:	d10e      	bne.n	8021662 <__gethex+0x33e>
 8021644:	f045 0510 	orr.w	r5, r5, #16
 8021648:	e032      	b.n	80216b0 <__gethex+0x38c>
 802164a:	f04f 0901 	mov.w	r9, #1
 802164e:	e7d1      	b.n	80215f4 <__gethex+0x2d0>
 8021650:	2501      	movs	r5, #1
 8021652:	e7e2      	b.n	802161a <__gethex+0x2f6>
 8021654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021656:	f1c3 0301 	rsb	r3, r3, #1
 802165a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802165c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802165e:	2b00      	cmp	r3, #0
 8021660:	d0f0      	beq.n	8021644 <__gethex+0x320>
 8021662:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021666:	f104 0314 	add.w	r3, r4, #20
 802166a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802166e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021672:	f04f 0c00 	mov.w	ip, #0
 8021676:	4618      	mov	r0, r3
 8021678:	f853 2b04 	ldr.w	r2, [r3], #4
 802167c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021680:	d01b      	beq.n	80216ba <__gethex+0x396>
 8021682:	3201      	adds	r2, #1
 8021684:	6002      	str	r2, [r0, #0]
 8021686:	2d02      	cmp	r5, #2
 8021688:	f104 0314 	add.w	r3, r4, #20
 802168c:	d13c      	bne.n	8021708 <__gethex+0x3e4>
 802168e:	f8d8 2000 	ldr.w	r2, [r8]
 8021692:	3a01      	subs	r2, #1
 8021694:	42b2      	cmp	r2, r6
 8021696:	d109      	bne.n	80216ac <__gethex+0x388>
 8021698:	1171      	asrs	r1, r6, #5
 802169a:	2201      	movs	r2, #1
 802169c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80216a0:	f006 061f 	and.w	r6, r6, #31
 80216a4:	fa02 f606 	lsl.w	r6, r2, r6
 80216a8:	421e      	tst	r6, r3
 80216aa:	d13a      	bne.n	8021722 <__gethex+0x3fe>
 80216ac:	f045 0520 	orr.w	r5, r5, #32
 80216b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216b2:	601c      	str	r4, [r3, #0]
 80216b4:	9b02      	ldr	r3, [sp, #8]
 80216b6:	601f      	str	r7, [r3, #0]
 80216b8:	e6b0      	b.n	802141c <__gethex+0xf8>
 80216ba:	4299      	cmp	r1, r3
 80216bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80216c0:	d8d9      	bhi.n	8021676 <__gethex+0x352>
 80216c2:	68a3      	ldr	r3, [r4, #8]
 80216c4:	459b      	cmp	fp, r3
 80216c6:	db17      	blt.n	80216f8 <__gethex+0x3d4>
 80216c8:	6861      	ldr	r1, [r4, #4]
 80216ca:	9801      	ldr	r0, [sp, #4]
 80216cc:	3101      	adds	r1, #1
 80216ce:	f7fd ff93 	bl	801f5f8 <_Balloc>
 80216d2:	4681      	mov	r9, r0
 80216d4:	b918      	cbnz	r0, 80216de <__gethex+0x3ba>
 80216d6:	4b1a      	ldr	r3, [pc, #104]	@ (8021740 <__gethex+0x41c>)
 80216d8:	4602      	mov	r2, r0
 80216da:	2184      	movs	r1, #132	@ 0x84
 80216dc:	e6c5      	b.n	802146a <__gethex+0x146>
 80216de:	6922      	ldr	r2, [r4, #16]
 80216e0:	3202      	adds	r2, #2
 80216e2:	f104 010c 	add.w	r1, r4, #12
 80216e6:	0092      	lsls	r2, r2, #2
 80216e8:	300c      	adds	r0, #12
 80216ea:	f7fd f806 	bl	801e6fa <memcpy>
 80216ee:	4621      	mov	r1, r4
 80216f0:	9801      	ldr	r0, [sp, #4]
 80216f2:	f7fd ffc1 	bl	801f678 <_Bfree>
 80216f6:	464c      	mov	r4, r9
 80216f8:	6923      	ldr	r3, [r4, #16]
 80216fa:	1c5a      	adds	r2, r3, #1
 80216fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021700:	6122      	str	r2, [r4, #16]
 8021702:	2201      	movs	r2, #1
 8021704:	615a      	str	r2, [r3, #20]
 8021706:	e7be      	b.n	8021686 <__gethex+0x362>
 8021708:	6922      	ldr	r2, [r4, #16]
 802170a:	455a      	cmp	r2, fp
 802170c:	dd0b      	ble.n	8021726 <__gethex+0x402>
 802170e:	2101      	movs	r1, #1
 8021710:	4620      	mov	r0, r4
 8021712:	f7ff fda0 	bl	8021256 <rshift>
 8021716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802171a:	3701      	adds	r7, #1
 802171c:	42bb      	cmp	r3, r7
 802171e:	f6ff aee0 	blt.w	80214e2 <__gethex+0x1be>
 8021722:	2501      	movs	r5, #1
 8021724:	e7c2      	b.n	80216ac <__gethex+0x388>
 8021726:	f016 061f 	ands.w	r6, r6, #31
 802172a:	d0fa      	beq.n	8021722 <__gethex+0x3fe>
 802172c:	4453      	add	r3, sl
 802172e:	f1c6 0620 	rsb	r6, r6, #32
 8021732:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021736:	f7fe f851 	bl	801f7dc <__hi0bits>
 802173a:	42b0      	cmp	r0, r6
 802173c:	dbe7      	blt.n	802170e <__gethex+0x3ea>
 802173e:	e7f0      	b.n	8021722 <__gethex+0x3fe>
 8021740:	080260a1 	.word	0x080260a1

08021744 <L_shift>:
 8021744:	f1c2 0208 	rsb	r2, r2, #8
 8021748:	0092      	lsls	r2, r2, #2
 802174a:	b570      	push	{r4, r5, r6, lr}
 802174c:	f1c2 0620 	rsb	r6, r2, #32
 8021750:	6843      	ldr	r3, [r0, #4]
 8021752:	6804      	ldr	r4, [r0, #0]
 8021754:	fa03 f506 	lsl.w	r5, r3, r6
 8021758:	432c      	orrs	r4, r5
 802175a:	40d3      	lsrs	r3, r2
 802175c:	6004      	str	r4, [r0, #0]
 802175e:	f840 3f04 	str.w	r3, [r0, #4]!
 8021762:	4288      	cmp	r0, r1
 8021764:	d3f4      	bcc.n	8021750 <L_shift+0xc>
 8021766:	bd70      	pop	{r4, r5, r6, pc}

08021768 <__match>:
 8021768:	b530      	push	{r4, r5, lr}
 802176a:	6803      	ldr	r3, [r0, #0]
 802176c:	3301      	adds	r3, #1
 802176e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021772:	b914      	cbnz	r4, 802177a <__match+0x12>
 8021774:	6003      	str	r3, [r0, #0]
 8021776:	2001      	movs	r0, #1
 8021778:	bd30      	pop	{r4, r5, pc}
 802177a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802177e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021782:	2d19      	cmp	r5, #25
 8021784:	bf98      	it	ls
 8021786:	3220      	addls	r2, #32
 8021788:	42a2      	cmp	r2, r4
 802178a:	d0f0      	beq.n	802176e <__match+0x6>
 802178c:	2000      	movs	r0, #0
 802178e:	e7f3      	b.n	8021778 <__match+0x10>

08021790 <__hexnan>:
 8021790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021794:	680b      	ldr	r3, [r1, #0]
 8021796:	6801      	ldr	r1, [r0, #0]
 8021798:	115e      	asrs	r6, r3, #5
 802179a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802179e:	f013 031f 	ands.w	r3, r3, #31
 80217a2:	b087      	sub	sp, #28
 80217a4:	bf18      	it	ne
 80217a6:	3604      	addne	r6, #4
 80217a8:	2500      	movs	r5, #0
 80217aa:	1f37      	subs	r7, r6, #4
 80217ac:	4682      	mov	sl, r0
 80217ae:	4690      	mov	r8, r2
 80217b0:	9301      	str	r3, [sp, #4]
 80217b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80217b6:	46b9      	mov	r9, r7
 80217b8:	463c      	mov	r4, r7
 80217ba:	9502      	str	r5, [sp, #8]
 80217bc:	46ab      	mov	fp, r5
 80217be:	784a      	ldrb	r2, [r1, #1]
 80217c0:	1c4b      	adds	r3, r1, #1
 80217c2:	9303      	str	r3, [sp, #12]
 80217c4:	b342      	cbz	r2, 8021818 <__hexnan+0x88>
 80217c6:	4610      	mov	r0, r2
 80217c8:	9105      	str	r1, [sp, #20]
 80217ca:	9204      	str	r2, [sp, #16]
 80217cc:	f7ff fd95 	bl	80212fa <__hexdig_fun>
 80217d0:	2800      	cmp	r0, #0
 80217d2:	d151      	bne.n	8021878 <__hexnan+0xe8>
 80217d4:	9a04      	ldr	r2, [sp, #16]
 80217d6:	9905      	ldr	r1, [sp, #20]
 80217d8:	2a20      	cmp	r2, #32
 80217da:	d818      	bhi.n	802180e <__hexnan+0x7e>
 80217dc:	9b02      	ldr	r3, [sp, #8]
 80217de:	459b      	cmp	fp, r3
 80217e0:	dd13      	ble.n	802180a <__hexnan+0x7a>
 80217e2:	454c      	cmp	r4, r9
 80217e4:	d206      	bcs.n	80217f4 <__hexnan+0x64>
 80217e6:	2d07      	cmp	r5, #7
 80217e8:	dc04      	bgt.n	80217f4 <__hexnan+0x64>
 80217ea:	462a      	mov	r2, r5
 80217ec:	4649      	mov	r1, r9
 80217ee:	4620      	mov	r0, r4
 80217f0:	f7ff ffa8 	bl	8021744 <L_shift>
 80217f4:	4544      	cmp	r4, r8
 80217f6:	d952      	bls.n	802189e <__hexnan+0x10e>
 80217f8:	2300      	movs	r3, #0
 80217fa:	f1a4 0904 	sub.w	r9, r4, #4
 80217fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8021802:	f8cd b008 	str.w	fp, [sp, #8]
 8021806:	464c      	mov	r4, r9
 8021808:	461d      	mov	r5, r3
 802180a:	9903      	ldr	r1, [sp, #12]
 802180c:	e7d7      	b.n	80217be <__hexnan+0x2e>
 802180e:	2a29      	cmp	r2, #41	@ 0x29
 8021810:	d157      	bne.n	80218c2 <__hexnan+0x132>
 8021812:	3102      	adds	r1, #2
 8021814:	f8ca 1000 	str.w	r1, [sl]
 8021818:	f1bb 0f00 	cmp.w	fp, #0
 802181c:	d051      	beq.n	80218c2 <__hexnan+0x132>
 802181e:	454c      	cmp	r4, r9
 8021820:	d206      	bcs.n	8021830 <__hexnan+0xa0>
 8021822:	2d07      	cmp	r5, #7
 8021824:	dc04      	bgt.n	8021830 <__hexnan+0xa0>
 8021826:	462a      	mov	r2, r5
 8021828:	4649      	mov	r1, r9
 802182a:	4620      	mov	r0, r4
 802182c:	f7ff ff8a 	bl	8021744 <L_shift>
 8021830:	4544      	cmp	r4, r8
 8021832:	d936      	bls.n	80218a2 <__hexnan+0x112>
 8021834:	f1a8 0204 	sub.w	r2, r8, #4
 8021838:	4623      	mov	r3, r4
 802183a:	f853 1b04 	ldr.w	r1, [r3], #4
 802183e:	f842 1f04 	str.w	r1, [r2, #4]!
 8021842:	429f      	cmp	r7, r3
 8021844:	d2f9      	bcs.n	802183a <__hexnan+0xaa>
 8021846:	1b3b      	subs	r3, r7, r4
 8021848:	f023 0303 	bic.w	r3, r3, #3
 802184c:	3304      	adds	r3, #4
 802184e:	3401      	adds	r4, #1
 8021850:	3e03      	subs	r6, #3
 8021852:	42b4      	cmp	r4, r6
 8021854:	bf88      	it	hi
 8021856:	2304      	movhi	r3, #4
 8021858:	4443      	add	r3, r8
 802185a:	2200      	movs	r2, #0
 802185c:	f843 2b04 	str.w	r2, [r3], #4
 8021860:	429f      	cmp	r7, r3
 8021862:	d2fb      	bcs.n	802185c <__hexnan+0xcc>
 8021864:	683b      	ldr	r3, [r7, #0]
 8021866:	b91b      	cbnz	r3, 8021870 <__hexnan+0xe0>
 8021868:	4547      	cmp	r7, r8
 802186a:	d128      	bne.n	80218be <__hexnan+0x12e>
 802186c:	2301      	movs	r3, #1
 802186e:	603b      	str	r3, [r7, #0]
 8021870:	2005      	movs	r0, #5
 8021872:	b007      	add	sp, #28
 8021874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021878:	3501      	adds	r5, #1
 802187a:	2d08      	cmp	r5, #8
 802187c:	f10b 0b01 	add.w	fp, fp, #1
 8021880:	dd06      	ble.n	8021890 <__hexnan+0x100>
 8021882:	4544      	cmp	r4, r8
 8021884:	d9c1      	bls.n	802180a <__hexnan+0x7a>
 8021886:	2300      	movs	r3, #0
 8021888:	f844 3c04 	str.w	r3, [r4, #-4]
 802188c:	2501      	movs	r5, #1
 802188e:	3c04      	subs	r4, #4
 8021890:	6822      	ldr	r2, [r4, #0]
 8021892:	f000 000f 	and.w	r0, r0, #15
 8021896:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802189a:	6020      	str	r0, [r4, #0]
 802189c:	e7b5      	b.n	802180a <__hexnan+0x7a>
 802189e:	2508      	movs	r5, #8
 80218a0:	e7b3      	b.n	802180a <__hexnan+0x7a>
 80218a2:	9b01      	ldr	r3, [sp, #4]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d0dd      	beq.n	8021864 <__hexnan+0xd4>
 80218a8:	f1c3 0320 	rsb	r3, r3, #32
 80218ac:	f04f 32ff 	mov.w	r2, #4294967295
 80218b0:	40da      	lsrs	r2, r3
 80218b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80218b6:	4013      	ands	r3, r2
 80218b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80218bc:	e7d2      	b.n	8021864 <__hexnan+0xd4>
 80218be:	3f04      	subs	r7, #4
 80218c0:	e7d0      	b.n	8021864 <__hexnan+0xd4>
 80218c2:	2004      	movs	r0, #4
 80218c4:	e7d5      	b.n	8021872 <__hexnan+0xe2>

080218c6 <__ascii_mbtowc>:
 80218c6:	b082      	sub	sp, #8
 80218c8:	b901      	cbnz	r1, 80218cc <__ascii_mbtowc+0x6>
 80218ca:	a901      	add	r1, sp, #4
 80218cc:	b142      	cbz	r2, 80218e0 <__ascii_mbtowc+0x1a>
 80218ce:	b14b      	cbz	r3, 80218e4 <__ascii_mbtowc+0x1e>
 80218d0:	7813      	ldrb	r3, [r2, #0]
 80218d2:	600b      	str	r3, [r1, #0]
 80218d4:	7812      	ldrb	r2, [r2, #0]
 80218d6:	1e10      	subs	r0, r2, #0
 80218d8:	bf18      	it	ne
 80218da:	2001      	movne	r0, #1
 80218dc:	b002      	add	sp, #8
 80218de:	4770      	bx	lr
 80218e0:	4610      	mov	r0, r2
 80218e2:	e7fb      	b.n	80218dc <__ascii_mbtowc+0x16>
 80218e4:	f06f 0001 	mvn.w	r0, #1
 80218e8:	e7f8      	b.n	80218dc <__ascii_mbtowc+0x16>

080218ea <_realloc_r>:
 80218ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218ee:	4680      	mov	r8, r0
 80218f0:	4615      	mov	r5, r2
 80218f2:	460c      	mov	r4, r1
 80218f4:	b921      	cbnz	r1, 8021900 <_realloc_r+0x16>
 80218f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80218fa:	4611      	mov	r1, r2
 80218fc:	f7fd bdf0 	b.w	801f4e0 <_malloc_r>
 8021900:	b92a      	cbnz	r2, 802190e <_realloc_r+0x24>
 8021902:	f7fd fd79 	bl	801f3f8 <_free_r>
 8021906:	2400      	movs	r4, #0
 8021908:	4620      	mov	r0, r4
 802190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802190e:	f000 f8ef 	bl	8021af0 <_malloc_usable_size_r>
 8021912:	4285      	cmp	r5, r0
 8021914:	4606      	mov	r6, r0
 8021916:	d802      	bhi.n	802191e <_realloc_r+0x34>
 8021918:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802191c:	d8f4      	bhi.n	8021908 <_realloc_r+0x1e>
 802191e:	4629      	mov	r1, r5
 8021920:	4640      	mov	r0, r8
 8021922:	f7fd fddd 	bl	801f4e0 <_malloc_r>
 8021926:	4607      	mov	r7, r0
 8021928:	2800      	cmp	r0, #0
 802192a:	d0ec      	beq.n	8021906 <_realloc_r+0x1c>
 802192c:	42b5      	cmp	r5, r6
 802192e:	462a      	mov	r2, r5
 8021930:	4621      	mov	r1, r4
 8021932:	bf28      	it	cs
 8021934:	4632      	movcs	r2, r6
 8021936:	f7fc fee0 	bl	801e6fa <memcpy>
 802193a:	4621      	mov	r1, r4
 802193c:	4640      	mov	r0, r8
 802193e:	f7fd fd5b 	bl	801f3f8 <_free_r>
 8021942:	463c      	mov	r4, r7
 8021944:	e7e0      	b.n	8021908 <_realloc_r+0x1e>

08021946 <__ascii_wctomb>:
 8021946:	4603      	mov	r3, r0
 8021948:	4608      	mov	r0, r1
 802194a:	b141      	cbz	r1, 802195e <__ascii_wctomb+0x18>
 802194c:	2aff      	cmp	r2, #255	@ 0xff
 802194e:	d904      	bls.n	802195a <__ascii_wctomb+0x14>
 8021950:	228a      	movs	r2, #138	@ 0x8a
 8021952:	601a      	str	r2, [r3, #0]
 8021954:	f04f 30ff 	mov.w	r0, #4294967295
 8021958:	4770      	bx	lr
 802195a:	700a      	strb	r2, [r1, #0]
 802195c:	2001      	movs	r0, #1
 802195e:	4770      	bx	lr

08021960 <__swhatbuf_r>:
 8021960:	b570      	push	{r4, r5, r6, lr}
 8021962:	460c      	mov	r4, r1
 8021964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021968:	2900      	cmp	r1, #0
 802196a:	b096      	sub	sp, #88	@ 0x58
 802196c:	4615      	mov	r5, r2
 802196e:	461e      	mov	r6, r3
 8021970:	da0d      	bge.n	802198e <__swhatbuf_r+0x2e>
 8021972:	89a3      	ldrh	r3, [r4, #12]
 8021974:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021978:	f04f 0100 	mov.w	r1, #0
 802197c:	bf14      	ite	ne
 802197e:	2340      	movne	r3, #64	@ 0x40
 8021980:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021984:	2000      	movs	r0, #0
 8021986:	6031      	str	r1, [r6, #0]
 8021988:	602b      	str	r3, [r5, #0]
 802198a:	b016      	add	sp, #88	@ 0x58
 802198c:	bd70      	pop	{r4, r5, r6, pc}
 802198e:	466a      	mov	r2, sp
 8021990:	f000 f878 	bl	8021a84 <_fstat_r>
 8021994:	2800      	cmp	r0, #0
 8021996:	dbec      	blt.n	8021972 <__swhatbuf_r+0x12>
 8021998:	9901      	ldr	r1, [sp, #4]
 802199a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802199e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80219a2:	4259      	negs	r1, r3
 80219a4:	4159      	adcs	r1, r3
 80219a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80219aa:	e7eb      	b.n	8021984 <__swhatbuf_r+0x24>

080219ac <__smakebuf_r>:
 80219ac:	898b      	ldrh	r3, [r1, #12]
 80219ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219b0:	079d      	lsls	r5, r3, #30
 80219b2:	4606      	mov	r6, r0
 80219b4:	460c      	mov	r4, r1
 80219b6:	d507      	bpl.n	80219c8 <__smakebuf_r+0x1c>
 80219b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80219bc:	6023      	str	r3, [r4, #0]
 80219be:	6123      	str	r3, [r4, #16]
 80219c0:	2301      	movs	r3, #1
 80219c2:	6163      	str	r3, [r4, #20]
 80219c4:	b003      	add	sp, #12
 80219c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219c8:	ab01      	add	r3, sp, #4
 80219ca:	466a      	mov	r2, sp
 80219cc:	f7ff ffc8 	bl	8021960 <__swhatbuf_r>
 80219d0:	9f00      	ldr	r7, [sp, #0]
 80219d2:	4605      	mov	r5, r0
 80219d4:	4639      	mov	r1, r7
 80219d6:	4630      	mov	r0, r6
 80219d8:	f7fd fd82 	bl	801f4e0 <_malloc_r>
 80219dc:	b948      	cbnz	r0, 80219f2 <__smakebuf_r+0x46>
 80219de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80219e2:	059a      	lsls	r2, r3, #22
 80219e4:	d4ee      	bmi.n	80219c4 <__smakebuf_r+0x18>
 80219e6:	f023 0303 	bic.w	r3, r3, #3
 80219ea:	f043 0302 	orr.w	r3, r3, #2
 80219ee:	81a3      	strh	r3, [r4, #12]
 80219f0:	e7e2      	b.n	80219b8 <__smakebuf_r+0xc>
 80219f2:	89a3      	ldrh	r3, [r4, #12]
 80219f4:	6020      	str	r0, [r4, #0]
 80219f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80219fa:	81a3      	strh	r3, [r4, #12]
 80219fc:	9b01      	ldr	r3, [sp, #4]
 80219fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021a02:	b15b      	cbz	r3, 8021a1c <__smakebuf_r+0x70>
 8021a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a08:	4630      	mov	r0, r6
 8021a0a:	f000 f84d 	bl	8021aa8 <_isatty_r>
 8021a0e:	b128      	cbz	r0, 8021a1c <__smakebuf_r+0x70>
 8021a10:	89a3      	ldrh	r3, [r4, #12]
 8021a12:	f023 0303 	bic.w	r3, r3, #3
 8021a16:	f043 0301 	orr.w	r3, r3, #1
 8021a1a:	81a3      	strh	r3, [r4, #12]
 8021a1c:	89a3      	ldrh	r3, [r4, #12]
 8021a1e:	431d      	orrs	r5, r3
 8021a20:	81a5      	strh	r5, [r4, #12]
 8021a22:	e7cf      	b.n	80219c4 <__smakebuf_r+0x18>

08021a24 <_raise_r>:
 8021a24:	291f      	cmp	r1, #31
 8021a26:	b538      	push	{r3, r4, r5, lr}
 8021a28:	4605      	mov	r5, r0
 8021a2a:	460c      	mov	r4, r1
 8021a2c:	d904      	bls.n	8021a38 <_raise_r+0x14>
 8021a2e:	2316      	movs	r3, #22
 8021a30:	6003      	str	r3, [r0, #0]
 8021a32:	f04f 30ff 	mov.w	r0, #4294967295
 8021a36:	bd38      	pop	{r3, r4, r5, pc}
 8021a38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021a3a:	b112      	cbz	r2, 8021a42 <_raise_r+0x1e>
 8021a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021a40:	b94b      	cbnz	r3, 8021a56 <_raise_r+0x32>
 8021a42:	4628      	mov	r0, r5
 8021a44:	f000 f852 	bl	8021aec <_getpid_r>
 8021a48:	4622      	mov	r2, r4
 8021a4a:	4601      	mov	r1, r0
 8021a4c:	4628      	mov	r0, r5
 8021a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a52:	f000 b839 	b.w	8021ac8 <_kill_r>
 8021a56:	2b01      	cmp	r3, #1
 8021a58:	d00a      	beq.n	8021a70 <_raise_r+0x4c>
 8021a5a:	1c59      	adds	r1, r3, #1
 8021a5c:	d103      	bne.n	8021a66 <_raise_r+0x42>
 8021a5e:	2316      	movs	r3, #22
 8021a60:	6003      	str	r3, [r0, #0]
 8021a62:	2001      	movs	r0, #1
 8021a64:	e7e7      	b.n	8021a36 <_raise_r+0x12>
 8021a66:	2100      	movs	r1, #0
 8021a68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021a6c:	4620      	mov	r0, r4
 8021a6e:	4798      	blx	r3
 8021a70:	2000      	movs	r0, #0
 8021a72:	e7e0      	b.n	8021a36 <_raise_r+0x12>

08021a74 <raise>:
 8021a74:	4b02      	ldr	r3, [pc, #8]	@ (8021a80 <raise+0xc>)
 8021a76:	4601      	mov	r1, r0
 8021a78:	6818      	ldr	r0, [r3, #0]
 8021a7a:	f7ff bfd3 	b.w	8021a24 <_raise_r>
 8021a7e:	bf00      	nop
 8021a80:	20000054 	.word	0x20000054

08021a84 <_fstat_r>:
 8021a84:	b538      	push	{r3, r4, r5, lr}
 8021a86:	4d07      	ldr	r5, [pc, #28]	@ (8021aa4 <_fstat_r+0x20>)
 8021a88:	2300      	movs	r3, #0
 8021a8a:	4604      	mov	r4, r0
 8021a8c:	4608      	mov	r0, r1
 8021a8e:	4611      	mov	r1, r2
 8021a90:	602b      	str	r3, [r5, #0]
 8021a92:	f7e0 f9ad 	bl	8001df0 <_fstat>
 8021a96:	1c43      	adds	r3, r0, #1
 8021a98:	d102      	bne.n	8021aa0 <_fstat_r+0x1c>
 8021a9a:	682b      	ldr	r3, [r5, #0]
 8021a9c:	b103      	cbz	r3, 8021aa0 <_fstat_r+0x1c>
 8021a9e:	6023      	str	r3, [r4, #0]
 8021aa0:	bd38      	pop	{r3, r4, r5, pc}
 8021aa2:	bf00      	nop
 8021aa4:	20012948 	.word	0x20012948

08021aa8 <_isatty_r>:
 8021aa8:	b538      	push	{r3, r4, r5, lr}
 8021aaa:	4d06      	ldr	r5, [pc, #24]	@ (8021ac4 <_isatty_r+0x1c>)
 8021aac:	2300      	movs	r3, #0
 8021aae:	4604      	mov	r4, r0
 8021ab0:	4608      	mov	r0, r1
 8021ab2:	602b      	str	r3, [r5, #0]
 8021ab4:	f7e0 f9ac 	bl	8001e10 <_isatty>
 8021ab8:	1c43      	adds	r3, r0, #1
 8021aba:	d102      	bne.n	8021ac2 <_isatty_r+0x1a>
 8021abc:	682b      	ldr	r3, [r5, #0]
 8021abe:	b103      	cbz	r3, 8021ac2 <_isatty_r+0x1a>
 8021ac0:	6023      	str	r3, [r4, #0]
 8021ac2:	bd38      	pop	{r3, r4, r5, pc}
 8021ac4:	20012948 	.word	0x20012948

08021ac8 <_kill_r>:
 8021ac8:	b538      	push	{r3, r4, r5, lr}
 8021aca:	4d07      	ldr	r5, [pc, #28]	@ (8021ae8 <_kill_r+0x20>)
 8021acc:	2300      	movs	r3, #0
 8021ace:	4604      	mov	r4, r0
 8021ad0:	4608      	mov	r0, r1
 8021ad2:	4611      	mov	r1, r2
 8021ad4:	602b      	str	r3, [r5, #0]
 8021ad6:	f7e0 f945 	bl	8001d64 <_kill>
 8021ada:	1c43      	adds	r3, r0, #1
 8021adc:	d102      	bne.n	8021ae4 <_kill_r+0x1c>
 8021ade:	682b      	ldr	r3, [r5, #0]
 8021ae0:	b103      	cbz	r3, 8021ae4 <_kill_r+0x1c>
 8021ae2:	6023      	str	r3, [r4, #0]
 8021ae4:	bd38      	pop	{r3, r4, r5, pc}
 8021ae6:	bf00      	nop
 8021ae8:	20012948 	.word	0x20012948

08021aec <_getpid_r>:
 8021aec:	f7e0 b932 	b.w	8001d54 <_getpid>

08021af0 <_malloc_usable_size_r>:
 8021af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021af4:	1f18      	subs	r0, r3, #4
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	bfbc      	itt	lt
 8021afa:	580b      	ldrlt	r3, [r1, r0]
 8021afc:	18c0      	addlt	r0, r0, r3
 8021afe:	4770      	bx	lr

08021b00 <_init>:
 8021b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b02:	bf00      	nop
 8021b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b06:	bc08      	pop	{r3}
 8021b08:	469e      	mov	lr, r3
 8021b0a:	4770      	bx	lr

08021b0c <_fini>:
 8021b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b0e:	bf00      	nop
 8021b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b12:	bc08      	pop	{r3}
 8021b14:	469e      	mov	lr, r3
 8021b16:	4770      	bx	lr
